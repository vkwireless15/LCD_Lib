
SimpleGraphics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041dc  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080043a4  080043a4  000143a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043bc  080043bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080043bc  080043bc  000143bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043c4  080043c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043c4  080043c4  000143c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043c8  080043c8  000143c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080043cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000000c  080043d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  080043d8  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002313c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003964  00000000  00000000  00043178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  00046ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001620  00000000  00000000  00048248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003cdd  00000000  00000000  00049868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002443b  00000000  00000000  0004d545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcb44  00000000  00000000  00071980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016e4c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042f0  00000000  00000000  0016e518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000163f3  00000000  00000000  00172808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800438c 	.word	0x0800438c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	0800438c 	.word	0x0800438c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MainFunc>:
#include "Code.h"
#include "SDRAM.h"
#include "SimpleGraphics.h"

void MainFunc ()
{
 8000500:	b508      	push	{r3, lr}

	SDRAM_Init();
 8000502:	f000 f801 	bl	8000508 <SDRAM_Init>


	while(1)
 8000506:	e7fe      	b.n	8000506 <MainFunc+0x6>

08000508 <SDRAM_Init>:
HAL_StatusTypeDef hal_stat;



void SDRAM_Init()
{
 8000508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    unsigned int tmpmrd = 0;
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800050c:	4c25      	ldr	r4, [pc, #148]	; (80005a4 <SDRAM_Init+0x9c>)
 800050e:	2701      	movs	r7, #1
 8000510:	6027      	str	r7, [r4, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000512:	f04f 0810 	mov.w	r8, #16
 8000516:	f8c4 8004 	str.w	r8, [r4, #4]
	command.AutoRefreshNumber = 1;
 800051a:	60a7      	str	r7, [r4, #8]
	command.ModeRegisterDefinition = 0;
 800051c:	f04f 0900 	mov.w	r9, #0
 8000520:	f8c4 900c 	str.w	r9, [r4, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8000524:	4d20      	ldr	r5, [pc, #128]	; (80005a8 <SDRAM_Init+0xa0>)
 8000526:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800052a:	4621      	mov	r1, r4
 800052c:	4628      	mov	r0, r5
 800052e:	f003 f96d 	bl	800380c <HAL_SDRAM_SendCommand>
 8000532:	4e1e      	ldr	r6, [pc, #120]	; (80005ac <SDRAM_Init+0xa4>)
 8000534:	7030      	strb	r0, [r6, #0]
	HAL_Delay(50);
 8000536:	2032      	movs	r0, #50	; 0x32
 8000538:	f000 ffba 	bl	80014b0 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 800053c:	2302      	movs	r3, #2
 800053e:	6023      	str	r3, [r4, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000540:	f8c4 8004 	str.w	r8, [r4, #4]
	command.AutoRefreshNumber = 1;
 8000544:	60a7      	str	r7, [r4, #8]
	command.ModeRegisterDefinition = 0;
 8000546:	f8c4 900c 	str.w	r9, [r4, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 800054a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800054e:	4621      	mov	r1, r4
 8000550:	4628      	mov	r0, r5
 8000552:	f003 f95b 	bl	800380c <HAL_SDRAM_SendCommand>
 8000556:	7030      	strb	r0, [r6, #0]

	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000558:	2303      	movs	r3, #3
 800055a:	6023      	str	r3, [r4, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800055c:	f8c4 8004 	str.w	r8, [r4, #4]
	command.AutoRefreshNumber = 8;
 8000560:	2308      	movs	r3, #8
 8000562:	60a3      	str	r3, [r4, #8]
	command.ModeRegisterDefinition = 0;
 8000564:	f8c4 900c 	str.w	r9, [r4, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8000568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800056c:	4621      	mov	r1, r4
 800056e:	4628      	mov	r0, r5
 8000570:	f003 f94c 	bl	800380c <HAL_SDRAM_SendCommand>
 8000574:	7030      	strb	r0, [r6, #0]

	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2 | SDRAM_MODEREG_OPERATING_MODE_STANDARD | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000576:	2304      	movs	r3, #4
 8000578:	6023      	str	r3, [r4, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800057a:	f8c4 8004 	str.w	r8, [r4, #4]
	command.AutoRefreshNumber = 1;
 800057e:	60a7      	str	r7, [r4, #8]
	command.ModeRegisterDefinition = tmpmrd;
 8000580:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000584:	60e3      	str	r3, [r4, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8000586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800058a:	4621      	mov	r1, r4
 800058c:	4628      	mov	r0, r5
 800058e:	f003 f93d 	bl	800380c <HAL_SDRAM_SendCommand>
 8000592:	7030      	strb	r0, [r6, #0]

	HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8000594:	f240 6103 	movw	r1, #1539	; 0x603
 8000598:	4628      	mov	r0, r5
 800059a:	f003 f952 	bl	8003842 <HAL_SDRAM_ProgramRefreshRate>
}
 800059e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80005a2:	bf00      	nop
 80005a4:	2000002c 	.word	0x2000002c
 80005a8:	20000218 	.word	0x20000218
 80005ac:	2000003c 	.word	0x2000003c

080005b0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80005b0:	b508      	push	{r3, lr}

  /* Disables the MPU */
  HAL_MPU_Disable();
 80005b2:	f000 ffe3 	bl	800157c <HAL_MPU_Disable>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80005b6:	2004      	movs	r0, #4
 80005b8:	f000 fff0 	bl	800159c <HAL_MPU_Enable>

}
 80005bc:	bd08      	pop	{r3, pc}
	...

080005c0 <MX_GPIO_Init>:
{
 80005c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005c4:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	2400      	movs	r4, #0
 80005c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80005ca:	940c      	str	r4, [sp, #48]	; 0x30
 80005cc:	940d      	str	r4, [sp, #52]	; 0x34
 80005ce:	940e      	str	r4, [sp, #56]	; 0x38
 80005d0:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005d2:	4baa      	ldr	r3, [pc, #680]	; (800087c <MX_GPIO_Init+0x2bc>)
 80005d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d6:	f042 0210 	orr.w	r2, r2, #16
 80005da:	631a      	str	r2, [r3, #48]	; 0x30
 80005dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005de:	f002 0210 	and.w	r2, r2, #16
 80005e2:	9200      	str	r2, [sp, #0]
 80005e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005ec:	631a      	str	r2, [r3, #48]	; 0x30
 80005ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80005f4:	9201      	str	r2, [sp, #4]
 80005f6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fa:	f042 0202 	orr.w	r2, r2, #2
 80005fe:	631a      	str	r2, [r3, #48]	; 0x30
 8000600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000602:	f002 0202 	and.w	r2, r2, #2
 8000606:	9202      	str	r2, [sp, #8]
 8000608:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800060c:	f042 0208 	orr.w	r2, r2, #8
 8000610:	631a      	str	r2, [r3, #48]	; 0x30
 8000612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000614:	f002 0208 	and.w	r2, r2, #8
 8000618:	9203      	str	r2, [sp, #12]
 800061a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800061e:	f042 0204 	orr.w	r2, r2, #4
 8000622:	631a      	str	r2, [r3, #48]	; 0x30
 8000624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000626:	f002 0204 	and.w	r2, r2, #4
 800062a:	9204      	str	r2, [sp, #16]
 800062c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000630:	f042 0201 	orr.w	r2, r2, #1
 8000634:	631a      	str	r2, [r3, #48]	; 0x30
 8000636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000638:	f002 0201 	and.w	r2, r2, #1
 800063c:	9205      	str	r2, [sp, #20]
 800063e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000646:	631a      	str	r2, [r3, #48]	; 0x30
 8000648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800064a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800064e:	9206      	str	r2, [sp, #24]
 8000650:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
 800065a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800065c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000660:	9207      	str	r2, [sp, #28]
 8000662:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000666:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800066a:	631a      	str	r2, [r3, #48]	; 0x30
 800066c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800066e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000672:	9208      	str	r2, [sp, #32]
 8000674:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000678:	f042 0220 	orr.w	r2, r2, #32
 800067c:	631a      	str	r2, [r3, #48]	; 0x30
 800067e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000680:	f002 0220 	and.w	r2, r2, #32
 8000684:	9209      	str	r2, [sp, #36]	; 0x24
 8000686:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800068a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800068e:	631a      	str	r2, [r3, #48]	; 0x30
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000696:	930a      	str	r3, [sp, #40]	; 0x28
 8000698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800069a:	2201      	movs	r2, #1
 800069c:	2120      	movs	r1, #32
 800069e:	4878      	ldr	r0, [pc, #480]	; (8000880 <MX_GPIO_Init+0x2c0>)
 80006a0:	f001 f9ae 	bl	8001a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80006a4:	4622      	mov	r2, r4
 80006a6:	210c      	movs	r1, #12
 80006a8:	4876      	ldr	r0, [pc, #472]	; (8000884 <MX_GPIO_Init+0x2c4>)
 80006aa:	f001 f9a9 	bl	8001a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2108      	movs	r1, #8
 80006b2:	4875      	ldr	r0, [pc, #468]	; (8000888 <MX_GPIO_Init+0x2c8>)
 80006b4:	f001 f9a4 	bl	8001a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006be:	4871      	ldr	r0, [pc, #452]	; (8000884 <MX_GPIO_Init+0x2c4>)
 80006c0:	f001 f99e 	bl	8001a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80006c4:	4622      	mov	r2, r4
 80006c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ca:	4870      	ldr	r0, [pc, #448]	; (800088c <MX_GPIO_Init+0x2cc>)
 80006cc:	f001 f998 	bl	8001a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80006d0:	4622      	mov	r2, r4
 80006d2:	21c8      	movs	r1, #200	; 0xc8
 80006d4:	486e      	ldr	r0, [pc, #440]	; (8000890 <MX_GPIO_Init+0x2d0>)
 80006d6:	f001 f993 	bl	8001a00 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80006da:	2308      	movs	r3, #8
 80006dc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006de:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006e2:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 800089c <MX_GPIO_Init+0x2dc>
 80006e6:	a90b      	add	r1, sp, #44	; 0x2c
 80006e8:	4648      	mov	r0, r9
 80006ea:	f001 f899 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80006ee:	2304      	movs	r3, #4
 80006f0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f2:	2502      	movs	r5, #2
 80006f4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f8:	2603      	movs	r6, #3
 80006fa:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80006fc:	2309      	movs	r3, #9
 80006fe:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000700:	a90b      	add	r1, sp, #44	; 0x2c
 8000702:	4648      	mov	r0, r9
 8000704:	f001 f88c 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000708:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800070c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000714:	230b      	movs	r3, #11
 8000716:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000718:	a90b      	add	r1, sp, #44	; 0x2c
 800071a:	485d      	ldr	r0, [pc, #372]	; (8000890 <MX_GPIO_Init+0x2d0>)
 800071c:	f001 f880 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000720:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000724:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000726:	2312      	movs	r3, #18
 8000728:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800072a:	2701      	movs	r7, #1
 800072c:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000730:	2304      	movs	r3, #4
 8000732:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000734:	f8df b168 	ldr.w	fp, [pc, #360]	; 80008a0 <MX_GPIO_Init+0x2e0>
 8000738:	a90b      	add	r1, sp, #44	; 0x2c
 800073a:	4658      	mov	r0, fp
 800073c:	f001 f870 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000740:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000744:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074a:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800074c:	f04f 080a 	mov.w	r8, #10
 8000750:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000754:	a90b      	add	r1, sp, #44	; 0x2c
 8000756:	4658      	mov	r0, fp
 8000758:	f001 f862 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800075c:	2310      	movs	r3, #16
 800075e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000766:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000768:	a90b      	add	r1, sp, #44	; 0x2c
 800076a:	4658      	mov	r0, fp
 800076c:	f001 f858 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800077a:	2308      	movs	r3, #8
 800077c:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800077e:	a90b      	add	r1, sp, #44	; 0x2c
 8000780:	483f      	ldr	r0, [pc, #252]	; (8000880 <MX_GPIO_Init+0x2c0>)
 8000782:	f001 f84d 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800078a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000792:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000794:	f8df a10c 	ldr.w	sl, [pc, #268]	; 80008a4 <MX_GPIO_Init+0x2e4>
 8000798:	a90b      	add	r1, sp, #44	; 0x2c
 800079a:	4650      	mov	r0, sl
 800079c:	f001 f840 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80007a0:	2360      	movs	r3, #96	; 0x60
 80007a2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007aa:	230d      	movs	r3, #13
 80007ac:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ae:	a90b      	add	r1, sp, #44	; 0x2c
 80007b0:	4648      	mov	r0, r9
 80007b2:	f001 f835 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80007b6:	2380      	movs	r3, #128	; 0x80
 80007b8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007c0:	2307      	movs	r3, #7
 80007c2:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80007c4:	a90b      	add	r1, sp, #44	; 0x2c
 80007c6:	4658      	mov	r0, fp
 80007c8:	f001 f82a 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80007cc:	2340      	movs	r3, #64	; 0x40
 80007ce:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80007d6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80007da:	a90b      	add	r1, sp, #44	; 0x2c
 80007dc:	4658      	mov	r0, fp
 80007de:	f001 f81f 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80007e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e8:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007ec:	a90b      	add	r1, sp, #44	; 0x2c
 80007ee:	4829      	ldr	r0, [pc, #164]	; (8000894 <MX_GPIO_Init+0x2d4>)
 80007f0:	f001 f816 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80007f4:	2340      	movs	r3, #64	; 0x40
 80007f6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007f8:	4b27      	ldr	r3, [pc, #156]	; (8000898 <MX_GPIO_Init+0x2d8>)
 80007fa:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80007fe:	a90b      	add	r1, sp, #44	; 0x2c
 8000800:	481f      	ldr	r0, [pc, #124]	; (8000880 <MX_GPIO_Init+0x2c0>)
 8000802:	f001 f80d 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000806:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800080a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000810:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000812:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	a90b      	add	r1, sp, #44	; 0x2c
 8000818:	4650      	mov	r0, sl
 800081a:	f001 f801 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800081e:	23f0      	movs	r3, #240	; 0xf0
 8000820:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000828:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800082c:	a90b      	add	r1, sp, #44	; 0x2c
 800082e:	4815      	ldr	r0, [pc, #84]	; (8000884 <MX_GPIO_Init+0x2c4>)
 8000830:	f000 fff6 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000838:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000840:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000844:	a90b      	add	r1, sp, #44	; 0x2c
 8000846:	4812      	ldr	r0, [pc, #72]	; (8000890 <MX_GPIO_Init+0x2d0>)
 8000848:	f000 ffea 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800084c:	2320      	movs	r3, #32
 800084e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000856:	a90b      	add	r1, sp, #44	; 0x2c
 8000858:	4809      	ldr	r0, [pc, #36]	; (8000880 <MX_GPIO_Init+0x2c0>)
 800085a:	f000 ffe1 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800085e:	2208      	movs	r2, #8
 8000860:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000868:	220d      	movs	r2, #13
 800086a:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800086c:	a90b      	add	r1, sp, #44	; 0x2c
 800086e:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_GPIO_Init+0x2c0>)
 8000870:	f000 ffd6 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000874:	f241 030c 	movw	r3, #4108	; 0x100c
 8000878:	930b      	str	r3, [sp, #44]	; 0x2c
 800087a:	e015      	b.n	80008a8 <MX_GPIO_Init+0x2e8>
 800087c:	40023800 	.word	0x40023800
 8000880:	40020c00 	.word	0x40020c00
 8000884:	40022000 	.word	0x40022000
 8000888:	40022800 	.word	0x40022800
 800088c:	40021c00 	.word	0x40021c00
 8000890:	40021800 	.word	0x40021800
 8000894:	40022400 	.word	0x40022400
 8000898:	10120000 	.word	0x10120000
 800089c:	40021000 	.word	0x40021000
 80008a0:	40020400 	.word	0x40020400
 80008a4:	40020000 	.word	0x40020000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008ae:	a90b      	add	r1, sp, #44	; 0x2c
 80008b0:	488e      	ldr	r0, [pc, #568]	; (8000aec <MX_GPIO_Init+0x52c>)
 80008b2:	f000 ffb5 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80008b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ba:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008bc:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f5a9 6900 	sub.w	r9, r9, #2048	; 0x800
 80008c4:	a90b      	add	r1, sp, #44	; 0x2c
 80008c6:	4648      	mov	r0, r9
 80008c8:	f000 ffaa 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80008cc:	2208      	movs	r2, #8
 80008ce:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80008d6:	a90b      	add	r1, sp, #44	; 0x2c
 80008d8:	4885      	ldr	r0, [pc, #532]	; (8000af0 <MX_GPIO_Init+0x530>)
 80008da:	f000 ffa1 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80008de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e2:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008ea:	220d      	movs	r2, #13
 80008ec:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80008ee:	a90b      	add	r1, sp, #44	; 0x2c
 80008f0:	4880      	ldr	r0, [pc, #512]	; (8000af4 <MX_GPIO_Init+0x534>)
 80008f2:	f000 ff95 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008f6:	2210      	movs	r2, #16
 80008f8:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fa:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008fe:	a90b      	add	r1, sp, #44	; 0x2c
 8000900:	487d      	ldr	r0, [pc, #500]	; (8000af8 <MX_GPIO_Init+0x538>)
 8000902:	f000 ff8d 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000906:	f248 0304 	movw	r3, #32772	; 0x8004
 800090a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000910:	a90b      	add	r1, sp, #44	; 0x2c
 8000912:	487a      	ldr	r0, [pc, #488]	; (8000afc <MX_GPIO_Init+0x53c>)
 8000914:	f000 ff84 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000918:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000920:	2205      	movs	r2, #5
 8000922:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000924:	a90b      	add	r1, sp, #44	; 0x2c
 8000926:	4871      	ldr	r0, [pc, #452]	; (8000aec <MX_GPIO_Init+0x52c>)
 8000928:	f000 ff7a 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800092c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000930:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000938:	a90b      	add	r1, sp, #44	; 0x2c
 800093a:	4870      	ldr	r0, [pc, #448]	; (8000afc <MX_GPIO_Init+0x53c>)
 800093c:	f000 ff70 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000940:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000944:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800094c:	220d      	movs	r2, #13
 800094e:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000950:	a90b      	add	r1, sp, #44	; 0x2c
 8000952:	486a      	ldr	r0, [pc, #424]	; (8000afc <MX_GPIO_Init+0x53c>)
 8000954:	f000 ff64 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000958:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000960:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000962:	a90b      	add	r1, sp, #44	; 0x2c
 8000964:	4861      	ldr	r0, [pc, #388]	; (8000aec <MX_GPIO_Init+0x52c>)
 8000966:	f000 ff5b 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 800096a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800096e:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000976:	2207      	movs	r2, #7
 8000978:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800097a:	a90b      	add	r1, sp, #44	; 0x2c
 800097c:	4650      	mov	r0, sl
 800097e:	f000 ff4f 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000986:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800098e:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000990:	a90b      	add	r1, sp, #44	; 0x2c
 8000992:	4650      	mov	r0, sl
 8000994:	f000 ff44 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000998:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800099c:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099e:	4b58      	ldr	r3, [pc, #352]	; (8000b00 <MX_GPIO_Init+0x540>)
 80009a0:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80009a4:	a90b      	add	r1, sp, #44	; 0x2c
 80009a6:	4851      	ldr	r0, [pc, #324]	; (8000aec <MX_GPIO_Init+0x52c>)
 80009a8:	f000 ff3a 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80009ac:	23c0      	movs	r3, #192	; 0xc0
 80009ae:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80009b6:	2308      	movs	r3, #8
 80009b8:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ba:	a90b      	add	r1, sp, #44	; 0x2c
 80009bc:	4648      	mov	r0, r9
 80009be:	f000 ff2f 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80009c2:	2310      	movs	r3, #16
 80009c4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80009cc:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80009d0:	a90b      	add	r1, sp, #44	; 0x2c
 80009d2:	484a      	ldr	r0, [pc, #296]	; (8000afc <MX_GPIO_Init+0x53c>)
 80009d4:	f000 ff24 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80009d8:	23c8      	movs	r3, #200	; 0xc8
 80009da:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009e2:	a90b      	add	r1, sp, #44	; 0x2c
 80009e4:	4843      	ldr	r0, [pc, #268]	; (8000af4 <MX_GPIO_Init+0x534>)
 80009e6:	f000 ff1b 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80009ea:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80009ee:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f0:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009f4:	a90b      	add	r1, sp, #44	; 0x2c
 80009f6:	4843      	ldr	r0, [pc, #268]	; (8000b04 <MX_GPIO_Init+0x544>)
 80009f8:	f000 ff12 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80009fc:	2305      	movs	r3, #5
 80009fe:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a04:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000a06:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0a:	a90b      	add	r1, sp, #44	; 0x2c
 8000a0c:	4648      	mov	r0, r9
 8000a0e:	f000 ff07 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a12:	2332      	movs	r3, #50	; 0x32
 8000a14:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1a:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a1c:	230b      	movs	r3, #11
 8000a1e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a20:	a90b      	add	r1, sp, #44	; 0x2c
 8000a22:	4648      	mov	r0, r9
 8000a24:	f000 fefc 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000a32:	2309      	movs	r3, #9
 8000a34:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	a90b      	add	r1, sp, #44	; 0x2c
 8000a38:	4658      	mov	r0, fp
 8000a3a:	f000 fef1 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000a3e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a42:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000a4a:	2309      	movs	r3, #9
 8000a4c:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4e:	a90b      	add	r1, sp, #44	; 0x2c
 8000a50:	4829      	ldr	r0, [pc, #164]	; (8000af8 <MX_GPIO_Init+0x538>)
 8000a52:	f000 fee5 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000a56:	2304      	movs	r3, #4
 8000a58:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	a90b      	add	r1, sp, #44	; 0x2c
 8000a60:	4824      	ldr	r0, [pc, #144]	; (8000af4 <MX_GPIO_Init+0x534>)
 8000a62:	f000 fedd 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a66:	2386      	movs	r3, #134	; 0x86
 8000a68:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a70:	230b      	movs	r3, #11
 8000a72:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	a90b      	add	r1, sp, #44	; 0x2c
 8000a76:	4650      	mov	r0, sl
 8000a78:	f000 fed2 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000a7c:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a7e:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000a82:	a90b      	add	r1, sp, #44	; 0x2c
 8000a84:	4650      	mov	r0, sl
 8000a86:	f000 fecb 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000a8a:	2350      	movs	r3, #80	; 0x50
 8000a8c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a94:	230d      	movs	r3, #13
 8000a96:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	a90b      	add	r1, sp, #44	; 0x2c
 8000a9a:	4650      	mov	r0, sl
 8000a9c:	f000 fec0 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000aa0:	2328      	movs	r3, #40	; 0x28
 8000aa2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000aaa:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	a90b      	add	r1, sp, #44	; 0x2c
 8000ab0:	4650      	mov	r0, sl
 8000ab2:	f000 feb5 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000ab6:	2340      	movs	r3, #64	; 0x40
 8000ab8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000ac0:	2309      	movs	r3, #9
 8000ac2:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	a90b      	add	r1, sp, #44	; 0x2c
 8000ac6:	480d      	ldr	r0, [pc, #52]	; (8000afc <MX_GPIO_Init+0x53c>)
 8000ac8:	f000 feaa 	bl	8001820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000acc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ad0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ad8:	2305      	movs	r3, #5
 8000ada:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	a90b      	add	r1, sp, #44	; 0x2c
 8000ade:	4658      	mov	r0, fp
 8000ae0:	f000 fe9e 	bl	8001820 <HAL_GPIO_Init>
}
 8000ae4:	b011      	add	sp, #68	; 0x44
 8000ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aea:	bf00      	nop
 8000aec:	40022000 	.word	0x40022000
 8000af0:	40022800 	.word	0x40022800
 8000af4:	40021800 	.word	0x40021800
 8000af8:	40020c00 	.word	0x40020c00
 8000afc:	40021c00 	.word	0x40021c00
 8000b00:	10120000 	.word	0x10120000
 8000b04:	40021400 	.word	0x40021400

08000b08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b0a:	6802      	ldr	r2, [r0, #0]
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d000      	beq.n	8000b14 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b12:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000b14:	f000 fcba 	bl	800148c <HAL_IncTick>
}
 8000b18:	e7fb      	b.n	8000b12 <HAL_TIM_PeriodElapsedCallback+0xa>
 8000b1a:	bf00      	nop
 8000b1c:	40001000 	.word	0x40001000

08000b20 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <Error_Handler+0x2>

08000b24 <MX_DMA2D_Init>:
{
 8000b24:	b508      	push	{r3, lr}
  hdma2d.Instance = DMA2D;
 8000b26:	480c      	ldr	r0, [pc, #48]	; (8000b58 <MX_DMA2D_Init+0x34>)
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_DMA2D_Init+0x38>)
 8000b2a:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000b30:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8000b32:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000b34:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000b36:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000b38:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000b3a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000b3c:	f000 fd40 	bl	80015c0 <HAL_DMA2D_Init>
 8000b40:	b928      	cbnz	r0, 8000b4e <MX_DMA2D_Init+0x2a>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000b42:	2101      	movs	r1, #1
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <MX_DMA2D_Init+0x34>)
 8000b46:	f000 fe09 	bl	800175c <HAL_DMA2D_ConfigLayer>
 8000b4a:	b910      	cbnz	r0, 8000b52 <MX_DMA2D_Init+0x2e>
}
 8000b4c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000b4e:	f7ff ffe7 	bl	8000b20 <Error_Handler>
    Error_Handler();
 8000b52:	f7ff ffe5 	bl	8000b20 <Error_Handler>
 8000b56:	bf00      	nop
 8000b58:	200001d8 	.word	0x200001d8
 8000b5c:	4002b000 	.word	0x4002b000

08000b60 <MX_FMC_Init>:
{
 8000b60:	b500      	push	{lr}
 8000b62:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b64:	4814      	ldr	r0, [pc, #80]	; (8000bb8 <MX_FMC_Init+0x58>)
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <MX_FMC_Init+0x5c>)
 8000b68:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b6e:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b70:	2104      	movs	r1, #4
 8000b72:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b74:	2210      	movs	r2, #16
 8000b76:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b78:	2240      	movs	r2, #64	; 0x40
 8000b7a:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b7c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000b80:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b82:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b88:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000b8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b8e:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000b90:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8000b92:	2302      	movs	r3, #2
 8000b94:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000b96:	2206      	movs	r2, #6
 8000b98:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b9a:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
 8000b9c:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8000b9e:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 2;
 8000ba0:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8000ba2:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ba4:	4469      	add	r1, sp
 8000ba6:	f002 fe11 	bl	80037cc <HAL_SDRAM_Init>
 8000baa:	b910      	cbnz	r0, 8000bb2 <MX_FMC_Init+0x52>
}
 8000bac:	b009      	add	sp, #36	; 0x24
 8000bae:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8000bb2:	f7ff ffb5 	bl	8000b20 <Error_Handler>
 8000bb6:	bf00      	nop
 8000bb8:	20000218 	.word	0x20000218
 8000bbc:	a0000140 	.word	0xa0000140

08000bc0 <MX_I2C3_Init>:
{
 8000bc0:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 8000bc2:	4811      	ldr	r0, [pc, #68]	; (8000c08 <MX_I2C3_Init+0x48>)
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_I2C3_Init+0x4c>)
 8000bc6:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x20404768;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_I2C3_Init+0x50>)
 8000bca:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 224;
 8000bcc:	23e0      	movs	r3, #224	; 0xe0
 8000bce:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000bd8:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bda:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bdc:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bde:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000be0:	f000 ff14 	bl	8001a0c <HAL_I2C_Init>
 8000be4:	b950      	cbnz	r0, 8000bfc <MX_I2C3_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000be6:	2100      	movs	r1, #0
 8000be8:	4807      	ldr	r0, [pc, #28]	; (8000c08 <MX_I2C3_Init+0x48>)
 8000bea:	f000 ff6d 	bl	8001ac8 <HAL_I2CEx_ConfigAnalogFilter>
 8000bee:	b938      	cbnz	r0, 8000c00 <MX_I2C3_Init+0x40>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_I2C3_Init+0x48>)
 8000bf4:	f000 ff96 	bl	8001b24 <HAL_I2CEx_ConfigDigitalFilter>
 8000bf8:	b920      	cbnz	r0, 8000c04 <MX_I2C3_Init+0x44>
}
 8000bfa:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000bfc:	f7ff ff90 	bl	8000b20 <Error_Handler>
    Error_Handler();
 8000c00:	f7ff ff8e 	bl	8000b20 <Error_Handler>
    Error_Handler();
 8000c04:	f7ff ff8c 	bl	8000b20 <Error_Handler>
 8000c08:	20000040 	.word	0x20000040
 8000c0c:	40005c00 	.word	0x40005c00
 8000c10:	20404768 	.word	0x20404768

08000c14 <MX_LTDC_Init>:
{
 8000c14:	b500      	push	{lr}
 8000c16:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c18:	2234      	movs	r2, #52	; 0x34
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	a801      	add	r0, sp, #4
 8000c1e:	f003 fbad 	bl	800437c <memset>
  hltdc.Instance = LTDC;
 8000c22:	4827      	ldr	r0, [pc, #156]	; (8000cc0 <MX_LTDC_Init+0xac>)
 8000c24:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <MX_LTDC_Init+0xb0>)
 8000c26:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c2c:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c2e:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c30:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 40;
 8000c32:	2228      	movs	r2, #40	; 0x28
 8000c34:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 9;
 8000c36:	2209      	movs	r2, #9
 8000c38:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000c3a:	2235      	movs	r2, #53	; 0x35
 8000c3c:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000c3e:	220b      	movs	r2, #11
 8000c40:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000c42:	f240 2215 	movw	r2, #533	; 0x215
 8000c46:	6242      	str	r2, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000c48:	f240 121b 	movw	r2, #283	; 0x11b
 8000c4c:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000c4e:	f240 2235 	movw	r2, #565	; 0x235
 8000c52:	62c2      	str	r2, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000c54:	f240 121d 	movw	r2, #285	; 0x11d
 8000c58:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c5a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c5e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c62:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c66:	f001 f85f 	bl	8001d28 <HAL_LTDC_Init>
 8000c6a:	bb28      	cbnz	r0, 8000cb8 <MX_LTDC_Init+0xa4>
  pLayerCfg.WindowX0 = 0;
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 8000c70:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000c74:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8000c76:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 8000c78:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000c7c:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c7e:	2002      	movs	r0, #2
 8000c80:	9005      	str	r0, [sp, #20]
  pLayerCfg.Alpha = 255;
 8000c82:	20ff      	movs	r0, #255	; 0xff
 8000c84:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 8000c86:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c88:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8000c8c:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c8e:	2007      	movs	r0, #7
 8000c90:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000c92:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 8000c96:	900a      	str	r0, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000c98:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000c9a:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000c9c:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000ca0:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000ca4:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ca8:	a901      	add	r1, sp, #4
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_LTDC_Init+0xac>)
 8000cac:	f001 f926 	bl	8001efc <HAL_LTDC_ConfigLayer>
 8000cb0:	b920      	cbnz	r0, 8000cbc <MX_LTDC_Init+0xa8>
}
 8000cb2:	b00f      	add	sp, #60	; 0x3c
 8000cb4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000cb8:	f7ff ff32 	bl	8000b20 <Error_Handler>
    Error_Handler();
 8000cbc:	f7ff ff30 	bl	8000b20 <Error_Handler>
 8000cc0:	20000110 	.word	0x20000110
 8000cc4:	40016800 	.word	0x40016800

08000cc8 <MX_RTC_Init>:
{
 8000cc8:	b510      	push	{r4, lr}
 8000cca:	b092      	sub	sp, #72	; 0x48
  RTC_TimeTypeDef sTime = {0};
 8000ccc:	2400      	movs	r4, #0
 8000cce:	940c      	str	r4, [sp, #48]	; 0x30
 8000cd0:	940d      	str	r4, [sp, #52]	; 0x34
 8000cd2:	940e      	str	r4, [sp, #56]	; 0x38
 8000cd4:	940f      	str	r4, [sp, #60]	; 0x3c
 8000cd6:	9410      	str	r4, [sp, #64]	; 0x40
 8000cd8:	9411      	str	r4, [sp, #68]	; 0x44
  RTC_DateTypeDef sDate = {0};
 8000cda:	940b      	str	r4, [sp, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000cdc:	222c      	movs	r2, #44	; 0x2c
 8000cde:	4621      	mov	r1, r4
 8000ce0:	4668      	mov	r0, sp
 8000ce2:	f003 fb4b 	bl	800437c <memset>
  hrtc.Instance = RTC;
 8000ce6:	4831      	ldr	r0, [pc, #196]	; (8000dac <MX_RTC_Init+0xe4>)
 8000ce8:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <MX_RTC_Init+0xe8>)
 8000cea:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cec:	6044      	str	r4, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000cee:	237f      	movs	r3, #127	; 0x7f
 8000cf0:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cf2:	23ff      	movs	r3, #255	; 0xff
 8000cf4:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cf6:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cf8:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cfa:	6184      	str	r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cfc:	f001 ffd2 	bl	8002ca4 <HAL_RTC_Init>
 8000d00:	2800      	cmp	r0, #0
 8000d02:	d147      	bne.n	8000d94 <MX_RTC_Init+0xcc>
  sTime.Hours = 0x0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000d0a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000d0e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d12:	9310      	str	r3, [sp, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d14:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d16:	2201      	movs	r2, #1
 8000d18:	a90c      	add	r1, sp, #48	; 0x30
 8000d1a:	4824      	ldr	r0, [pc, #144]	; (8000dac <MX_RTC_Init+0xe4>)
 8000d1c:	f002 f830 	bl	8002d80 <HAL_RTC_SetTime>
 8000d20:	2800      	cmp	r0, #0
 8000d22:	d139      	bne.n	8000d98 <MX_RTC_Init+0xd0>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d24:	2201      	movs	r2, #1
 8000d26:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000d2a:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  sDate.Date = 0x1;
 8000d2e:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
  sDate.Year = 0x0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d38:	a90b      	add	r1, sp, #44	; 0x2c
 8000d3a:	481c      	ldr	r0, [pc, #112]	; (8000dac <MX_RTC_Init+0xe4>)
 8000d3c:	f002 f8a0 	bl	8002e80 <HAL_RTC_SetDate>
 8000d40:	bb60      	cbnz	r0, 8000d9c <MX_RTC_Init+0xd4>
  sAlarm.AlarmTime.Hours = 0x0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	f88d 3000 	strb.w	r3, [sp]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000d48:	f88d 3001 	strb.w	r3, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000d4c:	f88d 3002 	strb.w	r3, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000d50:	9301      	str	r3, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d52:	9304      	str	r3, [sp, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d54:	9305      	str	r3, [sp, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000d56:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d58:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d5a:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d66:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d68:	4669      	mov	r1, sp
 8000d6a:	4810      	ldr	r0, [pc, #64]	; (8000dac <MX_RTC_Init+0xe4>)
 8000d6c:	f002 f8f6 	bl	8002f5c <HAL_RTC_SetAlarm>
 8000d70:	b9b0      	cbnz	r0, 8000da0 <MX_RTC_Init+0xd8>
  sAlarm.Alarm = RTC_ALARM_B;
 8000d72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d76:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4669      	mov	r1, sp
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <MX_RTC_Init+0xe4>)
 8000d7e:	f002 f8ed 	bl	8002f5c <HAL_RTC_SetAlarm>
 8000d82:	b978      	cbnz	r0, 8000da4 <MX_RTC_Init+0xdc>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000d84:	2202      	movs	r2, #2
 8000d86:	2100      	movs	r1, #0
 8000d88:	4808      	ldr	r0, [pc, #32]	; (8000dac <MX_RTC_Init+0xe4>)
 8000d8a:	f002 f997 	bl	80030bc <HAL_RTCEx_SetTimeStamp>
 8000d8e:	b958      	cbnz	r0, 8000da8 <MX_RTC_Init+0xe0>
}
 8000d90:	b012      	add	sp, #72	; 0x48
 8000d92:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000d94:	f7ff fec4 	bl	8000b20 <Error_Handler>
    Error_Handler();
 8000d98:	f7ff fec2 	bl	8000b20 <Error_Handler>
    Error_Handler();
 8000d9c:	f7ff fec0 	bl	8000b20 <Error_Handler>
    Error_Handler();
 8000da0:	f7ff febe 	bl	8000b20 <Error_Handler>
    Error_Handler();
 8000da4:	f7ff febc 	bl	8000b20 <Error_Handler>
    Error_Handler();
 8000da8:	f7ff feba 	bl	8000b20 <Error_Handler>
 8000dac:	200001b8 	.word	0x200001b8
 8000db0:	40002800 	.word	0x40002800

08000db4 <MX_SDMMC1_SD_Init>:
{
 8000db4:	b508      	push	{r3, lr}
  hsd1.Instance = SDMMC1;
 8000db6:	480c      	ldr	r0, [pc, #48]	; (8000de8 <MX_SDMMC1_SD_Init+0x34>)
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_SDMMC1_SD_Init+0x38>)
 8000dba:	6003      	str	r3, [r0, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	6043      	str	r3, [r0, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000dc0:	6083      	str	r3, [r0, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000dc2:	60c3      	str	r3, [r0, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000dc4:	6103      	str	r3, [r0, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000dc6:	6143      	str	r3, [r0, #20]
  hsd1.Init.ClockDiv = 5;
 8000dc8:	2305      	movs	r3, #5
 8000dca:	6183      	str	r3, [r0, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000dcc:	f002 fc82 	bl	80036d4 <HAL_SD_Init>
 8000dd0:	b930      	cbnz	r0, 8000de0 <MX_SDMMC1_SD_Init+0x2c>
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000dd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd6:	4804      	ldr	r0, [pc, #16]	; (8000de8 <MX_SDMMC1_SD_Init+0x34>)
 8000dd8:	f002 fc98 	bl	800370c <HAL_SD_ConfigWideBusOperation>
 8000ddc:	b910      	cbnz	r0, 8000de4 <MX_SDMMC1_SD_Init+0x30>
}
 8000dde:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000de0:	f7ff fe9e 	bl	8000b20 <Error_Handler>
    Error_Handler();
 8000de4:	f7ff fe9c 	bl	8000b20 <Error_Handler>
 8000de8:	2000008c 	.word	0x2000008c
 8000dec:	40012c00 	.word	0x40012c00

08000df0 <SystemClock_Config>:
{
 8000df0:	b500      	push	{lr}
 8000df2:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df4:	2230      	movs	r2, #48	; 0x30
 8000df6:	2100      	movs	r1, #0
 8000df8:	a828      	add	r0, sp, #160	; 0xa0
 8000dfa:	f003 fabf 	bl	800437c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfe:	2100      	movs	r1, #0
 8000e00:	9123      	str	r1, [sp, #140]	; 0x8c
 8000e02:	9124      	str	r1, [sp, #144]	; 0x90
 8000e04:	9125      	str	r1, [sp, #148]	; 0x94
 8000e06:	9126      	str	r1, [sp, #152]	; 0x98
 8000e08:	9127      	str	r1, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e0a:	2284      	movs	r2, #132	; 0x84
 8000e0c:	a802      	add	r0, sp, #8
 8000e0e:	f003 fab5 	bl	800437c <memset>
  HAL_PWR_EnableBkUpAccess();
 8000e12:	f001 f8a1 	bl	8001f58 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	4b33      	ldr	r3, [pc, #204]	; (8000ee4 <SystemClock_Config+0xf4>)
 8000e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e1e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ee8 <SystemClock_Config+0xf8>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e3a:	9301      	str	r3, [sp, #4]
 8000e3c:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000e3e:	2309      	movs	r3, #9
 8000e40:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e46:	9229      	str	r2, [sp, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	922d      	str	r2, [sp, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	922e      	str	r2, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e50:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000e54:	912f      	str	r1, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e56:	2119      	movs	r1, #25
 8000e58:	9130      	str	r1, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e5a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8000e5e:	9131      	str	r1, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e60:	9232      	str	r2, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000e62:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e64:	a828      	add	r0, sp, #160	; 0xa0
 8000e66:	f001 f8bd 	bl	8001fe4 <HAL_RCC_OscConfig>
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d131      	bne.n	8000ed2 <SystemClock_Config+0xe2>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e6e:	f001 f87b 	bl	8001f68 <HAL_PWREx_EnableOverDrive>
 8000e72:	2800      	cmp	r0, #0
 8000e74:	d12f      	bne.n	8000ed6 <SystemClock_Config+0xe6>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e76:	230f      	movs	r3, #15
 8000e78:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e86:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8c:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e8e:	2107      	movs	r1, #7
 8000e90:	a823      	add	r0, sp, #140	; 0x8c
 8000e92:	f001 fb11 	bl	80024b8 <HAL_RCC_ClockConfig>
 8000e96:	bb00      	cbnz	r0, 8000eda <SystemClock_Config+0xea>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <SystemClock_Config+0xfc>)
 8000e9a:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8000e9c:	2364      	movs	r3, #100	; 0x64
 8000e9e:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000ea4:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000eaa:	2201      	movs	r2, #1
 8000eac:	920c      	str	r2, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000eae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eb2:	920d      	str	r2, [sp, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb8:	920e      	str	r2, [sp, #56]	; 0x38
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000eba:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000ebc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ec0:	9221      	str	r2, [sp, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000ec2:	9322      	str	r3, [sp, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec4:	a802      	add	r0, sp, #8
 8000ec6:	f001 fbe1 	bl	800268c <HAL_RCCEx_PeriphCLKConfig>
 8000eca:	b940      	cbnz	r0, 8000ede <SystemClock_Config+0xee>
}
 8000ecc:	b035      	add	sp, #212	; 0xd4
 8000ece:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000ed2:	f7ff fe25 	bl	8000b20 <Error_Handler>
    Error_Handler();
 8000ed6:	f7ff fe23 	bl	8000b20 <Error_Handler>
    Error_Handler();
 8000eda:	f7ff fe21 	bl	8000b20 <Error_Handler>
    Error_Handler();
 8000ede:	f7ff fe1f 	bl	8000b20 <Error_Handler>
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40007000 	.word	0x40007000
 8000eec:	00a10028 	.word	0x00a10028

08000ef0 <main>:
{
 8000ef0:	b510      	push	{r4, lr}
  MPU_Config();
 8000ef2:	f7ff fb5d 	bl	80005b0 <MPU_Config>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000efa:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000efe:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <main+0xac>)
 8000f00:	2100      	movs	r1, #0
 8000f02:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f0a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f0e:	695a      	ldr	r2, [r3, #20]
 8000f10:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000f14:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f1a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f1e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f22:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f26:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f2a:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8000f2e:	e000      	b.n	8000f32 <main+0x42>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8000f30:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f32:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f36:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000f3a:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8000f3e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000f42:	4916      	ldr	r1, [pc, #88]	; (8000f9c <main+0xac>)
 8000f44:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000f48:	4613      	mov	r3, r2
 8000f4a:	3a01      	subs	r2, #1
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1f2      	bne.n	8000f36 <main+0x46>
    } while(sets-- != 0U);
 8000f50:	1e43      	subs	r3, r0, #1
 8000f52:	2800      	cmp	r0, #0
 8000f54:	d1ec      	bne.n	8000f30 <main+0x40>
 8000f56:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f5a:	694b      	ldr	r3, [r1, #20]
 8000f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f60:	614b      	str	r3, [r1, #20]
 8000f62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f66:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000f6a:	f000 fa7d 	bl	8001468 <HAL_Init>
  SystemClock_Config();
 8000f6e:	f7ff ff3f 	bl	8000df0 <SystemClock_Config>
  HAL_Delay(500);
 8000f72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f76:	f000 fa9b 	bl	80014b0 <HAL_Delay>
  MX_GPIO_Init();
 8000f7a:	f7ff fb21 	bl	80005c0 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8000f7e:	f7ff fdd1 	bl	8000b24 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000f82:	f7ff fded 	bl	8000b60 <MX_FMC_Init>
  MX_I2C3_Init();
 8000f86:	f7ff fe1b 	bl	8000bc0 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000f8a:	f7ff fe43 	bl	8000c14 <MX_LTDC_Init>
  MX_RTC_Init();
 8000f8e:	f7ff fe9b 	bl	8000cc8 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000f92:	f7ff ff0f 	bl	8000db4 <MX_SDMMC1_SD_Init>
	  MainFunc ();
 8000f96:	f7ff fab3 	bl	8000500 <MainFunc>
  while (1)
 8000f9a:	e7fc      	b.n	8000f96 <main+0xa6>
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <HAL_FMC_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
 8000fa0:	4b2c      	ldr	r3, [pc, #176]	; (8001054 <HAL_FMC_MspInit+0xb4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	b103      	cbz	r3, 8000fa8 <HAL_FMC_MspInit+0x8>
 8000fa6:	4770      	bx	lr
static void HAL_FMC_MspInit(void){
 8000fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000faa:	b087      	sub	sp, #28
    return;
  }
  FMC_Initialized = 1;
 8000fac:	4b29      	ldr	r3, [pc, #164]	; (8001054 <HAL_FMC_MspInit+0xb4>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000fb2:	4b29      	ldr	r3, [pc, #164]	; (8001058 <HAL_FMC_MspInit+0xb8>)
 8000fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fb6:	f042 0201 	orr.w	r2, r2, #1
 8000fba:	639a      	str	r2, [r3, #56]	; 0x38
 8000fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	9b00      	ldr	r3, [sp, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000fc6:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000fca:	9301      	str	r3, [sp, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2702      	movs	r7, #2
 8000fce:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2600      	movs	r6, #0
 8000fd2:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	2503      	movs	r5, #3
 8000fd6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fd8:	240c      	movs	r4, #12
 8000fda:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fdc:	a901      	add	r1, sp, #4
 8000fde:	481f      	ldr	r0, [pc, #124]	; (800105c <HAL_FMC_MspInit+0xbc>)
 8000fe0:	f000 fc1e 	bl	8001820 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000fe4:	f248 1333 	movw	r3, #33075	; 0x8133
 8000fe8:	9301      	str	r3, [sp, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ff0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ff2:	a901      	add	r1, sp, #4
 8000ff4:	481a      	ldr	r0, [pc, #104]	; (8001060 <HAL_FMC_MspInit+0xc0>)
 8000ff6:	f000 fc13 	bl	8001820 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000ffa:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000ffe:	9301      	str	r3, [sp, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001006:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001008:	a901      	add	r1, sp, #4
 800100a:	4816      	ldr	r0, [pc, #88]	; (8001064 <HAL_FMC_MspInit+0xc4>)
 800100c:	f000 fc08 	bl	8001820 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001010:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001014:	9301      	str	r3, [sp, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800101c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800101e:	a901      	add	r1, sp, #4
 8001020:	4811      	ldr	r0, [pc, #68]	; (8001068 <HAL_FMC_MspInit+0xc8>)
 8001022:	f000 fbfd 	bl	8001820 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001026:	2328      	movs	r3, #40	; 0x28
 8001028:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001030:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001032:	a901      	add	r1, sp, #4
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <HAL_FMC_MspInit+0xcc>)
 8001036:	f000 fbf3 	bl	8001820 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800103a:	2308      	movs	r3, #8
 800103c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001044:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001046:	a901      	add	r1, sp, #4
 8001048:	4809      	ldr	r0, [pc, #36]	; (8001070 <HAL_FMC_MspInit+0xd0>)
 800104a:	f000 fbe9 	bl	8001820 <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800104e:	b007      	add	sp, #28
 8001050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001052:	bf00      	nop
 8001054:	20000028 	.word	0x20000028
 8001058:	40023800 	.word	0x40023800
 800105c:	40021000 	.word	0x40021000
 8001060:	40021800 	.word	0x40021800
 8001064:	40020c00 	.word	0x40020c00
 8001068:	40021400 	.word	0x40021400
 800106c:	40021c00 	.word	0x40021c00
 8001070:	40020800 	.word	0x40020800

08001074 <HAL_MspInit>:
{
 8001074:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_MspInit+0x2c>)
 8001078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800107a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800107e:	641a      	str	r2, [r3, #64]	; 0x40
 8001080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001082:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001086:	9200      	str	r2, [sp, #0]
 8001088:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800108c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001090:	645a      	str	r2, [r3, #68]	; 0x44
 8001092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001098:	9301      	str	r3, [sp, #4]
 800109a:	9b01      	ldr	r3, [sp, #4]
}
 800109c:	b002      	add	sp, #8
 800109e:	4770      	bx	lr
 80010a0:	40023800 	.word	0x40023800

080010a4 <HAL_DMA2D_MspInit>:
  if(hdma2d->Instance==DMA2D)
 80010a4:	6802      	ldr	r2, [r0, #0]
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_DMA2D_MspInit+0x3c>)
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d000      	beq.n	80010ae <HAL_DMA2D_MspInit+0xa>
 80010ac:	4770      	bx	lr
{
 80010ae:	b500      	push	{lr}
 80010b0:	b083      	sub	sp, #12
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80010b2:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 80010b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80010bc:	631a      	str	r2, [r3, #48]	; 0x30
 80010be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	4611      	mov	r1, r2
 80010cc:	205a      	movs	r0, #90	; 0x5a
 80010ce:	f000 fa15 	bl	80014fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010d2:	205a      	movs	r0, #90	; 0x5a
 80010d4:	f000 fa44 	bl	8001560 <HAL_NVIC_EnableIRQ>
}
 80010d8:	b003      	add	sp, #12
 80010da:	f85d fb04 	ldr.w	pc, [sp], #4
 80010de:	bf00      	nop
 80010e0:	4002b000 	.word	0x4002b000

080010e4 <HAL_I2C_MspInit>:
{
 80010e4:	b510      	push	{r4, lr}
 80010e6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	2300      	movs	r3, #0
 80010ea:	9303      	str	r3, [sp, #12]
 80010ec:	9304      	str	r3, [sp, #16]
 80010ee:	9305      	str	r3, [sp, #20]
 80010f0:	9306      	str	r3, [sp, #24]
 80010f2:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C3)
 80010f4:	6802      	ldr	r2, [r0, #0]
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <HAL_I2C_MspInit+0x64>)
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d001      	beq.n	8001100 <HAL_I2C_MspInit+0x1c>
}
 80010fc:	b008      	add	sp, #32
 80010fe:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001100:	4c12      	ldr	r4, [pc, #72]	; (800114c <HAL_I2C_MspInit+0x68>)
 8001102:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001108:	6323      	str	r3, [r4, #48]	; 0x30
 800110a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800110c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001114:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001118:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111a:	2312      	movs	r3, #18
 800111c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800111e:	2301      	movs	r3, #1
 8001120:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001126:	2304      	movs	r3, #4
 8001128:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800112a:	a903      	add	r1, sp, #12
 800112c:	4808      	ldr	r0, [pc, #32]	; (8001150 <HAL_I2C_MspInit+0x6c>)
 800112e:	f000 fb77 	bl	8001820 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001132:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001134:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001138:	6423      	str	r3, [r4, #64]	; 0x40
 800113a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800113c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001140:	9302      	str	r3, [sp, #8]
 8001142:	9b02      	ldr	r3, [sp, #8]
}
 8001144:	e7da      	b.n	80010fc <HAL_I2C_MspInit+0x18>
 8001146:	bf00      	nop
 8001148:	40005c00 	.word	0x40005c00
 800114c:	40023800 	.word	0x40023800
 8001150:	40021c00 	.word	0x40021c00

08001154 <HAL_LTDC_MspInit>:
{
 8001154:	b570      	push	{r4, r5, r6, lr}
 8001156:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	2300      	movs	r3, #0
 800115a:	9307      	str	r3, [sp, #28]
 800115c:	9308      	str	r3, [sp, #32]
 800115e:	9309      	str	r3, [sp, #36]	; 0x24
 8001160:	930a      	str	r3, [sp, #40]	; 0x28
 8001162:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hltdc->Instance==LTDC)
 8001164:	6802      	ldr	r2, [r0, #0]
 8001166:	4b3f      	ldr	r3, [pc, #252]	; (8001264 <HAL_LTDC_MspInit+0x110>)
 8001168:	429a      	cmp	r2, r3
 800116a:	d001      	beq.n	8001170 <HAL_LTDC_MspInit+0x1c>
}
 800116c:	b00c      	add	sp, #48	; 0x30
 800116e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001170:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8001174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001176:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800117a:	645a      	str	r2, [r3, #68]	; 0x44
 800117c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800117e:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001182:	9201      	str	r2, [sp, #4]
 8001184:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001188:	f042 0210 	orr.w	r2, r2, #16
 800118c:	631a      	str	r2, [r3, #48]	; 0x30
 800118e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001190:	f002 0210 	and.w	r2, r2, #16
 8001194:	9202      	str	r2, [sp, #8]
 8001196:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800119a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800119e:	631a      	str	r2, [r3, #48]	; 0x30
 80011a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011a2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80011a6:	9203      	str	r2, [sp, #12]
 80011a8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80011aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80011b0:	631a      	str	r2, [r3, #48]	; 0x30
 80011b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b4:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80011b8:	9204      	str	r2, [sp, #16]
 80011ba:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011c2:	631a      	str	r2, [r3, #48]	; 0x30
 80011c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011c6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80011ca:	9205      	str	r2, [sp, #20]
 80011cc:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80011ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011d4:	631a      	str	r2, [r3, #48]	; 0x30
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011dc:	9306      	str	r3, [sp, #24]
 80011de:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80011e0:	2310      	movs	r3, #16
 80011e2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2502      	movs	r5, #2
 80011e6:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2400      	movs	r4, #0
 80011ea:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011ee:	260e      	movs	r6, #14
 80011f0:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80011f2:	a907      	add	r1, sp, #28
 80011f4:	481c      	ldr	r0, [pc, #112]	; (8001268 <HAL_LTDC_MspInit+0x114>)
 80011f6:	f000 fb13 	bl	8001820 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80011fa:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80011fe:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001206:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001208:	a907      	add	r1, sp, #28
 800120a:	4818      	ldr	r0, [pc, #96]	; (800126c <HAL_LTDC_MspInit+0x118>)
 800120c:	f000 fb08 	bl	8001820 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001210:	23f7      	movs	r3, #247	; 0xf7
 8001212:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800121a:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800121c:	a907      	add	r1, sp, #28
 800121e:	4814      	ldr	r0, [pc, #80]	; (8001270 <HAL_LTDC_MspInit+0x11c>)
 8001220:	f000 fafe 	bl	8001820 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001228:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001230:	2309      	movs	r3, #9
 8001232:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001234:	a907      	add	r1, sp, #28
 8001236:	480f      	ldr	r0, [pc, #60]	; (8001274 <HAL_LTDC_MspInit+0x120>)
 8001238:	f000 faf2 	bl	8001820 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800123c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001240:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001248:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800124a:	a907      	add	r1, sp, #28
 800124c:	480a      	ldr	r0, [pc, #40]	; (8001278 <HAL_LTDC_MspInit+0x124>)
 800124e:	f000 fae7 	bl	8001820 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001252:	4622      	mov	r2, r4
 8001254:	4621      	mov	r1, r4
 8001256:	2058      	movs	r0, #88	; 0x58
 8001258:	f000 f950 	bl	80014fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800125c:	2058      	movs	r0, #88	; 0x58
 800125e:	f000 f97f 	bl	8001560 <HAL_NVIC_EnableIRQ>
}
 8001262:	e783      	b.n	800116c <HAL_LTDC_MspInit+0x18>
 8001264:	40016800 	.word	0x40016800
 8001268:	40021000 	.word	0x40021000
 800126c:	40022400 	.word	0x40022400
 8001270:	40022800 	.word	0x40022800
 8001274:	40021800 	.word	0x40021800
 8001278:	40022000 	.word	0x40022000

0800127c <HAL_RTC_MspInit>:
  if(hrtc->Instance==RTC)
 800127c:	6802      	ldr	r2, [r0, #0]
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_RTC_MspInit+0x18>)
 8001280:	429a      	cmp	r2, r3
 8001282:	d000      	beq.n	8001286 <HAL_RTC_MspInit+0xa>
}
 8001284:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8001286:	4a04      	ldr	r2, [pc, #16]	; (8001298 <HAL_RTC_MspInit+0x1c>)
 8001288:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800128a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800128e:	6713      	str	r3, [r2, #112]	; 0x70
}
 8001290:	e7f8      	b.n	8001284 <HAL_RTC_MspInit+0x8>
 8001292:	bf00      	nop
 8001294:	40002800 	.word	0x40002800
 8001298:	40023800 	.word	0x40023800

0800129c <HAL_SD_MspInit>:
{
 800129c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800129e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	2300      	movs	r3, #0
 80012a2:	9303      	str	r3, [sp, #12]
 80012a4:	9304      	str	r3, [sp, #16]
 80012a6:	9305      	str	r3, [sp, #20]
 80012a8:	9306      	str	r3, [sp, #24]
 80012aa:	9307      	str	r3, [sp, #28]
  if(hsd->Instance==SDMMC1)
 80012ac:	6802      	ldr	r2, [r0, #0]
 80012ae:	4b1f      	ldr	r3, [pc, #124]	; (800132c <HAL_SD_MspInit+0x90>)
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d001      	beq.n	80012b8 <HAL_SD_MspInit+0x1c>
}
 80012b4:	b009      	add	sp, #36	; 0x24
 80012b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80012b8:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80012bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012c2:	645a      	str	r2, [r3, #68]	; 0x44
 80012c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012c6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80012ca:	9200      	str	r2, [sp, #0]
 80012cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012d0:	f042 0204 	orr.w	r2, r2, #4
 80012d4:	631a      	str	r2, [r3, #48]	; 0x30
 80012d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012d8:	f002 0204 	and.w	r2, r2, #4
 80012dc:	9201      	str	r2, [sp, #4]
 80012de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012e2:	f042 0208 	orr.w	r2, r2, #8
 80012e6:	631a      	str	r2, [r3, #48]	; 0x30
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	9302      	str	r3, [sp, #8]
 80012f0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80012f2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80012f6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2702      	movs	r7, #2
 80012fa:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2600      	movs	r6, #0
 80012fe:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2503      	movs	r5, #3
 8001302:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001304:	240c      	movs	r4, #12
 8001306:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001308:	eb0d 0104 	add.w	r1, sp, r4
 800130c:	4808      	ldr	r0, [pc, #32]	; (8001330 <HAL_SD_MspInit+0x94>)
 800130e:	f000 fa87 	bl	8001820 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001312:	2304      	movs	r3, #4
 8001314:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800131c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800131e:	eb0d 0104 	add.w	r1, sp, r4
 8001322:	4804      	ldr	r0, [pc, #16]	; (8001334 <HAL_SD_MspInit+0x98>)
 8001324:	f000 fa7c 	bl	8001820 <HAL_GPIO_Init>
}
 8001328:	e7c4      	b.n	80012b4 <HAL_SD_MspInit+0x18>
 800132a:	bf00      	nop
 800132c:	40012c00 	.word	0x40012c00
 8001330:	40020800 	.word	0x40020800
 8001334:	40020c00 	.word	0x40020c00

08001338 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001338:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800133a:	f7ff fe31 	bl	8000fa0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800133e:	bd08      	pop	{r3, pc}

08001340 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001340:	b500      	push	{lr}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001346:	2200      	movs	r2, #0
 8001348:	2036      	movs	r0, #54	; 0x36
 800134a:	f000 f8d7 	bl	80014fc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800134e:	2036      	movs	r0, #54	; 0x36
 8001350:	f000 f906 	bl	8001560 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_InitTick+0x6c>)
 8001356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001358:	f042 0210 	orr.w	r2, r2, #16
 800135c:	641a      	str	r2, [r3, #64]	; 0x40
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001368:	a902      	add	r1, sp, #8
 800136a:	a803      	add	r0, sp, #12
 800136c:	f001 f970 	bl	8002650 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001370:	f001 f95e 	bl	8002630 <HAL_RCC_GetPCLK1Freq>
 8001374:	0043      	lsls	r3, r0, #1
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001376:	480e      	ldr	r0, [pc, #56]	; (80013b0 <HAL_InitTick+0x70>)
 8001378:	fba0 2303 	umull	r2, r3, r0, r3
 800137c:	0c9b      	lsrs	r3, r3, #18
 800137e:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <HAL_InitTick+0x74>)
 8001382:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <HAL_InitTick+0x78>)
 8001384:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001386:	f240 32e7 	movw	r2, #999	; 0x3e7
 800138a:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800138c:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001392:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001394:	f002 fc08 	bl	8003ba8 <HAL_TIM_Base_Init>
 8001398:	b118      	cbz	r0, 80013a2 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
 800139a:	2001      	movs	r0, #1
}
 800139c:	b009      	add	sp, #36	; 0x24
 800139e:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim6);
 80013a2:	4804      	ldr	r0, [pc, #16]	; (80013b4 <HAL_InitTick+0x74>)
 80013a4:	f002 fa60 	bl	8003868 <HAL_TIM_Base_Start_IT>
 80013a8:	e7f8      	b.n	800139c <HAL_InitTick+0x5c>
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	431bde83 	.word	0x431bde83
 80013b4:	2000024c 	.word	0x2000024c
 80013b8:	40001000 	.word	0x40001000

080013bc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <NMI_Handler>

080013be <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <HardFault_Handler>

080013c0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <MemManage_Handler>

080013c2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <BusFault_Handler>

080013c4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler>

080013c6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c6:	4770      	bx	lr

080013c8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c8:	4770      	bx	lr

080013ca <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ca:	4770      	bx	lr

080013cc <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013cc:	4770      	bx	lr
	...

080013d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013d2:	4802      	ldr	r0, [pc, #8]	; (80013dc <TIM6_DAC_IRQHandler+0xc>)
 80013d4:	f002 fa94 	bl	8003900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013d8:	bd08      	pop	{r3, pc}
 80013da:	bf00      	nop
 80013dc:	2000024c 	.word	0x2000024c

080013e0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80013e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80013e2:	4802      	ldr	r0, [pc, #8]	; (80013ec <LTDC_IRQHandler+0xc>)
 80013e4:	f000 fd1d 	bl	8001e22 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80013e8:	bd08      	pop	{r3, pc}
 80013ea:	bf00      	nop
 80013ec:	20000110 	.word	0x20000110

080013f0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80013f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80013f2:	4802      	ldr	r0, [pc, #8]	; (80013fc <DMA2D_IRQHandler+0xc>)
 80013f4:	f000 f914 	bl	8001620 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80013f8:	bd08      	pop	{r3, pc}
 80013fa:	bf00      	nop
 80013fc:	200001d8 	.word	0x200001d8

08001400 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001400:	4a03      	ldr	r2, [pc, #12]	; (8001410 <SystemInit+0x10>)
 8001402:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001406:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800140a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800144c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001418:	480d      	ldr	r0, [pc, #52]	; (8001450 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800141a:	490e      	ldr	r1, [pc, #56]	; (8001454 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800141c:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001420:	e002      	b.n	8001428 <LoopCopyDataInit>

08001422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001426:	3304      	adds	r3, #4

08001428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800142c:	d3f9      	bcc.n	8001422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142e:	4a0b      	ldr	r2, [pc, #44]	; (800145c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001430:	4c0b      	ldr	r4, [pc, #44]	; (8001460 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001434:	e001      	b.n	800143a <LoopFillZerobss>

08001436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001438:	3204      	adds	r2, #4

0800143a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800143c:	d3fb      	bcc.n	8001436 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800143e:	f7ff ffdf 	bl	8001400 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001442:	f002 ff77 	bl	8004334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001446:	f7ff fd53 	bl	8000ef0 <main>
  bx  lr    
 800144a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800144c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001454:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001458:	080043cc 	.word	0x080043cc
  ldr r2, =_sbss
 800145c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001460:	2000029c 	.word	0x2000029c

08001464 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001464:	e7fe      	b.n	8001464 <ADC_IRQHandler>
	...

08001468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001468:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 800146a:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_Init+0x20>)
 800146c:	6813      	ldr	r3, [r2, #0]
 800146e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001472:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001474:	2003      	movs	r0, #3
 8001476:	f000 f82f 	bl	80014d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800147a:	2000      	movs	r0, #0
 800147c:	f7ff ff60 	bl	8001340 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001480:	f7ff fdf8 	bl	8001074 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8001484:	2000      	movs	r0, #0
 8001486:	bd08      	pop	{r3, pc}
 8001488:	40023c00 	.word	0x40023c00

0800148c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800148c:	4a03      	ldr	r2, [pc, #12]	; (800149c <HAL_IncTick+0x10>)
 800148e:	6811      	ldr	r1, [r2, #0]
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <HAL_IncTick+0x14>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	440b      	add	r3, r1
 8001496:	6013      	str	r3, [r2, #0]
}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000298 	.word	0x20000298
 80014a0:	20000004 	.word	0x20000004

080014a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80014a4:	4b01      	ldr	r3, [pc, #4]	; (80014ac <HAL_GetTick+0x8>)
 80014a6:	6818      	ldr	r0, [r3, #0]
}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000298 	.word	0x20000298

080014b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b0:	b538      	push	{r3, r4, r5, lr}
 80014b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80014b4:	f7ff fff6 	bl	80014a4 <HAL_GetTick>
 80014b8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ba:	f1b4 3fff 	cmp.w	r4, #4294967295
 80014be:	d002      	beq.n	80014c6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <HAL_Delay+0x24>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014c6:	f7ff ffed 	bl	80014a4 <HAL_GetTick>
 80014ca:	1b40      	subs	r0, r0, r5
 80014cc:	42a0      	cmp	r0, r4
 80014ce:	d3fa      	bcc.n	80014c6 <HAL_Delay+0x16>
  {
  }
}
 80014d0:	bd38      	pop	{r3, r4, r5, pc}
 80014d2:	bf00      	nop
 80014d4:	20000004 	.word	0x20000004

080014d8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d8:	4906      	ldr	r1, [pc, #24]	; (80014f4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80014da:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014e0:	041b      	lsls	r3, r3, #16
 80014e2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e4:	0200      	lsls	r0, r0, #8
 80014e6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ea:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80014ec:	4a02      	ldr	r2, [pc, #8]	; (80014f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80014ee:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80014f0:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00
 80014f8:	05fa0000 	.word	0x05fa0000

080014fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fc:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_NVIC_SetPriority+0x58>)
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001506:	f1c3 0407 	rsb	r4, r3, #7
 800150a:	2c04      	cmp	r4, #4
 800150c:	bf28      	it	cs
 800150e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001510:	1d1d      	adds	r5, r3, #4
 8001512:	2d06      	cmp	r5, #6
 8001514:	d914      	bls.n	8001540 <HAL_NVIC_SetPriority+0x44>
 8001516:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	f04f 35ff 	mov.w	r5, #4294967295
 800151c:	fa05 f404 	lsl.w	r4, r5, r4
 8001520:	ea21 0104 	bic.w	r1, r1, r4
 8001524:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001526:	fa05 f303 	lsl.w	r3, r5, r3
 800152a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001530:	2800      	cmp	r0, #0
 8001532:	db07      	blt.n	8001544 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	0109      	lsls	r1, r1, #4
 8001536:	b2c9      	uxtb	r1, r1
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <HAL_NVIC_SetPriority+0x5c>)
 800153a:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800153c:	bc30      	pop	{r4, r5}
 800153e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001540:	2300      	movs	r3, #0
 8001542:	e7e9      	b.n	8001518 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001544:	f000 000f 	and.w	r0, r0, #15
 8001548:	0109      	lsls	r1, r1, #4
 800154a:	b2c9      	uxtb	r1, r1
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_NVIC_SetPriority+0x60>)
 800154e:	5419      	strb	r1, [r3, r0]
 8001550:	e7f4      	b.n	800153c <HAL_NVIC_SetPriority+0x40>
 8001552:	bf00      	nop
 8001554:	e000ed00 	.word	0xe000ed00
 8001558:	e000e400 	.word	0xe000e400
 800155c:	e000ed14 	.word	0xe000ed14

08001560 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001560:	2800      	cmp	r0, #0
 8001562:	db07      	blt.n	8001574 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001564:	f000 021f 	and.w	r2, r0, #31
 8001568:	0940      	lsrs	r0, r0, #5
 800156a:	2301      	movs	r3, #1
 800156c:	4093      	lsls	r3, r2
 800156e:	4a02      	ldr	r2, [pc, #8]	; (8001578 <HAL_NVIC_EnableIRQ+0x18>)
 8001570:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e100 	.word	0xe000e100

0800157c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800157c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001580:	4a04      	ldr	r2, [pc, #16]	; (8001594 <HAL_MPU_Disable+0x18>)
 8001582:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001588:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800158a:	4b03      	ldr	r3, [pc, #12]	; (8001598 <HAL_MPU_Disable+0x1c>)
 800158c:	2200      	movs	r2, #0
 800158e:	605a      	str	r2, [r3, #4]
}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000ed00 	.word	0xe000ed00
 8001598:	e000ed90 	.word	0xe000ed90

0800159c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800159c:	f040 0001 	orr.w	r0, r0, #1
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_MPU_Enable+0x1c>)
 80015a2:	6058      	str	r0, [r3, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80015a4:	4a05      	ldr	r2, [pc, #20]	; (80015bc <HAL_MPU_Enable+0x20>)
 80015a6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80015a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ac:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80015ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80015b2:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80015b6:	4770      	bx	lr
 80015b8:	e000ed90 	.word	0xe000ed90
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80015c0:	b338      	cbz	r0, 8001612 <HAL_DMA2D_Init+0x52>
{
 80015c2:	b510      	push	{r4, lr}
 80015c4:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80015c6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80015ca:	b1eb      	cbz	r3, 8001608 <HAL_DMA2D_Init+0x48>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80015cc:	2302      	movs	r3, #2
 80015ce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80015d2:	6822      	ldr	r2, [r4, #0]
 80015d4:	6813      	ldr	r3, [r2, #0]
 80015d6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80015da:	6861      	ldr	r1, [r4, #4]
 80015dc:	430b      	orrs	r3, r1
 80015de:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80015e0:	6822      	ldr	r2, [r4, #0]
 80015e2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80015e4:	f023 0307 	bic.w	r3, r3, #7
 80015e8:	68a1      	ldr	r1, [r4, #8]
 80015ea:	430b      	orrs	r3, r1
 80015ec:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80015ee:	6822      	ldr	r2, [r4, #0]
 80015f0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_DMA2D_Init+0x58>)
 80015f4:	400b      	ands	r3, r1
 80015f6:	68e1      	ldr	r1, [r4, #12]
 80015f8:	430b      	orrs	r3, r1
 80015fa:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80015fc:	2000      	movs	r0, #0
 80015fe:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001600:	2301      	movs	r3, #1
 8001602:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 8001606:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8001608:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 800160c:	f7ff fd4a 	bl	80010a4 <HAL_DMA2D_MspInit>
 8001610:	e7dc      	b.n	80015cc <HAL_DMA2D_Init+0xc>
    return HAL_ERROR;
 8001612:	2001      	movs	r0, #1
}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	ffffc000 	.word	0xffffc000

0800161c <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800161c:	4770      	bx	lr

0800161e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800161e:	4770      	bx	lr

08001620 <HAL_DMA2D_IRQHandler>:
{
 8001620:	b570      	push	{r4, r5, r6, lr}
 8001622:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001624:	6803      	ldr	r3, [r0, #0]
 8001626:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001628:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800162a:	f015 0f01 	tst.w	r5, #1
 800162e:	d016      	beq.n	800165e <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001630:	f416 7f80 	tst.w	r6, #256	; 0x100
 8001634:	d013      	beq.n	800165e <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800163c:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800163e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	63c3      	str	r3, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001646:	6803      	ldr	r3, [r0, #0]
 8001648:	2201      	movs	r2, #1
 800164a:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800164c:	2304      	movs	r3, #4
 800164e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001652:	2300      	movs	r3, #0
 8001654:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8001658:	6943      	ldr	r3, [r0, #20]
 800165a:	b103      	cbz	r3, 800165e <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 800165c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800165e:	f015 0f20 	tst.w	r5, #32
 8001662:	d018      	beq.n	8001696 <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001664:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8001668:	d015      	beq.n	8001696 <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800166a:	6822      	ldr	r2, [r4, #0]
 800166c:	6813      	ldr	r3, [r2, #0]
 800166e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001672:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001674:	6823      	ldr	r3, [r4, #0]
 8001676:	2220      	movs	r2, #32
 8001678:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800167a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001682:	2304      	movs	r3, #4
 8001684:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001688:	2300      	movs	r3, #0
 800168a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 800168e:	6963      	ldr	r3, [r4, #20]
 8001690:	b10b      	cbz	r3, 8001696 <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 8001692:	4620      	mov	r0, r4
 8001694:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001696:	f015 0f08 	tst.w	r5, #8
 800169a:	d018      	beq.n	80016ce <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800169c:	f416 6f00 	tst.w	r6, #2048	; 0x800
 80016a0:	d015      	beq.n	80016ce <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80016a2:	6822      	ldr	r2, [r4, #0]
 80016a4:	6813      	ldr	r3, [r2, #0]
 80016a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016aa:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80016ac:	6823      	ldr	r3, [r4, #0]
 80016ae:	2208      	movs	r2, #8
 80016b0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80016b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80016ba:	2304      	movs	r3, #4
 80016bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80016c0:	2300      	movs	r3, #0
 80016c2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80016c6:	6963      	ldr	r3, [r4, #20]
 80016c8:	b10b      	cbz	r3, 80016ce <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 80016ca:	4620      	mov	r0, r4
 80016cc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80016ce:	f015 0f04 	tst.w	r5, #4
 80016d2:	d002      	beq.n	80016da <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80016d4:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80016d8:	d120      	bne.n	800171c <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80016da:	f015 0f02 	tst.w	r5, #2
 80016de:	d016      	beq.n	800170e <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80016e0:	f416 7f00 	tst.w	r6, #512	; 0x200
 80016e4:	d013      	beq.n	800170e <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80016e6:	6822      	ldr	r2, [r4, #0]
 80016e8:	6813      	ldr	r3, [r2, #0]
 80016ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80016ee:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	2202      	movs	r2, #2
 80016f4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80016f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016f8:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80016fa:	2301      	movs	r3, #1
 80016fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001700:	2300      	movs	r3, #0
 8001702:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8001706:	6923      	ldr	r3, [r4, #16]
 8001708:	b10b      	cbz	r3, 800170e <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 800170a:	4620      	mov	r0, r4
 800170c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800170e:	f015 0f10 	tst.w	r5, #16
 8001712:	d002      	beq.n	800171a <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001714:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8001718:	d10c      	bne.n	8001734 <HAL_DMA2D_IRQHandler+0x114>
}
 800171a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800171c:	6822      	ldr	r2, [r4, #0]
 800171e:	6813      	ldr	r3, [r2, #0]
 8001720:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001724:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001726:	6823      	ldr	r3, [r4, #0]
 8001728:	2204      	movs	r2, #4
 800172a:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800172c:	4620      	mov	r0, r4
 800172e:	f7ff ff75 	bl	800161c <HAL_DMA2D_LineEventCallback>
 8001732:	e7d2      	b.n	80016da <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001734:	6822      	ldr	r2, [r4, #0]
 8001736:	6813      	ldr	r3, [r2, #0]
 8001738:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800173c:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800173e:	6823      	ldr	r3, [r4, #0]
 8001740:	2210      	movs	r2, #16
 8001742:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001744:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001746:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001748:	2301      	movs	r3, #1
 800174a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800174e:	2300      	movs	r3, #0
 8001750:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001754:	4620      	mov	r0, r4
 8001756:	f7ff ff62 	bl	800161e <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800175a:	e7de      	b.n	800171a <HAL_DMA2D_IRQHandler+0xfa>

0800175c <HAL_DMA2D_ConfigLayer>:
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800175c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001760:	2b01      	cmp	r3, #1
 8001762:	d059      	beq.n	8001818 <HAL_DMA2D_ConfigLayer+0xbc>
{
 8001764:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8001766:	2301      	movs	r3, #1
 8001768:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800176c:	2302      	movs	r3, #2
 800176e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001772:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8001776:	69da      	ldr	r2, [r3, #28]
 8001778:	1c8b      	adds	r3, r1, #2
 800177a:	011b      	lsls	r3, r3, #4
 800177c:	58c3      	ldr	r3, [r0, r3]
 800177e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001782:	3a09      	subs	r2, #9
 8001784:	2a01      	cmp	r2, #1
 8001786:	d91e      	bls.n	80017c6 <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001788:	1c8a      	adds	r2, r1, #2
 800178a:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 800178e:	6852      	ldr	r2, [r2, #4]
 8001790:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001794:	bb41      	cbnz	r1, 80017e8 <HAL_DMA2D_ConfigLayer+0x8c>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001796:	6804      	ldr	r4, [r0, #0]
 8001798:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800179a:	4a20      	ldr	r2, [pc, #128]	; (800181c <HAL_DMA2D_ConfigLayer+0xc0>)
 800179c:	402a      	ands	r2, r5
 800179e:	4313      	orrs	r3, r2
 80017a0:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80017a2:	6802      	ldr	r2, [r0, #0]
 80017a4:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80017a8:	699c      	ldr	r4, [r3, #24]
 80017aa:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	3b09      	subs	r3, #9
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d910      	bls.n	80017d6 <HAL_DMA2D_ConfigLayer+0x7a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80017b4:	2301      	movs	r3, #1
 80017b6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80017ba:	2300      	movs	r3, #0
 80017bc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80017c0:	4618      	mov	r0, r3
}
 80017c2:	bc30      	pop	{r4, r5}
 80017c4:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80017c6:	1c8a      	adds	r2, r1, #2
 80017c8:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 80017cc:	6852      	ldr	r2, [r2, #4]
 80017ce:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80017d2:	4313      	orrs	r3, r2
 80017d4:	e7de      	b.n	8001794 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80017d6:	3102      	adds	r1, #2
 80017d8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80017dc:	684b      	ldr	r3, [r1, #4]
 80017de:	6802      	ldr	r2, [r0, #0]
 80017e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80017e4:	6293      	str	r3, [r2, #40]	; 0x28
 80017e6:	e7e5      	b.n	80017b4 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80017e8:	6804      	ldr	r4, [r0, #0]
 80017ea:	69e5      	ldr	r5, [r4, #28]
 80017ec:	4a0b      	ldr	r2, [pc, #44]	; (800181c <HAL_DMA2D_ConfigLayer+0xc0>)
 80017ee:	402a      	ands	r2, r5
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80017f4:	6802      	ldr	r2, [r0, #0]
 80017f6:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80017fa:	699c      	ldr	r4, [r3, #24]
 80017fc:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	3b09      	subs	r3, #9
 8001802:	2b01      	cmp	r3, #1
 8001804:	d8d6      	bhi.n	80017b4 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001806:	3102      	adds	r1, #2
 8001808:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800180c:	684b      	ldr	r3, [r1, #4]
 800180e:	6802      	ldr	r2, [r0, #0]
 8001810:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001814:	6213      	str	r3, [r2, #32]
 8001816:	e7cd      	b.n	80017b4 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 8001818:	2002      	movs	r0, #2
}
 800181a:	4770      	bx	lr
 800181c:	00fcfff0 	.word	0x00fcfff0

08001820 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001820:	2300      	movs	r3, #0
 8001822:	2b0f      	cmp	r3, #15
 8001824:	f200 80e3 	bhi.w	80019ee <HAL_GPIO_Init+0x1ce>
{
 8001828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800182a:	b083      	sub	sp, #12
 800182c:	e039      	b.n	80018a2 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800182e:	2209      	movs	r2, #9
 8001830:	e000      	b.n	8001834 <HAL_GPIO_Init+0x14>
 8001832:	2200      	movs	r2, #0
 8001834:	40b2      	lsls	r2, r6
 8001836:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8001838:	3402      	adds	r4, #2
 800183a:	4e6d      	ldr	r6, [pc, #436]	; (80019f0 <HAL_GPIO_Init+0x1d0>)
 800183c:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001840:	4a6c      	ldr	r2, [pc, #432]	; (80019f4 <HAL_GPIO_Init+0x1d4>)
 8001842:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001844:	43ea      	mvns	r2, r5
 8001846:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800184a:	684f      	ldr	r7, [r1, #4]
 800184c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001850:	d001      	beq.n	8001856 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8001852:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8001856:	4c67      	ldr	r4, [pc, #412]	; (80019f4 <HAL_GPIO_Init+0x1d4>)
 8001858:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 800185a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800185c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001860:	684f      	ldr	r7, [r1, #4]
 8001862:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001866:	d001      	beq.n	800186c <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8001868:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 800186c:	4c61      	ldr	r4, [pc, #388]	; (80019f4 <HAL_GPIO_Init+0x1d4>)
 800186e:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001870:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001872:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001876:	684f      	ldr	r7, [r1, #4]
 8001878:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800187c:	d001      	beq.n	8001882 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 800187e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8001882:	4c5c      	ldr	r4, [pc, #368]	; (80019f4 <HAL_GPIO_Init+0x1d4>)
 8001884:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001886:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001888:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800188a:	684e      	ldr	r6, [r1, #4]
 800188c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001890:	d001      	beq.n	8001896 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8001892:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8001896:	4c57      	ldr	r4, [pc, #348]	; (80019f4 <HAL_GPIO_Init+0x1d4>)
 8001898:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800189a:	3301      	adds	r3, #1
 800189c:	2b0f      	cmp	r3, #15
 800189e:	f200 80a4 	bhi.w	80019ea <HAL_GPIO_Init+0x1ca>
    ioposition = ((uint32_t)0x01) << position;
 80018a2:	2201      	movs	r2, #1
 80018a4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a6:	680c      	ldr	r4, [r1, #0]
 80018a8:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80018ac:	ea32 0404 	bics.w	r4, r2, r4
 80018b0:	d1f3      	bne.n	800189a <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018b2:	684c      	ldr	r4, [r1, #4]
 80018b4:	1e66      	subs	r6, r4, #1
 80018b6:	2c11      	cmp	r4, #17
 80018b8:	bf18      	it	ne
 80018ba:	2e01      	cmpne	r6, #1
 80018bc:	d901      	bls.n	80018c2 <HAL_GPIO_Init+0xa2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018be:	2c12      	cmp	r4, #18
 80018c0:	d112      	bne.n	80018e8 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->OSPEEDR; 
 80018c2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018c4:	005f      	lsls	r7, r3, #1
 80018c6:	2403      	movs	r4, #3
 80018c8:	40bc      	lsls	r4, r7
 80018ca:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 80018ce:	68cc      	ldr	r4, [r1, #12]
 80018d0:	40bc      	lsls	r4, r7
 80018d2:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80018d4:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80018d6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018d8:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80018dc:	684c      	ldr	r4, [r1, #4]
 80018de:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80018e2:	409a      	lsls	r2, r3
 80018e4:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80018e6:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80018e8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018ea:	005e      	lsls	r6, r3, #1
 80018ec:	2403      	movs	r4, #3
 80018ee:	40b4      	lsls	r4, r6
 80018f0:	43e2      	mvns	r2, r4
 80018f2:	ea27 0704 	bic.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80018f6:	688c      	ldr	r4, [r1, #8]
 80018f8:	40b4      	lsls	r4, r6
 80018fa:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 80018fc:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018fe:	684c      	ldr	r4, [r1, #4]
 8001900:	2c12      	cmp	r4, #18
 8001902:	bf18      	it	ne
 8001904:	2c02      	cmpne	r4, #2
 8001906:	d113      	bne.n	8001930 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3];
 8001908:	08df      	lsrs	r7, r3, #3
 800190a:	3708      	adds	r7, #8
 800190c:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001910:	f003 0407 	and.w	r4, r3, #7
 8001914:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8001918:	240f      	movs	r4, #15
 800191a:	fa04 f40c 	lsl.w	r4, r4, ip
 800191e:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001922:	690c      	ldr	r4, [r1, #16]
 8001924:	fa04 f40c 	lsl.w	r4, r4, ip
 8001928:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 800192c:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8001930:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001932:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001934:	684a      	ldr	r2, [r1, #4]
 8001936:	f002 0203 	and.w	r2, r2, #3
 800193a:	40b2      	lsls	r2, r6
 800193c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800193e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001940:	684a      	ldr	r2, [r1, #4]
 8001942:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001946:	d0a8      	beq.n	800189a <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001948:	4a2b      	ldr	r2, [pc, #172]	; (80019f8 <HAL_GPIO_Init+0x1d8>)
 800194a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800194c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001950:	6454      	str	r4, [r2, #68]	; 0x44
 8001952:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001954:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001958:	9201      	str	r2, [sp, #4]
 800195a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800195c:	089c      	lsrs	r4, r3, #2
 800195e:	1ca6      	adds	r6, r4, #2
 8001960:	4a23      	ldr	r2, [pc, #140]	; (80019f0 <HAL_GPIO_Init+0x1d0>)
 8001962:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001966:	f003 0203 	and.w	r2, r3, #3
 800196a:	0096      	lsls	r6, r2, #2
 800196c:	220f      	movs	r2, #15
 800196e:	40b2      	lsls	r2, r6
 8001970:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001974:	4a21      	ldr	r2, [pc, #132]	; (80019fc <HAL_GPIO_Init+0x1dc>)
 8001976:	4290      	cmp	r0, r2
 8001978:	f43f af5b 	beq.w	8001832 <HAL_GPIO_Init+0x12>
 800197c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001980:	4290      	cmp	r0, r2
 8001982:	d022      	beq.n	80019ca <HAL_GPIO_Init+0x1aa>
 8001984:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001988:	4290      	cmp	r0, r2
 800198a:	d020      	beq.n	80019ce <HAL_GPIO_Init+0x1ae>
 800198c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001990:	4290      	cmp	r0, r2
 8001992:	d01e      	beq.n	80019d2 <HAL_GPIO_Init+0x1b2>
 8001994:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001998:	4290      	cmp	r0, r2
 800199a:	d01c      	beq.n	80019d6 <HAL_GPIO_Init+0x1b6>
 800199c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019a0:	4290      	cmp	r0, r2
 80019a2:	d01a      	beq.n	80019da <HAL_GPIO_Init+0x1ba>
 80019a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019a8:	4290      	cmp	r0, r2
 80019aa:	d018      	beq.n	80019de <HAL_GPIO_Init+0x1be>
 80019ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019b0:	4290      	cmp	r0, r2
 80019b2:	d016      	beq.n	80019e2 <HAL_GPIO_Init+0x1c2>
 80019b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019b8:	4290      	cmp	r0, r2
 80019ba:	d014      	beq.n	80019e6 <HAL_GPIO_Init+0x1c6>
 80019bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019c0:	4290      	cmp	r0, r2
 80019c2:	f43f af34 	beq.w	800182e <HAL_GPIO_Init+0xe>
 80019c6:	220a      	movs	r2, #10
 80019c8:	e734      	b.n	8001834 <HAL_GPIO_Init+0x14>
 80019ca:	2201      	movs	r2, #1
 80019cc:	e732      	b.n	8001834 <HAL_GPIO_Init+0x14>
 80019ce:	2202      	movs	r2, #2
 80019d0:	e730      	b.n	8001834 <HAL_GPIO_Init+0x14>
 80019d2:	2203      	movs	r2, #3
 80019d4:	e72e      	b.n	8001834 <HAL_GPIO_Init+0x14>
 80019d6:	2204      	movs	r2, #4
 80019d8:	e72c      	b.n	8001834 <HAL_GPIO_Init+0x14>
 80019da:	2205      	movs	r2, #5
 80019dc:	e72a      	b.n	8001834 <HAL_GPIO_Init+0x14>
 80019de:	2206      	movs	r2, #6
 80019e0:	e728      	b.n	8001834 <HAL_GPIO_Init+0x14>
 80019e2:	2207      	movs	r2, #7
 80019e4:	e726      	b.n	8001834 <HAL_GPIO_Init+0x14>
 80019e6:	2208      	movs	r2, #8
 80019e8:	e724      	b.n	8001834 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80019ea:	b003      	add	sp, #12
 80019ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ee:	4770      	bx	lr
 80019f0:	40013800 	.word	0x40013800
 80019f4:	40013c00 	.word	0x40013c00
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020000 	.word	0x40020000

08001a00 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a00:	b10a      	cbz	r2, 8001a06 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a02:	6181      	str	r1, [r0, #24]
 8001a04:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a06:	0409      	lsls	r1, r1, #16
 8001a08:	6181      	str	r1, [r0, #24]
  }
}
 8001a0a:	4770      	bx	lr

08001a0c <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a0c:	2800      	cmp	r0, #0
 8001a0e:	d057      	beq.n	8001ac0 <HAL_I2C_Init+0xb4>
{
 8001a10:	b510      	push	{r4, lr}
 8001a12:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a14:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d041      	beq.n	8001aa0 <HAL_I2C_Init+0x94>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a1c:	2324      	movs	r3, #36	; 0x24
 8001a1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a22:	6822      	ldr	r2, [r4, #0]
 8001a24:	6813      	ldr	r3, [r2, #0]
 8001a26:	f023 0301 	bic.w	r3, r3, #1
 8001a2a:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a2c:	6863      	ldr	r3, [r4, #4]
 8001a2e:	6822      	ldr	r2, [r4, #0]
 8001a30:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001a34:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a36:	6822      	ldr	r2, [r4, #0]
 8001a38:	6893      	ldr	r3, [r2, #8]
 8001a3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001a3e:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a40:	68e3      	ldr	r3, [r4, #12]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d031      	beq.n	8001aaa <HAL_I2C_Init+0x9e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a46:	68a3      	ldr	r3, [r4, #8]
 8001a48:	6822      	ldr	r2, [r4, #0]
 8001a4a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001a4e:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a50:	68e3      	ldr	r3, [r4, #12]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d02f      	beq.n	8001ab6 <HAL_I2C_Init+0xaa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a56:	6822      	ldr	r2, [r4, #0]
 8001a58:	6851      	ldr	r1, [r2, #4]
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <HAL_I2C_Init+0xb8>)
 8001a5c:	430b      	orrs	r3, r1
 8001a5e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a60:	6822      	ldr	r2, [r4, #0]
 8001a62:	68d3      	ldr	r3, [r2, #12]
 8001a64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001a68:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001a6a:	6923      	ldr	r3, [r4, #16]
 8001a6c:	6962      	ldr	r2, [r4, #20]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	69a1      	ldr	r1, [r4, #24]
 8001a72:	6822      	ldr	r2, [r4, #0]
 8001a74:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001a78:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a7a:	69e3      	ldr	r3, [r4, #28]
 8001a7c:	6a21      	ldr	r1, [r4, #32]
 8001a7e:	6822      	ldr	r2, [r4, #0]
 8001a80:	430b      	orrs	r3, r1
 8001a82:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a84:	6822      	ldr	r2, [r4, #0]
 8001a86:	6813      	ldr	r3, [r2, #0]
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a8e:	2000      	movs	r0, #0
 8001a90:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a92:	2320      	movs	r3, #32
 8001a94:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a98:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a9a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 8001a9e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001aa0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001aa4:	f7ff fb1e 	bl	80010e4 <HAL_I2C_MspInit>
 8001aa8:	e7b8      	b.n	8001a1c <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001aaa:	68a3      	ldr	r3, [r4, #8]
 8001aac:	6822      	ldr	r2, [r4, #0]
 8001aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ab2:	6093      	str	r3, [r2, #8]
 8001ab4:	e7cc      	b.n	8001a50 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ab6:	6823      	ldr	r3, [r4, #0]
 8001ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	e7ca      	b.n	8001a56 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001ac0:	2001      	movs	r0, #1
}
 8001ac2:	4770      	bx	lr
 8001ac4:	02008000 	.word	0x02008000

08001ac8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ac8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b20      	cmp	r3, #32
 8001ad0:	d124      	bne.n	8001b1c <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ad2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d022      	beq.n	8001b20 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001ada:	2301      	movs	r3, #1
 8001adc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ae0:	2324      	movs	r3, #36	; 0x24
 8001ae2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ae6:	6802      	ldr	r2, [r0, #0]
 8001ae8:	6813      	ldr	r3, [r2, #0]
 8001aea:	f023 0301 	bic.w	r3, r3, #1
 8001aee:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001af0:	6802      	ldr	r2, [r0, #0]
 8001af2:	6813      	ldr	r3, [r2, #0]
 8001af4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001af8:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001afa:	6802      	ldr	r2, [r0, #0]
 8001afc:	6813      	ldr	r3, [r2, #0]
 8001afe:	4319      	orrs	r1, r3
 8001b00:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b02:	6802      	ldr	r2, [r0, #0]
 8001b04:	6813      	ldr	r3, [r2, #0]
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b0c:	2320      	movs	r3, #32
 8001b0e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b12:	2300      	movs	r3, #0
 8001b14:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001b18:	4618      	mov	r0, r3
 8001b1a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001b1c:	2002      	movs	r0, #2
 8001b1e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001b20:	2002      	movs	r0, #2
  }
}
 8001b22:	4770      	bx	lr

08001b24 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b24:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b20      	cmp	r3, #32
 8001b2c:	d122      	bne.n	8001b74 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b2e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d020      	beq.n	8001b78 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8001b36:	2301      	movs	r3, #1
 8001b38:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b3c:	2324      	movs	r3, #36	; 0x24
 8001b3e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b42:	6802      	ldr	r2, [r0, #0]
 8001b44:	6813      	ldr	r3, [r2, #0]
 8001b46:	f023 0301 	bic.w	r3, r3, #1
 8001b4a:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b4c:	6802      	ldr	r2, [r0, #0]
 8001b4e:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b54:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b58:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b5a:	6802      	ldr	r2, [r0, #0]
 8001b5c:	6813      	ldr	r3, [r2, #0]
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b64:	2320      	movs	r3, #32
 8001b66:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001b70:	4618      	mov	r0, r3
 8001b72:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001b74:	2002      	movs	r0, #2
 8001b76:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001b78:	2002      	movs	r0, #2
  }
}
 8001b7a:	4770      	bx	lr

08001b7c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001b7e:	684e      	ldr	r6, [r1, #4]
 8001b80:	6805      	ldr	r5, [r0, #0]
 8001b82:	68eb      	ldr	r3, [r5, #12]
 8001b84:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8001b88:	441e      	add	r6, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001b8a:	01d4      	lsls	r4, r2, #7
 8001b8c:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 8001b90:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8001b94:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001b98:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001b9c:	680b      	ldr	r3, [r1, #0]
 8001b9e:	6805      	ldr	r5, [r0, #0]
 8001ba0:	68ef      	ldr	r7, [r5, #12]
 8001ba2:	f3c7 470b 	ubfx	r7, r7, #16, #12
 8001ba6:	443b      	add	r3, r7
 8001ba8:	3301      	adds	r3, #1
 8001baa:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 8001bae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001bb2:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8001bb6:	68ce      	ldr	r6, [r1, #12]
 8001bb8:	6805      	ldr	r5, [r0, #0]
 8001bba:	68eb      	ldr	r3, [r5, #12]
 8001bbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bc0:	441e      	add	r6, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001bc2:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 8001bc6:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8001bca:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001bce:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001bd2:	688b      	ldr	r3, [r1, #8]
 8001bd4:	6805      	ldr	r5, [r0, #0]
 8001bd6:	68ef      	ldr	r7, [r5, #12]
 8001bd8:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8001bdc:	443b      	add	r3, r7
 8001bde:	3301      	adds	r3, #1
 8001be0:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 8001be4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001be8:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001bec:	6803      	ldr	r3, [r0, #0]
 8001bee:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8001bf2:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
 8001bf6:	f025 0507 	bic.w	r5, r5, #7
 8001bfa:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001bfe:	6803      	ldr	r3, [r0, #0]
 8001c00:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8001c04:	690d      	ldr	r5, [r1, #16]
 8001c06:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8001c0a:	f891 e031 	ldrb.w	lr, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001c0e:	f891 c032 	ldrb.w	ip, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8001c12:	698f      	ldr	r7, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001c14:	6806      	ldr	r6, [r0, #0]
 8001c16:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
 8001c1a:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
 8001c1e:	2500      	movs	r5, #0
 8001c20:	f8c6 509c 	str.w	r5, [r6, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8001c24:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8001c28:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8001c2c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8001c30:	6806      	ldr	r6, [r0, #0]
 8001c32:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
 8001c36:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8001c3a:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001c3e:	6803      	ldr	r3, [r0, #0]
 8001c40:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8001c44:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8001c48:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
 8001c4c:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001c50:	6803      	ldr	r3, [r0, #0]
 8001c52:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8001c56:	694e      	ldr	r6, [r1, #20]
 8001c58:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001c5c:	6803      	ldr	r3, [r0, #0]
 8001c5e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8001c62:	f8d3 70a0 	ldr.w	r7, [r3, #160]	; 0xa0
 8001c66:	4e2e      	ldr	r6, [pc, #184]	; (8001d20 <LTDC_SetConfig+0x1a4>)
 8001c68:	403e      	ands	r6, r7
 8001c6a:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001c6e:	69ce      	ldr	r6, [r1, #28]
 8001c70:	6a0f      	ldr	r7, [r1, #32]
 8001c72:	6803      	ldr	r3, [r0, #0]
 8001c74:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8001c78:	433e      	orrs	r6, r7
 8001c7a:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001c7e:	6803      	ldr	r3, [r0, #0]
 8001c80:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8001c84:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
 8001c88:	f8c3 50ac 	str.w	r5, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001c8c:	6803      	ldr	r3, [r0, #0]
 8001c8e:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 8001c92:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001c94:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001c98:	690b      	ldr	r3, [r1, #16]
 8001c9a:	b16b      	cbz	r3, 8001cb8 <LTDC_SetConfig+0x13c>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d039      	beq.n	8001d14 <LTDC_SetConfig+0x198>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	bf18      	it	ne
 8001ca4:	2b04      	cmpne	r3, #4
 8001ca6:	d037      	beq.n	8001d18 <LTDC_SetConfig+0x19c>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d037      	beq.n	8001d1c <LTDC_SetConfig+0x1a0>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001cac:	2b07      	cmp	r3, #7
 8001cae:	d001      	beq.n	8001cb4 <LTDC_SetConfig+0x138>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e002      	b.n	8001cba <LTDC_SetConfig+0x13e>
    tmp = 2U;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e000      	b.n	8001cba <LTDC_SetConfig+0x13e>
    tmp = 4U;
 8001cb8:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001cba:	6802      	ldr	r2, [r0, #0]
 8001cbc:	4422      	add	r2, r4
 8001cbe:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
 8001cc2:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8001cc6:	f8c2 50b0 	str.w	r5, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001cca:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8001ccc:	fb03 f502 	mul.w	r5, r3, r2
 8001cd0:	684a      	ldr	r2, [r1, #4]
 8001cd2:	680e      	ldr	r6, [r1, #0]
 8001cd4:	1b92      	subs	r2, r2, r6
 8001cd6:	fb03 f302 	mul.w	r3, r3, r2
 8001cda:	3303      	adds	r3, #3
 8001cdc:	6802      	ldr	r2, [r0, #0]
 8001cde:	4422      	add	r2, r4
 8001ce0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001ce4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001ce8:	6803      	ldr	r3, [r0, #0]
 8001cea:	4423      	add	r3, r4
 8001cec:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 8001cf0:	4a0c      	ldr	r2, [pc, #48]	; (8001d24 <LTDC_SetConfig+0x1a8>)
 8001cf2:	402a      	ands	r2, r5
 8001cf4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001cf8:	6803      	ldr	r3, [r0, #0]
 8001cfa:	4423      	add	r3, r4
 8001cfc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8001cfe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001d02:	6803      	ldr	r3, [r0, #0]
 8001d04:	441c      	add	r4, r3
 8001d06:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8001d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e7d0      	b.n	8001cba <LTDC_SetConfig+0x13e>
    tmp = 2U;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e7ce      	b.n	8001cba <LTDC_SetConfig+0x13e>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e7cc      	b.n	8001cba <LTDC_SetConfig+0x13e>
 8001d20:	fffff8f8 	.word	0xfffff8f8
 8001d24:	fffff800 	.word	0xfffff800

08001d28 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8001d28:	2800      	cmp	r0, #0
 8001d2a:	d072      	beq.n	8001e12 <HAL_LTDC_Init+0xea>
{
 8001d2c:	b538      	push	{r3, r4, r5, lr}
 8001d2e:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8001d30:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d067      	beq.n	8001e08 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001d3e:	6822      	ldr	r2, [r4, #0]
 8001d40:	6993      	ldr	r3, [r2, #24]
 8001d42:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001d46:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001d48:	6821      	ldr	r1, [r4, #0]
 8001d4a:	698a      	ldr	r2, [r1, #24]
 8001d4c:	6863      	ldr	r3, [r4, #4]
 8001d4e:	68a0      	ldr	r0, [r4, #8]
 8001d50:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001d52:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001d54:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001d56:	6920      	ldr	r0, [r4, #16]
 8001d58:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001d5e:	6821      	ldr	r1, [r4, #0]
 8001d60:	688a      	ldr	r2, [r1, #8]
 8001d62:	4b2d      	ldr	r3, [pc, #180]	; (8001e18 <HAL_LTDC_Init+0xf0>)
 8001d64:	401a      	ands	r2, r3
 8001d66:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001d68:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001d6a:	6820      	ldr	r0, [r4, #0]
 8001d6c:	6882      	ldr	r2, [r0, #8]
 8001d6e:	69a1      	ldr	r1, [r4, #24]
 8001d70:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001d74:	430a      	orrs	r2, r1
 8001d76:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001d78:	6821      	ldr	r1, [r4, #0]
 8001d7a:	68ca      	ldr	r2, [r1, #12]
 8001d7c:	401a      	ands	r2, r3
 8001d7e:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8001d80:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001d82:	6820      	ldr	r0, [r4, #0]
 8001d84:	68c2      	ldr	r2, [r0, #12]
 8001d86:	6a21      	ldr	r1, [r4, #32]
 8001d88:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001d90:	6821      	ldr	r1, [r4, #0]
 8001d92:	690a      	ldr	r2, [r1, #16]
 8001d94:	401a      	ands	r2, r3
 8001d96:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001d98:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001d9a:	6820      	ldr	r0, [r4, #0]
 8001d9c:	6902      	ldr	r2, [r0, #16]
 8001d9e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001da0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001da4:	430a      	orrs	r2, r1
 8001da6:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001da8:	6821      	ldr	r1, [r4, #0]
 8001daa:	694a      	ldr	r2, [r1, #20]
 8001dac:	4013      	ands	r3, r2
 8001dae:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8001db0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001db2:	6821      	ldr	r1, [r4, #0]
 8001db4:	694b      	ldr	r3, [r1, #20]
 8001db6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001db8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8001dc0:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8001dc4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8001dc8:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001dca:	6821      	ldr	r1, [r4, #0]
 8001dcc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8001dce:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001dd2:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001dd4:	6821      	ldr	r1, [r4, #0]
 8001dd6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8001dd8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001ddc:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8001de0:	4303      	orrs	r3, r0
 8001de2:	4313      	orrs	r3, r2
 8001de4:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001de6:	6822      	ldr	r2, [r4, #0]
 8001de8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001dea:	f043 0306 	orr.w	r3, r3, #6
 8001dee:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8001df0:	6822      	ldr	r2, [r4, #0]
 8001df2:	6993      	ldr	r3, [r2, #24]
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8001e00:	2301      	movs	r3, #1
 8001e02:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8001e06:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8001e08:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8001e0c:	f7ff f9a2 	bl	8001154 <HAL_LTDC_MspInit>
 8001e10:	e792      	b.n	8001d38 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8001e12:	2001      	movs	r0, #1
}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	f000f800 	.word	0xf000f800

08001e1c <HAL_LTDC_ErrorCallback>:
}
 8001e1c:	4770      	bx	lr

08001e1e <HAL_LTDC_LineEventCallback>:
}
 8001e1e:	4770      	bx	lr

08001e20 <HAL_LTDC_ReloadEventCallback>:
}
 8001e20:	4770      	bx	lr

08001e22 <HAL_LTDC_IRQHandler>:
{
 8001e22:	b570      	push	{r4, r5, r6, lr}
 8001e24:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001e26:	6803      	ldr	r3, [r0, #0]
 8001e28:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8001e2a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8001e2c:	f015 0f04 	tst.w	r5, #4
 8001e30:	d002      	beq.n	8001e38 <HAL_LTDC_IRQHandler+0x16>
 8001e32:	f016 0f04 	tst.w	r6, #4
 8001e36:	d112      	bne.n	8001e5e <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8001e38:	f015 0f02 	tst.w	r5, #2
 8001e3c:	d002      	beq.n	8001e44 <HAL_LTDC_IRQHandler+0x22>
 8001e3e:	f016 0f02 	tst.w	r6, #2
 8001e42:	d121      	bne.n	8001e88 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8001e44:	f015 0f01 	tst.w	r5, #1
 8001e48:	d002      	beq.n	8001e50 <HAL_LTDC_IRQHandler+0x2e>
 8001e4a:	f016 0f01 	tst.w	r6, #1
 8001e4e:	d132      	bne.n	8001eb6 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8001e50:	f015 0f08 	tst.w	r5, #8
 8001e54:	d002      	beq.n	8001e5c <HAL_LTDC_IRQHandler+0x3a>
 8001e56:	f016 0f08 	tst.w	r6, #8
 8001e5a:	d13d      	bne.n	8001ed8 <HAL_LTDC_IRQHandler+0xb6>
}
 8001e5c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8001e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e60:	f022 0204 	bic.w	r2, r2, #4
 8001e64:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8001e66:	6803      	ldr	r3, [r0, #0]
 8001e68:	2204      	movs	r2, #4
 8001e6a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8001e6c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001e78:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8001e82:	f7ff ffcb 	bl	8001e1c <HAL_LTDC_ErrorCallback>
 8001e86:	e7d7      	b.n	8001e38 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8001e88:	6822      	ldr	r2, [r4, #0]
 8001e8a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001e8c:	f023 0302 	bic.w	r3, r3, #2
 8001e90:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8001e92:	6823      	ldr	r3, [r4, #0]
 8001e94:	2202      	movs	r2, #2
 8001e96:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8001e98:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f7ff ffb4 	bl	8001e1c <HAL_LTDC_ErrorCallback>
 8001eb4:	e7c6      	b.n	8001e44 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001eb6:	6822      	ldr	r2, [r4, #0]
 8001eb8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001eba:	f023 0301 	bic.w	r3, r3, #1
 8001ebe:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8001ec0:	6822      	ldr	r2, [r4, #0]
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8001ec6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f7ff ffa4 	bl	8001e1e <HAL_LTDC_LineEventCallback>
 8001ed6:	e7bb      	b.n	8001e50 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8001ed8:	6822      	ldr	r2, [r4, #0]
 8001eda:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001edc:	f023 0308 	bic.w	r3, r3, #8
 8001ee0:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8001ee2:	6823      	ldr	r3, [r4, #0]
 8001ee4:	2208      	movs	r2, #8
 8001ee6:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f7ff ff93 	bl	8001e20 <HAL_LTDC_ReloadEventCallback>
}
 8001efa:	e7af      	b.n	8001e5c <HAL_LTDC_IRQHandler+0x3a>

08001efc <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8001efc:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d027      	beq.n	8001f54 <HAL_LTDC_ConfigLayer+0x58>
{
 8001f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f08:	4606      	mov	r6, r0
 8001f0a:	460f      	mov	r7, r1
 8001f0c:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8001f0e:	f04f 0801 	mov.w	r8, #1
 8001f12:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001f16:	2302      	movs	r3, #2
 8001f18:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001f1c:	2434      	movs	r4, #52	; 0x34
 8001f1e:	fb04 0402 	mla	r4, r4, r2, r0
 8001f22:	3438      	adds	r4, #56	; 0x38
 8001f24:	460d      	mov	r5, r1
 8001f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f32:	682b      	ldr	r3, [r5, #0]
 8001f34:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001f36:	4662      	mov	r2, ip
 8001f38:	4639      	mov	r1, r7
 8001f3a:	4630      	mov	r0, r6
 8001f3c:	f7ff fe1e 	bl	8001b7c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001f40:	6833      	ldr	r3, [r6, #0]
 8001f42:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001f46:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8001f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8001f54:	2002      	movs	r0, #2
}
 8001f56:	4770      	bx	lr

08001f58 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f58:	4a02      	ldr	r2, [pc, #8]	; (8001f64 <HAL_PWR_EnableBkUpAccess+0xc>)
 8001f5a:	6813      	ldr	r3, [r2, #0]
 8001f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f60:	6013      	str	r3, [r2, #0]
}
 8001f62:	4770      	bx	lr
 8001f64:	40007000 	.word	0x40007000

08001f68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f68:	b510      	push	{r4, lr}
 8001f6a:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_PWREx_EnableOverDrive+0x74>)
 8001f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f70:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f74:	641a      	str	r2, [r3, #64]	; 0x40
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f80:	4a17      	ldr	r2, [pc, #92]	; (8001fe0 <HAL_PWREx_EnableOverDrive+0x78>)
 8001f82:	6813      	ldr	r3, [r2, #0]
 8001f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f88:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f8a:	f7ff fa8b 	bl	80014a4 <HAL_GetTick>
 8001f8e:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <HAL_PWREx_EnableOverDrive+0x78>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001f98:	d108      	bne.n	8001fac <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f9a:	f7ff fa83 	bl	80014a4 <HAL_GetTick>
 8001f9e:	1b00      	subs	r0, r0, r4
 8001fa0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001fa4:	d9f4      	bls.n	8001f90 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8001fa6:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8001fa8:	b002      	add	sp, #8
 8001faa:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001fac:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <HAL_PWREx_EnableOverDrive+0x78>)
 8001fae:	6813      	ldr	r3, [r2, #0]
 8001fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb4:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8001fb6:	f7ff fa75 	bl	80014a4 <HAL_GetTick>
 8001fba:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <HAL_PWREx_EnableOverDrive+0x78>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001fc4:	d107      	bne.n	8001fd6 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fc6:	f7ff fa6d 	bl	80014a4 <HAL_GetTick>
 8001fca:	1b00      	subs	r0, r0, r4
 8001fcc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001fd0:	d9f4      	bls.n	8001fbc <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8001fd2:	2003      	movs	r0, #3
 8001fd4:	e7e8      	b.n	8001fa8 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	e7e6      	b.n	8001fa8 <HAL_PWREx_EnableOverDrive+0x40>
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40007000 	.word	0x40007000

08001fe4 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	f000 81ff 	beq.w	80023e8 <HAL_RCC_OscConfig+0x404>
{
 8001fea:	b570      	push	{r4, r5, r6, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff0:	6803      	ldr	r3, [r0, #0]
 8001ff2:	f013 0f01 	tst.w	r3, #1
 8001ff6:	d029      	beq.n	800204c <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ff8:	4ba7      	ldr	r3, [pc, #668]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
 8002000:	2b04      	cmp	r3, #4
 8002002:	d01a      	beq.n	800203a <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002004:	4ba4      	ldr	r3, [pc, #656]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 030c 	and.w	r3, r3, #12
 800200c:	2b08      	cmp	r3, #8
 800200e:	d00f      	beq.n	8002030 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002010:	6863      	ldr	r3, [r4, #4]
 8002012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002016:	d040      	beq.n	800209a <HAL_RCC_OscConfig+0xb6>
 8002018:	2b00      	cmp	r3, #0
 800201a:	d154      	bne.n	80020c6 <HAL_RCC_OscConfig+0xe2>
 800201c:	4b9e      	ldr	r3, [pc, #632]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	e039      	b.n	80020a4 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002030:	4b99      	ldr	r3, [pc, #612]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002038:	d0ea      	beq.n	8002010 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203a:	4b97      	ldr	r3, [pc, #604]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002042:	d003      	beq.n	800204c <HAL_RCC_OscConfig+0x68>
 8002044:	6863      	ldr	r3, [r4, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 81d0 	beq.w	80023ec <HAL_RCC_OscConfig+0x408>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800204c:	6823      	ldr	r3, [r4, #0]
 800204e:	f013 0f02 	tst.w	r3, #2
 8002052:	d074      	beq.n	800213e <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002054:	4b90      	ldr	r3, [pc, #576]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f013 0f0c 	tst.w	r3, #12
 800205c:	d05e      	beq.n	800211c <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800205e:	4b8e      	ldr	r3, [pc, #568]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b08      	cmp	r3, #8
 8002068:	d053      	beq.n	8002112 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800206a:	68e3      	ldr	r3, [r4, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 8089 	beq.w	8002184 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002072:	4a89      	ldr	r2, [pc, #548]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 8002074:	6813      	ldr	r3, [r2, #0]
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207c:	f7ff fa12 	bl	80014a4 <HAL_GetTick>
 8002080:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002082:	4b85      	ldr	r3, [pc, #532]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f013 0f02 	tst.w	r3, #2
 800208a:	d172      	bne.n	8002172 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208c:	f7ff fa0a 	bl	80014a4 <HAL_GetTick>
 8002090:	1b40      	subs	r0, r0, r5
 8002092:	2802      	cmp	r0, #2
 8002094:	d9f5      	bls.n	8002082 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8002096:	2003      	movs	r0, #3
 8002098:	e1ad      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209a:	4a7f      	ldr	r2, [pc, #508]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 800209c:	6813      	ldr	r3, [r2, #0]
 800209e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a2:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a4:	6863      	ldr	r3, [r4, #4]
 80020a6:	b32b      	cbz	r3, 80020f4 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80020a8:	f7ff f9fc 	bl	80014a4 <HAL_GetTick>
 80020ac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	4b7a      	ldr	r3, [pc, #488]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020b6:	d1c9      	bne.n	800204c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7ff f9f4 	bl	80014a4 <HAL_GetTick>
 80020bc:	1b40      	subs	r0, r0, r5
 80020be:	2864      	cmp	r0, #100	; 0x64
 80020c0:	d9f5      	bls.n	80020ae <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80020c2:	2003      	movs	r0, #3
 80020c4:	e197      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020ca:	d009      	beq.n	80020e0 <HAL_RCC_OscConfig+0xfc>
 80020cc:	4b72      	ldr	r3, [pc, #456]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	e7e1      	b.n	80020a4 <HAL_RCC_OscConfig+0xc0>
 80020e0:	4b6d      	ldr	r3, [pc, #436]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	e7d7      	b.n	80020a4 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 80020f4:	f7ff f9d6 	bl	80014a4 <HAL_GetTick>
 80020f8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fa:	4b67      	ldr	r3, [pc, #412]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002102:	d0a3      	beq.n	800204c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002104:	f7ff f9ce 	bl	80014a4 <HAL_GetTick>
 8002108:	1b40      	subs	r0, r0, r5
 800210a:	2864      	cmp	r0, #100	; 0x64
 800210c:	d9f5      	bls.n	80020fa <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 800210e:	2003      	movs	r0, #3
 8002110:	e171      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002112:	4b61      	ldr	r3, [pc, #388]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800211a:	d1a6      	bne.n	800206a <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211c:	4b5e      	ldr	r3, [pc, #376]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f013 0f02 	tst.w	r3, #2
 8002124:	d003      	beq.n	800212e <HAL_RCC_OscConfig+0x14a>
 8002126:	68e3      	ldr	r3, [r4, #12]
 8002128:	2b01      	cmp	r3, #1
 800212a:	f040 8161 	bne.w	80023f0 <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212e:	4a5a      	ldr	r2, [pc, #360]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 8002130:	6813      	ldr	r3, [r2, #0]
 8002132:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002136:	6921      	ldr	r1, [r4, #16]
 8002138:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800213c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	f013 0f08 	tst.w	r3, #8
 8002144:	d046      	beq.n	80021d4 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002146:	6963      	ldr	r3, [r4, #20]
 8002148:	b383      	cbz	r3, 80021ac <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800214a:	4a53      	ldr	r2, [pc, #332]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 800214c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002154:	f7ff f9a6 	bl	80014a4 <HAL_GetTick>
 8002158:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215a:	4b4f      	ldr	r3, [pc, #316]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 800215c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800215e:	f013 0f02 	tst.w	r3, #2
 8002162:	d137      	bne.n	80021d4 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002164:	f7ff f99e 	bl	80014a4 <HAL_GetTick>
 8002168:	1b40      	subs	r0, r0, r5
 800216a:	2802      	cmp	r0, #2
 800216c:	d9f5      	bls.n	800215a <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 800216e:	2003      	movs	r0, #3
 8002170:	e141      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002172:	4a49      	ldr	r2, [pc, #292]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 8002174:	6813      	ldr	r3, [r2, #0]
 8002176:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800217a:	6921      	ldr	r1, [r4, #16]
 800217c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e7dc      	b.n	800213e <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8002184:	4a44      	ldr	r2, [pc, #272]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 8002186:	6813      	ldr	r3, [r2, #0]
 8002188:	f023 0301 	bic.w	r3, r3, #1
 800218c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800218e:	f7ff f989 	bl	80014a4 <HAL_GetTick>
 8002192:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002194:	4b40      	ldr	r3, [pc, #256]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f013 0f02 	tst.w	r3, #2
 800219c:	d0cf      	beq.n	800213e <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219e:	f7ff f981 	bl	80014a4 <HAL_GetTick>
 80021a2:	1b40      	subs	r0, r0, r5
 80021a4:	2802      	cmp	r0, #2
 80021a6:	d9f5      	bls.n	8002194 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 80021a8:	2003      	movs	r0, #3
 80021aa:	e124      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ac:	4a3a      	ldr	r2, [pc, #232]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 80021ae:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80021b0:	f023 0301 	bic.w	r3, r3, #1
 80021b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b6:	f7ff f975 	bl	80014a4 <HAL_GetTick>
 80021ba:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021bc:	4b36      	ldr	r3, [pc, #216]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 80021be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c0:	f013 0f02 	tst.w	r3, #2
 80021c4:	d006      	beq.n	80021d4 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c6:	f7ff f96d 	bl	80014a4 <HAL_GetTick>
 80021ca:	1b40      	subs	r0, r0, r5
 80021cc:	2802      	cmp	r0, #2
 80021ce:	d9f5      	bls.n	80021bc <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 80021d0:	2003      	movs	r0, #3
 80021d2:	e110      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d4:	6823      	ldr	r3, [r4, #0]
 80021d6:	f013 0f04 	tst.w	r3, #4
 80021da:	d07d      	beq.n	80022d8 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021dc:	4b2e      	ldr	r3, [pc, #184]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80021e4:	d10b      	bne.n	80021fe <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e6:	4b2c      	ldr	r3, [pc, #176]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 80021e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021fa:	2501      	movs	r5, #1
 80021fc:	e000      	b.n	8002200 <HAL_RCC_OscConfig+0x21c>
  FlagStatus pwrclkchanged = RESET;
 80021fe:	2500      	movs	r5, #0
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002200:	4b26      	ldr	r3, [pc, #152]	; (800229c <HAL_RCC_OscConfig+0x2b8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002208:	d00e      	beq.n	8002228 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800220a:	68a3      	ldr	r3, [r4, #8]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d01f      	beq.n	8002250 <HAL_RCC_OscConfig+0x26c>
 8002210:	2b00      	cmp	r3, #0
 8002212:	d135      	bne.n	8002280 <HAL_RCC_OscConfig+0x29c>
 8002214:	4b20      	ldr	r3, [pc, #128]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 8002216:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002218:	f022 0201 	bic.w	r2, r2, #1
 800221c:	671a      	str	r2, [r3, #112]	; 0x70
 800221e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002220:	f022 0204 	bic.w	r2, r2, #4
 8002224:	671a      	str	r2, [r3, #112]	; 0x70
 8002226:	e018      	b.n	800225a <HAL_RCC_OscConfig+0x276>
      PWR->CR1 |= PWR_CR1_DBP;
 8002228:	4a1c      	ldr	r2, [pc, #112]	; (800229c <HAL_RCC_OscConfig+0x2b8>)
 800222a:	6813      	ldr	r3, [r2, #0]
 800222c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002230:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002232:	f7ff f937 	bl	80014a4 <HAL_GetTick>
 8002236:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002238:	4b18      	ldr	r3, [pc, #96]	; (800229c <HAL_RCC_OscConfig+0x2b8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002240:	d1e3      	bne.n	800220a <HAL_RCC_OscConfig+0x226>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002242:	f7ff f92f 	bl	80014a4 <HAL_GetTick>
 8002246:	1b80      	subs	r0, r0, r6
 8002248:	2864      	cmp	r0, #100	; 0x64
 800224a:	d9f5      	bls.n	8002238 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 800224c:	2003      	movs	r0, #3
 800224e:	e0d2      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002250:	4a11      	ldr	r2, [pc, #68]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 8002252:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800225a:	68a3      	ldr	r3, [r4, #8]
 800225c:	b353      	cbz	r3, 80022b4 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225e:	f7ff f921 	bl	80014a4 <HAL_GetTick>
 8002262:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 8002266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002268:	f013 0f02 	tst.w	r3, #2
 800226c:	d133      	bne.n	80022d6 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226e:	f7ff f919 	bl	80014a4 <HAL_GetTick>
 8002272:	1b80      	subs	r0, r0, r6
 8002274:	f241 3388 	movw	r3, #5000	; 0x1388
 8002278:	4298      	cmp	r0, r3
 800227a:	d9f3      	bls.n	8002264 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800227c:	2003      	movs	r0, #3
 800227e:	e0ba      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002280:	2b05      	cmp	r3, #5
 8002282:	d00d      	beq.n	80022a0 <HAL_RCC_OscConfig+0x2bc>
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 8002286:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002288:	f022 0201 	bic.w	r2, r2, #1
 800228c:	671a      	str	r2, [r3, #112]	; 0x70
 800228e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002290:	f022 0204 	bic.w	r2, r2, #4
 8002294:	671a      	str	r2, [r3, #112]	; 0x70
 8002296:	e7e0      	b.n	800225a <HAL_RCC_OscConfig+0x276>
 8002298:	40023800 	.word	0x40023800
 800229c:	40007000 	.word	0x40007000
 80022a0:	4b5c      	ldr	r3, [pc, #368]	; (8002414 <HAL_RCC_OscConfig+0x430>)
 80022a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022a4:	f042 0204 	orr.w	r2, r2, #4
 80022a8:	671a      	str	r2, [r3, #112]	; 0x70
 80022aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022ac:	f042 0201 	orr.w	r2, r2, #1
 80022b0:	671a      	str	r2, [r3, #112]	; 0x70
 80022b2:	e7d2      	b.n	800225a <HAL_RCC_OscConfig+0x276>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b4:	f7ff f8f6 	bl	80014a4 <HAL_GetTick>
 80022b8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ba:	4b56      	ldr	r3, [pc, #344]	; (8002414 <HAL_RCC_OscConfig+0x430>)
 80022bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022be:	f013 0f02 	tst.w	r3, #2
 80022c2:	d008      	beq.n	80022d6 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c4:	f7ff f8ee 	bl	80014a4 <HAL_GetTick>
 80022c8:	1b80      	subs	r0, r0, r6
 80022ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80022ce:	4298      	cmp	r0, r3
 80022d0:	d9f3      	bls.n	80022ba <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 80022d2:	2003      	movs	r0, #3
 80022d4:	e08f      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022d6:	b9fd      	cbnz	r5, 8002318 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d8:	69a3      	ldr	r3, [r4, #24]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 808a 	beq.w	80023f4 <HAL_RCC_OscConfig+0x410>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022e0:	4a4c      	ldr	r2, [pc, #304]	; (8002414 <HAL_RCC_OscConfig+0x430>)
 80022e2:	6892      	ldr	r2, [r2, #8]
 80022e4:	f002 020c 	and.w	r2, r2, #12
 80022e8:	2a08      	cmp	r2, #8
 80022ea:	d058      	beq.n	800239e <HAL_RCC_OscConfig+0x3ba>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d019      	beq.n	8002324 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f0:	4a48      	ldr	r2, [pc, #288]	; (8002414 <HAL_RCC_OscConfig+0x430>)
 80022f2:	6813      	ldr	r3, [r2, #0]
 80022f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fa:	f7ff f8d3 	bl	80014a4 <HAL_GetTick>
 80022fe:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002300:	4b44      	ldr	r3, [pc, #272]	; (8002414 <HAL_RCC_OscConfig+0x430>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002308:	d047      	beq.n	800239a <HAL_RCC_OscConfig+0x3b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230a:	f7ff f8cb 	bl	80014a4 <HAL_GetTick>
 800230e:	1b00      	subs	r0, r0, r4
 8002310:	2802      	cmp	r0, #2
 8002312:	d9f5      	bls.n	8002300 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002314:	2003      	movs	r0, #3
 8002316:	e06e      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002318:	4a3e      	ldr	r2, [pc, #248]	; (8002414 <HAL_RCC_OscConfig+0x430>)
 800231a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800231c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002320:	6413      	str	r3, [r2, #64]	; 0x40
 8002322:	e7d9      	b.n	80022d8 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8002324:	4a3b      	ldr	r2, [pc, #236]	; (8002414 <HAL_RCC_OscConfig+0x430>)
 8002326:	6813      	ldr	r3, [r2, #0]
 8002328:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800232c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800232e:	f7ff f8b9 	bl	80014a4 <HAL_GetTick>
 8002332:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002334:	4b37      	ldr	r3, [pc, #220]	; (8002414 <HAL_RCC_OscConfig+0x430>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800233c:	d006      	beq.n	800234c <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233e:	f7ff f8b1 	bl	80014a4 <HAL_GetTick>
 8002342:	1b40      	subs	r0, r0, r5
 8002344:	2802      	cmp	r0, #2
 8002346:	d9f5      	bls.n	8002334 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8002348:	2003      	movs	r0, #3
 800234a:	e054      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800234c:	69e3      	ldr	r3, [r4, #28]
 800234e:	6a22      	ldr	r2, [r4, #32]
 8002350:	4313      	orrs	r3, r2
 8002352:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002354:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002358:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800235a:	0852      	lsrs	r2, r2, #1
 800235c:	3a01      	subs	r2, #1
 800235e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002362:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002364:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002368:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800236c:	4a29      	ldr	r2, [pc, #164]	; (8002414 <HAL_RCC_OscConfig+0x430>)
 800236e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002370:	6813      	ldr	r3, [r2, #0]
 8002372:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002376:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002378:	f7ff f894 	bl	80014a4 <HAL_GetTick>
 800237c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237e:	4b25      	ldr	r3, [pc, #148]	; (8002414 <HAL_RCC_OscConfig+0x430>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002386:	d106      	bne.n	8002396 <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002388:	f7ff f88c 	bl	80014a4 <HAL_GetTick>
 800238c:	1b00      	subs	r0, r0, r4
 800238e:	2802      	cmp	r0, #2
 8002390:	d9f5      	bls.n	800237e <HAL_RCC_OscConfig+0x39a>
            return HAL_TIMEOUT;
 8002392:	2003      	movs	r0, #3
 8002394:	e02f      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002396:	2000      	movs	r0, #0
 8002398:	e02d      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
 800239a:	2000      	movs	r0, #0
 800239c:	e02b      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
      pll_config = RCC->PLLCFGR;
 800239e:	4a1d      	ldr	r2, [pc, #116]	; (8002414 <HAL_RCC_OscConfig+0x430>)
 80023a0:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d029      	beq.n	80023fa <HAL_RCC_OscConfig+0x416>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a6:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80023aa:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ac:	428b      	cmp	r3, r1
 80023ae:	d126      	bne.n	80023fe <HAL_RCC_OscConfig+0x41a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023b0:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 80023b4:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b6:	428b      	cmp	r3, r1
 80023b8:	d123      	bne.n	8002402 <HAL_RCC_OscConfig+0x41e>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023c0:	4013      	ands	r3, r2
 80023c2:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80023c6:	d11e      	bne.n	8002406 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023c8:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 80023cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023ce:	085b      	lsrs	r3, r3, #1
 80023d0:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023d2:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 80023d6:	d118      	bne.n	800240a <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023d8:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80023dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023de:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 80023e2:	d114      	bne.n	800240e <HAL_RCC_OscConfig+0x42a>
  return HAL_OK;
 80023e4:	2000      	movs	r0, #0
 80023e6:	e006      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
    return HAL_ERROR;
 80023e8:	2001      	movs	r0, #1
}
 80023ea:	4770      	bx	lr
        return HAL_ERROR;
 80023ec:	2001      	movs	r0, #1
 80023ee:	e002      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
        return HAL_ERROR;
 80023f0:	2001      	movs	r0, #1
 80023f2:	e000      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
  return HAL_OK;
 80023f4:	2000      	movs	r0, #0
}
 80023f6:	b002      	add	sp, #8
 80023f8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80023fa:	2001      	movs	r0, #1
 80023fc:	e7fb      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
 80023fe:	2001      	movs	r0, #1
 8002400:	e7f9      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
 8002402:	2001      	movs	r0, #1
 8002404:	e7f7      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
 8002406:	2001      	movs	r0, #1
 8002408:	e7f5      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
 800240a:	2001      	movs	r0, #1
 800240c:	e7f3      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
 800240e:	2001      	movs	r0, #1
 8002410:	e7f1      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800

08002418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800241a:	4b24      	ldr	r3, [pc, #144]	; (80024ac <HAL_RCC_GetSysClockFreq+0x94>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b04      	cmp	r3, #4
 8002424:	d03d      	beq.n	80024a2 <HAL_RCC_GetSysClockFreq+0x8a>
 8002426:	2b08      	cmp	r3, #8
 8002428:	d13d      	bne.n	80024a6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800242a:	4b20      	ldr	r3, [pc, #128]	; (80024ac <HAL_RCC_GetSysClockFreq+0x94>)
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002438:	d012      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800243a:	4b1c      	ldr	r3, [pc, #112]	; (80024ac <HAL_RCC_GetSysClockFreq+0x94>)
 800243c:	6859      	ldr	r1, [r3, #4]
 800243e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002442:	2300      	movs	r3, #0
 8002444:	481a      	ldr	r0, [pc, #104]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002446:	fba1 0100 	umull	r0, r1, r1, r0
 800244a:	f7fd fedd 	bl	8000208 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800244e:	4b17      	ldr	r3, [pc, #92]	; (80024ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002456:	3301      	adds	r3, #1
 8002458:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800245a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800245e:	e023      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002460:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002468:	015c      	lsls	r4, r3, #5
 800246a:	2500      	movs	r5, #0
 800246c:	1ae4      	subs	r4, r4, r3
 800246e:	f165 0500 	sbc.w	r5, r5, #0
 8002472:	01ae      	lsls	r6, r5, #6
 8002474:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8002478:	01a7      	lsls	r7, r4, #6
 800247a:	1b38      	subs	r0, r7, r4
 800247c:	eb66 0105 	sbc.w	r1, r6, r5
 8002480:	00cc      	lsls	r4, r1, #3
 8002482:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8002486:	00c5      	lsls	r5, r0, #3
 8002488:	18e8      	adds	r0, r5, r3
 800248a:	f144 0100 	adc.w	r1, r4, #0
 800248e:	028b      	lsls	r3, r1, #10
 8002490:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002494:	0284      	lsls	r4, r0, #10
 8002496:	4620      	mov	r0, r4
 8002498:	4619      	mov	r1, r3
 800249a:	2300      	movs	r3, #0
 800249c:	f7fd feb4 	bl	8000208 <__aeabi_uldivmod>
 80024a0:	e7d5      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80024a2:	4803      	ldr	r0, [pc, #12]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x98>)
 80024a4:	e000      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024a6:	4803      	ldr	r0, [pc, #12]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80024a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800
 80024b0:	017d7840 	.word	0x017d7840
 80024b4:	00f42400 	.word	0x00f42400

080024b8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80024b8:	2800      	cmp	r0, #0
 80024ba:	f000 80a0 	beq.w	80025fe <HAL_RCC_ClockConfig+0x146>
{
 80024be:	b570      	push	{r4, r5, r6, lr}
 80024c0:	460d      	mov	r5, r1
 80024c2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c4:	4b52      	ldr	r3, [pc, #328]	; (8002610 <HAL_RCC_ClockConfig+0x158>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 030f 	and.w	r3, r3, #15
 80024cc:	428b      	cmp	r3, r1
 80024ce:	d20b      	bcs.n	80024e8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d0:	4a4f      	ldr	r2, [pc, #316]	; (8002610 <HAL_RCC_ClockConfig+0x158>)
 80024d2:	6813      	ldr	r3, [r2, #0]
 80024d4:	f023 030f 	bic.w	r3, r3, #15
 80024d8:	430b      	orrs	r3, r1
 80024da:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024dc:	6813      	ldr	r3, [r2, #0]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	428b      	cmp	r3, r1
 80024e4:	f040 808d 	bne.w	8002602 <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e8:	6823      	ldr	r3, [r4, #0]
 80024ea:	f013 0f02 	tst.w	r3, #2
 80024ee:	d017      	beq.n	8002520 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	f013 0f04 	tst.w	r3, #4
 80024f4:	d004      	beq.n	8002500 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f6:	4a47      	ldr	r2, [pc, #284]	; (8002614 <HAL_RCC_ClockConfig+0x15c>)
 80024f8:	6893      	ldr	r3, [r2, #8]
 80024fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024fe:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	f013 0f08 	tst.w	r3, #8
 8002506:	d004      	beq.n	8002512 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002508:	4a42      	ldr	r2, [pc, #264]	; (8002614 <HAL_RCC_ClockConfig+0x15c>)
 800250a:	6893      	ldr	r3, [r2, #8]
 800250c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002510:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002512:	4a40      	ldr	r2, [pc, #256]	; (8002614 <HAL_RCC_ClockConfig+0x15c>)
 8002514:	6893      	ldr	r3, [r2, #8]
 8002516:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800251a:	68a1      	ldr	r1, [r4, #8]
 800251c:	430b      	orrs	r3, r1
 800251e:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002520:	6823      	ldr	r3, [r4, #0]
 8002522:	f013 0f01 	tst.w	r3, #1
 8002526:	d031      	beq.n	800258c <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002528:	6863      	ldr	r3, [r4, #4]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d020      	beq.n	8002570 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800252e:	2b02      	cmp	r3, #2
 8002530:	d025      	beq.n	800257e <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002532:	4a38      	ldr	r2, [pc, #224]	; (8002614 <HAL_RCC_ClockConfig+0x15c>)
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	f012 0f02 	tst.w	r2, #2
 800253a:	d064      	beq.n	8002606 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800253c:	4935      	ldr	r1, [pc, #212]	; (8002614 <HAL_RCC_ClockConfig+0x15c>)
 800253e:	688a      	ldr	r2, [r1, #8]
 8002540:	f022 0203 	bic.w	r2, r2, #3
 8002544:	4313      	orrs	r3, r2
 8002546:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002548:	f7fe ffac 	bl	80014a4 <HAL_GetTick>
 800254c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254e:	4b31      	ldr	r3, [pc, #196]	; (8002614 <HAL_RCC_ClockConfig+0x15c>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	6862      	ldr	r2, [r4, #4]
 8002558:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800255c:	d016      	beq.n	800258c <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800255e:	f7fe ffa1 	bl	80014a4 <HAL_GetTick>
 8002562:	1b80      	subs	r0, r0, r6
 8002564:	f241 3388 	movw	r3, #5000	; 0x1388
 8002568:	4298      	cmp	r0, r3
 800256a:	d9f0      	bls.n	800254e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 800256c:	2003      	movs	r0, #3
 800256e:	e045      	b.n	80025fc <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002570:	4a28      	ldr	r2, [pc, #160]	; (8002614 <HAL_RCC_ClockConfig+0x15c>)
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002578:	d1e0      	bne.n	800253c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800257a:	2001      	movs	r0, #1
 800257c:	e03e      	b.n	80025fc <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257e:	4a25      	ldr	r2, [pc, #148]	; (8002614 <HAL_RCC_ClockConfig+0x15c>)
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002586:	d1d9      	bne.n	800253c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002588:	2001      	movs	r0, #1
 800258a:	e037      	b.n	80025fc <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800258c:	4b20      	ldr	r3, [pc, #128]	; (8002610 <HAL_RCC_ClockConfig+0x158>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 030f 	and.w	r3, r3, #15
 8002594:	42ab      	cmp	r3, r5
 8002596:	d90a      	bls.n	80025ae <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002598:	4a1d      	ldr	r2, [pc, #116]	; (8002610 <HAL_RCC_ClockConfig+0x158>)
 800259a:	6813      	ldr	r3, [r2, #0]
 800259c:	f023 030f 	bic.w	r3, r3, #15
 80025a0:	432b      	orrs	r3, r5
 80025a2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a4:	6813      	ldr	r3, [r2, #0]
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	42ab      	cmp	r3, r5
 80025ac:	d12d      	bne.n	800260a <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ae:	6823      	ldr	r3, [r4, #0]
 80025b0:	f013 0f04 	tst.w	r3, #4
 80025b4:	d006      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b6:	4a17      	ldr	r2, [pc, #92]	; (8002614 <HAL_RCC_ClockConfig+0x15c>)
 80025b8:	6893      	ldr	r3, [r2, #8]
 80025ba:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80025be:	68e1      	ldr	r1, [r4, #12]
 80025c0:	430b      	orrs	r3, r1
 80025c2:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	f013 0f08 	tst.w	r3, #8
 80025ca:	d007      	beq.n	80025dc <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025cc:	4a11      	ldr	r2, [pc, #68]	; (8002614 <HAL_RCC_ClockConfig+0x15c>)
 80025ce:	6893      	ldr	r3, [r2, #8]
 80025d0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80025d4:	6921      	ldr	r1, [r4, #16]
 80025d6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025da:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025dc:	f7ff ff1c 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <HAL_RCC_ClockConfig+0x15c>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80025e8:	4a0b      	ldr	r2, [pc, #44]	; (8002618 <HAL_RCC_ClockConfig+0x160>)
 80025ea:	5cd3      	ldrb	r3, [r2, r3]
 80025ec:	40d8      	lsrs	r0, r3
 80025ee:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_RCC_ClockConfig+0x164>)
 80025f0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_RCC_ClockConfig+0x168>)
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	f7fe fea3 	bl	8001340 <HAL_InitTick>
  return HAL_OK;
 80025fa:	2000      	movs	r0, #0
}
 80025fc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80025fe:	2001      	movs	r0, #1
}
 8002600:	4770      	bx	lr
      return HAL_ERROR;
 8002602:	2001      	movs	r0, #1
 8002604:	e7fa      	b.n	80025fc <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8002606:	2001      	movs	r0, #1
 8002608:	e7f8      	b.n	80025fc <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 800260a:	2001      	movs	r0, #1
 800260c:	e7f6      	b.n	80025fc <HAL_RCC_ClockConfig+0x144>
 800260e:	bf00      	nop
 8002610:	40023c00 	.word	0x40023c00
 8002614:	40023800 	.word	0x40023800
 8002618:	080043a4 	.word	0x080043a4
 800261c:	20000000 	.word	0x20000000
 8002620:	20000008 	.word	0x20000008

08002624 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002624:	4b01      	ldr	r3, [pc, #4]	; (800262c <HAL_RCC_GetHCLKFreq+0x8>)
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	20000000 	.word	0x20000000

08002630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002630:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002632:	f7ff fff7 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002636:	4b04      	ldr	r3, [pc, #16]	; (8002648 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800263e:	4a03      	ldr	r2, [pc, #12]	; (800264c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002640:	5cd3      	ldrb	r3, [r2, r3]
}
 8002642:	40d8      	lsrs	r0, r3
 8002644:	bd08      	pop	{r3, pc}
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800
 800264c:	080043b4 	.word	0x080043b4

08002650 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002650:	230f      	movs	r3, #15
 8002652:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_RCC_GetClockConfig+0x34>)
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	f002 0203 	and.w	r2, r2, #3
 800265c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002664:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800266c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	08db      	lsrs	r3, r3, #3
 8002672:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002676:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002678:	4b03      	ldr	r3, [pc, #12]	; (8002688 <HAL_RCC_GetClockConfig+0x38>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 030f 	and.w	r3, r3, #15
 8002680:	600b      	str	r3, [r1, #0]
}
 8002682:	4770      	bx	lr
 8002684:	40023800 	.word	0x40023800
 8002688:	40023c00 	.word	0x40023c00

0800268c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800268c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800268e:	b083      	sub	sp, #12
 8002690:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002692:	6806      	ldr	r6, [r0, #0]
 8002694:	f016 0601 	ands.w	r6, r6, #1
 8002698:	d00d      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800269a:	4bb6      	ldr	r3, [pc, #728]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80026a8:	430a      	orrs	r2, r1
 80026aa:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80026ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 8139 	beq.w	8002926 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  uint32_t plli2sused = 0;
 80026b4:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80026b6:	6825      	ldr	r5, [r4, #0]
 80026b8:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 80026bc:	d011      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026be:	4aad      	ldr	r2, [pc, #692]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026c0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80026c4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80026c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80026ca:	430b      	orrs	r3, r1
 80026cc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026d6:	f000 8128 	beq.w	800292a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 8127 	beq.w	800292e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  uint32_t pllsaiused = 0;
 80026e0:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026e2:	6823      	ldr	r3, [r4, #0]
 80026e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80026e8:	d00f      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026ea:	4aa2      	ldr	r2, [pc, #648]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026ec:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80026f0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80026f4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80026f6:	430b      	orrs	r3, r1
 80026f8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002702:	f000 8116 	beq.w	8002932 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002706:	b903      	cbnz	r3, 800270a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 8002708:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800270a:	6823      	ldr	r3, [r4, #0]
 800270c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002710:	d000      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 8002712:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002714:	f013 0f20 	tst.w	r3, #32
 8002718:	f040 810d 	bne.w	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	f013 0f10 	tst.w	r3, #16
 8002722:	d00c      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002724:	4b93      	ldr	r3, [pc, #588]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002726:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800272a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800272e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8002732:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002736:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002738:	430a      	orrs	r2, r1
 800273a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002744:	d008      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002746:	4a8b      	ldr	r2, [pc, #556]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002748:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800274c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002750:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002752:	430b      	orrs	r3, r1
 8002754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002758:	6823      	ldr	r3, [r4, #0]
 800275a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800275e:	d008      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002760:	4a84      	ldr	r2, [pc, #528]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002762:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002766:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800276a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800276c:	430b      	orrs	r3, r1
 800276e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002778:	d008      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800277a:	4a7e      	ldr	r2, [pc, #504]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800277c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002780:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002784:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002786:	430b      	orrs	r3, r1
 8002788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002792:	d008      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002794:	4a77      	ldr	r2, [pc, #476]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002796:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800279a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800279e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80027a0:	430b      	orrs	r3, r1
 80027a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80027ac:	d008      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027ae:	4a71      	ldr	r2, [pc, #452]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027b0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80027b4:	f023 0303 	bic.w	r3, r3, #3
 80027b8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80027ba:	430b      	orrs	r3, r1
 80027bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027c0:	6823      	ldr	r3, [r4, #0]
 80027c2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80027c6:	d008      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027c8:	4a6a      	ldr	r2, [pc, #424]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80027ce:	f023 030c 	bic.w	r3, r3, #12
 80027d2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80027d4:	430b      	orrs	r3, r1
 80027d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80027e0:	d008      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027e2:	4a64      	ldr	r2, [pc, #400]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027e4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80027e8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80027ec:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80027ee:	430b      	orrs	r3, r1
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027f4:	6823      	ldr	r3, [r4, #0]
 80027f6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80027fa:	d008      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027fc:	4a5d      	ldr	r2, [pc, #372]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002802:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002806:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002808:	430b      	orrs	r3, r1
 800280a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800280e:	6823      	ldr	r3, [r4, #0]
 8002810:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002814:	d008      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002816:	4a57      	ldr	r2, [pc, #348]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002818:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800281c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002820:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002822:	430b      	orrs	r3, r1
 8002824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002828:	6823      	ldr	r3, [r4, #0]
 800282a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800282e:	d008      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002830:	4a50      	ldr	r2, [pc, #320]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002832:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002836:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800283a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800283c:	430b      	orrs	r3, r1
 800283e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002848:	d008      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800284a:	4a4a      	ldr	r2, [pc, #296]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800284c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002850:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002854:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002856:	430b      	orrs	r3, r1
 8002858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002862:	d008      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002864:	4a43      	ldr	r2, [pc, #268]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002866:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800286a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800286e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002870:	430b      	orrs	r3, r1
 8002872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800287c:	d008      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800287e:	4a3d      	ldr	r2, [pc, #244]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002880:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002884:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002888:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800288a:	430b      	orrs	r3, r1
 800288c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002896:	d00d      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002898:	4a36      	ldr	r2, [pc, #216]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800289a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800289e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80028a2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80028a4:	430b      	orrs	r3, r1
 80028a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80028aa:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80028ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028b0:	f000 80ac 	beq.w	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x380>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80028b4:	6823      	ldr	r3, [r4, #0]
 80028b6:	f013 0f08 	tst.w	r3, #8
 80028ba:	d000      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 80028bc:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028be:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80028c2:	d008      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028c4:	4a2b      	ldr	r2, [pc, #172]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80028c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80028ca:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80028ce:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80028d0:	430b      	orrs	r3, r1
 80028d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80028dc:	d009      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028de:	4a25      	ldr	r2, [pc, #148]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80028e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80028e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80028ec:	430b      	orrs	r3, r1
 80028ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80028f2:	b926      	cbnz	r6, 80028fe <HAL_RCCEx_PeriphCLKConfig+0x272>
 80028f4:	6823      	ldr	r3, [r4, #0]
 80028f6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80028fa:	f000 8107 	beq.w	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x480>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028fe:	4a1d      	ldr	r2, [pc, #116]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002900:	6813      	ldr	r3, [r2, #0]
 8002902:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002906:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002908:	f7fe fdcc 	bl	80014a4 <HAL_GetTick>
 800290c:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800290e:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002916:	d07b      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x384>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002918:	f7fe fdc4 	bl	80014a4 <HAL_GetTick>
 800291c:	1b80      	subs	r0, r0, r6
 800291e:	2864      	cmp	r0, #100	; 0x64
 8002920:	d9f5      	bls.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x282>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002922:	2003      	movs	r0, #3
 8002924:	e0f5      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x486>
      plli2sused = 1;
 8002926:	2601      	movs	r6, #1
 8002928:	e6c5      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 800292a:	2601      	movs	r6, #1
 800292c:	e6d5      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 800292e:	2501      	movs	r5, #1
 8002930:	e6d7      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 8002932:	2601      	movs	r6, #1
 8002934:	e6e7      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002936:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800293a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800293e:	641a      	str	r2, [r3, #64]	; 0x40
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800294a:	4a0b      	ldr	r2, [pc, #44]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800294c:	6813      	ldr	r3, [r2, #0]
 800294e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002952:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002954:	f7fe fda6 	bl	80014a4 <HAL_GetTick>
 8002958:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800295a:	4b07      	ldr	r3, [pc, #28]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002962:	d10b      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002964:	f7fe fd9e 	bl	80014a4 <HAL_GetTick>
 8002968:	1bc0      	subs	r0, r0, r7
 800296a:	2864      	cmp	r0, #100	; 0x64
 800296c:	d9f5      	bls.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        return HAL_TIMEOUT;
 800296e:	2003      	movs	r0, #3
 8002970:	e0cf      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800
 8002978:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800297c:	4bab      	ldr	r3, [pc, #684]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800297e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002980:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002984:	d015      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8002986:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002988:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800298c:	429a      	cmp	r2, r3
 800298e:	d010      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x326>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002990:	4ba6      	ldr	r3, [pc, #664]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002992:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002994:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002998:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800299a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800299e:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029a0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80029a2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80029a6:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80029a8:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	f013 0f01 	tst.w	r3, #1
 80029b0:	d112      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029b4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80029b8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80029bc:	d01d      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80029be:	4a9b      	ldr	r2, [pc, #620]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80029c0:	6893      	ldr	r3, [r2, #8]
 80029c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80029c6:	6093      	str	r3, [r2, #8]
 80029c8:	4998      	ldr	r1, [pc, #608]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80029ca:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80029cc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80029ce:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80029d2:	4313      	orrs	r3, r2
 80029d4:	670b      	str	r3, [r1, #112]	; 0x70
 80029d6:	e6a1      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 80029d8:	f7fe fd64 	bl	80014a4 <HAL_GetTick>
 80029dc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029de:	4b93      	ldr	r3, [pc, #588]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80029e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e2:	f013 0f02 	tst.w	r3, #2
 80029e6:	d1e4      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x326>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e8:	f7fe fd5c 	bl	80014a4 <HAL_GetTick>
 80029ec:	1bc0      	subs	r0, r0, r7
 80029ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80029f2:	4298      	cmp	r0, r3
 80029f4:	d9f3      	bls.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x352>
            return HAL_TIMEOUT;
 80029f6:	2003      	movs	r0, #3
 80029f8:	e08b      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x486>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029fa:	488c      	ldr	r0, [pc, #560]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80029fc:	6882      	ldr	r2, [r0, #8]
 80029fe:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002a02:	498b      	ldr	r1, [pc, #556]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002a04:	4019      	ands	r1, r3
 8002a06:	430a      	orrs	r2, r1
 8002a08:	6082      	str	r2, [r0, #8]
 8002a0a:	e7dd      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      pllsaiused = 1;
 8002a0c:	2501      	movs	r5, #1
 8002a0e:	e751      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x228>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a10:	6823      	ldr	r3, [r4, #0]
 8002a12:	f013 0f01 	tst.w	r3, #1
 8002a16:	d013      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8002a18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a1a:	b98b      	cbnz	r3, 8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a1c:	4a83      	ldr	r2, [pc, #524]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002a1e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a22:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a26:	6860      	ldr	r0, [r4, #4]
 8002a28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a2c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002a30:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002a34:	430b      	orrs	r3, r1
 8002a36:	68a1      	ldr	r1, [r4, #8]
 8002a38:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002a3c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002a46:	d003      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8002a48:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002a4a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002a4e:	d006      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8002a50:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002a54:	d01e      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x408>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a5c:	d11a      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x408>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a5e:	4a73      	ldr	r2, [pc, #460]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002a60:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a64:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a68:	6860      	ldr	r0, [r4, #4]
 8002a6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a6e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002a72:	68e0      	ldr	r0, [r4, #12]
 8002a74:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002a78:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a82:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002a86:	f023 031f 	bic.w	r3, r3, #31
 8002a8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002a8c:	3901      	subs	r1, #1
 8002a8e:	430b      	orrs	r3, r1
 8002a90:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002a9a:	d011      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a9c:	4a63      	ldr	r2, [pc, #396]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002a9e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002aa2:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002aa6:	6866      	ldr	r6, [r4, #4]
 8002aa8:	6923      	ldr	r3, [r4, #16]
 8002aaa:	041b      	lsls	r3, r3, #16
 8002aac:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8002ab0:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8002ab4:	4303      	orrs	r3, r0
 8002ab6:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002aba:	430b      	orrs	r3, r1
 8002abc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ac6:	d00d      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x458>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ac8:	6862      	ldr	r2, [r4, #4]
 8002aca:	6923      	ldr	r3, [r4, #16]
 8002acc:	041b      	lsls	r3, r3, #16
 8002ace:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002ad2:	68e2      	ldr	r2, [r4, #12]
 8002ad4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002ad8:	68a2      	ldr	r2, [r4, #8]
 8002ada:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002ade:	4a53      	ldr	r2, [pc, #332]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002ae0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ae4:	4a51      	ldr	r2, [pc, #324]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002ae6:	6813      	ldr	r3, [r2, #0]
 8002ae8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002aec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aee:	f7fe fcd9 	bl	80014a4 <HAL_GetTick>
 8002af2:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002af4:	4b4d      	ldr	r3, [pc, #308]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002afc:	d106      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002afe:	f7fe fcd1 	bl	80014a4 <HAL_GetTick>
 8002b02:	1b80      	subs	r0, r0, r6
 8002b04:	2864      	cmp	r0, #100	; 0x64
 8002b06:	d9f5      	bls.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x468>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b08:	2003      	movs	r0, #3
 8002b0a:	e002      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x486>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b0c:	2d01      	cmp	r5, #1
 8002b0e:	d002      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002b10:	2000      	movs	r0, #0
}
 8002b12:	b003      	add	sp, #12
 8002b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8002b16:	4a45      	ldr	r2, [pc, #276]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002b18:	6813      	ldr	r3, [r2, #0]
 8002b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002b20:	f7fe fcc0 	bl	80014a4 <HAL_GetTick>
 8002b24:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b26:	4b41      	ldr	r3, [pc, #260]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002b2e:	d006      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b30:	f7fe fcb8 	bl	80014a4 <HAL_GetTick>
 8002b34:	1b40      	subs	r0, r0, r5
 8002b36:	2864      	cmp	r0, #100	; 0x64
 8002b38:	d9f5      	bls.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x49a>
        return HAL_TIMEOUT;
 8002b3a:	2003      	movs	r0, #3
 8002b3c:	e7e9      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x486>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b3e:	6823      	ldr	r3, [r4, #0]
 8002b40:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002b44:	d001      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8002b46:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002b48:	b122      	cbz	r2, 8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 8002b4a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002b4e:	d01d      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x500>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b52:	b9db      	cbnz	r3, 8002b8c <HAL_RCCEx_PeriphCLKConfig+0x500>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b54:	4a35      	ldr	r2, [pc, #212]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002b56:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b5a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b5e:	6960      	ldr	r0, [r4, #20]
 8002b60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b64:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002b68:	69a0      	ldr	r0, [r4, #24]
 8002b6a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002b6e:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002b72:	430b      	orrs	r3, r1
 8002b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b78:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002b7c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002b80:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002b82:	3901      	subs	r1, #1
 8002b84:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b88:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002b92:	d003      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8002b94:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002b96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b9a:	d031      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x574>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	f013 0f08 	tst.w	r3, #8
 8002ba2:	d019      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ba4:	4a21      	ldr	r2, [pc, #132]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002ba6:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002baa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002bae:	6960      	ldr	r0, [r4, #20]
 8002bb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bb4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002bb8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	69e1      	ldr	r1, [r4, #28]
 8002bc0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002bc8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002bcc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002bd0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002bd2:	430b      	orrs	r3, r1
 8002bd4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8002bd8:	4a14      	ldr	r2, [pc, #80]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002bda:	6813      	ldr	r3, [r2, #0]
 8002bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002be2:	f7fe fc5f 	bl	80014a4 <HAL_GetTick>
 8002be6:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002be8:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002bf0:	d119      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x59a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bf2:	f7fe fc57 	bl	80014a4 <HAL_GetTick>
 8002bf6:	1b00      	subs	r0, r0, r4
 8002bf8:	2864      	cmp	r0, #100	; 0x64
 8002bfa:	d9f5      	bls.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
        return HAL_TIMEOUT;
 8002bfc:	2003      	movs	r0, #3
 8002bfe:	e788      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x486>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c00:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002c02:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c06:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c0a:	6965      	ldr	r5, [r4, #20]
 8002c0c:	6a23      	ldr	r3, [r4, #32]
 8002c0e:	041b      	lsls	r3, r3, #16
 8002c10:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8002c14:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8002c18:	4303      	orrs	r3, r0
 8002c1a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002c1e:	430b      	orrs	r3, r1
 8002c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002c24:	e7ba      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x510>
  return HAL_OK;
 8002c26:	2000      	movs	r0, #0
 8002c28:	e773      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	0ffffcff 	.word	0x0ffffcff

08002c34 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002c34:	b538      	push	{r3, r4, r5, lr}
 8002c36:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002c38:	6802      	ldr	r2, [r0, #0]
 8002c3a:	68d3      	ldr	r3, [r2, #12]
 8002c3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c40:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c42:	f7fe fc2f 	bl	80014a4 <HAL_GetTick>
 8002c46:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f013 0f20 	tst.w	r3, #32
 8002c50:	d107      	bne.n	8002c62 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002c52:	f7fe fc27 	bl	80014a4 <HAL_GetTick>
 8002c56:	1b40      	subs	r0, r0, r5
 8002c58:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002c5c:	d9f4      	bls.n	8002c48 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8002c5e:	2003      	movs	r0, #3
 8002c60:	e000      	b.n	8002c64 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8002c62:	2000      	movs	r0, #0
}
 8002c64:	bd38      	pop	{r3, r4, r5, pc}

08002c66 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002c66:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002c68:	6803      	ldr	r3, [r0, #0]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002c70:	d001      	beq.n	8002c76 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002c72:	2000      	movs	r0, #0
}
 8002c74:	bd38      	pop	{r3, r4, r5, pc}
 8002c76:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002c78:	f04f 32ff 	mov.w	r2, #4294967295
 8002c7c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002c7e:	f7fe fc11 	bl	80014a4 <HAL_GetTick>
 8002c82:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002c84:	6823      	ldr	r3, [r4, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002c8c:	d107      	bne.n	8002c9e <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002c8e:	f7fe fc09 	bl	80014a4 <HAL_GetTick>
 8002c92:	1b43      	subs	r3, r0, r5
 8002c94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c98:	d9f4      	bls.n	8002c84 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8002c9a:	2003      	movs	r0, #3
 8002c9c:	e7ea      	b.n	8002c74 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	e7e8      	b.n	8002c74 <RTC_EnterInitMode+0xe>
	...

08002ca4 <HAL_RTC_Init>:
{
 8002ca4:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8002ca6:	2800      	cmp	r0, #0
 8002ca8:	d05a      	beq.n	8002d60 <HAL_RTC_Init+0xbc>
 8002caa:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002cac:	7f43      	ldrb	r3, [r0, #29]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d03f      	beq.n	8002d32 <HAL_RTC_Init+0x8e>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	22ca      	movs	r2, #202	; 0xca
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24
 8002cbc:	6823      	ldr	r3, [r4, #0]
 8002cbe:	2253      	movs	r2, #83	; 0x53
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	f7ff ffcf 	bl	8002c66 <RTC_EnterInitMode>
 8002cc8:	4605      	mov	r5, r0
 8002cca:	2800      	cmp	r0, #0
 8002ccc:	d135      	bne.n	8002d3a <HAL_RTC_Init+0x96>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002cce:	6822      	ldr	r2, [r4, #0]
 8002cd0:	6891      	ldr	r1, [r2, #8]
 8002cd2:	4b24      	ldr	r3, [pc, #144]	; (8002d64 <HAL_RTC_Init+0xc0>)
 8002cd4:	400b      	ands	r3, r1
 8002cd6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002cd8:	6821      	ldr	r1, [r4, #0]
 8002cda:	688a      	ldr	r2, [r1, #8]
 8002cdc:	6863      	ldr	r3, [r4, #4]
 8002cde:	6920      	ldr	r0, [r4, #16]
 8002ce0:	4303      	orrs	r3, r0
 8002ce2:	6960      	ldr	r0, [r4, #20]
 8002ce4:	4303      	orrs	r3, r0
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	68e2      	ldr	r2, [r4, #12]
 8002cee:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002cf0:	6822      	ldr	r2, [r4, #0]
 8002cf2:	6913      	ldr	r3, [r2, #16]
 8002cf4:	68a1      	ldr	r1, [r4, #8]
 8002cf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002cfa:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002cfc:	6822      	ldr	r2, [r4, #0]
 8002cfe:	68d3      	ldr	r3, [r2, #12]
 8002d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d04:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f013 0f20 	tst.w	r3, #32
 8002d0e:	d01b      	beq.n	8002d48 <HAL_RTC_Init+0xa4>
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8002d10:	6822      	ldr	r2, [r4, #0]
 8002d12:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002d14:	f023 0308 	bic.w	r3, r3, #8
 8002d18:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8002d1a:	6822      	ldr	r2, [r4, #0]
 8002d1c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002d1e:	69a1      	ldr	r1, [r4, #24]
 8002d20:	430b      	orrs	r3, r1
 8002d22:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	22ff      	movs	r2, #255	; 0xff
 8002d28:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	7763      	strb	r3, [r4, #29]
}
 8002d2e:	4628      	mov	r0, r5
 8002d30:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002d32:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002d34:	f7fe faa2 	bl	800127c <HAL_RTC_MspInit>
 8002d38:	e7bb      	b.n	8002cb2 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d3a:	6823      	ldr	r3, [r4, #0]
 8002d3c:	22ff      	movs	r2, #255	; 0xff
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d40:	2304      	movs	r3, #4
 8002d42:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8002d44:	2501      	movs	r5, #1
 8002d46:	e7f2      	b.n	8002d2e <HAL_RTC_Init+0x8a>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d48:	4620      	mov	r0, r4
 8002d4a:	f7ff ff73 	bl	8002c34 <HAL_RTC_WaitForSynchro>
 8002d4e:	2800      	cmp	r0, #0
 8002d50:	d0de      	beq.n	8002d10 <HAL_RTC_Init+0x6c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	22ff      	movs	r2, #255	; 0xff
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d58:	2304      	movs	r3, #4
 8002d5a:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8002d5c:	2501      	movs	r5, #1
 8002d5e:	e7e6      	b.n	8002d2e <HAL_RTC_Init+0x8a>
     return HAL_ERROR;
 8002d60:	2501      	movs	r5, #1
 8002d62:	e7e4      	b.n	8002d2e <HAL_RTC_Init+0x8a>
 8002d64:	ff8fffbf 	.word	0xff8fffbf

08002d68 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8002d68:	2300      	movs	r3, #0

  while(Value >= 10)
 8002d6a:	2809      	cmp	r0, #9
 8002d6c:	d903      	bls.n	8002d76 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 8002d6e:	3301      	adds	r3, #1
    Value -= 10;
 8002d70:	380a      	subs	r0, #10
 8002d72:	b2c0      	uxtb	r0, r0
 8002d74:	e7f9      	b.n	8002d6a <RTC_ByteToBcd2+0x2>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	b2db      	uxtb	r3, r3
}
 8002d7a:	4318      	orrs	r0, r3
 8002d7c:	4770      	bx	lr
	...

08002d80 <HAL_RTC_SetTime>:
{
 8002d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002d82:	7f03      	ldrb	r3, [r0, #28]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d076      	beq.n	8002e76 <HAL_RTC_SetTime+0xf6>
 8002d88:	4604      	mov	r4, r0
 8002d8a:	460e      	mov	r6, r1
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d90:	2302      	movs	r3, #2
 8002d92:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8002d94:	2a00      	cmp	r2, #0
 8002d96:	d145      	bne.n	8002e24 <HAL_RTC_SetTime+0xa4>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002d98:	6803      	ldr	r3, [r0, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002da0:	d101      	bne.n	8002da6 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 8002da2:	2300      	movs	r3, #0
 8002da4:	730b      	strb	r3, [r1, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002da6:	7830      	ldrb	r0, [r6, #0]
 8002da8:	f7ff ffde 	bl	8002d68 <RTC_ByteToBcd2>
 8002dac:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002dae:	7870      	ldrb	r0, [r6, #1]
 8002db0:	f7ff ffda 	bl	8002d68 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002db4:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002db8:	78b0      	ldrb	r0, [r6, #2]
 8002dba:	f7ff ffd5 	bl	8002d68 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002dbe:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16));
 8002dc0:	7b30      	ldrb	r0, [r6, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002dc2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002dc6:	6823      	ldr	r3, [r4, #0]
 8002dc8:	22ca      	movs	r2, #202	; 0xca
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	2253      	movs	r2, #83	; 0x53
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	f7ff ff47 	bl	8002c66 <RTC_EnterInitMode>
 8002dd8:	4607      	mov	r7, r0
 8002dda:	2800      	cmp	r0, #0
 8002ddc:	d134      	bne.n	8002e48 <HAL_RTC_SetTime+0xc8>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002dde:	6822      	ldr	r2, [r4, #0]
 8002de0:	4b26      	ldr	r3, [pc, #152]	; (8002e7c <HAL_RTC_SetTime+0xfc>)
 8002de2:	402b      	ands	r3, r5
 8002de4:	6013      	str	r3, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002de6:	6822      	ldr	r2, [r4, #0]
 8002de8:	6893      	ldr	r3, [r2, #8]
 8002dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dee:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002df0:	6821      	ldr	r1, [r4, #0]
 8002df2:	688b      	ldr	r3, [r1, #8]
 8002df4:	6932      	ldr	r2, [r6, #16]
 8002df6:	6970      	ldr	r0, [r6, #20]
 8002df8:	4302      	orrs	r2, r0
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002dfe:	6822      	ldr	r2, [r4, #0]
 8002e00:	68d3      	ldr	r3, [r2, #12]
 8002e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e06:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e08:	6823      	ldr	r3, [r4, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f013 0f20 	tst.w	r3, #32
 8002e10:	d023      	beq.n	8002e5a <HAL_RTC_SetTime+0xda>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e12:	6823      	ldr	r3, [r4, #0]
 8002e14:	22ff      	movs	r2, #255	; 0xff
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	7723      	strb	r3, [r4, #28]
}
 8002e20:	4638      	mov	r0, r7
 8002e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002e24:	6803      	ldr	r3, [r0, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002e2c:	d101      	bne.n	8002e32 <HAL_RTC_SetTime+0xb2>
      sTime->TimeFormat = 0x00;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	730b      	strb	r3, [r1, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002e32:	7833      	ldrb	r3, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002e34:	7875      	ldrb	r5, [r6, #1]
 8002e36:	022d      	lsls	r5, r5, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002e38:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8002e3c:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002e3e:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));
 8002e40:	7b30      	ldrb	r0, [r6, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002e42:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8002e46:	e7be      	b.n	8002dc6 <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e48:	6823      	ldr	r3, [r4, #0]
 8002e4a:	22ff      	movs	r2, #255	; 0xff
 8002e4c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e4e:	2304      	movs	r3, #4
 8002e50:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002e52:	2300      	movs	r3, #0
 8002e54:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8002e56:	2701      	movs	r7, #1
 8002e58:	e7e2      	b.n	8002e20 <HAL_RTC_SetTime+0xa0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	f7ff feea 	bl	8002c34 <HAL_RTC_WaitForSynchro>
 8002e60:	2800      	cmp	r0, #0
 8002e62:	d0d6      	beq.n	8002e12 <HAL_RTC_SetTime+0x92>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e64:	6823      	ldr	r3, [r4, #0]
 8002e66:	22ff      	movs	r2, #255	; 0xff
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e6a:	2304      	movs	r3, #4
 8002e6c:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002e6e:	2300      	movs	r3, #0
 8002e70:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8002e72:	2701      	movs	r7, #1
 8002e74:	e7d4      	b.n	8002e20 <HAL_RTC_SetTime+0xa0>
  __HAL_LOCK(hrtc);
 8002e76:	2702      	movs	r7, #2
 8002e78:	e7d2      	b.n	8002e20 <HAL_RTC_SetTime+0xa0>
 8002e7a:	bf00      	nop
 8002e7c:	007f7f7f 	.word	0x007f7f7f

08002e80 <HAL_RTC_SetDate>:
{
 8002e80:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8002e82:	7f03      	ldrb	r3, [r0, #28]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d064      	beq.n	8002f52 <HAL_RTC_SetDate+0xd2>
 8002e88:	4604      	mov	r4, r0
 8002e8a:	460e      	mov	r6, r1
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e90:	2302      	movs	r3, #2
 8002e92:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e94:	b93a      	cbnz	r2, 8002ea6 <HAL_RTC_SetDate+0x26>
 8002e96:	784b      	ldrb	r3, [r1, #1]
 8002e98:	f013 0f10 	tst.w	r3, #16
 8002e9c:	d003      	beq.n	8002ea6 <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e9e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002ea2:	330a      	adds	r3, #10
 8002ea4:	704b      	strb	r3, [r1, #1]
  if(Format == RTC_FORMAT_BIN)
 8002ea6:	2a00      	cmp	r2, #0
 8002ea8:	d131      	bne.n	8002f0e <HAL_RTC_SetDate+0x8e>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002eaa:	78f0      	ldrb	r0, [r6, #3]
 8002eac:	f7ff ff5c 	bl	8002d68 <RTC_ByteToBcd2>
 8002eb0:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8002eb2:	7870      	ldrb	r0, [r6, #1]
 8002eb4:	f7ff ff58 	bl	8002d68 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002eb8:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002ebc:	78b0      	ldrb	r0, [r6, #2]
 8002ebe:	f7ff ff53 	bl	8002d68 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8002ec2:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13));
 8002ec4:	7830      	ldrb	r0, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002ec6:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	22ca      	movs	r2, #202	; 0xca
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	2253      	movs	r2, #83	; 0x53
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	f7ff fec5 	bl	8002c66 <RTC_EnterInitMode>
 8002edc:	4606      	mov	r6, r0
 8002ede:	bb08      	cbnz	r0, 8002f24 <HAL_RTC_SetDate+0xa4>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002ee0:	6822      	ldr	r2, [r4, #0]
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <HAL_RTC_SetDate+0xd8>)
 8002ee4:	402b      	ands	r3, r5
 8002ee6:	6053      	str	r3, [r2, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002ee8:	6822      	ldr	r2, [r4, #0]
 8002eea:	68d3      	ldr	r3, [r2, #12]
 8002eec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ef0:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f013 0f20 	tst.w	r3, #32
 8002efa:	d01c      	beq.n	8002f36 <HAL_RTC_SetDate+0xb6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	22ff      	movs	r2, #255	; 0xff
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002f02:	2301      	movs	r3, #1
 8002f04:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002f06:	2300      	movs	r3, #0
 8002f08:	7723      	strb	r3, [r4, #28]
}
 8002f0a:	4630      	mov	r0, r6
 8002f0c:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002f0e:	78f3      	ldrb	r3, [r6, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 8002f10:	7875      	ldrb	r5, [r6, #1]
 8002f12:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002f14:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  ((uint32_t)sDate->Date) | \
 8002f18:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8002f1a:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));
 8002f1c:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002f1e:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
 8002f22:	e7d2      	b.n	8002eca <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	22ff      	movs	r2, #255	; 0xff
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f2a:	2304      	movs	r3, #4
 8002f2c:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002f2e:	2300      	movs	r3, #0
 8002f30:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8002f32:	2601      	movs	r6, #1
 8002f34:	e7e9      	b.n	8002f0a <HAL_RTC_SetDate+0x8a>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f36:	4620      	mov	r0, r4
 8002f38:	f7ff fe7c 	bl	8002c34 <HAL_RTC_WaitForSynchro>
 8002f3c:	2800      	cmp	r0, #0
 8002f3e:	d0dd      	beq.n	8002efc <HAL_RTC_SetDate+0x7c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f40:	6823      	ldr	r3, [r4, #0]
 8002f42:	22ff      	movs	r2, #255	; 0xff
 8002f44:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f46:	2304      	movs	r3, #4
 8002f48:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8002f4e:	2601      	movs	r6, #1
 8002f50:	e7db      	b.n	8002f0a <HAL_RTC_SetDate+0x8a>
 __HAL_LOCK(hrtc);
 8002f52:	2602      	movs	r6, #2
 8002f54:	e7d9      	b.n	8002f0a <HAL_RTC_SetDate+0x8a>
 8002f56:	bf00      	nop
 8002f58:	00ffff3f 	.word	0x00ffff3f

08002f5c <HAL_RTC_SetAlarm>:
{
 8002f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002f5e:	7f03      	ldrb	r3, [r0, #28]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	f000 80a9 	beq.w	80030b8 <HAL_RTC_SetAlarm+0x15c>
 8002f66:	4604      	mov	r4, r0
 8002f68:	460d      	mov	r5, r1
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8002f72:	2a00      	cmp	r2, #0
 8002f74:	d14d      	bne.n	8003012 <HAL_RTC_SetAlarm+0xb6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002f76:	6803      	ldr	r3, [r0, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002f7e:	d101      	bne.n	8002f84 <HAL_RTC_SetAlarm+0x28>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8002f80:	2300      	movs	r3, #0
 8002f82:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8002f84:	6a2e      	ldr	r6, [r5, #32]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8002f86:	7828      	ldrb	r0, [r5, #0]
 8002f88:	f7ff feee 	bl	8002d68 <RTC_ByteToBcd2>
 8002f8c:	0407      	lsls	r7, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8002f8e:	7868      	ldrb	r0, [r5, #1]
 8002f90:	f7ff feea 	bl	8002d68 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8002f94:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002f98:	78a8      	ldrb	r0, [r5, #2]
 8002f9a:	f7ff fee5 	bl	8002d68 <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8002f9e:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8002fa0:	7b28      	ldrb	r0, [r5, #12]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002fa2:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8002fa6:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 8002faa:	f7ff fedd 	bl	8002d68 <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8002fae:	ea47 6700 	orr.w	r7, r7, r0, lsl #24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8002fb2:	4337      	orrs	r7, r6
              ((uint32_t)sAlarm->AlarmMask));
 8002fb4:	69ae      	ldr	r6, [r5, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8002fb6:	433e      	orrs	r6, r7
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002fb8:	686f      	ldr	r7, [r5, #4]
 8002fba:	69eb      	ldr	r3, [r5, #28]
 8002fbc:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fbe:	6823      	ldr	r3, [r4, #0]
 8002fc0:	22ca      	movs	r2, #202	; 0xca
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24
 8002fc4:	6823      	ldr	r3, [r4, #0]
 8002fc6:	2253      	movs	r2, #83	; 0x53
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002fca:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fd0:	d039      	beq.n	8003046 <HAL_RTC_SetAlarm+0xea>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002fd2:	6822      	ldr	r2, [r4, #0]
 8002fd4:	6893      	ldr	r3, [r2, #8]
 8002fd6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fda:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8002fdc:	6822      	ldr	r2, [r4, #0]
 8002fde:	6893      	ldr	r3, [r2, #8]
 8002fe0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fe4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8002fe6:	f7fe fa5d 	bl	80014a4 <HAL_GetTick>
 8002fea:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8002fec:	6823      	ldr	r3, [r4, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	f012 0f02 	tst.w	r2, #2
 8002ff4:	d150      	bne.n	8003098 <HAL_RTC_SetAlarm+0x13c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002ff6:	f7fe fa55 	bl	80014a4 <HAL_GetTick>
 8002ffa:	1b40      	subs	r0, r0, r5
 8002ffc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003000:	d9f4      	bls.n	8002fec <HAL_RTC_SetAlarm+0x90>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003002:	6823      	ldr	r3, [r4, #0]
 8003004:	22ff      	movs	r2, #255	; 0xff
 8003006:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003008:	2003      	movs	r0, #3
 800300a:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800300c:	2300      	movs	r3, #0
 800300e:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8003010:	e051      	b.n	80030b6 <HAL_RTC_SetAlarm+0x15a>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003012:	6803      	ldr	r3, [r0, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f013 0f40 	tst.w	r3, #64	; 0x40
 800301a:	d101      	bne.n	8003020 <HAL_RTC_SetAlarm+0xc4>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800301c:	2300      	movs	r3, #0
 800301e:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8003020:	6a2e      	ldr	r6, [r5, #32]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8003022:	782a      	ldrb	r2, [r5, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8003024:	786b      	ldrb	r3, [r5, #1]
 8003026:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8003028:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800302c:	78aa      	ldrb	r2, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800302e:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8003030:	7b2a      	ldrb	r2, [r5, #12]
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003032:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8003036:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800303a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800303e:	431e      	orrs	r6, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003040:	69ab      	ldr	r3, [r5, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8003042:	431e      	orrs	r6, r3
 8003044:	e7b8      	b.n	8002fb8 <HAL_RTC_SetAlarm+0x5c>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003046:	6822      	ldr	r2, [r4, #0]
 8003048:	6893      	ldr	r3, [r2, #8]
 800304a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800304e:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003050:	6822      	ldr	r2, [r4, #0]
 8003052:	6893      	ldr	r3, [r2, #8]
 8003054:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003058:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800305a:	f7fe fa23 	bl	80014a4 <HAL_GetTick>
 800305e:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	f012 0f01 	tst.w	r2, #1
 8003068:	d10d      	bne.n	8003086 <HAL_RTC_SetAlarm+0x12a>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800306a:	f7fe fa1b 	bl	80014a4 <HAL_GetTick>
 800306e:	1b40      	subs	r0, r0, r5
 8003070:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003074:	d9f4      	bls.n	8003060 <HAL_RTC_SetAlarm+0x104>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	22ff      	movs	r2, #255	; 0xff
 800307a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800307c:	2003      	movs	r0, #3
 800307e:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8003080:	2300      	movs	r3, #0
 8003082:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8003084:	e017      	b.n	80030b6 <HAL_RTC_SetAlarm+0x15a>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003086:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003088:	6823      	ldr	r3, [r4, #0]
 800308a:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800308c:	6822      	ldr	r2, [r4, #0]
 800308e:	6893      	ldr	r3, [r2, #8]
 8003090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003094:	6093      	str	r3, [r2, #8]
 8003096:	e007      	b.n	80030a8 <HAL_RTC_SetAlarm+0x14c>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003098:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800309a:	6823      	ldr	r3, [r4, #0]
 800309c:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800309e:	6822      	ldr	r2, [r4, #0]
 80030a0:	6893      	ldr	r3, [r2, #8]
 80030a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030a6:	6093      	str	r3, [r2, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	22ff      	movs	r2, #255	; 0xff
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80030ae:	2301      	movs	r3, #1
 80030b0:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 80030b2:	2000      	movs	r0, #0
 80030b4:	7720      	strb	r0, [r4, #28]
}
 80030b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 80030b8:	2002      	movs	r0, #2
 80030ba:	e7fc      	b.n	80030b6 <HAL_RTC_SetAlarm+0x15a>

080030bc <HAL_RTCEx_SetTimeStamp>:
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030bc:	7f03      	ldrb	r3, [r0, #28]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d028      	beq.n	8003114 <HAL_RTCEx_SetTimeStamp+0x58>
{
 80030c2:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hrtc);
 80030c4:	2401      	movs	r4, #1
 80030c6:	7704      	strb	r4, [r0, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030c8:	2302      	movs	r3, #2
 80030ca:	7743      	strb	r3, [r0, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80030cc:	6805      	ldr	r5, [r0, #0]
 80030ce:	68ae      	ldr	r6, [r5, #8]
 80030d0:	f6a3 030b 	subw	r3, r3, #2059	; 0x80b
 80030d4:	4033      	ands	r3, r6

  tmpreg|= TimeStampEdge;
 80030d6:	4319      	orrs	r1, r3

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030d8:	23ca      	movs	r3, #202	; 0xca
 80030da:	626b      	str	r3, [r5, #36]	; 0x24
 80030dc:	6803      	ldr	r3, [r0, #0]
 80030de:	2553      	movs	r5, #83	; 0x53
 80030e0:	625d      	str	r5, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80030e2:	6805      	ldr	r5, [r0, #0]
 80030e4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80030e6:	f023 0306 	bic.w	r3, r3, #6
 80030ea:	64eb      	str	r3, [r5, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80030ec:	6805      	ldr	r5, [r0, #0]
 80030ee:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80030f0:	431a      	orrs	r2, r3
 80030f2:	64ea      	str	r2, [r5, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80030f4:	6803      	ldr	r3, [r0, #0]
 80030f6:	6099      	str	r1, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80030f8:	6802      	ldr	r2, [r0, #0]
 80030fa:	6893      	ldr	r3, [r2, #8]
 80030fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003100:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003102:	6803      	ldr	r3, [r0, #0]
 8003104:	22ff      	movs	r2, #255	; 0xff
 8003106:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003108:	7744      	strb	r4, [r0, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800310a:	2300      	movs	r3, #0
 800310c:	7703      	strb	r3, [r0, #28]

  return HAL_OK;
 800310e:	4618      	mov	r0, r3
}
 8003110:	bc70      	pop	{r4, r5, r6}
 8003112:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8003114:	2002      	movs	r0, #2
}
 8003116:	4770      	bx	lr

08003118 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003118:	b570      	push	{r4, r5, r6, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003122:	6800      	ldr	r0, [r0, #0]
 8003124:	f001 f838 	bl	8004198 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003128:	4605      	mov	r5, r0
 800312a:	b110      	cbz	r0, 8003132 <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 800312c:	4628      	mov	r0, r5
 800312e:	b002      	add	sp, #8
 8003130:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003132:	6820      	ldr	r0, [r4, #0]
 8003134:	f001 f843 	bl	80041be <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003138:	b938      	cbnz	r0, 800314a <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800313a:	2301      	movs	r3, #1
 800313c:	64a3      	str	r3, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800313e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003140:	2b01      	cmp	r3, #1
 8003142:	d00b      	beq.n	800315c <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003144:	462e      	mov	r6, r5
 8003146:	4628      	mov	r0, r5
 8003148:	e014      	b.n	8003174 <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800314a:	2300      	movs	r3, #0
 800314c:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800314e:	6820      	ldr	r0, [r4, #0]
 8003150:	f001 f822 	bl	8004198 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003154:	2800      	cmp	r0, #0
 8003156:	d0f2      	beq.n	800313e <SD_PowerON+0x26>
      return errorstate;
 8003158:	4605      	mov	r5, r0
 800315a:	e7e7      	b.n	800312c <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800315c:	2100      	movs	r1, #0
 800315e:	6820      	ldr	r0, [r4, #0]
 8003160:	f001 f844 	bl	80041ec <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003164:	2800      	cmp	r0, #0
 8003166:	d0ed      	beq.n	8003144 <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003168:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800316c:	e7de      	b.n	800312c <SD_PowerON+0x14>
    count++;
 800316e:	9b01      	ldr	r3, [sp, #4]
 8003170:	3301      	adds	r3, #1
 8003172:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003174:	9a01      	ldr	r2, [sp, #4]
 8003176:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800317a:	429a      	cmp	r2, r3
 800317c:	d813      	bhi.n	80031a6 <SD_PowerON+0x8e>
 800317e:	b996      	cbnz	r6, 80031a6 <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003180:	2100      	movs	r1, #0
 8003182:	6820      	ldr	r0, [r4, #0]
 8003184:	f001 f832 	bl	80041ec <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003188:	b9e0      	cbnz	r0, 80031c4 <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800318a:	4912      	ldr	r1, [pc, #72]	; (80031d4 <SD_PowerON+0xbc>)
 800318c:	6820      	ldr	r0, [r4, #0]
 800318e:	f001 f845 	bl	800421c <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003192:	4606      	mov	r6, r0
 8003194:	b9c0      	cbnz	r0, 80031c8 <SD_PowerON+0xb0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003196:	2100      	movs	r1, #0
 8003198:	6820      	ldr	r0, [r4, #0]
 800319a:	f000 febe 	bl	8003f1a <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800319e:	0fc3      	lsrs	r3, r0, #31
 80031a0:	d0e5      	beq.n	800316e <SD_PowerON+0x56>
 80031a2:	461e      	mov	r6, r3
 80031a4:	e7e3      	b.n	800316e <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80031a6:	9a01      	ldr	r2, [sp, #4]
 80031a8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d80e      	bhi.n	80031ce <SD_PowerON+0xb6>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80031b0:	f010 4380 	ands.w	r3, r0, #1073741824	; 0x40000000
 80031b4:	d002      	beq.n	80031bc <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80031b6:	2301      	movs	r3, #1
 80031b8:	6463      	str	r3, [r4, #68]	; 0x44
 80031ba:	e7b7      	b.n	800312c <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDSC;
 80031bc:	2200      	movs	r2, #0
 80031be:	6462      	str	r2, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 80031c0:	461d      	mov	r5, r3
 80031c2:	e7b3      	b.n	800312c <SD_PowerON+0x14>
      return errorstate;
 80031c4:	4605      	mov	r5, r0
 80031c6:	e7b1      	b.n	800312c <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80031c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80031cc:	e7ae      	b.n	800312c <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80031ce:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 80031d2:	e7ab      	b.n	800312c <SD_PowerON+0x14>
 80031d4:	c1100000 	.word	0xc1100000

080031d8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80031d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031da:	b089      	sub	sp, #36	; 0x24
 80031dc:	4604      	mov	r4, r0
 80031de:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80031e0:	f7fe f960 	bl	80014a4 <HAL_GetTick>
 80031e4:	4606      	mov	r6, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 80031e6:	2300      	movs	r3, #0
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80031ec:	2108      	movs	r1, #8
 80031ee:	6820      	ldr	r0, [r4, #0]
 80031f0:	f000 ffa2 	bl	8004138 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80031f4:	4605      	mov	r5, r0
 80031f6:	b110      	cbz	r0, 80031fe <SD_FindSCR+0x26>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 80031f8:	4628      	mov	r0, r5
 80031fa:	b009      	add	sp, #36	; 0x24
 80031fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80031fe:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003200:	0409      	lsls	r1, r1, #16
 8003202:	6820      	ldr	r0, [r4, #0]
 8003204:	f000 fff2 	bl	80041ec <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003208:	4605      	mov	r5, r0
 800320a:	2800      	cmp	r0, #0
 800320c:	d1f4      	bne.n	80031f8 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800320e:	f04f 33ff 	mov.w	r3, #4294967295
 8003212:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8003214:	2308      	movs	r3, #8
 8003216:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8003218:	2330      	movs	r3, #48	; 0x30
 800321a:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800321c:	2302      	movs	r3, #2
 800321e:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003220:	2300      	movs	r3, #0
 8003222:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8003224:	2301      	movs	r3, #1
 8003226:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003228:	a902      	add	r1, sp, #8
 800322a:	6820      	ldr	r0, [r4, #0]
 800322c:	f000 ff72 	bl	8004114 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003230:	6820      	ldr	r0, [r4, #0]
 8003232:	f001 f825 	bl	8004280 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003236:	4605      	mov	r5, r0
 8003238:	b158      	cbz	r0, 8003252 <SD_FindSCR+0x7a>
 800323a:	e7dd      	b.n	80031f8 <SD_FindSCR+0x20>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800323c:	f000 fe48 	bl	8003ed0 <SDMMC_ReadFIFO>
 8003240:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
      index++;
 8003244:	3501      	adds	r5, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003246:	f7fe f92d 	bl	80014a4 <HAL_GetTick>
 800324a:	1b83      	subs	r3, r0, r6
 800324c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003250:	d03f      	beq.n	80032d2 <SD_FindSCR+0xfa>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8003252:	6820      	ldr	r0, [r4, #0]
 8003254:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003256:	f013 0f2a 	tst.w	r3, #42	; 0x2a
 800325a:	d107      	bne.n	800326c <SD_FindSCR+0x94>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800325c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800325e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003262:	d1eb      	bne.n	800323c <SD_FindSCR+0x64>
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8003264:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003266:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800326a:	d1ec      	bne.n	8003246 <SD_FindSCR+0x6e>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800326c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800326e:	f013 0f08 	tst.w	r3, #8
 8003272:	d125      	bne.n	80032c0 <SD_FindSCR+0xe8>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003274:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003276:	f013 0f02 	tst.w	r3, #2
 800327a:	d124      	bne.n	80032c6 <SD_FindSCR+0xee>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800327c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800327e:	f015 0520 	ands.w	r5, r5, #32
 8003282:	d123      	bne.n	80032cc <SD_FindSCR+0xf4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003284:	f240 533a 	movw	r3, #1338	; 0x53a
 8003288:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800328a:	9a01      	ldr	r2, [sp, #4]
 800328c:	0213      	lsls	r3, r2, #8
 800328e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003292:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003296:	0a11      	lsrs	r1, r2, #8
 8003298:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800329c:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800329e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80032a2:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80032a4:	9a00      	ldr	r2, [sp, #0]
 80032a6:	0213      	lsls	r3, r2, #8
 80032a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80032ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80032b0:	0a11      	lsrs	r1, r2, #8
 80032b2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80032b6:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80032b8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80032bc:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 80032be:	e79b      	b.n	80031f8 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80032c0:	2508      	movs	r5, #8
 80032c2:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80032c4:	e798      	b.n	80031f8 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80032c6:	2502      	movs	r5, #2
 80032c8:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80032ca:	e795      	b.n	80031f8 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80032cc:	2520      	movs	r5, #32
 80032ce:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 80032d0:	e792      	b.n	80031f8 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 80032d2:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80032d6:	e78f      	b.n	80031f8 <SD_FindSCR+0x20>

080032d8 <SD_WideBus_Enable>:
{
 80032d8:	b510      	push	{r4, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 80032de:	2100      	movs	r1, #0
 80032e0:	9100      	str	r1, [sp, #0]
 80032e2:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80032e4:	6800      	ldr	r0, [r0, #0]
 80032e6:	f000 fe18 	bl	8003f1a <SDMMC_GetResponse>
 80032ea:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80032ee:	d113      	bne.n	8003318 <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 80032f0:	4669      	mov	r1, sp
 80032f2:	4620      	mov	r0, r4
 80032f4:	f7ff ff70 	bl	80031d8 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80032f8:	b980      	cbnz	r0, 800331c <SD_WideBus_Enable+0x44>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80032fa:	9b01      	ldr	r3, [sp, #4]
 80032fc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003300:	d00e      	beq.n	8003320 <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003302:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003304:	0409      	lsls	r1, r1, #16
 8003306:	6820      	ldr	r0, [r4, #0]
 8003308:	f000 ff70 	bl	80041ec <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800330c:	b930      	cbnz	r0, 800331c <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800330e:	2102      	movs	r1, #2
 8003310:	6820      	ldr	r0, [r4, #0]
 8003312:	f000 ff9d 	bl	8004250 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003316:	e001      	b.n	800331c <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003318:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 800331c:	b002      	add	sp, #8
 800331e:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003320:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003324:	e7fa      	b.n	800331c <SD_WideBus_Enable+0x44>

08003326 <SD_WideBus_Disable>:
{
 8003326:	b510      	push	{r4, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 800332c:	2100      	movs	r1, #0
 800332e:	9100      	str	r1, [sp, #0]
 8003330:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003332:	6800      	ldr	r0, [r0, #0]
 8003334:	f000 fdf1 	bl	8003f1a <SDMMC_GetResponse>
 8003338:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800333c:	d113      	bne.n	8003366 <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 800333e:	4669      	mov	r1, sp
 8003340:	4620      	mov	r0, r4
 8003342:	f7ff ff49 	bl	80031d8 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003346:	b980      	cbnz	r0, 800336a <SD_WideBus_Disable+0x44>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003348:	9b01      	ldr	r3, [sp, #4]
 800334a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800334e:	d00e      	beq.n	800336e <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003350:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003352:	0409      	lsls	r1, r1, #16
 8003354:	6820      	ldr	r0, [r4, #0]
 8003356:	f000 ff49 	bl	80041ec <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800335a:	b930      	cbnz	r0, 800336a <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800335c:	2100      	movs	r1, #0
 800335e:	6820      	ldr	r0, [r4, #0]
 8003360:	f000 ff76 	bl	8004250 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003364:	e001      	b.n	800336a <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003366:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 800336a:	b002      	add	sp, #8
 800336c:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800336e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003372:	e7fa      	b.n	800336a <SD_WideBus_Disable+0x44>

08003374 <HAL_SD_GetCardCSD>:
{
 8003374:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003376:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003378:	0f9b      	lsrs	r3, r3, #30
 800337a:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800337c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800337e:	f3c3 6383 	ubfx	r3, r3, #26, #4
 8003382:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003384:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 8003388:	f003 0303 	and.w	r3, r3, #3
 800338c:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800338e:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8003392:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003394:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 8003398:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800339a:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 800339e:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80033a0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80033a2:	0d1b      	lsrs	r3, r3, #20
 80033a4:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80033a6:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80033b0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80033b2:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80033b6:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80033b8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80033ba:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80033be:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80033c0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80033c2:	f3c3 3340 	ubfx	r3, r3, #13, #1
 80033c6:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80033c8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80033ca:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80033ce:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80033d0:	2300      	movs	r3, #0
 80033d2:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80033d4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f040 8088 	bne.w	80034ec <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80033dc:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80033de:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033e2:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 80033e6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80033e8:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 80033ec:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80033ee:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80033f0:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 80033f4:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80033f6:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003400:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003402:	f3c3 5342 	ubfx	r3, r3, #21, #3
 8003406:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003408:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800340a:	f3c3 4382 	ubfx	r3, r3, #18, #3
 800340e:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003410:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003412:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 8003416:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003418:	690b      	ldr	r3, [r1, #16]
 800341a:	3301      	adds	r3, #1
 800341c:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800341e:	7e0a      	ldrb	r2, [r1, #24]
 8003420:	f002 0207 	and.w	r2, r2, #7
 8003424:	3202      	adds	r2, #2
 8003426:	fa03 f202 	lsl.w	r2, r3, r2
 800342a:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800342c:	7a0b      	ldrb	r3, [r1, #8]
 800342e:	f003 040f 	and.w	r4, r3, #15
 8003432:	2301      	movs	r3, #1
 8003434:	40a3      	lsls	r3, r4
 8003436:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003438:	0a5b      	lsrs	r3, r3, #9
 800343a:	fb03 f302 	mul.w	r3, r3, r2
 800343e:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003444:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003446:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003448:	f3c3 3380 	ubfx	r3, r3, #14, #1
 800344c:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800344e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003450:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8003454:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003456:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800345c:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800345e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003460:	0fdb      	lsrs	r3, r3, #31
 8003462:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003464:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003466:	f3c3 7341 	ubfx	r3, r3, #29, #2
 800346a:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800346c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800346e:	f3c3 6382 	ubfx	r3, r3, #26, #3
 8003472:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003474:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003476:	f3c3 5383 	ubfx	r3, r3, #22, #4
 800347a:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800347c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800347e:	f3c3 5340 	ubfx	r3, r3, #21, #1
 8003482:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800348c:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
 8003490:	f002 0201 	and.w	r2, r2, #1
 8003494:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003498:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800349a:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800349e:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80034a2:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80034a4:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80034a8:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80034ac:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80034ae:	f3c2 3240 	ubfx	r2, r2, #13, #1
 80034b2:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80034b6:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80034b8:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80034bc:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80034c0:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80034c2:	f3c2 2281 	ubfx	r2, r2, #10, #2
 80034c6:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80034ca:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80034cc:	f3c2 2201 	ubfx	r2, r2, #8, #2
 80034d0:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80034d4:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80034d6:	f3c2 0246 	ubfx	r2, r2, #1, #7
 80034da:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80034de:	2201      	movs	r2, #1
 80034e0:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 80034e4:	4618      	mov	r0, r3
}
 80034e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034ea:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d111      	bne.n	8003514 <HAL_SD_GetCardCSD+0x1a0>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80034f0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80034f2:	041b      	lsls	r3, r3, #16
 80034f4:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80034f8:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 80034fc:	4313      	orrs	r3, r2
 80034fe:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003500:	690b      	ldr	r3, [r1, #16]
 8003502:	3301      	adds	r3, #1
 8003504:	029b      	lsls	r3, r3, #10
 8003506:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003508:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800350a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800350e:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003510:	6603      	str	r3, [r0, #96]	; 0x60
 8003512:	e798      	b.n	8003446 <HAL_SD_GetCardCSD+0xd2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003514:	6803      	ldr	r3, [r0, #0]
 8003516:	4a05      	ldr	r2, [pc, #20]	; (800352c <HAL_SD_GetCardCSD+0x1b8>)
 8003518:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800351a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800351c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003520:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003522:	2301      	movs	r3, #1
 8003524:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8003528:	4618      	mov	r0, r3
 800352a:	e7dc      	b.n	80034e6 <HAL_SD_GetCardCSD+0x172>
 800352c:	004005ff 	.word	0x004005ff

08003530 <SD_InitCard>:
{
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	b090      	sub	sp, #64	; 0x40
 8003534:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 8003536:	2301      	movs	r3, #1
 8003538:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800353c:	6800      	ldr	r0, [r0, #0]
 800353e:	f000 fcd2 	bl	8003ee6 <SDMMC_GetPowerState>
 8003542:	2800      	cmp	r0, #0
 8003544:	d06c      	beq.n	8003620 <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003546:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003548:	2b03      	cmp	r3, #3
 800354a:	d145      	bne.n	80035d8 <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800354c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800354e:	2b03      	cmp	r3, #3
 8003550:	d15d      	bne.n	800360e <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003552:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003554:	2b03      	cmp	r3, #3
 8003556:	d01d      	beq.n	8003594 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 8003558:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800355c:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800355e:	0409      	lsls	r1, r1, #16
 8003560:	6820      	ldr	r0, [r4, #0]
 8003562:	f000 feba 	bl	80042da <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003566:	4605      	mov	r5, r0
 8003568:	2800      	cmp	r0, #0
 800356a:	d15b      	bne.n	8003624 <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800356c:	2100      	movs	r1, #0
 800356e:	6820      	ldr	r0, [r4, #0]
 8003570:	f000 fcd3 	bl	8003f1a <SDMMC_GetResponse>
 8003574:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003576:	2104      	movs	r1, #4
 8003578:	6820      	ldr	r0, [r4, #0]
 800357a:	f000 fcce 	bl	8003f1a <SDMMC_GetResponse>
 800357e:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003580:	2108      	movs	r1, #8
 8003582:	6820      	ldr	r0, [r4, #0]
 8003584:	f000 fcc9 	bl	8003f1a <SDMMC_GetResponse>
 8003588:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800358a:	210c      	movs	r1, #12
 800358c:	6820      	ldr	r0, [r4, #0]
 800358e:	f000 fcc4 	bl	8003f1a <SDMMC_GetResponse>
 8003592:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003594:	2104      	movs	r1, #4
 8003596:	6820      	ldr	r0, [r4, #0]
 8003598:	f000 fcbf 	bl	8003f1a <SDMMC_GetResponse>
 800359c:	0d00      	lsrs	r0, r0, #20
 800359e:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80035a0:	a905      	add	r1, sp, #20
 80035a2:	4620      	mov	r0, r4
 80035a4:	f7ff fee6 	bl	8003374 <HAL_SD_GetCardCSD>
 80035a8:	2800      	cmp	r0, #0
 80035aa:	d13e      	bne.n	800362a <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80035ac:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80035ae:	0412      	lsls	r2, r2, #16
 80035b0:	2300      	movs	r3, #0
 80035b2:	6820      	ldr	r0, [r4, #0]
 80035b4:	f000 fdd8 	bl	8004168 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80035b8:	4605      	mov	r5, r0
 80035ba:	bb98      	cbnz	r0, 8003624 <SD_InitCard+0xf4>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80035bc:	4623      	mov	r3, r4
 80035be:	f853 6b10 	ldr.w	r6, [r3], #16
 80035c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80035c6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80035ca:	3404      	adds	r4, #4
 80035cc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80035d0:	4630      	mov	r0, r6
 80035d2:	f000 fc61 	bl	8003e98 <SDMMC_Init>
  return HAL_SD_ERROR_NONE;
 80035d6:	e025      	b.n	8003624 <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80035d8:	6820      	ldr	r0, [r4, #0]
 80035da:	f000 fe69 	bl	80042b0 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80035de:	4605      	mov	r5, r0
 80035e0:	bb00      	cbnz	r0, 8003624 <SD_InitCard+0xf4>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80035e2:	2100      	movs	r1, #0
 80035e4:	6820      	ldr	r0, [r4, #0]
 80035e6:	f000 fc98 	bl	8003f1a <SDMMC_GetResponse>
 80035ea:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80035ec:	2104      	movs	r1, #4
 80035ee:	6820      	ldr	r0, [r4, #0]
 80035f0:	f000 fc93 	bl	8003f1a <SDMMC_GetResponse>
 80035f4:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80035f6:	2108      	movs	r1, #8
 80035f8:	6820      	ldr	r0, [r4, #0]
 80035fa:	f000 fc8e 	bl	8003f1a <SDMMC_GetResponse>
 80035fe:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003600:	210c      	movs	r1, #12
 8003602:	6820      	ldr	r0, [r4, #0]
 8003604:	f000 fc89 	bl	8003f1a <SDMMC_GetResponse>
 8003608:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 800360c:	e79e      	b.n	800354c <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800360e:	f10d 0112 	add.w	r1, sp, #18
 8003612:	6820      	ldr	r0, [r4, #0]
 8003614:	f000 fe76 	bl	8004304 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003618:	4605      	mov	r5, r0
 800361a:	2800      	cmp	r0, #0
 800361c:	d099      	beq.n	8003552 <SD_InitCard+0x22>
 800361e:	e001      	b.n	8003624 <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003620:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8003624:	4628      	mov	r0, r5
 8003626:	b010      	add	sp, #64	; 0x40
 8003628:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800362a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800362e:	e7f9      	b.n	8003624 <SD_InitCard+0xf4>

08003630 <HAL_SD_InitCard>:
{
 8003630:	b530      	push	{r4, r5, lr}
 8003632:	b08b      	sub	sp, #44	; 0x2c
 8003634:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003636:	2300      	movs	r3, #0
 8003638:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800363a:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800363c:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800363e:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003640:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003642:	2376      	movs	r3, #118	; 0x76
 8003644:	9309      	str	r3, [sp, #36]	; 0x24
  status = SDMMC_Init(hsd->Instance, Init);
 8003646:	ab0a      	add	r3, sp, #40	; 0x28
 8003648:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800364c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003650:	ab04      	add	r3, sp, #16
 8003652:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003654:	6820      	ldr	r0, [r4, #0]
 8003656:	f000 fc1f 	bl	8003e98 <SDMMC_Init>
  if(status != HAL_OK)
 800365a:	b118      	cbz	r0, 8003664 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 800365c:	2501      	movs	r5, #1
}
 800365e:	4628      	mov	r0, r5
 8003660:	b00b      	add	sp, #44	; 0x2c
 8003662:	bd30      	pop	{r4, r5, pc}
 8003664:	4605      	mov	r5, r0
  __HAL_SD_DISABLE(hsd);
 8003666:	6822      	ldr	r2, [r4, #0]
 8003668:	6853      	ldr	r3, [r2, #4]
 800366a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800366e:	6053      	str	r3, [r2, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003670:	6820      	ldr	r0, [r4, #0]
 8003672:	f000 fc30 	bl	8003ed6 <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8003676:	6822      	ldr	r2, [r4, #0]
 8003678:	6853      	ldr	r3, [r2, #4]
 800367a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800367e:	6053      	str	r3, [r2, #4]
  errorstate = SD_PowerON(hsd);
 8003680:	4620      	mov	r0, r4
 8003682:	f7ff fd49 	bl	8003118 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003686:	b130      	cbz	r0, 8003696 <HAL_SD_InitCard+0x66>
    hsd->State = HAL_SD_STATE_READY;
 8003688:	2501      	movs	r5, #1
 800368a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800368e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003690:	4303      	orrs	r3, r0
 8003692:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003694:	e7e3      	b.n	800365e <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 8003696:	4620      	mov	r0, r4
 8003698:	f7ff ff4a 	bl	8003530 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 800369c:	b130      	cbz	r0, 80036ac <HAL_SD_InitCard+0x7c>
    hsd->State = HAL_SD_STATE_READY;
 800369e:	2501      	movs	r5, #1
 80036a0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80036a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036a6:	4303      	orrs	r3, r0
 80036a8:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80036aa:	e7d8      	b.n	800365e <HAL_SD_InitCard+0x2e>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80036ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036b0:	6820      	ldr	r0, [r4, #0]
 80036b2:	f000 fd41 	bl	8004138 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80036b6:	2800      	cmp	r0, #0
 80036b8:	d0d1      	beq.n	800365e <HAL_SD_InitCard+0x2e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	4904      	ldr	r1, [pc, #16]	; (80036d0 <HAL_SD_InitCard+0xa0>)
 80036be:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80036c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036c2:	4303      	orrs	r3, r0
 80036c4:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80036c6:	2501      	movs	r5, #1
 80036c8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 80036cc:	e7c7      	b.n	800365e <HAL_SD_InitCard+0x2e>
 80036ce:	bf00      	nop
 80036d0:	004005ff 	.word	0x004005ff

080036d4 <HAL_SD_Init>:
  if(hsd == NULL)
 80036d4:	b1a8      	cbz	r0, 8003702 <HAL_SD_Init+0x2e>
{
 80036d6:	b510      	push	{r4, lr}
 80036d8:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 80036da:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80036de:	b163      	cbz	r3, 80036fa <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 80036e0:	2303      	movs	r3, #3
 80036e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80036e6:	4620      	mov	r0, r4
 80036e8:	f7ff ffa2 	bl	8003630 <HAL_SD_InitCard>
 80036ec:	b958      	cbnz	r0, 8003706 <HAL_SD_Init+0x32>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80036ee:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80036f0:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80036f2:	2301      	movs	r3, #1
 80036f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80036f8:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 80036fa:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 80036fc:	f7fd fdce 	bl	800129c <HAL_SD_MspInit>
 8003700:	e7ee      	b.n	80036e0 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8003702:	2001      	movs	r0, #1
}
 8003704:	4770      	bx	lr
    return HAL_ERROR;
 8003706:	2001      	movs	r0, #1
 8003708:	e7f6      	b.n	80036f8 <HAL_SD_Init+0x24>
	...

0800370c <HAL_SD_ConfigWideBusOperation>:
{
 800370c:	b530      	push	{r4, r5, lr}
 800370e:	b08b      	sub	sp, #44	; 0x2c
 8003710:	4604      	mov	r4, r0
 8003712:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8003714:	2303      	movs	r3, #3
 8003716:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 800371a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800371c:	2b03      	cmp	r3, #3
 800371e:	d01c      	beq.n	800375a <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003720:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003724:	d008      	beq.n	8003738 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8003726:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800372a:	d00a      	beq.n	8003742 <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800372c:	b179      	cbz	r1, 800374e <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800372e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003730:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003734:	6383      	str	r3, [r0, #56]	; 0x38
 8003736:	e014      	b.n	8003762 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003738:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800373a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800373e:	6383      	str	r3, [r0, #56]	; 0x38
 8003740:	e00f      	b.n	8003762 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8003742:	f7ff fdc9 	bl	80032d8 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8003746:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003748:	4303      	orrs	r3, r0
 800374a:	63a3      	str	r3, [r4, #56]	; 0x38
 800374c:	e009      	b.n	8003762 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 800374e:	f7ff fdea 	bl	8003326 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8003752:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003754:	4303      	orrs	r3, r0
 8003756:	63a3      	str	r3, [r4, #56]	; 0x38
 8003758:	e003      	b.n	8003762 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800375a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003760:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003762:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003764:	b1c3      	cbz	r3, 8003798 <HAL_SD_ConfigWideBusOperation+0x8c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003766:	6823      	ldr	r3, [r4, #0]
 8003768:	4a17      	ldr	r2, [pc, #92]	; (80037c8 <HAL_SD_ConfigWideBusOperation+0xbc>)
 800376a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800376c:	2501      	movs	r5, #1
 800376e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003772:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003776:	6820      	ldr	r0, [r4, #0]
 8003778:	f000 fcde 	bl	8004138 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800377c:	b130      	cbz	r0, 800378c <HAL_SD_ConfigWideBusOperation+0x80>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	4911      	ldr	r1, [pc, #68]	; (80037c8 <HAL_SD_ConfigWideBusOperation+0xbc>)
 8003782:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003784:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003786:	4303      	orrs	r3, r0
 8003788:	63a3      	str	r3, [r4, #56]	; 0x38
    status = HAL_ERROR;
 800378a:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 800378c:	2301      	movs	r3, #1
 800378e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8003792:	4628      	mov	r0, r5
 8003794:	b00b      	add	sp, #44	; 0x2c
 8003796:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003798:	6863      	ldr	r3, [r4, #4]
 800379a:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800379c:	68a3      	ldr	r3, [r4, #8]
 800379e:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80037a0:	68e3      	ldr	r3, [r4, #12]
 80037a2:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 80037a4:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80037a6:	6963      	ldr	r3, [r4, #20]
 80037a8:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80037aa:	69a3      	ldr	r3, [r4, #24]
 80037ac:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDMMC_Init(hsd->Instance, Init);
 80037ae:	ab0a      	add	r3, sp, #40	; 0x28
 80037b0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80037b4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80037b8:	ab04      	add	r3, sp, #16
 80037ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037bc:	6820      	ldr	r0, [r4, #0]
 80037be:	f000 fb6b 	bl	8003e98 <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 80037c2:	2500      	movs	r5, #0
 80037c4:	e7d5      	b.n	8003772 <HAL_SD_ConfigWideBusOperation+0x66>
 80037c6:	bf00      	nop
 80037c8:	004005ff 	.word	0x004005ff

080037cc <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80037cc:	b1e0      	cbz	r0, 8003808 <HAL_SDRAM_Init+0x3c>
{   
 80037ce:	b538      	push	{r3, r4, r5, lr}
 80037d0:	460d      	mov	r5, r1
 80037d2:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80037d4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80037d8:	b18b      	cbz	r3, 80037fe <HAL_SDRAM_Init+0x32>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80037da:	2302      	movs	r3, #2
 80037dc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80037e0:	4621      	mov	r1, r4
 80037e2:	f851 0b04 	ldr.w	r0, [r1], #4
 80037e6:	f000 fa13 	bl	8003c10 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80037ea:	6862      	ldr	r2, [r4, #4]
 80037ec:	4629      	mov	r1, r5
 80037ee:	6820      	ldr	r0, [r4, #0]
 80037f0:	f000 fa48 	bl	8003c84 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80037f4:	2301      	movs	r3, #1
 80037f6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 80037fa:	2000      	movs	r0, #0
}
 80037fc:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 80037fe:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8003802:	f7fd fd99 	bl	8001338 <HAL_SDRAM_MspInit>
 8003806:	e7e8      	b.n	80037da <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8003808:	2001      	movs	r0, #1
}
 800380a:	4770      	bx	lr

0800380c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800380c:	b538      	push	{r3, r4, r5, lr}
 800380e:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003810:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8003814:	b2c0      	uxtb	r0, r0
 8003816:	2802      	cmp	r0, #2
 8003818:	d00d      	beq.n	8003836 <HAL_SDRAM_SendCommand+0x2a>
 800381a:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800381c:	2302      	movs	r3, #2
 800381e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003822:	6820      	ldr	r0, [r4, #0]
 8003824:	f000 fa7a 	bl	8003d1c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003828:	682b      	ldr	r3, [r5, #0]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d004      	beq.n	8003838 <HAL_SDRAM_SendCommand+0x2c>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800382e:	2301      	movs	r3, #1
 8003830:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8003834:	2000      	movs	r0, #0
}
 8003836:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003838:	2305      	movs	r3, #5
 800383a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;  
 800383e:	2000      	movs	r0, #0
 8003840:	e7f9      	b.n	8003836 <HAL_SDRAM_SendCommand+0x2a>

08003842 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8003842:	b510      	push	{r4, lr}
 8003844:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003846:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800384a:	b2c0      	uxtb	r0, r0
 800384c:	2802      	cmp	r0, #2
 800384e:	d009      	beq.n	8003864 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003850:	2302      	movs	r3, #2
 8003852:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003856:	6820      	ldr	r0, [r4, #0]
 8003858:	f000 fa76 	bl	8003d48 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800385c:	2301      	movs	r3, #1
 800385e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 8003862:	2000      	movs	r0, #0
}
 8003864:	bd10      	pop	{r4, pc}

08003866 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003866:	4770      	bx	lr

08003868 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003868:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b01      	cmp	r3, #1
 8003870:	d13a      	bne.n	80038e8 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003872:	2302      	movs	r3, #2
 8003874:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003878:	6802      	ldr	r2, [r0, #0]
 800387a:	68d3      	ldr	r3, [r2, #12]
 800387c:	f043 0301 	orr.w	r3, r3, #1
 8003880:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003882:	6803      	ldr	r3, [r0, #0]
 8003884:	4a1a      	ldr	r2, [pc, #104]	; (80038f0 <HAL_TIM_Base_Start_IT+0x88>)
 8003886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388a:	bf18      	it	ne
 800388c:	4293      	cmpne	r3, r2
 800388e:	d01d      	beq.n	80038cc <HAL_TIM_Base_Start_IT+0x64>
 8003890:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003894:	4293      	cmp	r3, r2
 8003896:	d019      	beq.n	80038cc <HAL_TIM_Base_Start_IT+0x64>
 8003898:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800389c:	4293      	cmp	r3, r2
 800389e:	d015      	beq.n	80038cc <HAL_TIM_Base_Start_IT+0x64>
 80038a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d011      	beq.n	80038cc <HAL_TIM_Base_Start_IT+0x64>
 80038a8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d00d      	beq.n	80038cc <HAL_TIM_Base_Start_IT+0x64>
 80038b0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d009      	beq.n	80038cc <HAL_TIM_Base_Start_IT+0x64>
 80038b8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80038bc:	4293      	cmp	r3, r2
 80038be:	d005      	beq.n	80038cc <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038c8:	2000      	movs	r0, #0
 80038ca:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038cc:	6899      	ldr	r1, [r3, #8]
 80038ce:	4a09      	ldr	r2, [pc, #36]	; (80038f4 <HAL_TIM_Base_Start_IT+0x8c>)
 80038d0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d2:	2a06      	cmp	r2, #6
 80038d4:	bf18      	it	ne
 80038d6:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 80038da:	d007      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80038e4:	2000      	movs	r0, #0
 80038e6:	4770      	bx	lr
    return HAL_ERROR;
 80038e8:	2001      	movs	r0, #1
 80038ea:	4770      	bx	lr
  return HAL_OK;
 80038ec:	2000      	movs	r0, #0
}
 80038ee:	4770      	bx	lr
 80038f0:	40010000 	.word	0x40010000
 80038f4:	00010007 	.word	0x00010007

080038f8 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038f8:	4770      	bx	lr

080038fa <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038fa:	4770      	bx	lr

080038fc <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038fc:	4770      	bx	lr

080038fe <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038fe:	4770      	bx	lr

08003900 <HAL_TIM_IRQHandler>:
{
 8003900:	b510      	push	{r4, lr}
 8003902:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003904:	6803      	ldr	r3, [r0, #0]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	f012 0f02 	tst.w	r2, #2
 800390c:	d011      	beq.n	8003932 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	f012 0f02 	tst.w	r2, #2
 8003914:	d00d      	beq.n	8003932 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003916:	f06f 0202 	mvn.w	r2, #2
 800391a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800391c:	2301      	movs	r3, #1
 800391e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003920:	6803      	ldr	r3, [r0, #0]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	f013 0f03 	tst.w	r3, #3
 8003928:	d079      	beq.n	8003a1e <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800392a:	f7ff ffe6 	bl	80038fa <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392e:	2300      	movs	r3, #0
 8003930:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	f012 0f04 	tst.w	r2, #4
 800393a:	d012      	beq.n	8003962 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	f012 0f04 	tst.w	r2, #4
 8003942:	d00e      	beq.n	8003962 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003944:	f06f 0204 	mvn.w	r2, #4
 8003948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800394a:	2302      	movs	r3, #2
 800394c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800394e:	6823      	ldr	r3, [r4, #0]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003956:	d068      	beq.n	8003a2a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003958:	4620      	mov	r0, r4
 800395a:	f7ff ffce 	bl	80038fa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395e:	2300      	movs	r3, #0
 8003960:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	691a      	ldr	r2, [r3, #16]
 8003966:	f012 0f08 	tst.w	r2, #8
 800396a:	d012      	beq.n	8003992 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	f012 0f08 	tst.w	r2, #8
 8003972:	d00e      	beq.n	8003992 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003974:	f06f 0208 	mvn.w	r2, #8
 8003978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800397a:	2304      	movs	r3, #4
 800397c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	f013 0f03 	tst.w	r3, #3
 8003986:	d057      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8003988:	4620      	mov	r0, r4
 800398a:	f7ff ffb6 	bl	80038fa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398e:	2300      	movs	r3, #0
 8003990:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	f012 0f10 	tst.w	r2, #16
 800399a:	d012      	beq.n	80039c2 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	f012 0f10 	tst.w	r2, #16
 80039a2:	d00e      	beq.n	80039c2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039a4:	f06f 0210 	mvn.w	r2, #16
 80039a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039aa:	2308      	movs	r3, #8
 80039ac:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80039b6:	d046      	beq.n	8003a46 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80039b8:	4620      	mov	r0, r4
 80039ba:	f7ff ff9e 	bl	80038fa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039be:	2300      	movs	r3, #0
 80039c0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	f012 0f01 	tst.w	r2, #1
 80039ca:	d003      	beq.n	80039d4 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	f012 0f01 	tst.w	r2, #1
 80039d2:	d13f      	bne.n	8003a54 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039d4:	6823      	ldr	r3, [r4, #0]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80039dc:	d003      	beq.n	80039e6 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80039e4:	d13d      	bne.n	8003a62 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	691a      	ldr	r2, [r3, #16]
 80039ea:	f412 7f80 	tst.w	r2, #256	; 0x100
 80039ee:	d003      	beq.n	80039f8 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80039f6:	d13b      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039f8:	6823      	ldr	r3, [r4, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003a00:	d003      	beq.n	8003a0a <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003a08:	d139      	bne.n	8003a7e <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a0a:	6823      	ldr	r3, [r4, #0]
 8003a0c:	691a      	ldr	r2, [r3, #16]
 8003a0e:	f012 0f20 	tst.w	r2, #32
 8003a12:	d003      	beq.n	8003a1c <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	f012 0f20 	tst.w	r2, #32
 8003a1a:	d137      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x18c>
}
 8003a1c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1e:	f7ff ff6b 	bl	80038f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a22:	4620      	mov	r0, r4
 8003a24:	f7ff ff6a 	bl	80038fc <HAL_TIM_PWM_PulseFinishedCallback>
 8003a28:	e781      	b.n	800392e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	f7ff ff64 	bl	80038f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a30:	4620      	mov	r0, r4
 8003a32:	f7ff ff63 	bl	80038fc <HAL_TIM_PWM_PulseFinishedCallback>
 8003a36:	e792      	b.n	800395e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f7ff ff5d 	bl	80038f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a3e:	4620      	mov	r0, r4
 8003a40:	f7ff ff5c 	bl	80038fc <HAL_TIM_PWM_PulseFinishedCallback>
 8003a44:	e7a3      	b.n	800398e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a46:	4620      	mov	r0, r4
 8003a48:	f7ff ff56 	bl	80038f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	f7ff ff55 	bl	80038fc <HAL_TIM_PWM_PulseFinishedCallback>
 8003a52:	e7b4      	b.n	80039be <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a54:	f06f 0201 	mvn.w	r2, #1
 8003a58:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f7fd f854 	bl	8000b08 <HAL_TIM_PeriodElapsedCallback>
 8003a60:	e7b8      	b.n	80039d4 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a66:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003a68:	4620      	mov	r0, r4
 8003a6a:	f000 f8ce 	bl	8003c0a <HAL_TIMEx_BreakCallback>
 8003a6e:	e7ba      	b.n	80039e6 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a70:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a74:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003a76:	4620      	mov	r0, r4
 8003a78:	f000 f8c8 	bl	8003c0c <HAL_TIMEx_Break2Callback>
 8003a7c:	e7bc      	b.n	80039f8 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a82:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003a84:	4620      	mov	r0, r4
 8003a86:	f7ff ff3a 	bl	80038fe <HAL_TIM_TriggerCallback>
 8003a8a:	e7be      	b.n	8003a0a <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a8c:	f06f 0220 	mvn.w	r2, #32
 8003a90:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003a92:	4620      	mov	r0, r4
 8003a94:	f000 f8b8 	bl	8003c08 <HAL_TIMEx_CommutCallback>
}
 8003a98:	e7c0      	b.n	8003a1c <HAL_TIM_IRQHandler+0x11c>
	...

08003a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a9c:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a9e:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aa0:	4c3a      	ldr	r4, [pc, #232]	; (8003b8c <TIM_Base_SetConfig+0xf0>)
 8003aa2:	42a0      	cmp	r0, r4
 8003aa4:	bf14      	ite	ne
 8003aa6:	2400      	movne	r4, #0
 8003aa8:	2401      	moveq	r4, #1
 8003aaa:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003aae:	bf14      	ite	ne
 8003ab0:	4622      	movne	r2, r4
 8003ab2:	f044 0201 	orreq.w	r2, r4, #1
 8003ab6:	b9aa      	cbnz	r2, 8003ae4 <TIM_Base_SetConfig+0x48>
 8003ab8:	4d35      	ldr	r5, [pc, #212]	; (8003b90 <TIM_Base_SetConfig+0xf4>)
 8003aba:	42a8      	cmp	r0, r5
 8003abc:	bf14      	ite	ne
 8003abe:	2500      	movne	r5, #0
 8003ac0:	2501      	moveq	r5, #1
 8003ac2:	4e34      	ldr	r6, [pc, #208]	; (8003b94 <TIM_Base_SetConfig+0xf8>)
 8003ac4:	42b0      	cmp	r0, r6
 8003ac6:	d00d      	beq.n	8003ae4 <TIM_Base_SetConfig+0x48>
 8003ac8:	b965      	cbnz	r5, 8003ae4 <TIM_Base_SetConfig+0x48>
 8003aca:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8003ace:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8003ad2:	42a8      	cmp	r0, r5
 8003ad4:	bf14      	ite	ne
 8003ad6:	2500      	movne	r5, #0
 8003ad8:	2501      	moveq	r5, #1
 8003ada:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003ade:	42b0      	cmp	r0, r6
 8003ae0:	d000      	beq.n	8003ae4 <TIM_Base_SetConfig+0x48>
 8003ae2:	b11d      	cbz	r5, 8003aec <TIM_Base_SetConfig+0x50>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003ae8:	684d      	ldr	r5, [r1, #4]
 8003aea:	432b      	orrs	r3, r5
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aec:	2a00      	cmp	r2, #0
 8003aee:	d133      	bne.n	8003b58 <TIM_Base_SetConfig+0xbc>
 8003af0:	4a27      	ldr	r2, [pc, #156]	; (8003b90 <TIM_Base_SetConfig+0xf4>)
 8003af2:	4290      	cmp	r0, r2
 8003af4:	bf14      	ite	ne
 8003af6:	2200      	movne	r2, #0
 8003af8:	2201      	moveq	r2, #1
 8003afa:	4d26      	ldr	r5, [pc, #152]	; (8003b94 <TIM_Base_SetConfig+0xf8>)
 8003afc:	42a8      	cmp	r0, r5
 8003afe:	d02b      	beq.n	8003b58 <TIM_Base_SetConfig+0xbc>
 8003b00:	bb52      	cbnz	r2, 8003b58 <TIM_Base_SetConfig+0xbc>
 8003b02:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003b06:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8003b0a:	4290      	cmp	r0, r2
 8003b0c:	bf14      	ite	ne
 8003b0e:	2200      	movne	r2, #0
 8003b10:	2201      	moveq	r2, #1
 8003b12:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003b16:	42a8      	cmp	r0, r5
 8003b18:	d01e      	beq.n	8003b58 <TIM_Base_SetConfig+0xbc>
 8003b1a:	b9ea      	cbnz	r2, 8003b58 <TIM_Base_SetConfig+0xbc>
 8003b1c:	4a1e      	ldr	r2, [pc, #120]	; (8003b98 <TIM_Base_SetConfig+0xfc>)
 8003b1e:	4290      	cmp	r0, r2
 8003b20:	bf14      	ite	ne
 8003b22:	2200      	movne	r2, #0
 8003b24:	2201      	moveq	r2, #1
 8003b26:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8003b2a:	42a8      	cmp	r0, r5
 8003b2c:	d014      	beq.n	8003b58 <TIM_Base_SetConfig+0xbc>
 8003b2e:	b99a      	cbnz	r2, 8003b58 <TIM_Base_SetConfig+0xbc>
 8003b30:	4a1a      	ldr	r2, [pc, #104]	; (8003b9c <TIM_Base_SetConfig+0x100>)
 8003b32:	4290      	cmp	r0, r2
 8003b34:	bf14      	ite	ne
 8003b36:	2200      	movne	r2, #0
 8003b38:	2201      	moveq	r2, #1
 8003b3a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003b3e:	42a8      	cmp	r0, r5
 8003b40:	d00a      	beq.n	8003b58 <TIM_Base_SetConfig+0xbc>
 8003b42:	b94a      	cbnz	r2, 8003b58 <TIM_Base_SetConfig+0xbc>
 8003b44:	4a16      	ldr	r2, [pc, #88]	; (8003ba0 <TIM_Base_SetConfig+0x104>)
 8003b46:	4290      	cmp	r0, r2
 8003b48:	bf14      	ite	ne
 8003b4a:	2200      	movne	r2, #0
 8003b4c:	2201      	moveq	r2, #1
 8003b4e:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 8003b52:	42a8      	cmp	r0, r5
 8003b54:	d000      	beq.n	8003b58 <TIM_Base_SetConfig+0xbc>
 8003b56:	b11a      	cbz	r2, 8003b60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b5c:	68ca      	ldr	r2, [r1, #12]
 8003b5e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b64:	694a      	ldr	r2, [r1, #20]
 8003b66:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003b68:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b6a:	688a      	ldr	r2, [r1, #8]
 8003b6c:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b6e:	680a      	ldr	r2, [r1, #0]
 8003b70:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b72:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <TIM_Base_SetConfig+0x108>)
 8003b74:	4298      	cmp	r0, r3
 8003b76:	bf14      	ite	ne
 8003b78:	4623      	movne	r3, r4
 8003b7a:	f044 0301 	orreq.w	r3, r4, #1
 8003b7e:	b10b      	cbz	r3, 8003b84 <TIM_Base_SetConfig+0xe8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b80:	690b      	ldr	r3, [r1, #16]
 8003b82:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b84:	2301      	movs	r3, #1
 8003b86:	6143      	str	r3, [r0, #20]
}
 8003b88:	bc70      	pop	{r4, r5, r6}
 8003b8a:	4770      	bx	lr
 8003b8c:	40010000 	.word	0x40010000
 8003b90:	40000800 	.word	0x40000800
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40014400 	.word	0x40014400
 8003b9c:	40001800 	.word	0x40001800
 8003ba0:	40002000 	.word	0x40002000
 8003ba4:	40010400 	.word	0x40010400

08003ba8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003ba8:	b360      	cbz	r0, 8003c04 <HAL_TIM_Base_Init+0x5c>
{
 8003baa:	b510      	push	{r4, lr}
 8003bac:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003bae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003bb2:	b313      	cbz	r3, 8003bfa <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bba:	4621      	mov	r1, r4
 8003bbc:	f851 0b04 	ldr.w	r0, [r1], #4
 8003bc0:	f7ff ff6c 	bl	8003a9c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003bce:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003bd2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003bd6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003bda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003be6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003bea:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003bee:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003bf2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003bf6:	2000      	movs	r0, #0
}
 8003bf8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003bfa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003bfe:	f7ff fe32 	bl	8003866 <HAL_TIM_Base_MspInit>
 8003c02:	e7d7      	b.n	8003bb4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003c04:	2001      	movs	r0, #1
}
 8003c06:	4770      	bx	lr

08003c08 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c08:	4770      	bx	lr

08003c0a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c0a:	4770      	bx	lr

08003c0c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c0c:	4770      	bx	lr
	...

08003c10 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003c10:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8003c12:	680b      	ldr	r3, [r1, #0]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d018      	beq.n	8003c4a <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003c18:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003c1a:	4a19      	ldr	r2, [pc, #100]	; (8003c80 <FMC_SDRAM_Init+0x70>)
 8003c1c:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003c1e:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 8003c20:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003c22:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 8003c24:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 8003c26:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 8003c28:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 8003c2a:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 8003c2c:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 8003c2e:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 8003c30:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 8003c32:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 8003c34:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 8003c36:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 8003c38:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 8003c3a:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 8003c3c:	6a49      	ldr	r1, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8003c3e:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003c40:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003c42:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8003c44:	2000      	movs	r0, #0
 8003c46:	bc30      	pop	{r4, r5}
 8003c48:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003c4a:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8003c4c:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003c50:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 8003c52:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003c54:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8003c56:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8003c58:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003c5a:	4322      	orrs	r2, r4
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8003c5c:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003c5e:	4c08      	ldr	r4, [pc, #32]	; (8003c80 <FMC_SDRAM_Init+0x70>)
 8003c60:	401c      	ands	r4, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003c62:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber       |\
 8003c64:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003c66:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 8003c68:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber       |\
 8003c6a:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 8003c6c:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth     |\
 8003c6e:	432b      	orrs	r3, r5
                       Init->CASLatency          |\
 8003c70:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber  |\
 8003c72:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 8003c74:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 8003c76:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003c78:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003c7a:	6002      	str	r2, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8003c7c:	6043      	str	r3, [r0, #4]
 8003c7e:	e7e1      	b.n	8003c44 <FMC_SDRAM_Init+0x34>
 8003c80:	ffff8000 	.word	0xffff8000

08003c84 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003c84:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8003c86:	2a01      	cmp	r2, #1
 8003c88:	d021      	beq.n	8003cce <FMC_SDRAM_Timing_Init+0x4a>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003c8a:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003c8c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003c90:	680b      	ldr	r3, [r1, #0]
 8003c92:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8003c94:	684c      	ldr	r4, [r1, #4]
 8003c96:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003c98:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8003c9c:	688c      	ldr	r4, [r1, #8]
 8003c9e:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8003ca0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8003ca4:	68cc      	ldr	r4, [r1, #12]
 8003ca6:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8003ca8:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8003cac:	690c      	ldr	r4, [r1, #16]
 8003cae:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8003cb0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 8003cb4:	694c      	ldr	r4, [r1, #20]
 8003cb6:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8003cb8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 8003cbc:	6989      	ldr	r1, [r1, #24]
 8003cbe:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003cc0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003cc4:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003cc6:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8003cc8:	2000      	movs	r0, #0
 8003cca:	bc30      	pop	{r4, r5}
 8003ccc:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003cce:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8003cd0:	4c11      	ldr	r4, [pc, #68]	; (8003d18 <FMC_SDRAM_Timing_Init+0x94>)
 8003cd2:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8003cd4:	68ca      	ldr	r2, [r1, #12]
 8003cd6:	1e55      	subs	r5, r2, #1
                        (((Timing->RPDelay)-1) << 20)); 
 8003cd8:	694b      	ldr	r3, [r1, #20]
 8003cda:	1e5a      	subs	r2, r3, #1
 8003cdc:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8003cde:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 8003ce2:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8003ce4:	68c4      	ldr	r4, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003ce6:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003cea:	680b      	ldr	r3, [r1, #0]
 8003cec:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8003cee:	684d      	ldr	r5, [r1, #4]
 8003cf0:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003cf2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8003cf6:	688d      	ldr	r5, [r1, #8]
 8003cf8:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8003cfa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8003cfe:	690d      	ldr	r5, [r1, #16]
 8003d00:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8003d02:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 8003d06:	6989      	ldr	r1, [r1, #24]
 8003d08:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003d0a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003d0e:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003d10:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8003d12:	60c3      	str	r3, [r0, #12]
 8003d14:	e7d8      	b.n	8003cc8 <FMC_SDRAM_Timing_Init+0x44>
 8003d16:	bf00      	nop
 8003d18:	ff0f0fff 	.word	0xff0f0fff

08003d1c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8003d1c:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8003d1e:	6903      	ldr	r3, [r0, #16]
 8003d20:	4a08      	ldr	r2, [pc, #32]	; (8003d44 <FMC_SDRAM_SendCommand+0x28>)
 8003d22:	401a      	ands	r2, r3
 8003d24:	680b      	ldr	r3, [r1, #0]
 8003d26:	684c      	ldr	r4, [r1, #4]
 8003d28:	4323      	orrs	r3, r4
 8003d2a:	688c      	ldr	r4, [r1, #8]
 8003d2c:	3c01      	subs	r4, #1
 8003d2e:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 8003d32:	68c9      	ldr	r1, [r1, #12]
 8003d34:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	6103      	str	r3, [r0, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
}
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	ffc00000 	.word	0xffc00000

08003d48 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8003d48:	6943      	ldr	r3, [r0, #20]
 8003d4a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8003d4e:	6143      	str	r3, [r0, #20]
  
  return HAL_OK;   
}
 8003d50:	2000      	movs	r0, #0
 8003d52:	4770      	bx	lr

08003d54 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <SDMMC_GetCmdError+0x30>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a0b      	ldr	r2, [pc, #44]	; (8003d88 <SDMMC_GetCmdError+0x34>)
 8003d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5e:	0a5a      	lsrs	r2, r3, #9
 8003d60:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d64:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8003d68:	461a      	mov	r2, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b13a      	cbz	r2, 8003d7e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8003d6e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003d70:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003d74:	d0f8      	beq.n	8003d68 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003d76:	23c5      	movs	r3, #197	; 0xc5
 8003d78:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8003d7e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003d82:	4770      	bx	lr
 8003d84:	20000000 	.word	0x20000000
 8003d88:	10624dd3 	.word	0x10624dd3

08003d8c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8003d8c:	4601      	mov	r1, r0
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003d8e:	4b14      	ldr	r3, [pc, #80]	; (8003de0 <SDMMC_GetCmdResp2+0x54>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a14      	ldr	r2, [pc, #80]	; (8003de4 <SDMMC_GetCmdResp2+0x58>)
 8003d94:	fba2 2303 	umull	r2, r3, r2, r3
 8003d98:	0a5a      	lsrs	r2, r3, #9
 8003d9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d9e:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8003da2:	461a      	mov	r2, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b1ba      	cbz	r2, 8003dd8 <SDMMC_GetCmdResp2+0x4c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8003da8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003daa:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003dae:	d0f8      	beq.n	8003da2 <SDMMC_GetCmdResp2+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003db0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003db4:	d1f5      	bne.n	8003da2 <SDMMC_GetCmdResp2+0x16>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003db6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003db8:	f013 0f04 	tst.w	r3, #4
 8003dbc:	d106      	bne.n	8003dcc <SDMMC_GetCmdResp2+0x40>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003dbe:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8003dc0:	f010 0001 	ands.w	r0, r0, #1
 8003dc4:	d105      	bne.n	8003dd2 <SDMMC_GetCmdResp2+0x46>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003dc6:	23c5      	movs	r3, #197	; 0xc5
 8003dc8:	638b      	str	r3, [r1, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8003dca:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003dcc:	2004      	movs	r0, #4
 8003dce:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003dd0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003dd2:	2001      	movs	r0, #1
 8003dd4:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003dd6:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8003dd8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	20000000 	.word	0x20000000
 8003de4:	10624dd3 	.word	0x10624dd3

08003de8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8003de8:	4601      	mov	r1, r0
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003dea:	4b10      	ldr	r3, [pc, #64]	; (8003e2c <SDMMC_GetCmdResp3+0x44>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a10      	ldr	r2, [pc, #64]	; (8003e30 <SDMMC_GetCmdResp3+0x48>)
 8003df0:	fba2 2303 	umull	r2, r3, r2, r3
 8003df4:	0a5a      	lsrs	r2, r3, #9
 8003df6:	f241 3388 	movw	r3, #5000	; 0x1388
 8003dfa:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8003dfe:	461a      	mov	r2, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b182      	cbz	r2, 8003e26 <SDMMC_GetCmdResp3+0x3e>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8003e04:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003e06:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003e0a:	d0f8      	beq.n	8003dfe <SDMMC_GetCmdResp3+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003e0c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003e10:	d1f5      	bne.n	8003dfe <SDMMC_GetCmdResp3+0x16>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003e12:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8003e14:	f010 0004 	ands.w	r0, r0, #4
 8003e18:	d102      	bne.n	8003e20 <SDMMC_GetCmdResp3+0x38>
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003e1a:	23c5      	movs	r3, #197	; 0xc5
 8003e1c:	638b      	str	r3, [r1, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003e1e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003e20:	2004      	movs	r0, #4
 8003e22:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003e24:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8003e26:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003e2a:	4770      	bx	lr
 8003e2c:	20000000 	.word	0x20000000
 8003e30:	10624dd3 	.word	0x10624dd3

08003e34 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8003e34:	4601      	mov	r1, r0
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003e36:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <SDMMC_GetCmdResp7+0x5c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a16      	ldr	r2, [pc, #88]	; (8003e94 <SDMMC_GetCmdResp7+0x60>)
 8003e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e40:	0a5a      	lsrs	r2, r3, #9
 8003e42:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e46:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b1e2      	cbz	r2, 8003e8a <SDMMC_GetCmdResp7+0x56>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8003e50:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003e52:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003e56:	d0f8      	beq.n	8003e4a <SDMMC_GetCmdResp7+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003e58:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003e5c:	d1f5      	bne.n	8003e4a <SDMMC_GetCmdResp7+0x16>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003e5e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003e60:	f013 0f04 	tst.w	r3, #4
 8003e64:	d10b      	bne.n	8003e7e <SDMMC_GetCmdResp7+0x4a>
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003e66:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003e68:	f013 0301 	ands.w	r3, r3, #1
 8003e6c:	d10a      	bne.n	8003e84 <SDMMC_GetCmdResp7+0x50>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8003e6e:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8003e70:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8003e74:	d00b      	beq.n	8003e8e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8003e76:	2240      	movs	r2, #64	; 0x40
 8003e78:	638a      	str	r2, [r1, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003e7e:	2004      	movs	r0, #4
 8003e80:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003e82:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003e84:	2001      	movs	r0, #1
 8003e86:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003e88:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8003e8a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  
}
 8003e8e:	4770      	bx	lr
 8003e90:	20000000 	.word	0x20000000
 8003e94:	10624dd3 	.word	0x10624dd3

08003e98 <SDMMC_Init>:
{
 8003e98:	b084      	sub	sp, #16
 8003e9a:	b410      	push	{r4}
 8003e9c:	ac02      	add	r4, sp, #8
 8003e9e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	9a03      	ldr	r2, [sp, #12]
 8003ea6:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 8003ea8:	9a04      	ldr	r2, [sp, #16]
             Init.ClockBypass         |\
 8003eaa:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8003eac:	9a05      	ldr	r2, [sp, #20]
             Init.ClockPowerSave      |\
 8003eae:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8003eb0:	9a06      	ldr	r2, [sp, #24]
             Init.BusWide             |\
 8003eb2:	4313      	orrs	r3, r2
             Init.ClockDiv
 8003eb4:	9a07      	ldr	r2, [sp, #28]
             Init.HardwareFlowControl |\
 8003eb6:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003eb8:	6841      	ldr	r1, [r0, #4]
 8003eba:	4a04      	ldr	r2, [pc, #16]	; (8003ecc <SDMMC_Init+0x34>)
 8003ebc:	400a      	ands	r2, r1
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	6043      	str	r3, [r0, #4]
}
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ec8:	b004      	add	sp, #16
 8003eca:	4770      	bx	lr
 8003ecc:	ffff8100 	.word	0xffff8100

08003ed0 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8003ed0:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8003ed4:	4770      	bx	lr

08003ed6 <SDMMC_PowerState_ON>:
{  
 8003ed6:	b508      	push	{r3, lr}
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 8003edc:	2002      	movs	r0, #2
 8003ede:	f7fd fae7 	bl	80014b0 <HAL_Delay>
}
 8003ee2:	2000      	movs	r0, #0
 8003ee4:	bd08      	pop	{r3, pc}

08003ee6 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8003ee6:	6800      	ldr	r0, [r0, #0]
}
 8003ee8:	f000 0003 	and.w	r0, r0, #3
 8003eec:	4770      	bx	lr
	...

08003ef0 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8003ef0:	680b      	ldr	r3, [r1, #0]
 8003ef2:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003ef4:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 8003ef6:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003ef8:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8003efa:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 8003efc:	4313      	orrs	r3, r2
                       Command->CPSM);
 8003efe:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 8003f00:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003f02:	68c1      	ldr	r1, [r0, #12]
 8003f04:	4a02      	ldr	r2, [pc, #8]	; (8003f10 <SDMMC_SendCommand+0x20>)
 8003f06:	400a      	ands	r2, r1
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60c3      	str	r3, [r0, #12]
}
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	4770      	bx	lr
 8003f10:	fffff000 	.word	0xfffff000

08003f14 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 8003f14:	6900      	ldr	r0, [r0, #16]
}
 8003f16:	b2c0      	uxtb	r0, r0
 8003f18:	4770      	bx	lr

08003f1a <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8003f1a:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8003f1c:	5840      	ldr	r0, [r0, r1]
}  
 8003f1e:	4770      	bx	lr

08003f20 <SDMMC_GetCmdResp1>:
{
 8003f20:	b538      	push	{r3, r4, r5, lr}
 8003f22:	4604      	mov	r4, r0
 8003f24:	460d      	mov	r5, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003f26:	4b50      	ldr	r3, [pc, #320]	; (8004068 <SDMMC_GetCmdResp1+0x148>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4950      	ldr	r1, [pc, #320]	; (800406c <SDMMC_GetCmdResp1+0x14c>)
 8003f2c:	fba1 1303 	umull	r1, r3, r1, r3
 8003f30:	0a5b      	lsrs	r3, r3, #9
 8003f32:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 8003f36:	4613      	mov	r3, r2
 8003f38:	3a01      	subs	r2, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d05d      	beq.n	8003ffa <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDMMCx->STA;
 8003f3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003f40:	f013 0f45 	tst.w	r3, #69	; 0x45
 8003f44:	d0f7      	beq.n	8003f36 <SDMMC_GetCmdResp1+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003f46:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003f4a:	d1f4      	bne.n	8003f36 <SDMMC_GetCmdResp1+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003f4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f4e:	f013 0f04 	tst.w	r3, #4
 8003f52:	d106      	bne.n	8003f62 <SDMMC_GetCmdResp1+0x42>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003f54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f56:	f013 0f01 	tst.w	r3, #1
 8003f5a:	d005      	beq.n	8003f68 <SDMMC_GetCmdResp1+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003f60:	e04d      	b.n	8003ffe <SDMMC_GetCmdResp1+0xde>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003f62:	2004      	movs	r0, #4
 8003f64:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003f66:	e04a      	b.n	8003ffe <SDMMC_GetCmdResp1+0xde>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003f68:	23c5      	movs	r3, #197	; 0xc5
 8003f6a:	63a3      	str	r3, [r4, #56]	; 0x38
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f7ff ffd1 	bl	8003f14 <SDMMC_GetCommandResponse>
 8003f72:	42a8      	cmp	r0, r5
 8003f74:	d001      	beq.n	8003f7a <SDMMC_GetCmdResp1+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003f76:	2001      	movs	r0, #1
 8003f78:	e041      	b.n	8003ffe <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	f7ff ffcc 	bl	8003f1a <SDMMC_GetResponse>
 8003f82:	4603      	mov	r3, r0
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003f84:	483a      	ldr	r0, [pc, #232]	; (8004070 <SDMMC_GetCmdResp1+0x150>)
 8003f86:	4018      	ands	r0, r3
 8003f88:	b3c8      	cbz	r0, 8003ffe <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	db38      	blt.n	8004000 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003f8e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003f92:	d138      	bne.n	8004006 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003f94:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003f98:	d137      	bne.n	800400a <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003f9a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003f9e:	d136      	bne.n	800400e <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003fa0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003fa4:	d136      	bne.n	8004014 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003fa6:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8003faa:	d136      	bne.n	800401a <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003fac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003fb0:	d136      	bne.n	8004020 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003fb2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003fb6:	d136      	bne.n	8004026 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003fb8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003fbc:	d136      	bne.n	800402c <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003fbe:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003fc2:	d136      	bne.n	8004032 <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003fc4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003fc8:	d136      	bne.n	8004038 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003fca:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003fce:	d136      	bne.n	800403e <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003fd0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003fd4:	d136      	bne.n	8004044 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003fd6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003fda:	d136      	bne.n	800404a <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003fdc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003fe0:	d136      	bne.n	8004050 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003fe2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003fe6:	d136      	bne.n	8004056 <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003fe8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003fec:	d136      	bne.n	800405c <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003fee:	f013 0f08 	tst.w	r3, #8
 8003ff2:	d036      	beq.n	8004062 <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003ff4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003ff8:	e001      	b.n	8003ffe <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 8003ffa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003ffe:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004000:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8004004:	e7fb      	b.n	8003ffe <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004006:	2040      	movs	r0, #64	; 0x40
 8004008:	e7f9      	b.n	8003ffe <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800400a:	2080      	movs	r0, #128	; 0x80
 800400c:	e7f7      	b.n	8003ffe <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800400e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004012:	e7f4      	b.n	8003ffe <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004014:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004018:	e7f1      	b.n	8003ffe <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800401a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800401e:	e7ee      	b.n	8003ffe <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004020:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004024:	e7eb      	b.n	8003ffe <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004026:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800402a:	e7e8      	b.n	8003ffe <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800402c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004030:	e7e5      	b.n	8003ffe <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004032:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004036:	e7e2      	b.n	8003ffe <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 8004038:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800403c:	e7df      	b.n	8003ffe <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800403e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004042:	e7dc      	b.n	8003ffe <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004044:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004048:	e7d9      	b.n	8003ffe <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800404a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800404e:	e7d6      	b.n	8003ffe <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004050:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004054:	e7d3      	b.n	8003ffe <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004056:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800405a:	e7d0      	b.n	8003ffe <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 800405c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8004060:	e7cd      	b.n	8003ffe <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004062:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004066:	e7ca      	b.n	8003ffe <SDMMC_GetCmdResp1+0xde>
 8004068:	20000000 	.word	0x20000000
 800406c:	10624dd3 	.word	0x10624dd3
 8004070:	fdffe008 	.word	0xfdffe008

08004074 <SDMMC_GetCmdResp6>:
{
 8004074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004076:	4605      	mov	r5, r0
 8004078:	460e      	mov	r6, r1
 800407a:	4617      	mov	r7, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800407c:	4b23      	ldr	r3, [pc, #140]	; (800410c <SDMMC_GetCmdResp6+0x98>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4823      	ldr	r0, [pc, #140]	; (8004110 <SDMMC_GetCmdResp6+0x9c>)
 8004082:	fba0 2303 	umull	r2, r3, r0, r3
 8004086:	0a58      	lsrs	r0, r3, #9
 8004088:	f241 3388 	movw	r3, #5000	; 0x1388
 800408c:	fb03 f300 	mul.w	r3, r3, r0
    if (count-- == 0U)
 8004090:	461c      	mov	r4, r3
 8004092:	3b01      	subs	r3, #1
 8004094:	b38c      	cbz	r4, 80040fa <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDMMCx->STA;
 8004096:	6b6c      	ldr	r4, [r5, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004098:	f014 0f45 	tst.w	r4, #69	; 0x45
 800409c:	d0f8      	beq.n	8004090 <SDMMC_GetCmdResp6+0x1c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800409e:	f414 6f00 	tst.w	r4, #2048	; 0x800
 80040a2:	d1f5      	bne.n	8004090 <SDMMC_GetCmdResp6+0x1c>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80040a4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80040a6:	f013 0f04 	tst.w	r3, #4
 80040aa:	d106      	bne.n	80040ba <SDMMC_GetCmdResp6+0x46>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80040ac:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80040ae:	f013 0f01 	tst.w	r3, #1
 80040b2:	d005      	beq.n	80040c0 <SDMMC_GetCmdResp6+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80040b4:	2001      	movs	r0, #1
 80040b6:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80040b8:	e021      	b.n	80040fe <SDMMC_GetCmdResp6+0x8a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80040ba:	2004      	movs	r0, #4
 80040bc:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80040be:	e01e      	b.n	80040fe <SDMMC_GetCmdResp6+0x8a>
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80040c0:	4628      	mov	r0, r5
 80040c2:	f7ff ff27 	bl	8003f14 <SDMMC_GetCommandResponse>
 80040c6:	42b0      	cmp	r0, r6
 80040c8:	d001      	beq.n	80040ce <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80040ca:	2001      	movs	r0, #1
 80040cc:	e017      	b.n	80040fe <SDMMC_GetCmdResp6+0x8a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80040ce:	23c5      	movs	r3, #197	; 0xc5
 80040d0:	63ab      	str	r3, [r5, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80040d2:	2100      	movs	r1, #0
 80040d4:	4628      	mov	r0, r5
 80040d6:	f7ff ff20 	bl	8003f1a <SDMMC_GetResponse>
 80040da:	4603      	mov	r3, r0
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80040dc:	f410 4060 	ands.w	r0, r0, #57344	; 0xe000
 80040e0:	d008      	beq.n	80040f4 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80040e2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80040e6:	d10b      	bne.n	8004100 <SDMMC_GetCmdResp6+0x8c>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80040e8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80040ec:	d00b      	beq.n	8004106 <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80040ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80040f2:	e004      	b.n	80040fe <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80040f4:	0c1b      	lsrs	r3, r3, #16
 80040f6:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 80040f8:	e001      	b.n	80040fe <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 80040fa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80040fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004100:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004104:	e7fb      	b.n	80040fe <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004106:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800410a:	e7f8      	b.n	80040fe <SDMMC_GetCmdResp6+0x8a>
 800410c:	20000000 	.word	0x20000000
 8004110:	10624dd3 	.word	0x10624dd3

08004114 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004114:	680b      	ldr	r3, [r1, #0]
 8004116:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8004118:	684b      	ldr	r3, [r1, #4]
 800411a:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800411c:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 800411e:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004120:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8004122:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8004124:	4313      	orrs	r3, r2
                       Data->DPSM);
 8004126:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8004128:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800412a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800412c:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8004130:	4313      	orrs	r3, r2
 8004132:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8004134:	2000      	movs	r0, #0
 8004136:	4770      	bx	lr

08004138 <SDMMC_CmdBlockLength>:
{
 8004138:	b530      	push	{r4, r5, lr}
 800413a:	b087      	sub	sp, #28
 800413c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800413e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004140:	2510      	movs	r5, #16
 8004142:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004144:	2340      	movs	r3, #64	; 0x40
 8004146:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004148:	2300      	movs	r3, #0
 800414a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800414c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004150:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004152:	a901      	add	r1, sp, #4
 8004154:	f7ff fecc 	bl	8003ef0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004158:	f241 3288 	movw	r2, #5000	; 0x1388
 800415c:	4629      	mov	r1, r5
 800415e:	4620      	mov	r0, r4
 8004160:	f7ff fede 	bl	8003f20 <SDMMC_GetCmdResp1>
}
 8004164:	b007      	add	sp, #28
 8004166:	bd30      	pop	{r4, r5, pc}

08004168 <SDMMC_CmdSelDesel>:
{
 8004168:	b530      	push	{r4, r5, lr}
 800416a:	b087      	sub	sp, #28
 800416c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800416e:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004170:	2507      	movs	r5, #7
 8004172:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004174:	2340      	movs	r3, #64	; 0x40
 8004176:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004178:	2300      	movs	r3, #0
 800417a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800417c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004180:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004182:	a901      	add	r1, sp, #4
 8004184:	f7ff feb4 	bl	8003ef0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8004188:	f241 3288 	movw	r2, #5000	; 0x1388
 800418c:	4629      	mov	r1, r5
 800418e:	4620      	mov	r0, r4
 8004190:	f7ff fec6 	bl	8003f20 <SDMMC_GetCmdResp1>
}
 8004194:	b007      	add	sp, #28
 8004196:	bd30      	pop	{r4, r5, pc}

08004198 <SDMMC_CmdGoIdleState>:
{
 8004198:	b510      	push	{r4, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80041a2:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80041a4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80041a6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80041a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041ac:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80041ae:	a901      	add	r1, sp, #4
 80041b0:	f7ff fe9e 	bl	8003ef0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80041b4:	4620      	mov	r0, r4
 80041b6:	f7ff fdcd 	bl	8003d54 <SDMMC_GetCmdError>
}
 80041ba:	b006      	add	sp, #24
 80041bc:	bd10      	pop	{r4, pc}

080041be <SDMMC_CmdOperCond>:
{
 80041be:	b510      	push	{r4, lr}
 80041c0:	b086      	sub	sp, #24
 80041c2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80041c4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80041c8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80041ca:	2308      	movs	r3, #8
 80041cc:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80041ce:	2340      	movs	r3, #64	; 0x40
 80041d0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80041d2:	2300      	movs	r3, #0
 80041d4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80041d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041da:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80041dc:	a901      	add	r1, sp, #4
 80041de:	f7ff fe87 	bl	8003ef0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80041e2:	4620      	mov	r0, r4
 80041e4:	f7ff fe26 	bl	8003e34 <SDMMC_GetCmdResp7>
}
 80041e8:	b006      	add	sp, #24
 80041ea:	bd10      	pop	{r4, pc}

080041ec <SDMMC_CmdAppCommand>:
{
 80041ec:	b530      	push	{r4, r5, lr}
 80041ee:	b087      	sub	sp, #28
 80041f0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80041f2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80041f4:	2537      	movs	r5, #55	; 0x37
 80041f6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80041f8:	2340      	movs	r3, #64	; 0x40
 80041fa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80041fc:	2300      	movs	r3, #0
 80041fe:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004204:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004206:	a901      	add	r1, sp, #4
 8004208:	f7ff fe72 	bl	8003ef0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800420c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004210:	4629      	mov	r1, r5
 8004212:	4620      	mov	r0, r4
 8004214:	f7ff fe84 	bl	8003f20 <SDMMC_GetCmdResp1>
}
 8004218:	b007      	add	sp, #28
 800421a:	bd30      	pop	{r4, r5, pc}

0800421c <SDMMC_CmdAppOperCommand>:
{
 800421c:	b510      	push	{r4, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004222:	4b0a      	ldr	r3, [pc, #40]	; (800424c <SDMMC_CmdAppOperCommand+0x30>)
 8004224:	430b      	orrs	r3, r1
 8004226:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004228:	2329      	movs	r3, #41	; 0x29
 800422a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800422c:	2340      	movs	r3, #64	; 0x40
 800422e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004230:	2300      	movs	r3, #0
 8004232:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004238:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800423a:	a901      	add	r1, sp, #4
 800423c:	f7ff fe58 	bl	8003ef0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004240:	4620      	mov	r0, r4
 8004242:	f7ff fdd1 	bl	8003de8 <SDMMC_GetCmdResp3>
}
 8004246:	b006      	add	sp, #24
 8004248:	bd10      	pop	{r4, pc}
 800424a:	bf00      	nop
 800424c:	80100000 	.word	0x80100000

08004250 <SDMMC_CmdBusWidth>:
{
 8004250:	b530      	push	{r4, r5, lr}
 8004252:	b087      	sub	sp, #28
 8004254:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004256:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004258:	2506      	movs	r5, #6
 800425a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800425c:	2340      	movs	r3, #64	; 0x40
 800425e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004260:	2300      	movs	r3, #0
 8004262:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004268:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800426a:	a901      	add	r1, sp, #4
 800426c:	f7ff fe40 	bl	8003ef0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8004270:	f241 3288 	movw	r2, #5000	; 0x1388
 8004274:	4629      	mov	r1, r5
 8004276:	4620      	mov	r0, r4
 8004278:	f7ff fe52 	bl	8003f20 <SDMMC_GetCmdResp1>
}
 800427c:	b007      	add	sp, #28
 800427e:	bd30      	pop	{r4, r5, pc}

08004280 <SDMMC_CmdSendSCR>:
{
 8004280:	b530      	push	{r4, r5, lr}
 8004282:	b087      	sub	sp, #28
 8004284:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8004286:	2300      	movs	r3, #0
 8004288:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800428a:	2533      	movs	r5, #51	; 0x33
 800428c:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800428e:	2240      	movs	r2, #64	; 0x40
 8004290:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004292:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004298:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800429a:	a901      	add	r1, sp, #4
 800429c:	f7ff fe28 	bl	8003ef0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80042a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a4:	4629      	mov	r1, r5
 80042a6:	4620      	mov	r0, r4
 80042a8:	f7ff fe3a 	bl	8003f20 <SDMMC_GetCmdResp1>
}
 80042ac:	b007      	add	sp, #28
 80042ae:	bd30      	pop	{r4, r5, pc}

080042b0 <SDMMC_CmdSendCID>:
{
 80042b0:	b510      	push	{r4, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80042ba:	2202      	movs	r2, #2
 80042bc:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80042be:	22c0      	movs	r2, #192	; 0xc0
 80042c0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80042c2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80042c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042c8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80042ca:	a901      	add	r1, sp, #4
 80042cc:	f7ff fe10 	bl	8003ef0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80042d0:	4620      	mov	r0, r4
 80042d2:	f7ff fd5b 	bl	8003d8c <SDMMC_GetCmdResp2>
}
 80042d6:	b006      	add	sp, #24
 80042d8:	bd10      	pop	{r4, pc}

080042da <SDMMC_CmdSendCSD>:
{
 80042da:	b510      	push	{r4, lr}
 80042dc:	b086      	sub	sp, #24
 80042de:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80042e0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80042e2:	2309      	movs	r3, #9
 80042e4:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80042e6:	23c0      	movs	r3, #192	; 0xc0
 80042e8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80042ea:	2300      	movs	r3, #0
 80042ec:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80042ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042f2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80042f4:	a901      	add	r1, sp, #4
 80042f6:	f7ff fdfb 	bl	8003ef0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80042fa:	4620      	mov	r0, r4
 80042fc:	f7ff fd46 	bl	8003d8c <SDMMC_GetCmdResp2>
}
 8004300:	b006      	add	sp, #24
 8004302:	bd10      	pop	{r4, pc}

08004304 <SDMMC_CmdSetRelAdd>:
{
 8004304:	b570      	push	{r4, r5, r6, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	4604      	mov	r4, r0
 800430a:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004310:	2603      	movs	r6, #3
 8004312:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004314:	2240      	movs	r2, #64	; 0x40
 8004316:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004318:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800431a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800431e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004320:	a901      	add	r1, sp, #4
 8004322:	f7ff fde5 	bl	8003ef0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004326:	462a      	mov	r2, r5
 8004328:	4631      	mov	r1, r6
 800432a:	4620      	mov	r0, r4
 800432c:	f7ff fea2 	bl	8004074 <SDMMC_GetCmdResp6>
}
 8004330:	b006      	add	sp, #24
 8004332:	bd70      	pop	{r4, r5, r6, pc}

08004334 <__libc_init_array>:
 8004334:	b570      	push	{r4, r5, r6, lr}
 8004336:	4d0d      	ldr	r5, [pc, #52]	; (800436c <__libc_init_array+0x38>)
 8004338:	4c0d      	ldr	r4, [pc, #52]	; (8004370 <__libc_init_array+0x3c>)
 800433a:	1b64      	subs	r4, r4, r5
 800433c:	10a4      	asrs	r4, r4, #2
 800433e:	2600      	movs	r6, #0
 8004340:	42a6      	cmp	r6, r4
 8004342:	d109      	bne.n	8004358 <__libc_init_array+0x24>
 8004344:	4d0b      	ldr	r5, [pc, #44]	; (8004374 <__libc_init_array+0x40>)
 8004346:	4c0c      	ldr	r4, [pc, #48]	; (8004378 <__libc_init_array+0x44>)
 8004348:	f000 f820 	bl	800438c <_init>
 800434c:	1b64      	subs	r4, r4, r5
 800434e:	10a4      	asrs	r4, r4, #2
 8004350:	2600      	movs	r6, #0
 8004352:	42a6      	cmp	r6, r4
 8004354:	d105      	bne.n	8004362 <__libc_init_array+0x2e>
 8004356:	bd70      	pop	{r4, r5, r6, pc}
 8004358:	f855 3b04 	ldr.w	r3, [r5], #4
 800435c:	4798      	blx	r3
 800435e:	3601      	adds	r6, #1
 8004360:	e7ee      	b.n	8004340 <__libc_init_array+0xc>
 8004362:	f855 3b04 	ldr.w	r3, [r5], #4
 8004366:	4798      	blx	r3
 8004368:	3601      	adds	r6, #1
 800436a:	e7f2      	b.n	8004352 <__libc_init_array+0x1e>
 800436c:	080043c4 	.word	0x080043c4
 8004370:	080043c4 	.word	0x080043c4
 8004374:	080043c4 	.word	0x080043c4
 8004378:	080043c8 	.word	0x080043c8

0800437c <memset>:
 800437c:	4402      	add	r2, r0
 800437e:	4603      	mov	r3, r0
 8004380:	4293      	cmp	r3, r2
 8004382:	d100      	bne.n	8004386 <memset+0xa>
 8004384:	4770      	bx	lr
 8004386:	f803 1b01 	strb.w	r1, [r3], #1
 800438a:	e7f9      	b.n	8004380 <memset+0x4>

0800438c <_init>:
 800438c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438e:	bf00      	nop
 8004390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004392:	bc08      	pop	{r3}
 8004394:	469e      	mov	lr, r3
 8004396:	4770      	bx	lr

08004398 <_fini>:
 8004398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439a:	bf00      	nop
 800439c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800439e:	bc08      	pop	{r3}
 80043a0:	469e      	mov	lr, r3
 80043a2:	4770      	bx	lr
