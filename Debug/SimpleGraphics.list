
SimpleGraphics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059d0  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d10  08005b98  08005b98  00015b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078a8  080078a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080078a8  080078a8  000178a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078b0  080078b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078b0  080078b0  000178b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078b4  080078b4  000178b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080078b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003fe20  2000000c  080078c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2003fe2c  080078c4  0002fe2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024dc9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a6a  00000000  00000000  00044e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001730  00000000  00000000  00048870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002aaa0  00000000  00000000  00049fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00024236  00000000  00000000  00074a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00100915  00000000  00000000  00098c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0019958b  2**0
                  CONTENTS, READONLY
 19 .debug_loc    00018cf5  00000000  00000000  001995db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000016c8  00000000  00000000  001b22d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000043cc  00000000  00000000  001b3998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005b80 	.word	0x08005b80

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08005b80 	.word	0x08005b80

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	; 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	; 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2f>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007dc:	bf24      	itt	cs
 80007de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007e6:	d90d      	bls.n	8000804 <__aeabi_d2f+0x30>
 80007e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007fc:	bf08      	it	eq
 80007fe:	f020 0001 	biceq.w	r0, r0, #1
 8000802:	4770      	bx	lr
 8000804:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000808:	d121      	bne.n	800084e <__aeabi_d2f+0x7a>
 800080a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800080e:	bfbc      	itt	lt
 8000810:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000814:	4770      	bxlt	lr
 8000816:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800081a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800081e:	f1c2 0218 	rsb	r2, r2, #24
 8000822:	f1c2 0c20 	rsb	ip, r2, #32
 8000826:	fa10 f30c 	lsls.w	r3, r0, ip
 800082a:	fa20 f002 	lsr.w	r0, r0, r2
 800082e:	bf18      	it	ne
 8000830:	f040 0001 	orrne.w	r0, r0, #1
 8000834:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000838:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800083c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000840:	ea40 000c 	orr.w	r0, r0, ip
 8000844:	fa23 f302 	lsr.w	r3, r3, r2
 8000848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800084c:	e7cc      	b.n	80007e8 <__aeabi_d2f+0x14>
 800084e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000852:	d107      	bne.n	8000864 <__aeabi_d2f+0x90>
 8000854:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000858:	bf1e      	ittt	ne
 800085a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800085e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000862:	4770      	bxne	lr
 8000864:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000868:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800086c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <__aeabi_uldivmod>:
 8000874:	b953      	cbnz	r3, 800088c <__aeabi_uldivmod+0x18>
 8000876:	b94a      	cbnz	r2, 800088c <__aeabi_uldivmod+0x18>
 8000878:	2900      	cmp	r1, #0
 800087a:	bf08      	it	eq
 800087c:	2800      	cmpeq	r0, #0
 800087e:	bf1c      	itt	ne
 8000880:	f04f 31ff 	movne.w	r1, #4294967295
 8000884:	f04f 30ff 	movne.w	r0, #4294967295
 8000888:	f000 b974 	b.w	8000b74 <__aeabi_idiv0>
 800088c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000890:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000894:	f000 f806 	bl	80008a4 <__udivmoddi4>
 8000898:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr

080008a4 <__udivmoddi4>:
 80008a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a8:	9d08      	ldr	r5, [sp, #32]
 80008aa:	4604      	mov	r4, r0
 80008ac:	468e      	mov	lr, r1
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d14d      	bne.n	800094e <__udivmoddi4+0xaa>
 80008b2:	428a      	cmp	r2, r1
 80008b4:	4694      	mov	ip, r2
 80008b6:	d969      	bls.n	800098c <__udivmoddi4+0xe8>
 80008b8:	fab2 f282 	clz	r2, r2
 80008bc:	b152      	cbz	r2, 80008d4 <__udivmoddi4+0x30>
 80008be:	fa01 f302 	lsl.w	r3, r1, r2
 80008c2:	f1c2 0120 	rsb	r1, r2, #32
 80008c6:	fa20 f101 	lsr.w	r1, r0, r1
 80008ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ce:	ea41 0e03 	orr.w	lr, r1, r3
 80008d2:	4094      	lsls	r4, r2
 80008d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008d8:	0c21      	lsrs	r1, r4, #16
 80008da:	fbbe f6f8 	udiv	r6, lr, r8
 80008de:	fa1f f78c 	uxth.w	r7, ip
 80008e2:	fb08 e316 	mls	r3, r8, r6, lr
 80008e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ea:	fb06 f107 	mul.w	r1, r6, r7
 80008ee:	4299      	cmp	r1, r3
 80008f0:	d90a      	bls.n	8000908 <__udivmoddi4+0x64>
 80008f2:	eb1c 0303 	adds.w	r3, ip, r3
 80008f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008fa:	f080 811f 	bcs.w	8000b3c <__udivmoddi4+0x298>
 80008fe:	4299      	cmp	r1, r3
 8000900:	f240 811c 	bls.w	8000b3c <__udivmoddi4+0x298>
 8000904:	3e02      	subs	r6, #2
 8000906:	4463      	add	r3, ip
 8000908:	1a5b      	subs	r3, r3, r1
 800090a:	b2a4      	uxth	r4, r4
 800090c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000910:	fb08 3310 	mls	r3, r8, r0, r3
 8000914:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000918:	fb00 f707 	mul.w	r7, r0, r7
 800091c:	42a7      	cmp	r7, r4
 800091e:	d90a      	bls.n	8000936 <__udivmoddi4+0x92>
 8000920:	eb1c 0404 	adds.w	r4, ip, r4
 8000924:	f100 33ff 	add.w	r3, r0, #4294967295
 8000928:	f080 810a 	bcs.w	8000b40 <__udivmoddi4+0x29c>
 800092c:	42a7      	cmp	r7, r4
 800092e:	f240 8107 	bls.w	8000b40 <__udivmoddi4+0x29c>
 8000932:	4464      	add	r4, ip
 8000934:	3802      	subs	r0, #2
 8000936:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800093a:	1be4      	subs	r4, r4, r7
 800093c:	2600      	movs	r6, #0
 800093e:	b11d      	cbz	r5, 8000948 <__udivmoddi4+0xa4>
 8000940:	40d4      	lsrs	r4, r2
 8000942:	2300      	movs	r3, #0
 8000944:	e9c5 4300 	strd	r4, r3, [r5]
 8000948:	4631      	mov	r1, r6
 800094a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094e:	428b      	cmp	r3, r1
 8000950:	d909      	bls.n	8000966 <__udivmoddi4+0xc2>
 8000952:	2d00      	cmp	r5, #0
 8000954:	f000 80ef 	beq.w	8000b36 <__udivmoddi4+0x292>
 8000958:	2600      	movs	r6, #0
 800095a:	e9c5 0100 	strd	r0, r1, [r5]
 800095e:	4630      	mov	r0, r6
 8000960:	4631      	mov	r1, r6
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	fab3 f683 	clz	r6, r3
 800096a:	2e00      	cmp	r6, #0
 800096c:	d14a      	bne.n	8000a04 <__udivmoddi4+0x160>
 800096e:	428b      	cmp	r3, r1
 8000970:	d302      	bcc.n	8000978 <__udivmoddi4+0xd4>
 8000972:	4282      	cmp	r2, r0
 8000974:	f200 80f9 	bhi.w	8000b6a <__udivmoddi4+0x2c6>
 8000978:	1a84      	subs	r4, r0, r2
 800097a:	eb61 0303 	sbc.w	r3, r1, r3
 800097e:	2001      	movs	r0, #1
 8000980:	469e      	mov	lr, r3
 8000982:	2d00      	cmp	r5, #0
 8000984:	d0e0      	beq.n	8000948 <__udivmoddi4+0xa4>
 8000986:	e9c5 4e00 	strd	r4, lr, [r5]
 800098a:	e7dd      	b.n	8000948 <__udivmoddi4+0xa4>
 800098c:	b902      	cbnz	r2, 8000990 <__udivmoddi4+0xec>
 800098e:	deff      	udf	#255	; 0xff
 8000990:	fab2 f282 	clz	r2, r2
 8000994:	2a00      	cmp	r2, #0
 8000996:	f040 8092 	bne.w	8000abe <__udivmoddi4+0x21a>
 800099a:	eba1 010c 	sub.w	r1, r1, ip
 800099e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a2:	fa1f fe8c 	uxth.w	lr, ip
 80009a6:	2601      	movs	r6, #1
 80009a8:	0c20      	lsrs	r0, r4, #16
 80009aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80009ae:	fb07 1113 	mls	r1, r7, r3, r1
 80009b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009b6:	fb0e f003 	mul.w	r0, lr, r3
 80009ba:	4288      	cmp	r0, r1
 80009bc:	d908      	bls.n	80009d0 <__udivmoddi4+0x12c>
 80009be:	eb1c 0101 	adds.w	r1, ip, r1
 80009c2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0x12a>
 80009c8:	4288      	cmp	r0, r1
 80009ca:	f200 80cb 	bhi.w	8000b64 <__udivmoddi4+0x2c0>
 80009ce:	4643      	mov	r3, r8
 80009d0:	1a09      	subs	r1, r1, r0
 80009d2:	b2a4      	uxth	r4, r4
 80009d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d8:	fb07 1110 	mls	r1, r7, r0, r1
 80009dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009e0:	fb0e fe00 	mul.w	lr, lr, r0
 80009e4:	45a6      	cmp	lr, r4
 80009e6:	d908      	bls.n	80009fa <__udivmoddi4+0x156>
 80009e8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80009f0:	d202      	bcs.n	80009f8 <__udivmoddi4+0x154>
 80009f2:	45a6      	cmp	lr, r4
 80009f4:	f200 80bb 	bhi.w	8000b6e <__udivmoddi4+0x2ca>
 80009f8:	4608      	mov	r0, r1
 80009fa:	eba4 040e 	sub.w	r4, r4, lr
 80009fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a02:	e79c      	b.n	800093e <__udivmoddi4+0x9a>
 8000a04:	f1c6 0720 	rsb	r7, r6, #32
 8000a08:	40b3      	lsls	r3, r6
 8000a0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a12:	fa20 f407 	lsr.w	r4, r0, r7
 8000a16:	fa01 f306 	lsl.w	r3, r1, r6
 8000a1a:	431c      	orrs	r4, r3
 8000a1c:	40f9      	lsrs	r1, r7
 8000a1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a22:	fa00 f306 	lsl.w	r3, r0, r6
 8000a26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a2a:	0c20      	lsrs	r0, r4, #16
 8000a2c:	fa1f fe8c 	uxth.w	lr, ip
 8000a30:	fb09 1118 	mls	r1, r9, r8, r1
 8000a34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a38:	fb08 f00e 	mul.w	r0, r8, lr
 8000a3c:	4288      	cmp	r0, r1
 8000a3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a42:	d90b      	bls.n	8000a5c <__udivmoddi4+0x1b8>
 8000a44:	eb1c 0101 	adds.w	r1, ip, r1
 8000a48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a4c:	f080 8088 	bcs.w	8000b60 <__udivmoddi4+0x2bc>
 8000a50:	4288      	cmp	r0, r1
 8000a52:	f240 8085 	bls.w	8000b60 <__udivmoddi4+0x2bc>
 8000a56:	f1a8 0802 	sub.w	r8, r8, #2
 8000a5a:	4461      	add	r1, ip
 8000a5c:	1a09      	subs	r1, r1, r0
 8000a5e:	b2a4      	uxth	r4, r4
 8000a60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a64:	fb09 1110 	mls	r1, r9, r0, r1
 8000a68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a70:	458e      	cmp	lr, r1
 8000a72:	d908      	bls.n	8000a86 <__udivmoddi4+0x1e2>
 8000a74:	eb1c 0101 	adds.w	r1, ip, r1
 8000a78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a7c:	d26c      	bcs.n	8000b58 <__udivmoddi4+0x2b4>
 8000a7e:	458e      	cmp	lr, r1
 8000a80:	d96a      	bls.n	8000b58 <__udivmoddi4+0x2b4>
 8000a82:	3802      	subs	r0, #2
 8000a84:	4461      	add	r1, ip
 8000a86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a8e:	eba1 010e 	sub.w	r1, r1, lr
 8000a92:	42a1      	cmp	r1, r4
 8000a94:	46c8      	mov	r8, r9
 8000a96:	46a6      	mov	lr, r4
 8000a98:	d356      	bcc.n	8000b48 <__udivmoddi4+0x2a4>
 8000a9a:	d053      	beq.n	8000b44 <__udivmoddi4+0x2a0>
 8000a9c:	b15d      	cbz	r5, 8000ab6 <__udivmoddi4+0x212>
 8000a9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000aa2:	eb61 010e 	sbc.w	r1, r1, lr
 8000aa6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aaa:	fa22 f306 	lsr.w	r3, r2, r6
 8000aae:	40f1      	lsrs	r1, r6
 8000ab0:	431f      	orrs	r7, r3
 8000ab2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ab6:	2600      	movs	r6, #0
 8000ab8:	4631      	mov	r1, r6
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	f1c2 0320 	rsb	r3, r2, #32
 8000ac2:	40d8      	lsrs	r0, r3
 8000ac4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac8:	fa21 f303 	lsr.w	r3, r1, r3
 8000acc:	4091      	lsls	r1, r2
 8000ace:	4301      	orrs	r1, r0
 8000ad0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad4:	fa1f fe8c 	uxth.w	lr, ip
 8000ad8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000adc:	fb07 3610 	mls	r6, r7, r0, r3
 8000ae0:	0c0b      	lsrs	r3, r1, #16
 8000ae2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ae6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aea:	429e      	cmp	r6, r3
 8000aec:	fa04 f402 	lsl.w	r4, r4, r2
 8000af0:	d908      	bls.n	8000b04 <__udivmoddi4+0x260>
 8000af2:	eb1c 0303 	adds.w	r3, ip, r3
 8000af6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000afa:	d22f      	bcs.n	8000b5c <__udivmoddi4+0x2b8>
 8000afc:	429e      	cmp	r6, r3
 8000afe:	d92d      	bls.n	8000b5c <__udivmoddi4+0x2b8>
 8000b00:	3802      	subs	r0, #2
 8000b02:	4463      	add	r3, ip
 8000b04:	1b9b      	subs	r3, r3, r6
 8000b06:	b289      	uxth	r1, r1
 8000b08:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b0c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b14:	fb06 f30e 	mul.w	r3, r6, lr
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	d908      	bls.n	8000b2e <__udivmoddi4+0x28a>
 8000b1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b20:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b24:	d216      	bcs.n	8000b54 <__udivmoddi4+0x2b0>
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d914      	bls.n	8000b54 <__udivmoddi4+0x2b0>
 8000b2a:	3e02      	subs	r6, #2
 8000b2c:	4461      	add	r1, ip
 8000b2e:	1ac9      	subs	r1, r1, r3
 8000b30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b34:	e738      	b.n	80009a8 <__udivmoddi4+0x104>
 8000b36:	462e      	mov	r6, r5
 8000b38:	4628      	mov	r0, r5
 8000b3a:	e705      	b.n	8000948 <__udivmoddi4+0xa4>
 8000b3c:	4606      	mov	r6, r0
 8000b3e:	e6e3      	b.n	8000908 <__udivmoddi4+0x64>
 8000b40:	4618      	mov	r0, r3
 8000b42:	e6f8      	b.n	8000936 <__udivmoddi4+0x92>
 8000b44:	454b      	cmp	r3, r9
 8000b46:	d2a9      	bcs.n	8000a9c <__udivmoddi4+0x1f8>
 8000b48:	ebb9 0802 	subs.w	r8, r9, r2
 8000b4c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b50:	3801      	subs	r0, #1
 8000b52:	e7a3      	b.n	8000a9c <__udivmoddi4+0x1f8>
 8000b54:	4646      	mov	r6, r8
 8000b56:	e7ea      	b.n	8000b2e <__udivmoddi4+0x28a>
 8000b58:	4620      	mov	r0, r4
 8000b5a:	e794      	b.n	8000a86 <__udivmoddi4+0x1e2>
 8000b5c:	4640      	mov	r0, r8
 8000b5e:	e7d1      	b.n	8000b04 <__udivmoddi4+0x260>
 8000b60:	46d0      	mov	r8, sl
 8000b62:	e77b      	b.n	8000a5c <__udivmoddi4+0x1b8>
 8000b64:	3b02      	subs	r3, #2
 8000b66:	4461      	add	r1, ip
 8000b68:	e732      	b.n	80009d0 <__udivmoddi4+0x12c>
 8000b6a:	4630      	mov	r0, r6
 8000b6c:	e709      	b.n	8000982 <__udivmoddi4+0xde>
 8000b6e:	4464      	add	r4, ip
 8000b70:	3802      	subs	r0, #2
 8000b72:	e742      	b.n	80009fa <__udivmoddi4+0x156>

08000b74 <__aeabi_idiv0>:
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <Init_Graphics_System>:
uint32 LCD_FRAME_BUFFER3 = 0;


void Init_Graphics_System(uint32 LCD_RAM_START_ADDRESS, uint8 Layers, uint8 ColorType) //Инициализация драйвера дисплея, графического ускорителя и т.п.
{
    LCD_FRAME_BUFFER0 = LCD_RAM_START_ADDRESS;
 8000b78:	4b01      	ldr	r3, [pc, #4]	; (8000b80 <Init_Graphics_System+0x8>)
 8000b7a:	6018      	str	r0, [r3, #0]
    //Пользовательский кодинициализации дисплея

}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000028 	.word	0x20000028

08000b84 <Fill_all>:

void Fill_all(uint32 Color) //Заливка всего дисплея цветом
{
	for(int i=0; i<480*272; i++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	e005      	b.n	8000b94 <Fill_all+0x10>
	{
	  *(__IO uint16*) (LCD_FRAME_BUFFER0 + (i*2)) = Color;
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <Fill_all+0x18>)
 8000b8a:	6812      	ldr	r2, [r2, #0]
 8000b8c:	b281      	uxth	r1, r0
 8000b8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<480*272; i++)
 8000b92:	3301      	adds	r3, #1
 8000b94:	f5b3 3fff 	cmp.w	r3, #130560	; 0x1fe00
 8000b98:	dbf6      	blt.n	8000b88 <Fill_all+0x4>
	}
}
 8000b9a:	4770      	bx	lr
 8000b9c:	20000028 	.word	0x20000028

08000ba0 <Fill_rectangle>:

void Fill_rectangle(uint32 Color, int32 StartX, int32 StopX, int32 StartY, int32 StopY) //Заливка прямоугольной формы
{
 8000ba0:	b570      	push	{r4, r5, r6, lr}
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	4610      	mov	r0, r2
 8000ba6:	9e04      	ldr	r6, [sp, #16]
	StartX--;
 8000ba8:	1e4d      	subs	r5, r1, #1
	StartY--;
 8000baa:	f103 3eff 	add.w	lr, r3, #4294967295

	for(uint32 y = StartY; y < StopY; y++)
 8000bae:	e00e      	b.n	8000bce <Fill_rectangle+0x2e>
	{
		for(uint32 x = StartX; x < StopX; x++)
		{
			*(__IO uint16*) (LCD_FRAME_BUFFER0 + (2*(y*DispWidth + x))) = Color;
 8000bb0:	4909      	ldr	r1, [pc, #36]	; (8000bd8 <Fill_rectangle+0x38>)
 8000bb2:	6809      	ldr	r1, [r1, #0]
 8000bb4:	fb01 310e 	mla	r1, r1, lr, r3
 8000bb8:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <Fill_rectangle+0x3c>)
 8000bba:	6812      	ldr	r2, [r2, #0]
 8000bbc:	fa1f fc84 	uxth.w	ip, r4
 8000bc0:	f822 c011 	strh.w	ip, [r2, r1, lsl #1]
		for(uint32 x = StartX; x < StopX; x++)
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	4298      	cmp	r0, r3
 8000bc8:	d8f2      	bhi.n	8000bb0 <Fill_rectangle+0x10>
	for(uint32 y = StartY; y < StopY; y++)
 8000bca:	f10e 0e01 	add.w	lr, lr, #1
 8000bce:	4576      	cmp	r6, lr
 8000bd0:	d901      	bls.n	8000bd6 <Fill_rectangle+0x36>
		for(uint32 x = StartX; x < StopX; x++)
 8000bd2:	462b      	mov	r3, r5
 8000bd4:	e7f7      	b.n	8000bc6 <Fill_rectangle+0x26>
		}
	}
}
 8000bd6:	bd70      	pop	{r4, r5, r6, pc}
 8000bd8:	20000038 	.word	0x20000038
 8000bdc:	20000028 	.word	0x20000028

08000be0 <MemPoint>:

void MemPoint(int32 x, int32 y, int32 Color) //Отрисовка одного пикселя
{
	*(__IO uint16*) (LCD_FRAME_BUFFER0 + (2*(y*DispWidth + x))) = Color;
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <MemPoint+0x14>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	fb03 0001 	mla	r0, r3, r1, r0
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <MemPoint+0x18>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	b292      	uxth	r2, r2
 8000bee:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
}
 8000bf2:	4770      	bx	lr
 8000bf4:	20000038 	.word	0x20000038
 8000bf8:	20000028 	.word	0x20000028

08000bfc <FontHParameter>:
}
uint32 FontHParameter() //Возвращает значение высоты шрифта
{
	uint8 FontH = calibri[1];
	return FontH;
}
 8000bfc:	4b01      	ldr	r3, [pc, #4]	; (8000c04 <FontHParameter+0x8>)
 8000bfe:	7858      	ldrb	r0, [r3, #1]
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	08005bc0 	.word	0x08005bc0

08000c08 <Get565Color>:
uint16 Get565Color(uint32 Color) //Возвращает значение цвета в формате пикселя 565(5 бит - красный цвет, 6 - зеленый, 5 - синий)
{
 8000c08:	b500      	push	{lr}
   uint8 R, G, B;
   R = (Color >> 16) & 0xff;
   G = (Color >> 8) & 0xff;
   B = Color & 0xff;

   R = 31 * R / 255;
 8000c0a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8000c0e:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 8000c12:	4912      	ldr	r1, [pc, #72]	; (8000c5c <Get565Color+0x54>)
 8000c14:	fb81 c203 	smull	ip, r2, r1, r3
 8000c18:	441a      	add	r2, r3
 8000c1a:	17db      	asrs	r3, r3, #31
 8000c1c:	ebc3 12e2 	rsb	r2, r3, r2, asr #7
   G = 63 * G / 255;
 8000c20:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000c24:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8000c28:	fb81 ec03 	smull	lr, ip, r1, r3
 8000c2c:	449c      	add	ip, r3
 8000c2e:	17db      	asrs	r3, r3, #31
 8000c30:	ebc3 13ec 	rsb	r3, r3, ip, asr #7
   B = 31 * B / 255;
 8000c34:	b2c0      	uxtb	r0, r0
 8000c36:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8000c3a:	fb81 c100 	smull	ip, r1, r1, r0
 8000c3e:	4401      	add	r1, r0
 8000c40:	17c0      	asrs	r0, r0, #31
 8000c42:	ebc0 10e1 	rsb	r0, r0, r1, asr #7
 8000c46:	b2c0      	uxtb	r0, r0

   RezColor |= B;
   RezColor |= (G << 5);
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   RezColor |= (R << 11);
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	ea40 20c2 	orr.w	r0, r0, r2, lsl #11

   return RezColor;
}
 8000c54:	b280      	uxth	r0, r0
 8000c56:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c5a:	bf00      	nop
 8000c5c:	80808081 	.word	0x80808081

08000c60 <SymbolParameters>:
		}
	}
	return Error;
}
void SymbolParameters(uint16 X, uint16 Y, uint16 *NextX, uint16 *NextY, uint8 *CharWt, uint8 *CharHt, char Symbol) //Параметры положения текущего символа и положения следующих возможных.
{
 8000c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c62:	4605      	mov	r5, r0
 8000c64:	460c      	mov	r4, r1
 8000c66:	4617      	mov	r7, r2
 8000c68:	461e      	mov	r6, r3
	uint8 FontH = FontHParameter();
 8000c6a:	f7ff ffc7 	bl	8000bfc <FontHParameter>
 8000c6e:	b2c0      	uxtb	r0, r0
	uint8 FirstChar = calibri[2];
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <SymbolParameters+0x3c>)
 8000c72:	789a      	ldrb	r2, [r3, #2]
	uint8 Cursor = Symbol - FirstChar;
 8000c74:	f89d c020 	ldrb.w	ip, [sp, #32]
 8000c78:	ebac 0c02 	sub.w	ip, ip, r2
 8000c7c:	fa5f fc8c 	uxtb.w	ip, ip
	uint8 CharW = calibri[Cursor + 4];
 8000c80:	f10c 0c04 	add.w	ip, ip, #4
 8000c84:	f813 300c 	ldrb.w	r3, [r3, ip]

	*NextX = X + CharW;
 8000c88:	441d      	add	r5, r3
 8000c8a:	803d      	strh	r5, [r7, #0]
	*NextY = Y + FontH;
 8000c8c:	4404      	add	r4, r0
 8000c8e:	8034      	strh	r4, [r6, #0]
	*CharWt = CharW;
 8000c90:	9a06      	ldr	r2, [sp, #24]
 8000c92:	7013      	strb	r3, [r2, #0]
	*CharHt = FontH;
 8000c94:	9b07      	ldr	r3, [sp, #28]
 8000c96:	7018      	strb	r0, [r3, #0]
}
 8000c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	08005bc0 	.word	0x08005bc0

08000ca0 <Graphics_Init>:
		 }
	 }
}

void Graphics_Init(DisplayConfig *dcf) //Инициализация самой бибиллиотеки а также инициализация графических устройств(дисплей, графические ускорители, тач-панели)
{
 8000ca0:	b508      	push	{r3, lr}
	DispHeight = dcf->Display_Height;
 8000ca2:	6842      	ldr	r2, [r0, #4]
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <Graphics_Init+0x24>)
 8000ca6:	601a      	str	r2, [r3, #0]
	DispWidth = dcf->Display_Width;
 8000ca8:	6882      	ldr	r2, [r0, #8]
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <Graphics_Init+0x28>)
 8000cac:	601a      	str	r2, [r3, #0]
	ColorType = dcf->Color_Type;
 8000cae:	7b02      	ldrb	r2, [r0, #12]
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <Graphics_Init+0x2c>)
 8000cb2:	701a      	strb	r2, [r3, #0]
	Init_Graphics_System(dcf->Start_RAM_Address, dcf->Layers, dcf->Color_Type);
 8000cb4:	7b41      	ldrb	r1, [r0, #13]
 8000cb6:	6800      	ldr	r0, [r0, #0]
 8000cb8:	f7ff ff5e 	bl	8000b78 <Init_Graphics_System>
	Touch_Init();
 8000cbc:	f001 f9a4 	bl	8002008 <Touch_Init>
}
 8000cc0:	bd08      	pop	{r3, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000034 	.word	0x20000034
 8000cc8:	20000038 	.word	0x20000038
 8000ccc:	2000002c 	.word	0x2000002c

08000cd0 <Pixel>:

void Pixel(uint16 x, uint16 y, uint32 Color, uint16 Tolshina)
{
 8000cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cd4:	4617      	mov	r7, r2
  uint16 i, j, tolsx, tolsy;
  x--; y--;
 8000cd6:	3801      	subs	r0, #1
 8000cd8:	fa1f f880 	uxth.w	r8, r0
 8000cdc:	3901      	subs	r1, #1
 8000cde:	b28d      	uxth	r5, r1
  tolsy = y+Tolshina;
 8000ce0:	eb05 0903 	add.w	r9, r5, r3
 8000ce4:	fa1f f989 	uxth.w	r9, r9
  tolsx = x+Tolshina;
 8000ce8:	4443      	add	r3, r8
 8000cea:	b29e      	uxth	r6, r3
  for(i = y; i<tolsy; i++)
 8000cec:	e02f      	b.n	8000d4e <Pixel+0x7e>
		  if(i < DispHeight && j < DispWidth)
		  {
			  if(ColorType == Color565)
			  { MemPoint(j,i,Get565Color(Color)); }

			  if(ColorType == Color888)
 8000cee:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <Pixel+0x8c>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d01c      	beq.n	8000d30 <Pixel+0x60>
			  { MemPoint(j,i,Color | 0xFF << 24); }

			  if(ColorType == Color_A888)
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <Pixel+0x8c>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d01f      	beq.n	8000d3e <Pixel+0x6e>
	  for(j = x; j<tolsx; j++)
 8000cfe:	3401      	adds	r4, #1
 8000d00:	b2a4      	uxth	r4, r4
 8000d02:	42b4      	cmp	r4, r6
 8000d04:	d221      	bcs.n	8000d4a <Pixel+0x7a>
		  if(i < DispHeight && j < DispWidth)
 8000d06:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <Pixel+0x90>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	429d      	cmp	r5, r3
 8000d0c:	d2f7      	bcs.n	8000cfe <Pixel+0x2e>
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <Pixel+0x94>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	429c      	cmp	r4, r3
 8000d14:	d2f3      	bcs.n	8000cfe <Pixel+0x2e>
			  if(ColorType == Color565)
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <Pixel+0x8c>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1e7      	bne.n	8000cee <Pixel+0x1e>
			  { MemPoint(j,i,Get565Color(Color)); }
 8000d1e:	4638      	mov	r0, r7
 8000d20:	f7ff ff72 	bl	8000c08 <Get565Color>
 8000d24:	4602      	mov	r2, r0
 8000d26:	4629      	mov	r1, r5
 8000d28:	4620      	mov	r0, r4
 8000d2a:	f7ff ff59 	bl	8000be0 <MemPoint>
 8000d2e:	e7de      	b.n	8000cee <Pixel+0x1e>
			  { MemPoint(j,i,Color | 0xFF << 24); }
 8000d30:	f047 427f 	orr.w	r2, r7, #4278190080	; 0xff000000
 8000d34:	4629      	mov	r1, r5
 8000d36:	4620      	mov	r0, r4
 8000d38:	f7ff ff52 	bl	8000be0 <MemPoint>
 8000d3c:	e7db      	b.n	8000cf6 <Pixel+0x26>
			  { MemPoint(j,i,Color); }
 8000d3e:	463a      	mov	r2, r7
 8000d40:	4629      	mov	r1, r5
 8000d42:	4620      	mov	r0, r4
 8000d44:	f7ff ff4c 	bl	8000be0 <MemPoint>
 8000d48:	e7d9      	b.n	8000cfe <Pixel+0x2e>
  for(i = y; i<tolsy; i++)
 8000d4a:	3501      	adds	r5, #1
 8000d4c:	b2ad      	uxth	r5, r5
 8000d4e:	454d      	cmp	r5, r9
 8000d50:	d201      	bcs.n	8000d56 <Pixel+0x86>
	  for(j = x; j<tolsx; j++)
 8000d52:	4644      	mov	r4, r8
 8000d54:	e7d5      	b.n	8000d02 <Pixel+0x32>
	      }
	  }
  }
}
 8000d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000002c 	.word	0x2000002c
 8000d60:	20000034 	.word	0x20000034
 8000d64:	20000038 	.word	0x20000038

08000d68 <Fill_Display>:
void Fill_Display(uint32 Color) //Заливает весь дисплей определенным цветом
{
 8000d68:	b510      	push	{r4, lr}
 8000d6a:	4604      	mov	r4, r0

	if(ColorType == Color565)
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <Fill_Display+0x38>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	b143      	cbz	r3, 8000d84 <Fill_Display+0x1c>
	{ Fill_all(Get565Color(Color)); }

	if(ColorType == Color888)
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <Fill_Display+0x38>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d009      	beq.n	8000d8e <Fill_Display+0x26>
	{ Fill_all(Color | 0xFF << 24); }

	if(ColorType == Color_A888)
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <Fill_Display+0x38>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d00a      	beq.n	8000d98 <Fill_Display+0x30>
	{ Fill_all(Color); }
}
 8000d82:	bd10      	pop	{r4, pc}
	{ Fill_all(Get565Color(Color)); }
 8000d84:	f7ff ff40 	bl	8000c08 <Get565Color>
 8000d88:	f7ff fefc 	bl	8000b84 <Fill_all>
 8000d8c:	e7f1      	b.n	8000d72 <Fill_Display+0xa>
	{ Fill_all(Color | 0xFF << 24); }
 8000d8e:	f044 407f 	orr.w	r0, r4, #4278190080	; 0xff000000
 8000d92:	f7ff fef7 	bl	8000b84 <Fill_all>
 8000d96:	e7f0      	b.n	8000d7a <Fill_Display+0x12>
	{ Fill_all(Color); }
 8000d98:	4620      	mov	r0, r4
 8000d9a:	f7ff fef3 	bl	8000b84 <Fill_all>
}
 8000d9e:	e7f0      	b.n	8000d82 <Fill_Display+0x1a>
 8000da0:	2000002c 	.word	0x2000002c

08000da4 <Fill_Rectangle>:
void Fill_Rectangle(uint32 Color, int32 StartX, int32 StopX, int32 StartY, int32 StopY) //заливает цветом прямоугольную область
{
 8000da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000da6:	b083      	sub	sp, #12
 8000da8:	4607      	mov	r7, r0
 8000daa:	4615      	mov	r5, r2
 8000dac:	461e      	mov	r6, r3
	if(((StartX > 0) && (StartX <= DispWidth)) || ((StopX > 0) && (StopX <= DispWidth)))
 8000dae:	1e0c      	subs	r4, r1, #0
 8000db0:	dd03      	ble.n	8000dba <Fill_Rectangle+0x16>
 8000db2:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <Fill_Rectangle+0xb0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	429c      	cmp	r4, r3
 8000db8:	d905      	bls.n	8000dc6 <Fill_Rectangle+0x22>
 8000dba:	2d00      	cmp	r5, #0
 8000dbc:	dd2b      	ble.n	8000e16 <Fill_Rectangle+0x72>
 8000dbe:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <Fill_Rectangle+0xb0>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	429d      	cmp	r5, r3
 8000dc4:	d827      	bhi.n	8000e16 <Fill_Rectangle+0x72>
	{
		if(((StartY > 0) && (StartY <= DispHeight)) || ((StopY > 0) && (StopY <= DispHeight)))
 8000dc6:	2e00      	cmp	r6, #0
 8000dc8:	dd03      	ble.n	8000dd2 <Fill_Rectangle+0x2e>
 8000dca:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <Fill_Rectangle+0xb4>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d907      	bls.n	8000de2 <Fill_Rectangle+0x3e>
 8000dd2:	9b08      	ldr	r3, [sp, #32]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	dd1e      	ble.n	8000e16 <Fill_Rectangle+0x72>
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <Fill_Rectangle+0xb4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	9a08      	ldr	r2, [sp, #32]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d819      	bhi.n	8000e16 <Fill_Rectangle+0x72>
		{
			if(StartX <= 0)
 8000de2:	2c00      	cmp	r4, #0
 8000de4:	dd19      	ble.n	8000e1a <Fill_Rectangle+0x76>
			{ StartX = 1;}
			if(StopX > DispWidth)
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <Fill_Rectangle+0xb0>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	429d      	cmp	r5, r3
 8000dec:	d900      	bls.n	8000df0 <Fill_Rectangle+0x4c>
			{ StartX = DispWidth;}
 8000dee:	461c      	mov	r4, r3

			if(StartY <= 0)
 8000df0:	2e00      	cmp	r6, #0
 8000df2:	dd14      	ble.n	8000e1e <Fill_Rectangle+0x7a>
			{ StartY = 1;}
			if(StopY > DispHeight)
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <Fill_Rectangle+0xb4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	9a08      	ldr	r2, [sp, #32]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d900      	bls.n	8000e00 <Fill_Rectangle+0x5c>
			{ StartY = DispHeight;}
 8000dfe:	461e      	mov	r6, r3

			if(ColorType == Color565)
 8000e00:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <Fill_Rectangle+0xb8>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b16b      	cbz	r3, 8000e22 <Fill_Rectangle+0x7e>
			{ Fill_rectangle(Get565Color(Color), StartX, StopX, StartY, StopY); }

			if(ColorType == Color888)
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <Fill_Rectangle+0xb8>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d014      	beq.n	8000e38 <Fill_Rectangle+0x94>
			{ Fill_rectangle(Color | 0xFF << 24, StartX, StopX, StartY, StopY); }

			if(ColorType == Color_A888)
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <Fill_Rectangle+0xb8>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d01a      	beq.n	8000e4c <Fill_Rectangle+0xa8>
			{ Fill_all(Color); }
		}
	}
}
 8000e16:	b003      	add	sp, #12
 8000e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
			{ StartX = 1;}
 8000e1a:	2401      	movs	r4, #1
 8000e1c:	e7e3      	b.n	8000de6 <Fill_Rectangle+0x42>
			{ StartY = 1;}
 8000e1e:	2601      	movs	r6, #1
 8000e20:	e7e8      	b.n	8000df4 <Fill_Rectangle+0x50>
			{ Fill_rectangle(Get565Color(Color), StartX, StopX, StartY, StopY); }
 8000e22:	4638      	mov	r0, r7
 8000e24:	f7ff fef0 	bl	8000c08 <Get565Color>
 8000e28:	9b08      	ldr	r3, [sp, #32]
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	4633      	mov	r3, r6
 8000e2e:	462a      	mov	r2, r5
 8000e30:	4621      	mov	r1, r4
 8000e32:	f7ff feb5 	bl	8000ba0 <Fill_rectangle>
 8000e36:	e7e6      	b.n	8000e06 <Fill_Rectangle+0x62>
			{ Fill_rectangle(Color | 0xFF << 24, StartX, StopX, StartY, StopY); }
 8000e38:	9b08      	ldr	r3, [sp, #32]
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	4633      	mov	r3, r6
 8000e3e:	462a      	mov	r2, r5
 8000e40:	4621      	mov	r1, r4
 8000e42:	f047 407f 	orr.w	r0, r7, #4278190080	; 0xff000000
 8000e46:	f7ff feab 	bl	8000ba0 <Fill_rectangle>
 8000e4a:	e7e0      	b.n	8000e0e <Fill_Rectangle+0x6a>
			{ Fill_all(Color); }
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	f7ff fe99 	bl	8000b84 <Fill_all>
}
 8000e52:	e7e0      	b.n	8000e16 <Fill_Rectangle+0x72>
 8000e54:	20000038 	.word	0x20000038
 8000e58:	20000034 	.word	0x20000034
 8000e5c:	2000002c 	.word	0x2000002c

08000e60 <HLine>:
void HLine(uint32 Color, int16 x1, int16 x2, int16 y1, uint8 Tolshina)//
{
 8000e60:	b510      	push	{r4, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	f89d 4010 	ldrb.w	r4, [sp, #16]
    if(Tolshina > 0)
 8000e68:	b90c      	cbnz	r4, 8000e6e <HLine+0xe>
    {
    	Tolshina--;
    	Fill_Rectangle(Color, x1, x2, y1, y1+Tolshina);
    }
}
 8000e6a:	b002      	add	sp, #8
 8000e6c:	bd10      	pop	{r4, pc}
    	Tolshina--;
 8000e6e:	3c01      	subs	r4, #1
    	Fill_Rectangle(Color, x1, x2, y1, y1+Tolshina);
 8000e70:	fa53 f484 	uxtab	r4, r3, r4
 8000e74:	9400      	str	r4, [sp, #0]
 8000e76:	f7ff ff95 	bl	8000da4 <Fill_Rectangle>
}
 8000e7a:	e7f6      	b.n	8000e6a <HLine+0xa>

08000e7c <VLine>:
void VLine(uint32 Color, int16 x1, int16 y1, int16 y2, uint8 Tolshina)
{
 8000e7c:	b510      	push	{r4, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	f89d 4010 	ldrb.w	r4, [sp, #16]
	if(Tolshina > 0)
 8000e84:	b90c      	cbnz	r4, 8000e8a <VLine+0xe>
	{
		Tolshina--;
		Fill_Rectangle(Color, x1, x1+Tolshina, y1, y2);
	}
}
 8000e86:	b002      	add	sp, #8
 8000e88:	bd10      	pop	{r4, pc}
		Tolshina--;
 8000e8a:	3c01      	subs	r4, #1
		Fill_Rectangle(Color, x1, x1+Tolshina, y1, y2);
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	fa51 f284 	uxtab	r2, r1, r4
 8000e94:	f7ff ff86 	bl	8000da4 <Fill_Rectangle>
}
 8000e98:	e7f5      	b.n	8000e86 <VLine+0xa>

08000e9a <FramePanel>:
void FramePanel(uint32 BorderColor, uint32 FloodColor, int16 x1, int16 x2, int16 y1, int16 y2, uint8 Tolshina)
{
 8000e9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	4605      	mov	r5, r0
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	4616      	mov	r6, r2
 8000ea6:	461c      	mov	r4, r3
 8000ea8:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
 8000eac:	f9bd a034 	ldrsh.w	sl, [sp, #52]	; 0x34
 8000eb0:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	Tolshina --;
 8000eb4:	f108 37ff 	add.w	r7, r8, #4294967295
 8000eb8:	b2ff      	uxtb	r7, r7
	Fill_Rectangle(FloodColor,x1,x2,y1,y2);
 8000eba:	f8cd a000 	str.w	sl, [sp]
 8000ebe:	464b      	mov	r3, r9
 8000ec0:	4622      	mov	r2, r4
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	f7ff ff6e 	bl	8000da4 <Fill_Rectangle>
    HLine(BorderColor,x1,x2,y1,Tolshina + 1);
 8000ec8:	f8cd 8000 	str.w	r8, [sp]
 8000ecc:	464b      	mov	r3, r9
 8000ece:	4622      	mov	r2, r4
 8000ed0:	4631      	mov	r1, r6
 8000ed2:	4628      	mov	r0, r5
 8000ed4:	f7ff ffc4 	bl	8000e60 <HLine>
    HLine(BorderColor,x1,x2,y2 - Tolshina,Tolshina +1);
 8000ed8:	fa1f fb87 	uxth.w	fp, r7
 8000edc:	ebaa 0307 	sub.w	r3, sl, r7
 8000ee0:	f8cd 8000 	str.w	r8, [sp]
 8000ee4:	b21b      	sxth	r3, r3
 8000ee6:	4622      	mov	r2, r4
 8000ee8:	4631      	mov	r1, r6
 8000eea:	4628      	mov	r0, r5
 8000eec:	f7ff ffb8 	bl	8000e60 <HLine>
    VLine(BorderColor,x1,y1,y2,Tolshina + 1);
 8000ef0:	f8cd 8000 	str.w	r8, [sp]
 8000ef4:	4653      	mov	r3, sl
 8000ef6:	464a      	mov	r2, r9
 8000ef8:	4631      	mov	r1, r6
 8000efa:	4628      	mov	r0, r5
 8000efc:	f7ff ffbe 	bl	8000e7c <VLine>
    VLine(BorderColor,x2 - Tolshina,y1,y2,Tolshina + 1);
 8000f00:	eba4 010b 	sub.w	r1, r4, fp
 8000f04:	f8cd 8000 	str.w	r8, [sp]
 8000f08:	4653      	mov	r3, sl
 8000f0a:	464a      	mov	r2, r9
 8000f0c:	b209      	sxth	r1, r1
 8000f0e:	4628      	mov	r0, r5
 8000f10:	f7ff ffb4 	bl	8000e7c <VLine>
}
 8000f14:	b003      	add	sp, #12
 8000f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000f1c <Line>:
void Line(int16 x1, int16 y1, int16 x2, int16 y2, uint32 Color, uint16 Tolshina)//++
{
 8000f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f20:	b083      	sub	sp, #12
 8000f22:	4607      	mov	r7, r0
 8000f24:	9100      	str	r1, [sp, #0]
 8000f26:	4690      	mov	r8, r2
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8000f2c:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
   uint16 y = 0, k = 0;
   if(x1 <= x2)
 8000f30:	4290      	cmp	r0, r2
 8000f32:	f300 809e 	bgt.w	8001072 <Line+0x156>
   {
	   if(y1 <= y2)
 8000f36:	4299      	cmp	r1, r3
 8000f38:	dc4c      	bgt.n	8000fd4 <Line+0xb8>
	   {
		   if(x2 - x1 != 0)
 8000f3a:	4540      	cmp	r0, r8
 8000f3c:	d016      	beq.n	8000f6c <Line+0x50>
		   {
		       k = (y2 - y1)/(x2 - x1);
 8000f3e:	1a5b      	subs	r3, r3, r1
 8000f40:	eba8 0100 	sub.w	r1, r8, r0
 8000f44:	fb93 f2f1 	sdiv	r2, r3, r1
 8000f48:	fa1f fb82 	uxth.w	fp, r2
		       if((y2 - y1)%(x2 - x1) != 0)
 8000f4c:	fb01 3312 	mls	r3, r1, r2, r3
 8000f50:	b10b      	cbz	r3, 8000f56 <Line+0x3a>
		       {
		    	   if(Tolshina == 1)
 8000f52:	2d01      	cmp	r5, #1
 8000f54:	d005      	beq.n	8000f62 <Line+0x46>
		   {
			   k = 1;
			   x2++;
		   }

		   if(k == 0)
 8000f56:	f1bb 0f00 	cmp.w	fp, #0
 8000f5a:	d10d      	bne.n	8000f78 <Line+0x5c>
		   { k = 1; }
 8000f5c:	f04f 0b01 	mov.w	fp, #1
 8000f60:	e00a      	b.n	8000f78 <Line+0x5c>
		    	       k++;
 8000f62:	f10b 0b01 	add.w	fp, fp, #1
 8000f66:	fa1f fb8b 	uxth.w	fp, fp
 8000f6a:	e7f4      	b.n	8000f56 <Line+0x3a>
			   x2++;
 8000f6c:	f108 0801 	add.w	r8, r8, #1
 8000f70:	fa0f f888 	sxth.w	r8, r8
			   k = 1;
 8000f74:	f04f 0b01 	mov.w	fp, #1

		   for(uint16 xp = x1; xp <= x2; xp++)
 8000f78:	fa1f fa87 	uxth.w	sl, r7
 8000f7c:	e003      	b.n	8000f86 <Line+0x6a>
 8000f7e:	f10a 0a01 	add.w	sl, sl, #1
 8000f82:	fa1f fa8a 	uxth.w	sl, sl
 8000f86:	45c2      	cmp	sl, r8
 8000f88:	f300 80ff 	bgt.w	800118a <Line+0x26e>
		   {
			   y = (xp - x1) * (y2 - y1) / (x2 - x1) + y1;
 8000f8c:	ebaa 0407 	sub.w	r4, sl, r7
 8000f90:	9b01      	ldr	r3, [sp, #4]
 8000f92:	9a00      	ldr	r2, [sp, #0]
 8000f94:	1a9b      	subs	r3, r3, r2
 8000f96:	fb03 f404 	mul.w	r4, r3, r4
 8000f9a:	eba8 0307 	sub.w	r3, r8, r7
 8000f9e:	fb94 f4f3 	sdiv	r4, r4, r3
 8000fa2:	b293      	uxth	r3, r2
 8000fa4:	fa13 f484 	uxtah	r4, r3, r4
 8000fa8:	b2a4      	uxth	r4, r4
			   for(uint16 yp = 0; yp < k; yp++)
 8000faa:	f04f 0900 	mov.w	r9, #0
 8000fae:	45cb      	cmp	fp, r9
 8000fb0:	d9e5      	bls.n	8000f7e <Line+0x62>
			   {
				   Pixel(xp, y, Color, Tolshina);
 8000fb2:	462b      	mov	r3, r5
 8000fb4:	4632      	mov	r2, r6
 8000fb6:	4621      	mov	r1, r4
 8000fb8:	4650      	mov	r0, sl
 8000fba:	f7ff fe89 	bl	8000cd0 <Pixel>
				   y++;
 8000fbe:	3401      	adds	r4, #1
 8000fc0:	b2a4      	uxth	r4, r4
				   if(y > DispHeight)
 8000fc2:	4b73      	ldr	r3, [pc, #460]	; (8001190 <Line+0x274>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	429c      	cmp	r4, r3
 8000fc8:	d8d9      	bhi.n	8000f7e <Line+0x62>
			   for(uint16 yp = 0; yp < k; yp++)
 8000fca:	f109 0901 	add.w	r9, r9, #1
 8000fce:	fa1f f989 	uxth.w	r9, r9
 8000fd2:	e7ec      	b.n	8000fae <Line+0x92>
			   }
		   }
	   }
	   else
	   {
		   if(x2 - x1 != 0)
 8000fd4:	4540      	cmp	r0, r8
 8000fd6:	d018      	beq.n	800100a <Line+0xee>
		   {
		       k = (y1 - y2)/(x2 - x1);
 8000fd8:	9b00      	ldr	r3, [sp, #0]
 8000fda:	9a01      	ldr	r2, [sp, #4]
 8000fdc:	1a9b      	subs	r3, r3, r2
 8000fde:	eba8 0100 	sub.w	r1, r8, r0
 8000fe2:	fb93 f2f1 	sdiv	r2, r3, r1
 8000fe6:	fa1f fb82 	uxth.w	fp, r2
		       if((y1 - y2)%(x2 - x1) != 0)
 8000fea:	fb01 3312 	mls	r3, r1, r2, r3
 8000fee:	b10b      	cbz	r3, 8000ff4 <Line+0xd8>
		       {
		    	   if(Tolshina == 1)
 8000ff0:	2d01      	cmp	r5, #1
 8000ff2:	d005      	beq.n	8001000 <Line+0xe4>
		   {
			   k = 1;
			   x2++;
		   }

		   if(k == 0)
 8000ff4:	f1bb 0f00 	cmp.w	fp, #0
 8000ff8:	d10d      	bne.n	8001016 <Line+0xfa>
		   { k = 1; }
 8000ffa:	f04f 0b01 	mov.w	fp, #1
 8000ffe:	e00a      	b.n	8001016 <Line+0xfa>
	    	           k++;
 8001000:	f10b 0b01 	add.w	fp, fp, #1
 8001004:	fa1f fb8b 	uxth.w	fp, fp
 8001008:	e7f4      	b.n	8000ff4 <Line+0xd8>
			   x2++;
 800100a:	f108 0801 	add.w	r8, r8, #1
 800100e:	fa0f f888 	sxth.w	r8, r8
			   k = 1;
 8001012:	f04f 0b01 	mov.w	fp, #1

		   for(uint16 xp = x1; xp <= x2; xp++)
 8001016:	fa1f fa87 	uxth.w	sl, r7
 800101a:	e003      	b.n	8001024 <Line+0x108>
 800101c:	f10a 0a01 	add.w	sl, sl, #1
 8001020:	fa1f fa8a 	uxth.w	sl, sl
 8001024:	45c2      	cmp	sl, r8
 8001026:	f300 80b0 	bgt.w	800118a <Line+0x26e>
		   {
			   y = (xp - x1) * (y2 - y1) / (x2 - x1) + y1;
 800102a:	ebaa 0407 	sub.w	r4, sl, r7
 800102e:	9b01      	ldr	r3, [sp, #4]
 8001030:	9a00      	ldr	r2, [sp, #0]
 8001032:	1a9b      	subs	r3, r3, r2
 8001034:	fb03 f404 	mul.w	r4, r3, r4
 8001038:	eba8 0307 	sub.w	r3, r8, r7
 800103c:	fb94 f4f3 	sdiv	r4, r4, r3
 8001040:	b293      	uxth	r3, r2
 8001042:	fa13 f484 	uxtah	r4, r3, r4
 8001046:	b2a4      	uxth	r4, r4
			   for(uint16 yp = 0; yp < k; yp++)
 8001048:	f04f 0900 	mov.w	r9, #0
 800104c:	45cb      	cmp	fp, r9
 800104e:	d9e5      	bls.n	800101c <Line+0x100>
			   {
				   Pixel(xp, y, Color, Tolshina);
 8001050:	462b      	mov	r3, r5
 8001052:	4632      	mov	r2, r6
 8001054:	4621      	mov	r1, r4
 8001056:	4650      	mov	r0, sl
 8001058:	f7ff fe3a 	bl	8000cd0 <Pixel>
				   y--;
 800105c:	3c01      	subs	r4, #1
 800105e:	b2a4      	uxth	r4, r4
				   if(y > DispHeight)
 8001060:	4b4b      	ldr	r3, [pc, #300]	; (8001190 <Line+0x274>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	429c      	cmp	r4, r3
 8001066:	d8d9      	bhi.n	800101c <Line+0x100>
			   for(uint16 yp = 0; yp < k; yp++)
 8001068:	f109 0901 	add.w	r9, r9, #1
 800106c:	fa1f f989 	uxth.w	r9, r9
 8001070:	e7ec      	b.n	800104c <Line+0x130>
		   }
	   }
   }
   else
   {
	   if(y1 <= y2)
 8001072:	9b00      	ldr	r3, [sp, #0]
 8001074:	9a01      	ldr	r2, [sp, #4]
 8001076:	4293      	cmp	r3, r2
 8001078:	dc42      	bgt.n	8001100 <Line+0x1e4>
	   {
		   if(x1 - x2 != 0)
		   {
		       k = (y2 - y1)/(x1 - x2);
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	eba0 0108 	sub.w	r1, r0, r8
 8001080:	fb93 f2f1 	sdiv	r2, r3, r1
 8001084:	fa1f fb82 	uxth.w	fp, r2
		       if((y2 - y1)%(x1 - x2) != 0)
 8001088:	fb01 3312 	mls	r3, r1, r2, r3
 800108c:	b10b      	cbz	r3, 8001092 <Line+0x176>
		       {
		    	   if(Tolshina == 1)
 800108e:	2d01      	cmp	r5, #1
 8001090:	d007      	beq.n	80010a2 <Line+0x186>
		   {
			   k = 1;
			   x1++;
		   }

		   if(k == 0)
 8001092:	f1bb 0f00 	cmp.w	fp, #0
 8001096:	d101      	bne.n	800109c <Line+0x180>
		   { k = 1; }
 8001098:	f04f 0b01 	mov.w	fp, #1

		   for(uint16 xp = x2; xp <= x1; xp++)
 800109c:	fa1f fa88 	uxth.w	sl, r8
 80010a0:	e008      	b.n	80010b4 <Line+0x198>
		    	       k++;
 80010a2:	f10b 0b01 	add.w	fp, fp, #1
 80010a6:	fa1f fb8b 	uxth.w	fp, fp
 80010aa:	e7f2      	b.n	8001092 <Line+0x176>
		   for(uint16 xp = x2; xp <= x1; xp++)
 80010ac:	f10a 0a01 	add.w	sl, sl, #1
 80010b0:	fa1f fa8a 	uxth.w	sl, sl
 80010b4:	45ba      	cmp	sl, r7
 80010b6:	dc68      	bgt.n	800118a <Line+0x26e>
		   {
			   y = (xp - x1) * (y2 - y1) / (x2 - x1) + y1;
 80010b8:	ebaa 0407 	sub.w	r4, sl, r7
 80010bc:	9b01      	ldr	r3, [sp, #4]
 80010be:	9a00      	ldr	r2, [sp, #0]
 80010c0:	1a9b      	subs	r3, r3, r2
 80010c2:	fb03 f404 	mul.w	r4, r3, r4
 80010c6:	eba8 0307 	sub.w	r3, r8, r7
 80010ca:	fb94 f4f3 	sdiv	r4, r4, r3
 80010ce:	b293      	uxth	r3, r2
 80010d0:	fa13 f484 	uxtah	r4, r3, r4
 80010d4:	b2a4      	uxth	r4, r4
			   for(uint16 yp = 0; yp < k; yp++)
 80010d6:	f04f 0900 	mov.w	r9, #0
 80010da:	45cb      	cmp	fp, r9
 80010dc:	d9e6      	bls.n	80010ac <Line+0x190>
			   {
				   Pixel(xp, y, Color, Tolshina);
 80010de:	462b      	mov	r3, r5
 80010e0:	4632      	mov	r2, r6
 80010e2:	4621      	mov	r1, r4
 80010e4:	4650      	mov	r0, sl
 80010e6:	f7ff fdf3 	bl	8000cd0 <Pixel>
				   y++;
 80010ea:	3401      	adds	r4, #1
 80010ec:	b2a4      	uxth	r4, r4
				   if(y > DispHeight)
 80010ee:	4b28      	ldr	r3, [pc, #160]	; (8001190 <Line+0x274>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	429c      	cmp	r4, r3
 80010f4:	d8da      	bhi.n	80010ac <Line+0x190>
			   for(uint16 yp = 0; yp < k; yp++)
 80010f6:	f109 0901 	add.w	r9, r9, #1
 80010fa:	fa1f f989 	uxth.w	r9, r9
 80010fe:	e7ec      	b.n	80010da <Line+0x1be>
	   }
	   else
	   {
		   if(x2 - x1 != 0)
		   {
		       k = (y1 - y2)/(x2 - x1);
 8001100:	9b00      	ldr	r3, [sp, #0]
 8001102:	9a01      	ldr	r2, [sp, #4]
 8001104:	1a9b      	subs	r3, r3, r2
 8001106:	eba8 0100 	sub.w	r1, r8, r0
 800110a:	fb93 f2f1 	sdiv	r2, r3, r1
 800110e:	fa1f fb82 	uxth.w	fp, r2
		       if((y1 - y2)%(x2 - x1) != 0)
 8001112:	fb01 3312 	mls	r3, r1, r2, r3
 8001116:	b10b      	cbz	r3, 800111c <Line+0x200>
		       {
		    	   if(Tolshina == 1)
 8001118:	2d01      	cmp	r5, #1
 800111a:	d007      	beq.n	800112c <Line+0x210>
		   {
			   k = 1;
			   x2++;
		   }

		   if(k == 0)
 800111c:	f1bb 0f00 	cmp.w	fp, #0
 8001120:	d101      	bne.n	8001126 <Line+0x20a>
		   { k = 1; }
 8001122:	f04f 0b01 	mov.w	fp, #1

		   for(uint16 xp = x2; xp <= x1; xp++)
 8001126:	fa1f fa88 	uxth.w	sl, r8
 800112a:	e008      	b.n	800113e <Line+0x222>
	    	           k++;
 800112c:	f10b 0b01 	add.w	fp, fp, #1
 8001130:	fa1f fb8b 	uxth.w	fp, fp
 8001134:	e7f2      	b.n	800111c <Line+0x200>
		   for(uint16 xp = x2; xp <= x1; xp++)
 8001136:	f10a 0a01 	add.w	sl, sl, #1
 800113a:	fa1f fa8a 	uxth.w	sl, sl
 800113e:	45ba      	cmp	sl, r7
 8001140:	dc23      	bgt.n	800118a <Line+0x26e>
		   {
			   y = (xp - x1) * (y2 - y1) / (x2 - x1) + y1;
 8001142:	ebaa 0407 	sub.w	r4, sl, r7
 8001146:	9b01      	ldr	r3, [sp, #4]
 8001148:	9a00      	ldr	r2, [sp, #0]
 800114a:	1a9b      	subs	r3, r3, r2
 800114c:	fb03 f404 	mul.w	r4, r3, r4
 8001150:	eba8 0307 	sub.w	r3, r8, r7
 8001154:	fb94 f4f3 	sdiv	r4, r4, r3
 8001158:	b293      	uxth	r3, r2
 800115a:	fa13 f484 	uxtah	r4, r3, r4
 800115e:	b2a4      	uxth	r4, r4
			   for(uint16 yp = 0; yp < k; yp++)
 8001160:	f04f 0900 	mov.w	r9, #0
 8001164:	45cb      	cmp	fp, r9
 8001166:	d9e6      	bls.n	8001136 <Line+0x21a>
			   {
				   Pixel(xp, y, Color, Tolshina);
 8001168:	462b      	mov	r3, r5
 800116a:	4632      	mov	r2, r6
 800116c:	4621      	mov	r1, r4
 800116e:	4650      	mov	r0, sl
 8001170:	f7ff fdae 	bl	8000cd0 <Pixel>
				   y++;
 8001174:	3401      	adds	r4, #1
 8001176:	b2a4      	uxth	r4, r4
				   if(y > DispHeight)
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <Line+0x274>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	429c      	cmp	r4, r3
 800117e:	d8da      	bhi.n	8001136 <Line+0x21a>
			   for(uint16 yp = 0; yp < k; yp++)
 8001180:	f109 0901 	add.w	r9, r9, #1
 8001184:	fa1f f989 	uxth.w	r9, r9
 8001188:	e7ec      	b.n	8001164 <Line+0x248>
				   {break; }
			   }
		   }
	   }
   }
}
 800118a:	b003      	add	sp, #12
 800118c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001190:	20000034 	.word	0x20000034

08001194 <Circle>:
void Circle (int16 x1, int16 y1, int16 r,uint32 Color, uint16 Tolshina)
{
 8001194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001198:	b087      	sub	sp, #28
 800119a:	9004      	str	r0, [sp, #16]
 800119c:	9105      	str	r1, [sp, #20]
 800119e:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
    int x = -r, y = 0, err = 2-2*r, e2;
 80011a2:	4257      	negs	r7, r2
 80011a4:	f1c2 0201 	rsb	r2, r2, #1
 80011a8:	0056      	lsls	r6, r2, #1
 80011aa:	2200      	movs	r2, #0
 80011ac:	9201      	str	r2, [sp, #4]
 80011ae:	4699      	mov	r9, r3
 80011b0:	e008      	b.n	80011c4 <Circle+0x30>
 80011b2:	4633      	mov	r3, r6
		e2 = err;
		if (e2 <= y) {
			err += ++y*2+1;
			if (-x == y && e2 <= x) e2 = 0;
		}
		if (e2 > x) err += ++x*2+1;
 80011b4:	42b7      	cmp	r7, r6
 80011b6:	da43      	bge.n	8001240 <Circle+0xac>
 80011b8:	3701      	adds	r7, #1
 80011ba:	007e      	lsls	r6, r7, #1
 80011bc:	3601      	adds	r6, #1
 80011be:	441e      	add	r6, r3
	} while (x <= 0);
 80011c0:	2f00      	cmp	r7, #0
 80011c2:	dc3f      	bgt.n	8001244 <Circle+0xb0>
		Pixel(x1-x, y1+y,Color,Tolshina);
 80011c4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80011c8:	fa1f fa87 	uxth.w	sl, r7
 80011cc:	9302      	str	r3, [sp, #8]
 80011ce:	eba3 050a 	sub.w	r5, r3, sl
 80011d2:	b2ad      	uxth	r5, r5
 80011d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80011d8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80011dc:	9303      	str	r3, [sp, #12]
 80011de:	eb03 0804 	add.w	r8, r3, r4
 80011e2:	fa1f f888 	uxth.w	r8, r8
 80011e6:	465b      	mov	r3, fp
 80011e8:	464a      	mov	r2, r9
 80011ea:	4641      	mov	r1, r8
 80011ec:	4628      	mov	r0, r5
 80011ee:	f7ff fd6f 	bl	8000cd0 <Pixel>
		Pixel(x1+x, y1+y,Color,Tolshina);
 80011f2:	9b02      	ldr	r3, [sp, #8]
 80011f4:	449a      	add	sl, r3
 80011f6:	fa1f fa8a 	uxth.w	sl, sl
 80011fa:	465b      	mov	r3, fp
 80011fc:	464a      	mov	r2, r9
 80011fe:	4641      	mov	r1, r8
 8001200:	4650      	mov	r0, sl
 8001202:	f7ff fd65 	bl	8000cd0 <Pixel>
		Pixel(x1+x, y1-y,Color,Tolshina);
 8001206:	9903      	ldr	r1, [sp, #12]
 8001208:	1a64      	subs	r4, r4, r1
 800120a:	b2a4      	uxth	r4, r4
 800120c:	465b      	mov	r3, fp
 800120e:	464a      	mov	r2, r9
 8001210:	4621      	mov	r1, r4
 8001212:	4650      	mov	r0, sl
 8001214:	f7ff fd5c 	bl	8000cd0 <Pixel>
		Pixel(x1-x, y1-y,Color,Tolshina);
 8001218:	465b      	mov	r3, fp
 800121a:	464a      	mov	r2, r9
 800121c:	4621      	mov	r1, r4
 800121e:	4628      	mov	r0, r5
 8001220:	f7ff fd56 	bl	8000cd0 <Pixel>
		if (e2 <= y) {
 8001224:	9a01      	ldr	r2, [sp, #4]
 8001226:	42b2      	cmp	r2, r6
 8001228:	dbc3      	blt.n	80011b2 <Circle+0x1e>
			err += ++y*2+1;
 800122a:	3201      	adds	r2, #1
 800122c:	9201      	str	r2, [sp, #4]
 800122e:	0053      	lsls	r3, r2, #1
 8001230:	3301      	adds	r3, #1
 8001232:	4433      	add	r3, r6
			if (-x == y && e2 <= x) e2 = 0;
 8001234:	42fa      	cmn	r2, r7
 8001236:	d1bd      	bne.n	80011b4 <Circle+0x20>
 8001238:	42b7      	cmp	r7, r6
 800123a:	dbbb      	blt.n	80011b4 <Circle+0x20>
 800123c:	2600      	movs	r6, #0
 800123e:	e7b9      	b.n	80011b4 <Circle+0x20>
 8001240:	461e      	mov	r6, r3
 8001242:	e7bd      	b.n	80011c0 <Circle+0x2c>
}
 8001244:	b007      	add	sp, #28
 8001246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800124a <FillCircle>:
void FillCircle(uint16 x1, uint16 y1, uint16 r, uint32 Color)//
{
 800124a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124c:	b083      	sub	sp, #12
 800124e:	4607      	mov	r7, r0
 8001250:	460e      	mov	r6, r1
 8001252:	4614      	mov	r4, r2
 8001254:	461d      	mov	r5, r3
  uint16 r1 = r;
  while(r1 != 0)
 8001256:	e009      	b.n	800126c <FillCircle+0x22>
  {
      Circle(x1,y1,r1,Color,2);
 8001258:	2202      	movs	r2, #2
 800125a:	9200      	str	r2, [sp, #0]
 800125c:	462b      	mov	r3, r5
 800125e:	b222      	sxth	r2, r4
 8001260:	b231      	sxth	r1, r6
 8001262:	b238      	sxth	r0, r7
 8001264:	f7ff ff96 	bl	8001194 <Circle>
      r1--;
 8001268:	3c01      	subs	r4, #1
 800126a:	b2a4      	uxth	r4, r4
  while(r1 != 0)
 800126c:	2c00      	cmp	r4, #0
 800126e:	d1f3      	bne.n	8001258 <FillCircle+0xe>
  }
}
 8001270:	b003      	add	sp, #12
 8001272:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001274 <HGradA>:
          MemPoint(j,i,Res_Color);
     }
   }
}
void HGradA(int16 x1, int16 x2, int16 y1, int16 y2, int32 ColorH, int32 ColorL)//++
{
 8001274:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001278:	ed2d 8b06 	vpush	{d8-d10}
 800127c:	468a      	mov	sl, r1
 800127e:	461e      	mov	r6, r3
 8001280:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001282:	9c11      	ldr	r4, [sp, #68]	; 0x44
    float HRed, HGreen, HBlue;
    float LRed, LGreen, LBlue;
    y1-=1;
 8001284:	3a01      	subs	r2, #1
 8001286:	fa0f fb82 	sxth.w	fp, r2
    x1-=1;
 800128a:	3801      	subs	r0, #1
 800128c:	fa0f f980 	sxth.w	r9, r0

	if(ColorType == Color565)
 8001290:	4b74      	ldr	r3, [pc, #464]	; (8001464 <HGradA+0x1f0>)
 8001292:	781f      	ldrb	r7, [r3, #0]
 8001294:	b93f      	cbnz	r7, 80012a6 <HGradA+0x32>
	{ ColorH = Get565Color(ColorH); ColorL = Get565Color(ColorL);}
 8001296:	4628      	mov	r0, r5
 8001298:	f7ff fcb6 	bl	8000c08 <Get565Color>
 800129c:	4605      	mov	r5, r0
 800129e:	4620      	mov	r0, r4
 80012a0:	f7ff fcb2 	bl	8000c08 <Get565Color>
 80012a4:	4604      	mov	r4, r0

	if(ColorType == Color888)
 80012a6:	2f01      	cmp	r7, #1
 80012a8:	d036      	beq.n	8001318 <HGradA+0xa4>
	{ ColorH = ColorH | 0xFF << 24; ColorL = ColorL | 0xFF << 24; }

	if(x1 < 1){x1 = 1;}
 80012aa:	f1b9 0f00 	cmp.w	r9, #0
 80012ae:	dd38      	ble.n	8001322 <HGradA+0xae>
	if(x2 > DispWidth){ x2 = DispWidth;}
 80012b0:	4b6d      	ldr	r3, [pc, #436]	; (8001468 <HGradA+0x1f4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	459a      	cmp	sl, r3
 80012b6:	d901      	bls.n	80012bc <HGradA+0x48>
 80012b8:	fa0f fa83 	sxth.w	sl, r3
	if(y1 < 1){ y1 = 1;}
 80012bc:	f1bb 0f00 	cmp.w	fp, #0
 80012c0:	dd32      	ble.n	8001328 <HGradA+0xb4>
	if(y2 > DispHeight){ y2 = DispHeight;}
 80012c2:	4b6a      	ldr	r3, [pc, #424]	; (800146c <HGradA+0x1f8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	429e      	cmp	r6, r3
 80012c8:	d900      	bls.n	80012cc <HGradA+0x58>
 80012ca:	b21e      	sxth	r6, r3

    if(ColorType != Color565)
 80012cc:	b37f      	cbz	r7, 800132e <HGradA+0xba>
    {
       HBlue = ColorH & 0x000000ff;
 80012ce:	b2eb      	uxtb	r3, r5
 80012d0:	ee09 3a90 	vmov	s19, r3
 80012d4:	eef8 9ae9 	vcvt.f32.s32	s19, s19
       ColorH = ColorH>>8;
       HGreen = ColorH & 0x000000ff;
 80012d8:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80012dc:	ee09 3a10 	vmov	s18, r3
 80012e0:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
       ColorH = ColorH>>8;
       HRed = ColorH & 0x000000ff;
 80012e4:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80012e8:	ee07 5a90 	vmov	s15, r5
 80012ec:	eeb8 8ae7 	vcvt.f32.s32	s16, s15

       LBlue = ColorL & 0x000000ff;
 80012f0:	b2e3      	uxtb	r3, r4
 80012f2:	ee0a 3a90 	vmov	s21, r3
 80012f6:	eef8 aaea 	vcvt.f32.s32	s21, s21
       ColorL = ColorL>>8;
       LGreen = ColorL & 0x000000ff;
 80012fa:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80012fe:	ee0a 3a10 	vmov	s20, r3
 8001302:	eeb8 aaca 	vcvt.f32.s32	s20, s20
       ColorL = ColorL>>8;
       LRed = ColorL & 0x000000ff;
 8001306:	f3c4 4407 	ubfx	r4, r4, #16, #8
 800130a:	ee07 4a90 	vmov	s15, r4
 800130e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
    }

    uint32 Res_Color, promej_zn;
    float Mix;

    for(uint16 i = x1; i<x2; i++)
 8001312:	fa1f f889 	uxth.w	r8, r9
 8001316:	e063      	b.n	80013e0 <HGradA+0x16c>
	{ ColorH = ColorH | 0xFF << 24; ColorL = ColorL | 0xFF << 24; }
 8001318:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 800131c:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 8001320:	e7c3      	b.n	80012aa <HGradA+0x36>
	if(x1 < 1){x1 = 1;}
 8001322:	f04f 0901 	mov.w	r9, #1
 8001326:	e7c3      	b.n	80012b0 <HGradA+0x3c>
	if(y1 < 1){ y1 = 1;}
 8001328:	f04f 0b01 	mov.w	fp, #1
 800132c:	e7c9      	b.n	80012c2 <HGradA+0x4e>
        HBlue = ColorH & 0x0000001f;
 800132e:	f005 031f 	and.w	r3, r5, #31
 8001332:	ee09 3a90 	vmov	s19, r3
 8001336:	eef8 9ae9 	vcvt.f32.s32	s19, s19
        HGreen = ColorH & 0x0000003f;
 800133a:	f3c5 1345 	ubfx	r3, r5, #5, #6
 800133e:	ee09 3a10 	vmov	s18, r3
 8001342:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
        HRed = ColorH & 0x0000001f;
 8001346:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 800134a:	ee07 5a90 	vmov	s15, r5
 800134e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
        LBlue = ColorL & 0x0000001f;
 8001352:	f004 031f 	and.w	r3, r4, #31
 8001356:	ee0a 3a90 	vmov	s21, r3
 800135a:	eef8 aaea 	vcvt.f32.s32	s21, s21
        LGreen = ColorL & 0x0000003f;
 800135e:	f3c4 1345 	ubfx	r3, r4, #5, #6
 8001362:	ee0a 3a10 	vmov	s20, r3
 8001366:	eeb8 aaca 	vcvt.f32.s32	s20, s20
        LRed = ColorL & 0x0000001f;
 800136a:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 800136e:	ee07 4a90 	vmov	s15, r4
 8001372:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8001376:	e7cc      	b.n	8001312 <HGradA+0x9e>
         promej_zn = HBlue * (1 - Mix) + LBlue * (Mix);
         Res_Color |= promej_zn;
     }
     else
     {
         Res_Color = HRed * (1 - Mix) + LRed * (Mix);
 8001378:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800137c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001380:	ee67 6a08 	vmul.f32	s13, s14, s16
 8001384:	ee28 6aa7 	vmul.f32	s12, s17, s15
 8001388:	ee76 6a86 	vadd.f32	s13, s13, s12
 800138c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001390:	ee16 3a90 	vmov	r3, s13
         Res_Color <<= 6;
         promej_zn = HGreen * (1 - Mix) + LGreen * (Mix);
 8001394:	ee67 6a09 	vmul.f32	s13, s14, s18
 8001398:	ee2a 6a27 	vmul.f32	s12, s20, s15
 800139c:	ee76 6a86 	vadd.f32	s13, s13, s12
 80013a0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80013a4:	ee16 5a90 	vmov	r5, s13
         Res_Color |= promej_zn;
 80013a8:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
         Res_Color <<= 5;
         promej_zn = HBlue * (1 - Mix) + LBlue * (Mix);
 80013ac:	ee27 7a29 	vmul.f32	s14, s14, s19
 80013b0:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80013b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
         Res_Color |= promej_zn;
 80013bc:	ee17 3a90 	vmov	r3, s15
 80013c0:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
 80013c4:	e047      	b.n	8001456 <HGradA+0x1e2>
     }


     for(int16 j = y1; j<y2; j++)
     {
         MemPoint(i,j,Res_Color);
 80013c6:	462a      	mov	r2, r5
 80013c8:	4621      	mov	r1, r4
 80013ca:	4638      	mov	r0, r7
 80013cc:	f7ff fc08 	bl	8000be0 <MemPoint>
     for(int16 j = y1; j<y2; j++)
 80013d0:	3401      	adds	r4, #1
 80013d2:	b224      	sxth	r4, r4
 80013d4:	42a6      	cmp	r6, r4
 80013d6:	dcf6      	bgt.n	80013c6 <HGradA+0x152>
    for(uint16 i = x1; i<x2; i++)
 80013d8:	f108 0801 	add.w	r8, r8, #1
 80013dc:	fa1f f888 	uxth.w	r8, r8
 80013e0:	45d0      	cmp	r8, sl
 80013e2:	da3a      	bge.n	800145a <HGradA+0x1e6>
     Mix = (float)(i - x1) / (float)(x2 - x1);
 80013e4:	4647      	mov	r7, r8
 80013e6:	eba8 0309 	sub.w	r3, r8, r9
 80013ea:	ee06 3a90 	vmov	s13, r3
 80013ee:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80013f2:	ebaa 0309 	sub.w	r3, sl, r9
 80013f6:	ee07 3a10 	vmov	s14, r3
 80013fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80013fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
     if(ColorType != Color565)
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <HGradA+0x1f0>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0b6      	beq.n	8001378 <HGradA+0x104>
         Res_Color = HRed * (1 - Mix) + LRed * (Mix);
 800140a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800140e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001412:	ee67 6a08 	vmul.f32	s13, s14, s16
 8001416:	ee28 6aa7 	vmul.f32	s12, s17, s15
 800141a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800141e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001422:	ee16 3a90 	vmov	r3, s13
         promej_zn = HGreen * (1 - Mix) + LGreen * (Mix);
 8001426:	ee67 6a09 	vmul.f32	s13, s14, s18
 800142a:	ee2a 6a27 	vmul.f32	s12, s20, s15
 800142e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001432:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001436:	ee16 5a90 	vmov	r5, s13
         Res_Color |= promej_zn;
 800143a:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
         promej_zn = HBlue * (1 - Mix) + LBlue * (Mix);
 800143e:	ee27 7a29 	vmul.f32	s14, s14, s19
 8001442:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8001446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
         Res_Color |= promej_zn;
 800144e:	ee17 3a90 	vmov	r3, s15
 8001452:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
     for(int16 j = y1; j<y2; j++)
 8001456:	465c      	mov	r4, fp
 8001458:	e7bc      	b.n	80013d4 <HGradA+0x160>
     }
   }
}
 800145a:	ecbd 8b06 	vpop	{d8-d10}
 800145e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001462:	bf00      	nop
 8001464:	2000002c 	.word	0x2000002c
 8001468:	20000038 	.word	0x20000038
 800146c:	20000034 	.word	0x20000034

08001470 <Inverse>:
		  FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,Tolshina);
		  VGradB(XStart + 1 + Tr, XEnd - Tr - 1, YPOS, YEnd - Tr - 1, BarColorH, BarColorC, BarColorH);
	  }
}
uint8 Inverse(uint8 S)
{
 8001470:	4602      	mov	r2, r0
	uint8 K = 0;
	for(uint8 i = 0; i<8; i++)
 8001472:	2300      	movs	r3, #0
	uint8 K = 0;
 8001474:	4618      	mov	r0, r3
	for(uint8 i = 0; i<8; i++)
 8001476:	e006      	b.n	8001486 <Inverse+0x16>
	{
		if((S & 0x01) != 0)
		{
			K = K | 0x01;
		}
		S = S >> 1;
 8001478:	0852      	lsrs	r2, r2, #1
		if(i<7)
 800147a:	2b06      	cmp	r3, #6
 800147c:	d801      	bhi.n	8001482 <Inverse+0x12>
		{
		  K = K << 1;
 800147e:	0040      	lsls	r0, r0, #1
 8001480:	b2c0      	uxtb	r0, r0
	for(uint8 i = 0; i<8; i++)
 8001482:	3301      	adds	r3, #1
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b07      	cmp	r3, #7
 8001488:	d805      	bhi.n	8001496 <Inverse+0x26>
		if((S & 0x01) != 0)
 800148a:	f012 0f01 	tst.w	r2, #1
 800148e:	d0f3      	beq.n	8001478 <Inverse+0x8>
			K = K | 0x01;
 8001490:	f040 0001 	orr.w	r0, r0, #1
 8001494:	e7f0      	b.n	8001478 <Inverse+0x8>
	    }
	}
	return K;
}
 8001496:	4770      	bx	lr

08001498 <Symbol>:
void Symbol(uint16 X, uint16 Y, uint32 Color, char Symbol)
{
 8001498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800149c:	b085      	sub	sp, #20
 800149e:	4681      	mov	r9, r0
 80014a0:	9101      	str	r1, [sp, #4]
 80014a2:	9203      	str	r2, [sp, #12]
	uint8 FontH = calibri[1];
 80014a4:	4a77      	ldr	r2, [pc, #476]	; (8001684 <Symbol+0x1ec>)
 80014a6:	f892 a001 	ldrb.w	sl, [r2, #1]
	uint8 FirstChar = calibri[2];
 80014aa:	7890      	ldrb	r0, [r2, #2]
	uint8 NumOfChar = calibri[3];
	uint8 Cursor = Symbol - FirstChar;
 80014ac:	1a18      	subs	r0, r3, r0
 80014ae:	b2c0      	uxtb	r0, r0
	uint16 SymbStartPos = 4 + NumOfChar;
 80014b0:	78d6      	ldrb	r6, [r2, #3]
 80014b2:	3604      	adds	r6, #4
	uint8 CharW = calibri[Cursor + 4];
 80014b4:	1d03      	adds	r3, r0, #4
 80014b6:	5cd7      	ldrb	r7, [r2, r3]
	uint16 i, j, k = 0;
	uint32 CharBit = 0;

	for(i = 4; i < Cursor + 4; i++)
 80014b8:	2204      	movs	r2, #4
 80014ba:	e001      	b.n	80014c0 <Symbol+0x28>
 80014bc:	3201      	adds	r2, #1
 80014be:	b292      	uxth	r2, r2
 80014c0:	1cc3      	adds	r3, r0, #3
 80014c2:	4293      	cmp	r3, r2
 80014c4:	db1e      	blt.n	8001504 <Symbol+0x6c>
	{
	   	if(calibri[i] <= 8)
 80014c6:	4b6f      	ldr	r3, [pc, #444]	; (8001684 <Symbol+0x1ec>)
 80014c8:	5c9b      	ldrb	r3, [r3, r2]
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d801      	bhi.n	80014d2 <Symbol+0x3a>
	   	{
	   	   SymbStartPos += FontH;
 80014ce:	4456      	add	r6, sl
 80014d0:	b2b6      	uxth	r6, r6
	   	}

	   	if(calibri[i] > 8 && calibri[i] <= 16)
 80014d2:	f1a3 0109 	sub.w	r1, r3, #9
 80014d6:	b2c9      	uxtb	r1, r1
 80014d8:	2907      	cmp	r1, #7
 80014da:	d802      	bhi.n	80014e2 <Symbol+0x4a>
		{
	   		SymbStartPos += FontH * 2;
 80014dc:	eb06 064a 	add.w	r6, r6, sl, lsl #1
 80014e0:	b2b6      	uxth	r6, r6
		}

	   	if(calibri[i] > 16 && calibri[i] <= 24)
 80014e2:	f1a3 0111 	sub.w	r1, r3, #17
 80014e6:	b2c9      	uxtb	r1, r1
 80014e8:	2907      	cmp	r1, #7
 80014ea:	d803      	bhi.n	80014f4 <Symbol+0x5c>
		{
	   		SymbStartPos += FontH * 3;
 80014ec:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
 80014f0:	440e      	add	r6, r1
 80014f2:	b2b6      	uxth	r6, r6
		}
	   	if(calibri[i] > 24 && calibri[i] <= 32)
 80014f4:	3b19      	subs	r3, #25
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b07      	cmp	r3, #7
 80014fa:	d8df      	bhi.n	80014bc <Symbol+0x24>
		{
	   		SymbStartPos += FontH * 4;
 80014fc:	eb06 068a 	add.w	r6, r6, sl, lsl #2
 8001500:	b2b6      	uxth	r6, r6
 8001502:	e7db      	b.n	80014bc <Symbol+0x24>
		}
	}

	for(i = Y; i < Y + FontH; i++)
 8001504:	f8dd b004 	ldr.w	fp, [sp, #4]
	uint32 CharBit = 0;
 8001508:	2500      	movs	r5, #0
	uint16 i, j, k = 0;
 800150a:	46a8      	mov	r8, r5
 800150c:	f8cd a008 	str.w	sl, [sp, #8]
 8001510:	e038      	b.n	8001584 <Symbol+0xec>
      		    if(i < DispHeight && j < DispWidth)
      		    {
      			    if(ColorType == Color565)
      			    { MemPoint(j,i,Get565Color(Color)); }

      			    if(ColorType == Color888)
 8001512:	4b5d      	ldr	r3, [pc, #372]	; (8001688 <Symbol+0x1f0>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d022      	beq.n	8001560 <Symbol+0xc8>
      			    { MemPoint(j,i,Color | 0xFF << 24); }

      			    if(ColorType == Color_A888)
 800151a:	4b5b      	ldr	r3, [pc, #364]	; (8001688 <Symbol+0x1f0>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d026      	beq.n	8001570 <Symbol+0xd8>
      			    { MemPoint(j,i,Color); }
      	        }
            }
            CharBit = CharBit << 1;
 8001522:	006d      	lsls	r5, r5, #1
		for(j = X; j < X + CharW; j++)
 8001524:	3401      	adds	r4, #1
 8001526:	b2a4      	uxth	r4, r4
 8001528:	46a2      	mov	sl, r4
 800152a:	eb09 0307 	add.w	r3, r9, r7
 800152e:	429c      	cmp	r4, r3
 8001530:	da24      	bge.n	800157c <Symbol+0xe4>
            if((CharBit & 0x80000000) != 0)
 8001532:	2d00      	cmp	r5, #0
 8001534:	daf5      	bge.n	8001522 <Symbol+0x8a>
      		    if(i < DispHeight && j < DispWidth)
 8001536:	4b55      	ldr	r3, [pc, #340]	; (800168c <Symbol+0x1f4>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	459b      	cmp	fp, r3
 800153c:	d2f1      	bcs.n	8001522 <Symbol+0x8a>
 800153e:	4b54      	ldr	r3, [pc, #336]	; (8001690 <Symbol+0x1f8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	429c      	cmp	r4, r3
 8001544:	d2ed      	bcs.n	8001522 <Symbol+0x8a>
      			    if(ColorType == Color565)
 8001546:	4b50      	ldr	r3, [pc, #320]	; (8001688 <Symbol+0x1f0>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1e1      	bne.n	8001512 <Symbol+0x7a>
      			    { MemPoint(j,i,Get565Color(Color)); }
 800154e:	9803      	ldr	r0, [sp, #12]
 8001550:	f7ff fb5a 	bl	8000c08 <Get565Color>
 8001554:	4602      	mov	r2, r0
 8001556:	9900      	ldr	r1, [sp, #0]
 8001558:	4650      	mov	r0, sl
 800155a:	f7ff fb41 	bl	8000be0 <MemPoint>
 800155e:	e7d8      	b.n	8001512 <Symbol+0x7a>
      			    { MemPoint(j,i,Color | 0xFF << 24); }
 8001560:	9b03      	ldr	r3, [sp, #12]
 8001562:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8001566:	9900      	ldr	r1, [sp, #0]
 8001568:	4650      	mov	r0, sl
 800156a:	f7ff fb39 	bl	8000be0 <MemPoint>
 800156e:	e7d4      	b.n	800151a <Symbol+0x82>
      			    { MemPoint(j,i,Color); }
 8001570:	9a03      	ldr	r2, [sp, #12]
 8001572:	9900      	ldr	r1, [sp, #0]
 8001574:	4650      	mov	r0, sl
 8001576:	f7ff fb33 	bl	8000be0 <MemPoint>
 800157a:	e7d2      	b.n	8001522 <Symbol+0x8a>
	for(i = Y; i < Y + FontH; i++)
 800157c:	f10b 0b01 	add.w	fp, fp, #1
 8001580:	fa1f fb8b 	uxth.w	fp, fp
 8001584:	f8cd b000 	str.w	fp, [sp]
 8001588:	9b01      	ldr	r3, [sp, #4]
 800158a:	9a02      	ldr	r2, [sp, #8]
 800158c:	4413      	add	r3, r2
 800158e:	459b      	cmp	fp, r3
 8001590:	da75      	bge.n	800167e <Symbol+0x1e6>
		if(CharW <= 8)
 8001592:	2f08      	cmp	r7, #8
 8001594:	d80a      	bhi.n	80015ac <Symbol+0x114>
			CharBit = Inverse(calibri[SymbStartPos + k]);
 8001596:	eb06 0308 	add.w	r3, r6, r8
 800159a:	4a3a      	ldr	r2, [pc, #232]	; (8001684 <Symbol+0x1ec>)
 800159c:	5cd0      	ldrb	r0, [r2, r3]
 800159e:	f7ff ff67 	bl	8001470 <Inverse>
			CharBit = CharBit << 24;
 80015a2:	0605      	lsls	r5, r0, #24
			k++;
 80015a4:	f108 0801 	add.w	r8, r8, #1
 80015a8:	fa1f f888 	uxth.w	r8, r8
		if(CharW > 8 && CharW <= 16)
 80015ac:	f1a7 0309 	sub.w	r3, r7, #9
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b07      	cmp	r3, #7
 80015b4:	d813      	bhi.n	80015de <Symbol+0x146>
			CharBit = Inverse(calibri[SymbStartPos + k]);
 80015b6:	eb08 0306 	add.w	r3, r8, r6
 80015ba:	4d32      	ldr	r5, [pc, #200]	; (8001684 <Symbol+0x1ec>)
 80015bc:	5ce8      	ldrb	r0, [r5, r3]
 80015be:	f7ff ff57 	bl	8001470 <Inverse>
			k++;
 80015c2:	f108 0301 	add.w	r3, r8, #1
			CharBit = CharBit << 8;
 80015c6:	0204      	lsls	r4, r0, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 80015c8:	fa16 f383 	uxtah	r3, r6, r3
 80015cc:	5ce8      	ldrb	r0, [r5, r3]
 80015ce:	f7ff ff4f 	bl	8001470 <Inverse>
 80015d2:	4320      	orrs	r0, r4
			CharBit = CharBit << 16;
 80015d4:	0405      	lsls	r5, r0, #16
			k++;
 80015d6:	f108 0802 	add.w	r8, r8, #2
 80015da:	fa1f f888 	uxth.w	r8, r8
		if(CharW > 16 && CharW <= 24)
 80015de:	f1a7 0311 	sub.w	r3, r7, #17
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b07      	cmp	r3, #7
 80015e6:	d81d      	bhi.n	8001624 <Symbol+0x18c>
			CharBit = Inverse(calibri[SymbStartPos + k]);
 80015e8:	eb08 0306 	add.w	r3, r8, r6
 80015ec:	4d25      	ldr	r5, [pc, #148]	; (8001684 <Symbol+0x1ec>)
 80015ee:	5ce8      	ldrb	r0, [r5, r3]
 80015f0:	f7ff ff3e 	bl	8001470 <Inverse>
			k++;
 80015f4:	f108 0301 	add.w	r3, r8, #1
			CharBit = CharBit << 8;
 80015f8:	0204      	lsls	r4, r0, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 80015fa:	fa16 f383 	uxtah	r3, r6, r3
 80015fe:	5ce8      	ldrb	r0, [r5, r3]
 8001600:	f7ff ff36 	bl	8001470 <Inverse>
 8001604:	4304      	orrs	r4, r0
			k++;
 8001606:	f108 0302 	add.w	r3, r8, #2
			CharBit = CharBit << 8;
 800160a:	0224      	lsls	r4, r4, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 800160c:	fa16 f383 	uxtah	r3, r6, r3
 8001610:	5ce8      	ldrb	r0, [r5, r3]
 8001612:	f7ff ff2d 	bl	8001470 <Inverse>
 8001616:	ea40 0504 	orr.w	r5, r0, r4
			CharBit = CharBit << 8;
 800161a:	022d      	lsls	r5, r5, #8
			k++;
 800161c:	f108 0803 	add.w	r8, r8, #3
 8001620:	fa1f f888 	uxth.w	r8, r8
		if(CharW > 24 && CharW <= 32)
 8001624:	f1a7 0319 	sub.w	r3, r7, #25
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b07      	cmp	r3, #7
 800162c:	d825      	bhi.n	800167a <Symbol+0x1e2>
			CharBit = Inverse(calibri[SymbStartPos + k]);
 800162e:	eb08 0306 	add.w	r3, r8, r6
 8001632:	4d14      	ldr	r5, [pc, #80]	; (8001684 <Symbol+0x1ec>)
 8001634:	5ce8      	ldrb	r0, [r5, r3]
 8001636:	f7ff ff1b 	bl	8001470 <Inverse>
			k++;
 800163a:	f108 0301 	add.w	r3, r8, #1
			CharBit = CharBit << 8;
 800163e:	0204      	lsls	r4, r0, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 8001640:	fa16 f383 	uxtah	r3, r6, r3
 8001644:	5ce8      	ldrb	r0, [r5, r3]
 8001646:	f7ff ff13 	bl	8001470 <Inverse>
 800164a:	4304      	orrs	r4, r0
			k++;
 800164c:	f108 0302 	add.w	r3, r8, #2
			CharBit = CharBit << 8;
 8001650:	0224      	lsls	r4, r4, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 8001652:	fa16 f383 	uxtah	r3, r6, r3
 8001656:	5ce8      	ldrb	r0, [r5, r3]
 8001658:	f7ff ff0a 	bl	8001470 <Inverse>
 800165c:	4304      	orrs	r4, r0
			k++;
 800165e:	f108 0303 	add.w	r3, r8, #3
			CharBit = CharBit << 8;
 8001662:	0224      	lsls	r4, r4, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 8001664:	fa16 f383 	uxtah	r3, r6, r3
 8001668:	5ce8      	ldrb	r0, [r5, r3]
 800166a:	f7ff ff01 	bl	8001470 <Inverse>
 800166e:	ea40 0504 	orr.w	r5, r0, r4
			k++;
 8001672:	f108 0804 	add.w	r8, r8, #4
 8001676:	fa1f f888 	uxth.w	r8, r8
		for(j = X; j < X + CharW; j++)
 800167a:	464c      	mov	r4, r9
 800167c:	e754      	b.n	8001528 <Symbol+0x90>
		}
	}
}
 800167e:	b005      	add	sp, #20
 8001680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001684:	08005bc0 	.word	0x08005bc0
 8001688:	2000002c 	.word	0x2000002c
 800168c:	20000034 	.word	0x20000034
 8001690:	20000038 	.word	0x20000038

08001694 <Label>:
void Label (uint16 X, uint16 Y, uint32 Color, char String[])//++
{
 8001694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001698:	b087      	sub	sp, #28
 800169a:	4607      	mov	r7, r0
 800169c:	4688      	mov	r8, r1
 800169e:	4691      	mov	r9, r2
 80016a0:	461e      	mov	r6, r3
  uint16 Nx = 0, Ny = 0;
 80016a2:	2500      	movs	r5, #0
 80016a4:	f8ad 5016 	strh.w	r5, [sp, #22]
 80016a8:	f8ad 5014 	strh.w	r5, [sp, #20]
  uint16 Sym = 0;
  uint8 ChW = 0;
 80016ac:	f88d 5013 	strb.w	r5, [sp, #19]
  uint8 ChH = 0;
 80016b0:	f88d 5012 	strb.w	r5, [sp, #18]
  while(String[Sym]!=0)
 80016b4:	e001      	b.n	80016ba <Label+0x26>
  {
  	Sym++;
 80016b6:	3501      	adds	r5, #1
 80016b8:	b2ad      	uxth	r5, r5
  while(String[Sym]!=0)
 80016ba:	5d73      	ldrb	r3, [r6, r5]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1fa      	bne.n	80016b6 <Label+0x22>
  }
  for(uint16 i = 0; i<Sym; i++)
 80016c0:	2400      	movs	r4, #0
 80016c2:	e001      	b.n	80016c8 <Label+0x34>
 80016c4:	3401      	adds	r4, #1
 80016c6:	b2a4      	uxth	r4, r4
 80016c8:	42a5      	cmp	r5, r4
 80016ca:	d920      	bls.n	800170e <Label+0x7a>
  {
  	if(String[i]>= 0x20 && String[i]<= 0xFF)
 80016cc:	5d33      	ldrb	r3, [r6, r4]
 80016ce:	2b1f      	cmp	r3, #31
 80016d0:	d9f8      	bls.n	80016c4 <Label+0x30>
  	{

  		Symbol(X, Y, Color, String[i]);
 80016d2:	464a      	mov	r2, r9
 80016d4:	4641      	mov	r1, r8
 80016d6:	4638      	mov	r0, r7
 80016d8:	f7ff fede 	bl	8001498 <Symbol>
  		SymbolParameters(X, Y, &Nx, &Ny,&ChW,&ChH, String[i]);
 80016dc:	5d33      	ldrb	r3, [r6, r4]
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	f10d 0312 	add.w	r3, sp, #18
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	f10d 0313 	add.w	r3, sp, #19
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	ab05      	add	r3, sp, #20
 80016ee:	f10d 0216 	add.w	r2, sp, #22
 80016f2:	4641      	mov	r1, r8
 80016f4:	4638      	mov	r0, r7
 80016f6:	f7ff fab3 	bl	8000c60 <SymbolParameters>

  		if(X + ChW < DispWidth)
 80016fa:	f89d 0013 	ldrb.w	r0, [sp, #19]
 80016fe:	4407      	add	r7, r0
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <Label+0x80>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	429f      	cmp	r7, r3
 8001706:	d202      	bcs.n	800170e <Label+0x7a>
  		{
  		   X = Nx;
 8001708:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 800170c:	e7da      	b.n	80016c4 <Label+0x30>
  		}

  	}
  }

}
 800170e:	b007      	add	sp, #28
 8001710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001714:	20000038 	.word	0x20000038

08001718 <Form>:
		  FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,1);
		  FillCircle(XStart + ((XEnd - XStart) / 2),YPOS,Rad,TrackerColor);
	  }
}
void Form(uint16 x1, uint16 x2, uint16 y1, uint16 y2, uint16 y_S, uint16 TolshinaB, uint32 ColorL, uint32 ColorS, uint32 ColorW,uint32 ColorT,char FormName[])//++
{
 8001718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800171c:	b087      	sub	sp, #28
 800171e:	4681      	mov	r9, r0
 8001720:	460f      	mov	r7, r1
 8001722:	4616      	mov	r6, r2
 8001724:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8001728:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
  uint16 k = TolshinaB - 1,txty;
 800172c:	1e6c      	subs	r4, r5, #1
 800172e:	b2a4      	uxth	r4, r4
  txty = y1+((y1+y_S - y1)/2 - 8);
 8001730:	eb02 0168 	add.w	r1, r2, r8, asr #1
 8001734:	b289      	uxth	r1, r1
 8001736:	3908      	subs	r1, #8
 8001738:	b28a      	uxth	r2, r1
 800173a:	9205      	str	r2, [sp, #20]

  Fill_Rectangle(ColorW,x1,x2,y1,y2);
 800173c:	9303      	str	r3, [sp, #12]
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	4633      	mov	r3, r6
 8001742:	463a      	mov	r2, r7
 8001744:	4601      	mov	r1, r0
 8001746:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001748:	f7ff fb2c 	bl	8000da4 <Fill_Rectangle>
  Fill_Rectangle(ColorS,x1,x2,y1,y1+y_S);
 800174c:	eb08 0306 	add.w	r3, r8, r6
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	4633      	mov	r3, r6
 8001754:	463a      	mov	r2, r7
 8001756:	4649      	mov	r1, r9
 8001758:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800175a:	f7ff fb23 	bl	8000da4 <Fill_Rectangle>
  VLine(ColorL,x1,y1,y2,TolshinaB);
 800175e:	f8cd 9008 	str.w	r9, [sp, #8]
 8001762:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 8001766:	fa0f fb86 	sxth.w	fp, r6
 800176a:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 800176e:	b2ed      	uxtb	r5, r5
 8001770:	9500      	str	r5, [sp, #0]
 8001772:	9004      	str	r0, [sp, #16]
 8001774:	4603      	mov	r3, r0
 8001776:	465a      	mov	r2, fp
 8001778:	4651      	mov	r1, sl
 800177a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800177c:	f7ff fb7e 	bl	8000e7c <VLine>
  VLine(ColorL,x2-k,y1,y2,TolshinaB);
 8001780:	eba7 0904 	sub.w	r9, r7, r4
 8001784:	fa0f f989 	sxth.w	r9, r9
 8001788:	9500      	str	r5, [sp, #0]
 800178a:	9b04      	ldr	r3, [sp, #16]
 800178c:	465a      	mov	r2, fp
 800178e:	4649      	mov	r1, r9
 8001790:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001792:	f7ff fb73 	bl	8000e7c <VLine>
  HLine(ColorL,x1,x2,y1,TolshinaB);
 8001796:	b23f      	sxth	r7, r7
 8001798:	9500      	str	r5, [sp, #0]
 800179a:	465b      	mov	r3, fp
 800179c:	463a      	mov	r2, r7
 800179e:	4651      	mov	r1, sl
 80017a0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80017a2:	f7ff fb5d 	bl	8000e60 <HLine>
  HLine(ColorL,x1,x2,y2-k,TolshinaB);
 80017a6:	9b03      	ldr	r3, [sp, #12]
 80017a8:	1b1b      	subs	r3, r3, r4
 80017aa:	9500      	str	r5, [sp, #0]
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	463a      	mov	r2, r7
 80017b0:	4651      	mov	r1, sl
 80017b2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80017b4:	f7ff fb54 	bl	8000e60 <HLine>
  HLine(ColorL,x1+k,x2 - k,y_S+y1,TolshinaB);
 80017b8:	9902      	ldr	r1, [sp, #8]
 80017ba:	4421      	add	r1, r4
 80017bc:	b28f      	uxth	r7, r1
 80017be:	eb08 0306 	add.w	r3, r8, r6
 80017c2:	9500      	str	r5, [sp, #0]
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	464a      	mov	r2, r9
 80017c8:	b209      	sxth	r1, r1
 80017ca:	9812      	ldr	r0, [sp, #72]	; 0x48
 80017cc:	f7ff fb48 	bl	8000e60 <HLine>
  Label(x1+k+2,txty+k,ColorT,FormName);
 80017d0:	9a05      	ldr	r2, [sp, #20]
 80017d2:	18a1      	adds	r1, r4, r2
 80017d4:	1cb8      	adds	r0, r7, #2
 80017d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80017d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80017da:	b289      	uxth	r1, r1
 80017dc:	b280      	uxth	r0, r0
 80017de:	f7ff ff59 	bl	8001694 <Label>
}
 80017e2:	b007      	add	sp, #28
 80017e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080017e8 <CheckBox>:
  HLine(ColorL,x1,x2,y2-k,TolshinaB);
  HLine(ColorL,x1+k,x2 - k,y_S+y1,TolshinaB);
  Label(x1+k+2,txty+k,ColorT,FormName);
}
void CheckBox(int16 x1, int16 x2, int16 y1, int16 y2, uint32 BrColor, uint32 BackColor, uint32 ChColor, uint8 Checked, uint32 TextColor, char Name[])
{
 80017e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017ec:	b085      	sub	sp, #20
 80017ee:	4607      	mov	r7, r0
 80017f0:	460c      	mov	r4, r1
 80017f2:	4616      	mov	r6, r2
 80017f4:	461d      	mov	r5, r3
	FramePanel(BrColor,BackColor,x1,x2,y1,y2,2);
 80017f6:	2302      	movs	r3, #2
 80017f8:	9302      	str	r3, [sp, #8]
 80017fa:	9501      	str	r5, [sp, #4]
 80017fc:	9200      	str	r2, [sp, #0]
 80017fe:	460b      	mov	r3, r1
 8001800:	4602      	mov	r2, r0
 8001802:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001804:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001806:	f7ff fb48 	bl	8000e9a <FramePanel>
	if(Checked == 1)
 800180a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800180e:	2b01      	cmp	r3, #1
 8001810:	d009      	beq.n	8001826 <CheckBox+0x3e>
	{

		Line(x1+3, y1+6, x1+((x2-x1)/2), y2-3, ChColor, 2);
		Line(x1+((x2-x1)/2), y2-3, x2-3, y1+3, ChColor, 2);
	}
	Label(x2 + 3, y1, TextColor, Name);
 8001812:	1ce0      	adds	r0, r4, #3
 8001814:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001816:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001818:	b2b1      	uxth	r1, r6
 800181a:	b280      	uxth	r0, r0
 800181c:	f7ff ff3a 	bl	8001694 <Label>
}
 8001820:	b005      	add	sp, #20
 8001822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		Line(x1+3, y1+6, x1+((x2-x1)/2), y2-3, ChColor, 2);
 8001826:	b2bb      	uxth	r3, r7
 8001828:	f103 0c03 	add.w	ip, r3, #3
 800182c:	fa1f fc8c 	uxth.w	ip, ip
 8001830:	fa1f f886 	uxth.w	r8, r6
 8001834:	f108 0106 	add.w	r1, r8, #6
 8001838:	b289      	uxth	r1, r1
 800183a:	1be0      	subs	r0, r4, r7
 800183c:	d41f      	bmi.n	800187e <CheckBox+0x96>
 800183e:	eb03 0060 	add.w	r0, r3, r0, asr #1
 8001842:	b207      	sxth	r7, r0
 8001844:	3d03      	subs	r5, #3
 8001846:	b22d      	sxth	r5, r5
 8001848:	f04f 0902 	mov.w	r9, #2
 800184c:	f8cd 9004 	str.w	r9, [sp, #4]
 8001850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	462b      	mov	r3, r5
 8001856:	463a      	mov	r2, r7
 8001858:	b209      	sxth	r1, r1
 800185a:	fa0f f08c 	sxth.w	r0, ip
 800185e:	f7ff fb5d 	bl	8000f1c <Line>
		Line(x1+((x2-x1)/2), y2-3, x2-3, y1+3, ChColor, 2);
 8001862:	1ee2      	subs	r2, r4, #3
 8001864:	f108 0303 	add.w	r3, r8, #3
 8001868:	f8cd 9004 	str.w	r9, [sp, #4]
 800186c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800186e:	9100      	str	r1, [sp, #0]
 8001870:	b21b      	sxth	r3, r3
 8001872:	b212      	sxth	r2, r2
 8001874:	4629      	mov	r1, r5
 8001876:	4638      	mov	r0, r7
 8001878:	f7ff fb50 	bl	8000f1c <Line>
 800187c:	e7c9      	b.n	8001812 <CheckBox+0x2a>
		Line(x1+3, y1+6, x1+((x2-x1)/2), y2-3, ChColor, 2);
 800187e:	3001      	adds	r0, #1
 8001880:	e7dd      	b.n	800183e <CheckBox+0x56>

08001882 <Radiobutton>:
void Radiobutton(uint16 x, uint16 y, uint16 Radius, uint32 ExCirColor, uint32 InCirColor, uint32 BackColor, uint8 Transp_key, uint16 Checked)
{
 8001882:	b570      	push	{r4, r5, r6, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	4605      	mov	r5, r0
 8001888:	460e      	mov	r6, r1
 800188a:	4614      	mov	r4, r2
	if(Transp_key == 0)
	{
//		FramePanel(BackColor,x-Radius,x+Radius+1,y-Radius,y+Radius+1);
	}

	if(Checked == 1)
 800188c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8001890:	2a01      	cmp	r2, #1
 8001892:	d008      	beq.n	80018a6 <Radiobutton+0x24>
		FillCircle(x,y,Radius - 4,InCirColor);

	}
	else
	{
		Circle(x,y,Radius,ExCirColor,2);
 8001894:	2202      	movs	r2, #2
 8001896:	9200      	str	r2, [sp, #0]
 8001898:	b222      	sxth	r2, r4
 800189a:	b209      	sxth	r1, r1
 800189c:	b200      	sxth	r0, r0
 800189e:	f7ff fc79 	bl	8001194 <Circle>
	}
}
 80018a2:	b002      	add	sp, #8
 80018a4:	bd70      	pop	{r4, r5, r6, pc}
		Circle(x,y,Radius,ExCirColor,2);
 80018a6:	2202      	movs	r2, #2
 80018a8:	9200      	str	r2, [sp, #0]
 80018aa:	b222      	sxth	r2, r4
 80018ac:	b209      	sxth	r1, r1
 80018ae:	b200      	sxth	r0, r0
 80018b0:	f7ff fc70 	bl	8001194 <Circle>
		FillCircle(x,y,Radius - 4,InCirColor);
 80018b4:	1f22      	subs	r2, r4, #4
 80018b6:	9b06      	ldr	r3, [sp, #24]
 80018b8:	b292      	uxth	r2, r2
 80018ba:	4631      	mov	r1, r6
 80018bc:	4628      	mov	r0, r5
 80018be:	f7ff fcc4 	bl	800124a <FillCircle>
 80018c2:	e7ee      	b.n	80018a2 <Radiobutton+0x20>

080018c4 <Graph>:
void Graph(uint16 X1, uint16 X2, uint16 Y1, uint16 Y2, uint32 FillColor, uint32 FrColor, uint8 Tl, uint32 LinColor, uint32 StepX, uint32 StepY, int32 XMax, int32 XMin, int32 YMax, int32 YMin)
{
 80018c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018c8:	ed2d 8b08 	vpush	{d8-d11}
 80018cc:	b087      	sub	sp, #28
 80018ce:	4680      	mov	r8, r0
 80018d0:	9005      	str	r0, [sp, #20]
 80018d2:	460d      	mov	r5, r1
 80018d4:	4616      	mov	r6, r2
 80018d6:	461c      	mov	r4, r3
 80018d8:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 80018dc:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
	float XC, YC, StX, StY, XX, YY;;

	XC = ((float)XMax - (float)XMin) / (float)StepX;
 80018de:	eddd 7a1e 	vldr	s15, [sp, #120]	; 0x78
 80018e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e6:	ed9d 7a1f 	vldr	s14, [sp, #124]	; 0x7c
 80018ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80018ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018f2:	ed9d 7a1c 	vldr	s14, [sp, #112]	; 0x70
 80018f6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80018fa:	eec7 9a87 	vdiv.f32	s19, s15, s14
	YC = ((float)YMax - (float)YMin) / (float)StepY;
 80018fe:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8001902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001906:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 800190a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800190e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001912:	ed9d 7a1d 	vldr	s14, [sp, #116]	; 0x74
 8001916:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800191a:	ee87 aa87 	vdiv.f32	s20, s15, s14
	FramePanel(FrColor, FillColor, X1, X2, Y1, Y2, Tl);
 800191e:	f8cd a008 	str.w	sl, [sp, #8]
 8001922:	b21b      	sxth	r3, r3
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	b213      	sxth	r3, r2
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	b20b      	sxth	r3, r1
 800192c:	b202      	sxth	r2, r0
 800192e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8001930:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001932:	f7ff fab2 	bl	8000e9a <FramePanel>

	StX = (((float)X2 - (float)Tl) - ((float)X1 + (float)Tl)) / XC;
 8001936:	ee07 5a90 	vmov	s15, r5
 800193a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800193e:	ee07 aa90 	vmov	s15, sl
 8001942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001946:	ee37 7a67 	vsub.f32	s14, s14, s15
 800194a:	ee06 8a90 	vmov	s13, r8
 800194e:	eeb8 9a66 	vcvt.f32.u32	s18, s13
 8001952:	ee37 9a89 	vadd.f32	s18, s15, s18
 8001956:	ee37 7a49 	vsub.f32	s14, s14, s18
 800195a:	ee87 ba29 	vdiv.f32	s22, s14, s19
	StY = (((float)Y2 - (float)Tl) - ((float)Y1 + (float)Tl)) / YC;
 800195e:	ee07 4a10 	vmov	s14, r4
 8001962:	eeb8 8a47 	vcvt.f32.u32	s16, s14
 8001966:	ee78 8a67 	vsub.f32	s17, s16, s15
 800196a:	ee07 6a10 	vmov	s14, r6
 800196e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001972:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001976:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800197a:	eec7 aa8a 	vdiv.f32	s21, s15, s20
	XX = (float)X1 + (float)Tl;
	YY = (float)Y2 - (float)Tl;

	VLine(LinColor, (uint16)XX, Y1+Tl, Y2-Tl, 1);
 800197e:	eefc 7ac9 	vcvt.u32.f32	s15, s18
 8001982:	fa1f fb8a 	uxth.w	fp, sl
 8001986:	eb0a 0906 	add.w	r9, sl, r6
 800198a:	fa0f f989 	sxth.w	r9, r9
 800198e:	eba4 040a 	sub.w	r4, r4, sl
 8001992:	b224      	sxth	r4, r4
 8001994:	2301      	movs	r3, #1
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	4623      	mov	r3, r4
 800199a:	464a      	mov	r2, r9
 800199c:	ee17 1a90 	vmov	r1, s15
 80019a0:	b209      	sxth	r1, r1
 80019a2:	4638      	mov	r0, r7
 80019a4:	f7ff fa6a 	bl	8000e7c <VLine>
	XX += StX;
 80019a8:	ee39 9a0b 	vadd.f32	s18, s18, s22
	for(uint16 x = 0; x < XC; x++)
 80019ac:	f04f 0800 	mov.w	r8, #0
 80019b0:	e00f      	b.n	80019d2 <Graph+0x10e>
		    VLine(LinColor, (uint16)XX, Y1+Tl, Y2-Tl, 1);
		    XX += StX;
	    }
		else
		{
		    VLine(LinColor, X2 - Tl, Y1+Tl, Y2-Tl, 1);
 80019b2:	eba5 010b 	sub.w	r1, r5, fp
 80019b6:	2301      	movs	r3, #1
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	4623      	mov	r3, r4
 80019bc:	464a      	mov	r2, r9
 80019be:	b209      	sxth	r1, r1
 80019c0:	4638      	mov	r0, r7
 80019c2:	f7ff fa5b 	bl	8000e7c <VLine>
		    XX += StX;
 80019c6:	ee39 9a0b 	vadd.f32	s18, s18, s22
	for(uint16 x = 0; x < XC; x++)
 80019ca:	f108 0801 	add.w	r8, r8, #1
 80019ce:	fa1f f888 	uxth.w	r8, r8
 80019d2:	ee07 8a90 	vmov	s15, r8
 80019d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019da:	eeb4 7ae9 	vcmpe.f32	s14, s19
 80019de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e2:	d517      	bpl.n	8001a14 <Graph+0x150>
		if(x < XC - 1)
 80019e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80019e8:	ee79 7ae7 	vsub.f32	s15, s19, s15
 80019ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f4:	dddd      	ble.n	80019b2 <Graph+0xee>
		    VLine(LinColor, (uint16)XX, Y1+Tl, Y2-Tl, 1);
 80019f6:	eefc 7ac9 	vcvt.u32.f32	s15, s18
 80019fa:	2301      	movs	r3, #1
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	4623      	mov	r3, r4
 8001a00:	464a      	mov	r2, r9
 8001a02:	ee17 1a90 	vmov	r1, s15
 8001a06:	b209      	sxth	r1, r1
 8001a08:	4638      	mov	r0, r7
 8001a0a:	f7ff fa37 	bl	8000e7c <VLine>
		    XX += StX;
 8001a0e:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8001a12:	e7da      	b.n	80019ca <Graph+0x106>
		}
	}
	HLine(LinColor, X1+Tl, X2-Tl, (uint16)YY, 1);
 8001a14:	9b05      	ldr	r3, [sp, #20]
 8001a16:	445b      	add	r3, fp
 8001a18:	fa0f f883 	sxth.w	r8, r3
 8001a1c:	eba5 050b 	sub.w	r5, r5, fp
 8001a20:	b22d      	sxth	r5, r5
 8001a22:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 8001a26:	2301      	movs	r3, #1
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	ee17 3a90 	vmov	r3, s15
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	462a      	mov	r2, r5
 8001a32:	4641      	mov	r1, r8
 8001a34:	4638      	mov	r0, r7
 8001a36:	f7ff fa13 	bl	8000e60 <HLine>
	YY -= StY;
 8001a3a:	ee78 8aea 	vsub.f32	s17, s17, s21
	for(uint16 y = 0; y < YC; y++)
 8001a3e:	2400      	movs	r4, #0
 8001a40:	e00b      	b.n	8001a5a <Graph+0x196>
		{
		    HLine(LinColor, X1+Tl, X2-Tl, Y1 + Tl, 1);
	    }
		else
		{
			HLine(LinColor, X1+Tl, X2-Tl, (uint16)YY, 1);
 8001a42:	2201      	movs	r2, #1
 8001a44:	9200      	str	r2, [sp, #0]
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	462a      	mov	r2, r5
 8001a4a:	4641      	mov	r1, r8
 8001a4c:	4638      	mov	r0, r7
 8001a4e:	f7ff fa07 	bl	8000e60 <HLine>
		}
		YY -= StY;
 8001a52:	ee78 8aea 	vsub.f32	s17, s17, s21
	for(uint16 y = 0; y < YC; y++)
 8001a56:	3401      	adds	r4, #1
 8001a58:	b2a4      	uxth	r4, r4
 8001a5a:	ee07 4a90 	vmov	s15, r4
 8001a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a62:	eef4 7aca 	vcmpe.f32	s15, s20
 8001a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6a:	d513      	bpl.n	8001a94 <Graph+0x1d0>
		if((uint16)YY >= Y1 && (uint16)YY <= Y1 + Tl)
 8001a6c:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 8001a70:	ee17 3a90 	vmov	r3, s15
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	42b3      	cmp	r3, r6
 8001a78:	d3e3      	bcc.n	8001a42 <Graph+0x17e>
 8001a7a:	eb06 020a 	add.w	r2, r6, sl
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	dcdf      	bgt.n	8001a42 <Graph+0x17e>
		    HLine(LinColor, X1+Tl, X2-Tl, Y1 + Tl, 1);
 8001a82:	2301      	movs	r3, #1
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	464b      	mov	r3, r9
 8001a88:	462a      	mov	r2, r5
 8001a8a:	4641      	mov	r1, r8
 8001a8c:	4638      	mov	r0, r7
 8001a8e:	f7ff f9e7 	bl	8000e60 <HLine>
 8001a92:	e7de      	b.n	8001a52 <Graph+0x18e>
	}
}
 8001a94:	b007      	add	sp, #28
 8001a96:	ecbd 8b08 	vpop	{d8-d11}
 8001a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001aa0 <GraphLine>:
void GraphLine(uint16 X1, uint16 X2, uint16 Y1, uint16 Y2, uint32 Color, uint8 Tl, uint32 StepX, uint32 StepY, uint32 XMax, uint32 XMin, int YMax, int YMin, int data[], uint32 Points, uint8 LineTl)
{
 8001aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001aa4:	ed2d 8b0a 	vpush	{d8-d12}
 8001aa8:	b089      	sub	sp, #36	; 0x24
 8001aaa:	4607      	mov	r7, r0
 8001aac:	9105      	str	r1, [sp, #20]
 8001aae:	4615      	mov	r5, r2
 8001ab0:	4699      	mov	r9, r3
 8001ab2:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8001ab6:	9304      	str	r3, [sp, #16]
 8001ab8:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8001aba:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 8001abe:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 8001ac2:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8001ac4:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 8001ac8:	9303      	str	r3, [sp, #12]
	uint16 Points_cnt = 0, Yctrl = 0;
	float LineX = 0, NextX = 0, LineY = 0, NextY = 0;
	float XC = 0, StX = 0, YY = 0, Ydif = 0, StY = 0, StartY = 0;
    uint8 owf_flag = 1;
	YY = Y2 - Y1;
 8001aca:	eba9 0302 	sub.w	r3, r9, r2
 8001ace:	ee08 3a90 	vmov	s17, r3
 8001ad2:	eef8 8ae8 	vcvt.f32.s32	s17, s17
	Ydif = YMax - YMin;
 8001ad6:	eba8 030a 	sub.w	r3, r8, sl
 8001ada:	ee08 3a10 	vmov	s16, r3
 8001ade:	eeb8 8ac8 	vcvt.f32.s32	s16, s16

	if((X2 - X1) >= (XMax - XMin))
 8001ae2:	1a0a      	subs	r2, r1, r0
 8001ae4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001ae6:	1b1b      	subs	r3, r3, r4
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d365      	bcc.n	8001bb8 <GraphLine+0x118>
	{
		XC = (float)XMax;
 8001aec:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8001af0:	eeb8 aa67 	vcvt.f32.u32	s20, s15
		StX = (float)(X2 - X1) / (float)(XMax - XMin) * 0.9902;
 8001af4:	ee07 2a90 	vmov	s15, r2
 8001af8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b04:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8001b08:	ee17 0a90 	vmov	r0, s15
 8001b0c:	f7fe fe0a 	bl	8000724 <__aeabi_f2d>
 8001b10:	a378      	add	r3, pc, #480	; (adr r3, 8001cf4 <GraphLine+0x254>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	f7fe fb77 	bl	8000208 <__aeabi_dmul>
 8001b1a:	f7fe fe5b 	bl	80007d4 <__aeabi_d2f>
 8001b1e:	ee0a 0a90 	vmov	s21, r0
	}

	LineX = (float)X1 + (float)Tl + (float)(LineTl - 1);
 8001b22:	ee07 7a90 	vmov	s15, r7
 8001b26:	eeb8 9a67 	vcvt.f32.u32	s18, s15
 8001b2a:	eddd 7a04 	vldr	s15, [sp, #16]
 8001b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b32:	ee39 7a26 	vadd.f32	s14, s18, s13
 8001b36:	9b03      	ldr	r3, [sp, #12]
 8001b38:	1e5a      	subs	r2, r3, #1
 8001b3a:	ee09 2a10 	vmov	s18, r2
 8001b3e:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8001b42:	ee37 9a09 	vadd.f32	s18, s14, s18
	NextX = LineX;
	StartY = (float)Y2 - (float)(Tl) - (float)LineTl;
 8001b46:	ee07 9a90 	vmov	s15, r9
 8001b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b4e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001b52:	ee07 3a10 	vmov	s14, r3
 8001b56:	eeb8 ba47 	vcvt.f32.u32	s22, s14
 8001b5a:	ee37 bacb 	vsub.f32	s22, s15, s22

	LineY = StartY - ((YY / Ydif * (float)data[XMin]) * 0.974);
 8001b5e:	eec8 ba88 	vdiv.f32	s23, s17, s16
 8001b62:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8001b66:	ee07 3a90 	vmov	s15, r3
 8001b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b6e:	ee6b 7aa7 	vmul.f32	s15, s23, s15
 8001b72:	ee17 0a90 	vmov	r0, s15
 8001b76:	f7fe fdd5 	bl	8000724 <__aeabi_f2d>
 8001b7a:	a35b      	add	r3, pc, #364	; (adr r3, 8001ce8 <GraphLine+0x248>)
 8001b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b80:	f7fe fb42 	bl	8000208 <__aeabi_dmul>
 8001b84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001b88:	ee1b 0a10 	vmov	r0, s22
 8001b8c:	f7fe fdca 	bl	8000724 <__aeabi_f2d>
 8001b90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001b94:	f7fe fc66 	bl	8000464 <__aeabi_dsub>
 8001b98:	f7fe fe1c 	bl	80007d4 <__aeabi_d2f>
 8001b9c:	ee09 0a90 	vmov	s19, r0

	Yctrl = LineY;

	if(Yctrl < (Y1 + Tl))
 8001ba0:	9b04      	ldr	r3, [sp, #16]
 8001ba2:	18eb      	adds	r3, r5, r3
 8001ba4:	ee0c 3a10 	vmov	s24, r3
		Yctrl = Y1 + Tl;
	}

	NextY = Yctrl;

	for(uint16 x = XMin; x < XC; x++)
 8001ba8:	b2a4      	uxth	r4, r4
	NextX = LineX;
 8001baa:	eeb0 8a49 	vmov.f32	s16, s18
    uint8 owf_flag = 1;
 8001bae:	f04f 0b01 	mov.w	fp, #1
	uint16 Points_cnt = 0, Yctrl = 0;
 8001bb2:	f04f 0900 	mov.w	r9, #0
	for(uint16 x = XMin; x < XC; x++)
 8001bb6:	e032      	b.n	8001c1e <GraphLine+0x17e>
	float XC = 0, StX = 0, YY = 0, Ydif = 0, StY = 0, StartY = 0;
 8001bb8:	eddf aa4d 	vldr	s21, [pc, #308]	; 8001cf0 <GraphLine+0x250>
 8001bbc:	eeb0 aa6a 	vmov.f32	s20, s21
 8001bc0:	e7af      	b.n	8001b22 <GraphLine+0x82>
			LineX = NextX;
			LineY = NextY;
	    }
		else
		{
			if(owf_flag == 0)
 8001bc2:	f1bb 0f00 	cmp.w	fp, #0
 8001bc6:	d005      	beq.n	8001bd4 <GraphLine+0x134>
				NextY = Y1 + Tl;
				Line((uint16)LineX, (uint16)LineY, (uint16)NextX, (uint16)NextY, Color, LineTl);
				owf_flag = 1;
			}

			if(data[x] > YMax)
 8001bc8:	59f3      	ldr	r3, [r6, r7]
 8001bca:	4543      	cmp	r3, r8
 8001bcc:	dd21      	ble.n	8001c12 <GraphLine+0x172>
			{
			    LineX = NextX;
			    LineY = Y1 + Tl;
 8001bce:	eef8 9acc 	vcvt.f32.s32	s19, s24
 8001bd2:	e020      	b.n	8001c16 <GraphLine+0x176>
				NextY = Y1 + Tl;
 8001bd4:	eef8 7acc 	vcvt.f32.s32	s15, s24
				Line((uint16)LineX, (uint16)LineY, (uint16)NextX, (uint16)NextY, Color, LineTl);
 8001bd8:	eebc 9ac9 	vcvt.u32.f32	s18, s18
 8001bdc:	eefc 9ae9 	vcvt.u32.f32	s19, s19
 8001be0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be4:	9b03      	ldr	r3, [sp, #12]
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	ee17 3a90 	vmov	r3, s15
 8001bf0:	b21b      	sxth	r3, r3
 8001bf2:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8001bf6:	ee17 2a90 	vmov	r2, s15
 8001bfa:	b212      	sxth	r2, r2
 8001bfc:	ee19 1a90 	vmov	r1, s19
 8001c00:	b209      	sxth	r1, r1
 8001c02:	ee19 0a10 	vmov	r0, s18
 8001c06:	b200      	sxth	r0, r0
 8001c08:	f7ff f988 	bl	8000f1c <Line>
				owf_flag = 1;
 8001c0c:	f04f 0b01 	mov.w	fp, #1
 8001c10:	e7da      	b.n	8001bc8 <GraphLine+0x128>
		    }
			else
			{
			    LineX = NextX;
			    LineY = StartY;
 8001c12:	eef0 9a4b 	vmov.f32	s19, s22
	for(uint16 x = XMin; x < XC; x++)
 8001c16:	3401      	adds	r4, #1
 8001c18:	b2a4      	uxth	r4, r4
 8001c1a:	eeb0 9a48 	vmov.f32	s18, s16
 8001c1e:	ee07 4a90 	vmov	s15, r4
 8001c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c26:	eef4 7aca 	vcmpe.f32	s15, s20
 8001c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2e:	d555      	bpl.n	8001cdc <GraphLine+0x23c>
		StY = (YY / Ydif * (float)data[x]) * 0.974; //расчет дисплейного Y, 0.974 - корректировка погрешности
 8001c30:	00a7      	lsls	r7, r4, #2
 8001c32:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8001c36:	ee07 5a90 	vmov	s15, r5
 8001c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3e:	ee6b 7aa7 	vmul.f32	s15, s23, s15
 8001c42:	ee17 0a90 	vmov	r0, s15
 8001c46:	f7fe fd6d 	bl	8000724 <__aeabi_f2d>
 8001c4a:	a327      	add	r3, pc, #156	; (adr r3, 8001ce8 <GraphLine+0x248>)
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	f7fe fada 	bl	8000208 <__aeabi_dmul>
 8001c54:	f7fe fdbe 	bl	80007d4 <__aeabi_d2f>
 8001c58:	ee07 0a90 	vmov	s15, r0
		NextX += StX;
 8001c5c:	ee38 8a2a 	vadd.f32	s16, s16, s21
		NextY = StartY - StY;
 8001c60:	ee7b 8a67 	vsub.f32	s17, s22, s15
		if((data[x] >= YMin) && (data[x] <= YMax))
 8001c64:	4555      	cmp	r5, sl
 8001c66:	dbac      	blt.n	8001bc2 <GraphLine+0x122>
 8001c68:	4545      	cmp	r5, r8
 8001c6a:	dcaa      	bgt.n	8001bc2 <GraphLine+0x122>
		    if(Points_cnt < Points)
 8001c6c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8001c6e:	4599      	cmp	r9, r3
 8001c70:	d22d      	bcs.n	8001cce <GraphLine+0x22e>
		    	if(NextX >= X2 - Tl)
 8001c72:	9b05      	ldr	r3, [sp, #20]
 8001c74:	9a04      	ldr	r2, [sp, #16]
 8001c76:	1a9a      	subs	r2, r3, r2
 8001c78:	ee07 2a90 	vmov	s15, r2
 8001c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c80:	eef4 7ac8 	vcmpe.f32	s15, s16
 8001c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c88:	d805      	bhi.n	8001c96 <GraphLine+0x1f6>
		    	{NextX = X2 - LineTl;}
 8001c8a:	9a03      	ldr	r2, [sp, #12]
 8001c8c:	1a9b      	subs	r3, r3, r2
 8001c8e:	ee08 3a10 	vmov	s16, r3
 8001c92:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
		        Line((uint16)LineX, (uint16)LineY, (uint16)NextX, (uint16)NextY, Color, LineTl);
 8001c96:	eebc 9ac9 	vcvt.u32.f32	s18, s18
 8001c9a:	eefc 9ae9 	vcvt.u32.f32	s19, s19
 8001c9e:	9b03      	ldr	r3, [sp, #12]
 8001ca0:	9301      	str	r3, [sp, #4]
 8001ca2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 8001caa:	ee17 3a90 	vmov	r3, s15
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8001cb4:	ee17 2a90 	vmov	r2, s15
 8001cb8:	b212      	sxth	r2, r2
 8001cba:	ee19 1a90 	vmov	r1, s19
 8001cbe:	b209      	sxth	r1, r1
 8001cc0:	ee19 0a10 	vmov	r0, s18
 8001cc4:	b200      	sxth	r0, r0
 8001cc6:	f7ff f929 	bl	8000f1c <Line>
		        owf_flag = 0;
 8001cca:	f04f 0b00 	mov.w	fp, #0
		    Points_cnt++;
 8001cce:	f109 0901 	add.w	r9, r9, #1
 8001cd2:	fa1f f989 	uxth.w	r9, r9
			LineY = NextY;
 8001cd6:	eef0 9a68 	vmov.f32	s19, s17
 8001cda:	e79c      	b.n	8001c16 <GraphLine+0x176>
	//Line(50, 40, 150, 140, green | 0xff000000, 2);
	//Line(150, 150, 50, 50, green | 0xff000000, 2);

	//Line(160, 140, 260, 40, green | 0xff000000, 2);
	//Line(270, 40, 170, 140, green | 0xff000000, 2);
}
 8001cdc:	b009      	add	sp, #36	; 0x24
 8001cde:	ecbd 8b0a 	vpop	{d8-d12}
 8001ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ce6:	bf00      	nop
 8001ce8:	0c49ba5e 	.word	0x0c49ba5e
 8001cec:	3fef2b02 	.word	0x3fef2b02
 8001cf0:	00000000 	.word	0x00000000
 8001cf4:	e90ff972 	.word	0xe90ff972
 8001cf8:	3fefafb7 	.word	0x3fefafb7

08001cfc <LCD_Fill_Rectangle>:


//для внешнего пользования(прикладных программ) Обработка касаний, координатных штучек

void LCD_Fill_Rectangle(D_Fill_Rectangle *FR)
{
 8001cfc:	b500      	push	{lr}
 8001cfe:	b083      	sub	sp, #12
    Fill_Rectangle(FR->Color, FR->X1, FR->X2, FR->Y1, FR->Y2);
 8001d00:	6903      	ldr	r3, [r0, #16]
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	68c3      	ldr	r3, [r0, #12]
 8001d06:	6882      	ldr	r2, [r0, #8]
 8001d08:	6841      	ldr	r1, [r0, #4]
 8001d0a:	6800      	ldr	r0, [r0, #0]
 8001d0c:	f7ff f84a 	bl	8000da4 <Fill_Rectangle>
}
 8001d10:	b003      	add	sp, #12
 8001d12:	f85d fb04 	ldr.w	pc, [sp], #4

08001d16 <LCD_HLine>:
void LCD_HLine(D_HLine *hline)
{
 8001d16:	b500      	push	{lr}
 8001d18:	b083      	sub	sp, #12
	HLine(hline->Color, hline->X1, hline->X2, hline->Y1, hline->Thickness);
 8001d1a:	7c03      	ldrb	r3, [r0, #16]
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8001d22:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8001d26:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8001d2a:	6800      	ldr	r0, [r0, #0]
 8001d2c:	f7ff f898 	bl	8000e60 <HLine>
}
 8001d30:	b003      	add	sp, #12
 8001d32:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001d38 <LCD_FramePanel>:
void LCD_VLine(D_VLine *vline)
{
	VLine(vline->Color, vline->X1, vline->Y1, vline->Y2, vline->Thickness);
}
uint8 LCD_FramePanel(D_FramePanel *framePanel)
{
 8001d38:	b530      	push	{r4, r5, lr}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	4604      	mov	r4, r0
	uint8 TouchDet = GetCursorPosition();
 8001d3e:	f000 f97b 	bl	8002038 <GetCursorPosition>
 8001d42:	4605      	mov	r5, r0
	FramePanel(framePanel->FrameColor, framePanel->FillColor, framePanel->X1, framePanel->X2, framePanel->Y1, framePanel->Y2, framePanel->Thickness);
 8001d44:	7e23      	ldrb	r3, [r4, #24]
 8001d46:	9302      	str	r3, [sp, #8]
 8001d48:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8001d4c:	9301      	str	r3, [sp, #4]
 8001d4e:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d58:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8001d5c:	6861      	ldr	r1, [r4, #4]
 8001d5e:	6820      	ldr	r0, [r4, #0]
 8001d60:	f7ff f89b 	bl	8000e9a <FramePanel>
	if(CrPosX1 >= framePanel->X1 && CrPosX1 <= framePanel->X2 && CrPosY1 >= framePanel->Y1 && CrPosY1 <= framePanel->Y2 && TouchDet == Clicked)
 8001d64:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <LCD_FramePanel+0x8c>)
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	68a2      	ldr	r2, [r4, #8]
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d30c      	bcc.n	8001d88 <LCD_FramePanel+0x50>
 8001d6e:	68e1      	ldr	r1, [r4, #12]
 8001d70:	428b      	cmp	r3, r1
 8001d72:	d809      	bhi.n	8001d88 <LCD_FramePanel+0x50>
 8001d74:	4914      	ldr	r1, [pc, #80]	; (8001dc8 <LCD_FramePanel+0x90>)
 8001d76:	8809      	ldrh	r1, [r1, #0]
 8001d78:	6920      	ldr	r0, [r4, #16]
 8001d7a:	4281      	cmp	r1, r0
 8001d7c:	d304      	bcc.n	8001d88 <LCD_FramePanel+0x50>
 8001d7e:	6960      	ldr	r0, [r4, #20]
 8001d80:	4281      	cmp	r1, r0
 8001d82:	d801      	bhi.n	8001d88 <LCD_FramePanel+0x50>
 8001d84:	2d01      	cmp	r5, #1
 8001d86:	d014      	beq.n	8001db2 <LCD_FramePanel+0x7a>
		framePanel->Is_pressed = Clicked;
	 	return Clicked;
	}
	else
	{
		if(TouchDet == NotClicked)
 8001d88:	b9b5      	cbnz	r5, 8001db8 <LCD_FramePanel+0x80>
		{
		    if(CrPosX1 >= framePanel->X1 && CrPosX1 <= framePanel->X2 && CrPosY1 >= framePanel->Y1 && CrPosY1 <= framePanel->Y2 && TouchDet == NotClicked)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d316      	bcc.n	8001dbc <LCD_FramePanel+0x84>
 8001d8e:	68e2      	ldr	r2, [r4, #12]
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d813      	bhi.n	8001dbc <LCD_FramePanel+0x84>
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <LCD_FramePanel+0x90>)
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	6922      	ldr	r2, [r4, #16]
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d30e      	bcc.n	8001dbc <LCD_FramePanel+0x84>
 8001d9e:	6962      	ldr	r2, [r4, #20]
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d80b      	bhi.n	8001dbc <LCD_FramePanel+0x84>
		    {
		    	if(framePanel->Is_pressed == Clicked)
 8001da4:	7e63      	ldrb	r3, [r4, #25]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d108      	bne.n	8001dbc <LCD_FramePanel+0x84>
		    	{
		    		framePanel->Is_pressed = NotClicked;
 8001daa:	2300      	movs	r3, #0
 8001dac:	7663      	strb	r3, [r4, #25]
			        return Unclicked;
 8001dae:	2502      	movs	r5, #2
 8001db0:	e004      	b.n	8001dbc <LCD_FramePanel+0x84>
		framePanel->Is_pressed = Clicked;
 8001db2:	2301      	movs	r3, #1
 8001db4:	7663      	strb	r3, [r4, #25]
	 	return Clicked;
 8001db6:	e001      	b.n	8001dbc <LCD_FramePanel+0x84>
		    	}
		    }
	    }
		else
		{
			framePanel->Is_pressed = NotClicked;
 8001db8:	2500      	movs	r5, #0
 8001dba:	7665      	strb	r5, [r4, #25]
			return NotClicked;
		}
	}
	return NotClicked;
}
 8001dbc:	4628      	mov	r0, r5
 8001dbe:	b005      	add	sp, #20
 8001dc0:	bd30      	pop	{r4, r5, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2000002e 	.word	0x2000002e
 8001dc8:	20000030 	.word	0x20000030

08001dcc <LCD_Circle>:
void LCD_Circle(D_Circle *circle)
{
 8001dcc:	b500      	push	{lr}
 8001dce:	b083      	sub	sp, #12
	Circle(circle->X1, circle->Y1, circle->R, circle->Color, circle->Thickness);
 8001dd0:	8a03      	ldrh	r3, [r0, #16]
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	68c3      	ldr	r3, [r0, #12]
 8001dd6:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8001dda:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8001dde:	f9b0 0000 	ldrsh.w	r0, [r0]
 8001de2:	f7ff f9d7 	bl	8001194 <Circle>
}
 8001de6:	b003      	add	sp, #12
 8001de8:	f85d fb04 	ldr.w	pc, [sp], #4

08001dec <LCD_FillCircle>:
void LCD_Line(D_Line *line)
{
    Line(line->X1, line->Y1, line->X2, line->Y2, line->Color, line->Thickness);
}
void LCD_FillCircle(D_FillCircle *fillCircle)
{
 8001dec:	b508      	push	{r3, lr}
	FillCircle(fillCircle->X1, fillCircle->Y1, fillCircle->R, fillCircle->Color);
 8001dee:	68c3      	ldr	r3, [r0, #12]
 8001df0:	8902      	ldrh	r2, [r0, #8]
 8001df2:	8881      	ldrh	r1, [r0, #4]
 8001df4:	8800      	ldrh	r0, [r0, #0]
 8001df6:	f7ff fa28 	bl	800124a <FillCircle>
}
 8001dfa:	bd08      	pop	{r3, pc}

08001dfc <LCD_HGradient>:
//		}
//	}
	return NotClicked;
}
uint8 LCD_HGradient(D_HGradient *HGradient)
{
 8001dfc:	b500      	push	{lr}
 8001dfe:	b083      	sub	sp, #12
//	uint8 TouchDet = GetCursorPosition();
	HGradA(HGradient->X1, HGradient->X2, HGradient->Y1, HGradient->Y2, HGradient->ColorH, HGradient->ColorL);
 8001e00:	6903      	ldr	r3, [r0, #16]
 8001e02:	6942      	ldr	r2, [r0, #20]
 8001e04:	9201      	str	r2, [sp, #4]
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8001e0c:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8001e10:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8001e14:	f9b0 0000 	ldrsh.w	r0, [r0]
 8001e18:	f7ff fa2c 	bl	8001274 <HGradA>
//		{
//			return NotClicked;
//		}
//	}
	return NotClicked;
}
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	b003      	add	sp, #12
 8001e20:	f85d fb04 	ldr.w	pc, [sp], #4

08001e24 <LCD_Form>:
void LCD_Label(D_Label *label, char Text[])
{
    Label(label->X, label->Y, label->Color, Text);
}
uint8 LCD_Form(D_Form *form, char Text[])
{
 8001e24:	b500      	push	{lr}
 8001e26:	b089      	sub	sp, #36	; 0x24
	//uint8 TouchDet = GetCursorPosition();
	Form(form->X1, form->X2, form->Y1, form->Y2, form->YBar, form->Thickness, form->FrameColor, form->BarColor, form->WindowColor, form->TextColor, Text);
 8001e28:	9106      	str	r1, [sp, #24]
 8001e2a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e2c:	9305      	str	r3, [sp, #20]
 8001e2e:	6a03      	ldr	r3, [r0, #32]
 8001e30:	9304      	str	r3, [sp, #16]
 8001e32:	69c3      	ldr	r3, [r0, #28]
 8001e34:	9303      	str	r3, [sp, #12]
 8001e36:	6983      	ldr	r3, [r0, #24]
 8001e38:	9302      	str	r3, [sp, #8]
 8001e3a:	7d03      	ldrb	r3, [r0, #20]
 8001e3c:	9301      	str	r3, [sp, #4]
 8001e3e:	8a03      	ldrh	r3, [r0, #16]
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	8983      	ldrh	r3, [r0, #12]
 8001e44:	8902      	ldrh	r2, [r0, #8]
 8001e46:	8881      	ldrh	r1, [r0, #4]
 8001e48:	8800      	ldrh	r0, [r0, #0]
 8001e4a:	f7ff fc65 	bl	8001718 <Form>
//			form->Is_pressed = NotClicked;
//			return NotClicked;
//		}
//	}
	return NotClicked;
}
 8001e4e:	2000      	movs	r0, #0
 8001e50:	b009      	add	sp, #36	; 0x24
 8001e52:	f85d fb04 	ldr.w	pc, [sp], #4

08001e56 <LCD_CheckBox>:
//	}
	return NotClicked;

}
uint8 LCD_CheckBox(D_CheckBox *ctrl, char Name[])
{
 8001e56:	b500      	push	{lr}
 8001e58:	b087      	sub	sp, #28
//	uint8 TouchDet = GetCursorPosition();

	CheckBox(ctrl->X1, ctrl->X2, ctrl->Y1, ctrl->Y2, ctrl->FrameColor, ctrl->BackColor, ctrl->CheckColor, ctrl->Checked, ctrl->TextColor, Name);
 8001e5a:	7f03      	ldrb	r3, [r0, #28]
 8001e5c:	9105      	str	r1, [sp, #20]
 8001e5e:	6a02      	ldr	r2, [r0, #32]
 8001e60:	9204      	str	r2, [sp, #16]
 8001e62:	9303      	str	r3, [sp, #12]
 8001e64:	6983      	ldr	r3, [r0, #24]
 8001e66:	9302      	str	r3, [sp, #8]
 8001e68:	6943      	ldr	r3, [r0, #20]
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	6903      	ldr	r3, [r0, #16]
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8001e74:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8001e78:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8001e7c:	f9b0 0000 	ldrsh.w	r0, [r0]
 8001e80:	f7ff fcb2 	bl	80017e8 <CheckBox>
		{
			return NotClicked;
		}
	}*/
	return NotClicked;
}
 8001e84:	2000      	movs	r0, #0
 8001e86:	b007      	add	sp, #28
 8001e88:	f85d fb04 	ldr.w	pc, [sp], #4

08001e8c <LCD_RadioButton>:
uint8 LCD_RadioButton(D_RadioButton *RadioButton, char Name[])
{
 8001e8c:	b530      	push	{r4, r5, lr}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	4604      	mov	r4, r0
 8001e92:	460d      	mov	r5, r1
//	uint8 TouchDet = GetCursorPosition();
	Radiobutton(RadioButton->X, RadioButton->Y, RadioButton->Radius, RadioButton->ExCirColor, RadioButton->InCirColor, RadioButton->BackColor,
			RadioButton->Transp_key, RadioButton->Checked);
 8001e94:	7f03      	ldrb	r3, [r0, #28]
	Radiobutton(RadioButton->X, RadioButton->Y, RadioButton->Radius, RadioButton->ExCirColor, RadioButton->InCirColor, RadioButton->BackColor,
 8001e96:	7f42      	ldrb	r2, [r0, #29]
 8001e98:	9203      	str	r2, [sp, #12]
 8001e9a:	9302      	str	r3, [sp, #8]
 8001e9c:	6943      	ldr	r3, [r0, #20]
 8001e9e:	9301      	str	r3, [sp, #4]
 8001ea0:	6903      	ldr	r3, [r0, #16]
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	68c3      	ldr	r3, [r0, #12]
 8001ea6:	8902      	ldrh	r2, [r0, #8]
 8001ea8:	8881      	ldrh	r1, [r0, #4]
 8001eaa:	8800      	ldrh	r0, [r0, #0]
 8001eac:	f7ff fce9 	bl	8001882 <Radiobutton>
	Label(RadioButton->X + RadioButton->Radius + 6, RadioButton->Y - (RadioButton->Radius * 2), RadioButton->TextColor, Name);
 8001eb0:	6820      	ldr	r0, [r4, #0]
 8001eb2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8001eb6:	4460      	add	r0, ip
 8001eb8:	b280      	uxth	r0, r0
 8001eba:	6862      	ldr	r2, [r4, #4]
 8001ebc:	eba2 0c4c 	sub.w	ip, r2, ip, lsl #1
 8001ec0:	3006      	adds	r0, #6
 8001ec2:	462b      	mov	r3, r5
 8001ec4:	69a2      	ldr	r2, [r4, #24]
 8001ec6:	fa1f f18c 	uxth.w	r1, ip
 8001eca:	b280      	uxth	r0, r0
 8001ecc:	f7ff fbe2 	bl	8001694 <Label>
//		{
//			return NotClicked;
//		}
//	}
	return NotClicked;
}
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	b005      	add	sp, #20
 8001ed4:	bd30      	pop	{r4, r5, pc}

08001ed6 <LCD_Graph>:
void LCD_Graph(D_Graph *Gr)
{
	if(Gr->Unvisible == 0)
 8001ed6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001eda:	b103      	cbz	r3, 8001ede <LCD_Graph+0x8>
 8001edc:	4770      	bx	lr
{
 8001ede:	b510      	push	{r4, lr}
 8001ee0:	b08a      	sub	sp, #40	; 0x28
	{
	   Graph(Gr->X1, Gr->X2, Gr->Y1, Gr->Y2, Gr->FillColor, Gr->FrameColor, Gr->Thickness, Gr->LinesColor, Gr->StepX, Gr->StepY, Gr->XMax, Gr->XMin, Gr->YMax, Gr->YMin);
 8001ee2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001ee4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001ee6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001ee8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001eea:	9409      	str	r4, [sp, #36]	; 0x24
 8001eec:	9108      	str	r1, [sp, #32]
 8001eee:	9207      	str	r2, [sp, #28]
 8001ef0:	9306      	str	r3, [sp, #24]
 8001ef2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ef4:	9305      	str	r3, [sp, #20]
 8001ef6:	6a03      	ldr	r3, [r0, #32]
 8001ef8:	9304      	str	r3, [sp, #16]
 8001efa:	69c3      	ldr	r3, [r0, #28]
 8001efc:	9303      	str	r3, [sp, #12]
 8001efe:	7e03      	ldrb	r3, [r0, #24]
 8001f00:	9302      	str	r3, [sp, #8]
 8001f02:	6943      	ldr	r3, [r0, #20]
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	6903      	ldr	r3, [r0, #16]
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	8983      	ldrh	r3, [r0, #12]
 8001f0c:	8902      	ldrh	r2, [r0, #8]
 8001f0e:	8881      	ldrh	r1, [r0, #4]
 8001f10:	8800      	ldrh	r0, [r0, #0]
 8001f12:	f7ff fcd7 	bl	80018c4 <Graph>
	}
}
 8001f16:	b00a      	add	sp, #40	; 0x28
 8001f18:	bd10      	pop	{r4, pc}

08001f1a <LCD_GraphLine>:
void LCD_GraphLine(D_Graph *Gr, D_GraphLine *GrL, int data[])
{
	if(GrL->Unvisible == 0)
 8001f1a:	7a4b      	ldrb	r3, [r1, #9]
 8001f1c:	b103      	cbz	r3, 8001f20 <LCD_GraphLine+0x6>
 8001f1e:	4770      	bx	lr
{
 8001f20:	b510      	push	{r4, lr}
 8001f22:	b08c      	sub	sp, #48	; 0x30
	{
	   GraphLine(Gr->X1, Gr->X2, Gr->Y1, Gr->Y2, GrL->LineColor, Gr->Thickness, Gr->StepX, Gr->StepY, Gr->XMax, Gr->XMin, Gr->YMax, Gr->YMin, data, GrL->Points_count, GrL->Thickness);
 8001f24:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001f26:	7a0c      	ldrb	r4, [r1, #8]
 8001f28:	940a      	str	r4, [sp, #40]	; 0x28
 8001f2a:	680c      	ldr	r4, [r1, #0]
 8001f2c:	9409      	str	r4, [sp, #36]	; 0x24
 8001f2e:	9208      	str	r2, [sp, #32]
 8001f30:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001f32:	9207      	str	r2, [sp, #28]
 8001f34:	9306      	str	r3, [sp, #24]
 8001f36:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001f38:	9305      	str	r3, [sp, #20]
 8001f3a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001f3c:	9304      	str	r3, [sp, #16]
 8001f3e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f40:	9303      	str	r3, [sp, #12]
 8001f42:	6a03      	ldr	r3, [r0, #32]
 8001f44:	9302      	str	r3, [sp, #8]
 8001f46:	7e03      	ldrb	r3, [r0, #24]
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	684b      	ldr	r3, [r1, #4]
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	8983      	ldrh	r3, [r0, #12]
 8001f50:	8902      	ldrh	r2, [r0, #8]
 8001f52:	8881      	ldrh	r1, [r0, #4]
 8001f54:	8800      	ldrh	r0, [r0, #0]
 8001f56:	f7ff fda3 	bl	8001aa0 <GraphLine>
	}
}
 8001f5a:	b00c      	add	sp, #48	; 0x30
 8001f5c:	bd10      	pop	{r4, pc}
	...

08001f60 <TS_IO_Read>:
extern I2C_HandleTypeDef hi2c3;
static ft5336_handle_TypeDef ft5336_handle = {FT5336_I2C_NOT_INITIALIZED, 0, 0};
static uint8_t tsOrientation;

uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001f60:	b500      	push	{lr}
 8001f62:	b087      	sub	sp, #28
 8001f64:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f88d 3017 	strb.w	r3, [sp, #23]
  HAL_I2C_Mem_Read(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &read_value, 1, 0x1000);
 8001f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f70:	9302      	str	r3, [sp, #8]
 8001f72:	2301      	movs	r3, #1
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	f10d 0117 	add.w	r1, sp, #23
 8001f7a:	9100      	str	r1, [sp, #0]
 8001f7c:	4601      	mov	r1, r0
 8001f7e:	4804      	ldr	r0, [pc, #16]	; (8001f90 <TS_IO_Read+0x30>)
 8001f80:	f001 ff18 	bl	8003db4 <HAL_I2C_Mem_Read>
  return read_value;
}
 8001f84:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001f88:	b007      	add	sp, #28
 8001f8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f8e:	bf00      	nop
 8001f90:	2003fc90 	.word	0x2003fc90

08001f94 <TS_IO_Write>:
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001f94:	b500      	push	{lr}
 8001f96:	b087      	sub	sp, #28
 8001f98:	f88d 2017 	strb.w	r2, [sp, #23]
  HAL_StatusTypeDef status = HAL_OK;
  HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x1000);
 8001f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa0:	9302      	str	r3, [sp, #8]
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	f10d 0217 	add.w	r2, sp, #23
 8001faa:	9200      	str	r2, [sp, #0]
 8001fac:	460a      	mov	r2, r1
 8001fae:	4601      	mov	r1, r0
 8001fb0:	4802      	ldr	r0, [pc, #8]	; (8001fbc <TS_IO_Write+0x28>)
 8001fb2:	f001 fe29 	bl	8003c08 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
  {}
}
 8001fb6:	b007      	add	sp, #28
 8001fb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fbc:	2003fc90 	.word	0x2003fc90

08001fc0 <Touch_ReadID>:
	ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
	* pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
  }
}
uint16_t Touch_ReadID(uint16_t DeviceAddr)
{
 8001fc0:	b570      	push	{r4, r5, r6, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	4606      	mov	r6, r0
  volatile uint8_t ucReadId = 0;
 8001fc6:	2400      	movs	r4, #0
 8001fc8:	f88d 4007 	strb.w	r4, [sp, #7]
  uint8_t nbReadAttempts = 0;
  int8_t bFoundDevice = 0;
 8001fcc:	4625      	mov	r5, r4
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001fce:	e001      	b.n	8001fd4 <Touch_ReadID+0x14>
 8001fd0:	3401      	adds	r4, #1
 8001fd2:	b2e4      	uxtb	r4, r4
 8001fd4:	f085 0301 	eor.w	r3, r5, #1
 8001fd8:	2c02      	cmp	r4, #2
 8001fda:	bf8c      	ite	hi
 8001fdc:	2300      	movhi	r3, #0
 8001fde:	f003 0301 	andls.w	r3, r3, #1
 8001fe2:	b163      	cbz	r3, 8001ffe <Touch_ReadID+0x3e>
  {
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8001fe4:	21a8      	movs	r1, #168	; 0xa8
 8001fe6:	b2f0      	uxtb	r0, r6
 8001fe8:	f7ff ffba 	bl	8001f60 <TS_IO_Read>
 8001fec:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 8001ff0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b51      	cmp	r3, #81	; 0x51
 8001ff8:	d1ea      	bne.n	8001fd0 <Touch_ReadID+0x10>
    {
      bFoundDevice = 1;
 8001ffa:	2501      	movs	r5, #1
 8001ffc:	e7e8      	b.n	8001fd0 <Touch_ReadID+0x10>
    }
  }
  return (ucReadId);
 8001ffe:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8002002:	b002      	add	sp, #8
 8002004:	bd70      	pop	{r4, r5, r6, pc}
	...

08002008 <Touch_Init>:
  return (ts_status);
}


void Touch_Init(void)
{
 8002008:	b508      	push	{r3, lr}
  uint8_t regValue = 0;
  HAL_Delay(200);
 800200a:	20c8      	movs	r0, #200	; 0xc8
 800200c:	f001 f94e 	bl	80032ac <HAL_Delay>
  if(Touch_ReadID(TS_I2C_ADDRESS) != FT5336_ID_VALUE)
 8002010:	2070      	movs	r0, #112	; 0x70
 8002012:	f7ff ffd5 	bl	8001fc0 <Touch_ReadID>
  {}
  tsOrientation = TS_SWAP_XY;
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <Touch_Init+0x28>)
 8002018:	2208      	movs	r2, #8
 800201a:	701a      	strb	r2, [r3, #0]

  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
  TS_IO_Write(TS_I2C_ADDRESS, FT5336_GMODE_REG, regValue);
 800201c:	2200      	movs	r2, #0
 800201e:	21a4      	movs	r1, #164	; 0xa4
 8002020:	2070      	movs	r0, #112	; 0x70
 8002022:	f7ff ffb7 	bl	8001f94 <TS_IO_Write>
  ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8002026:	4b03      	ldr	r3, [pc, #12]	; (8002034 <Touch_Init+0x2c>)
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
}
 800202c:	bd08      	pop	{r3, pc}
 800202e:	bf00      	nop
 8002030:	2000003f 	.word	0x2000003f
 8002034:	2000003c 	.word	0x2000003c

08002038 <GetCursorPosition>:
uint8 GetCursorPosition()
{

	return 0;
}
 8002038:	2000      	movs	r0, #0
 800203a:	4770      	bx	lr

0800203c <MainFunc>:
short unsigned int RGB[272*480]; //Резервируем память для буффера дисплея
DisplayConfig ds;                //Основные параметры библиотеки


void MainFunc ()
{
 800203c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002040:	f5ad 7d65 	sub.w	sp, sp, #916	; 0x394
	ds.Color_Type = Color565; //Бит на пиксель
 8002044:	4ec2      	ldr	r6, [pc, #776]	; (8002350 <MainFunc+0x314>)
 8002046:	2400      	movs	r4, #0
 8002048:	7334      	strb	r4, [r6, #12]
	ds.Display_Height = 272;
 800204a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800204e:	6073      	str	r3, [r6, #4]
	ds.Display_Width = 480;
 8002050:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002054:	60b3      	str	r3, [r6, #8]
	ds.Layers = 1;            //Количество слоев
 8002056:	2501      	movs	r5, #1
 8002058:	7375      	strb	r5, [r6, #13]
	ds.Start_RAM_Address = (uint32_t)&RGB; //Адрес начала кадрового буффера
 800205a:	49be      	ldr	r1, [pc, #760]	; (8002354 <MainFunc+0x318>)
 800205c:	6031      	str	r1, [r6, #0]

	HAL_LTDC_SetAddress(&hltdc,(uint32_t)&RGB,0);  // запускаем модуль LTDC (железный)
 800205e:	4622      	mov	r2, r4
 8002060:	48bd      	ldr	r0, [pc, #756]	; (8002358 <MainFunc+0x31c>)
 8002062:	f002 f9d3 	bl	800440c <HAL_LTDC_SetAddress>
	Graphics_Init(&ds); //инит библиотеки (из структуры ds)
 8002066:	4630      	mov	r0, r6
 8002068:	f7fe fe1a 	bl	8000ca0 <Graphics_Init>
    D_Graph gr;
    D_GraphLine grL;
    D_RichTextBox RTB;


	kv.X1 = 200;
 800206c:	23c8      	movs	r3, #200	; 0xc8
 800206e:	93e0      	str	r3, [sp, #896]	; 0x380
	kv.X2 = 400;
 8002070:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002074:	93e1      	str	r3, [sp, #900]	; 0x384
	kv.Y1 = 30;
 8002076:	201e      	movs	r0, #30
 8002078:	90e2      	str	r0, [sp, #904]	; 0x388
	kv.Y2 = 230;
 800207a:	23e6      	movs	r3, #230	; 0xe6
 800207c:	93e3      	str	r3, [sp, #908]	; 0x38c
	kv.Color = green;
 800207e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002082:	91df      	str	r1, [sp, #892]	; 0x37c

	pan.FrameColor = blue;
 8002084:	23ff      	movs	r3, #255	; 0xff
 8002086:	93d8      	str	r3, [sp, #864]	; 0x360
	pan.FillColor = yellow;
 8002088:	f8df e2d0 	ldr.w	lr, [pc, #720]	; 800235c <MainFunc+0x320>
 800208c:	f8cd e364 	str.w	lr, [sp, #868]	; 0x364
	pan.Thickness = 2;
 8002090:	2602      	movs	r6, #2
 8002092:	f88d 6378 	strb.w	r6, [sp, #888]	; 0x378
	pan.X1 = 1;
 8002096:	95da      	str	r5, [sp, #872]	; 0x368
	pan.X2 = 480;
 8002098:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800209c:	92db      	str	r2, [sp, #876]	; 0x36c
	pan.Y1 = 1;
 800209e:	95dc      	str	r5, [sp, #880]	; 0x370
	pan.Y2 = 272;
 80020a0:	f44f 7288 	mov.w	r2, #272	; 0x110
 80020a4:	92dd      	str	r2, [sp, #884]	; 0x374

	rec.X1 = 50;
 80020a6:	2232      	movs	r2, #50	; 0x32
 80020a8:	92d4      	str	r2, [sp, #848]	; 0x350
	rec.X2 = 480;
 80020aa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80020ae:	92d5      	str	r2, [sp, #852]	; 0x354
	rec.Y1 = 50;
 80020b0:	2232      	movs	r2, #50	; 0x32
 80020b2:	92d6      	str	r2, [sp, #856]	; 0x358
	rec.Y2 = 270;
 80020b4:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80020b8:	92d7      	str	r2, [sp, #860]	; 0x35c
	rec.Color = red;
 80020ba:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80020be:	92d3      	str	r2, [sp, #844]	; 0x34c

	line.X1 = 100;
 80020c0:	2764      	movs	r7, #100	; 0x64
 80020c2:	97cf      	str	r7, [sp, #828]	; 0x33c
	line.X2 = 450;
 80020c4:	f44f 77e1 	mov.w	r7, #450	; 0x1c2
 80020c8:	97d0      	str	r7, [sp, #832]	; 0x340
	line.Y1 = 200;
 80020ca:	27c8      	movs	r7, #200	; 0xc8
 80020cc:	97d1      	str	r7, [sp, #836]	; 0x344
	line.Color = blue;
 80020ce:	93ce      	str	r3, [sp, #824]	; 0x338
	line.Thickness = 5;
 80020d0:	f04f 0705 	mov.w	r7, #5
 80020d4:	f88d 7348 	strb.w	r7, [sp, #840]	; 0x348

	ball.X1 = 200;
 80020d8:	27c8      	movs	r7, #200	; 0xc8
 80020da:	97c9      	str	r7, [sp, #804]	; 0x324
	ball.Y1 = 125;
 80020dc:	277d      	movs	r7, #125	; 0x7d
 80020de:	97ca      	str	r7, [sp, #808]	; 0x328
	ball.Color = green;
 80020e0:	91cc      	str	r1, [sp, #816]	; 0x330
	ball.R = 40;
 80020e2:	2728      	movs	r7, #40	; 0x28
 80020e4:	97cb      	str	r7, [sp, #812]	; 0x32c

	p.X1 = 200;
 80020e6:	27c8      	movs	r7, #200	; 0xc8
 80020e8:	97be      	str	r7, [sp, #760]	; 0x2f8
	p.X2 = 400;
 80020ea:	f44f 77c8 	mov.w	r7, #400	; 0x190
 80020ee:	97bf      	str	r7, [sp, #764]	; 0x2fc
	p.Y1 = 30;
 80020f0:	90c0      	str	r0, [sp, #768]	; 0x300
	p.Y2 = 40;
 80020f2:	2728      	movs	r7, #40	; 0x28
 80020f4:	97c1      	str	r7, [sp, #772]	; 0x304
	p.StartValue = 0;
 80020f6:	94c2      	str	r4, [sp, #776]	; 0x308
	p.StopValue = 10;
 80020f8:	270a      	movs	r7, #10
 80020fa:	97c3      	str	r7, [sp, #780]	; 0x30c
	p.CurrentValue = 6;
 80020fc:	2706      	movs	r7, #6
 80020fe:	97c4      	str	r7, [sp, #784]	; 0x310
	p.Thickness = 3;
 8002100:	f04f 0a03 	mov.w	sl, #3
 8002104:	f88d a320 	strb.w	sl, [sp, #800]	; 0x320
	p.FillColor = black;
 8002108:	94c6      	str	r4, [sp, #792]	; 0x318
	p.FrameColor = blue;
 800210a:	93c5      	str	r3, [sp, #788]	; 0x314
	p.BarColor = red;
 800210c:	92c7      	str	r2, [sp, #796]	; 0x31c
	p.Orientation = Horisontal;
 800210e:	f88d a321 	strb.w	sl, [sp, #801]	; 0x321

	pa.X1 = 30;
 8002112:	90b3      	str	r0, [sp, #716]	; 0x2cc
	pa.X2 = 50;
 8002114:	2732      	movs	r7, #50	; 0x32
 8002116:	97b4      	str	r7, [sp, #720]	; 0x2d0
	pa.Y1 = 30;
 8002118:	90b5      	str	r0, [sp, #724]	; 0x2d4
	pa.Y2 = 262;
 800211a:	f44f 7c83 	mov.w	ip, #262	; 0x106
 800211e:	f8cd c2d8 	str.w	ip, [sp, #728]	; 0x2d8
	pa.StartValue = 0;
 8002122:	94b7      	str	r4, [sp, #732]	; 0x2dc
	pa.StopValue = 10;
 8002124:	200a      	movs	r0, #10
 8002126:	90b8      	str	r0, [sp, #736]	; 0x2e0
	pa.CurrentValue = 6;
 8002128:	2006      	movs	r0, #6
 800212a:	90b9      	str	r0, [sp, #740]	; 0x2e4
	pa.Thickness = 3;
 800212c:	f88d a2f4 	strb.w	sl, [sp, #756]	; 0x2f4
	pa.FillColor = black;
 8002130:	94bb      	str	r4, [sp, #748]	; 0x2ec
	pa.FrameColor = blue;
 8002132:	93ba      	str	r3, [sp, #744]	; 0x2e8
	pa.BarColor = red;
 8002134:	92bc      	str	r2, [sp, #752]	; 0x2f0
	pa.Orientation = Vertical;
 8002136:	f04f 0804 	mov.w	r8, #4
 800213a:	f88d 82f5 	strb.w	r8, [sp, #757]	; 0x2f5

	round.X1 = 100;
 800213e:	2064      	movs	r0, #100	; 0x64
 8002140:	90ad      	str	r0, [sp, #692]	; 0x2b4
	round.Y1 = 120;
 8002142:	2078      	movs	r0, #120	; 0x78
 8002144:	90ae      	str	r0, [sp, #696]	; 0x2b8
	round.Color = yellow;
 8002146:	f8cd e2c0 	str.w	lr, [sp, #704]	; 0x2c0
	round.Thickness = 3;
 800214a:	f8cd a2c4 	str.w	sl, [sp, #708]	; 0x2c4
	round.R = 40;
 800214e:	2028      	movs	r0, #40	; 0x28
 8002150:	90af      	str	r0, [sp, #700]	; 0x2bc

	check.X1 = 20;
 8002152:	2014      	movs	r0, #20
 8002154:	90a3      	str	r0, [sp, #652]	; 0x28c
	check.X2 = 35;
 8002156:	f04f 0923 	mov.w	r9, #35	; 0x23
 800215a:	f8cd 9290 	str.w	r9, [sp, #656]	; 0x290
	check.Y1 = 10;
 800215e:	200a      	movs	r0, #10
 8002160:	90a5      	str	r0, [sp, #660]	; 0x294
	check.Y2 = 25;
 8002162:	f04f 0b19 	mov.w	fp, #25
 8002166:	f8cd b298 	str.w	fp, [sp, #664]	; 0x298
	check.FrameColor = blue;
 800216a:	93a7      	str	r3, [sp, #668]	; 0x29c
	check.BackColor = white;
 800216c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002170:	90a8      	str	r0, [sp, #672]	; 0x2a0
	check.CheckColor = black;
 8002172:	94a9      	str	r4, [sp, #676]	; 0x2a4
	check.Checked = 1;
 8002174:	f88d 52a8 	strb.w	r5, [sp, #680]	; 0x2a8
	check.TextColor = white;
 8002178:	90ab      	str	r0, [sp, #684]	; 0x2ac

	tr.X1 = 200;
 800217a:	27c8      	movs	r7, #200	; 0xc8
 800217c:	9796      	str	r7, [sp, #600]	; 0x258
	tr.X2 = 400;
 800217e:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8002182:	9797      	str	r7, [sp, #604]	; 0x25c
	tr.Y1 = 45;
 8002184:	272d      	movs	r7, #45	; 0x2d
 8002186:	9798      	str	r7, [sp, #608]	; 0x260
	tr.Y2 = 50;
 8002188:	2732      	movs	r7, #50	; 0x32
 800218a:	9799      	str	r7, [sp, #612]	; 0x264
	tr.StartValue = 0;
 800218c:	949a      	str	r4, [sp, #616]	; 0x268
	tr.StopValue = 10;
 800218e:	270a      	movs	r7, #10
 8002190:	979b      	str	r7, [sp, #620]	; 0x26c
	tr.FrameColor = blue;
 8002192:	939d      	str	r3, [sp, #628]	; 0x274
	tr.BackColor = red;
 8002194:	929e      	str	r2, [sp, #632]	; 0x278
	tr.Orientation = Horisontal;
 8002196:	f88d a280 	strb.w	sl, [sp, #640]	; 0x280
	tr.Radius = 6;
 800219a:	2706      	movs	r7, #6
 800219c:	97a1      	str	r7, [sp, #644]	; 0x284
	tr.TrackerColor = yellow;
 800219e:	f8cd e27c 	str.w	lr, [sp, #636]	; 0x27c

	tra.X1 = 20;
 80021a2:	2714      	movs	r7, #20
 80021a4:	9789      	str	r7, [sp, #548]	; 0x224
	tra.X2 = 25;
 80021a6:	f8cd b228 	str.w	fp, [sp, #552]	; 0x228
	tra.Y1 = 35;
 80021aa:	f8cd 922c 	str.w	r9, [sp, #556]	; 0x22c
	tra.Y2 = 262;
 80021ae:	f8cd c230 	str.w	ip, [sp, #560]	; 0x230
	tra.StartValue = 0;
 80021b2:	948d      	str	r4, [sp, #564]	; 0x234
	tra.StopValue = 10;
 80021b4:	270a      	movs	r7, #10
 80021b6:	978e      	str	r7, [sp, #568]	; 0x238
	tra.FrameColor = blue;
 80021b8:	9390      	str	r3, [sp, #576]	; 0x240
	tra.BackColor = red;
 80021ba:	9291      	str	r2, [sp, #580]	; 0x244
	tra.Orientation = Vertical;
 80021bc:	f88d 824c 	strb.w	r8, [sp, #588]	; 0x24c
	tra.Radius = 6;
 80021c0:	2706      	movs	r7, #6
 80021c2:	9794      	str	r7, [sp, #592]	; 0x250
	tra.TrackerColor = yellow;
 80021c4:	f8cd e248 	str.w	lr, [sp, #584]	; 0x248

	vgr.X1 = 240;
 80021c8:	f04f 0ef0 	mov.w	lr, #240	; 0xf0
 80021cc:	f8cd e208 	str.w	lr, [sp, #520]	; 0x208
	vgr.X2 = 340;
 80021d0:	f44f 7eaa 	mov.w	lr, #340	; 0x154
 80021d4:	f8cd e20c 	str.w	lr, [sp, #524]	; 0x20c
	vgr.Y1 = 190;
 80021d8:	f04f 0ebe 	mov.w	lr, #190	; 0xbe
 80021dc:	f8cd e210 	str.w	lr, [sp, #528]	; 0x210
	vgr.Y2 = 262;
 80021e0:	f8cd c214 	str.w	ip, [sp, #532]	; 0x214
	vgr.ColorH = red;
 80021e4:	9286      	str	r2, [sp, #536]	; 0x218
	vgr.ColorL = lightBlue1;
 80021e6:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8002360 <MainFunc+0x324>
 80021ea:	f8cd 821c 	str.w	r8, [sp, #540]	; 0x21c
	vgr.Unvisible = 0;
 80021ee:	f88d 4221 	strb.w	r4, [sp, #545]	; 0x221
	vgr.Is_pressed = 0;
 80021f2:	f88d 4220 	strb.w	r4, [sp, #544]	; 0x220

	hgr.X1 = 135;
 80021f6:	f04f 0987 	mov.w	r9, #135	; 0x87
 80021fa:	f8cd 91ec 	str.w	r9, [sp, #492]	; 0x1ec
	hgr.X2 = 235;
 80021fe:	f04f 09eb 	mov.w	r9, #235	; 0xeb
 8002202:	f8cd 91f0 	str.w	r9, [sp, #496]	; 0x1f0
	hgr.Y1 = 190;
 8002206:	f8cd e1f4 	str.w	lr, [sp, #500]	; 0x1f4
	hgr.Y2 = 262;
 800220a:	f8cd c1f8 	str.w	ip, [sp, #504]	; 0x1f8
	hgr.ColorH = red;
 800220e:	927f      	str	r2, [sp, #508]	; 0x1fc
	hgr.ColorL = lightBlue1;
 8002210:	f8cd 8200 	str.w	r8, [sp, #512]	; 0x200
	hgr.Unvisible = 0;
 8002214:	f88d 4205 	strb.w	r4, [sp, #517]	; 0x205
	hgr.Is_pressed = 0;
 8002218:	f88d 4204 	strb.w	r4, [sp, #516]	; 0x204

	dhgr.X1 = 345;
 800221c:	f240 1959 	movw	r9, #345	; 0x159
 8002220:	f8cd 91cc 	str.w	r9, [sp, #460]	; 0x1cc
	dhgr.X2 = 445;
 8002224:	f240 18bd 	movw	r8, #445	; 0x1bd
 8002228:	f8cd 81d0 	str.w	r8, [sp, #464]	; 0x1d0
	dhgr.Y1 = 190;
 800222c:	f8cd e1d4 	str.w	lr, [sp, #468]	; 0x1d4
	dhgr.Y2 = 262;
 8002230:	f8cd c1d8 	str.w	ip, [sp, #472]	; 0x1d8
	dhgr.ColorH  = red;
 8002234:	9277      	str	r2, [sp, #476]	; 0x1dc
	dhgr.ColorC = green;
 8002236:	9178      	str	r1, [sp, #480]	; 0x1e0
	dhgr.ColorL = blue;
 8002238:	9379      	str	r3, [sp, #484]	; 0x1e4

	dvgr.X1 = 345;
 800223a:	f8cd 91ac 	str.w	r9, [sp, #428]	; 0x1ac
	dvgr.X2 = 445;
 800223e:	f8cd 81b0 	str.w	r8, [sp, #432]	; 0x1b0
	dvgr.Y1 = 113;
 8002242:	f04f 0c71 	mov.w	ip, #113	; 0x71
 8002246:	f8cd c1b4 	str.w	ip, [sp, #436]	; 0x1b4
	dvgr.Y2 = 185;
 800224a:	f04f 0cb9 	mov.w	ip, #185	; 0xb9
 800224e:	f8cd c1b8 	str.w	ip, [sp, #440]	; 0x1b8
	dvgr.ColorH  = red;
 8002252:	926f      	str	r2, [sp, #444]	; 0x1bc
	dvgr.ColorC = green;
 8002254:	9170      	str	r1, [sp, #448]	; 0x1c0
	dvgr.ColorL = blue;
 8002256:	9371      	str	r3, [sp, #452]	; 0x1c4

    lb.X = 80;
 8002258:	f04f 0c50 	mov.w	ip, #80	; 0x50
 800225c:	f8cd c198 	str.w	ip, [sp, #408]	; 0x198
    lb.Y = 90;
 8002260:	f04f 095a 	mov.w	r9, #90	; 0x5a
 8002264:	f8cd 919c 	str.w	r9, [sp, #412]	; 0x19c
    lb.Color = white;
 8002268:	9068      	str	r0, [sp, #416]	; 0x1a0
    lb.ClickedColor = gray;
 800226a:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8002364 <MainFunc+0x328>
 800226e:	f8cd c1a4 	str.w	ip, [sp, #420]	; 0x1a4

    fr.X1 = 2;
 8002272:	965b      	str	r6, [sp, #364]	; 0x16c
    fr.X2 = 479;
 8002274:	f240 1edf 	movw	lr, #479	; 0x1df
 8002278:	f8cd e170 	str.w	lr, [sp, #368]	; 0x170
    fr.Y1 = 2;
 800227c:	965d      	str	r6, [sp, #372]	; 0x174
    fr.Y2 = 271;
 800227e:	f240 1c0f 	movw	ip, #271	; 0x10f
 8002282:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
    fr.YBar = 25;
 8002286:	f8cd b17c 	str.w	fp, [sp, #380]	; 0x17c
    fr.BarColor = blue;
 800228a:	9362      	str	r3, [sp, #392]	; 0x188
    fr.FrameColor = red;
 800228c:	9261      	str	r2, [sp, #388]	; 0x184
    fr.TextColor = green;
 800228e:	9164      	str	r1, [sp, #400]	; 0x190
    fr.Thickness = 1;
 8002290:	f88d 5180 	strb.w	r5, [sp, #384]	; 0x180
    fr.WindowColor = white;
 8002294:	9063      	str	r0, [sp, #396]	; 0x18c

    bt.FillColor = gray2;
 8002296:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002368 <MainFunc+0x32c>
 800229a:	f8cd 815c 	str.w	r8, [sp, #348]	; 0x15c
    bt.FrameColor = black;
 800229e:	9456      	str	r4, [sp, #344]	; 0x158
    bt.PressedColor = white;
 80022a0:	9058      	str	r0, [sp, #352]	; 0x160
    bt.TextColor = black;
 80022a2:	9459      	str	r4, [sp, #356]	; 0x164
    bt.Thickness = 1;
 80022a4:	f88d 5154 	strb.w	r5, [sp, #340]	; 0x154
    bt.X1 = 230;
 80022a8:	27e6      	movs	r7, #230	; 0xe6
 80022aa:	9751      	str	r7, [sp, #324]	; 0x144
    bt.X2 = 310;
 80022ac:	f44f 789b 	mov.w	r8, #310	; 0x136
 80022b0:	f8cd 8148 	str.w	r8, [sp, #328]	; 0x148
    bt.Y1 = 100;
 80022b4:	2764      	movs	r7, #100	; 0x64
 80022b6:	9753      	str	r7, [sp, #332]	; 0x14c
    bt.Y2 = 120;
 80022b8:	2778      	movs	r7, #120	; 0x78
 80022ba:	9754      	str	r7, [sp, #336]	; 0x150

    hfr.X1 = 2;
 80022bc:	9645      	str	r6, [sp, #276]	; 0x114
    hfr.X2 = 479;
 80022be:	f8cd e118 	str.w	lr, [sp, #280]	; 0x118
    hfr.Y1 = 2;
 80022c2:	9647      	str	r6, [sp, #284]	; 0x11c
    hfr.Y2 = 271;
 80022c4:	f8cd c120 	str.w	ip, [sp, #288]	; 0x120
    hfr.YBar = 25;
 80022c8:	f8cd b124 	str.w	fp, [sp, #292]	; 0x124
    hfr.BarColorH = blue;
 80022cc:	934c      	str	r3, [sp, #304]	; 0x130
    hfr.BarColorL = lightBlue3;
 80022ce:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800236c <MainFunc+0x330>
 80022d2:	f8cd 8134 	str.w	r8, [sp, #308]	; 0x134
    hfr.FrameColor = red;
 80022d6:	924b      	str	r2, [sp, #300]	; 0x12c
    hfr.TextColor = green;
 80022d8:	914f      	str	r1, [sp, #316]	; 0x13c
    hfr.Thickness = 1;
 80022da:	f88d 5128 	strb.w	r5, [sp, #296]	; 0x128
    hfr.WindowColor = white;
 80022de:	904e      	str	r0, [sp, #312]	; 0x138

    vfr.X1 = 2;
 80022e0:	9639      	str	r6, [sp, #228]	; 0xe4
    vfr.X2 = 479;
 80022e2:	f8cd e0e8 	str.w	lr, [sp, #232]	; 0xe8
    vfr.Y1 = 2;
 80022e6:	963b      	str	r6, [sp, #236]	; 0xec
    vfr.Y2 = 271;
 80022e8:	f8cd c0f0 	str.w	ip, [sp, #240]	; 0xf0
    vfr.YBar = 25;
 80022ec:	f8cd b0f4 	str.w	fp, [sp, #244]	; 0xf4
    vfr.BarColorL = blue;
 80022f0:	9341      	str	r3, [sp, #260]	; 0x104
    vfr.BarColorH = lightBlue4;
 80022f2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8002370 <MainFunc+0x334>
 80022f6:	f8cd c100 	str.w	ip, [sp, #256]	; 0x100
    vfr.FrameColor = red;
 80022fa:	923f      	str	r2, [sp, #252]	; 0xfc
    vfr.TextColor = green;
 80022fc:	9143      	str	r1, [sp, #268]	; 0x10c
    vfr.Thickness = 1;
 80022fe:	f88d 50f8 	strb.w	r5, [sp, #248]	; 0xf8
    vfr.WindowColor = white;
 8002302:	9042      	str	r0, [sp, #264]	; 0x108


	pvg.X1 = 200;
 8002304:	27c8      	movs	r7, #200	; 0xc8
 8002306:	972d      	str	r7, [sp, #180]	; 0xb4
	pvg.X2 = 400;
 8002308:	f44f 77c8 	mov.w	r7, #400	; 0x190
 800230c:	972e      	str	r7, [sp, #184]	; 0xb8
	pvg.Y1 = 70;
 800230e:	f04f 0c46 	mov.w	ip, #70	; 0x46
 8002312:	f8cd c0bc 	str.w	ip, [sp, #188]	; 0xbc
	pvg.Y2 = 90;
 8002316:	f8cd 90c0 	str.w	r9, [sp, #192]	; 0xc0
	pvg.StartValue = 0;
 800231a:	9431      	str	r4, [sp, #196]	; 0xc4
	pvg.StopValue = 10;
 800231c:	270a      	movs	r7, #10
 800231e:	9732      	str	r7, [sp, #200]	; 0xc8
	pvg.CurrentValue = 6;
 8002320:	2706      	movs	r7, #6
 8002322:	9733      	str	r7, [sp, #204]	; 0xcc
	pvg.Thickness = 1;
 8002324:	f88d 50e0 	strb.w	r5, [sp, #224]	; 0xe0
	pvg.FillColor = black;
 8002328:	9435      	str	r4, [sp, #212]	; 0xd4
	pvg.FrameColor = green;
 800232a:	9134      	str	r1, [sp, #208]	; 0xd0
	pvg.BarColorC = red;
 800232c:	9237      	str	r2, [sp, #220]	; 0xdc
	pvg.BarColorH = blue;
 800232e:	9336      	str	r3, [sp, #216]	; 0xd8
	pvg.Orientation = Horisontal;
 8002330:	f88d a0e1 	strb.w	sl, [sp, #225]	; 0xe1


	rb.BackColor = blue;
 8002334:	932a      	str	r3, [sp, #168]	; 0xa8
	rb.Checked = 1;
 8002336:	f88d 50b1 	strb.w	r5, [sp, #177]	; 0xb1
	rb.Radius = 5;
 800233a:	2705      	movs	r7, #5
 800233c:	9727      	str	r7, [sp, #156]	; 0x9c
	rb.TextColor = white;
 800233e:	902b      	str	r0, [sp, #172]	; 0xac
	rb.X = 25;
 8002340:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
	rb.Y = 50;
 8002344:	2732      	movs	r7, #50	; 0x32
 8002346:	9726      	str	r7, [sp, #152]	; 0x98
	rb.Transp_key = 0;
 8002348:	f88d 40b0 	strb.w	r4, [sp, #176]	; 0xb0
	rb.ExCirColor = green;
 800234c:	9128      	str	r1, [sp, #160]	; 0xa0
 800234e:	e011      	b.n	8002374 <MainFunc+0x338>
 8002350:	2003fc40 	.word	0x2003fc40
 8002354:	20000040 	.word	0x20000040
 8002358:	2003fcdc 	.word	0x2003fcdc
 800235c:	00ffff00 	.word	0x00ffff00
 8002360:	003333ff 	.word	0x003333ff
 8002364:	00808080 	.word	0x00808080
 8002368:	00c0c0c0 	.word	0x00c0c0c0
 800236c:	009999ff 	.word	0x009999ff
 8002370:	00ccccff 	.word	0x00ccccff
	rb.InCirColor = blue;
 8002374:	9329      	str	r3, [sp, #164]	; 0xa4
	rb.Unvisible = 1;
 8002376:	f88d 50b3 	strb.w	r5, [sp, #179]	; 0xb3

	gr.FillColor = white;
 800237a:	901a      	str	r0, [sp, #104]	; 0x68
	gr.FrameColor = green;
 800237c:	911b      	str	r1, [sp, #108]	; 0x6c
	gr.LinesColor = red;
 800237e:	921d      	str	r2, [sp, #116]	; 0x74
	gr.StepX = 1;
 8002380:	951e      	str	r5, [sp, #120]	; 0x78
	gr.StepY = 10;
 8002382:	230a      	movs	r3, #10
 8002384:	931f      	str	r3, [sp, #124]	; 0x7c
	gr.X1 = 1;
 8002386:	9516      	str	r5, [sp, #88]	; 0x58
	gr.X2 = 480;
 8002388:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800238c:	9317      	str	r3, [sp, #92]	; 0x5c
	gr.XMax = 10;
 800238e:	230a      	movs	r3, #10
 8002390:	9320      	str	r3, [sp, #128]	; 0x80
	gr.XMin = 0;
 8002392:	9421      	str	r4, [sp, #132]	; 0x84
	gr.Y1 = 1;
 8002394:	9518      	str	r5, [sp, #96]	; 0x60
	gr.Y2 = 272;
 8002396:	f44f 7388 	mov.w	r3, #272	; 0x110
 800239a:	9319      	str	r3, [sp, #100]	; 0x64
	gr.YMax = 100;
 800239c:	2364      	movs	r3, #100	; 0x64
 800239e:	9322      	str	r3, [sp, #136]	; 0x88
	gr.YMin = 0;
 80023a0:	9423      	str	r4, [sp, #140]	; 0x8c
	gr.Unvisible = 0;
 80023a2:	f88d 4090 	strb.w	r4, [sp, #144]	; 0x90
	gr.Thickness = 2;
 80023a6:	961c      	str	r6, [sp, #112]	; 0x70

	grL.LineColor = black;
 80023a8:	9414      	str	r4, [sp, #80]	; 0x50
	grL.Points_count = 10;
 80023aa:	230a      	movs	r3, #10
 80023ac:	9313      	str	r3, [sp, #76]	; 0x4c
	grL.Thickness = 2;
 80023ae:	f88d 6054 	strb.w	r6, [sp, #84]	; 0x54


    RTB.Y1 = 1;
 80023b2:	950c      	str	r5, [sp, #48]	; 0x30
    RTB.Y2 = 40;
 80023b4:	2328      	movs	r3, #40	; 0x28
 80023b6:	930d      	str	r3, [sp, #52]	; 0x34
    RTB.Thickness = 2;
 80023b8:	960e      	str	r6, [sp, #56]	; 0x38
    RTB.FrameColor = white;
 80023ba:	900f      	str	r0, [sp, #60]	; 0x3c
    RTB.FillColor = black;
 80023bc:	9410      	str	r4, [sp, #64]	; 0x40
    RTB.TextColor = green;
 80023be:	9111      	str	r1, [sp, #68]	; 0x44
//    uint16 i = 0;
//
	while(1) // бесконечный цикл
	{

		LCD_Graph(&gr);
 80023c0:	a816      	add	r0, sp, #88	; 0x58
 80023c2:	f7ff fd88 	bl	8001ed6 <LCD_Graph>
		int data[] = {90, 80, 70, 60, 50, 40, 30, 20, 10, 0};
 80023c6:	466c      	mov	r4, sp
 80023c8:	4d34      	ldr	r5, [pc, #208]	; (800249c <MainFunc+0x460>)
 80023ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023d6:	e884 0003 	stmia.w	r4, {r0, r1}
		LCD_GraphLine(&gr, &grL, data);
 80023da:	466a      	mov	r2, sp
 80023dc:	a913      	add	r1, sp, #76	; 0x4c
 80023de:	a816      	add	r0, sp, #88	; 0x58
 80023e0:	f7ff fd9b 	bl	8001f1a <LCD_GraphLine>
		HAL_Delay(3000);
 80023e4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80023e8:	f000 ff60 	bl	80032ac <HAL_Delay>

		Fill_Display(black);
 80023ec:	2000      	movs	r0, #0
 80023ee:	f7fe fcbb 	bl	8000d68 <Fill_Display>
		LCD_Fill_Rectangle(&kv);
 80023f2:	a8df      	add	r0, sp, #892	; 0x37c
 80023f4:	f7ff fc82 	bl	8001cfc <LCD_Fill_Rectangle>
		HAL_Delay(3000);
 80023f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80023fc:	f000 ff56 	bl	80032ac <HAL_Delay>

		LCD_FramePanel(&pan);
 8002400:	a8d8      	add	r0, sp, #864	; 0x360
 8002402:	f7ff fc99 	bl	8001d38 <LCD_FramePanel>
		HAL_Delay(3000);
 8002406:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800240a:	f000 ff4f 	bl	80032ac <HAL_Delay>

		Fill_Display(black);
 800240e:	2000      	movs	r0, #0
 8002410:	f7fe fcaa 	bl	8000d68 <Fill_Display>
		LCD_Fill_Rectangle(&rec);
 8002414:	a8d3      	add	r0, sp, #844	; 0x34c
 8002416:	f7ff fc71 	bl	8001cfc <LCD_Fill_Rectangle>
	    HAL_Delay(3000);
 800241a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800241e:	f000 ff45 	bl	80032ac <HAL_Delay>

		Fill_Display(black);
 8002422:	2000      	movs	r0, #0
 8002424:	f7fe fca0 	bl	8000d68 <Fill_Display>
		LCD_HLine(&line);
 8002428:	a8ce      	add	r0, sp, #824	; 0x338
 800242a:	f7ff fc74 	bl	8001d16 <LCD_HLine>
		HAL_Delay(3000);
 800242e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002432:	f000 ff3b 	bl	80032ac <HAL_Delay>

		Fill_Display(black);
 8002436:	2000      	movs	r0, #0
 8002438:	f7fe fc96 	bl	8000d68 <Fill_Display>
		LCD_FillCircle(&ball);
 800243c:	a8c9      	add	r0, sp, #804	; 0x324
 800243e:	f7ff fcd5 	bl	8001dec <LCD_FillCircle>
		HAL_Delay(3000);
 8002442:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002446:	f000 ff31 	bl	80032ac <HAL_Delay>

		Fill_Display(green);
 800244a:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 800244e:	f7fe fc8b 	bl	8000d68 <Fill_Display>
		LCD_Form(&fr, "Form1");
 8002452:	4913      	ldr	r1, [pc, #76]	; (80024a0 <MainFunc+0x464>)
 8002454:	a85b      	add	r0, sp, #364	; 0x16c
 8002456:	f7ff fce5 	bl	8001e24 <LCD_Form>
		LCD_HGradient(&hgr);
 800245a:	a87b      	add	r0, sp, #492	; 0x1ec
 800245c:	f7ff fcce 	bl	8001dfc <LCD_HGradient>
		HAL_Delay(5000);
 8002460:	f241 3088 	movw	r0, #5000	; 0x1388
 8002464:	f000 ff22 	bl	80032ac <HAL_Delay>

		Fill_Display(black);
 8002468:	2000      	movs	r0, #0
 800246a:	f7fe fc7d 	bl	8000d68 <Fill_Display>
		LCD_Circle(&round);
 800246e:	a8ad      	add	r0, sp, #692	; 0x2b4
 8002470:	f7ff fcac 	bl	8001dcc <LCD_Circle>
		HAL_Delay(3000);
 8002474:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002478:	f000 ff18 	bl	80032ac <HAL_Delay>

		Fill_Display(black);
 800247c:	2000      	movs	r0, #0
 800247e:	f7fe fc73 	bl	8000d68 <Fill_Display>
		LCD_RadioButton(&rb, "Radiobutton1");
 8002482:	4908      	ldr	r1, [pc, #32]	; (80024a4 <MainFunc+0x468>)
 8002484:	a825      	add	r0, sp, #148	; 0x94
 8002486:	f7ff fd01 	bl	8001e8c <LCD_RadioButton>
		LCD_CheckBox(&check, "CheckButton1");
 800248a:	4907      	ldr	r1, [pc, #28]	; (80024a8 <MainFunc+0x46c>)
 800248c:	a8a3      	add	r0, sp, #652	; 0x28c
 800248e:	f7ff fce2 	bl	8001e56 <LCD_CheckBox>
		HAL_Delay(3000);
 8002492:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002496:	f000 ff09 	bl	80032ac <HAL_Delay>
	while(1) // бесконечный цикл
 800249a:	e791      	b.n	80023c0 <MainFunc+0x384>
 800249c:	08005b98 	.word	0x08005b98
 80024a0:	08007868 	.word	0x08007868
 80024a4:	08007870 	.word	0x08007870
 80024a8:	08007880 	.word	0x08007880

080024ac <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80024ac:	b510      	push	{r4, lr}
 80024ae:	b084      	sub	sp, #16
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80024b0:	2400      	movs	r4, #0
 80024b2:	9400      	str	r4, [sp, #0]
 80024b4:	9401      	str	r4, [sp, #4]
 80024b6:	9402      	str	r4, [sp, #8]
 80024b8:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80024ba:	f000 ff61 	bl	8003380 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80024be:	2301      	movs	r3, #1
 80024c0:	f88d 3000 	strb.w	r3, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80024c4:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x20000004;
 80024c8:	4a0d      	ldr	r2, [pc, #52]	; (8002500 <MPU_Config+0x54>)
 80024ca:	9201      	str	r2, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80024cc:	2211      	movs	r2, #17
 80024ce:	f88d 2008 	strb.w	r2, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80024d2:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80024d6:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80024da:	2203      	movs	r2, #3
 80024dc:	f88d 200b 	strb.w	r2, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80024e0:	f88d 400c 	strb.w	r4, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80024e4:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80024e8:	f88d 300e 	strb.w	r3, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80024ec:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80024f0:	4668      	mov	r0, sp
 80024f2:	f000 ff63 	bl	80033bc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80024f6:	2004      	movs	r0, #4
 80024f8:	f000 ff50 	bl	800339c <HAL_MPU_Enable>

}
 80024fc:	b004      	add	sp, #16
 80024fe:	bd10      	pop	{r4, pc}
 8002500:	20000004 	.word	0x20000004

08002504 <MX_GPIO_Init>:
{
 8002504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002508:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250a:	2400      	movs	r4, #0
 800250c:	940b      	str	r4, [sp, #44]	; 0x2c
 800250e:	940c      	str	r4, [sp, #48]	; 0x30
 8002510:	940d      	str	r4, [sp, #52]	; 0x34
 8002512:	940e      	str	r4, [sp, #56]	; 0x38
 8002514:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002516:	4baa      	ldr	r3, [pc, #680]	; (80027c0 <MX_GPIO_Init+0x2bc>)
 8002518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800251a:	f042 0210 	orr.w	r2, r2, #16
 800251e:	631a      	str	r2, [r3, #48]	; 0x30
 8002520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002522:	f002 0210 	and.w	r2, r2, #16
 8002526:	9200      	str	r2, [sp, #0]
 8002528:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800252a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800252c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002530:	631a      	str	r2, [r3, #48]	; 0x30
 8002532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002534:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002538:	9201      	str	r2, [sp, #4]
 800253a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800253c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800253e:	f042 0202 	orr.w	r2, r2, #2
 8002542:	631a      	str	r2, [r3, #48]	; 0x30
 8002544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002546:	f002 0202 	and.w	r2, r2, #2
 800254a:	9202      	str	r2, [sp, #8]
 800254c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800254e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002550:	f042 0208 	orr.w	r2, r2, #8
 8002554:	631a      	str	r2, [r3, #48]	; 0x30
 8002556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002558:	f002 0208 	and.w	r2, r2, #8
 800255c:	9203      	str	r2, [sp, #12]
 800255e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002562:	f042 0204 	orr.w	r2, r2, #4
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
 8002568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800256a:	f002 0204 	and.w	r2, r2, #4
 800256e:	9204      	str	r2, [sp, #16]
 8002570:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002574:	f042 0201 	orr.w	r2, r2, #1
 8002578:	631a      	str	r2, [r3, #48]	; 0x30
 800257a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800257c:	f002 0201 	and.w	r2, r2, #1
 8002580:	9205      	str	r2, [sp, #20]
 8002582:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
 800258c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800258e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002592:	9206      	str	r2, [sp, #24]
 8002594:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800259c:	631a      	str	r2, [r3, #48]	; 0x30
 800259e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80025a4:	9207      	str	r2, [sp, #28]
 80025a6:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80025a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
 80025b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025b2:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80025b6:	9208      	str	r2, [sp, #32]
 80025b8:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025bc:	f042 0220 	orr.w	r2, r2, #32
 80025c0:	631a      	str	r2, [r3, #48]	; 0x30
 80025c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025c4:	f002 0220 	and.w	r2, r2, #32
 80025c8:	9209      	str	r2, [sp, #36]	; 0x24
 80025ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025da:	930a      	str	r3, [sp, #40]	; 0x28
 80025dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80025de:	2201      	movs	r2, #1
 80025e0:	2120      	movs	r1, #32
 80025e2:	4878      	ldr	r0, [pc, #480]	; (80027c4 <MX_GPIO_Init+0x2c0>)
 80025e4:	f001 f93c 	bl	8003860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80025e8:	4622      	mov	r2, r4
 80025ea:	210c      	movs	r1, #12
 80025ec:	4876      	ldr	r0, [pc, #472]	; (80027c8 <MX_GPIO_Init+0x2c4>)
 80025ee:	f001 f937 	bl	8003860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80025f2:	2201      	movs	r2, #1
 80025f4:	2108      	movs	r1, #8
 80025f6:	4875      	ldr	r0, [pc, #468]	; (80027cc <MX_GPIO_Init+0x2c8>)
 80025f8:	f001 f932 	bl	8003860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80025fc:	2201      	movs	r2, #1
 80025fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002602:	4871      	ldr	r0, [pc, #452]	; (80027c8 <MX_GPIO_Init+0x2c4>)
 8002604:	f001 f92c 	bl	8003860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002608:	4622      	mov	r2, r4
 800260a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800260e:	4870      	ldr	r0, [pc, #448]	; (80027d0 <MX_GPIO_Init+0x2cc>)
 8002610:	f001 f926 	bl	8003860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002614:	4622      	mov	r2, r4
 8002616:	21c8      	movs	r1, #200	; 0xc8
 8002618:	486e      	ldr	r0, [pc, #440]	; (80027d4 <MX_GPIO_Init+0x2d0>)
 800261a:	f001 f921 	bl	8003860 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800261e:	2308      	movs	r3, #8
 8002620:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002622:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002626:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 80027e0 <MX_GPIO_Init+0x2dc>
 800262a:	a90b      	add	r1, sp, #44	; 0x2c
 800262c:	4648      	mov	r0, r9
 800262e:	f001 f825 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002632:	2304      	movs	r3, #4
 8002634:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002636:	2502      	movs	r5, #2
 8002638:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263c:	2603      	movs	r6, #3
 800263e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002640:	2309      	movs	r3, #9
 8002642:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002644:	a90b      	add	r1, sp, #44	; 0x2c
 8002646:	4648      	mov	r0, r9
 8002648:	f001 f818 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800264c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002650:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002654:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002656:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002658:	230b      	movs	r3, #11
 800265a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800265c:	a90b      	add	r1, sp, #44	; 0x2c
 800265e:	485d      	ldr	r0, [pc, #372]	; (80027d4 <MX_GPIO_Init+0x2d0>)
 8002660:	f001 f80c 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002664:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002668:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800266a:	2312      	movs	r3, #18
 800266c:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002672:	2304      	movs	r3, #4
 8002674:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002676:	f8df b16c 	ldr.w	fp, [pc, #364]	; 80027e4 <MX_GPIO_Init+0x2e0>
 800267a:	a90b      	add	r1, sp, #44	; 0x2c
 800267c:	4658      	mov	r0, fp
 800267e:	f000 fffd 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002682:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002686:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800268e:	f04f 080a 	mov.w	r8, #10
 8002692:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002696:	a90b      	add	r1, sp, #44	; 0x2c
 8002698:	4658      	mov	r0, fp
 800269a:	f000 ffef 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800269e:	2310      	movs	r3, #16
 80026a0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a6:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026a8:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80026aa:	a90b      	add	r1, sp, #44	; 0x2c
 80026ac:	4658      	mov	r0, fp
 80026ae:	f000 ffe5 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80026b2:	2380      	movs	r3, #128	; 0x80
 80026b4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ba:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80026bc:	2308      	movs	r3, #8
 80026be:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80026c0:	a90b      	add	r1, sp, #44	; 0x2c
 80026c2:	4840      	ldr	r0, [pc, #256]	; (80027c4 <MX_GPIO_Init+0x2c0>)
 80026c4:	f000 ffda 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80026c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026cc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ce:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026d4:	2701      	movs	r7, #1
 80026d6:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80026d8:	f8df a10c 	ldr.w	sl, [pc, #268]	; 80027e8 <MX_GPIO_Init+0x2e4>
 80026dc:	a90b      	add	r1, sp, #44	; 0x2c
 80026de:	4650      	mov	r0, sl
 80026e0:	f000 ffcc 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80026e4:	2360      	movs	r3, #96	; 0x60
 80026e6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ec:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80026ee:	230d      	movs	r3, #13
 80026f0:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026f2:	a90b      	add	r1, sp, #44	; 0x2c
 80026f4:	4648      	mov	r0, r9
 80026f6:	f000 ffc1 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002702:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002704:	2307      	movs	r3, #7
 8002706:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002708:	a90b      	add	r1, sp, #44	; 0x2c
 800270a:	4658      	mov	r0, fp
 800270c:	f000 ffb6 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002710:	2340      	movs	r3, #64	; 0x40
 8002712:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002718:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800271a:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800271e:	a90b      	add	r1, sp, #44	; 0x2c
 8002720:	4658      	mov	r0, fp
 8002722:	f000 ffab 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800272a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800272c:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002730:	a90b      	add	r1, sp, #44	; 0x2c
 8002732:	4829      	ldr	r0, [pc, #164]	; (80027d8 <MX_GPIO_Init+0x2d4>)
 8002734:	f000 ffa2 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002738:	2340      	movs	r3, #64	; 0x40
 800273a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800273c:	4b27      	ldr	r3, [pc, #156]	; (80027dc <MX_GPIO_Init+0x2d8>)
 800273e:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002742:	a90b      	add	r1, sp, #44	; 0x2c
 8002744:	481f      	ldr	r0, [pc, #124]	; (80027c4 <MX_GPIO_Init+0x2c0>)
 8002746:	f000 ff99 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800274a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800274e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002750:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002754:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002756:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275a:	a90b      	add	r1, sp, #44	; 0x2c
 800275c:	4650      	mov	r0, sl
 800275e:	f000 ff8d 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002762:	23f0      	movs	r3, #240	; 0xf0
 8002764:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002766:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800276c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002770:	a90b      	add	r1, sp, #44	; 0x2c
 8002772:	4815      	ldr	r0, [pc, #84]	; (80027c8 <MX_GPIO_Init+0x2c4>)
 8002774:	f000 ff82 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800277c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002784:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002788:	a90b      	add	r1, sp, #44	; 0x2c
 800278a:	4812      	ldr	r0, [pc, #72]	; (80027d4 <MX_GPIO_Init+0x2d0>)
 800278c:	f000 ff76 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002790:	2320      	movs	r3, #32
 8002792:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002794:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002798:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800279a:	a90b      	add	r1, sp, #44	; 0x2c
 800279c:	4809      	ldr	r0, [pc, #36]	; (80027c4 <MX_GPIO_Init+0x2c0>)
 800279e:	f000 ff6d 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80027a2:	2208      	movs	r2, #8
 80027a4:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027aa:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80027ac:	220d      	movs	r2, #13
 80027ae:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80027b0:	a90b      	add	r1, sp, #44	; 0x2c
 80027b2:	4804      	ldr	r0, [pc, #16]	; (80027c4 <MX_GPIO_Init+0x2c0>)
 80027b4:	f000 ff62 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80027b8:	f241 030c 	movw	r3, #4108	; 0x100c
 80027bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80027be:	e015      	b.n	80027ec <MX_GPIO_Init+0x2e8>
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40020c00 	.word	0x40020c00
 80027c8:	40022000 	.word	0x40022000
 80027cc:	40022800 	.word	0x40022800
 80027d0:	40021c00 	.word	0x40021c00
 80027d4:	40021800 	.word	0x40021800
 80027d8:	40022400 	.word	0x40022400
 80027dc:	10120000 	.word	0x10120000
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40020400 	.word	0x40020400
 80027e8:	40020000 	.word	0x40020000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ec:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f0:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80027f2:	a90b      	add	r1, sp, #44	; 0x2c
 80027f4:	488e      	ldr	r0, [pc, #568]	; (8002a30 <MX_GPIO_Init+0x52c>)
 80027f6:	f000 ff41 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80027fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027fe:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002800:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002804:	f5a9 6900 	sub.w	r9, r9, #2048	; 0x800
 8002808:	a90b      	add	r1, sp, #44	; 0x2c
 800280a:	4648      	mov	r0, r9
 800280c:	f000 ff36 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002810:	2208      	movs	r2, #8
 8002812:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002814:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002818:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800281a:	a90b      	add	r1, sp, #44	; 0x2c
 800281c:	4885      	ldr	r0, [pc, #532]	; (8002a34 <MX_GPIO_Init+0x530>)
 800281e:	f000 ff2d 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002826:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002828:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800282e:	220d      	movs	r2, #13
 8002830:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002832:	a90b      	add	r1, sp, #44	; 0x2c
 8002834:	4880      	ldr	r0, [pc, #512]	; (8002a38 <MX_GPIO_Init+0x534>)
 8002836:	f000 ff21 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800283a:	2210      	movs	r2, #16
 800283c:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800283e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002842:	a90b      	add	r1, sp, #44	; 0x2c
 8002844:	487d      	ldr	r0, [pc, #500]	; (8002a3c <MX_GPIO_Init+0x538>)
 8002846:	f000 ff19 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800284a:	f248 0304 	movw	r3, #32772	; 0x8004
 800284e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002850:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002854:	a90b      	add	r1, sp, #44	; 0x2c
 8002856:	487a      	ldr	r0, [pc, #488]	; (8002a40 <MX_GPIO_Init+0x53c>)
 8002858:	f000 ff10 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800285c:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002862:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002864:	2205      	movs	r2, #5
 8002866:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002868:	a90b      	add	r1, sp, #44	; 0x2c
 800286a:	4871      	ldr	r0, [pc, #452]	; (8002a30 <MX_GPIO_Init+0x52c>)
 800286c:	f000 ff06 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002870:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002874:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002876:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287a:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800287c:	a90b      	add	r1, sp, #44	; 0x2c
 800287e:	4870      	ldr	r0, [pc, #448]	; (8002a40 <MX_GPIO_Init+0x53c>)
 8002880:	f000 fefc 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002884:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002888:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002890:	220d      	movs	r2, #13
 8002892:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002894:	a90b      	add	r1, sp, #44	; 0x2c
 8002896:	486a      	ldr	r0, [pc, #424]	; (8002a40 <MX_GPIO_Init+0x53c>)
 8002898:	f000 fef0 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800289c:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80028a4:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80028a6:	a90b      	add	r1, sp, #44	; 0x2c
 80028a8:	4861      	ldr	r0, [pc, #388]	; (8002a30 <MX_GPIO_Init+0x52c>)
 80028aa:	f000 fee7 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 80028ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028b2:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028ba:	2207      	movs	r2, #7
 80028bc:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80028be:	a90b      	add	r1, sp, #44	; 0x2c
 80028c0:	4650      	mov	r0, sl
 80028c2:	f000 fedb 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80028c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ca:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028d2:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80028d4:	a90b      	add	r1, sp, #44	; 0x2c
 80028d6:	4650      	mov	r0, sl
 80028d8:	f000 fed0 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80028dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028e0:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80028e2:	4b58      	ldr	r3, [pc, #352]	; (8002a44 <MX_GPIO_Init+0x540>)
 80028e4:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80028e8:	a90b      	add	r1, sp, #44	; 0x2c
 80028ea:	4851      	ldr	r0, [pc, #324]	; (8002a30 <MX_GPIO_Init+0x52c>)
 80028ec:	f000 fec6 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80028f0:	23c0      	movs	r3, #192	; 0xc0
 80028f2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f8:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80028fa:	2308      	movs	r3, #8
 80028fc:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028fe:	a90b      	add	r1, sp, #44	; 0x2c
 8002900:	4648      	mov	r0, r9
 8002902:	f000 febb 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002906:	2310      	movs	r3, #16
 8002908:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002910:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002914:	a90b      	add	r1, sp, #44	; 0x2c
 8002916:	484a      	ldr	r0, [pc, #296]	; (8002a40 <MX_GPIO_Init+0x53c>)
 8002918:	f000 feb0 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800291c:	23c8      	movs	r3, #200	; 0xc8
 800291e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002920:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002924:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002926:	a90b      	add	r1, sp, #44	; 0x2c
 8002928:	4843      	ldr	r0, [pc, #268]	; (8002a38 <MX_GPIO_Init+0x534>)
 800292a:	f000 fea7 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800292e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002932:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002934:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002938:	a90b      	add	r1, sp, #44	; 0x2c
 800293a:	4843      	ldr	r0, [pc, #268]	; (8002a48 <MX_GPIO_Init+0x544>)
 800293c:	f000 fe9e 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002940:	2305      	movs	r3, #5
 8002942:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002948:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800294a:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800294e:	a90b      	add	r1, sp, #44	; 0x2c
 8002950:	4648      	mov	r0, r9
 8002952:	f000 fe93 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002956:	2332      	movs	r3, #50	; 0x32
 8002958:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800295e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002960:	230b      	movs	r3, #11
 8002962:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002964:	a90b      	add	r1, sp, #44	; 0x2c
 8002966:	4648      	mov	r0, r9
 8002968:	f000 fe88 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800296c:	2304      	movs	r3, #4
 800296e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002970:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002972:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002974:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002976:	2309      	movs	r3, #9
 8002978:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297a:	a90b      	add	r1, sp, #44	; 0x2c
 800297c:	4658      	mov	r0, fp
 800297e:	f000 fe7d 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002982:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002986:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002988:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800298e:	2309      	movs	r3, #9
 8002990:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002992:	a90b      	add	r1, sp, #44	; 0x2c
 8002994:	4829      	ldr	r0, [pc, #164]	; (8002a3c <MX_GPIO_Init+0x538>)
 8002996:	f000 fe71 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800299a:	2304      	movs	r3, #4
 800299c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800299e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80029a2:	a90b      	add	r1, sp, #44	; 0x2c
 80029a4:	4824      	ldr	r0, [pc, #144]	; (8002a38 <MX_GPIO_Init+0x534>)
 80029a6:	f000 fe69 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80029aa:	2386      	movs	r3, #134	; 0x86
 80029ac:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b2:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029b4:	230b      	movs	r3, #11
 80029b6:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b8:	a90b      	add	r1, sp, #44	; 0x2c
 80029ba:	4650      	mov	r0, sl
 80029bc:	f000 fe5e 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80029c0:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029c2:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80029c6:	a90b      	add	r1, sp, #44	; 0x2c
 80029c8:	4650      	mov	r0, sl
 80029ca:	f000 fe57 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80029ce:	2350      	movs	r3, #80	; 0x50
 80029d0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d6:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029d8:	230d      	movs	r3, #13
 80029da:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029dc:	a90b      	add	r1, sp, #44	; 0x2c
 80029de:	4650      	mov	r0, sl
 80029e0:	f000 fe4c 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80029e4:	2328      	movs	r3, #40	; 0x28
 80029e6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ec:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80029ee:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f2:	a90b      	add	r1, sp, #44	; 0x2c
 80029f4:	4650      	mov	r0, sl
 80029f6:	f000 fe41 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80029fa:	2340      	movs	r3, #64	; 0x40
 80029fc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a02:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002a04:	2309      	movs	r3, #9
 8002a06:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002a08:	a90b      	add	r1, sp, #44	; 0x2c
 8002a0a:	480d      	ldr	r0, [pc, #52]	; (8002a40 <MX_GPIO_Init+0x53c>)
 8002a0c:	f000 fe36 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002a10:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002a14:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a16:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a1c:	2305      	movs	r3, #5
 8002a1e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a20:	a90b      	add	r1, sp, #44	; 0x2c
 8002a22:	4658      	mov	r0, fp
 8002a24:	f000 fe2a 	bl	800367c <HAL_GPIO_Init>
}
 8002a28:	b011      	add	sp, #68	; 0x44
 8002a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a2e:	bf00      	nop
 8002a30:	40022000 	.word	0x40022000
 8002a34:	40022800 	.word	0x40022800
 8002a38:	40021800 	.word	0x40021800
 8002a3c:	40020c00 	.word	0x40020c00
 8002a40:	40021c00 	.word	0x40021c00
 8002a44:	10120000 	.word	0x10120000
 8002a48:	40021400 	.word	0x40021400

08002a4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002a4e:	6802      	ldr	r2, [r0, #0]
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d000      	beq.n	8002a58 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a56:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8002a58:	f000 fc16 	bl	8003288 <HAL_IncTick>
}
 8002a5c:	e7fb      	b.n	8002a56 <HAL_TIM_PeriodElapsedCallback+0xa>
 8002a5e:	bf00      	nop
 8002a60:	40001000 	.word	0x40001000

08002a64 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a64:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a66:	e7fe      	b.n	8002a66 <Error_Handler+0x2>

08002a68 <MX_DMA2D_Init>:
{
 8002a68:	b508      	push	{r3, lr}
  hdma2d.Instance = DMA2D;
 8002a6a:	480c      	ldr	r0, [pc, #48]	; (8002a9c <MX_DMA2D_Init+0x34>)
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <MX_DMA2D_Init+0x38>)
 8002a6e:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8002a70:	2300      	movs	r3, #0
 8002a72:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8002a74:	2202      	movs	r2, #2
 8002a76:	6082      	str	r2, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8002a78:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002a7a:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8002a7c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002a7e:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8002a80:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002a82:	f000 fccb 	bl	800341c <HAL_DMA2D_Init>
 8002a86:	b928      	cbnz	r0, 8002a94 <MX_DMA2D_Init+0x2c>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002a88:	2101      	movs	r1, #1
 8002a8a:	4804      	ldr	r0, [pc, #16]	; (8002a9c <MX_DMA2D_Init+0x34>)
 8002a8c:	f000 fd94 	bl	80035b8 <HAL_DMA2D_ConfigLayer>
 8002a90:	b910      	cbnz	r0, 8002a98 <MX_DMA2D_Init+0x30>
}
 8002a92:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002a94:	f7ff ffe6 	bl	8002a64 <Error_Handler>
    Error_Handler();
 8002a98:	f7ff ffe4 	bl	8002a64 <Error_Handler>
 8002a9c:	2003fc50 	.word	0x2003fc50
 8002aa0:	4002b000 	.word	0x4002b000

08002aa4 <MX_FMC_Init>:
{
 8002aa4:	b500      	push	{lr}
 8002aa6:	b089      	sub	sp, #36	; 0x24
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	9302      	str	r3, [sp, #8]
 8002aae:	9303      	str	r3, [sp, #12]
 8002ab0:	9304      	str	r3, [sp, #16]
 8002ab2:	9305      	str	r3, [sp, #20]
 8002ab4:	9306      	str	r3, [sp, #24]
 8002ab6:	9307      	str	r3, [sp, #28]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002ab8:	4813      	ldr	r0, [pc, #76]	; (8002b08 <MX_FMC_Init+0x64>)
 8002aba:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <MX_FMC_Init+0x68>)
 8002abc:	6002      	str	r2, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002abe:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002ac0:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002ac2:	2104      	movs	r1, #4
 8002ac4:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002ac6:	2210      	movs	r2, #16
 8002ac8:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002aca:	2240      	movs	r2, #64	; 0x40
 8002acc:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002ace:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002ad2:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002ad4:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002ad6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ada:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002adc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ae0:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002ae2:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8002ae8:	2206      	movs	r2, #6
 8002aea:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002aec:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
 8002aee:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8002af0:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 2;
 8002af2:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8002af4:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002af6:	4469      	add	r1, sp
 8002af8:	f002 fd91 	bl	800561e <HAL_SDRAM_Init>
 8002afc:	b910      	cbnz	r0, 8002b04 <MX_FMC_Init+0x60>
}
 8002afe:	b009      	add	sp, #36	; 0x24
 8002b00:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8002b04:	f7ff ffae 	bl	8002a64 <Error_Handler>
 8002b08:	2003fda4 	.word	0x2003fda4
 8002b0c:	a0000140 	.word	0xa0000140

08002b10 <MX_I2C3_Init>:
{
 8002b10:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 8002b12:	4811      	ldr	r0, [pc, #68]	; (8002b58 <MX_I2C3_Init+0x48>)
 8002b14:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <MX_I2C3_Init+0x4c>)
 8002b16:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8002b18:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <MX_I2C3_Init+0x50>)
 8002b1a:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 224;
 8002b1c:	23e0      	movs	r3, #224	; 0xe0
 8002b1e:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b20:	2301      	movs	r3, #1
 8002b22:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b24:	2300      	movs	r3, #0
 8002b26:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002b28:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b2a:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b2c:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b2e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002b30:	f001 f80c 	bl	8003b4c <HAL_I2C_Init>
 8002b34:	b950      	cbnz	r0, 8002b4c <MX_I2C3_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b36:	2100      	movs	r1, #0
 8002b38:	4807      	ldr	r0, [pc, #28]	; (8002b58 <MX_I2C3_Init+0x48>)
 8002b3a:	f001 fa13 	bl	8003f64 <HAL_I2CEx_ConfigAnalogFilter>
 8002b3e:	b938      	cbnz	r0, 8002b50 <MX_I2C3_Init+0x40>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002b40:	2100      	movs	r1, #0
 8002b42:	4805      	ldr	r0, [pc, #20]	; (8002b58 <MX_I2C3_Init+0x48>)
 8002b44:	f001 fa3c 	bl	8003fc0 <HAL_I2CEx_ConfigDigitalFilter>
 8002b48:	b920      	cbnz	r0, 8002b54 <MX_I2C3_Init+0x44>
}
 8002b4a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002b4c:	f7ff ff8a 	bl	8002a64 <Error_Handler>
    Error_Handler();
 8002b50:	f7ff ff88 	bl	8002a64 <Error_Handler>
    Error_Handler();
 8002b54:	f7ff ff86 	bl	8002a64 <Error_Handler>
 8002b58:	2003fc90 	.word	0x2003fc90
 8002b5c:	40005c00 	.word	0x40005c00
 8002b60:	00c0eaff 	.word	0x00c0eaff

08002b64 <MX_LTDC_Init>:
{
 8002b64:	b500      	push	{lr}
 8002b66:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002b68:	2234      	movs	r2, #52	; 0x34
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	a801      	add	r0, sp, #4
 8002b6e:	f002 ffff 	bl	8005b70 <memset>
  hltdc.Instance = LTDC;
 8002b72:	4826      	ldr	r0, [pc, #152]	; (8002c0c <MX_LTDC_Init+0xa8>)
 8002b74:	4b26      	ldr	r3, [pc, #152]	; (8002c10 <MX_LTDC_Init+0xac>)
 8002b76:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002b7c:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002b7e:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002b80:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 40;
 8002b82:	2228      	movs	r2, #40	; 0x28
 8002b84:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 9;
 8002b86:	2209      	movs	r2, #9
 8002b88:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8002b8a:	2235      	movs	r2, #53	; 0x35
 8002b8c:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002b8e:	220b      	movs	r2, #11
 8002b90:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8002b92:	f240 2215 	movw	r2, #533	; 0x215
 8002b96:	6242      	str	r2, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8002b98:	f240 121b 	movw	r2, #283	; 0x11b
 8002b9c:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8002b9e:	f240 2235 	movw	r2, #565	; 0x235
 8002ba2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8002ba4:	f240 121d 	movw	r2, #285	; 0x11d
 8002ba8:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002baa:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002bae:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002bb2:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002bb6:	f001 fb0b 	bl	80041d0 <HAL_LTDC_Init>
 8002bba:	bb18      	cbnz	r0, 8002c04 <MX_LTDC_Init+0xa0>
  pLayerCfg.WindowX0 = 0;
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 8002bc0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002bc4:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8002bc6:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 8002bc8:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002bcc:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002bce:	2002      	movs	r0, #2
 8002bd0:	9005      	str	r0, [sp, #20]
  pLayerCfg.Alpha = 255;
 8002bd2:	20ff      	movs	r0, #255	; 0xff
 8002bd4:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 8002bd6:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002bd8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002bdc:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002bde:	2005      	movs	r0, #5
 8002be0:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8002be2:	920a      	str	r2, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8002be4:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8002be6:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002be8:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002bec:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002bf0:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002bf4:	a901      	add	r1, sp, #4
 8002bf6:	4805      	ldr	r0, [pc, #20]	; (8002c0c <MX_LTDC_Init+0xa8>)
 8002bf8:	f001 fbd4 	bl	80043a4 <HAL_LTDC_ConfigLayer>
 8002bfc:	b920      	cbnz	r0, 8002c08 <MX_LTDC_Init+0xa4>
}
 8002bfe:	b00f      	add	sp, #60	; 0x3c
 8002c00:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002c04:	f7ff ff2e 	bl	8002a64 <Error_Handler>
    Error_Handler();
 8002c08:	f7ff ff2c 	bl	8002a64 <Error_Handler>
 8002c0c:	2003fcdc 	.word	0x2003fcdc
 8002c10:	40016800 	.word	0x40016800

08002c14 <MX_RTC_Init>:
{
 8002c14:	b510      	push	{r4, lr}
 8002c16:	b092      	sub	sp, #72	; 0x48
  RTC_TimeTypeDef sTime = {0};
 8002c18:	2400      	movs	r4, #0
 8002c1a:	940c      	str	r4, [sp, #48]	; 0x30
 8002c1c:	940d      	str	r4, [sp, #52]	; 0x34
 8002c1e:	940e      	str	r4, [sp, #56]	; 0x38
 8002c20:	940f      	str	r4, [sp, #60]	; 0x3c
 8002c22:	9410      	str	r4, [sp, #64]	; 0x40
 8002c24:	9411      	str	r4, [sp, #68]	; 0x44
  RTC_DateTypeDef sDate = {0};
 8002c26:	940b      	str	r4, [sp, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8002c28:	222c      	movs	r2, #44	; 0x2c
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	4668      	mov	r0, sp
 8002c2e:	f002 ff9f 	bl	8005b70 <memset>
  hrtc.Instance = RTC;
 8002c32:	4831      	ldr	r0, [pc, #196]	; (8002cf8 <MX_RTC_Init+0xe4>)
 8002c34:	4b31      	ldr	r3, [pc, #196]	; (8002cfc <MX_RTC_Init+0xe8>)
 8002c36:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002c38:	6044      	str	r4, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002c3a:	237f      	movs	r3, #127	; 0x7f
 8002c3c:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8002c3e:	23ff      	movs	r3, #255	; 0xff
 8002c40:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002c42:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c44:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c46:	6184      	str	r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c48:	f002 faac 	bl	80051a4 <HAL_RTC_Init>
 8002c4c:	2800      	cmp	r0, #0
 8002c4e:	d147      	bne.n	8002ce0 <MX_RTC_Init+0xcc>
  sTime.Hours = 0x0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  sTime.Minutes = 0x0;
 8002c56:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  sTime.Seconds = 0x0;
 8002c5a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c5e:	9310      	str	r3, [sp, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c60:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002c62:	2201      	movs	r2, #1
 8002c64:	a90c      	add	r1, sp, #48	; 0x30
 8002c66:	4824      	ldr	r0, [pc, #144]	; (8002cf8 <MX_RTC_Init+0xe4>)
 8002c68:	f002 fb0a 	bl	8005280 <HAL_RTC_SetTime>
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	d139      	bne.n	8002ce4 <MX_RTC_Init+0xd0>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002c70:	2201      	movs	r2, #1
 8002c72:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8002c76:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  sDate.Date = 0x1;
 8002c7a:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
  sDate.Year = 0x0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002c84:	a90b      	add	r1, sp, #44	; 0x2c
 8002c86:	481c      	ldr	r0, [pc, #112]	; (8002cf8 <MX_RTC_Init+0xe4>)
 8002c88:	f002 fb7a 	bl	8005380 <HAL_RTC_SetDate>
 8002c8c:	bb60      	cbnz	r0, 8002ce8 <MX_RTC_Init+0xd4>
  sAlarm.AlarmTime.Hours = 0x0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f88d 3000 	strb.w	r3, [sp]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002c94:	f88d 3001 	strb.w	r3, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002c98:	f88d 3002 	strb.w	r3, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002c9c:	9301      	str	r3, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c9e:	9304      	str	r3, [sp, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ca0:	9305      	str	r3, [sp, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002ca2:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002ca4:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002ca6:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8002cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cb2:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002cb4:	4669      	mov	r1, sp
 8002cb6:	4810      	ldr	r0, [pc, #64]	; (8002cf8 <MX_RTC_Init+0xe4>)
 8002cb8:	f002 fbd0 	bl	800545c <HAL_RTC_SetAlarm>
 8002cbc:	b9b0      	cbnz	r0, 8002cec <MX_RTC_Init+0xd8>
  sAlarm.Alarm = RTC_ALARM_B;
 8002cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cc2:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	4669      	mov	r1, sp
 8002cc8:	480b      	ldr	r0, [pc, #44]	; (8002cf8 <MX_RTC_Init+0xe4>)
 8002cca:	f002 fbc7 	bl	800545c <HAL_RTC_SetAlarm>
 8002cce:	b978      	cbnz	r0, 8002cf0 <MX_RTC_Init+0xdc>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4808      	ldr	r0, [pc, #32]	; (8002cf8 <MX_RTC_Init+0xe4>)
 8002cd6:	f002 fc71 	bl	80055bc <HAL_RTCEx_SetTimeStamp>
 8002cda:	b958      	cbnz	r0, 8002cf4 <MX_RTC_Init+0xe0>
}
 8002cdc:	b012      	add	sp, #72	; 0x48
 8002cde:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002ce0:	f7ff fec0 	bl	8002a64 <Error_Handler>
    Error_Handler();
 8002ce4:	f7ff febe 	bl	8002a64 <Error_Handler>
    Error_Handler();
 8002ce8:	f7ff febc 	bl	8002a64 <Error_Handler>
    Error_Handler();
 8002cec:	f7ff feba 	bl	8002a64 <Error_Handler>
    Error_Handler();
 8002cf0:	f7ff feb8 	bl	8002a64 <Error_Handler>
    Error_Handler();
 8002cf4:	f7ff feb6 	bl	8002a64 <Error_Handler>
 8002cf8:	2003fd84 	.word	0x2003fd84
 8002cfc:	40002800 	.word	0x40002800

08002d00 <SystemClock_Config>:
{
 8002d00:	b500      	push	{lr}
 8002d02:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d04:	2230      	movs	r2, #48	; 0x30
 8002d06:	2100      	movs	r1, #0
 8002d08:	a828      	add	r0, sp, #160	; 0xa0
 8002d0a:	f002 ff31 	bl	8005b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d0e:	2100      	movs	r1, #0
 8002d10:	9123      	str	r1, [sp, #140]	; 0x8c
 8002d12:	9124      	str	r1, [sp, #144]	; 0x90
 8002d14:	9125      	str	r1, [sp, #148]	; 0x94
 8002d16:	9126      	str	r1, [sp, #152]	; 0x98
 8002d18:	9127      	str	r1, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d1a:	2284      	movs	r2, #132	; 0x84
 8002d1c:	a802      	add	r0, sp, #8
 8002d1e:	f002 ff27 	bl	8005b70 <memset>
  HAL_PWR_EnableBkUpAccess();
 8002d22:	f001 fb95 	bl	8004450 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	4b33      	ldr	r3, [pc, #204]	; (8002df4 <SystemClock_Config+0xf4>)
 8002d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d3a:	4b2f      	ldr	r3, [pc, #188]	; (8002df8 <SystemClock_Config+0xf8>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d4a:	9301      	str	r3, [sp, #4]
 8002d4c:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002d4e:	2309      	movs	r3, #9
 8002d50:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d56:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	932d      	str	r3, [sp, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	932e      	str	r3, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d60:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002d64:	922f      	str	r2, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002d66:	2219      	movs	r2, #25
 8002d68:	9230      	str	r2, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002d6a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002d6e:	9231      	str	r2, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d70:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002d72:	2308      	movs	r3, #8
 8002d74:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d76:	a828      	add	r0, sp, #160	; 0xa0
 8002d78:	f001 fbb0 	bl	80044dc <HAL_RCC_OscConfig>
 8002d7c:	2800      	cmp	r0, #0
 8002d7e:	d131      	bne.n	8002de4 <SystemClock_Config+0xe4>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002d80:	f001 fb6e 	bl	8004460 <HAL_PWREx_EnableOverDrive>
 8002d84:	2800      	cmp	r0, #0
 8002d86:	d12f      	bne.n	8002de8 <SystemClock_Config+0xe8>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d88:	230f      	movs	r3, #15
 8002d8a:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d90:	2300      	movs	r3, #0
 8002d92:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d94:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d98:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d9e:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002da0:	2106      	movs	r1, #6
 8002da2:	a823      	add	r0, sp, #140	; 0x8c
 8002da4:	f001 fe06 	bl	80049b4 <HAL_RCC_ClockConfig>
 8002da8:	bb00      	cbnz	r0, 8002dec <SystemClock_Config+0xec>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8002daa:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <SystemClock_Config+0xfc>)
 8002dac:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8002dae:	2364      	movs	r3, #100	; 0x64
 8002db0:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002db2:	2302      	movs	r3, #2
 8002db4:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002db6:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8002db8:	2300      	movs	r3, #0
 8002dba:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	920c      	str	r2, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002dc0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002dc4:	920d      	str	r2, [sp, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dca:	920e      	str	r2, [sp, #56]	; 0x38
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002dcc:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8002dce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dd2:	9221      	str	r2, [sp, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8002dd4:	9322      	str	r3, [sp, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dd6:	a802      	add	r0, sp, #8
 8002dd8:	f001 fed6 	bl	8004b88 <HAL_RCCEx_PeriphCLKConfig>
 8002ddc:	b940      	cbnz	r0, 8002df0 <SystemClock_Config+0xf0>
}
 8002dde:	b035      	add	sp, #212	; 0xd4
 8002de0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002de4:	f7ff fe3e 	bl	8002a64 <Error_Handler>
    Error_Handler();
 8002de8:	f7ff fe3c 	bl	8002a64 <Error_Handler>
    Error_Handler();
 8002dec:	f7ff fe3a 	bl	8002a64 <Error_Handler>
    Error_Handler();
 8002df0:	f7ff fe38 	bl	8002a64 <Error_Handler>
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40007000 	.word	0x40007000
 8002dfc:	00a10028 	.word	0x00a10028

08002e00 <main>:
{
 8002e00:	b508      	push	{r3, lr}
  MPU_Config();
 8002e02:	f7ff fb53 	bl	80024ac <MPU_Config>
  HAL_Init();
 8002e06:	f000 fa2d 	bl	8003264 <HAL_Init>
  SystemClock_Config();
 8002e0a:	f7ff ff79 	bl	8002d00 <SystemClock_Config>
  HAL_Delay(500);
 8002e0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e12:	f000 fa4b 	bl	80032ac <HAL_Delay>
  MX_GPIO_Init();
 8002e16:	f7ff fb75 	bl	8002504 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8002e1a:	f7ff fe25 	bl	8002a68 <MX_DMA2D_Init>
  MX_FMC_Init();
 8002e1e:	f7ff fe41 	bl	8002aa4 <MX_FMC_Init>
  MX_I2C3_Init();
 8002e22:	f7ff fe75 	bl	8002b10 <MX_I2C3_Init>
  MX_LTDC_Init();
 8002e26:	f7ff fe9d 	bl	8002b64 <MX_LTDC_Init>
  MX_RTC_Init();
 8002e2a:	f7ff fef3 	bl	8002c14 <MX_RTC_Init>
	  MainFunc ();
 8002e2e:	f7ff f905 	bl	800203c <MainFunc>
  while (1)
 8002e32:	e7fc      	b.n	8002e2e <main+0x2e>

08002e34 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e36:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002e38:	2300      	movs	r3, #0
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	9302      	str	r3, [sp, #8]
 8002e3e:	9303      	str	r3, [sp, #12]
 8002e40:	9304      	str	r3, [sp, #16]
 8002e42:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8002e44:	4b2a      	ldr	r3, [pc, #168]	; (8002ef0 <HAL_FMC_MspInit+0xbc>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	b10b      	cbz	r3, 8002e4e <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002e4a:	b007      	add	sp, #28
 8002e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8002e4e:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <HAL_FMC_MspInit+0xbc>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8002e54:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <HAL_FMC_MspInit+0xc0>)
 8002e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e58:	f042 0201 	orr.w	r2, r2, #1
 8002e5c:	639a      	str	r2, [r3, #56]	; 0x38
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002e68:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002e6c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6e:	2602      	movs	r6, #2
 8002e70:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e72:	2503      	movs	r5, #3
 8002e74:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e76:	240c      	movs	r4, #12
 8002e78:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e7a:	a901      	add	r1, sp, #4
 8002e7c:	481e      	ldr	r0, [pc, #120]	; (8002ef8 <HAL_FMC_MspInit+0xc4>)
 8002e7e:	f000 fbfd 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002e82:	f248 1333 	movw	r3, #33075	; 0x8133
 8002e86:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e88:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	2700      	movs	r7, #0
 8002e8c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e90:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e92:	a901      	add	r1, sp, #4
 8002e94:	4819      	ldr	r0, [pc, #100]	; (8002efc <HAL_FMC_MspInit+0xc8>)
 8002e96:	f000 fbf1 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002e9a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002e9e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea0:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea2:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea4:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ea6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ea8:	a901      	add	r1, sp, #4
 8002eaa:	4815      	ldr	r0, [pc, #84]	; (8002f00 <HAL_FMC_MspInit+0xcc>)
 8002eac:	f000 fbe6 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002eb0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002eb4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb6:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb8:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eba:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ebc:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ebe:	a901      	add	r1, sp, #4
 8002ec0:	4810      	ldr	r0, [pc, #64]	; (8002f04 <HAL_FMC_MspInit+0xd0>)
 8002ec2:	f000 fbdb 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002ec6:	2328      	movs	r3, #40	; 0x28
 8002ec8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eca:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ece:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ed0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ed2:	a901      	add	r1, sp, #4
 8002ed4:	480c      	ldr	r0, [pc, #48]	; (8002f08 <HAL_FMC_MspInit+0xd4>)
 8002ed6:	f000 fbd1 	bl	800367c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002eda:	2308      	movs	r3, #8
 8002edc:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ede:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ee4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002ee6:	a901      	add	r1, sp, #4
 8002ee8:	4808      	ldr	r0, [pc, #32]	; (8002f0c <HAL_FMC_MspInit+0xd8>)
 8002eea:	f000 fbc7 	bl	800367c <HAL_GPIO_Init>
 8002eee:	e7ac      	b.n	8002e4a <HAL_FMC_MspInit+0x16>
 8002ef0:	2003fdd8 	.word	0x2003fdd8
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40021800 	.word	0x40021800
 8002f00:	40020c00 	.word	0x40020c00
 8002f04:	40021400 	.word	0x40021400
 8002f08:	40021c00 	.word	0x40021c00
 8002f0c:	40020800 	.word	0x40020800

08002f10 <HAL_MspInit>:
{
 8002f10:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f12:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <HAL_MspInit+0x2c>)
 8002f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f16:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40
 8002f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f1e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002f22:	9200      	str	r2, [sp, #0]
 8002f24:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f2c:	645a      	str	r2, [r3, #68]	; 0x44
 8002f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f34:	9301      	str	r3, [sp, #4]
 8002f36:	9b01      	ldr	r3, [sp, #4]
}
 8002f38:	b002      	add	sp, #8
 8002f3a:	4770      	bx	lr
 8002f3c:	40023800 	.word	0x40023800

08002f40 <HAL_DMA2D_MspInit>:
  if(hdma2d->Instance==DMA2D)
 8002f40:	6802      	ldr	r2, [r0, #0]
 8002f42:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <HAL_DMA2D_MspInit+0x3c>)
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d000      	beq.n	8002f4a <HAL_DMA2D_MspInit+0xa>
 8002f48:	4770      	bx	lr
{
 8002f4a:	b500      	push	{lr}
 8002f4c:	b083      	sub	sp, #12
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002f4e:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 8002f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f54:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f58:	631a      	str	r2, [r3, #48]	; 0x30
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f60:	9301      	str	r3, [sp, #4]
 8002f62:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8002f64:	2200      	movs	r2, #0
 8002f66:	4611      	mov	r1, r2
 8002f68:	205a      	movs	r0, #90	; 0x5a
 8002f6a:	f000 f9c5 	bl	80032f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002f6e:	205a      	movs	r0, #90	; 0x5a
 8002f70:	f000 f9f8 	bl	8003364 <HAL_NVIC_EnableIRQ>
}
 8002f74:	b003      	add	sp, #12
 8002f76:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f7a:	bf00      	nop
 8002f7c:	4002b000 	.word	0x4002b000

08002f80 <HAL_I2C_MspInit>:
{
 8002f80:	b510      	push	{r4, lr}
 8002f82:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f84:	2300      	movs	r3, #0
 8002f86:	9303      	str	r3, [sp, #12]
 8002f88:	9304      	str	r3, [sp, #16]
 8002f8a:	9305      	str	r3, [sp, #20]
 8002f8c:	9306      	str	r3, [sp, #24]
 8002f8e:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C3)
 8002f90:	6802      	ldr	r2, [r0, #0]
 8002f92:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <HAL_I2C_MspInit+0x64>)
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d001      	beq.n	8002f9c <HAL_I2C_MspInit+0x1c>
}
 8002f98:	b008      	add	sp, #32
 8002f9a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f9c:	4c12      	ldr	r4, [pc, #72]	; (8002fe8 <HAL_I2C_MspInit+0x68>)
 8002f9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa4:	6323      	str	r3, [r4, #48]	; 0x30
 8002fa6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fac:	9301      	str	r3, [sp, #4]
 8002fae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002fb0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002fb4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fb6:	2312      	movs	r3, #18
 8002fb8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002fc6:	a903      	add	r1, sp, #12
 8002fc8:	4808      	ldr	r0, [pc, #32]	; (8002fec <HAL_I2C_MspInit+0x6c>)
 8002fca:	f000 fb57 	bl	800367c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002fce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fd4:	6423      	str	r3, [r4, #64]	; 0x40
 8002fd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fdc:	9302      	str	r3, [sp, #8]
 8002fde:	9b02      	ldr	r3, [sp, #8]
}
 8002fe0:	e7da      	b.n	8002f98 <HAL_I2C_MspInit+0x18>
 8002fe2:	bf00      	nop
 8002fe4:	40005c00 	.word	0x40005c00
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40021c00 	.word	0x40021c00

08002ff0 <HAL_LTDC_MspInit>:
{
 8002ff0:	b570      	push	{r4, r5, r6, lr}
 8002ff2:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	9307      	str	r3, [sp, #28]
 8002ff8:	9308      	str	r3, [sp, #32]
 8002ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8002ffc:	930a      	str	r3, [sp, #40]	; 0x28
 8002ffe:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hltdc->Instance==LTDC)
 8003000:	6802      	ldr	r2, [r0, #0]
 8003002:	4b3e      	ldr	r3, [pc, #248]	; (80030fc <HAL_LTDC_MspInit+0x10c>)
 8003004:	429a      	cmp	r2, r3
 8003006:	d001      	beq.n	800300c <HAL_LTDC_MspInit+0x1c>
}
 8003008:	b00c      	add	sp, #48	; 0x30
 800300a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 800300c:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8003010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003012:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003016:	645a      	str	r2, [r3, #68]	; 0x44
 8003018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800301a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800301e:	9201      	str	r2, [sp, #4]
 8003020:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003024:	f042 0210 	orr.w	r2, r2, #16
 8003028:	631a      	str	r2, [r3, #48]	; 0x30
 800302a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800302c:	f002 0210 	and.w	r2, r2, #16
 8003030:	9202      	str	r2, [sp, #8]
 8003032:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
 800303c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800303e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003042:	9203      	str	r2, [sp, #12]
 8003044:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003048:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800304c:	631a      	str	r2, [r3, #48]	; 0x30
 800304e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003050:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8003054:	9204      	str	r2, [sp, #16]
 8003056:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800305a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
 8003060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003062:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003066:	9205      	str	r2, [sp, #20]
 8003068:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800306a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800306c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003070:	631a      	str	r2, [r3, #48]	; 0x30
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003078:	9306      	str	r3, [sp, #24]
 800307a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800307c:	2310      	movs	r3, #16
 800307e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003080:	2502      	movs	r5, #2
 8003082:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003084:	260e      	movs	r6, #14
 8003086:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003088:	a907      	add	r1, sp, #28
 800308a:	481d      	ldr	r0, [pc, #116]	; (8003100 <HAL_LTDC_MspInit+0x110>)
 800308c:	f000 faf6 	bl	800367c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003090:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003094:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003096:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2400      	movs	r4, #0
 800309a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309c:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800309e:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80030a0:	a907      	add	r1, sp, #28
 80030a2:	4818      	ldr	r0, [pc, #96]	; (8003104 <HAL_LTDC_MspInit+0x114>)
 80030a4:	f000 faea 	bl	800367c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80030a8:	23f7      	movs	r3, #247	; 0xf7
 80030aa:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ac:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b0:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80030b2:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80030b4:	a907      	add	r1, sp, #28
 80030b6:	4814      	ldr	r0, [pc, #80]	; (8003108 <HAL_LTDC_MspInit+0x118>)
 80030b8:	f000 fae0 	bl	800367c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80030bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030c0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c2:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c4:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c6:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80030c8:	2309      	movs	r3, #9
 80030ca:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80030cc:	a907      	add	r1, sp, #28
 80030ce:	480f      	ldr	r0, [pc, #60]	; (800310c <HAL_LTDC_MspInit+0x11c>)
 80030d0:	f000 fad4 	bl	800367c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80030d4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80030d8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030da:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030dc:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030de:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80030e0:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80030e2:	a907      	add	r1, sp, #28
 80030e4:	480a      	ldr	r0, [pc, #40]	; (8003110 <HAL_LTDC_MspInit+0x120>)
 80030e6:	f000 fac9 	bl	800367c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80030ea:	4622      	mov	r2, r4
 80030ec:	4621      	mov	r1, r4
 80030ee:	2058      	movs	r0, #88	; 0x58
 80030f0:	f000 f902 	bl	80032f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80030f4:	2058      	movs	r0, #88	; 0x58
 80030f6:	f000 f935 	bl	8003364 <HAL_NVIC_EnableIRQ>
}
 80030fa:	e785      	b.n	8003008 <HAL_LTDC_MspInit+0x18>
 80030fc:	40016800 	.word	0x40016800
 8003100:	40021000 	.word	0x40021000
 8003104:	40022400 	.word	0x40022400
 8003108:	40022800 	.word	0x40022800
 800310c:	40021800 	.word	0x40021800
 8003110:	40022000 	.word	0x40022000

08003114 <HAL_RTC_MspInit>:
  if(hrtc->Instance==RTC)
 8003114:	6802      	ldr	r2, [r0, #0]
 8003116:	4b05      	ldr	r3, [pc, #20]	; (800312c <HAL_RTC_MspInit+0x18>)
 8003118:	429a      	cmp	r2, r3
 800311a:	d000      	beq.n	800311e <HAL_RTC_MspInit+0xa>
}
 800311c:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 800311e:	4a04      	ldr	r2, [pc, #16]	; (8003130 <HAL_RTC_MspInit+0x1c>)
 8003120:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003126:	6713      	str	r3, [r2, #112]	; 0x70
}
 8003128:	e7f8      	b.n	800311c <HAL_RTC_MspInit+0x8>
 800312a:	bf00      	nop
 800312c:	40002800 	.word	0x40002800
 8003130:	40023800 	.word	0x40023800

08003134 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003134:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003136:	f7ff fe7d 	bl	8002e34 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800313a:	bd08      	pop	{r3, pc}

0800313c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800313c:	b500      	push	{lr}
 800313e:	b089      	sub	sp, #36	; 0x24
 8003140:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003142:	2200      	movs	r2, #0
 8003144:	2036      	movs	r0, #54	; 0x36
 8003146:	f000 f8d7 	bl	80032f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800314a:	2036      	movs	r0, #54	; 0x36
 800314c:	f000 f90a 	bl	8003364 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003150:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <HAL_InitTick+0x6c>)
 8003152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003154:	f042 0210 	orr.w	r2, r2, #16
 8003158:	641a      	str	r2, [r3, #64]	; 0x40
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	9301      	str	r3, [sp, #4]
 8003162:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003164:	a902      	add	r1, sp, #8
 8003166:	a803      	add	r0, sp, #12
 8003168:	f001 fcf0 	bl	8004b4c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800316c:	f001 fcde 	bl	8004b2c <HAL_RCC_GetPCLK1Freq>
 8003170:	0043      	lsls	r3, r0, #1
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003172:	480e      	ldr	r0, [pc, #56]	; (80031ac <HAL_InitTick+0x70>)
 8003174:	fba0 2303 	umull	r2, r3, r0, r3
 8003178:	0c9b      	lsrs	r3, r3, #18
 800317a:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800317c:	480c      	ldr	r0, [pc, #48]	; (80031b0 <HAL_InitTick+0x74>)
 800317e:	4a0d      	ldr	r2, [pc, #52]	; (80031b4 <HAL_InitTick+0x78>)
 8003180:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003182:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003186:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003188:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 800318a:	2300      	movs	r3, #0
 800318c:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800318e:	6083      	str	r3, [r0, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003190:	f002 fc08 	bl	80059a4 <HAL_TIM_Base_Init>
 8003194:	b118      	cbz	r0, 800319e <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
 8003196:	2001      	movs	r0, #1
}
 8003198:	b009      	add	sp, #36	; 0x24
 800319a:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim6);
 800319e:	4804      	ldr	r0, [pc, #16]	; (80031b0 <HAL_InitTick+0x74>)
 80031a0:	f002 fa5e 	bl	8005660 <HAL_TIM_Base_Start_IT>
 80031a4:	e7f8      	b.n	8003198 <HAL_InitTick+0x5c>
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800
 80031ac:	431bde83 	.word	0x431bde83
 80031b0:	2003fddc 	.word	0x2003fddc
 80031b4:	40001000 	.word	0x40001000

080031b8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031b8:	e7fe      	b.n	80031b8 <NMI_Handler>

080031ba <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031ba:	e7fe      	b.n	80031ba <HardFault_Handler>

080031bc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031bc:	e7fe      	b.n	80031bc <MemManage_Handler>

080031be <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031be:	e7fe      	b.n	80031be <BusFault_Handler>

080031c0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031c0:	e7fe      	b.n	80031c0 <UsageFault_Handler>

080031c2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031c2:	4770      	bx	lr

080031c4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031c4:	4770      	bx	lr

080031c6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031c6:	4770      	bx	lr

080031c8 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031c8:	4770      	bx	lr
	...

080031cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80031ce:	4802      	ldr	r0, [pc, #8]	; (80031d8 <TIM6_DAC_IRQHandler+0xc>)
 80031d0:	f002 fa92 	bl	80056f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031d4:	bd08      	pop	{r3, pc}
 80031d6:	bf00      	nop
 80031d8:	2003fddc 	.word	0x2003fddc

080031dc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80031dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80031de:	4802      	ldr	r0, [pc, #8]	; (80031e8 <LTDC_IRQHandler+0xc>)
 80031e0:	f001 f873 	bl	80042ca <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80031e4:	bd08      	pop	{r3, pc}
 80031e6:	bf00      	nop
 80031e8:	2003fcdc 	.word	0x2003fcdc

080031ec <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80031ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80031ee:	4802      	ldr	r0, [pc, #8]	; (80031f8 <DMA2D_IRQHandler+0xc>)
 80031f0:	f000 f944 	bl	800347c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80031f4:	bd08      	pop	{r3, pc}
 80031f6:	bf00      	nop
 80031f8:	2003fc50 	.word	0x2003fc50

080031fc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031fc:	4a03      	ldr	r2, [pc, #12]	; (800320c <SystemInit+0x10>)
 80031fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003202:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003206:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800320a:	4770      	bx	lr
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003248 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003214:	480d      	ldr	r0, [pc, #52]	; (800324c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003216:	490e      	ldr	r1, [pc, #56]	; (8003250 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003218:	4a0e      	ldr	r2, [pc, #56]	; (8003254 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800321a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800321c:	e002      	b.n	8003224 <LoopCopyDataInit>

0800321e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800321e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003222:	3304      	adds	r3, #4

08003224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003228:	d3f9      	bcc.n	800321e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800322a:	4a0b      	ldr	r2, [pc, #44]	; (8003258 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800322c:	4c0b      	ldr	r4, [pc, #44]	; (800325c <LoopFillZerobss+0x26>)
  movs r3, #0
 800322e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003230:	e001      	b.n	8003236 <LoopFillZerobss>

08003232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003234:	3204      	adds	r2, #4

08003236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003238:	d3fb      	bcc.n	8003232 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800323a:	f7ff ffdf 	bl	80031fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800323e:	f002 fc73 	bl	8005b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003242:	f7ff fddd 	bl	8002e00 <main>
  bx  lr    
 8003246:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003248:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800324c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003250:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003254:	080078b8 	.word	0x080078b8
  ldr r2, =_sbss
 8003258:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800325c:	2003fe2c 	.word	0x2003fe2c

08003260 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003260:	e7fe      	b.n	8003260 <ADC_IRQHandler>
	...

08003264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003264:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8003266:	4a07      	ldr	r2, [pc, #28]	; (8003284 <HAL_Init+0x20>)
 8003268:	6813      	ldr	r3, [r2, #0]
 800326a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800326e:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003270:	2003      	movs	r0, #3
 8003272:	f000 f82f 	bl	80032d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003276:	2000      	movs	r0, #0
 8003278:	f7ff ff60 	bl	800313c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800327c:	f7ff fe48 	bl	8002f10 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8003280:	2000      	movs	r0, #0
 8003282:	bd08      	pop	{r3, pc}
 8003284:	40023c00 	.word	0x40023c00

08003288 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003288:	4a03      	ldr	r2, [pc, #12]	; (8003298 <HAL_IncTick+0x10>)
 800328a:	6811      	ldr	r1, [r2, #0]
 800328c:	4b03      	ldr	r3, [pc, #12]	; (800329c <HAL_IncTick+0x14>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	440b      	add	r3, r1
 8003292:	6013      	str	r3, [r2, #0]
}
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	2003fe28 	.word	0x2003fe28
 800329c:	20000004 	.word	0x20000004

080032a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80032a0:	4b01      	ldr	r3, [pc, #4]	; (80032a8 <HAL_GetTick+0x8>)
 80032a2:	6818      	ldr	r0, [r3, #0]
}
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	2003fe28 	.word	0x2003fe28

080032ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032ac:	b538      	push	{r3, r4, r5, lr}
 80032ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80032b0:	f7ff fff6 	bl	80032a0 <HAL_GetTick>
 80032b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032b6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80032ba:	d002      	beq.n	80032c2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <HAL_Delay+0x24>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032c2:	f7ff ffed 	bl	80032a0 <HAL_GetTick>
 80032c6:	1b40      	subs	r0, r0, r5
 80032c8:	42a0      	cmp	r0, r4
 80032ca:	d3fa      	bcc.n	80032c2 <HAL_Delay+0x16>
  {
  }
}
 80032cc:	bd38      	pop	{r3, r4, r5, pc}
 80032ce:	bf00      	nop
 80032d0:	20000004 	.word	0x20000004

080032d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032d4:	4906      	ldr	r1, [pc, #24]	; (80032f0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80032d6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032dc:	041b      	lsls	r3, r3, #16
 80032de:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032e0:	0200      	lsls	r0, r0, #8
 80032e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80032e8:	4a02      	ldr	r2, [pc, #8]	; (80032f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80032ea:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80032ec:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80032ee:	4770      	bx	lr
 80032f0:	e000ed00 	.word	0xe000ed00
 80032f4:	05fa0000 	.word	0x05fa0000

080032f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032f8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032fa:	4b17      	ldr	r3, [pc, #92]	; (8003358 <HAL_NVIC_SetPriority+0x60>)
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003302:	f1c3 0c07 	rsb	ip, r3, #7
 8003306:	f1bc 0f04 	cmp.w	ip, #4
 800330a:	bf28      	it	cs
 800330c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003310:	f103 0e04 	add.w	lr, r3, #4
 8003314:	f1be 0f06 	cmp.w	lr, #6
 8003318:	d914      	bls.n	8003344 <HAL_NVIC_SetPriority+0x4c>
 800331a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800331c:	f04f 3eff 	mov.w	lr, #4294967295
 8003320:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003324:	ea21 010c 	bic.w	r1, r1, ip
 8003328:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800332a:	fa0e f303 	lsl.w	r3, lr, r3
 800332e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003332:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003334:	2800      	cmp	r0, #0
 8003336:	db07      	blt.n	8003348 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003338:	0109      	lsls	r1, r1, #4
 800333a:	b2c9      	uxtb	r1, r1
 800333c:	4b07      	ldr	r3, [pc, #28]	; (800335c <HAL_NVIC_SetPriority+0x64>)
 800333e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003340:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003344:	2300      	movs	r3, #0
 8003346:	e7e9      	b.n	800331c <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003348:	f000 000f 	and.w	r0, r0, #15
 800334c:	0109      	lsls	r1, r1, #4
 800334e:	b2c9      	uxtb	r1, r1
 8003350:	4b03      	ldr	r3, [pc, #12]	; (8003360 <HAL_NVIC_SetPriority+0x68>)
 8003352:	5419      	strb	r1, [r3, r0]
 8003354:	e7f4      	b.n	8003340 <HAL_NVIC_SetPriority+0x48>
 8003356:	bf00      	nop
 8003358:	e000ed00 	.word	0xe000ed00
 800335c:	e000e400 	.word	0xe000e400
 8003360:	e000ed14 	.word	0xe000ed14

08003364 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003364:	2800      	cmp	r0, #0
 8003366:	db07      	blt.n	8003378 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003368:	f000 021f 	and.w	r2, r0, #31
 800336c:	0940      	lsrs	r0, r0, #5
 800336e:	2301      	movs	r3, #1
 8003370:	4093      	lsls	r3, r2
 8003372:	4a02      	ldr	r2, [pc, #8]	; (800337c <HAL_NVIC_EnableIRQ+0x18>)
 8003374:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	e000e100 	.word	0xe000e100

08003380 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003380:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003384:	4b04      	ldr	r3, [pc, #16]	; (8003398 <HAL_MPU_Disable+0x18>)
 8003386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003388:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800338c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800338e:	2200      	movs	r2, #0
 8003390:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800339c:	f040 0001 	orr.w	r0, r0, #1
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_MPU_Enable+0x1c>)
 80033a2:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80033a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80033ac:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80033ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80033b2:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80033b6:	4770      	bx	lr
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80033bc:	7842      	ldrb	r2, [r0, #1]
 80033be:	4b16      	ldr	r3, [pc, #88]	; (8003418 <HAL_MPU_ConfigRegion+0x5c>)
 80033c0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 80033c4:	7803      	ldrb	r3, [r0, #0]
 80033c6:	b1fb      	cbz	r3, 8003408 <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80033c8:	6843      	ldr	r3, [r0, #4]
 80033ca:	4a13      	ldr	r2, [pc, #76]	; (8003418 <HAL_MPU_ConfigRegion+0x5c>)
 80033cc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80033d0:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80033d2:	7ac3      	ldrb	r3, [r0, #11]
 80033d4:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80033d6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80033da:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80033dc:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80033e0:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80033e2:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80033e6:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80033e8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80033ec:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80033ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80033f2:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80033f4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80033f8:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80033fa:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80033fe:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003400:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003402:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8003406:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8003408:	4b03      	ldr	r3, [pc, #12]	; (8003418 <HAL_MPU_ConfigRegion+0x5c>)
 800340a:	2200      	movs	r2, #0
 800340c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 8003410:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	e000ed00 	.word	0xe000ed00

0800341c <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800341c:	b338      	cbz	r0, 800346e <HAL_DMA2D_Init+0x52>
{
 800341e:	b510      	push	{r4, lr}
 8003420:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003422:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003426:	b1eb      	cbz	r3, 8003464 <HAL_DMA2D_Init+0x48>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003428:	2302      	movs	r3, #2
 800342a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800342e:	6822      	ldr	r2, [r4, #0]
 8003430:	6813      	ldr	r3, [r2, #0]
 8003432:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003436:	6861      	ldr	r1, [r4, #4]
 8003438:	430b      	orrs	r3, r1
 800343a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800343c:	6822      	ldr	r2, [r4, #0]
 800343e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003440:	f023 0307 	bic.w	r3, r3, #7
 8003444:	68a1      	ldr	r1, [r4, #8]
 8003446:	430b      	orrs	r3, r1
 8003448:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800344a:	6822      	ldr	r2, [r4, #0]
 800344c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800344e:	4b09      	ldr	r3, [pc, #36]	; (8003474 <HAL_DMA2D_Init+0x58>)
 8003450:	400b      	ands	r3, r1
 8003452:	68e1      	ldr	r1, [r4, #12]
 8003454:	430b      	orrs	r3, r1
 8003456:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003458:	2000      	movs	r0, #0
 800345a:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800345c:	2301      	movs	r3, #1
 800345e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 8003462:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8003464:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8003468:	f7ff fd6a 	bl	8002f40 <HAL_DMA2D_MspInit>
 800346c:	e7dc      	b.n	8003428 <HAL_DMA2D_Init+0xc>
    return HAL_ERROR;
 800346e:	2001      	movs	r0, #1
}
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	ffffc000 	.word	0xffffc000

08003478 <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003478:	4770      	bx	lr

0800347a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800347a:	4770      	bx	lr

0800347c <HAL_DMA2D_IRQHandler>:
{
 800347c:	b570      	push	{r4, r5, r6, lr}
 800347e:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003480:	6803      	ldr	r3, [r0, #0]
 8003482:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003484:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003486:	f015 0f01 	tst.w	r5, #1
 800348a:	d016      	beq.n	80034ba <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800348c:	f416 7f80 	tst.w	r6, #256	; 0x100
 8003490:	d013      	beq.n	80034ba <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003498:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800349a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	63c3      	str	r3, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80034a2:	6803      	ldr	r3, [r0, #0]
 80034a4:	2201      	movs	r2, #1
 80034a6:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80034a8:	2304      	movs	r3, #4
 80034aa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80034ae:	2300      	movs	r3, #0
 80034b0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80034b4:	6943      	ldr	r3, [r0, #20]
 80034b6:	b103      	cbz	r3, 80034ba <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 80034b8:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80034ba:	f015 0f20 	tst.w	r5, #32
 80034be:	d018      	beq.n	80034f2 <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 80034c0:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 80034c4:	d015      	beq.n	80034f2 <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80034c6:	6822      	ldr	r2, [r4, #0]
 80034c8:	6813      	ldr	r3, [r2, #0]
 80034ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034ce:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80034d0:	6823      	ldr	r3, [r4, #0]
 80034d2:	2220      	movs	r2, #32
 80034d4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80034d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80034d8:	f043 0302 	orr.w	r3, r3, #2
 80034dc:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80034de:	2304      	movs	r3, #4
 80034e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80034e4:	2300      	movs	r3, #0
 80034e6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80034ea:	6963      	ldr	r3, [r4, #20]
 80034ec:	b10b      	cbz	r3, 80034f2 <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 80034ee:	4620      	mov	r0, r4
 80034f0:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80034f2:	f015 0f08 	tst.w	r5, #8
 80034f6:	d018      	beq.n	800352a <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80034f8:	f416 6f00 	tst.w	r6, #2048	; 0x800
 80034fc:	d015      	beq.n	800352a <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80034fe:	6822      	ldr	r2, [r4, #0]
 8003500:	6813      	ldr	r3, [r2, #0]
 8003502:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003506:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	2208      	movs	r2, #8
 800350c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800350e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003510:	f043 0304 	orr.w	r3, r3, #4
 8003514:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003516:	2304      	movs	r3, #4
 8003518:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800351c:	2300      	movs	r3, #0
 800351e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8003522:	6963      	ldr	r3, [r4, #20]
 8003524:	b10b      	cbz	r3, 800352a <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 8003526:	4620      	mov	r0, r4
 8003528:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800352a:	f015 0f04 	tst.w	r5, #4
 800352e:	d002      	beq.n	8003536 <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003530:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8003534:	d120      	bne.n	8003578 <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003536:	f015 0f02 	tst.w	r5, #2
 800353a:	d016      	beq.n	800356a <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800353c:	f416 7f00 	tst.w	r6, #512	; 0x200
 8003540:	d013      	beq.n	800356a <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003542:	6822      	ldr	r2, [r4, #0]
 8003544:	6813      	ldr	r3, [r2, #0]
 8003546:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800354a:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800354c:	6823      	ldr	r3, [r4, #0]
 800354e:	2202      	movs	r2, #2
 8003550:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003552:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003554:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003556:	2301      	movs	r3, #1
 8003558:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800355c:	2300      	movs	r3, #0
 800355e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8003562:	6923      	ldr	r3, [r4, #16]
 8003564:	b10b      	cbz	r3, 800356a <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 8003566:	4620      	mov	r0, r4
 8003568:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800356a:	f015 0f10 	tst.w	r5, #16
 800356e:	d002      	beq.n	8003576 <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003570:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8003574:	d10c      	bne.n	8003590 <HAL_DMA2D_IRQHandler+0x114>
}
 8003576:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003578:	6822      	ldr	r2, [r4, #0]
 800357a:	6813      	ldr	r3, [r2, #0]
 800357c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003580:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	2204      	movs	r2, #4
 8003586:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003588:	4620      	mov	r0, r4
 800358a:	f7ff ff75 	bl	8003478 <HAL_DMA2D_LineEventCallback>
 800358e:	e7d2      	b.n	8003536 <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003590:	6822      	ldr	r2, [r4, #0]
 8003592:	6813      	ldr	r3, [r2, #0]
 8003594:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003598:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	2210      	movs	r2, #16
 800359e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80035a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80035a2:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80035a4:	2301      	movs	r3, #1
 80035a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80035aa:	2300      	movs	r3, #0
 80035ac:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80035b0:	4620      	mov	r0, r4
 80035b2:	f7ff ff62 	bl	800347a <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 80035b6:	e7de      	b.n	8003576 <HAL_DMA2D_IRQHandler+0xfa>

080035b8 <HAL_DMA2D_ConfigLayer>:
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80035b8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d059      	beq.n	8003674 <HAL_DMA2D_ConfigLayer+0xbc>
{
 80035c0:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 80035c2:	2301      	movs	r3, #1
 80035c4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80035c8:	2302      	movs	r3, #2
 80035ca:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80035ce:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80035d2:	69da      	ldr	r2, [r3, #28]
 80035d4:	1c8b      	adds	r3, r1, #2
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	58c3      	ldr	r3, [r0, r3]
 80035da:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80035de:	3a09      	subs	r2, #9
 80035e0:	2a01      	cmp	r2, #1
 80035e2:	d91e      	bls.n	8003622 <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80035e4:	1c8a      	adds	r2, r1, #2
 80035e6:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 80035ea:	6852      	ldr	r2, [r2, #4]
 80035ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80035f0:	bb41      	cbnz	r1, 8003644 <HAL_DMA2D_ConfigLayer+0x8c>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80035f2:	6804      	ldr	r4, [r0, #0]
 80035f4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80035f6:	4a20      	ldr	r2, [pc, #128]	; (8003678 <HAL_DMA2D_ConfigLayer+0xc0>)
 80035f8:	402a      	ands	r2, r5
 80035fa:	4313      	orrs	r3, r2
 80035fc:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80035fe:	6802      	ldr	r2, [r0, #0]
 8003600:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8003604:	699c      	ldr	r4, [r3, #24]
 8003606:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	3b09      	subs	r3, #9
 800360c:	2b01      	cmp	r3, #1
 800360e:	d910      	bls.n	8003632 <HAL_DMA2D_ConfigLayer+0x7a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003610:	2301      	movs	r3, #1
 8003612:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003616:	2300      	movs	r3, #0
 8003618:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 800361c:	4618      	mov	r0, r3
}
 800361e:	bc30      	pop	{r4, r5}
 8003620:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003622:	1c8a      	adds	r2, r1, #2
 8003624:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8003628:	6852      	ldr	r2, [r2, #4]
 800362a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800362e:	4313      	orrs	r3, r2
 8003630:	e7de      	b.n	80035f0 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003632:	3102      	adds	r1, #2
 8003634:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003638:	684b      	ldr	r3, [r1, #4]
 800363a:	6802      	ldr	r2, [r0, #0]
 800363c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003640:	6293      	str	r3, [r2, #40]	; 0x28
 8003642:	e7e5      	b.n	8003610 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003644:	6804      	ldr	r4, [r0, #0]
 8003646:	69e5      	ldr	r5, [r4, #28]
 8003648:	4a0b      	ldr	r2, [pc, #44]	; (8003678 <HAL_DMA2D_ConfigLayer+0xc0>)
 800364a:	402a      	ands	r2, r5
 800364c:	4313      	orrs	r3, r2
 800364e:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003650:	6802      	ldr	r2, [r0, #0]
 8003652:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8003656:	699c      	ldr	r4, [r3, #24]
 8003658:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	3b09      	subs	r3, #9
 800365e:	2b01      	cmp	r3, #1
 8003660:	d8d6      	bhi.n	8003610 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003662:	3102      	adds	r1, #2
 8003664:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003668:	684b      	ldr	r3, [r1, #4]
 800366a:	6802      	ldr	r2, [r0, #0]
 800366c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003670:	6213      	str	r3, [r2, #32]
 8003672:	e7cd      	b.n	8003610 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 8003674:	2002      	movs	r0, #2
}
 8003676:	4770      	bx	lr
 8003678:	00fcfff0 	.word	0x00fcfff0

0800367c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800367c:	2300      	movs	r3, #0
 800367e:	2b0f      	cmp	r3, #15
 8003680:	f200 80e4 	bhi.w	800384c <HAL_GPIO_Init+0x1d0>
{
 8003684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003686:	b083      	sub	sp, #12
 8003688:	e03a      	b.n	8003700 <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800368a:	2209      	movs	r2, #9
 800368c:	e000      	b.n	8003690 <HAL_GPIO_Init+0x14>
 800368e:	2200      	movs	r2, #0
 8003690:	40aa      	lsls	r2, r5
 8003692:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8003694:	3402      	adds	r4, #2
 8003696:	4d6e      	ldr	r5, [pc, #440]	; (8003850 <HAL_GPIO_Init+0x1d4>)
 8003698:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800369c:	4a6d      	ldr	r2, [pc, #436]	; (8003854 <HAL_GPIO_Init+0x1d8>)
 800369e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80036a0:	ea6f 020c 	mvn.w	r2, ip
 80036a4:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036a8:	684e      	ldr	r6, [r1, #4]
 80036aa:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80036ae:	d001      	beq.n	80036b4 <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 80036b0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 80036b4:	4c67      	ldr	r4, [pc, #412]	; (8003854 <HAL_GPIO_Init+0x1d8>)
 80036b6:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 80036b8:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80036ba:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036be:	684e      	ldr	r6, [r1, #4]
 80036c0:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 80036c4:	d001      	beq.n	80036ca <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 80036c6:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80036ca:	4c62      	ldr	r4, [pc, #392]	; (8003854 <HAL_GPIO_Init+0x1d8>)
 80036cc:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036ce:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80036d0:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036d4:	684e      	ldr	r6, [r1, #4]
 80036d6:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 80036da:	d001      	beq.n	80036e0 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 80036dc:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80036e0:	4c5c      	ldr	r4, [pc, #368]	; (8003854 <HAL_GPIO_Init+0x1d8>)
 80036e2:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80036e4:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80036e6:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036e8:	684d      	ldr	r5, [r1, #4]
 80036ea:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 80036ee:	d001      	beq.n	80036f4 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 80036f0:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 80036f4:	4c57      	ldr	r4, [pc, #348]	; (8003854 <HAL_GPIO_Init+0x1d8>)
 80036f6:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80036f8:	3301      	adds	r3, #1
 80036fa:	2b0f      	cmp	r3, #15
 80036fc:	f200 80a4 	bhi.w	8003848 <HAL_GPIO_Init+0x1cc>
    ioposition = ((uint32_t)0x01) << position;
 8003700:	2201      	movs	r2, #1
 8003702:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003704:	680c      	ldr	r4, [r1, #0]
 8003706:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 800370a:	ea32 0404 	bics.w	r4, r2, r4
 800370e:	d1f3      	bne.n	80036f8 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003710:	684c      	ldr	r4, [r1, #4]
 8003712:	1e65      	subs	r5, r4, #1
 8003714:	2c11      	cmp	r4, #17
 8003716:	bf18      	it	ne
 8003718:	2d01      	cmpne	r5, #1
 800371a:	d901      	bls.n	8003720 <HAL_GPIO_Init+0xa4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800371c:	2c12      	cmp	r4, #18
 800371e:	d112      	bne.n	8003746 <HAL_GPIO_Init+0xca>
        temp = GPIOx->OSPEEDR; 
 8003720:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003722:	005e      	lsls	r6, r3, #1
 8003724:	2403      	movs	r4, #3
 8003726:	40b4      	lsls	r4, r6
 8003728:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 800372c:	68cc      	ldr	r4, [r1, #12]
 800372e:	40b4      	lsls	r4, r6
 8003730:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003732:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003734:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003736:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800373a:	684c      	ldr	r4, [r1, #4]
 800373c:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8003740:	409a      	lsls	r2, r3
 8003742:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8003744:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8003746:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003748:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800374c:	2403      	movs	r4, #3
 800374e:	fa04 f40e 	lsl.w	r4, r4, lr
 8003752:	43e2      	mvns	r2, r4
 8003754:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003758:	688c      	ldr	r4, [r1, #8]
 800375a:	fa04 f40e 	lsl.w	r4, r4, lr
 800375e:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8003760:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003762:	684c      	ldr	r4, [r1, #4]
 8003764:	2c12      	cmp	r4, #18
 8003766:	bf18      	it	ne
 8003768:	2c02      	cmpne	r4, #2
 800376a:	d10f      	bne.n	800378c <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3];
 800376c:	08dd      	lsrs	r5, r3, #3
 800376e:	3508      	adds	r5, #8
 8003770:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003774:	f003 0407 	and.w	r4, r3, #7
 8003778:	00a6      	lsls	r6, r4, #2
 800377a:	240f      	movs	r4, #15
 800377c:	40b4      	lsls	r4, r6
 800377e:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003782:	690c      	ldr	r4, [r1, #16]
 8003784:	40b4      	lsls	r4, r6
 8003786:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 8003788:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 800378c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800378e:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003790:	684a      	ldr	r2, [r1, #4]
 8003792:	f002 0203 	and.w	r2, r2, #3
 8003796:	fa02 f20e 	lsl.w	r2, r2, lr
 800379a:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800379c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800379e:	684a      	ldr	r2, [r1, #4]
 80037a0:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80037a4:	d0a8      	beq.n	80036f8 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037a6:	4a2c      	ldr	r2, [pc, #176]	; (8003858 <HAL_GPIO_Init+0x1dc>)
 80037a8:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80037aa:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80037ae:	6454      	str	r4, [r2, #68]	; 0x44
 80037b0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80037b2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80037b6:	9201      	str	r2, [sp, #4]
 80037b8:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80037ba:	089c      	lsrs	r4, r3, #2
 80037bc:	1ca5      	adds	r5, r4, #2
 80037be:	4a24      	ldr	r2, [pc, #144]	; (8003850 <HAL_GPIO_Init+0x1d4>)
 80037c0:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80037c4:	f003 0203 	and.w	r2, r3, #3
 80037c8:	0095      	lsls	r5, r2, #2
 80037ca:	220f      	movs	r2, #15
 80037cc:	40aa      	lsls	r2, r5
 80037ce:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80037d2:	4a22      	ldr	r2, [pc, #136]	; (800385c <HAL_GPIO_Init+0x1e0>)
 80037d4:	4290      	cmp	r0, r2
 80037d6:	f43f af5a 	beq.w	800368e <HAL_GPIO_Init+0x12>
 80037da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037de:	4290      	cmp	r0, r2
 80037e0:	d022      	beq.n	8003828 <HAL_GPIO_Init+0x1ac>
 80037e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037e6:	4290      	cmp	r0, r2
 80037e8:	d020      	beq.n	800382c <HAL_GPIO_Init+0x1b0>
 80037ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037ee:	4290      	cmp	r0, r2
 80037f0:	d01e      	beq.n	8003830 <HAL_GPIO_Init+0x1b4>
 80037f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037f6:	4290      	cmp	r0, r2
 80037f8:	d01c      	beq.n	8003834 <HAL_GPIO_Init+0x1b8>
 80037fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037fe:	4290      	cmp	r0, r2
 8003800:	d01a      	beq.n	8003838 <HAL_GPIO_Init+0x1bc>
 8003802:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003806:	4290      	cmp	r0, r2
 8003808:	d018      	beq.n	800383c <HAL_GPIO_Init+0x1c0>
 800380a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800380e:	4290      	cmp	r0, r2
 8003810:	d016      	beq.n	8003840 <HAL_GPIO_Init+0x1c4>
 8003812:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003816:	4290      	cmp	r0, r2
 8003818:	d014      	beq.n	8003844 <HAL_GPIO_Init+0x1c8>
 800381a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800381e:	4290      	cmp	r0, r2
 8003820:	f43f af33 	beq.w	800368a <HAL_GPIO_Init+0xe>
 8003824:	220a      	movs	r2, #10
 8003826:	e733      	b.n	8003690 <HAL_GPIO_Init+0x14>
 8003828:	2201      	movs	r2, #1
 800382a:	e731      	b.n	8003690 <HAL_GPIO_Init+0x14>
 800382c:	2202      	movs	r2, #2
 800382e:	e72f      	b.n	8003690 <HAL_GPIO_Init+0x14>
 8003830:	2203      	movs	r2, #3
 8003832:	e72d      	b.n	8003690 <HAL_GPIO_Init+0x14>
 8003834:	2204      	movs	r2, #4
 8003836:	e72b      	b.n	8003690 <HAL_GPIO_Init+0x14>
 8003838:	2205      	movs	r2, #5
 800383a:	e729      	b.n	8003690 <HAL_GPIO_Init+0x14>
 800383c:	2206      	movs	r2, #6
 800383e:	e727      	b.n	8003690 <HAL_GPIO_Init+0x14>
 8003840:	2207      	movs	r2, #7
 8003842:	e725      	b.n	8003690 <HAL_GPIO_Init+0x14>
 8003844:	2208      	movs	r2, #8
 8003846:	e723      	b.n	8003690 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8003848:	b003      	add	sp, #12
 800384a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40013800 	.word	0x40013800
 8003854:	40013c00 	.word	0x40013c00
 8003858:	40023800 	.word	0x40023800
 800385c:	40020000 	.word	0x40020000

08003860 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003860:	b10a      	cbz	r2, 8003866 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003862:	6181      	str	r1, [r0, #24]
 8003864:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003866:	0409      	lsls	r1, r1, #16
 8003868:	6181      	str	r1, [r0, #24]
  }
}
 800386a:	4770      	bx	lr

0800386c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800386c:	6803      	ldr	r3, [r0, #0]
 800386e:	699a      	ldr	r2, [r3, #24]
 8003870:	f012 0f02 	tst.w	r2, #2
 8003874:	d001      	beq.n	800387a <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003876:	2200      	movs	r2, #0
 8003878:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800387a:	6803      	ldr	r3, [r0, #0]
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	f012 0f01 	tst.w	r2, #1
 8003882:	d103      	bne.n	800388c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	f042 0201 	orr.w	r2, r2, #1
 800388a:	619a      	str	r2, [r3, #24]
  }
}
 800388c:	4770      	bx	lr

0800388e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800388e:	b430      	push	{r4, r5}
 8003890:	9d02      	ldr	r5, [sp, #8]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003892:	6804      	ldr	r4, [r0, #0]
 8003894:	6860      	ldr	r0, [r4, #4]
 8003896:	ea4f 5c55 	mov.w	ip, r5, lsr #21
 800389a:	f40c 6c80 	and.w	ip, ip, #1024	; 0x400
 800389e:	f04c 7c7f 	orr.w	ip, ip, #66846720	; 0x3fc0000
 80038a2:	f44c 3c58 	orr.w	ip, ip, #221184	; 0x36000
 80038a6:	f44c 7c7f 	orr.w	ip, ip, #1020	; 0x3fc
 80038aa:	f04c 0c03 	orr.w	ip, ip, #3
 80038ae:	ea20 000c 	bic.w	r0, r0, ip
 80038b2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80038b6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80038ba:	4319      	orrs	r1, r3
 80038bc:	4329      	orrs	r1, r5
 80038be:	4301      	orrs	r1, r0
 80038c0:	6061      	str	r1, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80038c2:	bc30      	pop	{r4, r5}
 80038c4:	4770      	bx	lr

080038c6 <I2C_IsAcknowledgeFailed>:
{
 80038c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c8:	4605      	mov	r5, r0
 80038ca:	460e      	mov	r6, r1
 80038cc:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038ce:	6803      	ldr	r3, [r0, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f013 0f10 	tst.w	r3, #16
 80038d6:	d101      	bne.n	80038dc <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 80038d8:	2000      	movs	r0, #0
}
 80038da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038dc:	682b      	ldr	r3, [r5, #0]
 80038de:	699c      	ldr	r4, [r3, #24]
 80038e0:	f014 0f20 	tst.w	r4, #32
 80038e4:	d117      	bne.n	8003916 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 80038e6:	f1b6 3fff 	cmp.w	r6, #4294967295
 80038ea:	d0f7      	beq.n	80038dc <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ec:	f7ff fcd8 	bl	80032a0 <HAL_GetTick>
 80038f0:	1bc0      	subs	r0, r0, r7
 80038f2:	42b0      	cmp	r0, r6
 80038f4:	d801      	bhi.n	80038fa <I2C_IsAcknowledgeFailed+0x34>
 80038f6:	2e00      	cmp	r6, #0
 80038f8:	d1f0      	bne.n	80038dc <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038fa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80038fc:	f043 0320 	orr.w	r3, r3, #32
 8003900:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003902:	2320      	movs	r3, #32
 8003904:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003908:	2300      	movs	r3, #0
 800390a:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800390e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8003912:	2001      	movs	r0, #1
 8003914:	e7e1      	b.n	80038da <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003916:	2210      	movs	r2, #16
 8003918:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800391a:	682b      	ldr	r3, [r5, #0]
 800391c:	2420      	movs	r4, #32
 800391e:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003920:	4628      	mov	r0, r5
 8003922:	f7ff ffa3 	bl	800386c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003926:	682a      	ldr	r2, [r5, #0]
 8003928:	6853      	ldr	r3, [r2, #4]
 800392a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800392e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003932:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800393c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800393e:	f043 0304 	orr.w	r3, r3, #4
 8003942:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003944:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003948:	2300      	movs	r3, #0
 800394a:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800394e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8003952:	2001      	movs	r0, #1
 8003954:	e7c1      	b.n	80038da <I2C_IsAcknowledgeFailed+0x14>

08003956 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003956:	b570      	push	{r4, r5, r6, lr}
 8003958:	4604      	mov	r4, r0
 800395a:	460d      	mov	r5, r1
 800395c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	f013 0f02 	tst.w	r3, #2
 8003966:	d11d      	bne.n	80039a4 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003968:	4632      	mov	r2, r6
 800396a:	4629      	mov	r1, r5
 800396c:	4620      	mov	r0, r4
 800396e:	f7ff ffaa 	bl	80038c6 <I2C_IsAcknowledgeFailed>
 8003972:	b9c8      	cbnz	r0, 80039a8 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8003974:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003978:	d0f1      	beq.n	800395e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800397a:	f7ff fc91 	bl	80032a0 <HAL_GetTick>
 800397e:	1b80      	subs	r0, r0, r6
 8003980:	42a8      	cmp	r0, r5
 8003982:	d801      	bhi.n	8003988 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003984:	2d00      	cmp	r5, #0
 8003986:	d1ea      	bne.n	800395e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003988:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800398a:	f043 0320 	orr.w	r3, r3, #32
 800398e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003990:	2320      	movs	r3, #32
 8003992:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003996:	2300      	movs	r3, #0
 8003998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800399c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80039a0:	2001      	movs	r0, #1
 80039a2:	e000      	b.n	80039a6 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80039a4:	2000      	movs	r0, #0
}
 80039a6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80039a8:	2001      	movs	r0, #1
 80039aa:	e7fc      	b.n	80039a6 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080039ac <I2C_WaitOnFlagUntilTimeout>:
{
 80039ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039b0:	4606      	mov	r6, r0
 80039b2:	4688      	mov	r8, r1
 80039b4:	4617      	mov	r7, r2
 80039b6:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039b8:	6834      	ldr	r4, [r6, #0]
 80039ba:	69a4      	ldr	r4, [r4, #24]
 80039bc:	ea38 0304 	bics.w	r3, r8, r4
 80039c0:	bf0c      	ite	eq
 80039c2:	f04f 0c01 	moveq.w	ip, #1
 80039c6:	f04f 0c00 	movne.w	ip, #0
 80039ca:	45bc      	cmp	ip, r7
 80039cc:	d118      	bne.n	8003a00 <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 80039ce:	f1b5 3fff 	cmp.w	r5, #4294967295
 80039d2:	d0f1      	beq.n	80039b8 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d4:	f7ff fc64 	bl	80032a0 <HAL_GetTick>
 80039d8:	9b06      	ldr	r3, [sp, #24]
 80039da:	1ac0      	subs	r0, r0, r3
 80039dc:	42a8      	cmp	r0, r5
 80039de:	d801      	bhi.n	80039e4 <I2C_WaitOnFlagUntilTimeout+0x38>
 80039e0:	2d00      	cmp	r5, #0
 80039e2:	d1e9      	bne.n	80039b8 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039e4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80039e6:	f043 0320 	orr.w	r3, r3, #32
 80039ea:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039ec:	2320      	movs	r3, #32
 80039ee:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f2:	2300      	movs	r3, #0
 80039f4:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80039f8:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 80039fc:	2001      	movs	r0, #1
 80039fe:	e000      	b.n	8003a02 <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 8003a00:	2000      	movs	r0, #0
}
 8003a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003a08 <I2C_RequestMemoryWrite>:
{
 8003a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	4604      	mov	r4, r0
 8003a10:	4690      	mov	r8, r2
 8003a12:	461d      	mov	r5, r3
 8003a14:	9e08      	ldr	r6, [sp, #32]
 8003a16:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a18:	4b19      	ldr	r3, [pc, #100]	; (8003a80 <I2C_RequestMemoryWrite+0x78>)
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a20:	b2ea      	uxtb	r2, r5
 8003a22:	f7ff ff34 	bl	800388e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a26:	463a      	mov	r2, r7
 8003a28:	4631      	mov	r1, r6
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	f7ff ff93 	bl	8003956 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a30:	b9f8      	cbnz	r0, 8003a72 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a32:	2d01      	cmp	r5, #1
 8003a34:	d10e      	bne.n	8003a54 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	fa5f f288 	uxtb.w	r2, r8
 8003a3c:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a3e:	9700      	str	r7, [sp, #0]
 8003a40:	4633      	mov	r3, r6
 8003a42:	2200      	movs	r2, #0
 8003a44:	2180      	movs	r1, #128	; 0x80
 8003a46:	4620      	mov	r0, r4
 8003a48:	f7ff ffb0 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 8003a4c:	b9a8      	cbnz	r0, 8003a7a <I2C_RequestMemoryWrite+0x72>
}
 8003a4e:	b002      	add	sp, #8
 8003a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8003a5a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a5c:	463a      	mov	r2, r7
 8003a5e:	4631      	mov	r1, r6
 8003a60:	4620      	mov	r0, r4
 8003a62:	f7ff ff78 	bl	8003956 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a66:	b930      	cbnz	r0, 8003a76 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	fa5f f288 	uxtb.w	r2, r8
 8003a6e:	629a      	str	r2, [r3, #40]	; 0x28
 8003a70:	e7e5      	b.n	8003a3e <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8003a72:	2001      	movs	r0, #1
 8003a74:	e7eb      	b.n	8003a4e <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8003a76:	2001      	movs	r0, #1
 8003a78:	e7e9      	b.n	8003a4e <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	e7e7      	b.n	8003a4e <I2C_RequestMemoryWrite+0x46>
 8003a7e:	bf00      	nop
 8003a80:	80002000 	.word	0x80002000

08003a84 <I2C_RequestMemoryRead>:
{
 8003a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	4690      	mov	r8, r2
 8003a8e:	461d      	mov	r5, r3
 8003a90:	9e08      	ldr	r6, [sp, #32]
 8003a92:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a94:	4b18      	ldr	r3, [pc, #96]	; (8003af8 <I2C_RequestMemoryRead+0x74>)
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	2300      	movs	r3, #0
 8003a9a:	b2ea      	uxtb	r2, r5
 8003a9c:	f7ff fef7 	bl	800388e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aa0:	463a      	mov	r2, r7
 8003aa2:	4631      	mov	r1, r6
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	f7ff ff56 	bl	8003956 <I2C_WaitOnTXISFlagUntilTimeout>
 8003aaa:	b9f8      	cbnz	r0, 8003aec <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003aac:	2d01      	cmp	r5, #1
 8003aae:	d10e      	bne.n	8003ace <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	fa5f f288 	uxtb.w	r2, r8
 8003ab6:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab8:	9700      	str	r7, [sp, #0]
 8003aba:	4633      	mov	r3, r6
 8003abc:	2200      	movs	r2, #0
 8003abe:	2140      	movs	r1, #64	; 0x40
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	f7ff ff73 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 8003ac6:	b9a8      	cbnz	r0, 8003af4 <I2C_RequestMemoryRead+0x70>
}
 8003ac8:	b002      	add	sp, #8
 8003aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ace:	6823      	ldr	r3, [r4, #0]
 8003ad0:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8003ad4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad6:	463a      	mov	r2, r7
 8003ad8:	4631      	mov	r1, r6
 8003ada:	4620      	mov	r0, r4
 8003adc:	f7ff ff3b 	bl	8003956 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ae0:	b930      	cbnz	r0, 8003af0 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	fa5f f288 	uxtb.w	r2, r8
 8003ae8:	629a      	str	r2, [r3, #40]	; 0x28
 8003aea:	e7e5      	b.n	8003ab8 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8003aec:	2001      	movs	r0, #1
 8003aee:	e7eb      	b.n	8003ac8 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8003af0:	2001      	movs	r0, #1
 8003af2:	e7e9      	b.n	8003ac8 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8003af4:	2001      	movs	r0, #1
 8003af6:	e7e7      	b.n	8003ac8 <I2C_RequestMemoryRead+0x44>
 8003af8:	80002000 	.word	0x80002000

08003afc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	4605      	mov	r5, r0
 8003b00:	460c      	mov	r4, r1
 8003b02:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	f013 0f20 	tst.w	r3, #32
 8003b0c:	d11a      	bne.n	8003b44 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b0e:	4632      	mov	r2, r6
 8003b10:	4621      	mov	r1, r4
 8003b12:	4628      	mov	r0, r5
 8003b14:	f7ff fed7 	bl	80038c6 <I2C_IsAcknowledgeFailed>
 8003b18:	b9b0      	cbnz	r0, 8003b48 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b1a:	f7ff fbc1 	bl	80032a0 <HAL_GetTick>
 8003b1e:	1b80      	subs	r0, r0, r6
 8003b20:	42a0      	cmp	r0, r4
 8003b22:	d801      	bhi.n	8003b28 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8003b24:	2c00      	cmp	r4, #0
 8003b26:	d1ed      	bne.n	8003b04 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b28:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003b2a:	f043 0320 	orr.w	r3, r3, #32
 8003b2e:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b30:	2320      	movs	r3, #32
 8003b32:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b36:	2300      	movs	r3, #0
 8003b38:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003b3c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8003b40:	2001      	movs	r0, #1
}
 8003b42:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003b44:	2000      	movs	r0, #0
 8003b46:	e7fc      	b.n	8003b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8003b48:	2001      	movs	r0, #1
 8003b4a:	e7fa      	b.n	8003b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08003b4c <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	d057      	beq.n	8003c00 <HAL_I2C_Init+0xb4>
{
 8003b50:	b510      	push	{r4, lr}
 8003b52:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b54:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d041      	beq.n	8003be0 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b5c:	2324      	movs	r3, #36	; 0x24
 8003b5e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003b62:	6822      	ldr	r2, [r4, #0]
 8003b64:	6813      	ldr	r3, [r2, #0]
 8003b66:	f023 0301 	bic.w	r3, r3, #1
 8003b6a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b6c:	6863      	ldr	r3, [r4, #4]
 8003b6e:	6822      	ldr	r2, [r4, #0]
 8003b70:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003b74:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b76:	6822      	ldr	r2, [r4, #0]
 8003b78:	6893      	ldr	r3, [r2, #8]
 8003b7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b7e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b80:	68e3      	ldr	r3, [r4, #12]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d031      	beq.n	8003bea <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b86:	68a3      	ldr	r3, [r4, #8]
 8003b88:	6822      	ldr	r2, [r4, #0]
 8003b8a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8003b8e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b90:	68e3      	ldr	r3, [r4, #12]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d02f      	beq.n	8003bf6 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b96:	6822      	ldr	r2, [r4, #0]
 8003b98:	6851      	ldr	r1, [r2, #4]
 8003b9a:	4b1a      	ldr	r3, [pc, #104]	; (8003c04 <HAL_I2C_Init+0xb8>)
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ba0:	6822      	ldr	r2, [r4, #0]
 8003ba2:	68d3      	ldr	r3, [r2, #12]
 8003ba4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ba8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003baa:	6923      	ldr	r3, [r4, #16]
 8003bac:	6962      	ldr	r2, [r4, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	69a1      	ldr	r1, [r4, #24]
 8003bb2:	6822      	ldr	r2, [r4, #0]
 8003bb4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003bb8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bba:	69e3      	ldr	r3, [r4, #28]
 8003bbc:	6a21      	ldr	r1, [r4, #32]
 8003bbe:	6822      	ldr	r2, [r4, #0]
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003bc4:	6822      	ldr	r2, [r4, #0]
 8003bc6:	6813      	ldr	r3, [r2, #0]
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bce:	2000      	movs	r0, #0
 8003bd0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bd2:	2320      	movs	r3, #32
 8003bd4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bd8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bda:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8003bde:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003be0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003be4:	f7ff f9cc 	bl	8002f80 <HAL_I2C_MspInit>
 8003be8:	e7b8      	b.n	8003b5c <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bea:	68a3      	ldr	r3, [r4, #8]
 8003bec:	6822      	ldr	r2, [r4, #0]
 8003bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bf2:	6093      	str	r3, [r2, #8]
 8003bf4:	e7cc      	b.n	8003b90 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	e7ca      	b.n	8003b96 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8003c00:	2001      	movs	r0, #1
}
 8003c02:	4770      	bx	lr
 8003c04:	02008000 	.word	0x02008000

08003c08 <HAL_I2C_Mem_Write>:
{
 8003c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	460d      	mov	r5, r1
 8003c10:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8003c14:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c16:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8003c1a:	b2c9      	uxtb	r1, r1
 8003c1c:	2920      	cmp	r1, #32
 8003c1e:	f040 80bc 	bne.w	8003d9a <HAL_I2C_Mem_Write+0x192>
 8003c22:	4604      	mov	r4, r0
 8003c24:	4690      	mov	r8, r2
 8003c26:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8003c28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c2a:	f1ba 0f00 	cmp.w	sl, #0
 8003c2e:	bf18      	it	ne
 8003c30:	2b00      	cmpne	r3, #0
 8003c32:	d016      	beq.n	8003c62 <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 8003c34:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	f000 80b2 	beq.w	8003da2 <HAL_I2C_Mem_Write+0x19a>
 8003c3e:	f04f 0b01 	mov.w	fp, #1
 8003c42:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003c46:	f7ff fb2b 	bl	80032a0 <HAL_GetTick>
 8003c4a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c4c:	9000      	str	r0, [sp, #0]
 8003c4e:	2319      	movs	r3, #25
 8003c50:	465a      	mov	r2, fp
 8003c52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c56:	4620      	mov	r0, r4
 8003c58:	f7ff fea8 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 8003c5c:	b130      	cbz	r0, 8003c6c <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 8003c5e:	2001      	movs	r0, #1
 8003c60:	e09c      	b.n	8003d9c <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c66:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8003c68:	2001      	movs	r0, #1
 8003c6a:	e097      	b.n	8003d9c <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c6c:	2321      	movs	r3, #33	; 0x21
 8003c6e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c72:	2340      	movs	r3, #64	; 0x40
 8003c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003c7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c7e:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c80:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c84:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c86:	9601      	str	r6, [sp, #4]
 8003c88:	9700      	str	r7, [sp, #0]
 8003c8a:	464b      	mov	r3, r9
 8003c8c:	4642      	mov	r2, r8
 8003c8e:	4629      	mov	r1, r5
 8003c90:	4620      	mov	r0, r4
 8003c92:	f7ff feb9 	bl	8003a08 <I2C_RequestMemoryWrite>
 8003c96:	b970      	cbnz	r0, 8003cb6 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2bff      	cmp	r3, #255	; 0xff
 8003c9e:	d90f      	bls.n	8003cc0 <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ca0:	22ff      	movs	r2, #255	; 0xff
 8003ca2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cac:	4629      	mov	r1, r5
 8003cae:	4620      	mov	r0, r4
 8003cb0:	f7ff fded 	bl	800388e <I2C_TransferConfig>
 8003cb4:	e021      	b.n	8003cfa <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003cbc:	4658      	mov	r0, fp
 8003cbe:	e06d      	b.n	8003d9c <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8003cc0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003cc2:	b292      	uxth	r2, r2
 8003cc4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	f7ff fddb 	bl	800388e <I2C_TransferConfig>
 8003cd8:	e00f      	b.n	8003cfa <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8003cda:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003cdc:	b292      	uxth	r2, r2
 8003cde:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	4629      	mov	r1, r5
 8003cec:	4620      	mov	r0, r4
 8003cee:	f7ff fdce 	bl	800388e <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8003cf2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d033      	beq.n	8003d62 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cfa:	4632      	mov	r2, r6
 8003cfc:	4639      	mov	r1, r7
 8003cfe:	4620      	mov	r0, r4
 8003d00:	f7ff fe29 	bl	8003956 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d04:	2800      	cmp	r0, #0
 8003d06:	d14e      	bne.n	8003da6 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d08:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	7812      	ldrb	r2, [r2, #0]
 8003d0e:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d12:	3301      	adds	r3, #1
 8003d14:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003d16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003d20:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d28:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003d2a:	b292      	uxth	r2, r2
 8003d2c:	2a00      	cmp	r2, #0
 8003d2e:	d0e0      	beq.n	8003cf2 <HAL_I2C_Mem_Write+0xea>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1de      	bne.n	8003cf2 <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d34:	9600      	str	r6, [sp, #0]
 8003d36:	463b      	mov	r3, r7
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2180      	movs	r1, #128	; 0x80
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	f7ff fe35 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 8003d42:	bb90      	cbnz	r0, 8003daa <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2bff      	cmp	r3, #255	; 0xff
 8003d4a:	d9c6      	bls.n	8003cda <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d4c:	22ff      	movs	r2, #255	; 0xff
 8003d4e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d50:	2300      	movs	r3, #0
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d58:	4629      	mov	r1, r5
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	f7ff fd97 	bl	800388e <I2C_TransferConfig>
 8003d60:	e7c7      	b.n	8003cf2 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d62:	4632      	mov	r2, r6
 8003d64:	4639      	mov	r1, r7
 8003d66:	4620      	mov	r0, r4
 8003d68:	f7ff fec8 	bl	8003afc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d6c:	b9f8      	cbnz	r0, 8003dae <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	2220      	movs	r2, #32
 8003d72:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003d74:	6821      	ldr	r1, [r4, #0]
 8003d76:	684b      	ldr	r3, [r1, #4]
 8003d78:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003d7c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003d80:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003d84:	f023 0301 	bic.w	r3, r3, #1
 8003d88:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d8a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003d94:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8003d98:	e000      	b.n	8003d9c <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 8003d9a:	2002      	movs	r0, #2
}
 8003d9c:	b003      	add	sp, #12
 8003d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8003da2:	2002      	movs	r0, #2
 8003da4:	e7fa      	b.n	8003d9c <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 8003da6:	2001      	movs	r0, #1
 8003da8:	e7f8      	b.n	8003d9c <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 8003daa:	2001      	movs	r0, #1
 8003dac:	e7f6      	b.n	8003d9c <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 8003dae:	2001      	movs	r0, #1
 8003db0:	e7f4      	b.n	8003d9c <HAL_I2C_Mem_Write+0x194>
	...

08003db4 <HAL_I2C_Mem_Read>:
{
 8003db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db8:	b083      	sub	sp, #12
 8003dba:	460d      	mov	r5, r1
 8003dbc:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8003dc0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc2:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8003dc6:	b2c9      	uxtb	r1, r1
 8003dc8:	2920      	cmp	r1, #32
 8003dca:	f040 80bd 	bne.w	8003f48 <HAL_I2C_Mem_Read+0x194>
 8003dce:	4604      	mov	r4, r0
 8003dd0:	4690      	mov	r8, r2
 8003dd2:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8003dd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003dd6:	f1ba 0f00 	cmp.w	sl, #0
 8003dda:	bf18      	it	ne
 8003ddc:	2b00      	cmpne	r3, #0
 8003dde:	d016      	beq.n	8003e0e <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 8003de0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	f000 80b3 	beq.w	8003f50 <HAL_I2C_Mem_Read+0x19c>
 8003dea:	f04f 0b01 	mov.w	fp, #1
 8003dee:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003df2:	f7ff fa55 	bl	80032a0 <HAL_GetTick>
 8003df6:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003df8:	9000      	str	r0, [sp, #0]
 8003dfa:	2319      	movs	r3, #25
 8003dfc:	465a      	mov	r2, fp
 8003dfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e02:	4620      	mov	r0, r4
 8003e04:	f7ff fdd2 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 8003e08:	b130      	cbz	r0, 8003e18 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	e09d      	b.n	8003f4a <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e12:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8003e14:	2001      	movs	r0, #1
 8003e16:	e098      	b.n	8003f4a <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e18:	2322      	movs	r3, #34	; 0x22
 8003e1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e1e:	2340      	movs	r3, #64	; 0x40
 8003e20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e24:	2300      	movs	r3, #0
 8003e26:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003e28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e2a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e2c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e30:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e32:	9601      	str	r6, [sp, #4]
 8003e34:	9700      	str	r7, [sp, #0]
 8003e36:	464b      	mov	r3, r9
 8003e38:	4642      	mov	r2, r8
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	f7ff fe21 	bl	8003a84 <I2C_RequestMemoryRead>
 8003e42:	b970      	cbnz	r0, 8003e62 <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2bff      	cmp	r3, #255	; 0xff
 8003e4a:	d90f      	bls.n	8003e6c <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e4c:	22ff      	movs	r2, #255	; 0xff
 8003e4e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003e50:	4b43      	ldr	r3, [pc, #268]	; (8003f60 <HAL_I2C_Mem_Read+0x1ac>)
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e58:	4629      	mov	r1, r5
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	f7ff fd17 	bl	800388e <I2C_TransferConfig>
 8003e60:	e021      	b.n	8003ea6 <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 8003e62:	2300      	movs	r3, #0
 8003e64:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003e68:	4658      	mov	r0, fp
 8003e6a:	e06e      	b.n	8003f4a <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8003e6c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003e6e:	b292      	uxth	r2, r2
 8003e70:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003e72:	4b3b      	ldr	r3, [pc, #236]	; (8003f60 <HAL_I2C_Mem_Read+0x1ac>)
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	4629      	mov	r1, r5
 8003e7e:	4620      	mov	r0, r4
 8003e80:	f7ff fd05 	bl	800388e <I2C_TransferConfig>
 8003e84:	e00f      	b.n	8003ea6 <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8003e86:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003e88:	b292      	uxth	r2, r2
 8003e8a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e94:	b2d2      	uxtb	r2, r2
 8003e96:	4629      	mov	r1, r5
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f7ff fcf8 	bl	800388e <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8003e9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d034      	beq.n	8003f10 <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003ea6:	9600      	str	r6, [sp, #0]
 8003ea8:	463b      	mov	r3, r7
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2104      	movs	r1, #4
 8003eae:	4620      	mov	r0, r4
 8003eb0:	f7ff fd7c 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	d14d      	bne.n	8003f54 <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ebe:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003ec6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003ec8:	3a01      	subs	r2, #1
 8003eca:	b292      	uxth	r2, r2
 8003ecc:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003ece:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ed8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0de      	beq.n	8003e9e <HAL_I2C_Mem_Read+0xea>
 8003ee0:	2a00      	cmp	r2, #0
 8003ee2:	d1dc      	bne.n	8003e9e <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ee4:	9600      	str	r6, [sp, #0]
 8003ee6:	463b      	mov	r3, r7
 8003ee8:	2180      	movs	r1, #128	; 0x80
 8003eea:	4620      	mov	r0, r4
 8003eec:	f7ff fd5e 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 8003ef0:	bb90      	cbnz	r0, 8003f58 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ef2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2bff      	cmp	r3, #255	; 0xff
 8003ef8:	d9c5      	bls.n	8003e86 <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003efa:	22ff      	movs	r2, #255	; 0xff
 8003efc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003efe:	2300      	movs	r3, #0
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f06:	4629      	mov	r1, r5
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f7ff fcc0 	bl	800388e <I2C_TransferConfig>
 8003f0e:	e7c6      	b.n	8003e9e <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f10:	4632      	mov	r2, r6
 8003f12:	4639      	mov	r1, r7
 8003f14:	4620      	mov	r0, r4
 8003f16:	f7ff fdf1 	bl	8003afc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f1a:	b9f8      	cbnz	r0, 8003f5c <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003f22:	6821      	ldr	r1, [r4, #0]
 8003f24:	684b      	ldr	r3, [r1, #4]
 8003f26:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003f2a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003f2e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003f32:	f023 0301 	bic.w	r3, r3, #1
 8003f36:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f38:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003f42:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8003f46:	e000      	b.n	8003f4a <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 8003f48:	2002      	movs	r0, #2
}
 8003f4a:	b003      	add	sp, #12
 8003f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8003f50:	2002      	movs	r0, #2
 8003f52:	e7fa      	b.n	8003f4a <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 8003f54:	2001      	movs	r0, #1
 8003f56:	e7f8      	b.n	8003f4a <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 8003f58:	2001      	movs	r0, #1
 8003f5a:	e7f6      	b.n	8003f4a <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	e7f4      	b.n	8003f4a <HAL_I2C_Mem_Read+0x196>
 8003f60:	80002400 	.word	0x80002400

08003f64 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f64:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d124      	bne.n	8003fb8 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f6e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d022      	beq.n	8003fbc <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8003f76:	2301      	movs	r3, #1
 8003f78:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f7c:	2324      	movs	r3, #36	; 0x24
 8003f7e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f82:	6802      	ldr	r2, [r0, #0]
 8003f84:	6813      	ldr	r3, [r2, #0]
 8003f86:	f023 0301 	bic.w	r3, r3, #1
 8003f8a:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f8c:	6802      	ldr	r2, [r0, #0]
 8003f8e:	6813      	ldr	r3, [r2, #0]
 8003f90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f94:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f96:	6802      	ldr	r2, [r0, #0]
 8003f98:	6813      	ldr	r3, [r2, #0]
 8003f9a:	4319      	orrs	r1, r3
 8003f9c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f9e:	6802      	ldr	r2, [r0, #0]
 8003fa0:	6813      	ldr	r3, [r2, #0]
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa8:	2320      	movs	r3, #32
 8003faa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8003fb8:	2002      	movs	r0, #2
 8003fba:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003fbc:	2002      	movs	r0, #2
  }
}
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b20      	cmp	r3, #32
 8003fc8:	d122      	bne.n	8004010 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fca:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d020      	beq.n	8004014 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fd8:	2324      	movs	r3, #36	; 0x24
 8003fda:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fde:	6802      	ldr	r2, [r0, #0]
 8003fe0:	6813      	ldr	r3, [r2, #0]
 8003fe2:	f023 0301 	bic.w	r3, r3, #1
 8003fe6:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fe8:	6802      	ldr	r2, [r0, #0]
 8003fea:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ff0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ff4:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ff6:	6802      	ldr	r2, [r0, #0]
 8003ff8:	6813      	ldr	r3, [r2, #0]
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004000:	2320      	movs	r3, #32
 8004002:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004006:	2300      	movs	r3, #0
 8004008:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800400c:	4618      	mov	r0, r3
 800400e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004010:	2002      	movs	r0, #2
 8004012:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004014:	2002      	movs	r0, #2
  }
}
 8004016:	4770      	bx	lr

08004018 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004018:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800401a:	684d      	ldr	r5, [r1, #4]
 800401c:	6804      	ldr	r4, [r0, #0]
 800401e:	68e3      	ldr	r3, [r4, #12]
 8004020:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8004024:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004026:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 800402a:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800402e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004032:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004036:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800403a:	680b      	ldr	r3, [r1, #0]
 800403c:	6804      	ldr	r4, [r0, #0]
 800403e:	68e6      	ldr	r6, [r4, #12]
 8004040:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8004044:	4433      	add	r3, r6
 8004046:	3301      	adds	r3, #1
 8004048:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800404c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8004050:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004054:	68cd      	ldr	r5, [r1, #12]
 8004056:	6804      	ldr	r4, [r0, #0]
 8004058:	68e3      	ldr	r3, [r4, #12]
 800405a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800405e:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004060:	eb04 1ec2 	add.w	lr, r4, r2, lsl #7
 8004064:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8004068:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800406c:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004070:	688b      	ldr	r3, [r1, #8]
 8004072:	6804      	ldr	r4, [r0, #0]
 8004074:	68e6      	ldr	r6, [r4, #12]
 8004076:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 800407a:	4473      	add	r3, lr
 800407c:	3301      	adds	r3, #1
 800407e:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8004082:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8004086:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800408a:	6803      	ldr	r3, [r0, #0]
 800408c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8004090:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8004094:	f024 0407 	bic.w	r4, r4, #7
 8004098:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800409c:	6803      	ldr	r3, [r0, #0]
 800409e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80040a2:	690c      	ldr	r4, [r1, #16]
 80040a4:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80040a8:	f891 7031 	ldrb.w	r7, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80040ac:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80040b0:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80040b2:	6804      	ldr	r4, [r0, #0]
 80040b4:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 80040b8:	f104 0e84 	add.w	lr, r4, #132	; 0x84
 80040bc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80040c0:	2400      	movs	r4, #0
 80040c2:	f8ce 4018 	str.w	r4, [lr, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80040c6:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 80040ca:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80040ce:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80040d2:	6806      	ldr	r6, [r0, #0]
 80040d4:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 80040d8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80040dc:	f8ce 309c 	str.w	r3, [lr, #156]	; 0x9c
 80040e0:	f10e 0e84 	add.w	lr, lr, #132	; 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80040e4:	6803      	ldr	r3, [r0, #0]
 80040e6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80040ea:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 80040ee:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80040f2:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80040f6:	6803      	ldr	r3, [r0, #0]
 80040f8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80040fc:	694d      	ldr	r5, [r1, #20]
 80040fe:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004102:	6803      	ldr	r3, [r0, #0]
 8004104:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8004108:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 800410c:	4d2e      	ldr	r5, [pc, #184]	; (80041c8 <LTDC_SetConfig+0x1b0>)
 800410e:	4035      	ands	r5, r6
 8004110:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004114:	6a0d      	ldr	r5, [r1, #32]
 8004116:	6803      	ldr	r3, [r0, #0]
 8004118:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800411c:	69ce      	ldr	r6, [r1, #28]
 800411e:	4335      	orrs	r5, r6
 8004120:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004124:	6803      	ldr	r3, [r0, #0]
 8004126:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800412a:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 800412e:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004132:	6803      	ldr	r3, [r0, #0]
 8004134:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 8004138:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800413a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800413e:	690b      	ldr	r3, [r1, #16]
 8004140:	b16b      	cbz	r3, 800415e <LTDC_SetConfig+0x146>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004142:	2b01      	cmp	r3, #1
 8004144:	d039      	beq.n	80041ba <LTDC_SetConfig+0x1a2>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004146:	2b02      	cmp	r3, #2
 8004148:	bf18      	it	ne
 800414a:	2b04      	cmpne	r3, #4
 800414c:	d037      	beq.n	80041be <LTDC_SetConfig+0x1a6>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800414e:	2b03      	cmp	r3, #3
 8004150:	d037      	beq.n	80041c2 <LTDC_SetConfig+0x1aa>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004152:	2b07      	cmp	r3, #7
 8004154:	d001      	beq.n	800415a <LTDC_SetConfig+0x142>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8004156:	2501      	movs	r5, #1
 8004158:	e002      	b.n	8004160 <LTDC_SetConfig+0x148>
    tmp = 2U;
 800415a:	2502      	movs	r5, #2
 800415c:	e000      	b.n	8004160 <LTDC_SetConfig+0x148>
    tmp = 4U;
 800415e:	2504      	movs	r5, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004160:	6802      	ldr	r2, [r0, #0]
 8004162:	4462      	add	r2, ip
 8004164:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8004168:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 800416c:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004170:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004172:	fb05 f402 	mul.w	r4, r5, r2
 8004176:	684b      	ldr	r3, [r1, #4]
 8004178:	680a      	ldr	r2, [r1, #0]
 800417a:	1a9b      	subs	r3, r3, r2
 800417c:	fb05 f303 	mul.w	r3, r5, r3
 8004180:	3303      	adds	r3, #3
 8004182:	6802      	ldr	r2, [r0, #0]
 8004184:	4462      	add	r2, ip
 8004186:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800418a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800418e:	6803      	ldr	r3, [r0, #0]
 8004190:	4463      	add	r3, ip
 8004192:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8004196:	4a0d      	ldr	r2, [pc, #52]	; (80041cc <LTDC_SetConfig+0x1b4>)
 8004198:	4022      	ands	r2, r4
 800419a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800419e:	6803      	ldr	r3, [r0, #0]
 80041a0:	4463      	add	r3, ip
 80041a2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80041a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80041a8:	6803      	ldr	r3, [r0, #0]
 80041aa:	449c      	add	ip, r3
 80041ac:	f8dc 3084 	ldr.w	r3, [ip, #132]	; 0x84
 80041b0:	f043 0301 	orr.w	r3, r3, #1
 80041b4:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
}
 80041b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 80041ba:	2503      	movs	r5, #3
 80041bc:	e7d0      	b.n	8004160 <LTDC_SetConfig+0x148>
    tmp = 2U;
 80041be:	2502      	movs	r5, #2
 80041c0:	e7ce      	b.n	8004160 <LTDC_SetConfig+0x148>
 80041c2:	2502      	movs	r5, #2
 80041c4:	e7cc      	b.n	8004160 <LTDC_SetConfig+0x148>
 80041c6:	bf00      	nop
 80041c8:	fffff8f8 	.word	0xfffff8f8
 80041cc:	fffff800 	.word	0xfffff800

080041d0 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d072      	beq.n	80042ba <HAL_LTDC_Init+0xea>
{
 80041d4:	b538      	push	{r3, r4, r5, lr}
 80041d6:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80041d8:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d067      	beq.n	80042b0 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80041e0:	2302      	movs	r3, #2
 80041e2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80041e6:	6822      	ldr	r2, [r4, #0]
 80041e8:	6993      	ldr	r3, [r2, #24]
 80041ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80041ee:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80041f0:	6821      	ldr	r1, [r4, #0]
 80041f2:	698a      	ldr	r2, [r1, #24]
 80041f4:	6863      	ldr	r3, [r4, #4]
 80041f6:	68a0      	ldr	r0, [r4, #8]
 80041f8:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80041fa:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80041fc:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80041fe:	6920      	ldr	r0, [r4, #16]
 8004200:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004202:	4313      	orrs	r3, r2
 8004204:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004206:	6821      	ldr	r1, [r4, #0]
 8004208:	688a      	ldr	r2, [r1, #8]
 800420a:	4b2d      	ldr	r3, [pc, #180]	; (80042c0 <HAL_LTDC_Init+0xf0>)
 800420c:	401a      	ands	r2, r3
 800420e:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004210:	6820      	ldr	r0, [r4, #0]
 8004212:	6882      	ldr	r2, [r0, #8]
 8004214:	69a1      	ldr	r1, [r4, #24]
 8004216:	6965      	ldr	r5, [r4, #20]
 8004218:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800421c:	430a      	orrs	r2, r1
 800421e:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004220:	6821      	ldr	r1, [r4, #0]
 8004222:	68ca      	ldr	r2, [r1, #12]
 8004224:	401a      	ands	r2, r3
 8004226:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004228:	6820      	ldr	r0, [r4, #0]
 800422a:	68c2      	ldr	r2, [r0, #12]
 800422c:	6a21      	ldr	r1, [r4, #32]
 800422e:	69e5      	ldr	r5, [r4, #28]
 8004230:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8004234:	430a      	orrs	r2, r1
 8004236:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004238:	6821      	ldr	r1, [r4, #0]
 800423a:	690a      	ldr	r2, [r1, #16]
 800423c:	401a      	ands	r2, r3
 800423e:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004240:	6820      	ldr	r0, [r4, #0]
 8004242:	6902      	ldr	r2, [r0, #16]
 8004244:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004246:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004248:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800424c:	430a      	orrs	r2, r1
 800424e:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004250:	6821      	ldr	r1, [r4, #0]
 8004252:	694a      	ldr	r2, [r1, #20]
 8004254:	4013      	ands	r3, r2
 8004256:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004258:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800425a:	6821      	ldr	r1, [r4, #0]
 800425c:	694b      	ldr	r3, [r1, #20]
 800425e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004260:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004264:	4313      	orrs	r3, r2
 8004266:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004268:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800426c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8004270:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004272:	6821      	ldr	r1, [r4, #0]
 8004274:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004276:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800427a:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800427c:	6821      	ldr	r1, [r4, #0]
 800427e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004280:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004284:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8004288:	4303      	orrs	r3, r0
 800428a:	4313      	orrs	r3, r2
 800428c:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800428e:	6822      	ldr	r2, [r4, #0]
 8004290:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004292:	f043 0306 	orr.w	r3, r3, #6
 8004296:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8004298:	6822      	ldr	r2, [r4, #0]
 800429a:	6993      	ldr	r3, [r2, #24]
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80042a2:	2000      	movs	r0, #0
 80042a4:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80042a8:	2301      	movs	r3, #1
 80042aa:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80042ae:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 80042b0:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80042b4:	f7fe fe9c 	bl	8002ff0 <HAL_LTDC_MspInit>
 80042b8:	e792      	b.n	80041e0 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 80042ba:	2001      	movs	r0, #1
}
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	f000f800 	.word	0xf000f800

080042c4 <HAL_LTDC_ErrorCallback>:
}
 80042c4:	4770      	bx	lr

080042c6 <HAL_LTDC_LineEventCallback>:
}
 80042c6:	4770      	bx	lr

080042c8 <HAL_LTDC_ReloadEventCallback>:
}
 80042c8:	4770      	bx	lr

080042ca <HAL_LTDC_IRQHandler>:
{
 80042ca:	b570      	push	{r4, r5, r6, lr}
 80042cc:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80042ce:	6803      	ldr	r3, [r0, #0]
 80042d0:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80042d2:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80042d4:	f015 0f04 	tst.w	r5, #4
 80042d8:	d002      	beq.n	80042e0 <HAL_LTDC_IRQHandler+0x16>
 80042da:	f016 0f04 	tst.w	r6, #4
 80042de:	d112      	bne.n	8004306 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80042e0:	f015 0f02 	tst.w	r5, #2
 80042e4:	d002      	beq.n	80042ec <HAL_LTDC_IRQHandler+0x22>
 80042e6:	f016 0f02 	tst.w	r6, #2
 80042ea:	d121      	bne.n	8004330 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80042ec:	f015 0f01 	tst.w	r5, #1
 80042f0:	d002      	beq.n	80042f8 <HAL_LTDC_IRQHandler+0x2e>
 80042f2:	f016 0f01 	tst.w	r6, #1
 80042f6:	d132      	bne.n	800435e <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80042f8:	f015 0f08 	tst.w	r5, #8
 80042fc:	d002      	beq.n	8004304 <HAL_LTDC_IRQHandler+0x3a>
 80042fe:	f016 0f08 	tst.w	r6, #8
 8004302:	d13d      	bne.n	8004380 <HAL_LTDC_IRQHandler+0xb6>
}
 8004304:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004308:	f022 0204 	bic.w	r2, r2, #4
 800430c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800430e:	6803      	ldr	r3, [r0, #0]
 8004310:	2204      	movs	r2, #4
 8004312:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004314:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004320:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004324:	2300      	movs	r3, #0
 8004326:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800432a:	f7ff ffcb 	bl	80042c4 <HAL_LTDC_ErrorCallback>
 800432e:	e7d7      	b.n	80042e0 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004330:	6822      	ldr	r2, [r4, #0]
 8004332:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004334:	f023 0302 	bic.w	r3, r3, #2
 8004338:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	2202      	movs	r2, #2
 800433e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004340:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800434a:	2304      	movs	r3, #4
 800434c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004350:	2300      	movs	r3, #0
 8004352:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8004356:	4620      	mov	r0, r4
 8004358:	f7ff ffb4 	bl	80042c4 <HAL_LTDC_ErrorCallback>
 800435c:	e7c6      	b.n	80042ec <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800435e:	6822      	ldr	r2, [r4, #0]
 8004360:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004362:	f023 0301 	bic.w	r3, r3, #1
 8004366:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004368:	6822      	ldr	r2, [r4, #0]
 800436a:	2301      	movs	r3, #1
 800436c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800436e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004372:	2300      	movs	r3, #0
 8004374:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8004378:	4620      	mov	r0, r4
 800437a:	f7ff ffa4 	bl	80042c6 <HAL_LTDC_LineEventCallback>
 800437e:	e7bb      	b.n	80042f8 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004380:	6822      	ldr	r2, [r4, #0]
 8004382:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004384:	f023 0308 	bic.w	r3, r3, #8
 8004388:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	2208      	movs	r2, #8
 800438e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8004390:	2301      	movs	r3, #1
 8004392:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004396:	2300      	movs	r3, #0
 8004398:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800439c:	4620      	mov	r0, r4
 800439e:	f7ff ff93 	bl	80042c8 <HAL_LTDC_ReloadEventCallback>
}
 80043a2:	e7af      	b.n	8004304 <HAL_LTDC_IRQHandler+0x3a>

080043a4 <HAL_LTDC_ConfigLayer>:
{
 80043a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80043a6:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d02c      	beq.n	8004408 <HAL_LTDC_ConfigLayer+0x64>
 80043ae:	4604      	mov	r4, r0
 80043b0:	460d      	mov	r5, r1
 80043b2:	4616      	mov	r6, r2
 80043b4:	2701      	movs	r7, #1
 80043b6:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80043ba:	2302      	movs	r3, #2
 80043bc:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80043c0:	f04f 0c34 	mov.w	ip, #52	; 0x34
 80043c4:	fb0c 0c02 	mla	ip, ip, r2, r0
 80043c8:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 80043cc:	468e      	mov	lr, r1
 80043ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80043d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80043d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80043da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80043de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80043e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80043e6:	f8de 3000 	ldr.w	r3, [lr]
 80043ea:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80043ee:	4632      	mov	r2, r6
 80043f0:	4629      	mov	r1, r5
 80043f2:	4620      	mov	r0, r4
 80043f4:	f7ff fe10 	bl	8004018 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80043fc:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004400:	2000      	movs	r0, #0
 8004402:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8004406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 8004408:	2002      	movs	r0, #2
 800440a:	e7fc      	b.n	8004406 <HAL_LTDC_ConfigLayer+0x62>

0800440c <HAL_LTDC_SetAddress>:
{
 800440c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hltdc);
 800440e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004412:	2b01      	cmp	r3, #1
 8004414:	d019      	beq.n	800444a <HAL_LTDC_SetAddress+0x3e>
 8004416:	4604      	mov	r4, r0
 8004418:	2501      	movs	r5, #1
 800441a:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800441e:	2302      	movs	r3, #2
 8004420:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8004424:	2334      	movs	r3, #52	; 0x34
 8004426:	fb02 f303 	mul.w	r3, r2, r3
 800442a:	f103 0038 	add.w	r0, r3, #56	; 0x38
  pLayerCfg->FBStartAdress = Address;
 800442e:	4423      	add	r3, r4
 8004430:	65d9      	str	r1, [r3, #92]	; 0x5c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004432:	1821      	adds	r1, r4, r0
 8004434:	4620      	mov	r0, r4
 8004436:	f7ff fdef 	bl	8004018 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800443e:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004442:	2000      	movs	r0, #0
 8004444:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8004448:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hltdc);
 800444a:	2002      	movs	r0, #2
 800444c:	e7fc      	b.n	8004448 <HAL_LTDC_SetAddress+0x3c>
	...

08004450 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004450:	4a02      	ldr	r2, [pc, #8]	; (800445c <HAL_PWR_EnableBkUpAccess+0xc>)
 8004452:	6813      	ldr	r3, [r2, #0]
 8004454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004458:	6013      	str	r3, [r2, #0]
}
 800445a:	4770      	bx	lr
 800445c:	40007000 	.word	0x40007000

08004460 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004460:	b510      	push	{r4, lr}
 8004462:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004464:	4b1b      	ldr	r3, [pc, #108]	; (80044d4 <HAL_PWREx_EnableOverDrive+0x74>)
 8004466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004468:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800446c:	641a      	str	r2, [r3, #64]	; 0x40
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004474:	9301      	str	r3, [sp, #4]
 8004476:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004478:	4a17      	ldr	r2, [pc, #92]	; (80044d8 <HAL_PWREx_EnableOverDrive+0x78>)
 800447a:	6813      	ldr	r3, [r2, #0]
 800447c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004480:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004482:	f7fe ff0d 	bl	80032a0 <HAL_GetTick>
 8004486:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004488:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <HAL_PWREx_EnableOverDrive+0x78>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004490:	d108      	bne.n	80044a4 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004492:	f7fe ff05 	bl	80032a0 <HAL_GetTick>
 8004496:	1b00      	subs	r0, r0, r4
 8004498:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800449c:	d9f4      	bls.n	8004488 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800449e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 80044a0:	b002      	add	sp, #8
 80044a2:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80044a4:	4a0c      	ldr	r2, [pc, #48]	; (80044d8 <HAL_PWREx_EnableOverDrive+0x78>)
 80044a6:	6813      	ldr	r3, [r2, #0]
 80044a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ac:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80044ae:	f7fe fef7 	bl	80032a0 <HAL_GetTick>
 80044b2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044b4:	4b08      	ldr	r3, [pc, #32]	; (80044d8 <HAL_PWREx_EnableOverDrive+0x78>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80044bc:	d107      	bne.n	80044ce <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044be:	f7fe feef 	bl	80032a0 <HAL_GetTick>
 80044c2:	1b00      	subs	r0, r0, r4
 80044c4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80044c8:	d9f4      	bls.n	80044b4 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 80044ca:	2003      	movs	r0, #3
 80044cc:	e7e8      	b.n	80044a0 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 80044ce:	2000      	movs	r0, #0
 80044d0:	e7e6      	b.n	80044a0 <HAL_PWREx_EnableOverDrive+0x40>
 80044d2:	bf00      	nop
 80044d4:	40023800 	.word	0x40023800
 80044d8:	40007000 	.word	0x40007000

080044dc <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044dc:	2800      	cmp	r0, #0
 80044de:	f000 81ff 	beq.w	80048e0 <HAL_RCC_OscConfig+0x404>
{
 80044e2:	b570      	push	{r4, r5, r6, lr}
 80044e4:	b082      	sub	sp, #8
 80044e6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044e8:	6803      	ldr	r3, [r0, #0]
 80044ea:	f013 0f01 	tst.w	r3, #1
 80044ee:	d029      	beq.n	8004544 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044f0:	4b95      	ldr	r3, [pc, #596]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 030c 	and.w	r3, r3, #12
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d01a      	beq.n	8004532 <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044fc:	4b92      	ldr	r3, [pc, #584]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 030c 	and.w	r3, r3, #12
 8004504:	2b08      	cmp	r3, #8
 8004506:	d00f      	beq.n	8004528 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004508:	6863      	ldr	r3, [r4, #4]
 800450a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800450e:	d040      	beq.n	8004592 <HAL_RCC_OscConfig+0xb6>
 8004510:	2b00      	cmp	r3, #0
 8004512:	d154      	bne.n	80045be <HAL_RCC_OscConfig+0xe2>
 8004514:	4b8c      	ldr	r3, [pc, #560]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	e039      	b.n	800459c <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004528:	4b87      	ldr	r3, [pc, #540]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004530:	d0ea      	beq.n	8004508 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004532:	4b85      	ldr	r3, [pc, #532]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800453a:	d003      	beq.n	8004544 <HAL_RCC_OscConfig+0x68>
 800453c:	6863      	ldr	r3, [r4, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 81d0 	beq.w	80048e4 <HAL_RCC_OscConfig+0x408>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	f013 0f02 	tst.w	r3, #2
 800454a:	d074      	beq.n	8004636 <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800454c:	4b7e      	ldr	r3, [pc, #504]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f013 0f0c 	tst.w	r3, #12
 8004554:	d05e      	beq.n	8004614 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004556:	4b7c      	ldr	r3, [pc, #496]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b08      	cmp	r3, #8
 8004560:	d053      	beq.n	800460a <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004562:	68e3      	ldr	r3, [r4, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 8089 	beq.w	800467c <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800456a:	4a77      	ldr	r2, [pc, #476]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800456c:	6813      	ldr	r3, [r2, #0]
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004574:	f7fe fe94 	bl	80032a0 <HAL_GetTick>
 8004578:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800457a:	4b73      	ldr	r3, [pc, #460]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f013 0f02 	tst.w	r3, #2
 8004582:	d172      	bne.n	800466a <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004584:	f7fe fe8c 	bl	80032a0 <HAL_GetTick>
 8004588:	1b40      	subs	r0, r0, r5
 800458a:	2802      	cmp	r0, #2
 800458c:	d9f5      	bls.n	800457a <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 800458e:	2003      	movs	r0, #3
 8004590:	e1ad      	b.n	80048ee <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004592:	4a6d      	ldr	r2, [pc, #436]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004594:	6813      	ldr	r3, [r2, #0]
 8004596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800459a:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800459c:	6863      	ldr	r3, [r4, #4]
 800459e:	b32b      	cbz	r3, 80045ec <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80045a0:	f7fe fe7e 	bl	80032a0 <HAL_GetTick>
 80045a4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a6:	4b68      	ldr	r3, [pc, #416]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80045ae:	d1c9      	bne.n	8004544 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b0:	f7fe fe76 	bl	80032a0 <HAL_GetTick>
 80045b4:	1b40      	subs	r0, r0, r5
 80045b6:	2864      	cmp	r0, #100	; 0x64
 80045b8:	d9f5      	bls.n	80045a6 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80045ba:	2003      	movs	r0, #3
 80045bc:	e197      	b.n	80048ee <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045c2:	d009      	beq.n	80045d8 <HAL_RCC_OscConfig+0xfc>
 80045c4:	4b60      	ldr	r3, [pc, #384]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	e7e1      	b.n	800459c <HAL_RCC_OscConfig+0xc0>
 80045d8:	4b5b      	ldr	r3, [pc, #364]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	e7d7      	b.n	800459c <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 80045ec:	f7fe fe58 	bl	80032a0 <HAL_GetTick>
 80045f0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045f2:	4b55      	ldr	r3, [pc, #340]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80045fa:	d0a3      	beq.n	8004544 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045fc:	f7fe fe50 	bl	80032a0 <HAL_GetTick>
 8004600:	1b40      	subs	r0, r0, r5
 8004602:	2864      	cmp	r0, #100	; 0x64
 8004604:	d9f5      	bls.n	80045f2 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8004606:	2003      	movs	r0, #3
 8004608:	e171      	b.n	80048ee <HAL_RCC_OscConfig+0x412>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800460a:	4b4f      	ldr	r3, [pc, #316]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004612:	d1a6      	bne.n	8004562 <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004614:	4b4c      	ldr	r3, [pc, #304]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f013 0f02 	tst.w	r3, #2
 800461c:	d003      	beq.n	8004626 <HAL_RCC_OscConfig+0x14a>
 800461e:	68e3      	ldr	r3, [r4, #12]
 8004620:	2b01      	cmp	r3, #1
 8004622:	f040 8161 	bne.w	80048e8 <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004626:	4a48      	ldr	r2, [pc, #288]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004628:	6813      	ldr	r3, [r2, #0]
 800462a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800462e:	6921      	ldr	r1, [r4, #16]
 8004630:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004634:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	f013 0f08 	tst.w	r3, #8
 800463c:	d046      	beq.n	80046cc <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800463e:	6963      	ldr	r3, [r4, #20]
 8004640:	b383      	cbz	r3, 80046a4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004642:	4a41      	ldr	r2, [pc, #260]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004644:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464c:	f7fe fe28 	bl	80032a0 <HAL_GetTick>
 8004650:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004652:	4b3d      	ldr	r3, [pc, #244]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004656:	f013 0f02 	tst.w	r3, #2
 800465a:	d137      	bne.n	80046cc <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800465c:	f7fe fe20 	bl	80032a0 <HAL_GetTick>
 8004660:	1b40      	subs	r0, r0, r5
 8004662:	2802      	cmp	r0, #2
 8004664:	d9f5      	bls.n	8004652 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8004666:	2003      	movs	r0, #3
 8004668:	e141      	b.n	80048ee <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800466a:	4a37      	ldr	r2, [pc, #220]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800466c:	6813      	ldr	r3, [r2, #0]
 800466e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004672:	6921      	ldr	r1, [r4, #16]
 8004674:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	e7dc      	b.n	8004636 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 800467c:	4a32      	ldr	r2, [pc, #200]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800467e:	6813      	ldr	r3, [r2, #0]
 8004680:	f023 0301 	bic.w	r3, r3, #1
 8004684:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004686:	f7fe fe0b 	bl	80032a0 <HAL_GetTick>
 800468a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800468c:	4b2e      	ldr	r3, [pc, #184]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f013 0f02 	tst.w	r3, #2
 8004694:	d0cf      	beq.n	8004636 <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004696:	f7fe fe03 	bl	80032a0 <HAL_GetTick>
 800469a:	1b40      	subs	r0, r0, r5
 800469c:	2802      	cmp	r0, #2
 800469e:	d9f5      	bls.n	800468c <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 80046a0:	2003      	movs	r0, #3
 80046a2:	e124      	b.n	80048ee <HAL_RCC_OscConfig+0x412>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046a4:	4a28      	ldr	r2, [pc, #160]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80046a6:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80046a8:	f023 0301 	bic.w	r3, r3, #1
 80046ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ae:	f7fe fdf7 	bl	80032a0 <HAL_GetTick>
 80046b2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b4:	4b24      	ldr	r3, [pc, #144]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80046b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b8:	f013 0f02 	tst.w	r3, #2
 80046bc:	d006      	beq.n	80046cc <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046be:	f7fe fdef 	bl	80032a0 <HAL_GetTick>
 80046c2:	1b40      	subs	r0, r0, r5
 80046c4:	2802      	cmp	r0, #2
 80046c6:	d9f5      	bls.n	80046b4 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 80046c8:	2003      	movs	r0, #3
 80046ca:	e110      	b.n	80048ee <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	f013 0f04 	tst.w	r3, #4
 80046d2:	d07d      	beq.n	80047d0 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046d4:	4b1c      	ldr	r3, [pc, #112]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80046dc:	d11e      	bne.n	800471c <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80046de:	4b1a      	ldr	r3, [pc, #104]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80046e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80046e6:	641a      	str	r2, [r3, #64]	; 0x40
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ee:	9301      	str	r3, [sp, #4]
 80046f0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80046f2:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f4:	4b15      	ldr	r3, [pc, #84]	; (800474c <HAL_RCC_OscConfig+0x270>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80046fc:	d010      	beq.n	8004720 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046fe:	68a3      	ldr	r3, [r4, #8]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d025      	beq.n	8004750 <HAL_RCC_OscConfig+0x274>
 8004704:	2b00      	cmp	r3, #0
 8004706:	d13b      	bne.n	8004780 <HAL_RCC_OscConfig+0x2a4>
 8004708:	4b0f      	ldr	r3, [pc, #60]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800470a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800470c:	f022 0201 	bic.w	r2, r2, #1
 8004710:	671a      	str	r2, [r3, #112]	; 0x70
 8004712:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004714:	f022 0204 	bic.w	r2, r2, #4
 8004718:	671a      	str	r2, [r3, #112]	; 0x70
 800471a:	e01e      	b.n	800475a <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 800471c:	2500      	movs	r5, #0
 800471e:	e7e9      	b.n	80046f4 <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 8004720:	4a0a      	ldr	r2, [pc, #40]	; (800474c <HAL_RCC_OscConfig+0x270>)
 8004722:	6813      	ldr	r3, [r2, #0]
 8004724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004728:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800472a:	f7fe fdb9 	bl	80032a0 <HAL_GetTick>
 800472e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004730:	4b06      	ldr	r3, [pc, #24]	; (800474c <HAL_RCC_OscConfig+0x270>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004738:	d1e1      	bne.n	80046fe <HAL_RCC_OscConfig+0x222>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800473a:	f7fe fdb1 	bl	80032a0 <HAL_GetTick>
 800473e:	1b80      	subs	r0, r0, r6
 8004740:	2864      	cmp	r0, #100	; 0x64
 8004742:	d9f5      	bls.n	8004730 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8004744:	2003      	movs	r0, #3
 8004746:	e0d2      	b.n	80048ee <HAL_RCC_OscConfig+0x412>
 8004748:	40023800 	.word	0x40023800
 800474c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004750:	4a6e      	ldr	r2, [pc, #440]	; (800490c <HAL_RCC_OscConfig+0x430>)
 8004752:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800475a:	68a3      	ldr	r3, [r4, #8]
 800475c:	b333      	cbz	r3, 80047ac <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475e:	f7fe fd9f 	bl	80032a0 <HAL_GetTick>
 8004762:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004764:	4b69      	ldr	r3, [pc, #420]	; (800490c <HAL_RCC_OscConfig+0x430>)
 8004766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004768:	f013 0f02 	tst.w	r3, #2
 800476c:	d12f      	bne.n	80047ce <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800476e:	f7fe fd97 	bl	80032a0 <HAL_GetTick>
 8004772:	1b80      	subs	r0, r0, r6
 8004774:	f241 3388 	movw	r3, #5000	; 0x1388
 8004778:	4298      	cmp	r0, r3
 800477a:	d9f3      	bls.n	8004764 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800477c:	2003      	movs	r0, #3
 800477e:	e0b6      	b.n	80048ee <HAL_RCC_OscConfig+0x412>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004780:	2b05      	cmp	r3, #5
 8004782:	d009      	beq.n	8004798 <HAL_RCC_OscConfig+0x2bc>
 8004784:	4b61      	ldr	r3, [pc, #388]	; (800490c <HAL_RCC_OscConfig+0x430>)
 8004786:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004788:	f022 0201 	bic.w	r2, r2, #1
 800478c:	671a      	str	r2, [r3, #112]	; 0x70
 800478e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004790:	f022 0204 	bic.w	r2, r2, #4
 8004794:	671a      	str	r2, [r3, #112]	; 0x70
 8004796:	e7e0      	b.n	800475a <HAL_RCC_OscConfig+0x27e>
 8004798:	4b5c      	ldr	r3, [pc, #368]	; (800490c <HAL_RCC_OscConfig+0x430>)
 800479a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800479c:	f042 0204 	orr.w	r2, r2, #4
 80047a0:	671a      	str	r2, [r3, #112]	; 0x70
 80047a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047a4:	f042 0201 	orr.w	r2, r2, #1
 80047a8:	671a      	str	r2, [r3, #112]	; 0x70
 80047aa:	e7d6      	b.n	800475a <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ac:	f7fe fd78 	bl	80032a0 <HAL_GetTick>
 80047b0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b2:	4b56      	ldr	r3, [pc, #344]	; (800490c <HAL_RCC_OscConfig+0x430>)
 80047b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b6:	f013 0f02 	tst.w	r3, #2
 80047ba:	d008      	beq.n	80047ce <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047bc:	f7fe fd70 	bl	80032a0 <HAL_GetTick>
 80047c0:	1b80      	subs	r0, r0, r6
 80047c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80047c6:	4298      	cmp	r0, r3
 80047c8:	d9f3      	bls.n	80047b2 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 80047ca:	2003      	movs	r0, #3
 80047cc:	e08f      	b.n	80048ee <HAL_RCC_OscConfig+0x412>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047ce:	b9fd      	cbnz	r5, 8004810 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047d0:	69a3      	ldr	r3, [r4, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 808a 	beq.w	80048ec <HAL_RCC_OscConfig+0x410>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047d8:	4a4c      	ldr	r2, [pc, #304]	; (800490c <HAL_RCC_OscConfig+0x430>)
 80047da:	6892      	ldr	r2, [r2, #8]
 80047dc:	f002 020c 	and.w	r2, r2, #12
 80047e0:	2a08      	cmp	r2, #8
 80047e2:	d058      	beq.n	8004896 <HAL_RCC_OscConfig+0x3ba>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d019      	beq.n	800481c <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e8:	4a48      	ldr	r2, [pc, #288]	; (800490c <HAL_RCC_OscConfig+0x430>)
 80047ea:	6813      	ldr	r3, [r2, #0]
 80047ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f2:	f7fe fd55 	bl	80032a0 <HAL_GetTick>
 80047f6:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f8:	4b44      	ldr	r3, [pc, #272]	; (800490c <HAL_RCC_OscConfig+0x430>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004800:	d047      	beq.n	8004892 <HAL_RCC_OscConfig+0x3b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004802:	f7fe fd4d 	bl	80032a0 <HAL_GetTick>
 8004806:	1b00      	subs	r0, r0, r4
 8004808:	2802      	cmp	r0, #2
 800480a:	d9f5      	bls.n	80047f8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800480c:	2003      	movs	r0, #3
 800480e:	e06e      	b.n	80048ee <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004810:	4a3e      	ldr	r2, [pc, #248]	; (800490c <HAL_RCC_OscConfig+0x430>)
 8004812:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004818:	6413      	str	r3, [r2, #64]	; 0x40
 800481a:	e7d9      	b.n	80047d0 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 800481c:	4a3b      	ldr	r2, [pc, #236]	; (800490c <HAL_RCC_OscConfig+0x430>)
 800481e:	6813      	ldr	r3, [r2, #0]
 8004820:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004824:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004826:	f7fe fd3b 	bl	80032a0 <HAL_GetTick>
 800482a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482c:	4b37      	ldr	r3, [pc, #220]	; (800490c <HAL_RCC_OscConfig+0x430>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004834:	d006      	beq.n	8004844 <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004836:	f7fe fd33 	bl	80032a0 <HAL_GetTick>
 800483a:	1b40      	subs	r0, r0, r5
 800483c:	2802      	cmp	r0, #2
 800483e:	d9f5      	bls.n	800482c <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8004840:	2003      	movs	r0, #3
 8004842:	e054      	b.n	80048ee <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004844:	69e3      	ldr	r3, [r4, #28]
 8004846:	6a22      	ldr	r2, [r4, #32]
 8004848:	4313      	orrs	r3, r2
 800484a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800484c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004850:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004852:	0852      	lsrs	r2, r2, #1
 8004854:	3a01      	subs	r2, #1
 8004856:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800485a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800485c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004860:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004864:	4a29      	ldr	r2, [pc, #164]	; (800490c <HAL_RCC_OscConfig+0x430>)
 8004866:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8004868:	6813      	ldr	r3, [r2, #0]
 800486a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800486e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004870:	f7fe fd16 	bl	80032a0 <HAL_GetTick>
 8004874:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004876:	4b25      	ldr	r3, [pc, #148]	; (800490c <HAL_RCC_OscConfig+0x430>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800487e:	d106      	bne.n	800488e <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004880:	f7fe fd0e 	bl	80032a0 <HAL_GetTick>
 8004884:	1b00      	subs	r0, r0, r4
 8004886:	2802      	cmp	r0, #2
 8004888:	d9f5      	bls.n	8004876 <HAL_RCC_OscConfig+0x39a>
            return HAL_TIMEOUT;
 800488a:	2003      	movs	r0, #3
 800488c:	e02f      	b.n	80048ee <HAL_RCC_OscConfig+0x412>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800488e:	2000      	movs	r0, #0
 8004890:	e02d      	b.n	80048ee <HAL_RCC_OscConfig+0x412>
 8004892:	2000      	movs	r0, #0
 8004894:	e02b      	b.n	80048ee <HAL_RCC_OscConfig+0x412>
      pll_config = RCC->PLLCFGR;
 8004896:	4a1d      	ldr	r2, [pc, #116]	; (800490c <HAL_RCC_OscConfig+0x430>)
 8004898:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800489a:	2b01      	cmp	r3, #1
 800489c:	d029      	beq.n	80048f2 <HAL_RCC_OscConfig+0x416>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800489e:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80048a2:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048a4:	428b      	cmp	r3, r1
 80048a6:	d126      	bne.n	80048f6 <HAL_RCC_OscConfig+0x41a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048a8:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 80048ac:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ae:	428b      	cmp	r3, r1
 80048b0:	d123      	bne.n	80048fa <HAL_RCC_OscConfig+0x41e>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048b8:	4013      	ands	r3, r2
 80048ba:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80048be:	d11e      	bne.n	80048fe <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80048c0:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 80048c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80048c6:	085b      	lsrs	r3, r3, #1
 80048c8:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ca:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 80048ce:	d118      	bne.n	8004902 <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048d0:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80048d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80048d6:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 80048da:	d114      	bne.n	8004906 <HAL_RCC_OscConfig+0x42a>
  return HAL_OK;
 80048dc:	2000      	movs	r0, #0
 80048de:	e006      	b.n	80048ee <HAL_RCC_OscConfig+0x412>
    return HAL_ERROR;
 80048e0:	2001      	movs	r0, #1
}
 80048e2:	4770      	bx	lr
        return HAL_ERROR;
 80048e4:	2001      	movs	r0, #1
 80048e6:	e002      	b.n	80048ee <HAL_RCC_OscConfig+0x412>
        return HAL_ERROR;
 80048e8:	2001      	movs	r0, #1
 80048ea:	e000      	b.n	80048ee <HAL_RCC_OscConfig+0x412>
  return HAL_OK;
 80048ec:	2000      	movs	r0, #0
}
 80048ee:	b002      	add	sp, #8
 80048f0:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80048f2:	2001      	movs	r0, #1
 80048f4:	e7fb      	b.n	80048ee <HAL_RCC_OscConfig+0x412>
 80048f6:	2001      	movs	r0, #1
 80048f8:	e7f9      	b.n	80048ee <HAL_RCC_OscConfig+0x412>
 80048fa:	2001      	movs	r0, #1
 80048fc:	e7f7      	b.n	80048ee <HAL_RCC_OscConfig+0x412>
 80048fe:	2001      	movs	r0, #1
 8004900:	e7f5      	b.n	80048ee <HAL_RCC_OscConfig+0x412>
 8004902:	2001      	movs	r0, #1
 8004904:	e7f3      	b.n	80048ee <HAL_RCC_OscConfig+0x412>
 8004906:	2001      	movs	r0, #1
 8004908:	e7f1      	b.n	80048ee <HAL_RCC_OscConfig+0x412>
 800490a:	bf00      	nop
 800490c:	40023800 	.word	0x40023800

08004910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004910:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004912:	4b25      	ldr	r3, [pc, #148]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 030c 	and.w	r3, r3, #12
 800491a:	2b04      	cmp	r3, #4
 800491c:	d03f      	beq.n	800499e <HAL_RCC_GetSysClockFreq+0x8e>
 800491e:	2b08      	cmp	r3, #8
 8004920:	d13f      	bne.n	80049a2 <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004922:	4b21      	ldr	r3, [pc, #132]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004930:	d012      	beq.n	8004958 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004932:	4b1d      	ldr	r3, [pc, #116]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004934:	6859      	ldr	r1, [r3, #4]
 8004936:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800493a:	481c      	ldr	r0, [pc, #112]	; (80049ac <HAL_RCC_GetSysClockFreq+0x9c>)
 800493c:	2300      	movs	r3, #0
 800493e:	fba1 0100 	umull	r0, r1, r1, r0
 8004942:	f7fb ff97 	bl	8000874 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004946:	4b18      	ldr	r3, [pc, #96]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800494e:	3301      	adds	r3, #1
 8004950:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8004952:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8004956:	e025      	b.n	80049a4 <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004958:	4b13      	ldr	r3, [pc, #76]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x98>)
 800495a:	6859      	ldr	r1, [r3, #4]
 800495c:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8004960:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8004964:	ebb1 000c 	subs.w	r0, r1, ip
 8004968:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800496c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8004970:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004974:	0181      	lsls	r1, r0, #6
 8004976:	1a09      	subs	r1, r1, r0
 8004978:	eb63 030e 	sbc.w	r3, r3, lr
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004982:	00c9      	lsls	r1, r1, #3
 8004984:	eb11 0c0c 	adds.w	ip, r1, ip
 8004988:	f143 0300 	adc.w	r3, r3, #0
 800498c:	0299      	lsls	r1, r3, #10
 800498e:	2300      	movs	r3, #0
 8004990:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8004994:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8004998:	f7fb ff6c 	bl	8000874 <__aeabi_uldivmod>
 800499c:	e7d3      	b.n	8004946 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 800499e:	4803      	ldr	r0, [pc, #12]	; (80049ac <HAL_RCC_GetSysClockFreq+0x9c>)
 80049a0:	e000      	b.n	80049a4 <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049a2:	4803      	ldr	r0, [pc, #12]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80049a4:	bd08      	pop	{r3, pc}
 80049a6:	bf00      	nop
 80049a8:	40023800 	.word	0x40023800
 80049ac:	017d7840 	.word	0x017d7840
 80049b0:	00f42400 	.word	0x00f42400

080049b4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80049b4:	2800      	cmp	r0, #0
 80049b6:	f000 80a0 	beq.w	8004afa <HAL_RCC_ClockConfig+0x146>
{
 80049ba:	b570      	push	{r4, r5, r6, lr}
 80049bc:	460d      	mov	r5, r1
 80049be:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049c0:	4b52      	ldr	r3, [pc, #328]	; (8004b0c <HAL_RCC_ClockConfig+0x158>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 030f 	and.w	r3, r3, #15
 80049c8:	428b      	cmp	r3, r1
 80049ca:	d20b      	bcs.n	80049e4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049cc:	4a4f      	ldr	r2, [pc, #316]	; (8004b0c <HAL_RCC_ClockConfig+0x158>)
 80049ce:	6813      	ldr	r3, [r2, #0]
 80049d0:	f023 030f 	bic.w	r3, r3, #15
 80049d4:	430b      	orrs	r3, r1
 80049d6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d8:	6813      	ldr	r3, [r2, #0]
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	428b      	cmp	r3, r1
 80049e0:	f040 808d 	bne.w	8004afe <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	f013 0f02 	tst.w	r3, #2
 80049ea:	d017      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ec:	f013 0f04 	tst.w	r3, #4
 80049f0:	d004      	beq.n	80049fc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049f2:	4a47      	ldr	r2, [pc, #284]	; (8004b10 <HAL_RCC_ClockConfig+0x15c>)
 80049f4:	6893      	ldr	r3, [r2, #8]
 80049f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049fa:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	f013 0f08 	tst.w	r3, #8
 8004a02:	d004      	beq.n	8004a0e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a04:	4a42      	ldr	r2, [pc, #264]	; (8004b10 <HAL_RCC_ClockConfig+0x15c>)
 8004a06:	6893      	ldr	r3, [r2, #8]
 8004a08:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a0c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a0e:	4a40      	ldr	r2, [pc, #256]	; (8004b10 <HAL_RCC_ClockConfig+0x15c>)
 8004a10:	6893      	ldr	r3, [r2, #8]
 8004a12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a16:	68a1      	ldr	r1, [r4, #8]
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	f013 0f01 	tst.w	r3, #1
 8004a22:	d031      	beq.n	8004a88 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a24:	6863      	ldr	r3, [r4, #4]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d020      	beq.n	8004a6c <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d025      	beq.n	8004a7a <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2e:	4a38      	ldr	r2, [pc, #224]	; (8004b10 <HAL_RCC_ClockConfig+0x15c>)
 8004a30:	6812      	ldr	r2, [r2, #0]
 8004a32:	f012 0f02 	tst.w	r2, #2
 8004a36:	d064      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a38:	4935      	ldr	r1, [pc, #212]	; (8004b10 <HAL_RCC_ClockConfig+0x15c>)
 8004a3a:	688a      	ldr	r2, [r1, #8]
 8004a3c:	f022 0203 	bic.w	r2, r2, #3
 8004a40:	4313      	orrs	r3, r2
 8004a42:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004a44:	f7fe fc2c 	bl	80032a0 <HAL_GetTick>
 8004a48:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4a:	4b31      	ldr	r3, [pc, #196]	; (8004b10 <HAL_RCC_ClockConfig+0x15c>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 030c 	and.w	r3, r3, #12
 8004a52:	6862      	ldr	r2, [r4, #4]
 8004a54:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004a58:	d016      	beq.n	8004a88 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a5a:	f7fe fc21 	bl	80032a0 <HAL_GetTick>
 8004a5e:	1b80      	subs	r0, r0, r6
 8004a60:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a64:	4298      	cmp	r0, r3
 8004a66:	d9f0      	bls.n	8004a4a <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8004a68:	2003      	movs	r0, #3
 8004a6a:	e045      	b.n	8004af8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6c:	4a28      	ldr	r2, [pc, #160]	; (8004b10 <HAL_RCC_ClockConfig+0x15c>)
 8004a6e:	6812      	ldr	r2, [r2, #0]
 8004a70:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004a74:	d1e0      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8004a76:	2001      	movs	r0, #1
 8004a78:	e03e      	b.n	8004af8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7a:	4a25      	ldr	r2, [pc, #148]	; (8004b10 <HAL_RCC_ClockConfig+0x15c>)
 8004a7c:	6812      	ldr	r2, [r2, #0]
 8004a7e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004a82:	d1d9      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8004a84:	2001      	movs	r0, #1
 8004a86:	e037      	b.n	8004af8 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a88:	4b20      	ldr	r3, [pc, #128]	; (8004b0c <HAL_RCC_ClockConfig+0x158>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 030f 	and.w	r3, r3, #15
 8004a90:	42ab      	cmp	r3, r5
 8004a92:	d90a      	bls.n	8004aaa <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a94:	4a1d      	ldr	r2, [pc, #116]	; (8004b0c <HAL_RCC_ClockConfig+0x158>)
 8004a96:	6813      	ldr	r3, [r2, #0]
 8004a98:	f023 030f 	bic.w	r3, r3, #15
 8004a9c:	432b      	orrs	r3, r5
 8004a9e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa0:	6813      	ldr	r3, [r2, #0]
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	42ab      	cmp	r3, r5
 8004aa8:	d12d      	bne.n	8004b06 <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	f013 0f04 	tst.w	r3, #4
 8004ab0:	d006      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ab2:	4a17      	ldr	r2, [pc, #92]	; (8004b10 <HAL_RCC_ClockConfig+0x15c>)
 8004ab4:	6893      	ldr	r3, [r2, #8]
 8004ab6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004aba:	68e1      	ldr	r1, [r4, #12]
 8004abc:	430b      	orrs	r3, r1
 8004abe:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	f013 0f08 	tst.w	r3, #8
 8004ac6:	d007      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ac8:	4a11      	ldr	r2, [pc, #68]	; (8004b10 <HAL_RCC_ClockConfig+0x15c>)
 8004aca:	6893      	ldr	r3, [r2, #8]
 8004acc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004ad0:	6921      	ldr	r1, [r4, #16]
 8004ad2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004ad6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ad8:	f7ff ff1a 	bl	8004910 <HAL_RCC_GetSysClockFreq>
 8004adc:	4b0c      	ldr	r3, [pc, #48]	; (8004b10 <HAL_RCC_ClockConfig+0x15c>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004ae4:	4a0b      	ldr	r2, [pc, #44]	; (8004b14 <HAL_RCC_ClockConfig+0x160>)
 8004ae6:	5cd3      	ldrb	r3, [r2, r3]
 8004ae8:	40d8      	lsrs	r0, r3
 8004aea:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <HAL_RCC_ClockConfig+0x164>)
 8004aec:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004aee:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <HAL_RCC_ClockConfig+0x168>)
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	f7fe fb23 	bl	800313c <HAL_InitTick>
  return HAL_OK;
 8004af6:	2000      	movs	r0, #0
}
 8004af8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004afa:	2001      	movs	r0, #1
}
 8004afc:	4770      	bx	lr
      return HAL_ERROR;
 8004afe:	2001      	movs	r0, #1
 8004b00:	e7fa      	b.n	8004af8 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8004b02:	2001      	movs	r0, #1
 8004b04:	e7f8      	b.n	8004af8 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 8004b06:	2001      	movs	r0, #1
 8004b08:	e7f6      	b.n	8004af8 <HAL_RCC_ClockConfig+0x144>
 8004b0a:	bf00      	nop
 8004b0c:	40023c00 	.word	0x40023c00
 8004b10:	40023800 	.word	0x40023800
 8004b14:	08007890 	.word	0x08007890
 8004b18:	20000000 	.word	0x20000000
 8004b1c:	20000008 	.word	0x20000008

08004b20 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004b20:	4b01      	ldr	r3, [pc, #4]	; (8004b28 <HAL_RCC_GetHCLKFreq+0x8>)
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	20000000 	.word	0x20000000

08004b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b2c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b2e:	f7ff fff7 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b32:	4b04      	ldr	r3, [pc, #16]	; (8004b44 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004b3a:	4a03      	ldr	r2, [pc, #12]	; (8004b48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004b3c:	5cd3      	ldrb	r3, [r2, r3]
}
 8004b3e:	40d8      	lsrs	r0, r3
 8004b40:	bd08      	pop	{r3, pc}
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800
 8004b48:	080078a0 	.word	0x080078a0

08004b4c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b4c:	230f      	movs	r3, #15
 8004b4e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b50:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <HAL_RCC_GetClockConfig+0x34>)
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	f002 0203 	and.w	r2, r2, #3
 8004b58:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004b60:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8004b68:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	08db      	lsrs	r3, r3, #3
 8004b6e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004b72:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b74:	4b03      	ldr	r3, [pc, #12]	; (8004b84 <HAL_RCC_GetClockConfig+0x38>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 030f 	and.w	r3, r3, #15
 8004b7c:	600b      	str	r3, [r1, #0]
}
 8004b7e:	4770      	bx	lr
 8004b80:	40023800 	.word	0x40023800
 8004b84:	40023c00 	.word	0x40023c00

08004b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b8e:	6806      	ldr	r6, [r0, #0]
 8004b90:	f016 0601 	ands.w	r6, r6, #1
 8004b94:	d00d      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b96:	4ba7      	ldr	r3, [pc, #668]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004b9e:	609a      	str	r2, [r3, #8]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004ba8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 8139 	beq.w	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  uint32_t plli2sused = 0;
 8004bb0:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004bb2:	6825      	ldr	r5, [r4, #0]
 8004bb4:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 8004bb8:	d011      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bba:	4a9e      	ldr	r2, [pc, #632]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004bbc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004bc0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004bc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004bc6:	430b      	orrs	r3, r1
 8004bc8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004bcc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bd2:	f000 8128 	beq.w	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 8127 	beq.w	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  uint32_t pllsaiused = 0;
 8004bdc:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004be4:	d00f      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004be6:	4a93      	ldr	r2, [pc, #588]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004be8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004bec:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004bf0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004bf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bfe:	f000 8116 	beq.w	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004c02:	b903      	cbnz	r3, 8004c06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 8004c04:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004c0c:	d000      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 8004c0e:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c10:	f013 0f20 	tst.w	r3, #32
 8004c14:	f040 8110 	bne.w	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	f013 0f10 	tst.w	r3, #16
 8004c1e:	d00c      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c20:	4b84      	ldr	r3, [pc, #528]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004c22:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004c26:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004c2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004c2e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004c32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004c34:	430a      	orrs	r2, r1
 8004c36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004c40:	d008      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c42:	4a7c      	ldr	r2, [pc, #496]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004c44:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004c48:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004c4c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004c4e:	430b      	orrs	r3, r1
 8004c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004c5a:	d008      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c5c:	4a75      	ldr	r2, [pc, #468]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004c5e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004c62:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004c66:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004c74:	d008      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c76:	4a6f      	ldr	r2, [pc, #444]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004c78:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004c7c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004c80:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004c82:	430b      	orrs	r3, r1
 8004c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004c8e:	d008      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c90:	4a68      	ldr	r2, [pc, #416]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004c92:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004c96:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004c9a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004c9c:	430b      	orrs	r3, r1
 8004c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004ca8:	d008      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004caa:	4a62      	ldr	r2, [pc, #392]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004cac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004cb0:	f023 0303 	bic.w	r3, r3, #3
 8004cb4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004cc2:	d008      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cc4:	4a5b      	ldr	r2, [pc, #364]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004cc6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004cca:	f023 030c 	bic.w	r3, r3, #12
 8004cce:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004cd0:	430b      	orrs	r3, r1
 8004cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004cdc:	d008      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cde:	4a55      	ldr	r2, [pc, #340]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004ce0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004ce4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004ce8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004cea:	430b      	orrs	r3, r1
 8004cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004cf6:	d008      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cf8:	4a4e      	ldr	r2, [pc, #312]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004cfa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004cfe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004d02:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004d04:	430b      	orrs	r3, r1
 8004d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004d10:	d008      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d12:	4a48      	ldr	r2, [pc, #288]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004d14:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d1c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004d2a:	d008      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d2c:	4a41      	ldr	r2, [pc, #260]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004d2e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004d32:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004d36:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004d38:	430b      	orrs	r3, r1
 8004d3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004d44:	d008      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d46:	4a3b      	ldr	r2, [pc, #236]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004d48:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004d4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d50:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004d52:	430b      	orrs	r3, r1
 8004d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004d5e:	d008      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d60:	4a34      	ldr	r2, [pc, #208]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004d62:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004d66:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004d6a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d72:	6823      	ldr	r3, [r4, #0]
 8004d74:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004d78:	d008      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d7a:	4a2e      	ldr	r2, [pc, #184]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004d7c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004d80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d84:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004d86:	430b      	orrs	r3, r1
 8004d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d8c:	6823      	ldr	r3, [r4, #0]
 8004d8e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004d92:	d00d      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d94:	4a27      	ldr	r2, [pc, #156]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004d96:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004d9a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8004d9e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004da0:	430b      	orrs	r3, r1
 8004da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004da6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004da8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dac:	f000 80aa 	beq.w	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x37c>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	f013 0f08 	tst.w	r3, #8
 8004db6:	d000      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 8004db8:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dba:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004dbe:	d008      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dc0:	4a1c      	ldr	r2, [pc, #112]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004dc2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004dc6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004dca:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004dcc:	430b      	orrs	r3, r1
 8004dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004dd2:	6823      	ldr	r3, [r4, #0]
 8004dd4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004dd8:	d009      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004dda:	4a16      	ldr	r2, [pc, #88]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004ddc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004de4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004de8:	430b      	orrs	r3, r1
 8004dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004dee:	b926      	cbnz	r6, 8004dfa <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004df6:	f000 8105 	beq.w	8005004 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004dfa:	4a0e      	ldr	r2, [pc, #56]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004dfc:	6813      	ldr	r3, [r2, #0]
 8004dfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e04:	f7fe fa4c 	bl	80032a0 <HAL_GetTick>
 8004e08:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e0a:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004e12:	d079      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e14:	f7fe fa44 	bl	80032a0 <HAL_GetTick>
 8004e18:	1b80      	subs	r0, r0, r6
 8004e1a:	2864      	cmp	r0, #100	; 0x64
 8004e1c:	d9f5      	bls.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x282>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e1e:	2003      	movs	r0, #3
 8004e20:	e0f3      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x482>
      plli2sused = 1;
 8004e22:	2601      	movs	r6, #1
 8004e24:	e6c5      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8004e26:	2601      	movs	r6, #1
 8004e28:	e6d5      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 8004e2a:	2501      	movs	r5, #1
 8004e2c:	e6d7      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 8004e2e:	2601      	movs	r6, #1
 8004e30:	e6e7      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e32:	bf00      	nop
 8004e34:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e38:	4b7f      	ldr	r3, [pc, #508]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8004e3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e3c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004e40:	641a      	str	r2, [r3, #64]	; 0x40
 8004e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e48:	9301      	str	r3, [sp, #4]
 8004e4a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8004e4c:	4a7b      	ldr	r2, [pc, #492]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8004e4e:	6813      	ldr	r3, [r2, #0]
 8004e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e54:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004e56:	f7fe fa23 	bl	80032a0 <HAL_GetTick>
 8004e5a:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e5c:	4b77      	ldr	r3, [pc, #476]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004e64:	d106      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e66:	f7fe fa1b 	bl	80032a0 <HAL_GetTick>
 8004e6a:	1bc0      	subs	r0, r0, r7
 8004e6c:	2864      	cmp	r0, #100	; 0x64
 8004e6e:	d9f5      	bls.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        return HAL_TIMEOUT;
 8004e70:	2003      	movs	r0, #3
 8004e72:	e0ca      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x482>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e74:	4b70      	ldr	r3, [pc, #448]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8004e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e78:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004e7c:	d015      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004e7e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004e80:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d010      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x322>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e88:	4b6b      	ldr	r3, [pc, #428]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8004e8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e8c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e90:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004e92:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004e96:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e98:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004e9a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004e9e:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8004ea0:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea4:	f013 0f01 	tst.w	r3, #1
 8004ea8:	d112      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x348>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eaa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004eac:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004eb0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004eb4:	d01d      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004eb6:	4a60      	ldr	r2, [pc, #384]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8004eb8:	6893      	ldr	r3, [r2, #8]
 8004eba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ebe:	6093      	str	r3, [r2, #8]
 8004ec0:	495d      	ldr	r1, [pc, #372]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8004ec2:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8004ec4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004ec6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	670b      	str	r3, [r1, #112]	; 0x70
 8004ece:	e6a3      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8004ed0:	f7fe f9e6 	bl	80032a0 <HAL_GetTick>
 8004ed4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed6:	4b58      	ldr	r3, [pc, #352]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eda:	f013 0f02 	tst.w	r3, #2
 8004ede:	d1e4      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x322>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee0:	f7fe f9de 	bl	80032a0 <HAL_GetTick>
 8004ee4:	1bc0      	subs	r0, r0, r7
 8004ee6:	f241 3388 	movw	r3, #5000	; 0x1388
 8004eea:	4298      	cmp	r0, r3
 8004eec:	d9f3      	bls.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
            return HAL_TIMEOUT;
 8004eee:	2003      	movs	r0, #3
 8004ef0:	e08b      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x482>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ef2:	4851      	ldr	r0, [pc, #324]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8004ef4:	6882      	ldr	r2, [r0, #8]
 8004ef6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8004efa:	4951      	ldr	r1, [pc, #324]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8004efc:	4019      	ands	r1, r3
 8004efe:	430a      	orrs	r2, r1
 8004f00:	6082      	str	r2, [r0, #8]
 8004f02:	e7dd      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>
      pllsaiused = 1;
 8004f04:	2501      	movs	r5, #1
 8004f06:	e753      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x228>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004f08:	6823      	ldr	r3, [r4, #0]
 8004f0a:	f013 0f01 	tst.w	r3, #1
 8004f0e:	d013      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8004f10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f12:	b98b      	cbnz	r3, 8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f14:	4a48      	ldr	r2, [pc, #288]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8004f16:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f1a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f1e:	6860      	ldr	r0, [r4, #4]
 8004f20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f24:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004f28:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004f2c:	430b      	orrs	r3, r1
 8004f2e:	68a1      	ldr	r1, [r4, #8]
 8004f30:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004f34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004f3e:	d003      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004f40:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004f42:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8004f46:	d006      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004f48:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004f4c:	d01e      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x404>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f54:	d11a      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x404>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f56:	4a38      	ldr	r2, [pc, #224]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8004f58:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f5c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f60:	6860      	ldr	r0, [r4, #4]
 8004f62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f66:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004f6a:	68e0      	ldr	r0, [r4, #12]
 8004f6c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004f70:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004f74:	430b      	orrs	r3, r1
 8004f76:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f7a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004f7e:	f023 031f 	bic.w	r3, r3, #31
 8004f82:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004f84:	3901      	subs	r1, #1
 8004f86:	430b      	orrs	r3, r1
 8004f88:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004f92:	d011      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f94:	4a28      	ldr	r2, [pc, #160]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8004f96:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f9a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004f9e:	6866      	ldr	r6, [r4, #4]
 8004fa0:	6923      	ldr	r3, [r4, #16]
 8004fa2:	041b      	lsls	r3, r3, #16
 8004fa4:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8004fa8:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8004fac:	4303      	orrs	r3, r0
 8004fae:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004fb2:	430b      	orrs	r3, r1
 8004fb4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004fbe:	d00d      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x454>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fc0:	6862      	ldr	r2, [r4, #4]
 8004fc2:	6923      	ldr	r3, [r4, #16]
 8004fc4:	041b      	lsls	r3, r3, #16
 8004fc6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004fca:	68e2      	ldr	r2, [r4, #12]
 8004fcc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004fd0:	68a2      	ldr	r2, [r4, #8]
 8004fd2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004fd6:	4a18      	ldr	r2, [pc, #96]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8004fd8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fdc:	4a16      	ldr	r2, [pc, #88]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8004fde:	6813      	ldr	r3, [r2, #0]
 8004fe0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe6:	f7fe f95b 	bl	80032a0 <HAL_GetTick>
 8004fea:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fec:	4b12      	ldr	r3, [pc, #72]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004ff4:	d106      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ff6:	f7fe f953 	bl	80032a0 <HAL_GetTick>
 8004ffa:	1b80      	subs	r0, r0, r6
 8004ffc:	2864      	cmp	r0, #100	; 0x64
 8004ffe:	d9f5      	bls.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x464>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005000:	2003      	movs	r0, #3
 8005002:	e002      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x482>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005004:	2d01      	cmp	r5, #1
 8005006:	d002      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x486>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005008:	2000      	movs	r0, #0
}
 800500a:	b003      	add	sp, #12
 800500c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 800500e:	4a0a      	ldr	r2, [pc, #40]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005010:	6813      	ldr	r3, [r2, #0]
 8005012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005016:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005018:	f7fe f942 	bl	80032a0 <HAL_GetTick>
 800501c:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800501e:	4b06      	ldr	r3, [pc, #24]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8005026:	d00d      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005028:	f7fe f93a 	bl	80032a0 <HAL_GetTick>
 800502c:	1b40      	subs	r0, r0, r5
 800502e:	2864      	cmp	r0, #100	; 0x64
 8005030:	d9f5      	bls.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x496>
        return HAL_TIMEOUT;
 8005032:	2003      	movs	r0, #3
 8005034:	e7e9      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005036:	bf00      	nop
 8005038:	40023800 	.word	0x40023800
 800503c:	40007000 	.word	0x40007000
 8005040:	0ffffcff 	.word	0x0ffffcff
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800504a:	d001      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 800504c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800504e:	b122      	cbz	r2, 800505a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005050:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005054:	d01d      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x50a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005056:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005058:	b9db      	cbnz	r3, 8005092 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800505a:	4a35      	ldr	r2, [pc, #212]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 800505c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005060:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005064:	6960      	ldr	r0, [r4, #20]
 8005066:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800506a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800506e:	69a0      	ldr	r0, [r4, #24]
 8005070:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005074:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8005078:	430b      	orrs	r3, r1
 800507a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800507e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005082:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8005086:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005088:	3901      	subs	r1, #1
 800508a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800508e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005098:	d003      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800509a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800509c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050a0:	d031      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	f013 0f08 	tst.w	r3, #8
 80050a8:	d019      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x556>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050aa:	4a21      	ldr	r2, [pc, #132]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 80050ac:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050b0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80050b4:	6960      	ldr	r0, [r4, #20]
 80050b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050ba:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80050be:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80050c2:	430b      	orrs	r3, r1
 80050c4:	69e1      	ldr	r1, [r4, #28]
 80050c6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80050ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80050ce:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80050d2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80050d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80050d8:	430b      	orrs	r3, r1
 80050da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 80050de:	4a14      	ldr	r2, [pc, #80]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 80050e0:	6813      	ldr	r3, [r2, #0]
 80050e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80050e8:	f7fe f8da 	bl	80032a0 <HAL_GetTick>
 80050ec:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050ee:	4b10      	ldr	r3, [pc, #64]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80050f6:	d119      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050f8:	f7fe f8d2 	bl	80032a0 <HAL_GetTick>
 80050fc:	1b00      	subs	r0, r0, r4
 80050fe:	2864      	cmp	r0, #100	; 0x64
 8005100:	d9f5      	bls.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x566>
        return HAL_TIMEOUT;
 8005102:	2003      	movs	r0, #3
 8005104:	e781      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x482>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005106:	4a0a      	ldr	r2, [pc, #40]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8005108:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800510c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005110:	6965      	ldr	r5, [r4, #20]
 8005112:	6a23      	ldr	r3, [r4, #32]
 8005114:	041b      	lsls	r3, r3, #16
 8005116:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800511a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 800511e:	4303      	orrs	r3, r0
 8005120:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8005124:	430b      	orrs	r3, r1
 8005126:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800512a:	e7ba      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
  return HAL_OK;
 800512c:	2000      	movs	r0, #0
 800512e:	e76c      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005130:	40023800 	.word	0x40023800

08005134 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005138:	6802      	ldr	r2, [r0, #0]
 800513a:	68d3      	ldr	r3, [r2, #12]
 800513c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005140:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005142:	f7fe f8ad 	bl	80032a0 <HAL_GetTick>
 8005146:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f013 0f20 	tst.w	r3, #32
 8005150:	d107      	bne.n	8005162 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005152:	f7fe f8a5 	bl	80032a0 <HAL_GetTick>
 8005156:	1b40      	subs	r0, r0, r5
 8005158:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800515c:	d9f4      	bls.n	8005148 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 800515e:	2003      	movs	r0, #3
 8005160:	e000      	b.n	8005164 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8005162:	2000      	movs	r0, #0
}
 8005164:	bd38      	pop	{r3, r4, r5, pc}

08005166 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005166:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005168:	6803      	ldr	r3, [r0, #0]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005170:	d001      	beq.n	8005176 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8005172:	2000      	movs	r0, #0
}
 8005174:	bd38      	pop	{r3, r4, r5, pc}
 8005176:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005178:	f04f 32ff 	mov.w	r2, #4294967295
 800517c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800517e:	f7fe f88f 	bl	80032a0 <HAL_GetTick>
 8005182:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f013 0f40 	tst.w	r3, #64	; 0x40
 800518c:	d107      	bne.n	800519e <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800518e:	f7fe f887 	bl	80032a0 <HAL_GetTick>
 8005192:	1b43      	subs	r3, r0, r5
 8005194:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005198:	d9f4      	bls.n	8005184 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 800519a:	2003      	movs	r0, #3
 800519c:	e7ea      	b.n	8005174 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 800519e:	2000      	movs	r0, #0
 80051a0:	e7e8      	b.n	8005174 <RTC_EnterInitMode+0xe>
	...

080051a4 <HAL_RTC_Init>:
{
 80051a4:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80051a6:	2800      	cmp	r0, #0
 80051a8:	d05a      	beq.n	8005260 <HAL_RTC_Init+0xbc>
 80051aa:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80051ac:	7f43      	ldrb	r3, [r0, #29]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d03f      	beq.n	8005232 <HAL_RTC_Init+0x8e>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80051b2:	2302      	movs	r3, #2
 80051b4:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051b6:	6823      	ldr	r3, [r4, #0]
 80051b8:	22ca      	movs	r2, #202	; 0xca
 80051ba:	625a      	str	r2, [r3, #36]	; 0x24
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	2253      	movs	r2, #83	; 0x53
 80051c0:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80051c2:	4620      	mov	r0, r4
 80051c4:	f7ff ffcf 	bl	8005166 <RTC_EnterInitMode>
 80051c8:	4605      	mov	r5, r0
 80051ca:	2800      	cmp	r0, #0
 80051cc:	d135      	bne.n	800523a <HAL_RTC_Init+0x96>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80051ce:	6822      	ldr	r2, [r4, #0]
 80051d0:	6891      	ldr	r1, [r2, #8]
 80051d2:	4b24      	ldr	r3, [pc, #144]	; (8005264 <HAL_RTC_Init+0xc0>)
 80051d4:	400b      	ands	r3, r1
 80051d6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80051d8:	6821      	ldr	r1, [r4, #0]
 80051da:	688a      	ldr	r2, [r1, #8]
 80051dc:	6863      	ldr	r3, [r4, #4]
 80051de:	6920      	ldr	r0, [r4, #16]
 80051e0:	4303      	orrs	r3, r0
 80051e2:	6960      	ldr	r0, [r4, #20]
 80051e4:	4303      	orrs	r3, r0
 80051e6:	4313      	orrs	r3, r2
 80051e8:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	68e2      	ldr	r2, [r4, #12]
 80051ee:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80051f0:	6822      	ldr	r2, [r4, #0]
 80051f2:	6913      	ldr	r3, [r2, #16]
 80051f4:	68a1      	ldr	r1, [r4, #8]
 80051f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80051fa:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80051fc:	6822      	ldr	r2, [r4, #0]
 80051fe:	68d3      	ldr	r3, [r2, #12]
 8005200:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005204:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f013 0f20 	tst.w	r3, #32
 800520e:	d01b      	beq.n	8005248 <HAL_RTC_Init+0xa4>
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8005210:	6822      	ldr	r2, [r4, #0]
 8005212:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005214:	f023 0308 	bic.w	r3, r3, #8
 8005218:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800521a:	6822      	ldr	r2, [r4, #0]
 800521c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800521e:	69a1      	ldr	r1, [r4, #24]
 8005220:	430b      	orrs	r3, r1
 8005222:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	22ff      	movs	r2, #255	; 0xff
 8005228:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800522a:	2301      	movs	r3, #1
 800522c:	7763      	strb	r3, [r4, #29]
}
 800522e:	4628      	mov	r0, r5
 8005230:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8005232:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8005234:	f7fd ff6e 	bl	8003114 <HAL_RTC_MspInit>
 8005238:	e7bb      	b.n	80051b2 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	22ff      	movs	r2, #255	; 0xff
 800523e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005240:	2304      	movs	r3, #4
 8005242:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8005244:	2501      	movs	r5, #1
 8005246:	e7f2      	b.n	800522e <HAL_RTC_Init+0x8a>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005248:	4620      	mov	r0, r4
 800524a:	f7ff ff73 	bl	8005134 <HAL_RTC_WaitForSynchro>
 800524e:	2800      	cmp	r0, #0
 8005250:	d0de      	beq.n	8005210 <HAL_RTC_Init+0x6c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	22ff      	movs	r2, #255	; 0xff
 8005256:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005258:	2304      	movs	r3, #4
 800525a:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 800525c:	2501      	movs	r5, #1
 800525e:	e7e6      	b.n	800522e <HAL_RTC_Init+0x8a>
     return HAL_ERROR;
 8005260:	2501      	movs	r5, #1
 8005262:	e7e4      	b.n	800522e <HAL_RTC_Init+0x8a>
 8005264:	ff8fffbf 	.word	0xff8fffbf

08005268 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8005268:	2300      	movs	r3, #0

  while(Value >= 10)
 800526a:	e002      	b.n	8005272 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 800526c:	3301      	adds	r3, #1
    Value -= 10;
 800526e:	380a      	subs	r0, #10
 8005270:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8005272:	2809      	cmp	r0, #9
 8005274:	d8fa      	bhi.n	800526c <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	b2db      	uxtb	r3, r3
}
 800527a:	4318      	orrs	r0, r3
 800527c:	4770      	bx	lr
	...

08005280 <HAL_RTC_SetTime>:
{
 8005280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8005282:	7f03      	ldrb	r3, [r0, #28]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d076      	beq.n	8005376 <HAL_RTC_SetTime+0xf6>
 8005288:	4604      	mov	r4, r0
 800528a:	460e      	mov	r6, r1
 800528c:	2301      	movs	r3, #1
 800528e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005290:	2302      	movs	r3, #2
 8005292:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8005294:	2a00      	cmp	r2, #0
 8005296:	d145      	bne.n	8005324 <HAL_RTC_SetTime+0xa4>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005298:	6803      	ldr	r3, [r0, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f013 0f40 	tst.w	r3, #64	; 0x40
 80052a0:	d101      	bne.n	80052a6 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 80052a2:	2300      	movs	r3, #0
 80052a4:	730b      	strb	r3, [r1, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80052a6:	7830      	ldrb	r0, [r6, #0]
 80052a8:	f7ff ffde 	bl	8005268 <RTC_ByteToBcd2>
 80052ac:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80052ae:	7870      	ldrb	r0, [r6, #1]
 80052b0:	f7ff ffda 	bl	8005268 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80052b4:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80052b8:	78b0      	ldrb	r0, [r6, #2]
 80052ba:	f7ff ffd5 	bl	8005268 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80052be:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16));
 80052c0:	7b30      	ldrb	r0, [r6, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80052c2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	22ca      	movs	r2, #202	; 0xca
 80052ca:	625a      	str	r2, [r3, #36]	; 0x24
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	2253      	movs	r2, #83	; 0x53
 80052d0:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80052d2:	4620      	mov	r0, r4
 80052d4:	f7ff ff47 	bl	8005166 <RTC_EnterInitMode>
 80052d8:	4607      	mov	r7, r0
 80052da:	2800      	cmp	r0, #0
 80052dc:	d134      	bne.n	8005348 <HAL_RTC_SetTime+0xc8>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80052de:	6822      	ldr	r2, [r4, #0]
 80052e0:	4b26      	ldr	r3, [pc, #152]	; (800537c <HAL_RTC_SetTime+0xfc>)
 80052e2:	402b      	ands	r3, r5
 80052e4:	6013      	str	r3, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80052e6:	6822      	ldr	r2, [r4, #0]
 80052e8:	6893      	ldr	r3, [r2, #8]
 80052ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052ee:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80052f0:	6821      	ldr	r1, [r4, #0]
 80052f2:	688b      	ldr	r3, [r1, #8]
 80052f4:	6932      	ldr	r2, [r6, #16]
 80052f6:	6970      	ldr	r0, [r6, #20]
 80052f8:	4302      	orrs	r2, r0
 80052fa:	4313      	orrs	r3, r2
 80052fc:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80052fe:	6822      	ldr	r2, [r4, #0]
 8005300:	68d3      	ldr	r3, [r2, #12]
 8005302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005306:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f013 0f20 	tst.w	r3, #32
 8005310:	d023      	beq.n	800535a <HAL_RTC_SetTime+0xda>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	22ff      	movs	r2, #255	; 0xff
 8005316:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8005318:	2301      	movs	r3, #1
 800531a:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 800531c:	2300      	movs	r3, #0
 800531e:	7723      	strb	r3, [r4, #28]
}
 8005320:	4638      	mov	r0, r7
 8005322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005324:	6803      	ldr	r3, [r0, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f013 0f40 	tst.w	r3, #64	; 0x40
 800532c:	d101      	bne.n	8005332 <HAL_RTC_SetTime+0xb2>
      sTime->TimeFormat = 0x00;
 800532e:	2300      	movs	r3, #0
 8005330:	730b      	strb	r3, [r1, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005332:	7833      	ldrb	r3, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005334:	7875      	ldrb	r5, [r6, #1]
 8005336:	022d      	lsls	r5, r5, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t)sTime->Seconds) | \
 800533c:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800533e:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));
 8005340:	7b30      	ldrb	r0, [r6, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005342:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8005346:	e7be      	b.n	80052c6 <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005348:	6823      	ldr	r3, [r4, #0]
 800534a:	22ff      	movs	r2, #255	; 0xff
 800534c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800534e:	2304      	movs	r3, #4
 8005350:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8005352:	2300      	movs	r3, #0
 8005354:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8005356:	2701      	movs	r7, #1
 8005358:	e7e2      	b.n	8005320 <HAL_RTC_SetTime+0xa0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800535a:	4620      	mov	r0, r4
 800535c:	f7ff feea 	bl	8005134 <HAL_RTC_WaitForSynchro>
 8005360:	2800      	cmp	r0, #0
 8005362:	d0d6      	beq.n	8005312 <HAL_RTC_SetTime+0x92>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	22ff      	movs	r2, #255	; 0xff
 8005368:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800536a:	2304      	movs	r3, #4
 800536c:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800536e:	2300      	movs	r3, #0
 8005370:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8005372:	2701      	movs	r7, #1
 8005374:	e7d4      	b.n	8005320 <HAL_RTC_SetTime+0xa0>
  __HAL_LOCK(hrtc);
 8005376:	2702      	movs	r7, #2
 8005378:	e7d2      	b.n	8005320 <HAL_RTC_SetTime+0xa0>
 800537a:	bf00      	nop
 800537c:	007f7f7f 	.word	0x007f7f7f

08005380 <HAL_RTC_SetDate>:
{
 8005380:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8005382:	7f03      	ldrb	r3, [r0, #28]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d064      	beq.n	8005452 <HAL_RTC_SetDate+0xd2>
 8005388:	4604      	mov	r4, r0
 800538a:	460e      	mov	r6, r1
 800538c:	2301      	movs	r3, #1
 800538e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005390:	2302      	movs	r3, #2
 8005392:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005394:	b93a      	cbnz	r2, 80053a6 <HAL_RTC_SetDate+0x26>
 8005396:	784b      	ldrb	r3, [r1, #1]
 8005398:	f013 0f10 	tst.w	r3, #16
 800539c:	d003      	beq.n	80053a6 <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800539e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80053a2:	330a      	adds	r3, #10
 80053a4:	704b      	strb	r3, [r1, #1]
  if(Format == RTC_FORMAT_BIN)
 80053a6:	2a00      	cmp	r2, #0
 80053a8:	d131      	bne.n	800540e <HAL_RTC_SetDate+0x8e>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80053aa:	78f0      	ldrb	r0, [r6, #3]
 80053ac:	f7ff ff5c 	bl	8005268 <RTC_ByteToBcd2>
 80053b0:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80053b2:	7870      	ldrb	r0, [r6, #1]
 80053b4:	f7ff ff58 	bl	8005268 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80053b8:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80053bc:	78b0      	ldrb	r0, [r6, #2]
 80053be:	f7ff ff53 	bl	8005268 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80053c2:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13));
 80053c4:	7830      	ldrb	r0, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80053c6:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	22ca      	movs	r2, #202	; 0xca
 80053ce:	625a      	str	r2, [r3, #36]	; 0x24
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	2253      	movs	r2, #83	; 0x53
 80053d4:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80053d6:	4620      	mov	r0, r4
 80053d8:	f7ff fec5 	bl	8005166 <RTC_EnterInitMode>
 80053dc:	4606      	mov	r6, r0
 80053de:	bb08      	cbnz	r0, 8005424 <HAL_RTC_SetDate+0xa4>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80053e0:	6822      	ldr	r2, [r4, #0]
 80053e2:	4b1d      	ldr	r3, [pc, #116]	; (8005458 <HAL_RTC_SetDate+0xd8>)
 80053e4:	402b      	ands	r3, r5
 80053e6:	6053      	str	r3, [r2, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80053e8:	6822      	ldr	r2, [r4, #0]
 80053ea:	68d3      	ldr	r3, [r2, #12]
 80053ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053f0:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f013 0f20 	tst.w	r3, #32
 80053fa:	d01c      	beq.n	8005436 <HAL_RTC_SetDate+0xb6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	22ff      	movs	r2, #255	; 0xff
 8005400:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8005402:	2301      	movs	r3, #1
 8005404:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8005406:	2300      	movs	r3, #0
 8005408:	7723      	strb	r3, [r4, #28]
}
 800540a:	4630      	mov	r0, r6
 800540c:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800540e:	78f3      	ldrb	r3, [r6, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 8005410:	7875      	ldrb	r5, [r6, #1]
 8005412:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  ((uint32_t)sDate->Date) | \
 8005418:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800541a:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));
 800541c:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800541e:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
 8005422:	e7d2      	b.n	80053ca <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	22ff      	movs	r2, #255	; 0xff
 8005428:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800542a:	2304      	movs	r3, #4
 800542c:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800542e:	2300      	movs	r3, #0
 8005430:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8005432:	2601      	movs	r6, #1
 8005434:	e7e9      	b.n	800540a <HAL_RTC_SetDate+0x8a>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005436:	4620      	mov	r0, r4
 8005438:	f7ff fe7c 	bl	8005134 <HAL_RTC_WaitForSynchro>
 800543c:	2800      	cmp	r0, #0
 800543e:	d0dd      	beq.n	80053fc <HAL_RTC_SetDate+0x7c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	22ff      	movs	r2, #255	; 0xff
 8005444:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005446:	2304      	movs	r3, #4
 8005448:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800544a:	2300      	movs	r3, #0
 800544c:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 800544e:	2601      	movs	r6, #1
 8005450:	e7db      	b.n	800540a <HAL_RTC_SetDate+0x8a>
 __HAL_LOCK(hrtc);
 8005452:	2602      	movs	r6, #2
 8005454:	e7d9      	b.n	800540a <HAL_RTC_SetDate+0x8a>
 8005456:	bf00      	nop
 8005458:	00ffff3f 	.word	0x00ffff3f

0800545c <HAL_RTC_SetAlarm>:
{
 800545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800545e:	7f03      	ldrb	r3, [r0, #28]
 8005460:	2b01      	cmp	r3, #1
 8005462:	f000 80a9 	beq.w	80055b8 <HAL_RTC_SetAlarm+0x15c>
 8005466:	4604      	mov	r4, r0
 8005468:	460d      	mov	r5, r1
 800546a:	2301      	movs	r3, #1
 800546c:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800546e:	2302      	movs	r3, #2
 8005470:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8005472:	2a00      	cmp	r2, #0
 8005474:	d14d      	bne.n	8005512 <HAL_RTC_SetAlarm+0xb6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005476:	6803      	ldr	r3, [r0, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800547e:	d101      	bne.n	8005484 <HAL_RTC_SetAlarm+0x28>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005480:	2300      	movs	r3, #0
 8005482:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8005484:	6a2e      	ldr	r6, [r5, #32]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005486:	7828      	ldrb	r0, [r5, #0]
 8005488:	f7ff feee 	bl	8005268 <RTC_ByteToBcd2>
 800548c:	0407      	lsls	r7, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800548e:	7868      	ldrb	r0, [r5, #1]
 8005490:	f7ff feea 	bl	8005268 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005494:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005498:	78a8      	ldrb	r0, [r5, #2]
 800549a:	f7ff fee5 	bl	8005268 <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800549e:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80054a0:	7b28      	ldrb	r0, [r5, #12]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80054a2:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80054a6:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 80054aa:	f7ff fedd 	bl	8005268 <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80054ae:	ea47 6700 	orr.w	r7, r7, r0, lsl #24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80054b2:	433e      	orrs	r6, r7
              ((uint32_t)sAlarm->AlarmMask));
 80054b4:	69ab      	ldr	r3, [r5, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80054b6:	431e      	orrs	r6, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80054b8:	686f      	ldr	r7, [r5, #4]
 80054ba:	69eb      	ldr	r3, [r5, #28]
 80054bc:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	22ca      	movs	r2, #202	; 0xca
 80054c2:	625a      	str	r2, [r3, #36]	; 0x24
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	2253      	movs	r2, #83	; 0x53
 80054c8:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 80054ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80054cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054d0:	d039      	beq.n	8005546 <HAL_RTC_SetAlarm+0xea>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80054d2:	6822      	ldr	r2, [r4, #0]
 80054d4:	6893      	ldr	r3, [r2, #8]
 80054d6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054da:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80054dc:	6822      	ldr	r2, [r4, #0]
 80054de:	6893      	ldr	r3, [r2, #8]
 80054e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054e4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80054e6:	f7fd fedb 	bl	80032a0 <HAL_GetTick>
 80054ea:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	68da      	ldr	r2, [r3, #12]
 80054f0:	f012 0f02 	tst.w	r2, #2
 80054f4:	d150      	bne.n	8005598 <HAL_RTC_SetAlarm+0x13c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80054f6:	f7fd fed3 	bl	80032a0 <HAL_GetTick>
 80054fa:	1b40      	subs	r0, r0, r5
 80054fc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005500:	d9f4      	bls.n	80054ec <HAL_RTC_SetAlarm+0x90>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	22ff      	movs	r2, #255	; 0xff
 8005506:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005508:	2003      	movs	r0, #3
 800550a:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800550c:	2300      	movs	r3, #0
 800550e:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8005510:	e051      	b.n	80055b6 <HAL_RTC_SetAlarm+0x15a>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005512:	6803      	ldr	r3, [r0, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f013 0f40 	tst.w	r3, #64	; 0x40
 800551a:	d101      	bne.n	8005520 <HAL_RTC_SetAlarm+0xc4>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800551c:	2300      	movs	r3, #0
 800551e:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8005520:	6a2e      	ldr	r6, [r5, #32]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005522:	782a      	ldrb	r2, [r5, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005524:	786b      	ldrb	r3, [r5, #1]
 8005526:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005528:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800552c:	78aa      	ldrb	r2, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800552e:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005530:	7b2a      	ldrb	r2, [r5, #12]
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005532:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005536:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800553a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800553e:	431e      	orrs	r6, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005540:	69ab      	ldr	r3, [r5, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005542:	431e      	orrs	r6, r3
 8005544:	e7b8      	b.n	80054b8 <HAL_RTC_SetAlarm+0x5c>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005546:	6822      	ldr	r2, [r4, #0]
 8005548:	6893      	ldr	r3, [r2, #8]
 800554a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800554e:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005550:	6822      	ldr	r2, [r4, #0]
 8005552:	6893      	ldr	r3, [r2, #8]
 8005554:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005558:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800555a:	f7fd fea1 	bl	80032a0 <HAL_GetTick>
 800555e:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	68da      	ldr	r2, [r3, #12]
 8005564:	f012 0f01 	tst.w	r2, #1
 8005568:	d10d      	bne.n	8005586 <HAL_RTC_SetAlarm+0x12a>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800556a:	f7fd fe99 	bl	80032a0 <HAL_GetTick>
 800556e:	1b40      	subs	r0, r0, r5
 8005570:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005574:	d9f4      	bls.n	8005560 <HAL_RTC_SetAlarm+0x104>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	22ff      	movs	r2, #255	; 0xff
 800557a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800557c:	2003      	movs	r0, #3
 800557e:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8005580:	2300      	movs	r3, #0
 8005582:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8005584:	e017      	b.n	80055b6 <HAL_RTC_SetAlarm+0x15a>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005586:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005588:	6823      	ldr	r3, [r4, #0]
 800558a:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800558c:	6822      	ldr	r2, [r4, #0]
 800558e:	6893      	ldr	r3, [r2, #8]
 8005590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005594:	6093      	str	r3, [r2, #8]
 8005596:	e007      	b.n	80055a8 <HAL_RTC_SetAlarm+0x14c>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005598:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800559e:	6822      	ldr	r2, [r4, #0]
 80055a0:	6893      	ldr	r3, [r2, #8]
 80055a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055a6:	6093      	str	r3, [r2, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055a8:	6823      	ldr	r3, [r4, #0]
 80055aa:	22ff      	movs	r2, #255	; 0xff
 80055ac:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80055ae:	2301      	movs	r3, #1
 80055b0:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 80055b2:	2000      	movs	r0, #0
 80055b4:	7720      	strb	r0, [r4, #28]
}
 80055b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 80055b8:	2002      	movs	r0, #2
 80055ba:	e7fc      	b.n	80055b6 <HAL_RTC_SetAlarm+0x15a>

080055bc <HAL_RTCEx_SetTimeStamp>:
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055bc:	7f03      	ldrb	r3, [r0, #28]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d02b      	beq.n	800561a <HAL_RTCEx_SetTimeStamp+0x5e>
{
 80055c2:	b430      	push	{r4, r5}
  __HAL_LOCK(hrtc);
 80055c4:	f04f 0c01 	mov.w	ip, #1
 80055c8:	f880 c01c 	strb.w	ip, [r0, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055cc:	2302      	movs	r3, #2
 80055ce:	7743      	strb	r3, [r0, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80055d0:	6804      	ldr	r4, [r0, #0]
 80055d2:	68a5      	ldr	r5, [r4, #8]
 80055d4:	f6a3 030b 	subw	r3, r3, #2059	; 0x80b
 80055d8:	402b      	ands	r3, r5

  tmpreg|= TimeStampEdge;
 80055da:	4319      	orrs	r1, r3

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055dc:	23ca      	movs	r3, #202	; 0xca
 80055de:	6263      	str	r3, [r4, #36]	; 0x24
 80055e0:	6803      	ldr	r3, [r0, #0]
 80055e2:	2453      	movs	r4, #83	; 0x53
 80055e4:	625c      	str	r4, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80055e6:	6804      	ldr	r4, [r0, #0]
 80055e8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80055ea:	f023 0306 	bic.w	r3, r3, #6
 80055ee:	64e3      	str	r3, [r4, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80055f0:	6804      	ldr	r4, [r0, #0]
 80055f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80055f4:	431a      	orrs	r2, r3
 80055f6:	64e2      	str	r2, [r4, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80055f8:	6803      	ldr	r3, [r0, #0]
 80055fa:	6099      	str	r1, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80055fc:	6802      	ldr	r2, [r0, #0]
 80055fe:	6893      	ldr	r3, [r2, #8]
 8005600:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005604:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005606:	6803      	ldr	r3, [r0, #0]
 8005608:	22ff      	movs	r2, #255	; 0xff
 800560a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800560c:	f880 c01d 	strb.w	ip, [r0, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005610:	2300      	movs	r3, #0
 8005612:	7703      	strb	r3, [r0, #28]

  return HAL_OK;
 8005614:	4618      	mov	r0, r3
}
 8005616:	bc30      	pop	{r4, r5}
 8005618:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800561a:	2002      	movs	r0, #2
}
 800561c:	4770      	bx	lr

0800561e <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800561e:	b1e0      	cbz	r0, 800565a <HAL_SDRAM_Init+0x3c>
{   
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	460d      	mov	r5, r1
 8005624:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005626:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800562a:	b18b      	cbz	r3, 8005650 <HAL_SDRAM_Init+0x32>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800562c:	2302      	movs	r3, #2
 800562e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005632:	4621      	mov	r1, r4
 8005634:	f851 0b04 	ldr.w	r0, [r1], #4
 8005638:	f000 f9e8 	bl	8005a0c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800563c:	6862      	ldr	r2, [r4, #4]
 800563e:	4629      	mov	r1, r5
 8005640:	6820      	ldr	r0, [r4, #0]
 8005642:	f000 fa1d 	bl	8005a80 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005646:	2301      	movs	r3, #1
 8005648:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 800564c:	2000      	movs	r0, #0
}
 800564e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8005650:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8005654:	f7fd fd6e 	bl	8003134 <HAL_SDRAM_MspInit>
 8005658:	e7e8      	b.n	800562c <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 800565a:	2001      	movs	r0, #1
}
 800565c:	4770      	bx	lr

0800565e <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800565e:	4770      	bx	lr

08005660 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005660:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b01      	cmp	r3, #1
 8005668:	d13a      	bne.n	80056e0 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800566a:	2302      	movs	r3, #2
 800566c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005670:	6802      	ldr	r2, [r0, #0]
 8005672:	68d3      	ldr	r3, [r2, #12]
 8005674:	f043 0301 	orr.w	r3, r3, #1
 8005678:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800567a:	6803      	ldr	r3, [r0, #0]
 800567c:	4a1a      	ldr	r2, [pc, #104]	; (80056e8 <HAL_TIM_Base_Start_IT+0x88>)
 800567e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005682:	bf18      	it	ne
 8005684:	4293      	cmpne	r3, r2
 8005686:	d01d      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x64>
 8005688:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800568c:	4293      	cmp	r3, r2
 800568e:	d019      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x64>
 8005690:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005694:	4293      	cmp	r3, r2
 8005696:	d015      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x64>
 8005698:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800569c:	4293      	cmp	r3, r2
 800569e:	d011      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x64>
 80056a0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00d      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x64>
 80056a8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d009      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x64>
 80056b0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d005      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	f042 0201 	orr.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056c0:	2000      	movs	r0, #0
 80056c2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056c4:	6899      	ldr	r1, [r3, #8]
 80056c6:	4a09      	ldr	r2, [pc, #36]	; (80056ec <HAL_TIM_Base_Start_IT+0x8c>)
 80056c8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ca:	2a06      	cmp	r2, #6
 80056cc:	bf18      	it	ne
 80056ce:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 80056d2:	d007      	beq.n	80056e4 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	f042 0201 	orr.w	r2, r2, #1
 80056da:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80056dc:	2000      	movs	r0, #0
 80056de:	4770      	bx	lr
    return HAL_ERROR;
 80056e0:	2001      	movs	r0, #1
 80056e2:	4770      	bx	lr
  return HAL_OK;
 80056e4:	2000      	movs	r0, #0
}
 80056e6:	4770      	bx	lr
 80056e8:	40010000 	.word	0x40010000
 80056ec:	00010007 	.word	0x00010007

080056f0 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056f0:	4770      	bx	lr

080056f2 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056f2:	4770      	bx	lr

080056f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056f4:	4770      	bx	lr

080056f6 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056f6:	4770      	bx	lr

080056f8 <HAL_TIM_IRQHandler>:
{
 80056f8:	b510      	push	{r4, lr}
 80056fa:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056fc:	6803      	ldr	r3, [r0, #0]
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	f012 0f02 	tst.w	r2, #2
 8005704:	d011      	beq.n	800572a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	f012 0f02 	tst.w	r2, #2
 800570c:	d00d      	beq.n	800572a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800570e:	f06f 0202 	mvn.w	r2, #2
 8005712:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005714:	2301      	movs	r3, #1
 8005716:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005718:	6803      	ldr	r3, [r0, #0]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	f013 0f03 	tst.w	r3, #3
 8005720:	d079      	beq.n	8005816 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005722:	f7ff ffe6 	bl	80056f2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005726:	2300      	movs	r3, #0
 8005728:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	691a      	ldr	r2, [r3, #16]
 800572e:	f012 0f04 	tst.w	r2, #4
 8005732:	d012      	beq.n	800575a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	f012 0f04 	tst.w	r2, #4
 800573a:	d00e      	beq.n	800575a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800573c:	f06f 0204 	mvn.w	r2, #4
 8005740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005742:	2302      	movs	r3, #2
 8005744:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800574e:	d068      	beq.n	8005822 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005750:	4620      	mov	r0, r4
 8005752:	f7ff ffce 	bl	80056f2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005756:	2300      	movs	r3, #0
 8005758:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	691a      	ldr	r2, [r3, #16]
 800575e:	f012 0f08 	tst.w	r2, #8
 8005762:	d012      	beq.n	800578a <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005764:	68da      	ldr	r2, [r3, #12]
 8005766:	f012 0f08 	tst.w	r2, #8
 800576a:	d00e      	beq.n	800578a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800576c:	f06f 0208 	mvn.w	r2, #8
 8005770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005772:	2304      	movs	r3, #4
 8005774:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	f013 0f03 	tst.w	r3, #3
 800577e:	d057      	beq.n	8005830 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8005780:	4620      	mov	r0, r4
 8005782:	f7ff ffb6 	bl	80056f2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005786:	2300      	movs	r3, #0
 8005788:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	691a      	ldr	r2, [r3, #16]
 800578e:	f012 0f10 	tst.w	r2, #16
 8005792:	d012      	beq.n	80057ba <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	f012 0f10 	tst.w	r2, #16
 800579a:	d00e      	beq.n	80057ba <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800579c:	f06f 0210 	mvn.w	r2, #16
 80057a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057a2:	2308      	movs	r3, #8
 80057a4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f413 7f40 	tst.w	r3, #768	; 0x300
 80057ae:	d046      	beq.n	800583e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80057b0:	4620      	mov	r0, r4
 80057b2:	f7ff ff9e 	bl	80056f2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b6:	2300      	movs	r3, #0
 80057b8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	691a      	ldr	r2, [r3, #16]
 80057be:	f012 0f01 	tst.w	r2, #1
 80057c2:	d003      	beq.n	80057cc <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	f012 0f01 	tst.w	r2, #1
 80057ca:	d13f      	bne.n	800584c <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80057d4:	d003      	beq.n	80057de <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057d6:	68da      	ldr	r2, [r3, #12]
 80057d8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80057dc:	d13d      	bne.n	800585a <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	691a      	ldr	r2, [r3, #16]
 80057e2:	f412 7f80 	tst.w	r2, #256	; 0x100
 80057e6:	d003      	beq.n	80057f0 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	f012 0f80 	tst.w	r2, #128	; 0x80
 80057ee:	d13b      	bne.n	8005868 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80057f8:	d003      	beq.n	8005802 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057fa:	68da      	ldr	r2, [r3, #12]
 80057fc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005800:	d139      	bne.n	8005876 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	691a      	ldr	r2, [r3, #16]
 8005806:	f012 0f20 	tst.w	r2, #32
 800580a:	d003      	beq.n	8005814 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	f012 0f20 	tst.w	r2, #32
 8005812:	d137      	bne.n	8005884 <HAL_TIM_IRQHandler+0x18c>
}
 8005814:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005816:	f7ff ff6b 	bl	80056f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800581a:	4620      	mov	r0, r4
 800581c:	f7ff ff6a 	bl	80056f4 <HAL_TIM_PWM_PulseFinishedCallback>
 8005820:	e781      	b.n	8005726 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005822:	4620      	mov	r0, r4
 8005824:	f7ff ff64 	bl	80056f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005828:	4620      	mov	r0, r4
 800582a:	f7ff ff63 	bl	80056f4 <HAL_TIM_PWM_PulseFinishedCallback>
 800582e:	e792      	b.n	8005756 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005830:	4620      	mov	r0, r4
 8005832:	f7ff ff5d 	bl	80056f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005836:	4620      	mov	r0, r4
 8005838:	f7ff ff5c 	bl	80056f4 <HAL_TIM_PWM_PulseFinishedCallback>
 800583c:	e7a3      	b.n	8005786 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800583e:	4620      	mov	r0, r4
 8005840:	f7ff ff56 	bl	80056f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005844:	4620      	mov	r0, r4
 8005846:	f7ff ff55 	bl	80056f4 <HAL_TIM_PWM_PulseFinishedCallback>
 800584a:	e7b4      	b.n	80057b6 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800584c:	f06f 0201 	mvn.w	r2, #1
 8005850:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005852:	4620      	mov	r0, r4
 8005854:	f7fd f8fa 	bl	8002a4c <HAL_TIM_PeriodElapsedCallback>
 8005858:	e7b8      	b.n	80057cc <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800585a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800585e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005860:	4620      	mov	r0, r4
 8005862:	f000 f8d0 	bl	8005a06 <HAL_TIMEx_BreakCallback>
 8005866:	e7ba      	b.n	80057de <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005868:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800586c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800586e:	4620      	mov	r0, r4
 8005870:	f000 f8ca 	bl	8005a08 <HAL_TIMEx_Break2Callback>
 8005874:	e7bc      	b.n	80057f0 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005876:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800587a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800587c:	4620      	mov	r0, r4
 800587e:	f7ff ff3a 	bl	80056f6 <HAL_TIM_TriggerCallback>
 8005882:	e7be      	b.n	8005802 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005884:	f06f 0220 	mvn.w	r2, #32
 8005888:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800588a:	4620      	mov	r0, r4
 800588c:	f000 f8ba 	bl	8005a04 <HAL_TIMEx_CommutCallback>
}
 8005890:	e7c0      	b.n	8005814 <HAL_TIM_IRQHandler+0x11c>
	...

08005894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005894:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005896:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005898:	4a3b      	ldr	r2, [pc, #236]	; (8005988 <TIM_Base_SetConfig+0xf4>)
 800589a:	4290      	cmp	r0, r2
 800589c:	bf14      	ite	ne
 800589e:	f04f 0e00 	movne.w	lr, #0
 80058a2:	f04f 0e01 	moveq.w	lr, #1
 80058a6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80058aa:	bf14      	ite	ne
 80058ac:	4672      	movne	r2, lr
 80058ae:	f04e 0201 	orreq.w	r2, lr, #1
 80058b2:	b9aa      	cbnz	r2, 80058e0 <TIM_Base_SetConfig+0x4c>
 80058b4:	4c35      	ldr	r4, [pc, #212]	; (800598c <TIM_Base_SetConfig+0xf8>)
 80058b6:	42a0      	cmp	r0, r4
 80058b8:	bf14      	ite	ne
 80058ba:	2400      	movne	r4, #0
 80058bc:	2401      	moveq	r4, #1
 80058be:	4d34      	ldr	r5, [pc, #208]	; (8005990 <TIM_Base_SetConfig+0xfc>)
 80058c0:	42a8      	cmp	r0, r5
 80058c2:	d00d      	beq.n	80058e0 <TIM_Base_SetConfig+0x4c>
 80058c4:	b964      	cbnz	r4, 80058e0 <TIM_Base_SetConfig+0x4c>
 80058c6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80058ca:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 80058ce:	42a0      	cmp	r0, r4
 80058d0:	bf14      	ite	ne
 80058d2:	2400      	movne	r4, #0
 80058d4:	2401      	moveq	r4, #1
 80058d6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80058da:	42a8      	cmp	r0, r5
 80058dc:	d000      	beq.n	80058e0 <TIM_Base_SetConfig+0x4c>
 80058de:	b11c      	cbz	r4, 80058e8 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80058e4:	684c      	ldr	r4, [r1, #4]
 80058e6:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058e8:	2a00      	cmp	r2, #0
 80058ea:	d133      	bne.n	8005954 <TIM_Base_SetConfig+0xc0>
 80058ec:	4a27      	ldr	r2, [pc, #156]	; (800598c <TIM_Base_SetConfig+0xf8>)
 80058ee:	4290      	cmp	r0, r2
 80058f0:	bf14      	ite	ne
 80058f2:	2200      	movne	r2, #0
 80058f4:	2201      	moveq	r2, #1
 80058f6:	4c26      	ldr	r4, [pc, #152]	; (8005990 <TIM_Base_SetConfig+0xfc>)
 80058f8:	42a0      	cmp	r0, r4
 80058fa:	d02b      	beq.n	8005954 <TIM_Base_SetConfig+0xc0>
 80058fc:	bb52      	cbnz	r2, 8005954 <TIM_Base_SetConfig+0xc0>
 80058fe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005902:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8005906:	4290      	cmp	r0, r2
 8005908:	bf14      	ite	ne
 800590a:	2200      	movne	r2, #0
 800590c:	2201      	moveq	r2, #1
 800590e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005912:	42a0      	cmp	r0, r4
 8005914:	d01e      	beq.n	8005954 <TIM_Base_SetConfig+0xc0>
 8005916:	b9ea      	cbnz	r2, 8005954 <TIM_Base_SetConfig+0xc0>
 8005918:	4a1e      	ldr	r2, [pc, #120]	; (8005994 <TIM_Base_SetConfig+0x100>)
 800591a:	4290      	cmp	r0, r2
 800591c:	bf14      	ite	ne
 800591e:	2200      	movne	r2, #0
 8005920:	2201      	moveq	r2, #1
 8005922:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8005926:	42a0      	cmp	r0, r4
 8005928:	d014      	beq.n	8005954 <TIM_Base_SetConfig+0xc0>
 800592a:	b99a      	cbnz	r2, 8005954 <TIM_Base_SetConfig+0xc0>
 800592c:	4a1a      	ldr	r2, [pc, #104]	; (8005998 <TIM_Base_SetConfig+0x104>)
 800592e:	4290      	cmp	r0, r2
 8005930:	bf14      	ite	ne
 8005932:	2200      	movne	r2, #0
 8005934:	2201      	moveq	r2, #1
 8005936:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800593a:	42a0      	cmp	r0, r4
 800593c:	d00a      	beq.n	8005954 <TIM_Base_SetConfig+0xc0>
 800593e:	b94a      	cbnz	r2, 8005954 <TIM_Base_SetConfig+0xc0>
 8005940:	4a16      	ldr	r2, [pc, #88]	; (800599c <TIM_Base_SetConfig+0x108>)
 8005942:	4290      	cmp	r0, r2
 8005944:	bf14      	ite	ne
 8005946:	2200      	movne	r2, #0
 8005948:	2201      	moveq	r2, #1
 800594a:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
 800594e:	42a0      	cmp	r0, r4
 8005950:	d000      	beq.n	8005954 <TIM_Base_SetConfig+0xc0>
 8005952:	b122      	cbz	r2, 800595e <TIM_Base_SetConfig+0xca>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005954:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005958:	68cb      	ldr	r3, [r1, #12]
 800595a:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800595e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005962:	694a      	ldr	r2, [r1, #20]
 8005964:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8005966:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005968:	688a      	ldr	r2, [r1, #8]
 800596a:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800596c:	680a      	ldr	r2, [r1, #0]
 800596e:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005970:	4a0b      	ldr	r2, [pc, #44]	; (80059a0 <TIM_Base_SetConfig+0x10c>)
 8005972:	4290      	cmp	r0, r2
 8005974:	bf14      	ite	ne
 8005976:	4673      	movne	r3, lr
 8005978:	f04e 0301 	orreq.w	r3, lr, #1
 800597c:	b10b      	cbz	r3, 8005982 <TIM_Base_SetConfig+0xee>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800597e:	690b      	ldr	r3, [r1, #16]
 8005980:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005982:	2301      	movs	r3, #1
 8005984:	6143      	str	r3, [r0, #20]
}
 8005986:	bd30      	pop	{r4, r5, pc}
 8005988:	40010000 	.word	0x40010000
 800598c:	40000800 	.word	0x40000800
 8005990:	40000400 	.word	0x40000400
 8005994:	40014400 	.word	0x40014400
 8005998:	40001800 	.word	0x40001800
 800599c:	40002000 	.word	0x40002000
 80059a0:	40010400 	.word	0x40010400

080059a4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80059a4:	b360      	cbz	r0, 8005a00 <HAL_TIM_Base_Init+0x5c>
{
 80059a6:	b510      	push	{r4, lr}
 80059a8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80059aa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80059ae:	b313      	cbz	r3, 80059f6 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80059b0:	2302      	movs	r3, #2
 80059b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059b6:	4621      	mov	r1, r4
 80059b8:	f851 0b04 	ldr.w	r0, [r1], #4
 80059bc:	f7ff ff6a 	bl	8005894 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059c0:	2301      	movs	r3, #1
 80059c2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059c6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80059ca:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80059ce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80059d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80059d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80059e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059e6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80059ea:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80059ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80059f2:	2000      	movs	r0, #0
}
 80059f4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80059f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80059fa:	f7ff fe30 	bl	800565e <HAL_TIM_Base_MspInit>
 80059fe:	e7d7      	b.n	80059b0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005a00:	2001      	movs	r0, #1
}
 8005a02:	4770      	bx	lr

08005a04 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a04:	4770      	bx	lr

08005a06 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a06:	4770      	bx	lr

08005a08 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a08:	4770      	bx	lr
	...

08005a0c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005a0c:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005a0e:	680b      	ldr	r3, [r1, #0]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d018      	beq.n	8005a46 <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005a14:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005a16:	4a19      	ldr	r2, [pc, #100]	; (8005a7c <FMC_SDRAM_Init+0x70>)
 8005a18:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a1a:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 8005a1c:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a1e:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 8005a20:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 8005a22:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 8005a24:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 8005a26:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 8005a28:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 8005a2a:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 8005a2c:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 8005a2e:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 8005a30:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 8005a32:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 8005a34:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 8005a36:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 8005a38:	6a49      	ldr	r1, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8005a3a:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a3c:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005a3e:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8005a40:	2000      	movs	r0, #0
 8005a42:	bc30      	pop	{r4, r5}
 8005a44:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005a46:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005a48:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005a4c:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 8005a4e:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005a50:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8005a52:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8005a54:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005a56:	4322      	orrs	r2, r4
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005a58:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005a5a:	4c08      	ldr	r4, [pc, #32]	; (8005a7c <FMC_SDRAM_Init+0x70>)
 8005a5c:	401c      	ands	r4, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a5e:	684b      	ldr	r3, [r1, #4]
 8005a60:	688d      	ldr	r5, [r1, #8]
 8005a62:	432b      	orrs	r3, r5
                       Init->RowBitsNumber       |\
 8005a64:	68cd      	ldr	r5, [r1, #12]
 8005a66:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 8005a68:	690d      	ldr	r5, [r1, #16]
 8005a6a:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 8005a6c:	694d      	ldr	r5, [r1, #20]
 8005a6e:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 8005a70:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 8005a72:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a74:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005a76:	6002      	str	r2, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005a78:	6043      	str	r3, [r0, #4]
 8005a7a:	e7e1      	b.n	8005a40 <FMC_SDRAM_Init+0x34>
 8005a7c:	ffff8000 	.word	0xffff8000

08005a80 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005a80:	b510      	push	{r4, lr}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005a82:	2a01      	cmp	r2, #1
 8005a84:	d025      	beq.n	8005ad2 <FMC_SDRAM_Timing_Init+0x52>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005a86:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005a88:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005a8c:	680b      	ldr	r3, [r1, #0]
 8005a8e:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005a90:	684c      	ldr	r4, [r1, #4]
 8005a92:	f104 3cff 	add.w	ip, r4, #4294967295
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005a96:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005a9a:	688c      	ldr	r4, [r1, #8]
 8005a9c:	f104 3cff 	add.w	ip, r4, #4294967295
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005aa0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005aa4:	68cc      	ldr	r4, [r1, #12]
 8005aa6:	f104 3cff 	add.w	ip, r4, #4294967295
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005aaa:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005aae:	690c      	ldr	r4, [r1, #16]
 8005ab0:	f104 3cff 	add.w	ip, r4, #4294967295
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005ab4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 8005ab8:	694c      	ldr	r4, [r1, #20]
 8005aba:	f104 3cff 	add.w	ip, r4, #4294967295
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005abe:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 8005ac2:	6989      	ldr	r1, [r1, #24]
 8005ac4:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005ac6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005aca:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005acc:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8005ace:	2000      	movs	r0, #0
 8005ad0:	bd10      	pop	{r4, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005ad2:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005ad4:	4c13      	ldr	r4, [pc, #76]	; (8005b24 <FMC_SDRAM_Timing_Init+0xa4>)
 8005ad6:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005ad8:	68ca      	ldr	r2, [r1, #12]
 8005ada:	f102 3cff 	add.w	ip, r2, #4294967295
                        (((Timing->RPDelay)-1) << 20)); 
 8005ade:	694b      	ldr	r3, [r1, #20]
 8005ae0:	1e5a      	subs	r2, r3, #1
 8005ae2:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005ae4:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
 8005ae8:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005aea:	68c3      	ldr	r3, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005aec:	f003 4c70 	and.w	ip, r3, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005af0:	680b      	ldr	r3, [r1, #0]
 8005af2:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005af4:	684c      	ldr	r4, [r1, #4]
 8005af6:	f104 3eff 	add.w	lr, r4, #4294967295
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005afa:	ea43 130e 	orr.w	r3, r3, lr, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005afe:	688c      	ldr	r4, [r1, #8]
 8005b00:	f104 3eff 	add.w	lr, r4, #4294967295
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005b04:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8005b08:	690c      	ldr	r4, [r1, #16]
 8005b0a:	f104 3eff 	add.w	lr, r4, #4294967295
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005b0e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 8005b12:	6989      	ldr	r1, [r1, #24]
 8005b14:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005b16:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005b1a:	ea43 030c 	orr.w	r3, r3, ip
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005b1e:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005b20:	60c3      	str	r3, [r0, #12]
 8005b22:	e7d4      	b.n	8005ace <FMC_SDRAM_Timing_Init+0x4e>
 8005b24:	ff0f0fff 	.word	0xff0f0fff

08005b28 <__libc_init_array>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	4d0d      	ldr	r5, [pc, #52]	; (8005b60 <__libc_init_array+0x38>)
 8005b2c:	4c0d      	ldr	r4, [pc, #52]	; (8005b64 <__libc_init_array+0x3c>)
 8005b2e:	1b64      	subs	r4, r4, r5
 8005b30:	10a4      	asrs	r4, r4, #2
 8005b32:	2600      	movs	r6, #0
 8005b34:	42a6      	cmp	r6, r4
 8005b36:	d109      	bne.n	8005b4c <__libc_init_array+0x24>
 8005b38:	4d0b      	ldr	r5, [pc, #44]	; (8005b68 <__libc_init_array+0x40>)
 8005b3a:	4c0c      	ldr	r4, [pc, #48]	; (8005b6c <__libc_init_array+0x44>)
 8005b3c:	f000 f820 	bl	8005b80 <_init>
 8005b40:	1b64      	subs	r4, r4, r5
 8005b42:	10a4      	asrs	r4, r4, #2
 8005b44:	2600      	movs	r6, #0
 8005b46:	42a6      	cmp	r6, r4
 8005b48:	d105      	bne.n	8005b56 <__libc_init_array+0x2e>
 8005b4a:	bd70      	pop	{r4, r5, r6, pc}
 8005b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b50:	4798      	blx	r3
 8005b52:	3601      	adds	r6, #1
 8005b54:	e7ee      	b.n	8005b34 <__libc_init_array+0xc>
 8005b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b5a:	4798      	blx	r3
 8005b5c:	3601      	adds	r6, #1
 8005b5e:	e7f2      	b.n	8005b46 <__libc_init_array+0x1e>
 8005b60:	080078b0 	.word	0x080078b0
 8005b64:	080078b0 	.word	0x080078b0
 8005b68:	080078b0 	.word	0x080078b0
 8005b6c:	080078b4 	.word	0x080078b4

08005b70 <memset>:
 8005b70:	4402      	add	r2, r0
 8005b72:	4603      	mov	r3, r0
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d100      	bne.n	8005b7a <memset+0xa>
 8005b78:	4770      	bx	lr
 8005b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b7e:	e7f9      	b.n	8005b74 <memset+0x4>

08005b80 <_init>:
 8005b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b82:	bf00      	nop
 8005b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b86:	bc08      	pop	{r3}
 8005b88:	469e      	mov	lr, r3
 8005b8a:	4770      	bx	lr

08005b8c <_fini>:
 8005b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8e:	bf00      	nop
 8005b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b92:	bc08      	pop	{r3}
 8005b94:	469e      	mov	lr, r3
 8005b96:	4770      	bx	lr
