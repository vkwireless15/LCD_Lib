
SimpleGraphics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006124  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d60  080062ec  080062ec  000162ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800804c  0800804c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800804c  0800804c  0001804c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008054  08008054  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008054  08008054  00018054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008058  08008058  00018058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800805c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003ff14  20000014  08008070  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2003ff28  08008070  0002ff28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000240a0  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af1  00000000  00000000  000440e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e0  00000000  00000000  00047bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002a78c  00000000  00000000  000492b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00023813  00000000  00000000  00073a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00100a24  00000000  00000000  00097257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00197c7b  2**0
                  CONTENTS, READONLY
 19 .debug_loc    0001937b  00000000  00000000  00197ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00001690  00000000  00000000  001b1048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000041d4  00000000  00000000  001b26d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000014 	.word	0x20000014
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080062d4 	.word	0x080062d4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000018 	.word	0x20000018
 8000204:	080062d4 	.word	0x080062d4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <Init_Graphics_System>:
uint32 LCD_FRAME_BUFFER1 = 0;
uint32 LCD_FRAME_BUFFER2 = 0;


void Init_Graphics_System(uint32 LCD_RAM_START_ADDRESS, uint8 Layers, uint8 ColorType) //Инициализация драйвера дисплея, графического ускорителя и т.п.
{
 800050c:	b508      	push	{r3, lr}
    LCD_FRAME_BUFFER0 = LCD_RAM_START_ADDRESS;
 800050e:	4b02      	ldr	r3, [pc, #8]	; (8000518 <Init_Graphics_System+0xc>)
 8000510:	6018      	str	r0, [r3, #0]

    Touch_Init();
 8000512:	f002 f86d 	bl	80025f0 <Touch_Init>

}
 8000516:	bd08      	pop	{r3, pc}
 8000518:	20000030 	.word	0x20000030

0800051c <Fill_all>:

void Fill_all(uint32 Color) //Заливка всего дисплея цветом
{
	for(int i=0; i<480*272; i++)
 800051c:	2300      	movs	r3, #0
 800051e:	e005      	b.n	800052c <Fill_all+0x10>
	{
	  *(__IO uint16*) (LCD_FRAME_BUFFER0 + (i*2)) = Color;
 8000520:	4a04      	ldr	r2, [pc, #16]	; (8000534 <Fill_all+0x18>)
 8000522:	6812      	ldr	r2, [r2, #0]
 8000524:	b281      	uxth	r1, r0
 8000526:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<480*272; i++)
 800052a:	3301      	adds	r3, #1
 800052c:	f5b3 3fff 	cmp.w	r3, #130560	; 0x1fe00
 8000530:	dbf6      	blt.n	8000520 <Fill_all+0x4>
	}
}
 8000532:	4770      	bx	lr
 8000534:	20000030 	.word	0x20000030

08000538 <Fill_rectangle>:

void Fill_rectangle(uint32 Color, int32 StartX, int32 StopX, int32 StartY, int32 StopY) //Заливка прямоугольной формы
{
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	4604      	mov	r4, r0
 800053c:	4610      	mov	r0, r2
 800053e:	9e04      	ldr	r6, [sp, #16]
	StartX--;
 8000540:	1e4d      	subs	r5, r1, #1
	StartY--;
 8000542:	f103 3eff 	add.w	lr, r3, #4294967295

	for(uint32 y = StartY; y < StopY; y++)
 8000546:	e00e      	b.n	8000566 <Fill_rectangle+0x2e>
	{
		for(uint32 x = StartX; x < StopX; x++)
		{
			*(__IO uint16*) (LCD_FRAME_BUFFER0 + (2*(y*DispWidth + x))) = Color;
 8000548:	4909      	ldr	r1, [pc, #36]	; (8000570 <Fill_rectangle+0x38>)
 800054a:	6809      	ldr	r1, [r1, #0]
 800054c:	fb01 310e 	mla	r1, r1, lr, r3
 8000550:	4a08      	ldr	r2, [pc, #32]	; (8000574 <Fill_rectangle+0x3c>)
 8000552:	6812      	ldr	r2, [r2, #0]
 8000554:	fa1f fc84 	uxth.w	ip, r4
 8000558:	f822 c011 	strh.w	ip, [r2, r1, lsl #1]
		for(uint32 x = StartX; x < StopX; x++)
 800055c:	3301      	adds	r3, #1
 800055e:	4298      	cmp	r0, r3
 8000560:	d8f2      	bhi.n	8000548 <Fill_rectangle+0x10>
	for(uint32 y = StartY; y < StopY; y++)
 8000562:	f10e 0e01 	add.w	lr, lr, #1
 8000566:	4576      	cmp	r6, lr
 8000568:	d901      	bls.n	800056e <Fill_rectangle+0x36>
		for(uint32 x = StartX; x < StopX; x++)
 800056a:	462b      	mov	r3, r5
 800056c:	e7f7      	b.n	800055e <Fill_rectangle+0x26>
		}
	}
}
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	20000004 	.word	0x20000004
 8000574:	20000030 	.word	0x20000030

08000578 <MemPoint>:

void MemPoint(int32 x, int32 y, uint32 Color) //Отрисовка одного пикселя
{
	*(__IO uint16*) (LCD_FRAME_BUFFER0 + (2*(y*DispWidth + x))) = Color;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <MemPoint+0x14>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	fb03 0001 	mla	r0, r3, r1, r0
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <MemPoint+0x18>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	b292      	uxth	r2, r2
 8000586:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
}
 800058a:	4770      	bx	lr
 800058c:	20000004 	.word	0x20000004
 8000590:	20000030 	.word	0x20000030

08000594 <GetCursor>:
		HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, SET);
	}
}

void GetCursor()
{
 8000594:	b510      	push	{r4, lr}
    TS_GetState(&TS_State);
 8000596:	4c2b      	ldr	r4, [pc, #172]	; (8000644 <GetCursor+0xb0>)
 8000598:	4620      	mov	r0, r4
 800059a:	f001 ff69 	bl	8002470 <TS_GetState>
    if(TS_State.touchDetected)
 800059e:	7823      	ldrb	r3, [r4, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d02b      	beq.n	80005fc <GetCursor+0x68>
    {
    	CrPosX1 = TS_State.touchX[0];
 80005a4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80005a8:	4a27      	ldr	r2, [pc, #156]	; (8000648 <GetCursor+0xb4>)
 80005aa:	8011      	strh	r1, [r2, #0]
		CrPosY1 = TS_State.touchY[0];
 80005ac:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80005b0:	4a26      	ldr	r2, [pc, #152]	; (800064c <GetCursor+0xb8>)
 80005b2:	8011      	strh	r1, [r2, #0]

		CrPosX2 = TS_State.touchX[1];
 80005b4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80005b8:	4a25      	ldr	r2, [pc, #148]	; (8000650 <GetCursor+0xbc>)
 80005ba:	8011      	strh	r1, [r2, #0]
		CrPosY2 = TS_State.touchY[1];
 80005bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80005c0:	4a24      	ldr	r2, [pc, #144]	; (8000654 <GetCursor+0xc0>)
 80005c2:	8011      	strh	r1, [r2, #0]

		CrPosX3 = TS_State.touchX[2];
 80005c4:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80005c8:	4a23      	ldr	r2, [pc, #140]	; (8000658 <GetCursor+0xc4>)
 80005ca:	8011      	strh	r1, [r2, #0]
		CrPosY3 = TS_State.touchY[2];
 80005cc:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80005d0:	4a22      	ldr	r2, [pc, #136]	; (800065c <GetCursor+0xc8>)
 80005d2:	8011      	strh	r1, [r2, #0]

		CrPosX4 = TS_State.touchX[3];
 80005d4:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80005d8:	4a21      	ldr	r2, [pc, #132]	; (8000660 <GetCursor+0xcc>)
 80005da:	8011      	strh	r1, [r2, #0]
		CrPosY4 = TS_State.touchY[3];
 80005dc:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 80005e0:	4a20      	ldr	r2, [pc, #128]	; (8000664 <GetCursor+0xd0>)
 80005e2:	8011      	strh	r1, [r2, #0]

		CrPosX5 = TS_State.touchX[4];
 80005e4:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80005e8:	4a1f      	ldr	r2, [pc, #124]	; (8000668 <GetCursor+0xd4>)
 80005ea:	8011      	strh	r1, [r2, #0]
		CrPosY5 = TS_State.touchY[4];
 80005ec:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80005f0:	4b1e      	ldr	r3, [pc, #120]	; (800066c <GetCursor+0xd8>)
 80005f2:	801a      	strh	r2, [r3, #0]

		CrStatus = Clicked;
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <GetCursor+0xdc>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
    	TS_State.touchX[4] = 0;
		TS_State.touchY[4] = 0;

		CrStatus = NotClicked;
    }
}
 80005fa:	bd10      	pop	{r4, pc}
    	CrPosX1 = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	4a12      	ldr	r2, [pc, #72]	; (8000648 <GetCursor+0xb4>)
 8000600:	8013      	strh	r3, [r2, #0]
		CrPosY1 = 0;
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <GetCursor+0xb8>)
 8000604:	8013      	strh	r3, [r2, #0]
		CrPosX2 = 0;
 8000606:	4a12      	ldr	r2, [pc, #72]	; (8000650 <GetCursor+0xbc>)
 8000608:	8013      	strh	r3, [r2, #0]
		CrPosY2 = 0;
 800060a:	4a12      	ldr	r2, [pc, #72]	; (8000654 <GetCursor+0xc0>)
 800060c:	8013      	strh	r3, [r2, #0]
		CrPosX3 = 0;
 800060e:	4a12      	ldr	r2, [pc, #72]	; (8000658 <GetCursor+0xc4>)
 8000610:	8013      	strh	r3, [r2, #0]
		CrPosY3 = 0;
 8000612:	4a12      	ldr	r2, [pc, #72]	; (800065c <GetCursor+0xc8>)
 8000614:	8013      	strh	r3, [r2, #0]
		CrPosX4 = 0;
 8000616:	4a12      	ldr	r2, [pc, #72]	; (8000660 <GetCursor+0xcc>)
 8000618:	8013      	strh	r3, [r2, #0]
		CrPosY4 = 0;
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <GetCursor+0xd0>)
 800061c:	8013      	strh	r3, [r2, #0]
		CrPosX5 = 0;
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <GetCursor+0xd4>)
 8000620:	8013      	strh	r3, [r2, #0]
		CrPosY5 = 0;
 8000622:	4a12      	ldr	r2, [pc, #72]	; (800066c <GetCursor+0xd8>)
 8000624:	8013      	strh	r3, [r2, #0]
    	TS_State.touchX[0] = 0;
 8000626:	4a07      	ldr	r2, [pc, #28]	; (8000644 <GetCursor+0xb0>)
 8000628:	8053      	strh	r3, [r2, #2]
		TS_State.touchY[0] = 0;
 800062a:	8193      	strh	r3, [r2, #12]
    	TS_State.touchX[1] = 0;
 800062c:	8093      	strh	r3, [r2, #4]
		TS_State.touchY[1] = 0;
 800062e:	81d3      	strh	r3, [r2, #14]
    	TS_State.touchX[2] = 0;
 8000630:	80d3      	strh	r3, [r2, #6]
		TS_State.touchY[2] = 0;
 8000632:	8213      	strh	r3, [r2, #16]
    	TS_State.touchX[3] = 0;
 8000634:	8113      	strh	r3, [r2, #8]
		TS_State.touchY[3] = 0;
 8000636:	8253      	strh	r3, [r2, #18]
    	TS_State.touchX[4] = 0;
 8000638:	8153      	strh	r3, [r2, #10]
		TS_State.touchY[4] = 0;
 800063a:	8293      	strh	r3, [r2, #20]
		CrStatus = NotClicked;
 800063c:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <GetCursor+0xdc>)
 800063e:	7013      	strb	r3, [r2, #0]
}
 8000640:	e7db      	b.n	80005fa <GetCursor+0x66>
 8000642:	bf00      	nop
 8000644:	20000034 	.word	0x20000034
 8000648:	2000007e 	.word	0x2000007e
 800064c:	20000088 	.word	0x20000088
 8000650:	20000080 	.word	0x20000080
 8000654:	2000008a 	.word	0x2000008a
 8000658:	20000082 	.word	0x20000082
 800065c:	2000008c 	.word	0x2000008c
 8000660:	20000084 	.word	0x20000084
 8000664:	2000008e 	.word	0x2000008e
 8000668:	20000086 	.word	0x20000086
 800066c:	20000090 	.word	0x20000090
 8000670:	20000093 	.word	0x20000093

08000674 <Get565Color>:
uint32 Color_A888_(uint32 Color, uint8 Alpha) //преобразует отдельные значения цвета  и прозрачности в формат А888(альфа канал + 24 бита цвета)
{
	return Color | Alpha << 24;
}
uint16 Get565Color(uint32 Color) //Возвращает значение цвета в формате пикселя 565(5 бит - красный цвет, 6 - зеленый, 5 - синий)
{
 8000674:	b500      	push	{lr}
   uint8 R, G, B;
   R = (Color >> 16) & 0xff;
   G = (Color >> 8) & 0xff;
   B = Color & 0xff;

   R = 31 * R / 255;
 8000676:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800067a:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 800067e:	4912      	ldr	r1, [pc, #72]	; (80006c8 <Get565Color+0x54>)
 8000680:	fb81 c203 	smull	ip, r2, r1, r3
 8000684:	441a      	add	r2, r3
 8000686:	17db      	asrs	r3, r3, #31
 8000688:	ebc3 12e2 	rsb	r2, r3, r2, asr #7
   G = 63 * G / 255;
 800068c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000690:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8000694:	fb81 ec03 	smull	lr, ip, r1, r3
 8000698:	449c      	add	ip, r3
 800069a:	17db      	asrs	r3, r3, #31
 800069c:	ebc3 13ec 	rsb	r3, r3, ip, asr #7
   B = 31 * B / 255;
 80006a0:	b2c0      	uxtb	r0, r0
 80006a2:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 80006a6:	fb81 c100 	smull	ip, r1, r1, r0
 80006aa:	4401      	add	r1, r0
 80006ac:	17c0      	asrs	r0, r0, #31
 80006ae:	ebc0 10e1 	rsb	r0, r0, r1, asr #7
 80006b2:	b2c0      	uxtb	r0, r0

   RezColor |= B;
   RezColor |= (G << 5);
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   RezColor |= (R << 11);
 80006ba:	b2d2      	uxtb	r2, r2
 80006bc:	ea40 20c2 	orr.w	r0, r0, r2, lsl #11

   return RezColor;
}
 80006c0:	b280      	uxth	r0, r0
 80006c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80006c6:	bf00      	nop
 80006c8:	80808081 	.word	0x80808081

080006cc <FontHParameter>:
uint32 FontHParameter() //Возвращает значение высоты шрифта
{
	uint8 FontH = calibri[1];
	return FontH;
}
 80006cc:	4b01      	ldr	r3, [pc, #4]	; (80006d4 <FontHParameter+0x8>)
 80006ce:	7858      	ldrb	r0, [r3, #1]
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	080062ec 	.word	0x080062ec

080006d8 <SymbolParameters>:
		}
	}
	return Error;
}
void SymbolParameters(uint16 X, uint16 Y, uint16 *NextX, uint16 *NextY, uint8 *CharWt, uint8 *CharHt, char Symbol) //Параметры положения текущего символа и положения следующих возможных.
{
 80006d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006da:	4605      	mov	r5, r0
 80006dc:	460c      	mov	r4, r1
 80006de:	4617      	mov	r7, r2
 80006e0:	461e      	mov	r6, r3
	uint8 FontH = FontHParameter();
 80006e2:	f7ff fff3 	bl	80006cc <FontHParameter>
 80006e6:	b2c0      	uxtb	r0, r0
	uint8 FirstChar = calibri[2];
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <SymbolParameters+0x3c>)
 80006ea:	789a      	ldrb	r2, [r3, #2]
	uint8 Cursor = Symbol - FirstChar;
 80006ec:	f89d c020 	ldrb.w	ip, [sp, #32]
 80006f0:	ebac 0c02 	sub.w	ip, ip, r2
 80006f4:	fa5f fc8c 	uxtb.w	ip, ip
	uint8 CharW = calibri[Cursor + 4];
 80006f8:	f10c 0c04 	add.w	ip, ip, #4
 80006fc:	f813 300c 	ldrb.w	r3, [r3, ip]

	*NextX = X + CharW;
 8000700:	441d      	add	r5, r3
 8000702:	803d      	strh	r5, [r7, #0]
	*NextY = Y + FontH;
 8000704:	4404      	add	r4, r0
 8000706:	8034      	strh	r4, [r6, #0]
	*CharWt = CharW;
 8000708:	9a06      	ldr	r2, [sp, #24]
 800070a:	7013      	strb	r3, [r2, #0]
	*CharHt = FontH;
 800070c:	9b07      	ldr	r3, [sp, #28]
 800070e:	7018      	strb	r0, [r3, #0]
}
 8000710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000712:	bf00      	nop
 8000714:	080062ec 	.word	0x080062ec

08000718 <SymbolLengthPixels>:
uint32 SymbolLengthPixels(char String[]) //Длина строки в пикселях
{
 8000718:	b500      	push	{lr}
 800071a:	4684      	mov	ip, r0
	uint8 FirstChar = calibri[2];
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <SymbolLengthPixels+0x2c>)
 800071e:	f893 e002 	ldrb.w	lr, [r3, #2]
	uint8 Cursor = 0;
	uint8 CharW = 0;
	uint32 Len = 0;
	uint32 SymCh = 0;
 8000722:	2200      	movs	r2, #0
	uint32 Len = 0;
 8000724:	4610      	mov	r0, r2

	while(String[SymCh] != 0)
 8000726:	e007      	b.n	8000738 <SymbolLengthPixels+0x20>
	{
		Cursor = String[SymCh] - FirstChar;
 8000728:	eba3 030e 	sub.w	r3, r3, lr
 800072c:	b2db      	uxtb	r3, r3
		CharW = calibri[Cursor + 4];
 800072e:	3304      	adds	r3, #4
 8000730:	4904      	ldr	r1, [pc, #16]	; (8000744 <SymbolLengthPixels+0x2c>)
 8000732:	5ccb      	ldrb	r3, [r1, r3]
		Len += CharW;
 8000734:	4418      	add	r0, r3
		SymCh++;
 8000736:	3201      	adds	r2, #1
	while(String[SymCh] != 0)
 8000738:	f81c 3002 	ldrb.w	r3, [ip, r2]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d1f3      	bne.n	8000728 <SymbolLengthPixels+0x10>
	}
	return Len;
}
 8000740:	f85d fb04 	ldr.w	pc, [sp], #4
 8000744:	080062ec 	.word	0x080062ec

08000748 <Inverse>:
			 s++;
		 }
	 }
}
uint8 Inverse(uint8 S)
{
 8000748:	4602      	mov	r2, r0
	uint8 K = 0;
	for(uint8 i = 0; i<8; i++)
 800074a:	2300      	movs	r3, #0
	uint8 K = 0;
 800074c:	4618      	mov	r0, r3
	for(uint8 i = 0; i<8; i++)
 800074e:	e006      	b.n	800075e <Inverse+0x16>
	{
		if((S & 0x01) != 0)
		{
			K = K | 0x01;
		}
		S = S >> 1;
 8000750:	0852      	lsrs	r2, r2, #1
		if(i<7)
 8000752:	2b06      	cmp	r3, #6
 8000754:	d801      	bhi.n	800075a <Inverse+0x12>
		{
		  K = K << 1;
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	b2c0      	uxtb	r0, r0
	for(uint8 i = 0; i<8; i++)
 800075a:	3301      	adds	r3, #1
 800075c:	b2db      	uxtb	r3, r3
 800075e:	2b07      	cmp	r3, #7
 8000760:	d805      	bhi.n	800076e <Inverse+0x26>
		if((S & 0x01) != 0)
 8000762:	f012 0f01 	tst.w	r2, #1
 8000766:	d0f3      	beq.n	8000750 <Inverse+0x8>
			K = K | 0x01;
 8000768:	f040 0001 	orr.w	r0, r0, #1
 800076c:	e7f0      	b.n	8000750 <Inverse+0x8>
	    }
	}
	return K;
}
 800076e:	4770      	bx	lr

08000770 <TouchCnt>:

uint8 TouchCnt()
{
	uint8 TC = 0;

	if(CrPosX1>0 && CrPosY1>0)
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <TouchCnt+0x80>)
 8000772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000776:	2b00      	cmp	r3, #0
 8000778:	dd08      	ble.n	800078c <TouchCnt+0x1c>
 800077a:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <TouchCnt+0x84>)
 800077c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000780:	2b00      	cmp	r3, #0
 8000782:	dd01      	ble.n	8000788 <TouchCnt+0x18>
		TC++;
 8000784:	2001      	movs	r0, #1
 8000786:	e002      	b.n	800078e <TouchCnt+0x1e>
	uint8 TC = 0;
 8000788:	2000      	movs	r0, #0
 800078a:	e000      	b.n	800078e <TouchCnt+0x1e>
 800078c:	2000      	movs	r0, #0

	if(CrPosX2>0 && CrPosY2>0)
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <TouchCnt+0x88>)
 8000790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000794:	2b00      	cmp	r3, #0
 8000796:	dd06      	ble.n	80007a6 <TouchCnt+0x36>
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <TouchCnt+0x8c>)
 800079a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	dd01      	ble.n	80007a6 <TouchCnt+0x36>
			TC++;
 80007a2:	3001      	adds	r0, #1
 80007a4:	b2c0      	uxtb	r0, r0

	if(CrPosX3>0 && CrPosY3>0)
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <TouchCnt+0x90>)
 80007a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	dd06      	ble.n	80007be <TouchCnt+0x4e>
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <TouchCnt+0x94>)
 80007b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	dd01      	ble.n	80007be <TouchCnt+0x4e>
			TC++;
 80007ba:	3001      	adds	r0, #1
 80007bc:	b2c0      	uxtb	r0, r0

	if(CrPosX4>0 && CrPosY4>0)
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <TouchCnt+0x98>)
 80007c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	dd06      	ble.n	80007d6 <TouchCnt+0x66>
 80007c8:	4b10      	ldr	r3, [pc, #64]	; (800080c <TouchCnt+0x9c>)
 80007ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	dd01      	ble.n	80007d6 <TouchCnt+0x66>
			TC++;
 80007d2:	3001      	adds	r0, #1
 80007d4:	b2c0      	uxtb	r0, r0

	if(CrPosX5>0 && CrPosY5>0)
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <TouchCnt+0xa0>)
 80007d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	dd06      	ble.n	80007ee <TouchCnt+0x7e>
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <TouchCnt+0xa4>)
 80007e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	dd01      	ble.n	80007ee <TouchCnt+0x7e>
			TC++;
 80007ea:	3001      	adds	r0, #1
 80007ec:	b2c0      	uxtb	r0, r0

	return TC;
}
 80007ee:	4770      	bx	lr
 80007f0:	2000007e 	.word	0x2000007e
 80007f4:	20000088 	.word	0x20000088
 80007f8:	20000080 	.word	0x20000080
 80007fc:	2000008a 	.word	0x2000008a
 8000800:	20000082 	.word	0x20000082
 8000804:	2000008c 	.word	0x2000008c
 8000808:	20000084 	.word	0x20000084
 800080c:	2000008e 	.word	0x2000008e
 8000810:	20000086 	.word	0x20000086
 8000814:	20000090 	.word	0x20000090

08000818 <isTouch>:
uint8 isTouch()
{
 8000818:	b570      	push	{r4, r5, r6, lr}
	static int16 Dist;

	uint8 RetSt = NotClicked;
	int16 X1_move = 0, Y1_move = 0;

	GetCursor();
 800081a:	f7ff febb 	bl	8000594 <GetCursor>
	if(CrStatus == Clicked)
 800081e:	4b71      	ldr	r3, [pc, #452]	; (80009e4 <isTouch+0x1cc>)
 8000820:	781d      	ldrb	r5, [r3, #0]
 8000822:	2d01      	cmp	r5, #1
 8000824:	d010      	beq.n	8000848 <isTouch+0x30>

		}
	}
	else
	{
		x1 = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	4a6f      	ldr	r2, [pc, #444]	; (80009e8 <isTouch+0x1d0>)
 800082a:	8013      	strh	r3, [r2, #0]
	    y1 = 0;
 800082c:	4a6f      	ldr	r2, [pc, #444]	; (80009ec <isTouch+0x1d4>)
 800082e:	8013      	strh	r3, [r2, #0]

	    Dist = 0;
 8000830:	4a6f      	ldr	r2, [pc, #444]	; (80009f0 <isTouch+0x1d8>)
 8000832:	8013      	strh	r3, [r2, #0]
	    CrStep = 0;
 8000834:	4a6f      	ldr	r2, [pc, #444]	; (80009f4 <isTouch+0x1dc>)
 8000836:	8013      	strh	r3, [r2, #0]

		if(CrSt == Clicked)
 8000838:	4b6f      	ldr	r3, [pc, #444]	; (80009f8 <isTouch+0x1e0>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b01      	cmp	r3, #1
 800083e:	f000 80cb 	beq.w	80009d8 <isTouch+0x1c0>
			CrSt = NotClicked;
			RetSt = Unclicked;
		}
		else
		{
			RetSt = NotClicked;
 8000842:	2400      	movs	r4, #0
		}
	}

	return RetSt;

}
 8000844:	4620      	mov	r0, r4
 8000846:	bd70      	pop	{r4, r5, r6, pc}
		CrSt = Clicked;
 8000848:	4b6b      	ldr	r3, [pc, #428]	; (80009f8 <isTouch+0x1e0>)
 800084a:	2201      	movs	r2, #1
 800084c:	701a      	strb	r2, [r3, #0]
		if(TouchCnt() == 1)
 800084e:	f7ff ff8f 	bl	8000770 <TouchCnt>
 8000852:	4604      	mov	r4, r0
 8000854:	2801      	cmp	r0, #1
 8000856:	d026      	beq.n	80008a6 <isTouch+0x8e>
		RetSt = Clicked;
 8000858:	462c      	mov	r4, r5
		if(TouchCnt() == 2)
 800085a:	f7ff ff89 	bl	8000770 <TouchCnt>
 800085e:	2802      	cmp	r0, #2
 8000860:	d1f0      	bne.n	8000844 <isTouch+0x2c>
			if(Dist != 0 && Dist > 0)
 8000862:	4b63      	ldr	r3, [pc, #396]	; (80009f0 <isTouch+0x1d8>)
 8000864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000868:	2b00      	cmp	r3, #0
 800086a:	dd7b      	ble.n	8000964 <isTouch+0x14c>
				if((CrPosX2 - CrPosX1) + (CrPosY2 - CrPosY1) > Dist)
 800086c:	4a63      	ldr	r2, [pc, #396]	; (80009fc <isTouch+0x1e4>)
 800086e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000872:	4963      	ldr	r1, [pc, #396]	; (8000a00 <isTouch+0x1e8>)
 8000874:	f9b1 0000 	ldrsh.w	r0, [r1]
 8000878:	1a14      	subs	r4, r2, r0
 800087a:	4962      	ldr	r1, [pc, #392]	; (8000a04 <isTouch+0x1ec>)
 800087c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000880:	4d61      	ldr	r5, [pc, #388]	; (8000a08 <isTouch+0x1f0>)
 8000882:	f9b5 5000 	ldrsh.w	r5, [r5]
 8000886:	eba1 0c05 	sub.w	ip, r1, r5
 800088a:	4464      	add	r4, ip
 800088c:	429c      	cmp	r4, r3
 800088e:	dd5f      	ble.n	8000950 <isTouch+0x138>
					CrStep = (CrPosX2 - CrPosX1) + (CrPosY2 - CrPosY1) - Dist;
 8000890:	1a12      	subs	r2, r2, r0
 8000892:	fa1f f18c 	uxth.w	r1, ip
 8000896:	fa11 f282 	uxtah	r2, r1, r2
 800089a:	b292      	uxth	r2, r2
 800089c:	1ad2      	subs	r2, r2, r3
 800089e:	4955      	ldr	r1, [pc, #340]	; (80009f4 <isTouch+0x1dc>)
 80008a0:	800a      	strh	r2, [r1, #0]
					RetSt = ZoomOut;
 80008a2:	2408      	movs	r4, #8
 80008a4:	e05f      	b.n	8000966 <isTouch+0x14e>
            if(x1 != 0)
 80008a6:	4b50      	ldr	r3, [pc, #320]	; (80009e8 <isTouch+0x1d0>)
 80008a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d038      	beq.n	8000922 <isTouch+0x10a>
            	X1_move = CrPosX1 - x1;
 80008b0:	4a53      	ldr	r2, [pc, #332]	; (8000a00 <isTouch+0x1e8>)
 80008b2:	f8b2 c000 	ldrh.w	ip, [r2]
 80008b6:	fa1f fe83 	uxth.w	lr, r3
 80008ba:	ebac 020e 	sub.w	r2, ip, lr
 80008be:	b213      	sxth	r3, r2
                Y1_move = CrPosY1 - y1;
 80008c0:	4a51      	ldr	r2, [pc, #324]	; (8000a08 <isTouch+0x1f0>)
 80008c2:	8816      	ldrh	r6, [r2, #0]
 80008c4:	4a49      	ldr	r2, [pc, #292]	; (80009ec <isTouch+0x1d4>)
 80008c6:	8811      	ldrh	r1, [r2, #0]
 80008c8:	1a72      	subs	r2, r6, r1
 80008ca:	b212      	sxth	r2, r2
                if(X1_move > 3)
 80008cc:	2b03      	cmp	r3, #3
 80008ce:	dd06      	ble.n	80008de <isTouch+0xc6>
                	if(Y1_move < 0)
 80008d0:	2a00      	cmp	r2, #0
 80008d2:	db2f      	blt.n	8000934 <isTouch+0x11c>
                	if(X1_move > Y1_move)
 80008d4:	429a      	cmp	r2, r3
 80008d6:	da02      	bge.n	80008de <isTouch+0xc6>
                	{ RetSt = RightSwap; CrStep = X1_move;}
 80008d8:	4846      	ldr	r0, [pc, #280]	; (80009f4 <isTouch+0x1dc>)
 80008da:	8003      	strh	r3, [r0, #0]
 80008dc:	2406      	movs	r4, #6
                if(X1_move < -3)
 80008de:	f113 0f03 	cmn.w	r3, #3
 80008e2:	da09      	bge.n	80008f8 <isTouch+0xe0>
                	if(Y1_move < 0)
 80008e4:	2a00      	cmp	r2, #0
 80008e6:	db28      	blt.n	800093a <isTouch+0x122>
                	X1_move = x1 - CrPosX1;
 80008e8:	ebae 000c 	sub.w	r0, lr, ip
 80008ec:	b203      	sxth	r3, r0
                	if(X1_move > Y1_move)
 80008ee:	429a      	cmp	r2, r3
 80008f0:	da02      	bge.n	80008f8 <isTouch+0xe0>
                	{ RetSt = LeftSwap; CrStep = X1_move;}
 80008f2:	4840      	ldr	r0, [pc, #256]	; (80009f4 <isTouch+0x1dc>)
 80008f4:	8003      	strh	r3, [r0, #0]
 80008f6:	2405      	movs	r4, #5
                if(Y1_move > 3)
 80008f8:	2a03      	cmp	r2, #3
 80008fa:	dd06      	ble.n	800090a <isTouch+0xf2>
                	if(X1_move < 0)
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	db1f      	blt.n	8000940 <isTouch+0x128>
                	if(Y1_move > X1_move)
 8000900:	4293      	cmp	r3, r2
 8000902:	da02      	bge.n	800090a <isTouch+0xf2>
                	{ RetSt = DownSwap; CrStep = Y1_move; }
 8000904:	483b      	ldr	r0, [pc, #236]	; (80009f4 <isTouch+0x1dc>)
 8000906:	8002      	strh	r2, [r0, #0]
 8000908:	2404      	movs	r4, #4
                if(Y1_move < -3)
 800090a:	f112 0f03 	cmn.w	r2, #3
 800090e:	da08      	bge.n	8000922 <isTouch+0x10a>
                	if(X1_move < 0)
 8000910:	2b00      	cmp	r3, #0
 8000912:	db19      	blt.n	8000948 <isTouch+0x130>
                	Y1_move = y1 - CrPosY1;
 8000914:	1b89      	subs	r1, r1, r6
 8000916:	b209      	sxth	r1, r1
                	if(Y1_move > X1_move)
 8000918:	428b      	cmp	r3, r1
 800091a:	da02      	bge.n	8000922 <isTouch+0x10a>
                	{ RetSt = UpSwap; CrStep = Y1_move;}
 800091c:	4b35      	ldr	r3, [pc, #212]	; (80009f4 <isTouch+0x1dc>)
 800091e:	8019      	strh	r1, [r3, #0]
 8000920:	2403      	movs	r4, #3
            x1 = CrPosX1;
 8000922:	4b37      	ldr	r3, [pc, #220]	; (8000a00 <isTouch+0x1e8>)
 8000924:	881a      	ldrh	r2, [r3, #0]
 8000926:	4b30      	ldr	r3, [pc, #192]	; (80009e8 <isTouch+0x1d0>)
 8000928:	801a      	strh	r2, [r3, #0]
            y1 = CrPosY1;
 800092a:	4b37      	ldr	r3, [pc, #220]	; (8000a08 <isTouch+0x1f0>)
 800092c:	881a      	ldrh	r2, [r3, #0]
 800092e:	4b2f      	ldr	r3, [pc, #188]	; (80009ec <isTouch+0x1d4>)
 8000930:	801a      	strh	r2, [r3, #0]
 8000932:	e792      	b.n	800085a <isTouch+0x42>
                	{ Y1_move = y1 - CrPosY1; }
 8000934:	1b8a      	subs	r2, r1, r6
 8000936:	b212      	sxth	r2, r2
 8000938:	e7cc      	b.n	80008d4 <isTouch+0xbc>
                	{ Y1_move = y1 - CrPosY1; }
 800093a:	1b8a      	subs	r2, r1, r6
 800093c:	b212      	sxth	r2, r2
 800093e:	e7d3      	b.n	80008e8 <isTouch+0xd0>
                	{ X1_move = x1 - CrPosX1; }
 8000940:	ebae 030c 	sub.w	r3, lr, ip
 8000944:	b21b      	sxth	r3, r3
 8000946:	e7db      	b.n	8000900 <isTouch+0xe8>
                	{ X1_move = x1 - CrPosX1; }
 8000948:	ebae 030c 	sub.w	r3, lr, ip
 800094c:	b21b      	sxth	r3, r3
 800094e:	e7e1      	b.n	8000914 <isTouch+0xfc>
					CrStep = Dist - (CrPosX2 - CrPosX1) + (CrPosY2 - CrPosY1);
 8000950:	1a82      	subs	r2, r0, r2
 8000952:	441a      	add	r2, r3
 8000954:	1b49      	subs	r1, r1, r5
 8000956:	b289      	uxth	r1, r1
 8000958:	fa11 f182 	uxtah	r1, r1, r2
 800095c:	4a25      	ldr	r2, [pc, #148]	; (80009f4 <isTouch+0x1dc>)
 800095e:	8011      	strh	r1, [r2, #0]
					RetSt = ZoomOut;
 8000960:	2408      	movs	r4, #8
 8000962:	e000      	b.n	8000966 <isTouch+0x14e>
			RetSt = Clicked;
 8000964:	462c      	mov	r4, r5
			if(Dist != 0 && Dist < 0)
 8000966:	2b00      	cmp	r3, #0
 8000968:	db0f      	blt.n	800098a <isTouch+0x172>
			Dist = (CrPosX2 - CrPosX1) + (CrPosY2 - CrPosY1);
 800096a:	4b24      	ldr	r3, [pc, #144]	; (80009fc <isTouch+0x1e4>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	4a24      	ldr	r2, [pc, #144]	; (8000a00 <isTouch+0x1e8>)
 8000970:	8812      	ldrh	r2, [r2, #0]
 8000972:	1a9b      	subs	r3, r3, r2
 8000974:	4a23      	ldr	r2, [pc, #140]	; (8000a04 <isTouch+0x1ec>)
 8000976:	8812      	ldrh	r2, [r2, #0]
 8000978:	4923      	ldr	r1, [pc, #140]	; (8000a08 <isTouch+0x1f0>)
 800097a:	8809      	ldrh	r1, [r1, #0]
 800097c:	1a52      	subs	r2, r2, r1
 800097e:	b292      	uxth	r2, r2
 8000980:	fa12 f383 	uxtah	r3, r2, r3
 8000984:	4a1a      	ldr	r2, [pc, #104]	; (80009f0 <isTouch+0x1d8>)
 8000986:	8013      	strh	r3, [r2, #0]
 8000988:	e75c      	b.n	8000844 <isTouch+0x2c>
				if((CrPosX2 - CrPosX1) + (CrPosY2 - CrPosY1) < Dist)
 800098a:	4a1c      	ldr	r2, [pc, #112]	; (80009fc <isTouch+0x1e4>)
 800098c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000990:	491b      	ldr	r1, [pc, #108]	; (8000a00 <isTouch+0x1e8>)
 8000992:	f9b1 0000 	ldrsh.w	r0, [r1]
 8000996:	1a14      	subs	r4, r2, r0
 8000998:	491a      	ldr	r1, [pc, #104]	; (8000a04 <isTouch+0x1ec>)
 800099a:	f9b1 1000 	ldrsh.w	r1, [r1]
 800099e:	4d1a      	ldr	r5, [pc, #104]	; (8000a08 <isTouch+0x1f0>)
 80009a0:	f9b5 5000 	ldrsh.w	r5, [r5]
 80009a4:	eba1 0c05 	sub.w	ip, r1, r5
 80009a8:	4464      	add	r4, ip
 80009aa:	429c      	cmp	r4, r3
 80009ac:	da09      	bge.n	80009c2 <isTouch+0x1aa>
					CrStep = Dist - (CrPosX2 - CrPosX1) + (CrPosY2 - CrPosY1);
 80009ae:	1a82      	subs	r2, r0, r2
 80009b0:	4413      	add	r3, r2
 80009b2:	fa1f f18c 	uxth.w	r1, ip
 80009b6:	fa11 f183 	uxtah	r1, r1, r3
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <isTouch+0x1dc>)
 80009bc:	8019      	strh	r1, [r3, #0]
					RetSt = ZoomIn;
 80009be:	2407      	movs	r4, #7
 80009c0:	e7d3      	b.n	800096a <isTouch+0x152>
					CrStep = (CrPosX2 - CrPosX1) + (CrPosY2 - CrPosY1) - Dist;
 80009c2:	1a12      	subs	r2, r2, r0
 80009c4:	1b49      	subs	r1, r1, r5
 80009c6:	b289      	uxth	r1, r1
 80009c8:	fa11 f282 	uxtah	r2, r1, r2
 80009cc:	b292      	uxth	r2, r2
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	4a08      	ldr	r2, [pc, #32]	; (80009f4 <isTouch+0x1dc>)
 80009d2:	8013      	strh	r3, [r2, #0]
					RetSt = ZoomOut;
 80009d4:	2408      	movs	r4, #8
 80009d6:	e7c8      	b.n	800096a <isTouch+0x152>
			CrSt = NotClicked;
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <isTouch+0x1e0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
			RetSt = Unclicked;
 80009de:	2402      	movs	r4, #2
 80009e0:	e730      	b.n	8000844 <isTouch+0x2c>
 80009e2:	bf00      	nop
 80009e4:	20000093 	.word	0x20000093
 80009e8:	200000c2 	.word	0x200000c2
 80009ec:	200000c4 	.word	0x200000c4
 80009f0:	20000096 	.word	0x20000096
 80009f4:	20000094 	.word	0x20000094
 80009f8:	20000092 	.word	0x20000092
 80009fc:	20000080 	.word	0x20000080
 8000a00:	2000007e 	.word	0x2000007e
 8000a04:	2000008a 	.word	0x2000008a
 8000a08:	20000088 	.word	0x20000088

08000a0c <isInRange>:
int16 TransitionValue()
{
	return CrStep;
}
uint8 isInRange(int16 x1, int16 x2, int16 y1, int16 y2)
{
 8000a0c:	b410      	push	{r4}
	if(CrPosX1 >= x1 && CrPosX1 <= x2)
 8000a0e:	4c2d      	ldr	r4, [pc, #180]	; (8000ac4 <isInRange+0xb8>)
 8000a10:	f9b4 c000 	ldrsh.w	ip, [r4]
 8000a14:	4584      	cmp	ip, r0
 8000a16:	db08      	blt.n	8000a2a <isInRange+0x1e>
 8000a18:	458c      	cmp	ip, r1
 8000a1a:	dc06      	bgt.n	8000a2a <isInRange+0x1e>
	{
		if(CrPosY1 >= y1 && CrPosY1 <= y2)
 8000a1c:	4c2a      	ldr	r4, [pc, #168]	; (8000ac8 <isInRange+0xbc>)
 8000a1e:	f9b4 4000 	ldrsh.w	r4, [r4]
 8000a22:	4294      	cmp	r4, r2
 8000a24:	db01      	blt.n	8000a2a <isInRange+0x1e>
 8000a26:	429c      	cmp	r4, r3
 8000a28:	dd39      	ble.n	8000a9e <isInRange+0x92>
		{
			return Ok;
		}
	}

	if(CrPosX2 >= x1 && CrPosX2 <= x2)
 8000a2a:	4c28      	ldr	r4, [pc, #160]	; (8000acc <isInRange+0xc0>)
 8000a2c:	f9b4 c000 	ldrsh.w	ip, [r4]
 8000a30:	4584      	cmp	ip, r0
 8000a32:	db08      	blt.n	8000a46 <isInRange+0x3a>
 8000a34:	458c      	cmp	ip, r1
 8000a36:	dc06      	bgt.n	8000a46 <isInRange+0x3a>
	{
		if(CrPosY2 >= y1 && CrPosY2 <= y2)
 8000a38:	4c25      	ldr	r4, [pc, #148]	; (8000ad0 <isInRange+0xc4>)
 8000a3a:	f9b4 4000 	ldrsh.w	r4, [r4]
 8000a3e:	4294      	cmp	r4, r2
 8000a40:	db01      	blt.n	8000a46 <isInRange+0x3a>
 8000a42:	429c      	cmp	r4, r3
 8000a44:	dd2d      	ble.n	8000aa2 <isInRange+0x96>
		{
			return Ok;
		}
	}

	if(CrPosX3 >= x1 && CrPosX3 <= x2)
 8000a46:	4c23      	ldr	r4, [pc, #140]	; (8000ad4 <isInRange+0xc8>)
 8000a48:	f9b4 c000 	ldrsh.w	ip, [r4]
 8000a4c:	4584      	cmp	ip, r0
 8000a4e:	db08      	blt.n	8000a62 <isInRange+0x56>
 8000a50:	458c      	cmp	ip, r1
 8000a52:	dc06      	bgt.n	8000a62 <isInRange+0x56>
	{
		if(CrPosY3 >= y1 && CrPosY3 <= y2)
 8000a54:	4c20      	ldr	r4, [pc, #128]	; (8000ad8 <isInRange+0xcc>)
 8000a56:	f9b4 4000 	ldrsh.w	r4, [r4]
 8000a5a:	4294      	cmp	r4, r2
 8000a5c:	db01      	blt.n	8000a62 <isInRange+0x56>
 8000a5e:	429c      	cmp	r4, r3
 8000a60:	dd21      	ble.n	8000aa6 <isInRange+0x9a>
		{
			return Ok;
		}
	}

	if(CrPosX4 >= x1 && CrPosX4 <= x2)
 8000a62:	4c1e      	ldr	r4, [pc, #120]	; (8000adc <isInRange+0xd0>)
 8000a64:	f9b4 c000 	ldrsh.w	ip, [r4]
 8000a68:	4584      	cmp	ip, r0
 8000a6a:	db08      	blt.n	8000a7e <isInRange+0x72>
 8000a6c:	458c      	cmp	ip, r1
 8000a6e:	dc06      	bgt.n	8000a7e <isInRange+0x72>
	{
		if(CrPosY4 >= y1 && CrPosY4 <= y2)
 8000a70:	4c1b      	ldr	r4, [pc, #108]	; (8000ae0 <isInRange+0xd4>)
 8000a72:	f9b4 4000 	ldrsh.w	r4, [r4]
 8000a76:	4294      	cmp	r4, r2
 8000a78:	db01      	blt.n	8000a7e <isInRange+0x72>
 8000a7a:	429c      	cmp	r4, r3
 8000a7c:	dd15      	ble.n	8000aaa <isInRange+0x9e>
		{
			return Ok;
		}
	}

	if(CrPosX5 >= x1 && CrPosX5 <= x2)
 8000a7e:	4c19      	ldr	r4, [pc, #100]	; (8000ae4 <isInRange+0xd8>)
 8000a80:	f9b4 c000 	ldrsh.w	ip, [r4]
 8000a84:	4584      	cmp	ip, r0
 8000a86:	db12      	blt.n	8000aae <isInRange+0xa2>
 8000a88:	458c      	cmp	ip, r1
 8000a8a:	dc14      	bgt.n	8000ab6 <isInRange+0xaa>
	{
		if(CrPosY5 >= y1 && CrPosY5 <= y2)
 8000a8c:	4916      	ldr	r1, [pc, #88]	; (8000ae8 <isInRange+0xdc>)
 8000a8e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000a92:	4291      	cmp	r1, r2
 8000a94:	db11      	blt.n	8000aba <isInRange+0xae>
 8000a96:	4299      	cmp	r1, r3
 8000a98:	dd11      	ble.n	8000abe <isInRange+0xb2>
		{
			return Ok;
		}
	}
	return Error;
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	e008      	b.n	8000ab0 <isInRange+0xa4>
			return Ok;
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	e006      	b.n	8000ab0 <isInRange+0xa4>
			return Ok;
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	e004      	b.n	8000ab0 <isInRange+0xa4>
			return Ok;
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	e002      	b.n	8000ab0 <isInRange+0xa4>
			return Ok;
 8000aaa:	2001      	movs	r0, #1
 8000aac:	e000      	b.n	8000ab0 <isInRange+0xa4>
	return Error;
 8000aae:	2000      	movs	r0, #0
}
 8000ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ab4:	4770      	bx	lr
	return Error;
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	e7fa      	b.n	8000ab0 <isInRange+0xa4>
 8000aba:	2000      	movs	r0, #0
 8000abc:	e7f8      	b.n	8000ab0 <isInRange+0xa4>
			return Ok;
 8000abe:	2001      	movs	r0, #1
 8000ac0:	e7f6      	b.n	8000ab0 <isInRange+0xa4>
 8000ac2:	bf00      	nop
 8000ac4:	2000007e 	.word	0x2000007e
 8000ac8:	20000088 	.word	0x20000088
 8000acc:	20000080 	.word	0x20000080
 8000ad0:	2000008a 	.word	0x2000008a
 8000ad4:	20000082 	.word	0x20000082
 8000ad8:	2000008c 	.word	0x2000008c
 8000adc:	20000084 	.word	0x20000084
 8000ae0:	2000008e 	.word	0x2000008e
 8000ae4:	20000086 	.word	0x20000086
 8000ae8:	20000090 	.word	0x20000090

08000aec <Graphics_Init>:

void Graphics_Init(DisplayConfig *dcf) //Инициализация самой бибиллиотеки а также инициализация графических устройств(дисплей, графические ускорители, тач-панели)
{
 8000aec:	b508      	push	{r3, lr}
	DispHeight = dcf->Display_Height;
 8000aee:	6842      	ldr	r2, [r0, #4]
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <Graphics_Init+0x88>)
 8000af2:	601a      	str	r2, [r3, #0]
	DispWidth = dcf->Display_Width;
 8000af4:	6882      	ldr	r2, [r0, #8]
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <Graphics_Init+0x8c>)
 8000af8:	601a      	str	r2, [r3, #0]
	ColorType = dcf->Color_Type;
 8000afa:	7b02      	ldrb	r2, [r0, #12]
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <Graphics_Init+0x90>)
 8000afe:	701a      	strb	r2, [r3, #0]

	WindowFrameColor = dcf->Window_Frame_Color;
 8000b00:	6901      	ldr	r1, [r0, #16]
 8000b02:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <Graphics_Init+0x94>)
 8000b04:	6019      	str	r1, [r3, #0]
    WindowBarColor = dcf->Window_Bar_Color;
 8000b06:	6941      	ldr	r1, [r0, #20]
 8000b08:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <Graphics_Init+0x98>)
 8000b0a:	6019      	str	r1, [r3, #0]
    WindowBarHColor = dcf->Window_Bar_H_Color;
 8000b0c:	6981      	ldr	r1, [r0, #24]
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <Graphics_Init+0x9c>)
 8000b10:	6019      	str	r1, [r3, #0]
    WindowBarLColor = dcf->Window_Bar_L_Color;
 8000b12:	69c1      	ldr	r1, [r0, #28]
 8000b14:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <Graphics_Init+0xa0>)
 8000b16:	6019      	str	r1, [r3, #0]
    WindowColor = dcf->Window_Color;
 8000b18:	6a01      	ldr	r1, [r0, #32]
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <Graphics_Init+0xa4>)
 8000b1c:	6019      	str	r1, [r3, #0]
    WindowTextColor = dcf->Window_Text_Color;
 8000b1e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8000b20:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <Graphics_Init+0xa8>)
 8000b22:	6019      	str	r1, [r3, #0]
    WindowFrameThickness = dcf->Window_Frame_Thickness;
 8000b24:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 8000b28:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <Graphics_Init+0xac>)
 8000b2a:	7019      	strb	r1, [r3, #0]

    ButtonFrameColor = dcf->Button_Frame_Color;
 8000b2c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8000b2e:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <Graphics_Init+0xb0>)
 8000b30:	6019      	str	r1, [r3, #0]
    ButtonColor = dcf->Button_Color;
 8000b32:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <Graphics_Init+0xb4>)
 8000b36:	6019      	str	r1, [r3, #0]
    ButtonSelectedColor = dcf->Button_Selected_Color;
 8000b38:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <Graphics_Init+0xb8>)
 8000b3c:	6019      	str	r1, [r3, #0]
    ButtonTextColor = dcf->Button_Text_Color;
 8000b3e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8000b40:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <Graphics_Init+0xbc>)
 8000b42:	6019      	str	r1, [r3, #0]

    LabelColor = dcf->Label_Color;
 8000b44:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000b46:	4b19      	ldr	r3, [pc, #100]	; (8000bac <Graphics_Init+0xc0>)
 8000b48:	6019      	str	r1, [r3, #0]
    LabelSelectedColor = dcf->Label_Selected_Color;
 8000b4a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <Graphics_Init+0xc4>)
 8000b4e:	6019      	str	r1, [r3, #0]
    LabelBackgroundColor = dcf->Label_Background_Color;
 8000b50:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <Graphics_Init+0xc8>)
 8000b54:	6019      	str	r1, [r3, #0]

	BarColor = dcf-> Bar_Color;
 8000b56:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <Graphics_Init+0xcc>)
 8000b5a:	6019      	str	r1, [r3, #0]
    BarColor2 = dcf-> Bar_Color2;
 8000b5c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <Graphics_Init+0xd0>)
 8000b60:	6019      	str	r1, [r3, #0]
    BarColor3 = dcf-> Bar_Color3;
 8000b62:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <Graphics_Init+0xd4>)
 8000b66:	6019      	str	r1, [r3, #0]

	Init_Graphics_System(dcf->Start_RAM_Address, dcf->Layers, dcf->Color_Type);
 8000b68:	7b41      	ldrb	r1, [r0, #13]
 8000b6a:	6800      	ldr	r0, [r0, #0]
 8000b6c:	f7ff fcce 	bl	800050c <Init_Graphics_System>
}
 8000b70:	bd08      	pop	{r3, pc}
 8000b72:	bf00      	nop
 8000b74:	20000000 	.word	0x20000000
 8000b78:	20000004 	.word	0x20000004
 8000b7c:	2000007c 	.word	0x2000007c
 8000b80:	200000b4 	.word	0x200000b4
 8000b84:	200000a4 	.word	0x200000a4
 8000b88:	200000a8 	.word	0x200000a8
 8000b8c:	200000ac 	.word	0x200000ac
 8000b90:	200000b0 	.word	0x200000b0
 8000b94:	200000bc 	.word	0x200000bc
 8000b98:	200000b8 	.word	0x200000b8
 8000b9c:	20000070 	.word	0x20000070
 8000ba0:	2000006c 	.word	0x2000006c
 8000ba4:	20000074 	.word	0x20000074
 8000ba8:	20000078 	.word	0x20000078
 8000bac:	2000009c 	.word	0x2000009c
 8000bb0:	200000a0 	.word	0x200000a0
 8000bb4:	20000098 	.word	0x20000098
 8000bb8:	20000060 	.word	0x20000060
 8000bbc:	20000064 	.word	0x20000064
 8000bc0:	20000068 	.word	0x20000068

08000bc4 <Fill_Display>:
void Fill_Display(uint32 Color) //Заливает весь дисплей определенным цветом
{
 8000bc4:	b510      	push	{r4, lr}
 8000bc6:	4604      	mov	r4, r0

	if(ColorType == Color565)
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <Fill_Display+0x38>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b143      	cbz	r3, 8000be0 <Fill_Display+0x1c>
	{ Fill_all(Get565Color(Color)); }

	if(ColorType == Color888)
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <Fill_Display+0x38>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d009      	beq.n	8000bea <Fill_Display+0x26>
	{ Fill_all(Color | 0xFF << 24); }

	if(ColorType == Color_A888)
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <Fill_Display+0x38>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d00a      	beq.n	8000bf4 <Fill_Display+0x30>
	{ Fill_all(Color); }
}
 8000bde:	bd10      	pop	{r4, pc}
	{ Fill_all(Get565Color(Color)); }
 8000be0:	f7ff fd48 	bl	8000674 <Get565Color>
 8000be4:	f7ff fc9a 	bl	800051c <Fill_all>
 8000be8:	e7f1      	b.n	8000bce <Fill_Display+0xa>
	{ Fill_all(Color | 0xFF << 24); }
 8000bea:	f044 407f 	orr.w	r0, r4, #4278190080	; 0xff000000
 8000bee:	f7ff fc95 	bl	800051c <Fill_all>
 8000bf2:	e7f0      	b.n	8000bd6 <Fill_Display+0x12>
	{ Fill_all(Color); }
 8000bf4:	4620      	mov	r0, r4
 8000bf6:	f7ff fc91 	bl	800051c <Fill_all>
}
 8000bfa:	e7f0      	b.n	8000bde <Fill_Display+0x1a>
 8000bfc:	2000007c 	.word	0x2000007c

08000c00 <Pixel>:
void Pixel(uint16 x, uint16 y, uint32 Color, uint16 Thickness)
{
 8000c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c04:	4617      	mov	r7, r2
  uint16 i, j, tolsx, tolsy;
  x--; y--;
 8000c06:	3801      	subs	r0, #1
 8000c08:	fa1f f880 	uxth.w	r8, r0
 8000c0c:	3901      	subs	r1, #1
 8000c0e:	b28d      	uxth	r5, r1
  tolsy = y+Thickness;
 8000c10:	eb05 0903 	add.w	r9, r5, r3
 8000c14:	fa1f f989 	uxth.w	r9, r9
  tolsx = x+Thickness;
 8000c18:	4443      	add	r3, r8
 8000c1a:	b29e      	uxth	r6, r3
  for(i = y; i<tolsy; i++)
 8000c1c:	e02f      	b.n	8000c7e <Pixel+0x7e>
		  if(i < DispHeight && j < DispWidth)
		  {
			  if(ColorType == Color565)
			  { MemPoint(j,i,Get565Color(Color)); }

			  if(ColorType == Color888)
 8000c1e:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <Pixel+0x8c>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d01c      	beq.n	8000c60 <Pixel+0x60>
			  { MemPoint(j,i,Color | 0xFF << 24); }

			  if(ColorType == Color_A888)
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <Pixel+0x8c>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d01f      	beq.n	8000c6e <Pixel+0x6e>
	  for(j = x; j<tolsx; j++)
 8000c2e:	3401      	adds	r4, #1
 8000c30:	b2a4      	uxth	r4, r4
 8000c32:	42b4      	cmp	r4, r6
 8000c34:	d221      	bcs.n	8000c7a <Pixel+0x7a>
		  if(i < DispHeight && j < DispWidth)
 8000c36:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <Pixel+0x90>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	429d      	cmp	r5, r3
 8000c3c:	d2f7      	bcs.n	8000c2e <Pixel+0x2e>
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <Pixel+0x94>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	429c      	cmp	r4, r3
 8000c44:	d2f3      	bcs.n	8000c2e <Pixel+0x2e>
			  if(ColorType == Color565)
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <Pixel+0x8c>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1e7      	bne.n	8000c1e <Pixel+0x1e>
			  { MemPoint(j,i,Get565Color(Color)); }
 8000c4e:	4638      	mov	r0, r7
 8000c50:	f7ff fd10 	bl	8000674 <Get565Color>
 8000c54:	4602      	mov	r2, r0
 8000c56:	4629      	mov	r1, r5
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f7ff fc8d 	bl	8000578 <MemPoint>
 8000c5e:	e7de      	b.n	8000c1e <Pixel+0x1e>
			  { MemPoint(j,i,Color | 0xFF << 24); }
 8000c60:	f047 427f 	orr.w	r2, r7, #4278190080	; 0xff000000
 8000c64:	4629      	mov	r1, r5
 8000c66:	4620      	mov	r0, r4
 8000c68:	f7ff fc86 	bl	8000578 <MemPoint>
 8000c6c:	e7db      	b.n	8000c26 <Pixel+0x26>
			  { MemPoint(j,i,Color); }
 8000c6e:	463a      	mov	r2, r7
 8000c70:	4629      	mov	r1, r5
 8000c72:	4620      	mov	r0, r4
 8000c74:	f7ff fc80 	bl	8000578 <MemPoint>
 8000c78:	e7d9      	b.n	8000c2e <Pixel+0x2e>
  for(i = y; i<tolsy; i++)
 8000c7a:	3501      	adds	r5, #1
 8000c7c:	b2ad      	uxth	r5, r5
 8000c7e:	454d      	cmp	r5, r9
 8000c80:	d201      	bcs.n	8000c86 <Pixel+0x86>
	  for(j = x; j<tolsx; j++)
 8000c82:	4644      	mov	r4, r8
 8000c84:	e7d5      	b.n	8000c32 <Pixel+0x32>
	      }
	  }
  }
}
 8000c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000007c 	.word	0x2000007c
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20000004 	.word	0x20000004

08000c98 <Fill_Rectangle>:
void Fill_Rectangle(uint32 Color, int32 StartX, int32 StopX, int32 StartY, int32 StopY) //заливает цветом прямоугольную область
{
 8000c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	4607      	mov	r7, r0
 8000c9e:	4615      	mov	r5, r2
 8000ca0:	461e      	mov	r6, r3
	if(((StartX > 0) && (StartX <= DispWidth)) || ((StopX > 0) && (StopX <= DispWidth)))
 8000ca2:	1e0c      	subs	r4, r1, #0
 8000ca4:	dd03      	ble.n	8000cae <Fill_Rectangle+0x16>
 8000ca6:	4b2b      	ldr	r3, [pc, #172]	; (8000d54 <Fill_Rectangle+0xbc>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	429c      	cmp	r4, r3
 8000cac:	d905      	bls.n	8000cba <Fill_Rectangle+0x22>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	dd2b      	ble.n	8000d0a <Fill_Rectangle+0x72>
 8000cb2:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <Fill_Rectangle+0xbc>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	429d      	cmp	r5, r3
 8000cb8:	d827      	bhi.n	8000d0a <Fill_Rectangle+0x72>
	{
		if(((StartY > 0) && (StartY <= DispHeight)) || ((StopY > 0) && (StopY <= DispHeight)))
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	dd03      	ble.n	8000cc6 <Fill_Rectangle+0x2e>
 8000cbe:	4b26      	ldr	r3, [pc, #152]	; (8000d58 <Fill_Rectangle+0xc0>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	d907      	bls.n	8000cd6 <Fill_Rectangle+0x3e>
 8000cc6:	9b08      	ldr	r3, [sp, #32]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	dd1e      	ble.n	8000d0a <Fill_Rectangle+0x72>
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <Fill_Rectangle+0xc0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	9a08      	ldr	r2, [sp, #32]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d819      	bhi.n	8000d0a <Fill_Rectangle+0x72>
		{
			if(StartX <= 0)
 8000cd6:	2c00      	cmp	r4, #0
 8000cd8:	dd19      	ble.n	8000d0e <Fill_Rectangle+0x76>
			{ StartX = 1;}
			if(StopX > DispWidth)
 8000cda:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <Fill_Rectangle+0xbc>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	429d      	cmp	r5, r3
 8000ce0:	d900      	bls.n	8000ce4 <Fill_Rectangle+0x4c>
			{ StartX = DispWidth;}
 8000ce2:	461c      	mov	r4, r3

			if(StartY <= 0)
 8000ce4:	2e00      	cmp	r6, #0
 8000ce6:	dd14      	ble.n	8000d12 <Fill_Rectangle+0x7a>
			{ StartY = 1;}
			if(StopY > DispHeight)
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <Fill_Rectangle+0xc0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	9a08      	ldr	r2, [sp, #32]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d900      	bls.n	8000cf4 <Fill_Rectangle+0x5c>
			{ StartY = DispHeight;}
 8000cf2:	461e      	mov	r6, r3

			if(ColorType == Color565)
 8000cf4:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <Fill_Rectangle+0xc4>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b16b      	cbz	r3, 8000d16 <Fill_Rectangle+0x7e>
			{ Fill_rectangle(Get565Color(Color), StartX, StopX, StartY, StopY); }

			if(ColorType == Color888)
 8000cfa:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <Fill_Rectangle+0xc4>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d014      	beq.n	8000d2c <Fill_Rectangle+0x94>
			{ Fill_rectangle(Color | 0xFF << 24, StartX, StopX, StartY, StopY); }

			if(ColorType == Color_A888)
 8000d02:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <Fill_Rectangle+0xc4>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d01a      	beq.n	8000d40 <Fill_Rectangle+0xa8>
			{ Fill_rectangle(Color | 0xFF << 24, StartX, StopX, StartY, StopY); }
		}
	}
}
 8000d0a:	b003      	add	sp, #12
 8000d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			{ StartX = 1;}
 8000d0e:	2401      	movs	r4, #1
 8000d10:	e7e3      	b.n	8000cda <Fill_Rectangle+0x42>
			{ StartY = 1;}
 8000d12:	2601      	movs	r6, #1
 8000d14:	e7e8      	b.n	8000ce8 <Fill_Rectangle+0x50>
			{ Fill_rectangle(Get565Color(Color), StartX, StopX, StartY, StopY); }
 8000d16:	4638      	mov	r0, r7
 8000d18:	f7ff fcac 	bl	8000674 <Get565Color>
 8000d1c:	9b08      	ldr	r3, [sp, #32]
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	4633      	mov	r3, r6
 8000d22:	462a      	mov	r2, r5
 8000d24:	4621      	mov	r1, r4
 8000d26:	f7ff fc07 	bl	8000538 <Fill_rectangle>
 8000d2a:	e7e6      	b.n	8000cfa <Fill_Rectangle+0x62>
			{ Fill_rectangle(Color | 0xFF << 24, StartX, StopX, StartY, StopY); }
 8000d2c:	9b08      	ldr	r3, [sp, #32]
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	4633      	mov	r3, r6
 8000d32:	462a      	mov	r2, r5
 8000d34:	4621      	mov	r1, r4
 8000d36:	f047 407f 	orr.w	r0, r7, #4278190080	; 0xff000000
 8000d3a:	f7ff fbfd 	bl	8000538 <Fill_rectangle>
 8000d3e:	e7e0      	b.n	8000d02 <Fill_Rectangle+0x6a>
			{ Fill_rectangle(Color | 0xFF << 24, StartX, StopX, StartY, StopY); }
 8000d40:	9b08      	ldr	r3, [sp, #32]
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	4633      	mov	r3, r6
 8000d46:	462a      	mov	r2, r5
 8000d48:	4621      	mov	r1, r4
 8000d4a:	f047 407f 	orr.w	r0, r7, #4278190080	; 0xff000000
 8000d4e:	f7ff fbf3 	bl	8000538 <Fill_rectangle>
}
 8000d52:	e7da      	b.n	8000d0a <Fill_Rectangle+0x72>
 8000d54:	20000004 	.word	0x20000004
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	2000007c 	.word	0x2000007c

08000d60 <HLine>:
/*4 ый этап */
void HLine(uint32 Color, int16 x1, int16 x2, int16 y1, uint8 Thickness)//
{
 8000d60:	b510      	push	{r4, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	f89d 4010 	ldrb.w	r4, [sp, #16]
    if(Thickness > 0)
 8000d68:	b90c      	cbnz	r4, 8000d6e <HLine+0xe>
    {
    	Thickness--;
    	Fill_Rectangle(Color, x1, x2, y1, y1+Thickness);
    }
}
 8000d6a:	b002      	add	sp, #8
 8000d6c:	bd10      	pop	{r4, pc}
    	Thickness--;
 8000d6e:	3c01      	subs	r4, #1
    	Fill_Rectangle(Color, x1, x2, y1, y1+Thickness);
 8000d70:	fa53 f484 	uxtab	r4, r3, r4
 8000d74:	9400      	str	r4, [sp, #0]
 8000d76:	f7ff ff8f 	bl	8000c98 <Fill_Rectangle>
}
 8000d7a:	e7f6      	b.n	8000d6a <HLine+0xa>

08000d7c <VLine>:
void VLine(uint32 Color, int16 x1, int16 y1, int16 y2, uint8 Thickness)
{
 8000d7c:	b510      	push	{r4, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	f89d 4010 	ldrb.w	r4, [sp, #16]
	if(Thickness > 0)
 8000d84:	b90c      	cbnz	r4, 8000d8a <VLine+0xe>
	{
		Thickness--;
		Fill_Rectangle(Color, x1, x1+Thickness, y1, y2);
	}
}
 8000d86:	b002      	add	sp, #8
 8000d88:	bd10      	pop	{r4, pc}
		Thickness--;
 8000d8a:	3c01      	subs	r4, #1
		Fill_Rectangle(Color, x1, x1+Thickness, y1, y2);
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	fa51 f284 	uxtab	r2, r1, r4
 8000d94:	f7ff ff80 	bl	8000c98 <Fill_Rectangle>
}
 8000d98:	e7f5      	b.n	8000d86 <VLine+0xa>
	...

08000d9c <Line>:

void Line(int16 x1, int16 y1, int16 x2, int16 y2, uint32 Color, uint16 Thickness)//++
{
 8000d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000da0:	b083      	sub	sp, #12
 8000da2:	4607      	mov	r7, r0
 8000da4:	9100      	str	r1, [sp, #0]
 8000da6:	4690      	mov	r8, r2
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8000dac:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
   uint16 y = 0, k = 0;
   if(x1 <= x2)
 8000db0:	4290      	cmp	r0, r2
 8000db2:	f300 809e 	bgt.w	8000ef2 <Line+0x156>
   {
	   if(y1 <= y2)
 8000db6:	4299      	cmp	r1, r3
 8000db8:	dc4c      	bgt.n	8000e54 <Line+0xb8>
	   {
		   if(x2 - x1 != 0)
 8000dba:	4540      	cmp	r0, r8
 8000dbc:	d016      	beq.n	8000dec <Line+0x50>
		   {
		       k = (y2 - y1)/(x2 - x1);
 8000dbe:	1a5b      	subs	r3, r3, r1
 8000dc0:	eba8 0100 	sub.w	r1, r8, r0
 8000dc4:	fb93 f2f1 	sdiv	r2, r3, r1
 8000dc8:	fa1f fb82 	uxth.w	fp, r2
		       if((y2 - y1)%(x2 - x1) != 0)
 8000dcc:	fb01 3312 	mls	r3, r1, r2, r3
 8000dd0:	b10b      	cbz	r3, 8000dd6 <Line+0x3a>
		       {
		    	   if(Thickness == 1)
 8000dd2:	2d01      	cmp	r5, #1
 8000dd4:	d005      	beq.n	8000de2 <Line+0x46>
		   {
			   k = 1;
			   x2++;
		   }

		   if(k == 0)
 8000dd6:	f1bb 0f00 	cmp.w	fp, #0
 8000dda:	d10d      	bne.n	8000df8 <Line+0x5c>
		   { k = 1; }
 8000ddc:	f04f 0b01 	mov.w	fp, #1
 8000de0:	e00a      	b.n	8000df8 <Line+0x5c>
		    	       k++;
 8000de2:	f10b 0b01 	add.w	fp, fp, #1
 8000de6:	fa1f fb8b 	uxth.w	fp, fp
 8000dea:	e7f4      	b.n	8000dd6 <Line+0x3a>
			   x2++;
 8000dec:	f108 0801 	add.w	r8, r8, #1
 8000df0:	fa0f f888 	sxth.w	r8, r8
			   k = 1;
 8000df4:	f04f 0b01 	mov.w	fp, #1

		   for(uint16 xp = x1; xp <= x2; xp++)
 8000df8:	fa1f fa87 	uxth.w	sl, r7
 8000dfc:	e003      	b.n	8000e06 <Line+0x6a>
 8000dfe:	f10a 0a01 	add.w	sl, sl, #1
 8000e02:	fa1f fa8a 	uxth.w	sl, sl
 8000e06:	45c2      	cmp	sl, r8
 8000e08:	f300 80ff 	bgt.w	800100a <Line+0x26e>
		   {
			   y = (xp - x1) * (y2 - y1) / (x2 - x1) + y1;
 8000e0c:	ebaa 0407 	sub.w	r4, sl, r7
 8000e10:	9b01      	ldr	r3, [sp, #4]
 8000e12:	9a00      	ldr	r2, [sp, #0]
 8000e14:	1a9b      	subs	r3, r3, r2
 8000e16:	fb03 f404 	mul.w	r4, r3, r4
 8000e1a:	eba8 0307 	sub.w	r3, r8, r7
 8000e1e:	fb94 f4f3 	sdiv	r4, r4, r3
 8000e22:	b293      	uxth	r3, r2
 8000e24:	fa13 f484 	uxtah	r4, r3, r4
 8000e28:	b2a4      	uxth	r4, r4
			   for(uint16 yp = 0; yp < k; yp++)
 8000e2a:	f04f 0900 	mov.w	r9, #0
 8000e2e:	45cb      	cmp	fp, r9
 8000e30:	d9e5      	bls.n	8000dfe <Line+0x62>
			   {
				   Pixel(xp, y, Color, Thickness);
 8000e32:	462b      	mov	r3, r5
 8000e34:	4632      	mov	r2, r6
 8000e36:	4621      	mov	r1, r4
 8000e38:	4650      	mov	r0, sl
 8000e3a:	f7ff fee1 	bl	8000c00 <Pixel>
				   y++;
 8000e3e:	3401      	adds	r4, #1
 8000e40:	b2a4      	uxth	r4, r4
				   if(y > DispHeight)
 8000e42:	4b73      	ldr	r3, [pc, #460]	; (8001010 <Line+0x274>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	429c      	cmp	r4, r3
 8000e48:	d8d9      	bhi.n	8000dfe <Line+0x62>
			   for(uint16 yp = 0; yp < k; yp++)
 8000e4a:	f109 0901 	add.w	r9, r9, #1
 8000e4e:	fa1f f989 	uxth.w	r9, r9
 8000e52:	e7ec      	b.n	8000e2e <Line+0x92>
			   }
		   }
	   }
	   else
	   {
		   if(x2 - x1 != 0)
 8000e54:	4540      	cmp	r0, r8
 8000e56:	d018      	beq.n	8000e8a <Line+0xee>
		   {
		       k = (y1 - y2)/(x2 - x1);
 8000e58:	9b00      	ldr	r3, [sp, #0]
 8000e5a:	9a01      	ldr	r2, [sp, #4]
 8000e5c:	1a9b      	subs	r3, r3, r2
 8000e5e:	eba8 0100 	sub.w	r1, r8, r0
 8000e62:	fb93 f2f1 	sdiv	r2, r3, r1
 8000e66:	fa1f fb82 	uxth.w	fp, r2
		       if((y1 - y2)%(x2 - x1) != 0)
 8000e6a:	fb01 3312 	mls	r3, r1, r2, r3
 8000e6e:	b10b      	cbz	r3, 8000e74 <Line+0xd8>
		       {
		    	   if(Thickness == 1)
 8000e70:	2d01      	cmp	r5, #1
 8000e72:	d005      	beq.n	8000e80 <Line+0xe4>
		   {
			   k = 1;
			   x2++;
		   }

		   if(k == 0)
 8000e74:	f1bb 0f00 	cmp.w	fp, #0
 8000e78:	d10d      	bne.n	8000e96 <Line+0xfa>
		   { k = 1; }
 8000e7a:	f04f 0b01 	mov.w	fp, #1
 8000e7e:	e00a      	b.n	8000e96 <Line+0xfa>
	    	           k++;
 8000e80:	f10b 0b01 	add.w	fp, fp, #1
 8000e84:	fa1f fb8b 	uxth.w	fp, fp
 8000e88:	e7f4      	b.n	8000e74 <Line+0xd8>
			   x2++;
 8000e8a:	f108 0801 	add.w	r8, r8, #1
 8000e8e:	fa0f f888 	sxth.w	r8, r8
			   k = 1;
 8000e92:	f04f 0b01 	mov.w	fp, #1

		   for(uint16 xp = x1; xp <= x2; xp++)
 8000e96:	fa1f fa87 	uxth.w	sl, r7
 8000e9a:	e003      	b.n	8000ea4 <Line+0x108>
 8000e9c:	f10a 0a01 	add.w	sl, sl, #1
 8000ea0:	fa1f fa8a 	uxth.w	sl, sl
 8000ea4:	45c2      	cmp	sl, r8
 8000ea6:	f300 80b0 	bgt.w	800100a <Line+0x26e>
		   {
			   y = (xp - x1) * (y2 - y1) / (x2 - x1) + y1;
 8000eaa:	ebaa 0407 	sub.w	r4, sl, r7
 8000eae:	9b01      	ldr	r3, [sp, #4]
 8000eb0:	9a00      	ldr	r2, [sp, #0]
 8000eb2:	1a9b      	subs	r3, r3, r2
 8000eb4:	fb03 f404 	mul.w	r4, r3, r4
 8000eb8:	eba8 0307 	sub.w	r3, r8, r7
 8000ebc:	fb94 f4f3 	sdiv	r4, r4, r3
 8000ec0:	b293      	uxth	r3, r2
 8000ec2:	fa13 f484 	uxtah	r4, r3, r4
 8000ec6:	b2a4      	uxth	r4, r4
			   for(uint16 yp = 0; yp < k; yp++)
 8000ec8:	f04f 0900 	mov.w	r9, #0
 8000ecc:	45cb      	cmp	fp, r9
 8000ece:	d9e5      	bls.n	8000e9c <Line+0x100>
			   {
				   Pixel(xp, y, Color, Thickness);
 8000ed0:	462b      	mov	r3, r5
 8000ed2:	4632      	mov	r2, r6
 8000ed4:	4621      	mov	r1, r4
 8000ed6:	4650      	mov	r0, sl
 8000ed8:	f7ff fe92 	bl	8000c00 <Pixel>
				   y--;
 8000edc:	3c01      	subs	r4, #1
 8000ede:	b2a4      	uxth	r4, r4
				   if(y > DispHeight)
 8000ee0:	4b4b      	ldr	r3, [pc, #300]	; (8001010 <Line+0x274>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	429c      	cmp	r4, r3
 8000ee6:	d8d9      	bhi.n	8000e9c <Line+0x100>
			   for(uint16 yp = 0; yp < k; yp++)
 8000ee8:	f109 0901 	add.w	r9, r9, #1
 8000eec:	fa1f f989 	uxth.w	r9, r9
 8000ef0:	e7ec      	b.n	8000ecc <Line+0x130>
		   }
	   }
   }
   else
   {
	   if(y1 <= y2)
 8000ef2:	9b00      	ldr	r3, [sp, #0]
 8000ef4:	9a01      	ldr	r2, [sp, #4]
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	dc42      	bgt.n	8000f80 <Line+0x1e4>
	   {
		   if(x1 - x2 != 0)
		   {
		       k = (y2 - y1)/(x1 - x2);
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	eba0 0108 	sub.w	r1, r0, r8
 8000f00:	fb93 f2f1 	sdiv	r2, r3, r1
 8000f04:	fa1f fb82 	uxth.w	fp, r2
		       if((y2 - y1)%(x1 - x2) != 0)
 8000f08:	fb01 3312 	mls	r3, r1, r2, r3
 8000f0c:	b10b      	cbz	r3, 8000f12 <Line+0x176>
		       {
		    	   if(Thickness == 1)
 8000f0e:	2d01      	cmp	r5, #1
 8000f10:	d007      	beq.n	8000f22 <Line+0x186>
		   {
			   k = 1;
			   x1++;
		   }

		   if(k == 0)
 8000f12:	f1bb 0f00 	cmp.w	fp, #0
 8000f16:	d101      	bne.n	8000f1c <Line+0x180>
		   { k = 1; }
 8000f18:	f04f 0b01 	mov.w	fp, #1

		   for(uint16 xp = x2; xp <= x1; xp++)
 8000f1c:	fa1f fa88 	uxth.w	sl, r8
 8000f20:	e008      	b.n	8000f34 <Line+0x198>
		    	       k++;
 8000f22:	f10b 0b01 	add.w	fp, fp, #1
 8000f26:	fa1f fb8b 	uxth.w	fp, fp
 8000f2a:	e7f2      	b.n	8000f12 <Line+0x176>
		   for(uint16 xp = x2; xp <= x1; xp++)
 8000f2c:	f10a 0a01 	add.w	sl, sl, #1
 8000f30:	fa1f fa8a 	uxth.w	sl, sl
 8000f34:	45ba      	cmp	sl, r7
 8000f36:	dc68      	bgt.n	800100a <Line+0x26e>
		   {
			   y = (xp - x1) * (y2 - y1) / (x2 - x1) + y1;
 8000f38:	ebaa 0407 	sub.w	r4, sl, r7
 8000f3c:	9b01      	ldr	r3, [sp, #4]
 8000f3e:	9a00      	ldr	r2, [sp, #0]
 8000f40:	1a9b      	subs	r3, r3, r2
 8000f42:	fb03 f404 	mul.w	r4, r3, r4
 8000f46:	eba8 0307 	sub.w	r3, r8, r7
 8000f4a:	fb94 f4f3 	sdiv	r4, r4, r3
 8000f4e:	b293      	uxth	r3, r2
 8000f50:	fa13 f484 	uxtah	r4, r3, r4
 8000f54:	b2a4      	uxth	r4, r4
			   for(uint16 yp = 0; yp < k; yp++)
 8000f56:	f04f 0900 	mov.w	r9, #0
 8000f5a:	45cb      	cmp	fp, r9
 8000f5c:	d9e6      	bls.n	8000f2c <Line+0x190>
			   {
				   Pixel(xp, y, Color, Thickness);
 8000f5e:	462b      	mov	r3, r5
 8000f60:	4632      	mov	r2, r6
 8000f62:	4621      	mov	r1, r4
 8000f64:	4650      	mov	r0, sl
 8000f66:	f7ff fe4b 	bl	8000c00 <Pixel>
				   y++;
 8000f6a:	3401      	adds	r4, #1
 8000f6c:	b2a4      	uxth	r4, r4
				   if(y > DispHeight)
 8000f6e:	4b28      	ldr	r3, [pc, #160]	; (8001010 <Line+0x274>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	429c      	cmp	r4, r3
 8000f74:	d8da      	bhi.n	8000f2c <Line+0x190>
			   for(uint16 yp = 0; yp < k; yp++)
 8000f76:	f109 0901 	add.w	r9, r9, #1
 8000f7a:	fa1f f989 	uxth.w	r9, r9
 8000f7e:	e7ec      	b.n	8000f5a <Line+0x1be>
	   }
	   else
	   {
		   if(x2 - x1 != 0)
		   {
		       k = (y1 - y2)/(x2 - x1);
 8000f80:	9b00      	ldr	r3, [sp, #0]
 8000f82:	9a01      	ldr	r2, [sp, #4]
 8000f84:	1a9b      	subs	r3, r3, r2
 8000f86:	eba8 0100 	sub.w	r1, r8, r0
 8000f8a:	fb93 f2f1 	sdiv	r2, r3, r1
 8000f8e:	fa1f fb82 	uxth.w	fp, r2
		       if((y1 - y2)%(x2 - x1) != 0)
 8000f92:	fb01 3312 	mls	r3, r1, r2, r3
 8000f96:	b10b      	cbz	r3, 8000f9c <Line+0x200>
		       {
		    	   if(Thickness == 1)
 8000f98:	2d01      	cmp	r5, #1
 8000f9a:	d007      	beq.n	8000fac <Line+0x210>
		   {
			   k = 1;
			   x2++;
		   }

		   if(k == 0)
 8000f9c:	f1bb 0f00 	cmp.w	fp, #0
 8000fa0:	d101      	bne.n	8000fa6 <Line+0x20a>
		   { k = 1; }
 8000fa2:	f04f 0b01 	mov.w	fp, #1

		   for(uint16 xp = x2; xp <= x1; xp++)
 8000fa6:	fa1f fa88 	uxth.w	sl, r8
 8000faa:	e008      	b.n	8000fbe <Line+0x222>
	    	           k++;
 8000fac:	f10b 0b01 	add.w	fp, fp, #1
 8000fb0:	fa1f fb8b 	uxth.w	fp, fp
 8000fb4:	e7f2      	b.n	8000f9c <Line+0x200>
		   for(uint16 xp = x2; xp <= x1; xp++)
 8000fb6:	f10a 0a01 	add.w	sl, sl, #1
 8000fba:	fa1f fa8a 	uxth.w	sl, sl
 8000fbe:	45ba      	cmp	sl, r7
 8000fc0:	dc23      	bgt.n	800100a <Line+0x26e>
		   {
			   y = (xp - x1) * (y2 - y1) / (x2 - x1) + y1;
 8000fc2:	ebaa 0407 	sub.w	r4, sl, r7
 8000fc6:	9b01      	ldr	r3, [sp, #4]
 8000fc8:	9a00      	ldr	r2, [sp, #0]
 8000fca:	1a9b      	subs	r3, r3, r2
 8000fcc:	fb03 f404 	mul.w	r4, r3, r4
 8000fd0:	eba8 0307 	sub.w	r3, r8, r7
 8000fd4:	fb94 f4f3 	sdiv	r4, r4, r3
 8000fd8:	b293      	uxth	r3, r2
 8000fda:	fa13 f484 	uxtah	r4, r3, r4
 8000fde:	b2a4      	uxth	r4, r4
			   for(uint16 yp = 0; yp < k; yp++)
 8000fe0:	f04f 0900 	mov.w	r9, #0
 8000fe4:	45cb      	cmp	fp, r9
 8000fe6:	d9e6      	bls.n	8000fb6 <Line+0x21a>
			   {
				   Pixel(xp, y, Color, Thickness);
 8000fe8:	462b      	mov	r3, r5
 8000fea:	4632      	mov	r2, r6
 8000fec:	4621      	mov	r1, r4
 8000fee:	4650      	mov	r0, sl
 8000ff0:	f7ff fe06 	bl	8000c00 <Pixel>
				   y++;
 8000ff4:	3401      	adds	r4, #1
 8000ff6:	b2a4      	uxth	r4, r4
				   if(y > DispHeight)
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <Line+0x274>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	429c      	cmp	r4, r3
 8000ffe:	d8da      	bhi.n	8000fb6 <Line+0x21a>
			   for(uint16 yp = 0; yp < k; yp++)
 8001000:	f109 0901 	add.w	r9, r9, #1
 8001004:	fa1f f989 	uxth.w	r9, r9
 8001008:	e7ec      	b.n	8000fe4 <Line+0x248>
				   {break; }
			   }
		   }
	   }
   }
}
 800100a:	b003      	add	sp, #12
 800100c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001010:	20000000 	.word	0x20000000

08001014 <Circle>:
void Circle (int16 x1, int16 y1, int16 r,uint32 Color, uint16 Thickness)
{
 8001014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001018:	b087      	sub	sp, #28
 800101a:	9004      	str	r0, [sp, #16]
 800101c:	9105      	str	r1, [sp, #20]
 800101e:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
    int x = -r, y = 0, err = 2-2*r, e2;
 8001022:	4257      	negs	r7, r2
 8001024:	f1c2 0201 	rsb	r2, r2, #1
 8001028:	0056      	lsls	r6, r2, #1
 800102a:	2200      	movs	r2, #0
 800102c:	9201      	str	r2, [sp, #4]
 800102e:	4699      	mov	r9, r3
 8001030:	e008      	b.n	8001044 <Circle+0x30>
 8001032:	4633      	mov	r3, r6
		e2 = err;
		if (e2 <= y) {
			err += ++y*2+1;
			if (-x == y && e2 <= x) e2 = 0;
		}
		if (e2 > x) err += ++x*2+1;
 8001034:	42b7      	cmp	r7, r6
 8001036:	da43      	bge.n	80010c0 <Circle+0xac>
 8001038:	3701      	adds	r7, #1
 800103a:	007e      	lsls	r6, r7, #1
 800103c:	3601      	adds	r6, #1
 800103e:	441e      	add	r6, r3
	} while (x <= 0);
 8001040:	2f00      	cmp	r7, #0
 8001042:	dc3f      	bgt.n	80010c4 <Circle+0xb0>
		Pixel(x1-x, y1+y,Color,Thickness);
 8001044:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8001048:	fa1f fa87 	uxth.w	sl, r7
 800104c:	9302      	str	r3, [sp, #8]
 800104e:	eba3 050a 	sub.w	r5, r3, sl
 8001052:	b2ad      	uxth	r5, r5
 8001054:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001058:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 800105c:	9303      	str	r3, [sp, #12]
 800105e:	eb03 0804 	add.w	r8, r3, r4
 8001062:	fa1f f888 	uxth.w	r8, r8
 8001066:	465b      	mov	r3, fp
 8001068:	464a      	mov	r2, r9
 800106a:	4641      	mov	r1, r8
 800106c:	4628      	mov	r0, r5
 800106e:	f7ff fdc7 	bl	8000c00 <Pixel>
		Pixel(x1+x, y1+y,Color,Thickness);
 8001072:	9b02      	ldr	r3, [sp, #8]
 8001074:	449a      	add	sl, r3
 8001076:	fa1f fa8a 	uxth.w	sl, sl
 800107a:	465b      	mov	r3, fp
 800107c:	464a      	mov	r2, r9
 800107e:	4641      	mov	r1, r8
 8001080:	4650      	mov	r0, sl
 8001082:	f7ff fdbd 	bl	8000c00 <Pixel>
		Pixel(x1+x, y1-y,Color,Thickness);
 8001086:	9903      	ldr	r1, [sp, #12]
 8001088:	1a64      	subs	r4, r4, r1
 800108a:	b2a4      	uxth	r4, r4
 800108c:	465b      	mov	r3, fp
 800108e:	464a      	mov	r2, r9
 8001090:	4621      	mov	r1, r4
 8001092:	4650      	mov	r0, sl
 8001094:	f7ff fdb4 	bl	8000c00 <Pixel>
		Pixel(x1-x, y1-y,Color,Thickness);
 8001098:	465b      	mov	r3, fp
 800109a:	464a      	mov	r2, r9
 800109c:	4621      	mov	r1, r4
 800109e:	4628      	mov	r0, r5
 80010a0:	f7ff fdae 	bl	8000c00 <Pixel>
		if (e2 <= y) {
 80010a4:	9a01      	ldr	r2, [sp, #4]
 80010a6:	42b2      	cmp	r2, r6
 80010a8:	dbc3      	blt.n	8001032 <Circle+0x1e>
			err += ++y*2+1;
 80010aa:	3201      	adds	r2, #1
 80010ac:	9201      	str	r2, [sp, #4]
 80010ae:	0053      	lsls	r3, r2, #1
 80010b0:	3301      	adds	r3, #1
 80010b2:	4433      	add	r3, r6
			if (-x == y && e2 <= x) e2 = 0;
 80010b4:	42fa      	cmn	r2, r7
 80010b6:	d1bd      	bne.n	8001034 <Circle+0x20>
 80010b8:	42b7      	cmp	r7, r6
 80010ba:	dbbb      	blt.n	8001034 <Circle+0x20>
 80010bc:	2600      	movs	r6, #0
 80010be:	e7b9      	b.n	8001034 <Circle+0x20>
 80010c0:	461e      	mov	r6, r3
 80010c2:	e7bd      	b.n	8001040 <Circle+0x2c>
}
 80010c4:	b007      	add	sp, #28
 80010c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080010ca <FillCircle>:
void FillCircle(uint16 x1, uint16 y1, uint16 r, uint32 Color)//
{
 80010ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010cc:	b083      	sub	sp, #12
 80010ce:	4607      	mov	r7, r0
 80010d0:	460e      	mov	r6, r1
 80010d2:	4614      	mov	r4, r2
 80010d4:	461d      	mov	r5, r3
  uint16 r1 = r;
  while(r1 != 0)
 80010d6:	e009      	b.n	80010ec <FillCircle+0x22>
  {
      Circle(x1,y1,r1,Color,2);
 80010d8:	2202      	movs	r2, #2
 80010da:	9200      	str	r2, [sp, #0]
 80010dc:	462b      	mov	r3, r5
 80010de:	b222      	sxth	r2, r4
 80010e0:	b231      	sxth	r1, r6
 80010e2:	b238      	sxth	r0, r7
 80010e4:	f7ff ff96 	bl	8001014 <Circle>
      r1--;
 80010e8:	3c01      	subs	r4, #1
 80010ea:	b2a4      	uxth	r4, r4
  while(r1 != 0)
 80010ec:	2c00      	cmp	r4, #0
 80010ee:	d1f3      	bne.n	80010d8 <FillCircle+0xe>
  }
}
 80010f0:	b003      	add	sp, #12
 80010f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010f4 <VGradA>:
void VGradA(int16 x1, int16 x2, int16 y1, int16 y2, int32 ColorH, int32 ColorL)//
{
 80010f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010f8:	ed2d 8b06 	vpush	{d8-d10}
 80010fc:	460e      	mov	r6, r1
 80010fe:	469a      	mov	sl, r3
 8001100:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001102:	9c11      	ldr	r4, [sp, #68]	; 0x44
    float HRed, HGreen, HBlue;
    float LRed, LGreen, LBlue;
    y1-=1;
 8001104:	3a01      	subs	r2, #1
 8001106:	fa0f f982 	sxth.w	r9, r2
    x1-=1;
 800110a:	3801      	subs	r0, #1
 800110c:	fa0f fb80 	sxth.w	fp, r0

	if(ColorType == Color565)
 8001110:	4b73      	ldr	r3, [pc, #460]	; (80012e0 <VGradA+0x1ec>)
 8001112:	781f      	ldrb	r7, [r3, #0]
 8001114:	b93f      	cbnz	r7, 8001126 <VGradA+0x32>
	{ ColorH = Get565Color(ColorH); ColorL = Get565Color(ColorL);}
 8001116:	4628      	mov	r0, r5
 8001118:	f7ff faac 	bl	8000674 <Get565Color>
 800111c:	4605      	mov	r5, r0
 800111e:	4620      	mov	r0, r4
 8001120:	f7ff faa8 	bl	8000674 <Get565Color>
 8001124:	4604      	mov	r4, r0

	if(ColorType == Color888)
 8001126:	2f01      	cmp	r7, #1
 8001128:	d035      	beq.n	8001196 <VGradA+0xa2>
	{ ColorH = ColorH | 0xFF << 24; ColorL = ColorL | 0xFF << 24; }

	if(x1 < 1){x1 = 1;}
 800112a:	f1bb 0f00 	cmp.w	fp, #0
 800112e:	dd37      	ble.n	80011a0 <VGradA+0xac>
	if(x2 > DispWidth){ x2 = DispWidth;}
 8001130:	4b6c      	ldr	r3, [pc, #432]	; (80012e4 <VGradA+0x1f0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	429e      	cmp	r6, r3
 8001136:	d900      	bls.n	800113a <VGradA+0x46>
 8001138:	b21e      	sxth	r6, r3
	if(y1 < 1){ y1 = 1;}
 800113a:	f1b9 0f00 	cmp.w	r9, #0
 800113e:	dd32      	ble.n	80011a6 <VGradA+0xb2>
	if(y2 > DispHeight){ y2 = DispHeight;}
 8001140:	4b69      	ldr	r3, [pc, #420]	; (80012e8 <VGradA+0x1f4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	459a      	cmp	sl, r3
 8001146:	d901      	bls.n	800114c <VGradA+0x58>
 8001148:	fa0f fa83 	sxth.w	sl, r3

    if(ColorType != Color565)
 800114c:	b377      	cbz	r7, 80011ac <VGradA+0xb8>
    {
       HBlue = ColorH & 0x000000ff;
 800114e:	b2eb      	uxtb	r3, r5
 8001150:	ee09 3a90 	vmov	s19, r3
 8001154:	eef8 9ae9 	vcvt.f32.s32	s19, s19
       ColorH = ColorH>>8;
       HGreen = ColorH & 0x000000ff;
 8001158:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800115c:	ee09 3a10 	vmov	s18, r3
 8001160:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
       ColorH = ColorH>>8;
       HRed = ColorH & 0x000000ff;
 8001164:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8001168:	ee07 5a90 	vmov	s15, r5
 800116c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15

       LBlue = ColorL & 0x000000ff;
 8001170:	b2e3      	uxtb	r3, r4
 8001172:	ee0a 3a90 	vmov	s21, r3
 8001176:	eef8 aaea 	vcvt.f32.s32	s21, s21
       ColorL = ColorL>>8;
       LGreen = ColorL & 0x000000ff;
 800117a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800117e:	ee0a 3a10 	vmov	s20, r3
 8001182:	eeb8 aaca 	vcvt.f32.s32	s20, s20
       ColorL = ColorL>>8;
       LRed = ColorL & 0x000000ff;
 8001186:	f3c4 4407 	ubfx	r4, r4, #16, #8
 800118a:	ee07 4a90 	vmov	s15, r4
 800118e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
    }

    uint32 Res_Color, promej_zn;
    float Mix;

    for(int16 i = y1; i<y2; i++)
 8001192:	46c8      	mov	r8, r9
 8001194:	e063      	b.n	800125e <VGradA+0x16a>
	{ ColorH = ColorH | 0xFF << 24; ColorL = ColorL | 0xFF << 24; }
 8001196:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 800119a:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 800119e:	e7c4      	b.n	800112a <VGradA+0x36>
	if(x1 < 1){x1 = 1;}
 80011a0:	f04f 0b01 	mov.w	fp, #1
 80011a4:	e7c4      	b.n	8001130 <VGradA+0x3c>
	if(y1 < 1){ y1 = 1;}
 80011a6:	f04f 0901 	mov.w	r9, #1
 80011aa:	e7c9      	b.n	8001140 <VGradA+0x4c>
        HBlue = ColorH & 0x0000001f;
 80011ac:	f005 031f 	and.w	r3, r5, #31
 80011b0:	ee09 3a90 	vmov	s19, r3
 80011b4:	eef8 9ae9 	vcvt.f32.s32	s19, s19
        HGreen = ColorH & 0x0000003f;
 80011b8:	f3c5 1345 	ubfx	r3, r5, #5, #6
 80011bc:	ee09 3a10 	vmov	s18, r3
 80011c0:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
        HRed = ColorH & 0x0000001f;
 80011c4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80011c8:	ee07 5a90 	vmov	s15, r5
 80011cc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
        LBlue = ColorL & 0x0000001f;
 80011d0:	f004 031f 	and.w	r3, r4, #31
 80011d4:	ee0a 3a90 	vmov	s21, r3
 80011d8:	eef8 aaea 	vcvt.f32.s32	s21, s21
        LGreen = ColorL & 0x0000003f;
 80011dc:	f3c4 1345 	ubfx	r3, r4, #5, #6
 80011e0:	ee0a 3a10 	vmov	s20, r3
 80011e4:	eeb8 aaca 	vcvt.f32.s32	s20, s20
        LRed = ColorL & 0x0000001f;
 80011e8:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80011ec:	ee07 4a90 	vmov	s15, r4
 80011f0:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 80011f4:	e7cd      	b.n	8001192 <VGradA+0x9e>
        promej_zn = HBlue * (1 - Mix) + LBlue * (Mix);
        Res_Color |= promej_zn;
     }
     else
     {
         Res_Color = HRed * (1 - Mix) + LRed * (Mix);
 80011f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011fe:	ee67 6a08 	vmul.f32	s13, s14, s16
 8001202:	ee28 6aa7 	vmul.f32	s12, s17, s15
 8001206:	ee76 6a86 	vadd.f32	s13, s13, s12
 800120a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800120e:	ee16 3a90 	vmov	r3, s13
         Res_Color <<= 6;
         promej_zn = HGreen * (1 - Mix) + LGreen * (Mix);
 8001212:	ee67 6a09 	vmul.f32	s13, s14, s18
 8001216:	ee2a 6a27 	vmul.f32	s12, s20, s15
 800121a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800121e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001222:	ee16 5a90 	vmov	r5, s13
         Res_Color |= promej_zn;
 8001226:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
         Res_Color <<= 5;
         promej_zn = HBlue * (1 - Mix) + LBlue * (Mix);
 800122a:	ee27 7a29 	vmul.f32	s14, s14, s19
 800122e:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8001232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
         Res_Color |= promej_zn;
 800123a:	ee17 3a90 	vmov	r3, s15
 800123e:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
 8001242:	e047      	b.n	80012d4 <VGradA+0x1e0>
     }

     for(int16 j = x1; j<x2; j++)
     {
          MemPoint(j,i,Res_Color);
 8001244:	462a      	mov	r2, r5
 8001246:	4639      	mov	r1, r7
 8001248:	4620      	mov	r0, r4
 800124a:	f7ff f995 	bl	8000578 <MemPoint>
     for(int16 j = x1; j<x2; j++)
 800124e:	3401      	adds	r4, #1
 8001250:	b224      	sxth	r4, r4
 8001252:	42a6      	cmp	r6, r4
 8001254:	dcf6      	bgt.n	8001244 <VGradA+0x150>
    for(int16 i = y1; i<y2; i++)
 8001256:	f108 0801 	add.w	r8, r8, #1
 800125a:	fa0f f888 	sxth.w	r8, r8
 800125e:	45c2      	cmp	sl, r8
 8001260:	dd3a      	ble.n	80012d8 <VGradA+0x1e4>
     Mix = (float)(i - y1) / (float)(y2 - y1);
 8001262:	4647      	mov	r7, r8
 8001264:	eba8 0309 	sub.w	r3, r8, r9
 8001268:	ee06 3a90 	vmov	s13, r3
 800126c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001270:	ebaa 0309 	sub.w	r3, sl, r9
 8001274:	ee07 3a10 	vmov	s14, r3
 8001278:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800127c:	eec6 7a87 	vdiv.f32	s15, s13, s14
     if(ColorType != Color565)
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <VGradA+0x1ec>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0b6      	beq.n	80011f6 <VGradA+0x102>
        Res_Color = HRed * (1 - Mix) + LRed * (Mix);
 8001288:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800128c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001290:	ee67 6a08 	vmul.f32	s13, s14, s16
 8001294:	ee28 6aa7 	vmul.f32	s12, s17, s15
 8001298:	ee76 6a86 	vadd.f32	s13, s13, s12
 800129c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80012a0:	ee16 3a90 	vmov	r3, s13
        promej_zn = HGreen * (1 - Mix) + LGreen * (Mix);
 80012a4:	ee67 6a09 	vmul.f32	s13, s14, s18
 80012a8:	ee2a 6a27 	vmul.f32	s12, s20, s15
 80012ac:	ee76 6a86 	vadd.f32	s13, s13, s12
 80012b0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80012b4:	ee16 5a90 	vmov	r5, s13
        Res_Color |= promej_zn;
 80012b8:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
        promej_zn = HBlue * (1 - Mix) + LBlue * (Mix);
 80012bc:	ee27 7a29 	vmul.f32	s14, s14, s19
 80012c0:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80012c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
        Res_Color |= promej_zn;
 80012cc:	ee17 3a90 	vmov	r3, s15
 80012d0:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
     for(int16 j = x1; j<x2; j++)
 80012d4:	465c      	mov	r4, fp
 80012d6:	e7bc      	b.n	8001252 <VGradA+0x15e>
     }
   }
}
 80012d8:	ecbd 8b06 	vpop	{d8-d10}
 80012dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012e0:	2000007c 	.word	0x2000007c
 80012e4:	20000004 	.word	0x20000004
 80012e8:	20000000 	.word	0x20000000

080012ec <HGradA>:
void HGradA(int16 x1, int16 x2, int16 y1, int16 y2, int32 ColorH, int32 ColorL)//++
{
 80012ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012f0:	ed2d 8b06 	vpush	{d8-d10}
 80012f4:	468a      	mov	sl, r1
 80012f6:	461e      	mov	r6, r3
 80012f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80012fa:	9c11      	ldr	r4, [sp, #68]	; 0x44
    float HRed, HGreen, HBlue;
    float LRed, LGreen, LBlue;
    y1-=1;
 80012fc:	3a01      	subs	r2, #1
 80012fe:	fa0f fb82 	sxth.w	fp, r2
    x1-=1;
 8001302:	3801      	subs	r0, #1
 8001304:	fa0f f980 	sxth.w	r9, r0

	if(ColorType == Color565)
 8001308:	4b74      	ldr	r3, [pc, #464]	; (80014dc <HGradA+0x1f0>)
 800130a:	781f      	ldrb	r7, [r3, #0]
 800130c:	b93f      	cbnz	r7, 800131e <HGradA+0x32>
	{ ColorH = Get565Color(ColorH); ColorL = Get565Color(ColorL);}
 800130e:	4628      	mov	r0, r5
 8001310:	f7ff f9b0 	bl	8000674 <Get565Color>
 8001314:	4605      	mov	r5, r0
 8001316:	4620      	mov	r0, r4
 8001318:	f7ff f9ac 	bl	8000674 <Get565Color>
 800131c:	4604      	mov	r4, r0

	if(ColorType == Color888)
 800131e:	2f01      	cmp	r7, #1
 8001320:	d036      	beq.n	8001390 <HGradA+0xa4>
	{ ColorH = ColorH | 0xFF << 24; ColorL = ColorL | 0xFF << 24; }

	if(x1 < 1){x1 = 1;}
 8001322:	f1b9 0f00 	cmp.w	r9, #0
 8001326:	dd38      	ble.n	800139a <HGradA+0xae>
	if(x2 > DispWidth){ x2 = DispWidth;}
 8001328:	4b6d      	ldr	r3, [pc, #436]	; (80014e0 <HGradA+0x1f4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	459a      	cmp	sl, r3
 800132e:	d901      	bls.n	8001334 <HGradA+0x48>
 8001330:	fa0f fa83 	sxth.w	sl, r3
	if(y1 < 1){ y1 = 1;}
 8001334:	f1bb 0f00 	cmp.w	fp, #0
 8001338:	dd32      	ble.n	80013a0 <HGradA+0xb4>
	if(y2 > DispHeight){ y2 = DispHeight;}
 800133a:	4b6a      	ldr	r3, [pc, #424]	; (80014e4 <HGradA+0x1f8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	429e      	cmp	r6, r3
 8001340:	d900      	bls.n	8001344 <HGradA+0x58>
 8001342:	b21e      	sxth	r6, r3

    if(ColorType != Color565)
 8001344:	b37f      	cbz	r7, 80013a6 <HGradA+0xba>
    {
       HBlue = ColorH & 0x000000ff;
 8001346:	b2eb      	uxtb	r3, r5
 8001348:	ee09 3a90 	vmov	s19, r3
 800134c:	eef8 9ae9 	vcvt.f32.s32	s19, s19
       ColorH = ColorH>>8;
       HGreen = ColorH & 0x000000ff;
 8001350:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8001354:	ee09 3a10 	vmov	s18, r3
 8001358:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
       ColorH = ColorH>>8;
       HRed = ColorH & 0x000000ff;
 800135c:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8001360:	ee07 5a90 	vmov	s15, r5
 8001364:	eeb8 8ae7 	vcvt.f32.s32	s16, s15

       LBlue = ColorL & 0x000000ff;
 8001368:	b2e3      	uxtb	r3, r4
 800136a:	ee0a 3a90 	vmov	s21, r3
 800136e:	eef8 aaea 	vcvt.f32.s32	s21, s21
       ColorL = ColorL>>8;
       LGreen = ColorL & 0x000000ff;
 8001372:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8001376:	ee0a 3a10 	vmov	s20, r3
 800137a:	eeb8 aaca 	vcvt.f32.s32	s20, s20
       ColorL = ColorL>>8;
       LRed = ColorL & 0x000000ff;
 800137e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8001382:	ee07 4a90 	vmov	s15, r4
 8001386:	eef8 8ae7 	vcvt.f32.s32	s17, s15
    }

    uint32 Res_Color, promej_zn;
    float Mix;

    for(uint16 i = x1; i<x2; i++)
 800138a:	fa1f f889 	uxth.w	r8, r9
 800138e:	e063      	b.n	8001458 <HGradA+0x16c>
	{ ColorH = ColorH | 0xFF << 24; ColorL = ColorL | 0xFF << 24; }
 8001390:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 8001394:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 8001398:	e7c3      	b.n	8001322 <HGradA+0x36>
	if(x1 < 1){x1 = 1;}
 800139a:	f04f 0901 	mov.w	r9, #1
 800139e:	e7c3      	b.n	8001328 <HGradA+0x3c>
	if(y1 < 1){ y1 = 1;}
 80013a0:	f04f 0b01 	mov.w	fp, #1
 80013a4:	e7c9      	b.n	800133a <HGradA+0x4e>
        HBlue = ColorH & 0x0000001f;
 80013a6:	f005 031f 	and.w	r3, r5, #31
 80013aa:	ee09 3a90 	vmov	s19, r3
 80013ae:	eef8 9ae9 	vcvt.f32.s32	s19, s19
        HGreen = ColorH & 0x0000003f;
 80013b2:	f3c5 1345 	ubfx	r3, r5, #5, #6
 80013b6:	ee09 3a10 	vmov	s18, r3
 80013ba:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
        HRed = ColorH & 0x0000001f;
 80013be:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80013c2:	ee07 5a90 	vmov	s15, r5
 80013c6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
        LBlue = ColorL & 0x0000001f;
 80013ca:	f004 031f 	and.w	r3, r4, #31
 80013ce:	ee0a 3a90 	vmov	s21, r3
 80013d2:	eef8 aaea 	vcvt.f32.s32	s21, s21
        LGreen = ColorL & 0x0000003f;
 80013d6:	f3c4 1345 	ubfx	r3, r4, #5, #6
 80013da:	ee0a 3a10 	vmov	s20, r3
 80013de:	eeb8 aaca 	vcvt.f32.s32	s20, s20
        LRed = ColorL & 0x0000001f;
 80013e2:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80013e6:	ee07 4a90 	vmov	s15, r4
 80013ea:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 80013ee:	e7cc      	b.n	800138a <HGradA+0x9e>
         promej_zn = HBlue * (1 - Mix) + LBlue * (Mix);
         Res_Color |= promej_zn;
     }
     else
     {
         Res_Color = HRed * (1 - Mix) + LRed * (Mix);
 80013f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013f8:	ee67 6a08 	vmul.f32	s13, s14, s16
 80013fc:	ee28 6aa7 	vmul.f32	s12, s17, s15
 8001400:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001404:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001408:	ee16 3a90 	vmov	r3, s13
         Res_Color <<= 6;
         promej_zn = HGreen * (1 - Mix) + LGreen * (Mix);
 800140c:	ee67 6a09 	vmul.f32	s13, s14, s18
 8001410:	ee2a 6a27 	vmul.f32	s12, s20, s15
 8001414:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001418:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800141c:	ee16 5a90 	vmov	r5, s13
         Res_Color |= promej_zn;
 8001420:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
         Res_Color <<= 5;
         promej_zn = HBlue * (1 - Mix) + LBlue * (Mix);
 8001424:	ee27 7a29 	vmul.f32	s14, s14, s19
 8001428:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800142c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
         Res_Color |= promej_zn;
 8001434:	ee17 3a90 	vmov	r3, s15
 8001438:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
 800143c:	e047      	b.n	80014ce <HGradA+0x1e2>
     }


     for(int16 j = y1; j<y2; j++)
     {
         MemPoint(i,j,Res_Color);
 800143e:	462a      	mov	r2, r5
 8001440:	4621      	mov	r1, r4
 8001442:	4638      	mov	r0, r7
 8001444:	f7ff f898 	bl	8000578 <MemPoint>
     for(int16 j = y1; j<y2; j++)
 8001448:	3401      	adds	r4, #1
 800144a:	b224      	sxth	r4, r4
 800144c:	42a6      	cmp	r6, r4
 800144e:	dcf6      	bgt.n	800143e <HGradA+0x152>
    for(uint16 i = x1; i<x2; i++)
 8001450:	f108 0801 	add.w	r8, r8, #1
 8001454:	fa1f f888 	uxth.w	r8, r8
 8001458:	45d0      	cmp	r8, sl
 800145a:	da3a      	bge.n	80014d2 <HGradA+0x1e6>
     Mix = (float)(i - x1) / (float)(x2 - x1);
 800145c:	4647      	mov	r7, r8
 800145e:	eba8 0309 	sub.w	r3, r8, r9
 8001462:	ee06 3a90 	vmov	s13, r3
 8001466:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800146a:	ebaa 0309 	sub.w	r3, sl, r9
 800146e:	ee07 3a10 	vmov	s14, r3
 8001472:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001476:	eec6 7a87 	vdiv.f32	s15, s13, s14
     if(ColorType != Color565)
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HGradA+0x1f0>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0b6      	beq.n	80013f0 <HGradA+0x104>
         Res_Color = HRed * (1 - Mix) + LRed * (Mix);
 8001482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001486:	ee37 7a67 	vsub.f32	s14, s14, s15
 800148a:	ee67 6a08 	vmul.f32	s13, s14, s16
 800148e:	ee28 6aa7 	vmul.f32	s12, s17, s15
 8001492:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001496:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800149a:	ee16 3a90 	vmov	r3, s13
         promej_zn = HGreen * (1 - Mix) + LGreen * (Mix);
 800149e:	ee67 6a09 	vmul.f32	s13, s14, s18
 80014a2:	ee2a 6a27 	vmul.f32	s12, s20, s15
 80014a6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80014aa:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80014ae:	ee16 5a90 	vmov	r5, s13
         Res_Color |= promej_zn;
 80014b2:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
         promej_zn = HBlue * (1 - Mix) + LBlue * (Mix);
 80014b6:	ee27 7a29 	vmul.f32	s14, s14, s19
 80014ba:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80014be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
         Res_Color |= promej_zn;
 80014c6:	ee17 3a90 	vmov	r3, s15
 80014ca:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
     for(int16 j = y1; j<y2; j++)
 80014ce:	465c      	mov	r4, fp
 80014d0:	e7bc      	b.n	800144c <HGradA+0x160>
     }
   }
}
 80014d2:	ecbd 8b06 	vpop	{d8-d10}
 80014d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014da:	bf00      	nop
 80014dc:	2000007c 	.word	0x2000007c
 80014e0:	20000004 	.word	0x20000004
 80014e4:	20000000 	.word	0x20000000

080014e8 <VGradB>:
void VGradB(int16 x1, int16 x2, int16 y1, int16 y2, uint32 ColorH, uint32 ColorC, uint32 ColorL)//++
{
 80014e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	4606      	mov	r6, r0
 80014f0:	460f      	mov	r7, r1
 80014f2:	461d      	mov	r5, r3
 80014f4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 VGradA(x1,x2,y1,y1+((y2 - y1)/2),ColorH,ColorC);
 80014f8:	1a9c      	subs	r4, r3, r2
 80014fa:	d418      	bmi.n	800152e <VGradB+0x46>
 80014fc:	eb02 0464 	add.w	r4, r2, r4, asr #1
 8001500:	b224      	sxth	r4, r4
 8001502:	f8cd 8004 	str.w	r8, [sp, #4]
 8001506:	9b08      	ldr	r3, [sp, #32]
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	4623      	mov	r3, r4
 800150c:	4639      	mov	r1, r7
 800150e:	4630      	mov	r0, r6
 8001510:	f7ff fdf0 	bl	80010f4 <VGradA>
 VGradA(x1,x2,y1+((y2 - y1)/2),y2,ColorC,ColorL);
 8001514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	f8cd 8000 	str.w	r8, [sp]
 800151c:	462b      	mov	r3, r5
 800151e:	4622      	mov	r2, r4
 8001520:	4639      	mov	r1, r7
 8001522:	4630      	mov	r0, r6
 8001524:	f7ff fde6 	bl	80010f4 <VGradA>
}
 8001528:	b002      	add	sp, #8
 800152a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 VGradA(x1,x2,y1,y1+((y2 - y1)/2),ColorH,ColorC);
 800152e:	3401      	adds	r4, #1
 8001530:	e7e4      	b.n	80014fc <VGradB+0x14>

08001532 <HGradB>:
void HGradB(int16 x1, int16 x2, int16 y1, int16 y2, uint32 ColorH, uint32 ColorC, uint32 ColorL)//++
{
 8001532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	460d      	mov	r5, r1
 800153a:	4616      	mov	r6, r2
 800153c:	461f      	mov	r7, r3
 800153e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 HGradA(x1,x1+((x2 - x1)/2),y1,y2,ColorH,ColorC);
 8001542:	1a0c      	subs	r4, r1, r0
 8001544:	d418      	bmi.n	8001578 <HGradB+0x46>
 8001546:	eb00 0464 	add.w	r4, r0, r4, asr #1
 800154a:	b224      	sxth	r4, r4
 800154c:	f8cd 8004 	str.w	r8, [sp, #4]
 8001550:	9b08      	ldr	r3, [sp, #32]
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	463b      	mov	r3, r7
 8001556:	4632      	mov	r2, r6
 8001558:	4621      	mov	r1, r4
 800155a:	f7ff fec7 	bl	80012ec <HGradA>
 HGradA(x1+((x2 - x1)/2),x2,y1,y2,ColorC,ColorL);
 800155e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	f8cd 8000 	str.w	r8, [sp]
 8001566:	463b      	mov	r3, r7
 8001568:	4632      	mov	r2, r6
 800156a:	4629      	mov	r1, r5
 800156c:	4620      	mov	r0, r4
 800156e:	f7ff febd 	bl	80012ec <HGradA>
}
 8001572:	b002      	add	sp, #8
 8001574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 HGradA(x1,x1+((x2 - x1)/2),y1,y2,ColorH,ColorC);
 8001578:	3401      	adds	r4, #1
 800157a:	e7e4      	b.n	8001546 <HGradB+0x14>

0800157c <FramePanel>:

/*5ый этап*/

void FramePanel(uint32 BorderColor, uint32 FloodColor, int16 x1, int16 x2, int16 y1, int16 y2, uint8 Thickness)
{
 800157c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001580:	b083      	sub	sp, #12
 8001582:	4605      	mov	r5, r0
 8001584:	4608      	mov	r0, r1
 8001586:	4616      	mov	r6, r2
 8001588:	461c      	mov	r4, r3
 800158a:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
 800158e:	f9bd a034 	ldrsh.w	sl, [sp, #52]	; 0x34
 8001592:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	Thickness --;
 8001596:	f108 37ff 	add.w	r7, r8, #4294967295
 800159a:	b2ff      	uxtb	r7, r7
	Fill_Rectangle(FloodColor,x1,x2,y1,y2);
 800159c:	f8cd a000 	str.w	sl, [sp]
 80015a0:	464b      	mov	r3, r9
 80015a2:	4622      	mov	r2, r4
 80015a4:	4631      	mov	r1, r6
 80015a6:	f7ff fb77 	bl	8000c98 <Fill_Rectangle>
    HLine(BorderColor,x1,x2,y1,Thickness + 1);
 80015aa:	f8cd 8000 	str.w	r8, [sp]
 80015ae:	464b      	mov	r3, r9
 80015b0:	4622      	mov	r2, r4
 80015b2:	4631      	mov	r1, r6
 80015b4:	4628      	mov	r0, r5
 80015b6:	f7ff fbd3 	bl	8000d60 <HLine>
    HLine(BorderColor,x1,x2,y2 - Thickness,Thickness +1);
 80015ba:	fa1f fb87 	uxth.w	fp, r7
 80015be:	ebaa 0307 	sub.w	r3, sl, r7
 80015c2:	f8cd 8000 	str.w	r8, [sp]
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	4622      	mov	r2, r4
 80015ca:	4631      	mov	r1, r6
 80015cc:	4628      	mov	r0, r5
 80015ce:	f7ff fbc7 	bl	8000d60 <HLine>
    VLine(BorderColor,x1,y1,y2,Thickness + 1);
 80015d2:	f8cd 8000 	str.w	r8, [sp]
 80015d6:	4653      	mov	r3, sl
 80015d8:	464a      	mov	r2, r9
 80015da:	4631      	mov	r1, r6
 80015dc:	4628      	mov	r0, r5
 80015de:	f7ff fbcd 	bl	8000d7c <VLine>
    VLine(BorderColor,x2 - Thickness,y1,y2,Thickness + 1);
 80015e2:	eba4 010b 	sub.w	r1, r4, fp
 80015e6:	f8cd 8000 	str.w	r8, [sp]
 80015ea:	4653      	mov	r3, sl
 80015ec:	464a      	mov	r2, r9
 80015ee:	b209      	sxth	r1, r1
 80015f0:	4628      	mov	r0, r5
 80015f2:	f7ff fbc3 	bl	8000d7c <VLine>
}
 80015f6:	b003      	add	sp, #12
 80015f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080015fc <Progress_bar>:
void Progress_bar(uint16 XStart, uint16 XEnd, uint16 YStart, uint16 YEnd, uint16 StartPos, uint16 StopPos, uint16 CurrPos, uint32 BorderColor, uint32 FloodColor, uint32 BarColor, uint16 Thickness, uint8 Orient)
{
 80015fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001600:	b084      	sub	sp, #16
 8001602:	4605      	mov	r5, r0
 8001604:	4689      	mov	r9, r1
 8001606:	4690      	mov	r8, r2
 8001608:	461c      	mov	r4, r3
 800160a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 800160e:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 8001612:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
 8001616:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
 800161a:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
  uint16 Tr = Thickness - 1;
 800161e:	1e46      	subs	r6, r0, #1
 8001620:	b2b6      	uxth	r6, r6
  float STPOS;
  float POSCOUNT;
  uint16 XPOS = 0, YPOS = 0;
  uint16 POSN = CurrPos - StartPos;
 8001622:	ebac 0301 	sub.w	r3, ip, r1
 8001626:	b29b      	uxth	r3, r3
 8001628:	ee07 3a90 	vmov	s15, r3

  if(Orient == Horisontal)
 800162c:	2a00      	cmp	r2, #0
 800162e:	f040 8081 	bne.w	8001734 <Progress_bar+0x138>
  {
      if(CurrPos == 1)
 8001632:	f1bc 0f01 	cmp.w	ip, #1
 8001636:	d02b      	beq.n	8001690 <Progress_bar+0x94>
  uint16 XPOS = 0, YPOS = 0;
 8001638:	f04f 0a00 	mov.w	sl, #0
         STPOS = StopPos - StartPos;
         POSCOUNT = (XEnd - XStart)/STPOS;
         XPOS = (uint16)((POSN - StartPos * POSCOUNT)+ XStart + 1 + Tr);
      }

      if(CurrPos == StartPos)
 800163c:	458c      	cmp	ip, r1
 800163e:	d055      	beq.n	80016ec <Progress_bar+0xf0>
         STPOS = StopPos - StartPos;
         POSCOUNT = (XEnd - XStart)/STPOS;
         XPOS = (uint16)((POSN * POSCOUNT)+ XStart + Tr);
      }

      if(CurrPos > StartPos)
 8001640:	458c      	cmp	ip, r1
 8001642:	f240 80b6 	bls.w	80017b2 <Progress_bar+0x1b6>
      {
         STPOS = StopPos - StartPos;
 8001646:	1a79      	subs	r1, r7, r1
 8001648:	ee07 1a10 	vmov	s14, r1
 800164c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
         POSCOUNT = (XEnd - XStart)/STPOS;
 8001650:	eba9 0305 	sub.w	r3, r9, r5
 8001654:	ee06 3a10 	vmov	s12, r3
 8001658:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800165c:	ee86 7a26 	vdiv.f32	s14, s12, s13
         XPOS = (uint16)((POSN * POSCOUNT)+ XStart - Tr);
 8001660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001664:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001668:	ee07 5a90 	vmov	s15, r5
 800166c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001670:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001674:	ee07 6a10 	vmov	s14, r6
 8001678:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800167c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001684:	ee17 3a90 	vmov	r3, s15
 8001688:	fa1f fa83 	uxth.w	sl, r3
  uint16 XPOS = 0, YPOS = 0;
 800168c:	2700      	movs	r7, #0
 800168e:	e071      	b.n	8001774 <Progress_bar+0x178>
         STPOS = StopPos - StartPos;
 8001690:	1a7b      	subs	r3, r7, r1
 8001692:	ee06 3a10 	vmov	s12, r3
 8001696:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
         POSCOUNT = (XEnd - XStart)/STPOS;
 800169a:	eba9 0305 	sub.w	r3, r9, r5
 800169e:	ee05 3a90 	vmov	s11, r3
 80016a2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80016a6:	eec5 6a86 	vdiv.f32	s13, s11, s12
         XPOS = (uint16)((POSN - StartPos * POSCOUNT)+ XStart + 1 + Tr);
 80016aa:	ee07 1a10 	vmov	s14, r1
 80016ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80016b2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80016b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016ba:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80016be:	ee07 5a10 	vmov	s14, r5
 80016c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80016c6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80016ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016ce:	ee77 6a26 	vadd.f32	s13, s14, s13
 80016d2:	ee07 6a10 	vmov	s14, r6
 80016d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80016da:	ee37 7a26 	vadd.f32	s14, s14, s13
 80016de:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80016e2:	ee17 3a10 	vmov	r3, s14
 80016e6:	fa1f fa83 	uxth.w	sl, r3
 80016ea:	e7a7      	b.n	800163c <Progress_bar+0x40>
         STPOS = StopPos - StartPos;
 80016ec:	1a7b      	subs	r3, r7, r1
 80016ee:	ee06 3a10 	vmov	s12, r3
 80016f2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
         POSCOUNT = (XEnd - XStart)/STPOS;
 80016f6:	eba9 0305 	sub.w	r3, r9, r5
 80016fa:	ee05 3a90 	vmov	s11, r3
 80016fe:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001702:	ee85 7a86 	vdiv.f32	s14, s11, s12
         XPOS = (uint16)((POSN * POSCOUNT)+ XStart + Tr);
 8001706:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800170a:	ee66 6a87 	vmul.f32	s13, s13, s14
 800170e:	ee07 5a10 	vmov	s14, r5
 8001712:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001716:	ee77 6a26 	vadd.f32	s13, s14, s13
 800171a:	ee07 6a10 	vmov	s14, r6
 800171e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001722:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001726:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800172a:	ee17 3a10 	vmov	r3, s14
 800172e:	fa1f fa83 	uxth.w	sl, r3
 8001732:	e785      	b.n	8001640 <Progress_bar+0x44>
      }
  }
  else
  {
      STPOS = StopPos - StartPos;
 8001734:	1a7b      	subs	r3, r7, r1
 8001736:	ee07 3a10 	vmov	s14, r3
 800173a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
      POSCOUNT = (YEnd - YStart)/STPOS;
 800173e:	eba4 0308 	sub.w	r3, r4, r8
 8001742:	ee06 3a90 	vmov	s13, r3
 8001746:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800174a:	ee86 6a87 	vdiv.f32	s12, s13, s14
      YPOS = (uint16)(YEnd - (POSN * POSCOUNT));
 800174e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001752:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001756:	ee07 4a10 	vmov	s14, r4
 800175a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800175e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
      YPOS += Thickness;
 8001766:	ee17 3a90 	vmov	r3, s15
 800176a:	fa10 f783 	uxtah	r7, r0, r3
 800176e:	b2bf      	uxth	r7, r7
  uint16 XPOS = 0, YPOS = 0;
 8001770:	f04f 0a00 	mov.w	sl, #0
  }

  if(Orient == Horisontal)
 8001774:	b9fa      	cbnz	r2, 80017b6 <Progress_bar+0x1ba>
  {
      FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,Thickness);
 8001776:	b2c0      	uxtb	r0, r0
 8001778:	9002      	str	r0, [sp, #8]
 800177a:	b223      	sxth	r3, r4
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	fa0f f388 	sxth.w	r3, r8
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	fa0f f389 	sxth.w	r3, r9
 8001788:	b22a      	sxth	r2, r5
 800178a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800178c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800178e:	f7ff fef5 	bl	800157c <FramePanel>
      Fill_Rectangle(BarColor,XStart + 1 + Tr,XPOS-1,YStart + 1 + Tr,YEnd - Tr - 1);
 8001792:	1c69      	adds	r1, r5, #1
 8001794:	f108 0301 	add.w	r3, r8, #1
 8001798:	1ba4      	subs	r4, r4, r6
 800179a:	3c01      	subs	r4, #1
 800179c:	9400      	str	r4, [sp, #0]
 800179e:	4433      	add	r3, r6
 80017a0:	f10a 32ff 	add.w	r2, sl, #4294967295
 80017a4:	4431      	add	r1, r6
 80017a6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80017a8:	f7ff fa76 	bl	8000c98 <Fill_Rectangle>
  else
  {
	  FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,Thickness);
	  Fill_Rectangle(BarColor, XStart + 1 + Tr,XEnd - Tr - 1, YPOS, YEnd - Tr - 1);
  }
}
 80017ac:	b004      	add	sp, #16
 80017ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint16 XPOS = 0, YPOS = 0;
 80017b2:	2700      	movs	r7, #0
 80017b4:	e7de      	b.n	8001774 <Progress_bar+0x178>
	  FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,Thickness);
 80017b6:	b2c0      	uxtb	r0, r0
 80017b8:	9002      	str	r0, [sp, #8]
 80017ba:	b223      	sxth	r3, r4
 80017bc:	9301      	str	r3, [sp, #4]
 80017be:	fa0f f388 	sxth.w	r3, r8
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	fa0f f389 	sxth.w	r3, r9
 80017c8:	b22a      	sxth	r2, r5
 80017ca:	9910      	ldr	r1, [sp, #64]	; 0x40
 80017cc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80017ce:	f7ff fed5 	bl	800157c <FramePanel>
	  Fill_Rectangle(BarColor, XStart + 1 + Tr,XEnd - Tr - 1, YPOS, YEnd - Tr - 1);
 80017d2:	3501      	adds	r5, #1
 80017d4:	eba9 0206 	sub.w	r2, r9, r6
 80017d8:	1ba4      	subs	r4, r4, r6
 80017da:	3c01      	subs	r4, #1
 80017dc:	9400      	str	r4, [sp, #0]
 80017de:	463b      	mov	r3, r7
 80017e0:	3a01      	subs	r2, #1
 80017e2:	19a9      	adds	r1, r5, r6
 80017e4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80017e6:	f7ff fa57 	bl	8000c98 <Fill_Rectangle>
}
 80017ea:	e7df      	b.n	80017ac <Progress_bar+0x1b0>

080017ec <Progress_bar_gradient>:
void Progress_bar_gradient(uint16 XStart, uint16 XEnd, uint16 YStart, uint16 YEnd, uint16 StartPos, uint16 StopPos, uint16 CurrPos, uint32 BorderColor, uint32 FloodColor, uint32 BarColorH, uint32 BarColorC, uint16 Thickness, uint8 Orient)//++
{
 80017ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017f0:	b085      	sub	sp, #20
 80017f2:	4604      	mov	r4, r0
 80017f4:	460f      	mov	r7, r1
 80017f6:	4690      	mov	r8, r2
 80017f8:	461d      	mov	r5, r3
 80017fa:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 80017fe:	f8bd c03c 	ldrh.w	ip, [sp, #60]	; 0x3c
 8001802:	f8bd e040 	ldrh.w	lr, [sp, #64]	; 0x40
 8001806:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 800180a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800180e:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
	  uint16 Tr = Thickness - 1;
 8001812:	1e5e      	subs	r6, r3, #1
 8001814:	b2b6      	uxth	r6, r6
	  float STPOS;
	  float POSCOUNT;
	  uint16 XPOS = 0, YPOS = 0;
	  uint16 POSN = CurrPos - StartPos;
 8001816:	ebae 0100 	sub.w	r1, lr, r0
 800181a:	b289      	uxth	r1, r1
 800181c:	ee07 1a90 	vmov	s15, r1

	  if(Orient == Horisontal)
 8001820:	2a00      	cmp	r2, #0
 8001822:	d17b      	bne.n	800191c <Progress_bar_gradient+0x130>
	  {
	      if(CurrPos == 1)
 8001824:	f1be 0f01 	cmp.w	lr, #1
 8001828:	d026      	beq.n	8001878 <Progress_bar_gradient+0x8c>
	  uint16 XPOS = 0, YPOS = 0;
 800182a:	f04f 0900 	mov.w	r9, #0
	         STPOS = StopPos - StartPos;
	         POSCOUNT = (XEnd - XStart)/STPOS;
	         XPOS = (uint16)((POSN - StartPos * POSCOUNT)+ XStart + 1 + Tr);
	      }

	      if(CurrPos == StartPos)
 800182e:	4586      	cmp	lr, r0
 8001830:	d050      	beq.n	80018d4 <Progress_bar_gradient+0xe8>
	         STPOS = StopPos - StartPos;
	         POSCOUNT = (XEnd - XStart)/STPOS;
	         XPOS = (uint16)((POSN * POSCOUNT)+ XStart + Tr);
	      }

	      if(CurrPos > StartPos)
 8001832:	4586      	cmp	lr, r0
 8001834:	f240 80ba 	bls.w	80019ac <Progress_bar_gradient+0x1c0>
	      {
	         STPOS = StopPos - StartPos;
 8001838:	ebac 0000 	sub.w	r0, ip, r0
 800183c:	ee07 0a10 	vmov	s14, r0
 8001840:	eef8 6ac7 	vcvt.f32.s32	s13, s14
	         POSCOUNT = (XEnd - XStart)/STPOS;
 8001844:	1b39      	subs	r1, r7, r4
 8001846:	ee06 1a10 	vmov	s12, r1
 800184a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800184e:	ee86 7a26 	vdiv.f32	s14, s12, s13
	         XPOS = (uint16)((POSN * POSCOUNT)+ XStart);
 8001852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001856:	ee27 7a87 	vmul.f32	s14, s15, s14
 800185a:	ee07 4a90 	vmov	s15, r4
 800185e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001862:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800186a:	ee17 1a90 	vmov	r1, s15
 800186e:	fa1f f981 	uxth.w	r9, r1
	  uint16 XPOS = 0, YPOS = 0;
 8001872:	f04f 0a00 	mov.w	sl, #0
 8001876:	e073      	b.n	8001960 <Progress_bar_gradient+0x174>
	         STPOS = StopPos - StartPos;
 8001878:	ebac 0100 	sub.w	r1, ip, r0
 800187c:	ee06 1a10 	vmov	s12, r1
 8001880:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	         POSCOUNT = (XEnd - XStart)/STPOS;
 8001884:	1b39      	subs	r1, r7, r4
 8001886:	ee05 1a90 	vmov	s11, r1
 800188a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800188e:	eec5 6a86 	vdiv.f32	s13, s11, s12
	         XPOS = (uint16)((POSN - StartPos * POSCOUNT)+ XStart + 1 + Tr);
 8001892:	ee07 0a10 	vmov	s14, r0
 8001896:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800189a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800189e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018a2:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80018a6:	ee07 4a10 	vmov	s14, r4
 80018aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80018ae:	ee37 7a26 	vadd.f32	s14, s14, s13
 80018b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018b6:	ee77 6a26 	vadd.f32	s13, s14, s13
 80018ba:	ee07 6a10 	vmov	s14, r6
 80018be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80018c2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80018c6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80018ca:	ee17 1a10 	vmov	r1, s14
 80018ce:	fa1f f981 	uxth.w	r9, r1
 80018d2:	e7ac      	b.n	800182e <Progress_bar_gradient+0x42>
	         STPOS = StopPos - StartPos;
 80018d4:	ebac 0100 	sub.w	r1, ip, r0
 80018d8:	ee06 1a10 	vmov	s12, r1
 80018dc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	         POSCOUNT = (XEnd - XStart)/STPOS;
 80018e0:	1b39      	subs	r1, r7, r4
 80018e2:	ee05 1a90 	vmov	s11, r1
 80018e6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80018ea:	ee85 7a86 	vdiv.f32	s14, s11, s12
	         XPOS = (uint16)((POSN * POSCOUNT)+ XStart + Tr);
 80018ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018f2:	ee66 6a87 	vmul.f32	s13, s13, s14
 80018f6:	ee07 4a10 	vmov	s14, r4
 80018fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80018fe:	ee77 6a26 	vadd.f32	s13, s14, s13
 8001902:	ee07 6a10 	vmov	s14, r6
 8001906:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800190a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800190e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8001912:	ee17 1a10 	vmov	r1, s14
 8001916:	fa1f f981 	uxth.w	r9, r1
 800191a:	e78a      	b.n	8001832 <Progress_bar_gradient+0x46>
	      }
	  }
	  else
	  {
	      STPOS = StopPos - StartPos;
 800191c:	ebac 0100 	sub.w	r1, ip, r0
 8001920:	ee07 1a10 	vmov	s14, r1
 8001924:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	      POSCOUNT = (YEnd - YStart)/STPOS;
 8001928:	eba5 0108 	sub.w	r1, r5, r8
 800192c:	ee06 1a90 	vmov	s13, r1
 8001930:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001934:	ee86 6a87 	vdiv.f32	s12, s13, s14
	      YPOS = (uint16)(YEnd - (POSN * POSCOUNT));
 8001938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800193c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001940:	ee07 5a10 	vmov	s14, r5
 8001944:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001948:	ee77 7a67 	vsub.f32	s15, s14, s15
 800194c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	      YPOS += Thickness;
 8001950:	ee17 1a90 	vmov	r1, s15
 8001954:	fa13 fa81 	uxtah	sl, r3, r1
 8001958:	fa1f fa8a 	uxth.w	sl, sl
	  uint16 XPOS = 0, YPOS = 0;
 800195c:	f04f 0900 	mov.w	r9, #0
	  }

	  if(Orient == Horisontal)
 8001960:	bb3a      	cbnz	r2, 80019b2 <Progress_bar_gradient+0x1c6>
	  {
	      FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,Thickness);
 8001962:	b2db      	uxtb	r3, r3
 8001964:	9302      	str	r3, [sp, #8]
 8001966:	b22b      	sxth	r3, r5
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	fa0f f388 	sxth.w	r3, r8
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	b23b      	sxth	r3, r7
 8001972:	b222      	sxth	r2, r4
 8001974:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001976:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001978:	f7ff fe00 	bl	800157c <FramePanel>
	      VGradB(XStart + 1 + Tr,XPOS-1,YStart + 1 + Tr,YEnd - 1 - Tr,BarColorH,BarColorC,BarColorH);
 800197c:	1930      	adds	r0, r6, r4
 800197e:	3001      	adds	r0, #1
 8001980:	f109 31ff 	add.w	r1, r9, #4294967295
 8001984:	eb06 0208 	add.w	r2, r6, r8
 8001988:	3201      	adds	r2, #1
 800198a:	1bab      	subs	r3, r5, r6
 800198c:	3b01      	subs	r3, #1
 800198e:	f8cd b008 	str.w	fp, [sp, #8]
 8001992:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8001994:	9401      	str	r4, [sp, #4]
 8001996:	f8cd b000 	str.w	fp, [sp]
 800199a:	b21b      	sxth	r3, r3
 800199c:	b212      	sxth	r2, r2
 800199e:	b209      	sxth	r1, r1
 80019a0:	b200      	sxth	r0, r0
 80019a2:	f7ff fda1 	bl	80014e8 <VGradB>
	  else
	  {
		  FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,Thickness);
		  HGradB(XStart + 1 + Tr, XEnd - Tr - 1, YPOS, YEnd - Tr - 1, BarColorH, BarColorC, BarColorH);
	  }
}
 80019a6:	b005      	add	sp, #20
 80019a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  uint16 XPOS = 0, YPOS = 0;
 80019ac:	f04f 0a00 	mov.w	sl, #0
 80019b0:	e7d6      	b.n	8001960 <Progress_bar_gradient+0x174>
		  FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,Thickness);
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	9302      	str	r3, [sp, #8]
 80019b6:	b22b      	sxth	r3, r5
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	fa0f f288 	sxth.w	r2, r8
 80019be:	9200      	str	r2, [sp, #0]
 80019c0:	b23b      	sxth	r3, r7
 80019c2:	b222      	sxth	r2, r4
 80019c4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80019c6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80019c8:	f7ff fdd8 	bl	800157c <FramePanel>
		  HGradB(XStart + 1 + Tr, XEnd - Tr - 1, YPOS, YEnd - Tr - 1, BarColorH, BarColorC, BarColorH);
 80019cc:	1930      	adds	r0, r6, r4
 80019ce:	3001      	adds	r0, #1
 80019d0:	1bb9      	subs	r1, r7, r6
 80019d2:	b289      	uxth	r1, r1
 80019d4:	3901      	subs	r1, #1
 80019d6:	1bab      	subs	r3, r5, r6
 80019d8:	b29b      	uxth	r3, r3
 80019da:	3b01      	subs	r3, #1
 80019dc:	f8cd b008 	str.w	fp, [sp, #8]
 80019e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80019e2:	9201      	str	r2, [sp, #4]
 80019e4:	f8cd b000 	str.w	fp, [sp]
 80019e8:	b21b      	sxth	r3, r3
 80019ea:	fa0f f28a 	sxth.w	r2, sl
 80019ee:	b209      	sxth	r1, r1
 80019f0:	b200      	sxth	r0, r0
 80019f2:	f7ff fd9e 	bl	8001532 <HGradB>
}
 80019f6:	e7d6      	b.n	80019a6 <Progress_bar_gradient+0x1ba>

080019f8 <Symbol>:
void Symbol(uint16 X, uint16 Y, uint32 Color, char Symbol)
{
 80019f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019fc:	b085      	sub	sp, #20
 80019fe:	4681      	mov	r9, r0
 8001a00:	9101      	str	r1, [sp, #4]
 8001a02:	9203      	str	r2, [sp, #12]
	uint8 FontH = calibri[1];
 8001a04:	4a77      	ldr	r2, [pc, #476]	; (8001be4 <Symbol+0x1ec>)
 8001a06:	f892 a001 	ldrb.w	sl, [r2, #1]
	uint8 FirstChar = calibri[2];
 8001a0a:	7890      	ldrb	r0, [r2, #2]
	uint8 NumOfChar = calibri[3];
	uint8 Cursor = Symbol - FirstChar;
 8001a0c:	1a18      	subs	r0, r3, r0
 8001a0e:	b2c0      	uxtb	r0, r0
	uint16 SymbStartPos = 4 + NumOfChar;
 8001a10:	78d6      	ldrb	r6, [r2, #3]
 8001a12:	3604      	adds	r6, #4
	uint8 CharW = calibri[Cursor + 4];
 8001a14:	1d03      	adds	r3, r0, #4
 8001a16:	5cd7      	ldrb	r7, [r2, r3]
	uint16 i, j, k = 0;
	uint32 CharBit = 0;

	for(i = 4; i < Cursor + 4; i++)
 8001a18:	2204      	movs	r2, #4
 8001a1a:	e001      	b.n	8001a20 <Symbol+0x28>
 8001a1c:	3201      	adds	r2, #1
 8001a1e:	b292      	uxth	r2, r2
 8001a20:	1cc3      	adds	r3, r0, #3
 8001a22:	4293      	cmp	r3, r2
 8001a24:	db1e      	blt.n	8001a64 <Symbol+0x6c>
	{
	   	if(calibri[i] <= 8)
 8001a26:	4b6f      	ldr	r3, [pc, #444]	; (8001be4 <Symbol+0x1ec>)
 8001a28:	5c9b      	ldrb	r3, [r3, r2]
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d801      	bhi.n	8001a32 <Symbol+0x3a>
	   	{
	   	   SymbStartPos += FontH;
 8001a2e:	4456      	add	r6, sl
 8001a30:	b2b6      	uxth	r6, r6
	   	}

	   	if(calibri[i] > 8 && calibri[i] <= 16)
 8001a32:	f1a3 0109 	sub.w	r1, r3, #9
 8001a36:	b2c9      	uxtb	r1, r1
 8001a38:	2907      	cmp	r1, #7
 8001a3a:	d802      	bhi.n	8001a42 <Symbol+0x4a>
		{
	   		SymbStartPos += FontH * 2;
 8001a3c:	eb06 064a 	add.w	r6, r6, sl, lsl #1
 8001a40:	b2b6      	uxth	r6, r6
		}

	   	if(calibri[i] > 16 && calibri[i] <= 24)
 8001a42:	f1a3 0111 	sub.w	r1, r3, #17
 8001a46:	b2c9      	uxtb	r1, r1
 8001a48:	2907      	cmp	r1, #7
 8001a4a:	d803      	bhi.n	8001a54 <Symbol+0x5c>
		{
	   		SymbStartPos += FontH * 3;
 8001a4c:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
 8001a50:	440e      	add	r6, r1
 8001a52:	b2b6      	uxth	r6, r6
		}
	   	if(calibri[i] > 24 && calibri[i] <= 32)
 8001a54:	3b19      	subs	r3, #25
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b07      	cmp	r3, #7
 8001a5a:	d8df      	bhi.n	8001a1c <Symbol+0x24>
		{
	   		SymbStartPos += FontH * 4;
 8001a5c:	eb06 068a 	add.w	r6, r6, sl, lsl #2
 8001a60:	b2b6      	uxth	r6, r6
 8001a62:	e7db      	b.n	8001a1c <Symbol+0x24>
		}
	}

	for(i = Y; i < Y + FontH; i++)
 8001a64:	f8dd b004 	ldr.w	fp, [sp, #4]
	uint32 CharBit = 0;
 8001a68:	2500      	movs	r5, #0
	uint16 i, j, k = 0;
 8001a6a:	46a8      	mov	r8, r5
 8001a6c:	f8cd a008 	str.w	sl, [sp, #8]
 8001a70:	e038      	b.n	8001ae4 <Symbol+0xec>
      		    if(i < DispHeight && j < DispWidth)
      		    {
      			    if(ColorType == Color565)
      			    { MemPoint(j,i,Get565Color(Color)); }

      			    if(ColorType == Color888)
 8001a72:	4b5d      	ldr	r3, [pc, #372]	; (8001be8 <Symbol+0x1f0>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d022      	beq.n	8001ac0 <Symbol+0xc8>
      			    { MemPoint(j,i,Color | 0xFF << 24); }

      			    if(ColorType == Color_A888)
 8001a7a:	4b5b      	ldr	r3, [pc, #364]	; (8001be8 <Symbol+0x1f0>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d026      	beq.n	8001ad0 <Symbol+0xd8>
      			    { MemPoint(j,i,Color); }
      	        }
            }
            CharBit = CharBit << 1;
 8001a82:	006d      	lsls	r5, r5, #1
		for(j = X; j < X + CharW; j++)
 8001a84:	3401      	adds	r4, #1
 8001a86:	b2a4      	uxth	r4, r4
 8001a88:	46a2      	mov	sl, r4
 8001a8a:	eb09 0307 	add.w	r3, r9, r7
 8001a8e:	429c      	cmp	r4, r3
 8001a90:	da24      	bge.n	8001adc <Symbol+0xe4>
            if((CharBit & 0x80000000) != 0)
 8001a92:	2d00      	cmp	r5, #0
 8001a94:	daf5      	bge.n	8001a82 <Symbol+0x8a>
      		    if(i < DispHeight && j < DispWidth)
 8001a96:	4b55      	ldr	r3, [pc, #340]	; (8001bec <Symbol+0x1f4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	459b      	cmp	fp, r3
 8001a9c:	d2f1      	bcs.n	8001a82 <Symbol+0x8a>
 8001a9e:	4b54      	ldr	r3, [pc, #336]	; (8001bf0 <Symbol+0x1f8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	429c      	cmp	r4, r3
 8001aa4:	d2ed      	bcs.n	8001a82 <Symbol+0x8a>
      			    if(ColorType == Color565)
 8001aa6:	4b50      	ldr	r3, [pc, #320]	; (8001be8 <Symbol+0x1f0>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1e1      	bne.n	8001a72 <Symbol+0x7a>
      			    { MemPoint(j,i,Get565Color(Color)); }
 8001aae:	9803      	ldr	r0, [sp, #12]
 8001ab0:	f7fe fde0 	bl	8000674 <Get565Color>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	9900      	ldr	r1, [sp, #0]
 8001ab8:	4650      	mov	r0, sl
 8001aba:	f7fe fd5d 	bl	8000578 <MemPoint>
 8001abe:	e7d8      	b.n	8001a72 <Symbol+0x7a>
      			    { MemPoint(j,i,Color | 0xFF << 24); }
 8001ac0:	9b03      	ldr	r3, [sp, #12]
 8001ac2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8001ac6:	9900      	ldr	r1, [sp, #0]
 8001ac8:	4650      	mov	r0, sl
 8001aca:	f7fe fd55 	bl	8000578 <MemPoint>
 8001ace:	e7d4      	b.n	8001a7a <Symbol+0x82>
      			    { MemPoint(j,i,Color); }
 8001ad0:	9a03      	ldr	r2, [sp, #12]
 8001ad2:	9900      	ldr	r1, [sp, #0]
 8001ad4:	4650      	mov	r0, sl
 8001ad6:	f7fe fd4f 	bl	8000578 <MemPoint>
 8001ada:	e7d2      	b.n	8001a82 <Symbol+0x8a>
	for(i = Y; i < Y + FontH; i++)
 8001adc:	f10b 0b01 	add.w	fp, fp, #1
 8001ae0:	fa1f fb8b 	uxth.w	fp, fp
 8001ae4:	f8cd b000 	str.w	fp, [sp]
 8001ae8:	9b01      	ldr	r3, [sp, #4]
 8001aea:	9a02      	ldr	r2, [sp, #8]
 8001aec:	4413      	add	r3, r2
 8001aee:	459b      	cmp	fp, r3
 8001af0:	da75      	bge.n	8001bde <Symbol+0x1e6>
		if(CharW <= 8)
 8001af2:	2f08      	cmp	r7, #8
 8001af4:	d80a      	bhi.n	8001b0c <Symbol+0x114>
			CharBit = Inverse(calibri[SymbStartPos + k]);
 8001af6:	eb06 0308 	add.w	r3, r6, r8
 8001afa:	4a3a      	ldr	r2, [pc, #232]	; (8001be4 <Symbol+0x1ec>)
 8001afc:	5cd0      	ldrb	r0, [r2, r3]
 8001afe:	f7fe fe23 	bl	8000748 <Inverse>
			CharBit = CharBit << 24;
 8001b02:	0605      	lsls	r5, r0, #24
			k++;
 8001b04:	f108 0801 	add.w	r8, r8, #1
 8001b08:	fa1f f888 	uxth.w	r8, r8
		if(CharW > 8 && CharW <= 16)
 8001b0c:	f1a7 0309 	sub.w	r3, r7, #9
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b07      	cmp	r3, #7
 8001b14:	d813      	bhi.n	8001b3e <Symbol+0x146>
			CharBit = Inverse(calibri[SymbStartPos + k]);
 8001b16:	eb08 0306 	add.w	r3, r8, r6
 8001b1a:	4d32      	ldr	r5, [pc, #200]	; (8001be4 <Symbol+0x1ec>)
 8001b1c:	5ce8      	ldrb	r0, [r5, r3]
 8001b1e:	f7fe fe13 	bl	8000748 <Inverse>
			k++;
 8001b22:	f108 0301 	add.w	r3, r8, #1
			CharBit = CharBit << 8;
 8001b26:	0204      	lsls	r4, r0, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 8001b28:	fa16 f383 	uxtah	r3, r6, r3
 8001b2c:	5ce8      	ldrb	r0, [r5, r3]
 8001b2e:	f7fe fe0b 	bl	8000748 <Inverse>
 8001b32:	4320      	orrs	r0, r4
			CharBit = CharBit << 16;
 8001b34:	0405      	lsls	r5, r0, #16
			k++;
 8001b36:	f108 0802 	add.w	r8, r8, #2
 8001b3a:	fa1f f888 	uxth.w	r8, r8
		if(CharW > 16 && CharW <= 24)
 8001b3e:	f1a7 0311 	sub.w	r3, r7, #17
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b07      	cmp	r3, #7
 8001b46:	d81d      	bhi.n	8001b84 <Symbol+0x18c>
			CharBit = Inverse(calibri[SymbStartPos + k]);
 8001b48:	eb08 0306 	add.w	r3, r8, r6
 8001b4c:	4d25      	ldr	r5, [pc, #148]	; (8001be4 <Symbol+0x1ec>)
 8001b4e:	5ce8      	ldrb	r0, [r5, r3]
 8001b50:	f7fe fdfa 	bl	8000748 <Inverse>
			k++;
 8001b54:	f108 0301 	add.w	r3, r8, #1
			CharBit = CharBit << 8;
 8001b58:	0204      	lsls	r4, r0, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 8001b5a:	fa16 f383 	uxtah	r3, r6, r3
 8001b5e:	5ce8      	ldrb	r0, [r5, r3]
 8001b60:	f7fe fdf2 	bl	8000748 <Inverse>
 8001b64:	4304      	orrs	r4, r0
			k++;
 8001b66:	f108 0302 	add.w	r3, r8, #2
			CharBit = CharBit << 8;
 8001b6a:	0224      	lsls	r4, r4, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 8001b6c:	fa16 f383 	uxtah	r3, r6, r3
 8001b70:	5ce8      	ldrb	r0, [r5, r3]
 8001b72:	f7fe fde9 	bl	8000748 <Inverse>
 8001b76:	ea40 0504 	orr.w	r5, r0, r4
			CharBit = CharBit << 8;
 8001b7a:	022d      	lsls	r5, r5, #8
			k++;
 8001b7c:	f108 0803 	add.w	r8, r8, #3
 8001b80:	fa1f f888 	uxth.w	r8, r8
		if(CharW > 24 && CharW <= 32)
 8001b84:	f1a7 0319 	sub.w	r3, r7, #25
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b07      	cmp	r3, #7
 8001b8c:	d825      	bhi.n	8001bda <Symbol+0x1e2>
			CharBit = Inverse(calibri[SymbStartPos + k]);
 8001b8e:	eb08 0306 	add.w	r3, r8, r6
 8001b92:	4d14      	ldr	r5, [pc, #80]	; (8001be4 <Symbol+0x1ec>)
 8001b94:	5ce8      	ldrb	r0, [r5, r3]
 8001b96:	f7fe fdd7 	bl	8000748 <Inverse>
			k++;
 8001b9a:	f108 0301 	add.w	r3, r8, #1
			CharBit = CharBit << 8;
 8001b9e:	0204      	lsls	r4, r0, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 8001ba0:	fa16 f383 	uxtah	r3, r6, r3
 8001ba4:	5ce8      	ldrb	r0, [r5, r3]
 8001ba6:	f7fe fdcf 	bl	8000748 <Inverse>
 8001baa:	4304      	orrs	r4, r0
			k++;
 8001bac:	f108 0302 	add.w	r3, r8, #2
			CharBit = CharBit << 8;
 8001bb0:	0224      	lsls	r4, r4, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 8001bb2:	fa16 f383 	uxtah	r3, r6, r3
 8001bb6:	5ce8      	ldrb	r0, [r5, r3]
 8001bb8:	f7fe fdc6 	bl	8000748 <Inverse>
 8001bbc:	4304      	orrs	r4, r0
			k++;
 8001bbe:	f108 0303 	add.w	r3, r8, #3
			CharBit = CharBit << 8;
 8001bc2:	0224      	lsls	r4, r4, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 8001bc4:	fa16 f383 	uxtah	r3, r6, r3
 8001bc8:	5ce8      	ldrb	r0, [r5, r3]
 8001bca:	f7fe fdbd 	bl	8000748 <Inverse>
 8001bce:	ea40 0504 	orr.w	r5, r0, r4
			k++;
 8001bd2:	f108 0804 	add.w	r8, r8, #4
 8001bd6:	fa1f f888 	uxth.w	r8, r8
		for(j = X; j < X + CharW; j++)
 8001bda:	464c      	mov	r4, r9
 8001bdc:	e754      	b.n	8001a88 <Symbol+0x90>
		}
	}
}
 8001bde:	b005      	add	sp, #20
 8001be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001be4:	080062ec 	.word	0x080062ec
 8001be8:	2000007c 	.word	0x2000007c
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	20000004 	.word	0x20000004

08001bf4 <Label>:
void Label (uint16 X, uint16 Y, uint32 Color, char String[])//++
{
 8001bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bf8:	b087      	sub	sp, #28
 8001bfa:	4607      	mov	r7, r0
 8001bfc:	4688      	mov	r8, r1
 8001bfe:	4691      	mov	r9, r2
 8001c00:	461e      	mov	r6, r3
  uint16 Nx = 0, Ny = 0;
 8001c02:	2500      	movs	r5, #0
 8001c04:	f8ad 5016 	strh.w	r5, [sp, #22]
 8001c08:	f8ad 5014 	strh.w	r5, [sp, #20]
  uint16 Sym = 0;
  uint8 ChW = 0;
 8001c0c:	f88d 5013 	strb.w	r5, [sp, #19]
  uint8 ChH = 0;
 8001c10:	f88d 5012 	strb.w	r5, [sp, #18]
  while(String[Sym]!=0)
 8001c14:	e001      	b.n	8001c1a <Label+0x26>
  {
  	Sym++;
 8001c16:	3501      	adds	r5, #1
 8001c18:	b2ad      	uxth	r5, r5
  while(String[Sym]!=0)
 8001c1a:	5d73      	ldrb	r3, [r6, r5]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1fa      	bne.n	8001c16 <Label+0x22>
  }
  for(uint16 i = 0; i<Sym; i++)
 8001c20:	2400      	movs	r4, #0
 8001c22:	e001      	b.n	8001c28 <Label+0x34>
 8001c24:	3401      	adds	r4, #1
 8001c26:	b2a4      	uxth	r4, r4
 8001c28:	42a5      	cmp	r5, r4
 8001c2a:	d920      	bls.n	8001c6e <Label+0x7a>
  {
  	if(String[i]>= 0x20 && String[i]<= 0xFF)
 8001c2c:	5d33      	ldrb	r3, [r6, r4]
 8001c2e:	2b1f      	cmp	r3, #31
 8001c30:	d9f8      	bls.n	8001c24 <Label+0x30>
  	{

  		Symbol(X, Y, Color, String[i]);
 8001c32:	464a      	mov	r2, r9
 8001c34:	4641      	mov	r1, r8
 8001c36:	4638      	mov	r0, r7
 8001c38:	f7ff fede 	bl	80019f8 <Symbol>
  		SymbolParameters(X, Y, &Nx, &Ny,&ChW,&ChH, String[i]);
 8001c3c:	5d33      	ldrb	r3, [r6, r4]
 8001c3e:	9302      	str	r3, [sp, #8]
 8001c40:	f10d 0312 	add.w	r3, sp, #18
 8001c44:	9301      	str	r3, [sp, #4]
 8001c46:	f10d 0313 	add.w	r3, sp, #19
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	ab05      	add	r3, sp, #20
 8001c4e:	f10d 0216 	add.w	r2, sp, #22
 8001c52:	4641      	mov	r1, r8
 8001c54:	4638      	mov	r0, r7
 8001c56:	f7fe fd3f 	bl	80006d8 <SymbolParameters>

  		if(X + ChW < DispWidth)
 8001c5a:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8001c5e:	4407      	add	r7, r0
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <Label+0x80>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	429f      	cmp	r7, r3
 8001c66:	d202      	bcs.n	8001c6e <Label+0x7a>
  		{
  		   X = Nx;
 8001c68:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8001c6c:	e7da      	b.n	8001c24 <Label+0x30>
  		}

  	}
  }

}
 8001c6e:	b007      	add	sp, #28
 8001c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c74:	20000004 	.word	0x20000004

08001c78 <TrackBar>:
{
  FramePanel(BColor,FloodColor,x1, x2, y1, y1+19, Thickness);
  Label(x1+2,y1+1, TextColor, Text);
}
void TrackBar(int16 XStart, int16 XEnd, int16 YStart, int16 YEnd, int16 StartPos, int16 StopPos, int16 CurrPos, int32 BorderColor, uint32 FloodColor, uint32 TrackerColor, uint8 Orient, uint8 Rad)
{
 8001c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	4605      	mov	r5, r0
 8001c80:	460f      	mov	r7, r1
 8001c82:	4690      	mov	r8, r2
 8001c84:	461c      	mov	r4, r3
 8001c86:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8001c8a:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8001c8e:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8001c92:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8001c96:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
	  float STPOS;
	  float POSCOUNT;
	  uint16 XPOS = 0, YPOS = 0;
	  uint16 POSN = CurrPos - StartPos;
 8001c9a:	fa1f fc8e 	uxth.w	ip, lr
 8001c9e:	b293      	uxth	r3, r2
 8001ca0:	ebac 0c03 	sub.w	ip, ip, r3
 8001ca4:	fa1f f38c 	uxth.w	r3, ip
 8001ca8:	ee07 3a90 	vmov	s15, r3

	  if(Orient == Horisontal)
 8001cac:	2900      	cmp	r1, #0
 8001cae:	d16c      	bne.n	8001d8a <TrackBar+0x112>
	  {
	      if(CurrPos == 1)
 8001cb0:	f1be 0f01 	cmp.w	lr, #1
 8001cb4:	d025      	beq.n	8001d02 <TrackBar+0x8a>
	  uint16 XPOS = 0, YPOS = 0;
 8001cb6:	f04f 0a00 	mov.w	sl, #0
	         STPOS = StopPos - StartPos;
	         POSCOUNT = (XEnd - XStart)/STPOS;
	         XPOS = (uint16)((POSN - StartPos * POSCOUNT)+ XStart + 1);
	      }

	      if(CurrPos == StartPos)
 8001cba:	4596      	cmp	lr, r2
 8001cbc:	d048      	beq.n	8001d50 <TrackBar+0xd8>
	         STPOS = StopPos - StartPos;
	         POSCOUNT = (XEnd - XStart)/STPOS;
	         XPOS = (uint16)((POSN * POSCOUNT)+ XStart);
	      }

	      if(CurrPos > StartPos)
 8001cbe:	4596      	cmp	lr, r2
 8001cc0:	f340 809c 	ble.w	8001dfc <TrackBar+0x184>
	      {
	         STPOS = StopPos - StartPos;
 8001cc4:	1a82      	subs	r2, r0, r2
 8001cc6:	ee07 2a10 	vmov	s14, r2
 8001cca:	eef8 6ac7 	vcvt.f32.s32	s13, s14
	         POSCOUNT = (XEnd - XStart)/STPOS;
 8001cce:	1b7b      	subs	r3, r7, r5
 8001cd0:	ee06 3a10 	vmov	s12, r3
 8001cd4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001cd8:	ee86 7a26 	vdiv.f32	s14, s12, s13
	         XPOS = (uint16)((POSN * POSCOUNT)+ XStart);
 8001cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ce4:	ee07 5a90 	vmov	s15, r5
 8001ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cf4:	ee17 3a90 	vmov	r3, s15
 8001cf8:	fa1f fa83 	uxth.w	sl, r3
	  uint16 XPOS = 0, YPOS = 0;
 8001cfc:	f04f 0900 	mov.w	r9, #0
 8001d00:	e062      	b.n	8001dc8 <TrackBar+0x150>
	         STPOS = StopPos - StartPos;
 8001d02:	1a83      	subs	r3, r0, r2
 8001d04:	ee06 3a10 	vmov	s12, r3
 8001d08:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	         POSCOUNT = (XEnd - XStart)/STPOS;
 8001d0c:	1b7b      	subs	r3, r7, r5
 8001d0e:	ee05 3a90 	vmov	s11, r3
 8001d12:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001d16:	ee85 7a86 	vdiv.f32	s14, s11, s12
	         XPOS = (uint16)((POSN - StartPos * POSCOUNT)+ XStart + 1);
 8001d1a:	ee06 2a90 	vmov	s13, r2
 8001d1e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001d22:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001d26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d2a:	ee77 6a66 	vsub.f32	s13, s14, s13
 8001d2e:	ee07 5a10 	vmov	s14, r5
 8001d32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d36:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001d3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d3e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001d42:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8001d46:	ee17 3a10 	vmov	r3, s14
 8001d4a:	fa1f fa83 	uxth.w	sl, r3
 8001d4e:	e7b4      	b.n	8001cba <TrackBar+0x42>
	         STPOS = StopPos - StartPos;
 8001d50:	1a83      	subs	r3, r0, r2
 8001d52:	ee06 3a10 	vmov	s12, r3
 8001d56:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	         POSCOUNT = (XEnd - XStart)/STPOS;
 8001d5a:	1b7b      	subs	r3, r7, r5
 8001d5c:	ee05 3a90 	vmov	s11, r3
 8001d60:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001d64:	eec5 6a86 	vdiv.f32	s13, s11, s12
	         XPOS = (uint16)((POSN * POSCOUNT)+ XStart);
 8001d68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d6c:	ee67 6a26 	vmul.f32	s13, s14, s13
 8001d70:	ee07 5a10 	vmov	s14, r5
 8001d74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d78:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001d7c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8001d80:	ee17 3a10 	vmov	r3, s14
 8001d84:	fa1f fa83 	uxth.w	sl, r3
 8001d88:	e799      	b.n	8001cbe <TrackBar+0x46>
	      }
	  }
	  else
	  {
	      STPOS = StopPos - StartPos;
 8001d8a:	1a83      	subs	r3, r0, r2
 8001d8c:	ee07 3a10 	vmov	s14, r3
 8001d90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	      POSCOUNT = (YEnd - YStart)/STPOS;
 8001d94:	eba4 0308 	sub.w	r3, r4, r8
 8001d98:	ee06 3a90 	vmov	s13, r3
 8001d9c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001da0:	ee86 6a87 	vdiv.f32	s12, s13, s14
	      YPOS = (uint16)(YEnd - (POSN * POSCOUNT));
 8001da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001da8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001dac:	ee07 4a10 	vmov	s14, r4
 8001db0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001db4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dbc:	ee17 3a90 	vmov	r3, s15
 8001dc0:	fa1f f983 	uxth.w	r9, r3
	  uint16 XPOS = 0, YPOS = 0;
 8001dc4:	f04f 0a00 	mov.w	sl, #0
	  }

	  if(Orient == Horisontal)
 8001dc8:	b9e9      	cbnz	r1, 8001e06 <TrackBar+0x18e>
	  {
	      FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,1);
 8001dca:	2301      	movs	r3, #1
 8001dcc:	9302      	str	r3, [sp, #8]
 8001dce:	9401      	str	r4, [sp, #4]
 8001dd0:	f8cd 8000 	str.w	r8, [sp]
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	462a      	mov	r2, r5
 8001dd8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001dda:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001ddc:	f7ff fbce 	bl	800157c <FramePanel>
	      FillCircle(XPOS,YStart + (YEnd - YStart) / 2, Rad, TrackerColor);
 8001de0:	ebb4 0408 	subs.w	r4, r4, r8
 8001de4:	d40d      	bmi.n	8001e02 <TrackBar+0x18a>
 8001de6:	eb08 0464 	add.w	r4, r8, r4, asr #1
 8001dea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001dec:	4632      	mov	r2, r6
 8001dee:	b2a1      	uxth	r1, r4
 8001df0:	4650      	mov	r0, sl
 8001df2:	f7ff f96a 	bl	80010ca <FillCircle>
	  else
	  {
		  FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,1);
		  FillCircle(XStart + ((XEnd - XStart) / 2),YPOS,Rad,TrackerColor);
	  }
}
 8001df6:	b004      	add	sp, #16
 8001df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  uint16 XPOS = 0, YPOS = 0;
 8001dfc:	f04f 0900 	mov.w	r9, #0
 8001e00:	e7e2      	b.n	8001dc8 <TrackBar+0x150>
	      FillCircle(XPOS,YStart + (YEnd - YStart) / 2, Rad, TrackerColor);
 8001e02:	3401      	adds	r4, #1
 8001e04:	e7ef      	b.n	8001de6 <TrackBar+0x16e>
		  FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,1);
 8001e06:	2301      	movs	r3, #1
 8001e08:	9302      	str	r3, [sp, #8]
 8001e0a:	9401      	str	r4, [sp, #4]
 8001e0c:	f8cd 8000 	str.w	r8, [sp]
 8001e10:	463b      	mov	r3, r7
 8001e12:	462a      	mov	r2, r5
 8001e14:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001e16:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001e18:	f7ff fbb0 	bl	800157c <FramePanel>
		  FillCircle(XStart + ((XEnd - XStart) / 2),YPOS,Rad,TrackerColor);
 8001e1c:	1b79      	subs	r1, r7, r5
 8001e1e:	d408      	bmi.n	8001e32 <TrackBar+0x1ba>
 8001e20:	eb05 0061 	add.w	r0, r5, r1, asr #1
 8001e24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001e26:	4632      	mov	r2, r6
 8001e28:	4649      	mov	r1, r9
 8001e2a:	b280      	uxth	r0, r0
 8001e2c:	f7ff f94d 	bl	80010ca <FillCircle>
}
 8001e30:	e7e1      	b.n	8001df6 <TrackBar+0x17e>
		  FillCircle(XStart + ((XEnd - XStart) / 2),YPOS,Rad,TrackerColor);
 8001e32:	3101      	adds	r1, #1
 8001e34:	e7f4      	b.n	8001e20 <TrackBar+0x1a8>

08001e36 <Form>:
void Form(uint16 x1, uint16 x2, uint16 y1, uint16 y2, uint16 y_S, uint16 Thickness, uint32 ColorL, uint32 ColorS, uint32 ColorW,uint32 ColorT,char FormName[])//++
{
 8001e36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e3a:	b087      	sub	sp, #28
 8001e3c:	4681      	mov	r9, r0
 8001e3e:	460f      	mov	r7, r1
 8001e40:	4616      	mov	r6, r2
 8001e42:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8001e46:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
  uint16 k = Thickness - 1,txty;
 8001e4a:	1e6c      	subs	r4, r5, #1
 8001e4c:	b2a4      	uxth	r4, r4
  txty = y1+((y1+y_S - y1)/2 - 8);
 8001e4e:	eb02 0168 	add.w	r1, r2, r8, asr #1
 8001e52:	b289      	uxth	r1, r1
 8001e54:	3908      	subs	r1, #8
 8001e56:	b28a      	uxth	r2, r1
 8001e58:	9205      	str	r2, [sp, #20]

  Fill_Rectangle(ColorW,x1,x2,y1,y2);
 8001e5a:	9303      	str	r3, [sp, #12]
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	4633      	mov	r3, r6
 8001e60:	463a      	mov	r2, r7
 8001e62:	4601      	mov	r1, r0
 8001e64:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001e66:	f7fe ff17 	bl	8000c98 <Fill_Rectangle>
  Fill_Rectangle(ColorS,x1,x2,y1,y1+y_S);
 8001e6a:	eb08 0306 	add.w	r3, r8, r6
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	4633      	mov	r3, r6
 8001e72:	463a      	mov	r2, r7
 8001e74:	4649      	mov	r1, r9
 8001e76:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8001e78:	f7fe ff0e 	bl	8000c98 <Fill_Rectangle>
  VLine(ColorL,x1,y1,y2,Thickness);
 8001e7c:	f8cd 9008 	str.w	r9, [sp, #8]
 8001e80:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 8001e84:	fa0f fb86 	sxth.w	fp, r6
 8001e88:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8001e8c:	b2ed      	uxtb	r5, r5
 8001e8e:	9500      	str	r5, [sp, #0]
 8001e90:	9004      	str	r0, [sp, #16]
 8001e92:	4603      	mov	r3, r0
 8001e94:	465a      	mov	r2, fp
 8001e96:	4651      	mov	r1, sl
 8001e98:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001e9a:	f7fe ff6f 	bl	8000d7c <VLine>
  VLine(ColorL,x2-k,y1,y2,Thickness);
 8001e9e:	eba7 0904 	sub.w	r9, r7, r4
 8001ea2:	fa0f f989 	sxth.w	r9, r9
 8001ea6:	9500      	str	r5, [sp, #0]
 8001ea8:	9b04      	ldr	r3, [sp, #16]
 8001eaa:	465a      	mov	r2, fp
 8001eac:	4649      	mov	r1, r9
 8001eae:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001eb0:	f7fe ff64 	bl	8000d7c <VLine>
  HLine(ColorL,x1,x2,y1,Thickness);
 8001eb4:	b23f      	sxth	r7, r7
 8001eb6:	9500      	str	r5, [sp, #0]
 8001eb8:	465b      	mov	r3, fp
 8001eba:	463a      	mov	r2, r7
 8001ebc:	4651      	mov	r1, sl
 8001ebe:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001ec0:	f7fe ff4e 	bl	8000d60 <HLine>
  HLine(ColorL,x1,x2,y2-k,Thickness);
 8001ec4:	9b03      	ldr	r3, [sp, #12]
 8001ec6:	1b1b      	subs	r3, r3, r4
 8001ec8:	9500      	str	r5, [sp, #0]
 8001eca:	b21b      	sxth	r3, r3
 8001ecc:	463a      	mov	r2, r7
 8001ece:	4651      	mov	r1, sl
 8001ed0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001ed2:	f7fe ff45 	bl	8000d60 <HLine>
  HLine(ColorL,x1+k,x2 - k,y_S+y1,Thickness);
 8001ed6:	9902      	ldr	r1, [sp, #8]
 8001ed8:	4421      	add	r1, r4
 8001eda:	b28f      	uxth	r7, r1
 8001edc:	eb08 0306 	add.w	r3, r8, r6
 8001ee0:	9500      	str	r5, [sp, #0]
 8001ee2:	b21b      	sxth	r3, r3
 8001ee4:	464a      	mov	r2, r9
 8001ee6:	b209      	sxth	r1, r1
 8001ee8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001eea:	f7fe ff39 	bl	8000d60 <HLine>
  Label(x1+k+2,txty+k,ColorT,FormName);
 8001eee:	9a05      	ldr	r2, [sp, #20]
 8001ef0:	18a1      	adds	r1, r4, r2
 8001ef2:	1cb8      	adds	r0, r7, #2
 8001ef4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001ef6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001ef8:	b289      	uxth	r1, r1
 8001efa:	b280      	uxth	r0, r0
 8001efc:	f7ff fe7a 	bl	8001bf4 <Label>
}
 8001f00:	b007      	add	sp, #28
 8001f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001f06 <Button>:
void Button(uint16 x1, uint16 x2, uint16 y1, uint16 y2, uint16 Thickness, uint32 BorderColor, uint32 BtColor, char Text[],uint32 TextColor)//++
{
 8001f06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	4680      	mov	r8, r0
 8001f0e:	4689      	mov	r9, r1
 8001f10:	4616      	mov	r6, r2
 8001f12:	461f      	mov	r7, r3
 8001f14:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
  uint16 txtX, txtY, g = 0;
  txtY = y1+((y2 - y1)/2 - 8);
 8001f18:	1a9d      	subs	r5, r3, r2
 8001f1a:	d429      	bmi.n	8001f70 <Button+0x6a>
 8001f1c:	eb06 0565 	add.w	r5, r6, r5, asr #1
 8001f20:	b2ad      	uxth	r5, r5
 8001f22:	3d08      	subs	r5, #8
 8001f24:	b2ad      	uxth	r5, r5
  g = SymbolLengthPixels(Text);
 8001f26:	4650      	mov	r0, sl
 8001f28:	f7fe fbf6 	bl	8000718 <SymbolLengthPixels>
 8001f2c:	b280      	uxth	r0, r0
  txtX = x1+((x2 - x1)/2)-(g/2);
 8001f2e:	ebb9 0c08 	subs.w	ip, r9, r8
 8001f32:	d41f      	bmi.n	8001f74 <Button+0x6e>
 8001f34:	eb08 046c 	add.w	r4, r8, ip, asr #1
 8001f38:	b2a4      	uxth	r4, r4
 8001f3a:	eba4 0450 	sub.w	r4, r4, r0, lsr #1
 8001f3e:	b2a4      	uxth	r4, r4
  FramePanel(BorderColor,BtColor,x1,x2,y1,y2,Thickness);
 8001f40:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001f44:	9302      	str	r3, [sp, #8]
 8001f46:	b23f      	sxth	r7, r7
 8001f48:	9701      	str	r7, [sp, #4]
 8001f4a:	b236      	sxth	r6, r6
 8001f4c:	9600      	str	r6, [sp, #0]
 8001f4e:	fa0f f389 	sxth.w	r3, r9
 8001f52:	fa0f f288 	sxth.w	r2, r8
 8001f56:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001f58:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001f5a:	f7ff fb0f 	bl	800157c <FramePanel>
  Label(txtX, txtY, TextColor,Text);
 8001f5e:	4653      	mov	r3, sl
 8001f60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001f62:	4629      	mov	r1, r5
 8001f64:	4620      	mov	r0, r4
 8001f66:	f7ff fe45 	bl	8001bf4 <Label>
}
 8001f6a:	b004      	add	sp, #16
 8001f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  txtY = y1+((y2 - y1)/2 - 8);
 8001f70:	3501      	adds	r5, #1
 8001f72:	e7d3      	b.n	8001f1c <Button+0x16>
  txtX = x1+((x2 - x1)/2)-(g/2);
 8001f74:	f10c 0c01 	add.w	ip, ip, #1
 8001f78:	e7dc      	b.n	8001f34 <Button+0x2e>
	...

08001f7c <LCD_FramePanel>:
}

/*6ой этап*/

void LCD_FramePanel()
{
 8001f7c:	b500      	push	{lr}
 8001f7e:	b085      	sub	sp, #20
   FramePanel(WindowFrameColor, WindowColor, 1, DispWidth, 1, DispHeight, WindowFrameThickness);
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <LCD_FramePanel+0x30>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	9302      	str	r3, [sp, #8]
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <LCD_FramePanel+0x34>)
 8001f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f8c:	9301      	str	r3, [sp, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	9200      	str	r2, [sp, #0]
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <LCD_FramePanel+0x38>)
 8001f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f98:	4907      	ldr	r1, [pc, #28]	; (8001fb8 <LCD_FramePanel+0x3c>)
 8001f9a:	6809      	ldr	r1, [r1, #0]
 8001f9c:	4807      	ldr	r0, [pc, #28]	; (8001fbc <LCD_FramePanel+0x40>)
 8001f9e:	6800      	ldr	r0, [r0, #0]
 8001fa0:	f7ff faec 	bl	800157c <FramePanel>
}
 8001fa4:	b005      	add	sp, #20
 8001fa6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001faa:	bf00      	nop
 8001fac:	200000b8 	.word	0x200000b8
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	20000004 	.word	0x20000004
 8001fb8:	200000b0 	.word	0x200000b0
 8001fbc:	200000b4 	.word	0x200000b4

08001fc0 <LCD_Button>:
void LCD_Form(char FormName[])
{
   Form(1, DispWidth, 1, DispHeight, 25, WindowFrameThickness, WindowFrameColor, WindowBarColor, WindowColor, WindowTextColor, FormName);
}
uint8 LCD_Button(uint16 x1, uint16 x2, uint16 y1, uint16 y2, char Text[])
{
 8001fc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fc4:	b087      	sub	sp, #28
 8001fc6:	4606      	mov	r6, r0
 8001fc8:	460f      	mov	r7, r1
 8001fca:	4690      	mov	r8, r2
 8001fcc:	4699      	mov	r9, r3
	uint8 TouchSt = isTouch();
 8001fce:	f7fe fc23 	bl	8000818 <isTouch>
 8001fd2:	4604      	mov	r4, r0
	uint8 RetVal = NotClicked;
	static uint8 isRange;

	if(CrStatus == Clicked)
 8001fd4:	4d2a      	ldr	r5, [pc, #168]	; (8002080 <LCD_Button+0xc0>)
 8001fd6:	f895 c000 	ldrb.w	ip, [r5]
 8001fda:	f1bc 0f01 	cmp.w	ip, #1
 8001fde:	d01c      	beq.n	800201a <LCD_Button+0x5a>
	   {
		   isRange = 0;
	   }
    }

    if(TouchSt == Unclicked && isRange == 1)
 8001fe0:	2c02      	cmp	r4, #2
 8001fe2:	d042      	beq.n	800206a <LCD_Button+0xaa>
	uint8 RetVal = NotClicked;
 8001fe4:	2300      	movs	r3, #0
	{
        RetVal = Unclicked;
        isRange = 0;
	}

	if(TouchSt == NotClicked)
 8001fe6:	b104      	cbz	r4, 8001fea <LCD_Button+0x2a>
 8001fe8:	461c      	mov	r4, r3
	{ RetVal = NotClicked; }

	Button(x1, x2, y1, y2, WindowFrameThickness, ButtonFrameColor, ButtonColor, Text, ButtonTextColor);
 8001fea:	4b26      	ldr	r3, [pc, #152]	; (8002084 <LCD_Button+0xc4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	9304      	str	r3, [sp, #16]
 8001ff0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001ff2:	9303      	str	r3, [sp, #12]
 8001ff4:	4b24      	ldr	r3, [pc, #144]	; (8002088 <LCD_Button+0xc8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	9302      	str	r3, [sp, #8]
 8001ffa:	4b24      	ldr	r3, [pc, #144]	; (800208c <LCD_Button+0xcc>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	4b23      	ldr	r3, [pc, #140]	; (8002090 <LCD_Button+0xd0>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	464b      	mov	r3, r9
 8002008:	4642      	mov	r2, r8
 800200a:	4639      	mov	r1, r7
 800200c:	4630      	mov	r0, r6
 800200e:	f7ff ff7a 	bl	8001f06 <Button>

	return RetVal;
}
 8002012:	4620      	mov	r0, r4
 8002014:	b007      	add	sp, #28
 8002016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	   if(isInRange(x1, x2, y1, y2) == Ok)
 800201a:	fa0f f389 	sxth.w	r3, r9
 800201e:	fa0f f288 	sxth.w	r2, r8
 8002022:	b239      	sxth	r1, r7
 8002024:	b230      	sxth	r0, r6
 8002026:	f7fe fcf1 	bl	8000a0c <isInRange>
 800202a:	2801      	cmp	r0, #1
 800202c:	d003      	beq.n	8002036 <LCD_Button+0x76>
		   isRange = 0;
 800202e:	4b19      	ldr	r3, [pc, #100]	; (8002094 <LCD_Button+0xd4>)
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
 8002034:	e7d4      	b.n	8001fe0 <LCD_Button+0x20>
	      if(TouchSt == Clicked)
 8002036:	2c01      	cmp	r4, #1
 8002038:	d1d2      	bne.n	8001fe0 <LCD_Button+0x20>
		      Button(x1, x2, y1, y2, WindowFrameThickness, ButtonFrameColor, ButtonSelectedColor, Text, ButtonTextColor);
 800203a:	4b12      	ldr	r3, [pc, #72]	; (8002084 <LCD_Button+0xc4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	9304      	str	r3, [sp, #16]
 8002040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002042:	9303      	str	r3, [sp, #12]
 8002044:	4b14      	ldr	r3, [pc, #80]	; (8002098 <LCD_Button+0xd8>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	9302      	str	r3, [sp, #8]
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <LCD_Button+0xcc>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <LCD_Button+0xd0>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	464b      	mov	r3, r9
 8002058:	4642      	mov	r2, r8
 800205a:	4639      	mov	r1, r7
 800205c:	4630      	mov	r0, r6
 800205e:	f7ff ff52 	bl	8001f06 <Button>
		      isRange = 1;
 8002062:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <LCD_Button+0xd4>)
 8002064:	2201      	movs	r2, #1
 8002066:	701a      	strb	r2, [r3, #0]
		      return Clicked;
 8002068:	e7d3      	b.n	8002012 <LCD_Button+0x52>
    if(TouchSt == Unclicked && isRange == 1)
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <LCD_Button+0xd4>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d001      	beq.n	8002076 <LCD_Button+0xb6>
	uint8 RetVal = NotClicked;
 8002072:	2300      	movs	r3, #0
 8002074:	e7b7      	b.n	8001fe6 <LCD_Button+0x26>
        isRange = 0;
 8002076:	4b07      	ldr	r3, [pc, #28]	; (8002094 <LCD_Button+0xd4>)
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
        RetVal = Unclicked;
 800207c:	4623      	mov	r3, r4
 800207e:	e7b2      	b.n	8001fe6 <LCD_Button+0x26>
 8002080:	20000093 	.word	0x20000093
 8002084:	20000078 	.word	0x20000078
 8002088:	2000006c 	.word	0x2000006c
 800208c:	20000070 	.word	0x20000070
 8002090:	200000b8 	.word	0x200000b8
 8002094:	200000c0 	.word	0x200000c0
 8002098:	20000074 	.word	0x20000074

0800209c <TS_IO_Read>:
extern I2C_HandleTypeDef hi2c3;
static ft5336_handle_TypeDef ft5336_handle = {FT5336_I2C_NOT_INITIALIZED, 0, 0};
static uint8_t tsOrientation;

uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800209c:	b500      	push	{lr}
 800209e:	b087      	sub	sp, #28
 80020a0:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	f88d 3017 	strb.w	r3, [sp, #23]
  HAL_I2C_Mem_Read(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &read_value, 1, 0x1000);
 80020a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ac:	9302      	str	r3, [sp, #8]
 80020ae:	2301      	movs	r3, #1
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	f10d 0117 	add.w	r1, sp, #23
 80020b6:	9100      	str	r1, [sp, #0]
 80020b8:	4601      	mov	r1, r0
 80020ba:	4804      	ldr	r0, [pc, #16]	; (80020cc <TS_IO_Read+0x30>)
 80020bc:	f002 fa24 	bl	8004508 <HAL_I2C_Mem_Read>
  return read_value;
}
 80020c0:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80020c4:	b007      	add	sp, #28
 80020c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80020ca:	bf00      	nop
 80020cc:	2003fd8c 	.word	0x2003fd8c

080020d0 <TS_IO_Write>:
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80020d0:	b500      	push	{lr}
 80020d2:	b087      	sub	sp, #28
 80020d4:	f88d 2017 	strb.w	r2, [sp, #23]
  HAL_StatusTypeDef status = HAL_OK;
  HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x1000);
 80020d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020dc:	9302      	str	r3, [sp, #8]
 80020de:	2301      	movs	r3, #1
 80020e0:	9301      	str	r3, [sp, #4]
 80020e2:	f10d 0217 	add.w	r2, sp, #23
 80020e6:	9200      	str	r2, [sp, #0]
 80020e8:	460a      	mov	r2, r1
 80020ea:	4601      	mov	r1, r0
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <TS_IO_Write+0x28>)
 80020ee:	f002 f935 	bl	800435c <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
  {}
}
 80020f2:	b007      	add	sp, #28
 80020f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80020f8:	2003fd8c 	.word	0x2003fd8c

080020fc <ft5336_TS_GetGestureID>:
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 80020fc:	b510      	push	{r4, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	460c      	mov	r4, r1
  volatile uint8_t ucReadData = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8002108:	2101      	movs	r1, #1
 800210a:	b2c0      	uxtb	r0, r0
 800210c:	f7ff ffc6 	bl	800209c <TS_IO_Read>
 8002110:	f88d 0007 	strb.w	r0, [sp, #7]
  *pGestureId = ucReadData;
 8002114:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002118:	6023      	str	r3, [r4, #0]

}
 800211a:	b002      	add	sp, #8
 800211c:	bd10      	pop	{r4, pc}
	...

08002120 <TS_GetTouchInfo>:
void TS_GetTouchInfo(uint16_t DeviceAddr, uint32_t touchIdx, uint32_t * pWeight, uint32_t * pArea, uint32_t * pEvent)
{
 8002120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	461d      	mov	r5, r3
  volatile uint8_t ucReadData = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t regAddressXHigh = 0;
  uint8_t regAddressPWeight = 0;
  uint8_t regAddressPMisc = 0;
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800212e:	4b33      	ldr	r3, [pc, #204]	; (80021fc <TS_GetTouchInfo+0xdc>)
 8002130:	785b      	ldrb	r3, [r3, #1]
 8002132:	428b      	cmp	r3, r1
 8002134:	d95e      	bls.n	80021f4 <TS_GetTouchInfo+0xd4>
 8002136:	4616      	mov	r6, r2
  {
	switch(touchIdx)
 8002138:	2909      	cmp	r1, #9
 800213a:	d806      	bhi.n	800214a <TS_GetTouchInfo+0x2a>
 800213c:	e8df f001 	tbb	[pc, r1]
 8002140:	130e0936 	.word	0x130e0936
 8002144:	27221d18 	.word	0x27221d18
 8002148:	312c      	.short	0x312c
 800214a:	2700      	movs	r7, #0
 800214c:	46b8      	mov	r8, r7
 800214e:	4639      	mov	r1, r7
 8002150:	e030      	b.n	80021b4 <TS_GetTouchInfo+0x94>
	    regAddressPMisc = FT5336_P1_MISC_REG;
	    break;
	  case 1 :
	    regAddressXHigh = FT5336_P2_XH_REG;
	    regAddressPWeight = FT5336_P2_WEIGHT_REG;
	    regAddressPMisc = FT5336_P2_MISC_REG;
 8002152:	270e      	movs	r7, #14
	    regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8002154:	f04f 080d 	mov.w	r8, #13
	    regAddressXHigh = FT5336_P2_XH_REG;
 8002158:	2109      	movs	r1, #9
	    break;
 800215a:	e02b      	b.n	80021b4 <TS_GetTouchInfo+0x94>
	  case 2 :
	    regAddressXHigh = FT5336_P3_XH_REG;
	    regAddressPWeight = FT5336_P3_WEIGHT_REG;
	    regAddressPMisc = FT5336_P3_MISC_REG;
 800215c:	2714      	movs	r7, #20
	    regAddressPWeight = FT5336_P3_WEIGHT_REG;
 800215e:	f04f 0813 	mov.w	r8, #19
	    regAddressXHigh = FT5336_P3_XH_REG;
 8002162:	210f      	movs	r1, #15
	    break;
 8002164:	e026      	b.n	80021b4 <TS_GetTouchInfo+0x94>
	  case 3 :
	    regAddressXHigh = FT5336_P4_XH_REG;
	    regAddressPWeight = FT5336_P4_WEIGHT_REG;
	    regAddressPMisc = FT5336_P4_MISC_REG;
 8002166:	271a      	movs	r7, #26
	    regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8002168:	f04f 0819 	mov.w	r8, #25
	    regAddressXHigh = FT5336_P4_XH_REG;
 800216c:	2115      	movs	r1, #21
	    break;
 800216e:	e021      	b.n	80021b4 <TS_GetTouchInfo+0x94>
	  case 4 :
	    regAddressXHigh = FT5336_P5_XH_REG;
	    regAddressPWeight = FT5336_P5_WEIGHT_REG;
	    regAddressPMisc = FT5336_P5_MISC_REG;
 8002170:	2720      	movs	r7, #32
	    regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8002172:	f04f 081f 	mov.w	r8, #31
	    regAddressXHigh = FT5336_P5_XH_REG;
 8002176:	211b      	movs	r1, #27
	    break;
 8002178:	e01c      	b.n	80021b4 <TS_GetTouchInfo+0x94>
	  case 5 :
	    regAddressXHigh = FT5336_P6_XH_REG;
	    regAddressPWeight = FT5336_P6_WEIGHT_REG;
	    regAddressPMisc = FT5336_P6_MISC_REG;
 800217a:	2726      	movs	r7, #38	; 0x26
	    regAddressPWeight = FT5336_P6_WEIGHT_REG;
 800217c:	f04f 0825 	mov.w	r8, #37	; 0x25
	    regAddressXHigh = FT5336_P6_XH_REG;
 8002180:	2121      	movs	r1, #33	; 0x21
	    break;
 8002182:	e017      	b.n	80021b4 <TS_GetTouchInfo+0x94>
	  case 6 :
	    regAddressXHigh = FT5336_P7_XH_REG;
	    regAddressPWeight = FT5336_P7_WEIGHT_REG;
	    regAddressPMisc = FT5336_P7_MISC_REG;
 8002184:	272c      	movs	r7, #44	; 0x2c
	    regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8002186:	f04f 082b 	mov.w	r8, #43	; 0x2b
	    regAddressXHigh = FT5336_P7_XH_REG;
 800218a:	2127      	movs	r1, #39	; 0x27
	    break;
 800218c:	e012      	b.n	80021b4 <TS_GetTouchInfo+0x94>
	  case 7 :
	    regAddressXHigh = FT5336_P8_XH_REG;
	    regAddressPWeight = FT5336_P8_WEIGHT_REG;
	    regAddressPMisc = FT5336_P8_MISC_REG;
 800218e:	2732      	movs	r7, #50	; 0x32
	    regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8002190:	f04f 0831 	mov.w	r8, #49	; 0x31
	    regAddressXHigh = FT5336_P8_XH_REG;
 8002194:	212d      	movs	r1, #45	; 0x2d
	    break;
 8002196:	e00d      	b.n	80021b4 <TS_GetTouchInfo+0x94>
	  case 8 :
	    regAddressXHigh = FT5336_P9_XH_REG;
	    regAddressPWeight = FT5336_P9_WEIGHT_REG;
	    regAddressPMisc = FT5336_P9_MISC_REG;
 8002198:	2738      	movs	r7, #56	; 0x38
	    regAddressPWeight = FT5336_P9_WEIGHT_REG;
 800219a:	f04f 0837 	mov.w	r8, #55	; 0x37
	    regAddressXHigh = FT5336_P9_XH_REG;
 800219e:	2133      	movs	r1, #51	; 0x33
	    break;
 80021a0:	e008      	b.n	80021b4 <TS_GetTouchInfo+0x94>
	  case 9 :
	    regAddressXHigh = FT5336_P10_XH_REG;
	    regAddressPWeight = FT5336_P10_WEIGHT_REG;
	    regAddressPMisc = FT5336_P10_MISC_REG;
 80021a2:	273e      	movs	r7, #62	; 0x3e
	    regAddressPWeight = FT5336_P10_WEIGHT_REG;
 80021a4:	f04f 083d 	mov.w	r8, #61	; 0x3d
	    regAddressXHigh = FT5336_P10_XH_REG;
 80021a8:	2139      	movs	r1, #57	; 0x39
	    break;
 80021aa:	e003      	b.n	80021b4 <TS_GetTouchInfo+0x94>
	    regAddressPMisc = FT5336_P1_MISC_REG;
 80021ac:	2708      	movs	r7, #8
	    regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80021ae:	f04f 0807 	mov.w	r8, #7
	    regAddressXHigh = FT5336_P1_XH_REG;
 80021b2:	2103      	movs	r1, #3
	  default :
	    break;
	}
	ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80021b4:	b2c4      	uxtb	r4, r0
 80021b6:	4620      	mov	r0, r4
 80021b8:	f7ff ff70 	bl	800209c <TS_IO_Read>
 80021bc:	f88d 0007 	strb.w	r0, [sp, #7]
	* pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80021c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80021c4:	099b      	lsrs	r3, r3, #6
 80021c6:	9a08      	ldr	r2, [sp, #32]
 80021c8:	6013      	str	r3, [r2, #0]
	ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80021ca:	4641      	mov	r1, r8
 80021cc:	4620      	mov	r0, r4
 80021ce:	f7ff ff65 	bl	800209c <TS_IO_Read>
 80021d2:	f88d 0007 	strb.w	r0, [sp, #7]
	* pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80021d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80021da:	6033      	str	r3, [r6, #0]
	ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80021dc:	4639      	mov	r1, r7
 80021de:	4620      	mov	r0, r4
 80021e0:	f7ff ff5c 	bl	800209c <TS_IO_Read>
 80021e4:	f88d 0007 	strb.w	r0, [sp, #7]
	* pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80021e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	602b      	str	r3, [r5, #0]
  }
}
 80021f4:	b002      	add	sp, #8
 80021f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021fa:	bf00      	nop
 80021fc:	200000f4 	.word	0x200000f4

08002200 <Touch_ReadID>:
uint16_t Touch_ReadID(uint16_t DeviceAddr)
{
 8002200:	b570      	push	{r4, r5, r6, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	4606      	mov	r6, r0
  volatile uint8_t ucReadId = 0;
 8002206:	2400      	movs	r4, #0
 8002208:	f88d 4007 	strb.w	r4, [sp, #7]
  uint8_t nbReadAttempts = 0;
  int8_t bFoundDevice = 0;
 800220c:	4625      	mov	r5, r4
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800220e:	e001      	b.n	8002214 <Touch_ReadID+0x14>
 8002210:	3401      	adds	r4, #1
 8002212:	b2e4      	uxtb	r4, r4
 8002214:	f085 0301 	eor.w	r3, r5, #1
 8002218:	2c02      	cmp	r4, #2
 800221a:	bf8c      	ite	hi
 800221c:	2300      	movhi	r3, #0
 800221e:	f003 0301 	andls.w	r3, r3, #1
 8002222:	b163      	cbz	r3, 800223e <Touch_ReadID+0x3e>
  {
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8002224:	21a8      	movs	r1, #168	; 0xa8
 8002226:	b2f0      	uxtb	r0, r6
 8002228:	f7ff ff38 	bl	800209c <TS_IO_Read>
 800222c:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 8002230:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b51      	cmp	r3, #81	; 0x51
 8002238:	d1ea      	bne.n	8002210 <Touch_ReadID+0x10>
    {
      bFoundDevice = 1;
 800223a:	2501      	movs	r5, #1
 800223c:	e7e8      	b.n	8002210 <Touch_ReadID+0x10>
    }
  }
  return (ucReadId);
 800223e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8002242:	b002      	add	sp, #8
 8002244:	bd70      	pop	{r4, r5, r6, pc}
	...

08002248 <TS_DetectTouch>:
uint8_t TS_DetectTouch(uint16_t DeviceAddr)
{
 8002248:	b500      	push	{lr}
 800224a:	b083      	sub	sp, #12
  volatile uint8_t nbTouch = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	f88d 3007 	strb.w	r3, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8002252:	2102      	movs	r1, #2
 8002254:	b2c0      	uxtb	r0, r0
 8002256:	f7ff ff21 	bl	800209c <TS_IO_Read>
 800225a:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 800225e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800226a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b05      	cmp	r3, #5
 8002272:	d902      	bls.n	800227a <TS_DetectTouch+0x32>
  {
    nbTouch = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  ft5336_handle.currActiveTouchNb = nbTouch;
 800227a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <TS_DetectTouch+0x48>)
 8002280:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8002282:	2200      	movs	r2, #0
 8002284:	709a      	strb	r2, [r3, #2]
  return (nbTouch);
 8002286:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800228a:	b003      	add	sp, #12
 800228c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002290:	200000f4 	.word	0x200000f4

08002294 <TS_GetXY>:
void TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	4615      	mov	r5, r2
  volatile uint8_t ucReadData = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	f88d 3007 	strb.w	r3, [sp, #7]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
  uint8_t regAddressXHigh = 0;
  uint8_t regAddressYLow = 0;
  uint8_t regAddressYHigh = 0;
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80022a2:	4a4f      	ldr	r2, [pc, #316]	; (80023e0 <TS_GetXY+0x14c>)
 80022a4:	7893      	ldrb	r3, [r2, #2]
 80022a6:	7852      	ldrb	r2, [r2, #1]
 80022a8:	4293      	cmp	r3, r2
 80022aa:	f080 8096 	bcs.w	80023da <TS_GetXY+0x146>
 80022ae:	460f      	mov	r7, r1
  {
	switch(ft5336_handle.currActiveTouchIdx)
 80022b0:	2b09      	cmp	r3, #9
 80022b2:	d806      	bhi.n	80022c2 <TS_GetXY+0x2e>
 80022b4:	e8df f003 	tbb	[pc, r3]
 80022b8:	1b130b53 	.word	0x1b130b53
 80022bc:	3b332b23 	.word	0x3b332b23
 80022c0:	4b43      	.short	0x4b43
 80022c2:	f04f 0800 	mov.w	r8, #0
 80022c6:	46c1      	mov	r9, r8
 80022c8:	46c2      	mov	sl, r8
 80022ca:	4641      	mov	r1, r8
 80022cc:	e04e      	b.n	800236c <TS_GetXY+0xd8>

	  case 1 :
	    regAddressXLow = FT5336_P2_XL_REG;
	    regAddressXHigh = FT5336_P2_XH_REG;
	    regAddressYLow = FT5336_P2_YL_REG;
	    regAddressYHigh = FT5336_P2_YH_REG;
 80022ce:	f04f 080b 	mov.w	r8, #11
	    regAddressYLow = FT5336_P2_YL_REG;
 80022d2:	f04f 090c 	mov.w	r9, #12
	    regAddressXHigh = FT5336_P2_XH_REG;
 80022d6:	f04f 0a09 	mov.w	sl, #9
	    regAddressXLow = FT5336_P2_XL_REG;
 80022da:	210a      	movs	r1, #10
	    break;
 80022dc:	e046      	b.n	800236c <TS_GetXY+0xd8>

	  case 2 :
	    regAddressXLow = FT5336_P3_XL_REG;
	    regAddressXHigh = FT5336_P3_XH_REG;
	    regAddressYLow = FT5336_P3_YL_REG;
	    regAddressYHigh = FT5336_P3_YH_REG;
 80022de:	f04f 0811 	mov.w	r8, #17
	    regAddressYLow = FT5336_P3_YL_REG;
 80022e2:	f04f 0912 	mov.w	r9, #18
	    regAddressXHigh = FT5336_P3_XH_REG;
 80022e6:	f04f 0a0f 	mov.w	sl, #15
	    regAddressXLow = FT5336_P3_XL_REG;
 80022ea:	2110      	movs	r1, #16
	    break;
 80022ec:	e03e      	b.n	800236c <TS_GetXY+0xd8>

	  case 3 :
	    regAddressXLow = FT5336_P4_XL_REG;
	    regAddressXHigh = FT5336_P4_XH_REG;
	    regAddressYLow = FT5336_P4_YL_REG;
	    regAddressYHigh = FT5336_P4_YH_REG;
 80022ee:	f04f 0817 	mov.w	r8, #23
	    regAddressYLow = FT5336_P4_YL_REG;
 80022f2:	f04f 0918 	mov.w	r9, #24
	    regAddressXHigh = FT5336_P4_XH_REG;
 80022f6:	f04f 0a15 	mov.w	sl, #21
	    regAddressXLow = FT5336_P4_XL_REG;
 80022fa:	2116      	movs	r1, #22
	    break;
 80022fc:	e036      	b.n	800236c <TS_GetXY+0xd8>

	  case 4 :
	    regAddressXLow = FT5336_P5_XL_REG;
	    regAddressXHigh = FT5336_P5_XH_REG;
	    regAddressYLow = FT5336_P5_YL_REG;
	    regAddressYHigh = FT5336_P5_YH_REG;
 80022fe:	f04f 081d 	mov.w	r8, #29
	    regAddressYLow = FT5336_P5_YL_REG;
 8002302:	f04f 091e 	mov.w	r9, #30
	    regAddressXHigh = FT5336_P5_XH_REG;
 8002306:	f04f 0a1b 	mov.w	sl, #27
	    regAddressXLow = FT5336_P5_XL_REG;
 800230a:	211c      	movs	r1, #28
	    break;
 800230c:	e02e      	b.n	800236c <TS_GetXY+0xd8>

	  case 5 :
	    regAddressXLow = FT5336_P6_XL_REG;
	    regAddressXHigh = FT5336_P6_XH_REG;
	    regAddressYLow = FT5336_P6_YL_REG;
	    regAddressYHigh = FT5336_P6_YH_REG;
 800230e:	f04f 0823 	mov.w	r8, #35	; 0x23
	    regAddressYLow = FT5336_P6_YL_REG;
 8002312:	f04f 0924 	mov.w	r9, #36	; 0x24
	    regAddressXHigh = FT5336_P6_XH_REG;
 8002316:	f04f 0a21 	mov.w	sl, #33	; 0x21
	    regAddressXLow = FT5336_P6_XL_REG;
 800231a:	2122      	movs	r1, #34	; 0x22
	    break;
 800231c:	e026      	b.n	800236c <TS_GetXY+0xd8>

	  case 6 :
	    regAddressXLow = FT5336_P7_XL_REG;
	    regAddressXHigh = FT5336_P7_XH_REG;
	    regAddressYLow = FT5336_P7_YL_REG;
	    regAddressYHigh = FT5336_P7_YH_REG;
 800231e:	f04f 0829 	mov.w	r8, #41	; 0x29
	    regAddressYLow = FT5336_P7_YL_REG;
 8002322:	f04f 092a 	mov.w	r9, #42	; 0x2a
	    regAddressXHigh = FT5336_P7_XH_REG;
 8002326:	f04f 0a27 	mov.w	sl, #39	; 0x27
	    regAddressXLow = FT5336_P7_XL_REG;
 800232a:	2128      	movs	r1, #40	; 0x28
	    break;
 800232c:	e01e      	b.n	800236c <TS_GetXY+0xd8>

	  case 7 :
	    regAddressXLow = FT5336_P8_XL_REG;
	    regAddressXHigh = FT5336_P8_XH_REG;
	    regAddressYLow = FT5336_P8_YL_REG;
	    regAddressYHigh = FT5336_P8_YH_REG;
 800232e:	f04f 082f 	mov.w	r8, #47	; 0x2f
	    regAddressYLow = FT5336_P8_YL_REG;
 8002332:	f04f 0930 	mov.w	r9, #48	; 0x30
	    regAddressXHigh = FT5336_P8_XH_REG;
 8002336:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
	    regAddressXLow = FT5336_P8_XL_REG;
 800233a:	212e      	movs	r1, #46	; 0x2e
	    break;
 800233c:	e016      	b.n	800236c <TS_GetXY+0xd8>

	  case 8 :
	    regAddressXLow = FT5336_P9_XL_REG;
	    regAddressXHigh = FT5336_P9_XH_REG;
	    regAddressYLow = FT5336_P9_YL_REG;
	    regAddressYHigh = FT5336_P9_YH_REG;
 800233e:	f04f 0835 	mov.w	r8, #53	; 0x35
	    regAddressYLow = FT5336_P9_YL_REG;
 8002342:	f04f 0936 	mov.w	r9, #54	; 0x36
	    regAddressXHigh = FT5336_P9_XH_REG;
 8002346:	f04f 0a33 	mov.w	sl, #51	; 0x33
	    regAddressXLow = FT5336_P9_XL_REG;
 800234a:	2134      	movs	r1, #52	; 0x34
	    break;
 800234c:	e00e      	b.n	800236c <TS_GetXY+0xd8>

	  case 9 :
	    regAddressXLow = FT5336_P10_XL_REG;
	    regAddressXHigh = FT5336_P10_XH_REG;
	    regAddressYLow = FT5336_P10_YL_REG;
	    regAddressYHigh = FT5336_P10_YH_REG;
 800234e:	f04f 083b 	mov.w	r8, #59	; 0x3b
	    regAddressYLow = FT5336_P10_YL_REG;
 8002352:	f04f 093c 	mov.w	r9, #60	; 0x3c
	    regAddressXHigh = FT5336_P10_XH_REG;
 8002356:	f04f 0a39 	mov.w	sl, #57	; 0x39
	    regAddressXLow = FT5336_P10_XL_REG;
 800235a:	213a      	movs	r1, #58	; 0x3a
	    break;
 800235c:	e006      	b.n	800236c <TS_GetXY+0xd8>
	    regAddressYHigh = FT5336_P1_YH_REG;
 800235e:	f04f 0805 	mov.w	r8, #5
	    regAddressYLow = FT5336_P1_YL_REG;
 8002362:	f04f 0906 	mov.w	r9, #6
	    regAddressXHigh = FT5336_P1_XH_REG;
 8002366:	f04f 0a03 	mov.w	sl, #3
	    regAddressXLow = FT5336_P1_XL_REG;
 800236a:	2104      	movs	r1, #4

	  default :

	    break;
	}
	ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800236c:	b2c4      	uxtb	r4, r0
 800236e:	4620      	mov	r0, r4
 8002370:	f7ff fe94 	bl	800209c <TS_IO_Read>
 8002374:	f88d 0007 	strb.w	r0, [sp, #7]
	coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8002378:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800237c:	4e19      	ldr	r6, [pc, #100]	; (80023e4 <TS_GetXY+0x150>)
 800237e:	8033      	strh	r3, [r6, #0]
	ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8002380:	4651      	mov	r1, sl
 8002382:	4620      	mov	r0, r4
 8002384:	f7ff fe8a 	bl	800209c <TS_IO_Read>
 8002388:	f88d 0007 	strb.w	r0, [sp, #7]
	coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800238c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002390:	021b      	lsls	r3, r3, #8
 8002392:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002396:	8832      	ldrh	r2, [r6, #0]
 8002398:	4313      	orrs	r3, r2
 800239a:	b29b      	uxth	r3, r3
 800239c:	8033      	strh	r3, [r6, #0]
	*X = coord;
 800239e:	803b      	strh	r3, [r7, #0]
	ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80023a0:	4649      	mov	r1, r9
 80023a2:	4620      	mov	r0, r4
 80023a4:	f7ff fe7a 	bl	800209c <TS_IO_Read>
 80023a8:	f88d 0007 	strb.w	r0, [sp, #7]
	coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80023ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80023b0:	8033      	strh	r3, [r6, #0]
	ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80023b2:	4641      	mov	r1, r8
 80023b4:	4620      	mov	r0, r4
 80023b6:	f7ff fe71 	bl	800209c <TS_IO_Read>
 80023ba:	f88d 0007 	strb.w	r0, [sp, #7]
	coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80023be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80023c8:	8832      	ldrh	r2, [r6, #0]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	8033      	strh	r3, [r6, #0]
	*Y = coord;
 80023d0:	802b      	strh	r3, [r5, #0]
	ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80023d2:	4a03      	ldr	r2, [pc, #12]	; (80023e0 <TS_GetXY+0x14c>)
 80023d4:	7893      	ldrb	r3, [r2, #2]
 80023d6:	3301      	adds	r3, #1
 80023d8:	7093      	strb	r3, [r2, #2]
  }
}
 80023da:	b002      	add	sp, #8
 80023dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023e0:	200000f4 	.word	0x200000f4
 80023e4:	200000f0 	.word	0x200000f0

080023e8 <TS_Get_GestureId>:
uint8_t TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80023e8:	b510      	push	{r4, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	4604      	mov	r4, r0
  uint32_t gestureId = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	9301      	str	r3, [sp, #4]
  uint8_t ts_status = TS_OK;
  ft5336_TS_GetGestureID(TS_I2C_ADDRESS, &gestureId);
 80023f2:	a901      	add	r1, sp, #4
 80023f4:	2070      	movs	r0, #112	; 0x70
 80023f6:	f7ff fe81 	bl	80020fc <ft5336_TS_GetGestureID>
  switch(gestureId)
 80023fa:	9b01      	ldr	r3, [sp, #4]
 80023fc:	2b1c      	cmp	r3, #28
 80023fe:	d812      	bhi.n	8002426 <TS_Get_GestureId+0x3e>
 8002400:	2b1c      	cmp	r3, #28
 8002402:	d831      	bhi.n	8002468 <TS_Get_GestureId+0x80>
 8002404:	e8df f003 	tbb	[pc, r3]
 8002408:	30303019 	.word	0x30303019
 800240c:	30303030 	.word	0x30303030
 8002410:	30303030 	.word	0x30303030
 8002414:	30303030 	.word	0x30303030
 8002418:	3030301c 	.word	0x3030301c
 800241c:	30303020 	.word	0x30303020
 8002420:	30303024 	.word	0x30303024
 8002424:	28          	.byte	0x28
 8002425:	00          	.byte	0x00
 8002426:	2b40      	cmp	r3, #64	; 0x40
 8002428:	d01a      	beq.n	8002460 <TS_Get_GestureId+0x78>
 800242a:	2b49      	cmp	r3, #73	; 0x49
 800242c:	d103      	bne.n	8002436 <TS_Get_GestureId+0x4e>
      break;
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
      break;
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800242e:	2306      	movs	r3, #6
 8002430:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t ts_status = TS_OK;
 8002432:	2000      	movs	r0, #0
      break;
 8002434:	e019      	b.n	800246a <TS_Get_GestureId+0x82>
  switch(gestureId)
 8002436:	2001      	movs	r0, #1
 8002438:	e017      	b.n	800246a <TS_Get_GestureId+0x82>
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800243a:	2000      	movs	r0, #0
 800243c:	62a0      	str	r0, [r4, #40]	; 0x28
      break;
 800243e:	e014      	b.n	800246a <TS_Get_GestureId+0x82>
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8002440:	2301      	movs	r3, #1
 8002442:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t ts_status = TS_OK;
 8002444:	2000      	movs	r0, #0
      break;
 8002446:	e010      	b.n	800246a <TS_Get_GestureId+0x82>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8002448:	2302      	movs	r3, #2
 800244a:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t ts_status = TS_OK;
 800244c:	2000      	movs	r0, #0
      break;
 800244e:	e00c      	b.n	800246a <TS_Get_GestureId+0x82>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8002450:	2303      	movs	r3, #3
 8002452:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t ts_status = TS_OK;
 8002454:	2000      	movs	r0, #0
      break;
 8002456:	e008      	b.n	800246a <TS_Get_GestureId+0x82>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8002458:	2304      	movs	r3, #4
 800245a:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t ts_status = TS_OK;
 800245c:	2000      	movs	r0, #0
      break;
 800245e:	e004      	b.n	800246a <TS_Get_GestureId+0x82>
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8002460:	2305      	movs	r3, #5
 8002462:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t ts_status = TS_OK;
 8002464:	2000      	movs	r0, #0
      break;
 8002466:	e000      	b.n	800246a <TS_Get_GestureId+0x82>
  switch(gestureId)
 8002468:	2001      	movs	r0, #1
    default :
      ts_status = TS_ERROR;
      break;
  } /* of switch(gestureId) */
  return(ts_status);
}
 800246a:	b002      	add	sp, #8
 800246c:	bd10      	pop	{r4, pc}
	...

08002470 <TS_GetState>:
uint8_t TS_GetState(TS_StateTypeDef *TS_State)
{
 8002470:	b530      	push	{r4, r5, lr}
 8002472:	b093      	sub	sp, #76	; 0x4c
 8002474:	4605      	mov	r5, r0
  uint16_t brute_x[TS_MAX_NB_TOUCH];
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
  uint32_t weight = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	9305      	str	r3, [sp, #20]
  uint32_t area = 0;
 800247a:	9304      	str	r3, [sp, #16]
  uint32_t event = 0;
 800247c:	9303      	str	r3, [sp, #12]
  TS_State->touchDetected = TS_DetectTouch(TS_I2C_ADDRESS);
 800247e:	2070      	movs	r0, #112	; 0x70
 8002480:	f7ff fee2 	bl	8002248 <TS_DetectTouch>
 8002484:	7028      	strb	r0, [r5, #0]
  if(TS_State->touchDetected)
 8002486:	2800      	cmp	r0, #0
 8002488:	f000 80a9 	beq.w	80025de <TS_GetState+0x16e>
  {
	for(index=0; index < TS_State->touchDetected; index++)
 800248c:	2400      	movs	r4, #0
 800248e:	e017      	b.n	80024c0 <TS_GetState+0x50>
	{
	  TS_GetXY(TS_I2C_ADDRESS, &(brute_x[index]), &(brute_y[index]));
	  if(tsOrientation == TS_SWAP_NONE)
	  {
		x[index] = brute_x[index];
 8002490:	aa12      	add	r2, sp, #72	; 0x48
 8002492:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8002496:	f832 1c24 	ldrh.w	r1, [r2, #-36]
 800249a:	f822 1c0c 	strh.w	r1, [r2, #-12]
		y[index] = brute_y[index];
 800249e:	f832 1c30 	ldrh.w	r1, [r2, #-48]
 80024a2:	f822 1c18 	strh.w	r1, [r2, #-24]
 80024a6:	e01c      	b.n	80024e2 <TS_GetState+0x72>
	  {
	    y[index] = brute_x[index];
	    x[index] = brute_y[index];
	  }
	  x[index] = brute_y[index];
	  x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	1a5b      	subs	r3, r3, r1
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	e04d      	b.n	800254c <TS_GetState+0xdc>
	  y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80024b0:	b292      	uxth	r2, r2
 80024b2:	1a12      	subs	r2, r2, r0
 80024b4:	b292      	uxth	r2, r2
 80024b6:	e056      	b.n	8002566 <TS_GetState+0xf6>
	  TS_State->touchWeight[index] = weight;
	  TS_State->touchArea[index] = area;
	  switch(event)
	  {
	    case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN :
	      TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80024b8:	192b      	adds	r3, r5, r4
 80024ba:	2201      	movs	r2, #1
 80024bc:	76da      	strb	r2, [r3, #27]
	for(index=0; index < TS_State->touchDetected; index++)
 80024be:	3401      	adds	r4, #1
 80024c0:	782b      	ldrb	r3, [r5, #0]
 80024c2:	42a3      	cmp	r3, r4
 80024c4:	f240 8088 	bls.w	80025d8 <TS_GetState+0x168>
	  TS_GetXY(TS_I2C_ADDRESS, &(brute_x[index]), &(brute_y[index]));
 80024c8:	ab06      	add	r3, sp, #24
 80024ca:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 80024ce:	ab09      	add	r3, sp, #36	; 0x24
 80024d0:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 80024d4:	2070      	movs	r0, #112	; 0x70
 80024d6:	f7ff fedd 	bl	8002294 <TS_GetXY>
	  if(tsOrientation == TS_SWAP_NONE)
 80024da:	4b42      	ldr	r3, [pc, #264]	; (80025e4 <TS_GetState+0x174>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d0d6      	beq.n	8002490 <TS_GetState+0x20>
	  if(tsOrientation & TS_SWAP_X)
 80024e2:	f013 0f02 	tst.w	r3, #2
 80024e6:	d008      	beq.n	80024fa <TS_GetState+0x8a>
	    x[index] = 4096 - brute_x[index];
 80024e8:	aa12      	add	r2, sp, #72	; 0x48
 80024ea:	eb02 0144 	add.w	r1, r2, r4, lsl #1
 80024ee:	f831 2c24 	ldrh.w	r2, [r1, #-36]
 80024f2:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 80024f6:	f821 2c0c 	strh.w	r2, [r1, #-12]
	  if(tsOrientation & TS_SWAP_Y)
 80024fa:	f013 0f04 	tst.w	r3, #4
 80024fe:	d008      	beq.n	8002512 <TS_GetState+0xa2>
	    y[index] = 4096 - brute_y[index];
 8002500:	aa12      	add	r2, sp, #72	; 0x48
 8002502:	eb02 0144 	add.w	r1, r2, r4, lsl #1
 8002506:	f831 2c30 	ldrh.w	r2, [r1, #-48]
 800250a:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 800250e:	f821 2c18 	strh.w	r2, [r1, #-24]
	  if(tsOrientation & TS_SWAP_XY)
 8002512:	f013 0f08 	tst.w	r3, #8
 8002516:	d00a      	beq.n	800252e <TS_GetState+0xbe>
	    y[index] = brute_x[index];
 8002518:	ab12      	add	r3, sp, #72	; 0x48
 800251a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800251e:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8002522:	f823 2c18 	strh.w	r2, [r3, #-24]
	    x[index] = brute_y[index];
 8002526:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800252a:	f823 2c0c 	strh.w	r2, [r3, #-12]
	  x[index] = brute_y[index];
 800252e:	ab12      	add	r3, sp, #72	; 0x48
 8002530:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8002534:	f833 1c30 	ldrh.w	r1, [r3, #-48]
 8002538:	f823 1c0c 	strh.w	r1, [r3, #-12]
	  x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800253c:	4b2a      	ldr	r3, [pc, #168]	; (80025e8 <TS_GetState+0x178>)
 800253e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002542:	4299      	cmp	r1, r3
 8002544:	d9b0      	bls.n	80024a8 <TS_GetState+0x38>
 8002546:	b29b      	uxth	r3, r3
 8002548:	1acb      	subs	r3, r1, r3
 800254a:	b29b      	uxth	r3, r3
	  y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800254c:	aa12      	add	r2, sp, #72	; 0x48
 800254e:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8002552:	f832 0c18 	ldrh.w	r0, [r2, #-24]
 8002556:	4a25      	ldr	r2, [pc, #148]	; (80025ec <TS_GetState+0x17c>)
 8002558:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800255c:	4290      	cmp	r0, r2
 800255e:	d9a7      	bls.n	80024b0 <TS_GetState+0x40>
 8002560:	b292      	uxth	r2, r2
 8002562:	1a82      	subs	r2, r0, r2
 8002564:	b292      	uxth	r2, r2
	  if ((x_diff + y_diff) > 5)
 8002566:	4413      	add	r3, r2
 8002568:	2b05      	cmp	r3, #5
 800256a:	dd05      	ble.n	8002578 <TS_GetState+0x108>
	    _x[index] = x[index];
 800256c:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <TS_GetState+0x178>)
 800256e:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	    _y[index] = y[index];
 8002572:	4b1e      	ldr	r3, [pc, #120]	; (80025ec <TS_GetState+0x17c>)
 8002574:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	  TS_State->touchX[index] = x[index];
 8002578:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 800257c:	8059      	strh	r1, [r3, #2]
	  TS_State->touchY[index] = y[index];
 800257e:	1d23      	adds	r3, r4, #4
 8002580:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002584:	8098      	strh	r0, [r3, #4]
	  TS_GetTouchInfo(TS_I2C_ADDRESS, index, &weight, &area, &event);
 8002586:	ab03      	add	r3, sp, #12
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	ab04      	add	r3, sp, #16
 800258c:	aa05      	add	r2, sp, #20
 800258e:	4621      	mov	r1, r4
 8002590:	2070      	movs	r0, #112	; 0x70
 8002592:	f7ff fdc5 	bl	8002120 <TS_GetTouchInfo>
	  TS_State->touchWeight[index] = weight;
 8002596:	192b      	adds	r3, r5, r4
 8002598:	9a05      	ldr	r2, [sp, #20]
 800259a:	759a      	strb	r2, [r3, #22]
	  TS_State->touchArea[index] = area;
 800259c:	9a04      	ldr	r2, [sp, #16]
 800259e:	f883 2020 	strb.w	r2, [r3, #32]
	  switch(event)
 80025a2:	9b03      	ldr	r3, [sp, #12]
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d88a      	bhi.n	80024be <TS_GetState+0x4e>
 80025a8:	a201      	add	r2, pc, #4	; (adr r2, 80025b0 <TS_GetState+0x140>)
 80025aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ae:	bf00      	nop
 80025b0:	080024b9 	.word	0x080024b9
 80025b4:	080025c1 	.word	0x080025c1
 80025b8:	080025c9 	.word	0x080025c9
 80025bc:	080025d1 	.word	0x080025d1
	      break;
	    case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
	      TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80025c0:	192b      	adds	r3, r5, r4
 80025c2:	2202      	movs	r2, #2
 80025c4:	76da      	strb	r2, [r3, #27]
	      break;
 80025c6:	e77a      	b.n	80024be <TS_GetState+0x4e>
	    case FT5336_TOUCH_EVT_FLAG_CONTACT :
	      TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80025c8:	192b      	adds	r3, r5, r4
 80025ca:	2203      	movs	r2, #3
 80025cc:	76da      	strb	r2, [r3, #27]
	      break;
 80025ce:	e776      	b.n	80024be <TS_GetState+0x4e>
	    case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
	      TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80025d0:	192b      	adds	r3, r5, r4
 80025d2:	2200      	movs	r2, #0
 80025d4:	76da      	strb	r2, [r3, #27]
	      break;
 80025d6:	e772      	b.n	80024be <TS_GetState+0x4e>
	    default :
	      ts_status = TS_ERROR;
	      break;
	  }
	}
	ts_status = TS_Get_GestureId(TS_State);
 80025d8:	4628      	mov	r0, r5
 80025da:	f7ff ff05 	bl	80023e8 <TS_Get_GestureId>
  }
  return (ts_status);
}
 80025de:	b013      	add	sp, #76	; 0x4c
 80025e0:	bd30      	pop	{r4, r5, pc}
 80025e2:	bf00      	nop
 80025e4:	200000f7 	.word	0x200000f7
 80025e8:	200000c8 	.word	0x200000c8
 80025ec:	200000dc 	.word	0x200000dc

080025f0 <Touch_Init>:


void Touch_Init(void)
{
 80025f0:	b508      	push	{r3, lr}
  uint8_t regValue = 0;
  HAL_Delay(200);
 80025f2:	20c8      	movs	r0, #200	; 0xc8
 80025f4:	f001 fa04 	bl	8003a00 <HAL_Delay>
  if(Touch_ReadID(TS_I2C_ADDRESS) != FT5336_ID_VALUE)
 80025f8:	2070      	movs	r0, #112	; 0x70
 80025fa:	f7ff fe01 	bl	8002200 <Touch_ReadID>
  {}
  tsOrientation = TS_SWAP_XY;
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <Touch_Init+0x28>)
 8002600:	2208      	movs	r2, #8
 8002602:	701a      	strb	r2, [r3, #0]

  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
  TS_IO_Write(TS_I2C_ADDRESS, FT5336_GMODE_REG, regValue);
 8002604:	2200      	movs	r2, #0
 8002606:	21a4      	movs	r1, #164	; 0xa4
 8002608:	2070      	movs	r0, #112	; 0x70
 800260a:	f7ff fd61 	bl	80020d0 <TS_IO_Write>
  ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800260e:	4b03      	ldr	r3, [pc, #12]	; (800261c <Touch_Init+0x2c>)
 8002610:	2201      	movs	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]
}
 8002614:	bd08      	pop	{r3, pc}
 8002616:	bf00      	nop
 8002618:	200000f7 	.word	0x200000f7
 800261c:	200000f4 	.word	0x200000f4

08002620 <MainFunc>:
short unsigned int RGB[272*480]; //Резервируем память для буффера дисплея
DisplayConfig ds;                //Основные параметры библиотеки


void MainFunc ()
{
 8002620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002624:	b08b      	sub	sp, #44	; 0x2c
	  ds.Color_Type = Color565;
 8002626:	4c2c      	ldr	r4, [pc, #176]	; (80026d8 <MainFunc+0xb8>)
 8002628:	2200      	movs	r2, #0
 800262a:	7322      	strb	r2, [r4, #12]
	  ds.Display_Height = 272;
 800262c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002630:	6063      	str	r3, [r4, #4]
	  ds.Display_Width = 480;
 8002632:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002636:	60a3      	str	r3, [r4, #8]
	  ds.Layers = 1;
 8002638:	2301      	movs	r3, #1
 800263a:	7363      	strb	r3, [r4, #13]
	  ds.Start_RAM_Address = (uint32)&RGB;
 800263c:	4927      	ldr	r1, [pc, #156]	; (80026dc <MainFunc+0xbc>)
 800263e:	6021      	str	r1, [r4, #0]

	  ds.Window_Frame_Color = red;
 8002640:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8002644:	6123      	str	r3, [r4, #16]
	  ds.Window_Bar_Color = lightBlue2;
 8002646:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <MainFunc+0xc0>)
 8002648:	6163      	str	r3, [r4, #20]
	  ds.Window_Bar_H_Color = blue;
 800264a:	23ff      	movs	r3, #255	; 0xff
 800264c:	61a3      	str	r3, [r4, #24]
	  ds.Window_Bar_L_Color = lightBlue4;
 800264e:	4825      	ldr	r0, [pc, #148]	; (80026e4 <MainFunc+0xc4>)
 8002650:	61e0      	str	r0, [r4, #28]
	  ds.Window_Color = white;
 8002652:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002656:	6220      	str	r0, [r4, #32]
	  ds.Window_Text_Color = black;
 8002658:	6262      	str	r2, [r4, #36]	; 0x24
	  ds.Window_Frame_Thickness = 2;
 800265a:	2002      	movs	r0, #2
 800265c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28

	  ds.Button_Frame_Color = lightBlack2;
 8002660:	4821      	ldr	r0, [pc, #132]	; (80026e8 <MainFunc+0xc8>)
 8002662:	62e0      	str	r0, [r4, #44]	; 0x2c
	  ds.Button_Color = gray2;
 8002664:	4d21      	ldr	r5, [pc, #132]	; (80026ec <MainFunc+0xcc>)
 8002666:	6325      	str	r5, [r4, #48]	; 0x30
	  ds.Button_Selected_Color = lightBlack3;
 8002668:	4d21      	ldr	r5, [pc, #132]	; (80026f0 <MainFunc+0xd0>)
 800266a:	6365      	str	r5, [r4, #52]	; 0x34
	  ds.Button_Text_Color = black;
 800266c:	63a2      	str	r2, [r4, #56]	; 0x38

	  ds.Label_Color = black;
 800266e:	63e2      	str	r2, [r4, #60]	; 0x3c
	  ds.Label_Selected_Color = lightBlack2;
 8002670:	6420      	str	r0, [r4, #64]	; 0x40
	  ds.Label_Background_Color = blue;
 8002672:	6463      	str	r3, [r4, #68]	; 0x44

	  ds.Bar_Color = darkGreen2;
 8002674:	f44f 4319 	mov.w	r3, #39168	; 0x9900
 8002678:	64a3      	str	r3, [r4, #72]	; 0x48
	  ds.Bar_Color2 = darkViolet2;
 800267a:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <MainFunc+0xd4>)
 800267c:	64e3      	str	r3, [r4, #76]	; 0x4c
	  ds.Bar_Color3 = lightViolet2;
 800267e:	f103 1366 	add.w	r3, r3, #6684774	; 0x660066
 8002682:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 8002686:	6523      	str	r3, [r4, #80]	; 0x50


	  HAL_LTDC_SetAddress(&hltdc,(uint32_t)&RGB,0);  // запускаем модуль LTDC (железный)
 8002688:	481b      	ldr	r0, [pc, #108]	; (80026f8 <MainFunc+0xd8>)
 800268a:	f002 fa69 	bl	8004b60 <HAL_LTDC_SetAddress>
	  Graphics_Init(&ds); //инит библиотеки (из структуры ds)
 800268e:	4620      	mov	r0, r4
 8002690:	f7fe fa2c 	bl	8000aec <Graphics_Init>

	  uint8 Refresh = 0;

	  while(1)
	  {
		  Fill_Display(black);
 8002694:	2000      	movs	r0, #0
 8002696:	f7fe fa95 	bl	8000bc4 <Fill_Display>
		  Refresh = 1;
 800269a:	2401      	movs	r4, #1
		  while(Refresh)
 800269c:	2c00      	cmp	r4, #0
 800269e:	d0f9      	beq.n	8002694 <MainFunc+0x74>
		  {
			  if(LCD_Button(70, 220, 100, 170, "Demo") == Unclicked)
 80026a0:	4b16      	ldr	r3, [pc, #88]	; (80026fc <MainFunc+0xdc>)
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	23aa      	movs	r3, #170	; 0xaa
 80026a6:	2264      	movs	r2, #100	; 0x64
 80026a8:	21dc      	movs	r1, #220	; 0xdc
 80026aa:	2046      	movs	r0, #70	; 0x46
 80026ac:	f7ff fc88 	bl	8001fc0 <LCD_Button>
 80026b0:	2802      	cmp	r0, #2
 80026b2:	d027      	beq.n	8002704 <MainFunc+0xe4>
				  HAL_Delay(4000);

				  Refresh = 0;
			  }

			  if(LCD_Button(260, 410, 100, 170, "Control panel") == Unclicked)
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <MainFunc+0xe0>)
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	23aa      	movs	r3, #170	; 0xaa
 80026ba:	2264      	movs	r2, #100	; 0x64
 80026bc:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80026c0:	f44f 7082 	mov.w	r0, #260	; 0x104
 80026c4:	f7ff fc7c 	bl	8001fc0 <LCD_Button>
 80026c8:	2802      	cmp	r0, #2
 80026ca:	f000 828a 	beq.w	8002be2 <MainFunc+0x5c2>
				  HAL_Delay(2500);

				  Refresh = 0;
			  }

			  HAL_Delay(100);
 80026ce:	2064      	movs	r0, #100	; 0x64
 80026d0:	f001 f996 	bl	8003a00 <HAL_Delay>
 80026d4:	e7e2      	b.n	800269c <MainFunc+0x7c>
 80026d6:	bf00      	nop
 80026d8:	2003fcf8 	.word	0x2003fcf8
 80026dc:	200000f8 	.word	0x200000f8
 80026e0:	006666ff 	.word	0x006666ff
 80026e4:	00ccccff 	.word	0x00ccccff
 80026e8:	00404040 	.word	0x00404040
 80026ec:	00c0c0c0 	.word	0x00c0c0c0
 80026f0:	00606060 	.word	0x00606060
 80026f4:	004c0099 	.word	0x004c0099
 80026f8:	2003fdd8 	.word	0x2003fdd8
 80026fc:	08007f94 	.word	0x08007f94
 8002700:	08008024 	.word	0x08008024
				  Fill_Display(black);
 8002704:	2000      	movs	r0, #0
 8002706:	f7fe fa5d 	bl	8000bc4 <Fill_Display>
				  Label(10, 5, green, "Fill Display in Black");
 800270a:	4bc4      	ldr	r3, [pc, #784]	; (8002a1c <MainFunc+0x3fc>)
 800270c:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8002710:	2105      	movs	r1, #5
 8002712:	200a      	movs	r0, #10
 8002714:	f7ff fa6e 	bl	8001bf4 <Label>
				  HAL_Delay(4000);
 8002718:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800271c:	f001 f970 	bl	8003a00 <HAL_Delay>
				  Fill_Display(black);
 8002720:	2000      	movs	r0, #0
 8002722:	f7fe fa4f 	bl	8000bc4 <Fill_Display>
				  Label(10, 5, green, "Draw Pixels");
 8002726:	4bbe      	ldr	r3, [pc, #760]	; (8002a20 <MainFunc+0x400>)
 8002728:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 800272c:	2105      	movs	r1, #5
 800272e:	200a      	movs	r0, #10
 8002730:	f7ff fa60 	bl	8001bf4 <Label>
				  Pixel(10, 30, blue, 1);
 8002734:	2301      	movs	r3, #1
 8002736:	22ff      	movs	r2, #255	; 0xff
 8002738:	211e      	movs	r1, #30
 800273a:	200a      	movs	r0, #10
 800273c:	f7fe fa60 	bl	8000c00 <Pixel>
				  HAL_Delay(500);
 8002740:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002744:	f001 f95c 	bl	8003a00 <HAL_Delay>
				  Pixel(30, 40, blue, 2);
 8002748:	2302      	movs	r3, #2
 800274a:	22ff      	movs	r2, #255	; 0xff
 800274c:	2128      	movs	r1, #40	; 0x28
 800274e:	201e      	movs	r0, #30
 8002750:	f7fe fa56 	bl	8000c00 <Pixel>
				  HAL_Delay(500);
 8002754:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002758:	f001 f952 	bl	8003a00 <HAL_Delay>
				  Pixel(50, 50, blue, 3);
 800275c:	2303      	movs	r3, #3
 800275e:	22ff      	movs	r2, #255	; 0xff
 8002760:	2132      	movs	r1, #50	; 0x32
 8002762:	4608      	mov	r0, r1
 8002764:	f7fe fa4c 	bl	8000c00 <Pixel>
				  HAL_Delay(500);
 8002768:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800276c:	f001 f948 	bl	8003a00 <HAL_Delay>
				  Pixel(70, 60, blue, 4);
 8002770:	2304      	movs	r3, #4
 8002772:	22ff      	movs	r2, #255	; 0xff
 8002774:	213c      	movs	r1, #60	; 0x3c
 8002776:	2046      	movs	r0, #70	; 0x46
 8002778:	f7fe fa42 	bl	8000c00 <Pixel>
				  HAL_Delay(500);
 800277c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002780:	f001 f93e 	bl	8003a00 <HAL_Delay>
				  Pixel(90, 70, blue, 5);
 8002784:	2305      	movs	r3, #5
 8002786:	22ff      	movs	r2, #255	; 0xff
 8002788:	2146      	movs	r1, #70	; 0x46
 800278a:	205a      	movs	r0, #90	; 0x5a
 800278c:	f7fe fa38 	bl	8000c00 <Pixel>
				  HAL_Delay(500);
 8002790:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002794:	f001 f934 	bl	8003a00 <HAL_Delay>
				  Pixel(110, 80, blue, 6);
 8002798:	2306      	movs	r3, #6
 800279a:	22ff      	movs	r2, #255	; 0xff
 800279c:	2150      	movs	r1, #80	; 0x50
 800279e:	206e      	movs	r0, #110	; 0x6e
 80027a0:	f7fe fa2e 	bl	8000c00 <Pixel>
				  HAL_Delay(500);
 80027a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027a8:	f001 f92a 	bl	8003a00 <HAL_Delay>
				  Pixel(130, 90, blue, 7);
 80027ac:	2307      	movs	r3, #7
 80027ae:	22ff      	movs	r2, #255	; 0xff
 80027b0:	215a      	movs	r1, #90	; 0x5a
 80027b2:	2082      	movs	r0, #130	; 0x82
 80027b4:	f7fe fa24 	bl	8000c00 <Pixel>
				  HAL_Delay(500);
 80027b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027bc:	f001 f920 	bl	8003a00 <HAL_Delay>
				  Pixel(150, 100, blue, 8);
 80027c0:	2308      	movs	r3, #8
 80027c2:	22ff      	movs	r2, #255	; 0xff
 80027c4:	2164      	movs	r1, #100	; 0x64
 80027c6:	2096      	movs	r0, #150	; 0x96
 80027c8:	f7fe fa1a 	bl	8000c00 <Pixel>
				  HAL_Delay(500);
 80027cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027d0:	f001 f916 	bl	8003a00 <HAL_Delay>
				  Pixel(170, 110, blue, 9);
 80027d4:	2309      	movs	r3, #9
 80027d6:	22ff      	movs	r2, #255	; 0xff
 80027d8:	216e      	movs	r1, #110	; 0x6e
 80027da:	20aa      	movs	r0, #170	; 0xaa
 80027dc:	f7fe fa10 	bl	8000c00 <Pixel>
				  HAL_Delay(4000);
 80027e0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80027e4:	f001 f90c 	bl	8003a00 <HAL_Delay>
				  Fill_Display(black);
 80027e8:	2000      	movs	r0, #0
 80027ea:	f7fe f9eb 	bl	8000bc4 <Fill_Display>
				  Label(10, 5, green, "Lines");
 80027ee:	4b8d      	ldr	r3, [pc, #564]	; (8002a24 <MainFunc+0x404>)
 80027f0:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80027f4:	2105      	movs	r1, #5
 80027f6:	200a      	movs	r0, #10
 80027f8:	f7ff f9fc 	bl	8001bf4 <Label>
				  HLine(red, 10, 470, 50, 2);
 80027fc:	f04f 0802 	mov.w	r8, #2
 8002800:	f8cd 8000 	str.w	r8, [sp]
 8002804:	2332      	movs	r3, #50	; 0x32
 8002806:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800280a:	210a      	movs	r1, #10
 800280c:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 8002810:	f7fe faa6 	bl	8000d60 <HLine>
				  HAL_Delay(500);
 8002814:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002818:	f001 f8f2 	bl	8003a00 <HAL_Delay>
				  VLine(green, 100, 5, 267, 4);
 800281c:	2304      	movs	r3, #4
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	f240 130b 	movw	r3, #267	; 0x10b
 8002824:	2205      	movs	r2, #5
 8002826:	2164      	movs	r1, #100	; 0x64
 8002828:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 800282c:	f7fe faa6 	bl	8000d7c <VLine>
				  HAL_Delay(500);
 8002830:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002834:	f001 f8e4 	bl	8003a00 <HAL_Delay>
				  Line(30, 30, 450, 242, blue, 6);
 8002838:	2306      	movs	r3, #6
 800283a:	9301      	str	r3, [sp, #4]
 800283c:	25ff      	movs	r5, #255	; 0xff
 800283e:	9500      	str	r5, [sp, #0]
 8002840:	23f2      	movs	r3, #242	; 0xf2
 8002842:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002846:	211e      	movs	r1, #30
 8002848:	4608      	mov	r0, r1
 800284a:	f7fe faa7 	bl	8000d9c <Line>
				  HAL_Delay(4000);
 800284e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002852:	f001 f8d5 	bl	8003a00 <HAL_Delay>
				  Fill_Display(black);
 8002856:	2000      	movs	r0, #0
 8002858:	f7fe f9b4 	bl	8000bc4 <Fill_Display>
				  Label(10, 5, green, "Circles");
 800285c:	4b72      	ldr	r3, [pc, #456]	; (8002a28 <MainFunc+0x408>)
 800285e:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8002862:	2105      	movs	r1, #5
 8002864:	200a      	movs	r0, #10
 8002866:	f7ff f9c5 	bl	8001bf4 <Label>
				  Circle(30, 30, 10, red, 1);
 800286a:	2601      	movs	r6, #1
 800286c:	9600      	str	r6, [sp, #0]
 800286e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8002872:	220a      	movs	r2, #10
 8002874:	211e      	movs	r1, #30
 8002876:	4608      	mov	r0, r1
 8002878:	f7fe fbcc 	bl	8001014 <Circle>
				  HAL_Delay(500);
 800287c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002880:	f001 f8be 	bl	8003a00 <HAL_Delay>
				  Circle(80, 60, 20, green, 2);
 8002884:	f8cd 8000 	str.w	r8, [sp]
 8002888:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800288c:	2214      	movs	r2, #20
 800288e:	213c      	movs	r1, #60	; 0x3c
 8002890:	2050      	movs	r0, #80	; 0x50
 8002892:	f7fe fbbf 	bl	8001014 <Circle>
				  HAL_Delay(500);
 8002896:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800289a:	f001 f8b1 	bl	8003a00 <HAL_Delay>
				  Circle(110, 90, 30, blue, 3);
 800289e:	f04f 0903 	mov.w	r9, #3
 80028a2:	f8cd 9000 	str.w	r9, [sp]
 80028a6:	462b      	mov	r3, r5
 80028a8:	221e      	movs	r2, #30
 80028aa:	215a      	movs	r1, #90	; 0x5a
 80028ac:	206e      	movs	r0, #110	; 0x6e
 80028ae:	f7fe fbb1 	bl	8001014 <Circle>
				  HAL_Delay(500);
 80028b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028b6:	f001 f8a3 	bl	8003a00 <HAL_Delay>
				  FillCircle(160, 140, 35, red);
 80028ba:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80028be:	2223      	movs	r2, #35	; 0x23
 80028c0:	218c      	movs	r1, #140	; 0x8c
 80028c2:	20a0      	movs	r0, #160	; 0xa0
 80028c4:	f7fe fc01 	bl	80010ca <FillCircle>
				  HAL_Delay(500);
 80028c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028cc:	f001 f898 	bl	8003a00 <HAL_Delay>
				  FillCircle(210, 190, 40, green);
 80028d0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80028d4:	2228      	movs	r2, #40	; 0x28
 80028d6:	21be      	movs	r1, #190	; 0xbe
 80028d8:	20d2      	movs	r0, #210	; 0xd2
 80028da:	f7fe fbf6 	bl	80010ca <FillCircle>
				  HAL_Delay(500);
 80028de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028e2:	f001 f88d 	bl	8003a00 <HAL_Delay>
				  FillCircle(260, 240, 50, blue);
 80028e6:	462b      	mov	r3, r5
 80028e8:	2232      	movs	r2, #50	; 0x32
 80028ea:	21f0      	movs	r1, #240	; 0xf0
 80028ec:	f44f 7082 	mov.w	r0, #260	; 0x104
 80028f0:	f7fe fbeb 	bl	80010ca <FillCircle>
				  HAL_Delay(4000);
 80028f4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80028f8:	f001 f882 	bl	8003a00 <HAL_Delay>
				  Fill_Display(black);
 80028fc:	2000      	movs	r0, #0
 80028fe:	f7fe f961 	bl	8000bc4 <Fill_Display>
				  Label(10, 5, green, "Gradient");
 8002902:	4b4a      	ldr	r3, [pc, #296]	; (8002a2c <MainFunc+0x40c>)
 8002904:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8002908:	2105      	movs	r1, #5
 800290a:	200a      	movs	r0, #10
 800290c:	f7ff f972 	bl	8001bf4 <Label>
				  VGradA(30, 235, 30, 130, red, blue);
 8002910:	9501      	str	r5, [sp, #4]
 8002912:	f44f 047f 	mov.w	r4, #16711680	; 0xff0000
 8002916:	9400      	str	r4, [sp, #0]
 8002918:	2382      	movs	r3, #130	; 0x82
 800291a:	221e      	movs	r2, #30
 800291c:	21eb      	movs	r1, #235	; 0xeb
 800291e:	4610      	mov	r0, r2
 8002920:	f7fe fbe8 	bl	80010f4 <VGradA>
				  HAL_Delay(500);
 8002924:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002928:	f001 f86a 	bl	8003a00 <HAL_Delay>
				  HGradA(245, 450, 30, 130, red, blue);
 800292c:	9501      	str	r5, [sp, #4]
 800292e:	9400      	str	r4, [sp, #0]
 8002930:	2382      	movs	r3, #130	; 0x82
 8002932:	221e      	movs	r2, #30
 8002934:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002938:	20f5      	movs	r0, #245	; 0xf5
 800293a:	f7fe fcd7 	bl	80012ec <HGradA>
				  HAL_Delay(500);
 800293e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002942:	f001 f85d 	bl	8003a00 <HAL_Delay>
				  VGradB(30, 235, 140, 260, red, green, blue);
 8002946:	9502      	str	r5, [sp, #8]
 8002948:	f44f 477f 	mov.w	r7, #65280	; 0xff00
 800294c:	9701      	str	r7, [sp, #4]
 800294e:	9400      	str	r4, [sp, #0]
 8002950:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002954:	228c      	movs	r2, #140	; 0x8c
 8002956:	21eb      	movs	r1, #235	; 0xeb
 8002958:	201e      	movs	r0, #30
 800295a:	f7fe fdc5 	bl	80014e8 <VGradB>
				  HAL_Delay(500);
 800295e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002962:	f001 f84d 	bl	8003a00 <HAL_Delay>
				  HGradB(245, 450, 140, 260, red, green, blue);
 8002966:	9502      	str	r5, [sp, #8]
 8002968:	9701      	str	r7, [sp, #4]
 800296a:	9400      	str	r4, [sp, #0]
 800296c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002970:	228c      	movs	r2, #140	; 0x8c
 8002972:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002976:	20f5      	movs	r0, #245	; 0xf5
 8002978:	f7fe fddb 	bl	8001532 <HGradB>
				  HAL_Delay(4000);
 800297c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002980:	f001 f83e 	bl	8003a00 <HAL_Delay>
				  Fill_Display(black);
 8002984:	2000      	movs	r0, #0
 8002986:	f7fe f91d 	bl	8000bc4 <Fill_Display>
				  Label(10, 5, green, "Frame Panel");
 800298a:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <MainFunc+0x410>)
 800298c:	463a      	mov	r2, r7
 800298e:	2105      	movs	r1, #5
 8002990:	200a      	movs	r0, #10
 8002992:	f7ff f92f 	bl	8001bf4 <Label>
				  FramePanel(red, white, 50, 430, 50, 222, 3);
 8002996:	f8cd 9008 	str.w	r9, [sp, #8]
 800299a:	23de      	movs	r3, #222	; 0xde
 800299c:	9301      	str	r3, [sp, #4]
 800299e:	2232      	movs	r2, #50	; 0x32
 80029a0:	9200      	str	r2, [sp, #0]
 80029a2:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 80029a6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80029aa:	4620      	mov	r0, r4
 80029ac:	f7fe fde6 	bl	800157c <FramePanel>
				  HAL_Delay(4000);
 80029b0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80029b4:	f001 f824 	bl	8003a00 <HAL_Delay>
				  Form(1, 480, 1, 272, 30, 2, red, lightBlue2, white, green, "Simple form");
 80029b8:	4b1e      	ldr	r3, [pc, #120]	; (8002a34 <MainFunc+0x414>)
 80029ba:	9306      	str	r3, [sp, #24]
 80029bc:	9705      	str	r7, [sp, #20]
 80029be:	f06f 4a7f 	mvn.w	sl, #4278190080	; 0xff000000
 80029c2:	f8cd a010 	str.w	sl, [sp, #16]
 80029c6:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8002a3c <MainFunc+0x41c>
 80029ca:	f8cd 900c 	str.w	r9, [sp, #12]
 80029ce:	9402      	str	r4, [sp, #8]
 80029d0:	f8cd 8004 	str.w	r8, [sp, #4]
 80029d4:	251e      	movs	r5, #30
 80029d6:	9500      	str	r5, [sp, #0]
 80029d8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80029dc:	4632      	mov	r2, r6
 80029de:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80029e2:	4630      	mov	r0, r6
 80029e4:	f7ff fa27 	bl	8001e36 <Form>
				  HAL_Delay(4000);
 80029e8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80029ec:	f001 f808 	bl	8003a00 <HAL_Delay>
				  Form(1, 480, 1, 272, 30, 2, red, lightBlue2, white, green, "Horisontal Progress Bar");
 80029f0:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <MainFunc+0x418>)
 80029f2:	9306      	str	r3, [sp, #24]
 80029f4:	9705      	str	r7, [sp, #20]
 80029f6:	f8cd a010 	str.w	sl, [sp, #16]
 80029fa:	f8cd 900c 	str.w	r9, [sp, #12]
 80029fe:	9402      	str	r4, [sp, #8]
 8002a00:	f8cd 8004 	str.w	r8, [sp, #4]
 8002a04:	9500      	str	r5, [sp, #0]
 8002a06:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002a0a:	4632      	mov	r2, r6
 8002a0c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002a10:	4630      	mov	r0, r6
 8002a12:	f7ff fa10 	bl	8001e36 <Form>
				  for(int i = 0; i<100; i++)
 8002a16:	2500      	movs	r5, #0
 8002a18:	e062      	b.n	8002ae0 <MainFunc+0x4c0>
 8002a1a:	bf00      	nop
 8002a1c:	08007f9c 	.word	0x08007f9c
 8002a20:	08007fb4 	.word	0x08007fb4
 8002a24:	08007fc0 	.word	0x08007fc0
 8002a28:	08007fc8 	.word	0x08007fc8
 8002a2c:	08007fd0 	.word	0x08007fd0
 8002a30:	08007fdc 	.word	0x08007fdc
 8002a34:	08007fe8 	.word	0x08007fe8
 8002a38:	08007ff4 	.word	0x08007ff4
 8002a3c:	006666ff 	.word	0x006666ff
					  Progress_bar(20, 460, 120, 150, 0, 99, i, red, white, violet, 2, Horisontal);
 8002a40:	2400      	movs	r4, #0
 8002a42:	9407      	str	r4, [sp, #28]
 8002a44:	f04f 0a02 	mov.w	sl, #2
 8002a48:	f8cd a018 	str.w	sl, [sp, #24]
 8002a4c:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8002bfc <MainFunc+0x5dc>
 8002a50:	f8cd 9014 	str.w	r9, [sp, #20]
 8002a54:	f06f 467f 	mvn.w	r6, #4278190080	; 0xff000000
 8002a58:	9604      	str	r6, [sp, #16]
 8002a5a:	f44f 087f 	mov.w	r8, #16711680	; 0xff0000
 8002a5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a62:	9502      	str	r5, [sp, #8]
 8002a64:	2763      	movs	r7, #99	; 0x63
 8002a66:	9701      	str	r7, [sp, #4]
 8002a68:	9400      	str	r4, [sp, #0]
 8002a6a:	2396      	movs	r3, #150	; 0x96
 8002a6c:	2278      	movs	r2, #120	; 0x78
 8002a6e:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8002a72:	2014      	movs	r0, #20
 8002a74:	f7fe fdc2 	bl	80015fc <Progress_bar>
					  Progress_bar_gradient(20, 460, 160, 190, 0, 99, i, red, white, lightTurquoise3, darkTurquoise2, 2, Horisontal);
 8002a78:	9408      	str	r4, [sp, #32]
 8002a7a:	f8cd a01c 	str.w	sl, [sp, #28]
 8002a7e:	f649 134c 	movw	r3, #39244	; 0x994c
 8002a82:	9306      	str	r3, [sp, #24]
 8002a84:	4b5b      	ldr	r3, [pc, #364]	; (8002bf4 <MainFunc+0x5d4>)
 8002a86:	9305      	str	r3, [sp, #20]
 8002a88:	9604      	str	r6, [sp, #16]
 8002a8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a8e:	9502      	str	r5, [sp, #8]
 8002a90:	9701      	str	r7, [sp, #4]
 8002a92:	9400      	str	r4, [sp, #0]
 8002a94:	23be      	movs	r3, #190	; 0xbe
 8002a96:	22a0      	movs	r2, #160	; 0xa0
 8002a98:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8002a9c:	2014      	movs	r0, #20
 8002a9e:	f7fe fea5 	bl	80017ec <Progress_bar_gradient>
					  Fill_Rectangle(white, 10, 470, 190, 215);
 8002aa2:	23d7      	movs	r3, #215	; 0xd7
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	23be      	movs	r3, #190	; 0xbe
 8002aa8:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8002aac:	210a      	movs	r1, #10
 8002aae:	4630      	mov	r0, r6
 8002ab0:	f7fe f8f2 	bl	8000c98 <Fill_Rectangle>
					  TrackBar(20, 460, 200, 205, 0, 99, i, red, white, violet, Horisontal, 7);
 8002ab4:	2307      	movs	r3, #7
 8002ab6:	9307      	str	r3, [sp, #28]
 8002ab8:	9406      	str	r4, [sp, #24]
 8002aba:	f8cd 9014 	str.w	r9, [sp, #20]
 8002abe:	9604      	str	r6, [sp, #16]
 8002ac0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ac4:	9502      	str	r5, [sp, #8]
 8002ac6:	9701      	str	r7, [sp, #4]
 8002ac8:	9400      	str	r4, [sp, #0]
 8002aca:	23cd      	movs	r3, #205	; 0xcd
 8002acc:	22c8      	movs	r2, #200	; 0xc8
 8002ace:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8002ad2:	2014      	movs	r0, #20
 8002ad4:	f7ff f8d0 	bl	8001c78 <TrackBar>
					  HAL_Delay(100);
 8002ad8:	2064      	movs	r0, #100	; 0x64
 8002ada:	f000 ff91 	bl	8003a00 <HAL_Delay>
				  for(int i = 0; i<100; i++)
 8002ade:	3501      	adds	r5, #1
 8002ae0:	2d63      	cmp	r5, #99	; 0x63
 8002ae2:	ddad      	ble.n	8002a40 <MainFunc+0x420>
				  HAL_Delay(4000);
 8002ae4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002ae8:	f000 ff8a 	bl	8003a00 <HAL_Delay>
				  Form(1, 480, 1, 272, 30, 2, red, lightBlue2, white, green, "Vertical Progress Bar");
 8002aec:	4b42      	ldr	r3, [pc, #264]	; (8002bf8 <MainFunc+0x5d8>)
 8002aee:	9306      	str	r3, [sp, #24]
 8002af0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002af4:	9305      	str	r3, [sp, #20]
 8002af6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002afa:	9304      	str	r3, [sp, #16]
 8002afc:	f5a3 0319 	sub.w	r3, r3, #10027008	; 0x990000
 8002b00:	f5a3 4319 	sub.w	r3, r3, #39168	; 0x9900
 8002b04:	9303      	str	r3, [sp, #12]
 8002b06:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	9301      	str	r3, [sp, #4]
 8002b10:	231e      	movs	r3, #30
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002b1e:	4610      	mov	r0, r2
 8002b20:	f7ff f989 	bl	8001e36 <Form>
				  for(int i = 0; i<100; i++)
 8002b24:	2400      	movs	r4, #0
 8002b26:	e054      	b.n	8002bd2 <MainFunc+0x5b2>
					  Progress_bar(20, 50, 35, 260, 0, 99, i, red, white, violet, 2, Vertical);
 8002b28:	f04f 0901 	mov.w	r9, #1
 8002b2c:	f8cd 901c 	str.w	r9, [sp, #28]
 8002b30:	f04f 0b02 	mov.w	fp, #2
 8002b34:	f8cd b018 	str.w	fp, [sp, #24]
 8002b38:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8002bfc <MainFunc+0x5dc>
 8002b3c:	f8cd a014 	str.w	sl, [sp, #20]
 8002b40:	f06f 457f 	mvn.w	r5, #4278190080	; 0xff000000
 8002b44:	9504      	str	r5, [sp, #16]
 8002b46:	f44f 087f 	mov.w	r8, #16711680	; 0xff0000
 8002b4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b4e:	9402      	str	r4, [sp, #8]
 8002b50:	2763      	movs	r7, #99	; 0x63
 8002b52:	9701      	str	r7, [sp, #4]
 8002b54:	2600      	movs	r6, #0
 8002b56:	9600      	str	r6, [sp, #0]
 8002b58:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002b5c:	2223      	movs	r2, #35	; 0x23
 8002b5e:	2132      	movs	r1, #50	; 0x32
 8002b60:	2014      	movs	r0, #20
 8002b62:	f7fe fd4b 	bl	80015fc <Progress_bar>
					  Progress_bar_gradient(70, 100, 35, 260, 0, 99, i, red, white, lightTurquoise3, darkTurquoise2, 2, Vertical);
 8002b66:	f8cd 9020 	str.w	r9, [sp, #32]
 8002b6a:	f8cd b01c 	str.w	fp, [sp, #28]
 8002b6e:	f649 134c 	movw	r3, #39244	; 0x994c
 8002b72:	9306      	str	r3, [sp, #24]
 8002b74:	4b1f      	ldr	r3, [pc, #124]	; (8002bf4 <MainFunc+0x5d4>)
 8002b76:	9305      	str	r3, [sp, #20]
 8002b78:	9504      	str	r5, [sp, #16]
 8002b7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b7e:	9402      	str	r4, [sp, #8]
 8002b80:	9701      	str	r7, [sp, #4]
 8002b82:	9600      	str	r6, [sp, #0]
 8002b84:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002b88:	2223      	movs	r2, #35	; 0x23
 8002b8a:	2164      	movs	r1, #100	; 0x64
 8002b8c:	2046      	movs	r0, #70	; 0x46
 8002b8e:	f7fe fe2d 	bl	80017ec <Progress_bar_gradient>
					  Fill_Rectangle(white, 120, 145, 35, 270);
 8002b92:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	2323      	movs	r3, #35	; 0x23
 8002b9a:	2291      	movs	r2, #145	; 0x91
 8002b9c:	2178      	movs	r1, #120	; 0x78
 8002b9e:	4628      	mov	r0, r5
 8002ba0:	f7fe f87a 	bl	8000c98 <Fill_Rectangle>
					  TrackBar(130, 135, 45, 260, 0, 99, i, red, white, violet, Vertical, 7);
 8002ba4:	2307      	movs	r3, #7
 8002ba6:	9307      	str	r3, [sp, #28]
 8002ba8:	f8cd 9018 	str.w	r9, [sp, #24]
 8002bac:	f8cd a014 	str.w	sl, [sp, #20]
 8002bb0:	9504      	str	r5, [sp, #16]
 8002bb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002bb6:	9402      	str	r4, [sp, #8]
 8002bb8:	9701      	str	r7, [sp, #4]
 8002bba:	9600      	str	r6, [sp, #0]
 8002bbc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002bc0:	222d      	movs	r2, #45	; 0x2d
 8002bc2:	2187      	movs	r1, #135	; 0x87
 8002bc4:	2082      	movs	r0, #130	; 0x82
 8002bc6:	f7ff f857 	bl	8001c78 <TrackBar>
					  HAL_Delay(100);
 8002bca:	2064      	movs	r0, #100	; 0x64
 8002bcc:	f000 ff18 	bl	8003a00 <HAL_Delay>
				  for(int i = 0; i<100; i++)
 8002bd0:	444c      	add	r4, r9
 8002bd2:	2c63      	cmp	r4, #99	; 0x63
 8002bd4:	dda8      	ble.n	8002b28 <MainFunc+0x508>
				  HAL_Delay(4000);
 8002bd6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002bda:	f000 ff11 	bl	8003a00 <HAL_Delay>
				  Refresh = 0;
 8002bde:	2400      	movs	r4, #0
 8002be0:	e568      	b.n	80026b4 <MainFunc+0x94>
				  LCD_FramePanel();
 8002be2:	f7ff f9cb 	bl	8001f7c <LCD_FramePanel>
				  HAL_Delay(2500);
 8002be6:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002bea:	f000 ff09 	bl	8003a00 <HAL_Delay>
				  Refresh = 0;
 8002bee:	2400      	movs	r4, #0
 8002bf0:	e56d      	b.n	80026ce <MainFunc+0xae>
 8002bf2:	bf00      	nop
 8002bf4:	0099ffcc 	.word	0x0099ffcc
 8002bf8:	0800800c 	.word	0x0800800c
 8002bfc:	007f00ff 	.word	0x007f00ff

08002c00 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8002c00:	b510      	push	{r4, lr}
 8002c02:	b084      	sub	sp, #16
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002c04:	2400      	movs	r4, #0
 8002c06:	9400      	str	r4, [sp, #0]
 8002c08:	9401      	str	r4, [sp, #4]
 8002c0a:	9402      	str	r4, [sp, #8]
 8002c0c:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002c0e:	f000 ff61 	bl	8003ad4 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002c12:	2301      	movs	r3, #1
 8002c14:	f88d 3000 	strb.w	r3, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002c18:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x20000004;
 8002c1c:	4a0d      	ldr	r2, [pc, #52]	; (8002c54 <MPU_Config+0x54>)
 8002c1e:	9201      	str	r2, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8002c20:	2211      	movs	r2, #17
 8002c22:	f88d 2008 	strb.w	r2, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002c26:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002c2a:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002c2e:	2203      	movs	r2, #3
 8002c30:	f88d 200b 	strb.w	r2, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002c34:	f88d 400c 	strb.w	r4, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002c38:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8002c3c:	f88d 300e 	strb.w	r3, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002c40:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002c44:	4668      	mov	r0, sp
 8002c46:	f000 ff63 	bl	8003b10 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002c4a:	2004      	movs	r0, #4
 8002c4c:	f000 ff50 	bl	8003af0 <HAL_MPU_Enable>

}
 8002c50:	b004      	add	sp, #16
 8002c52:	bd10      	pop	{r4, pc}
 8002c54:	20000004 	.word	0x20000004

08002c58 <MX_GPIO_Init>:
{
 8002c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c5c:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5e:	2400      	movs	r4, #0
 8002c60:	940b      	str	r4, [sp, #44]	; 0x2c
 8002c62:	940c      	str	r4, [sp, #48]	; 0x30
 8002c64:	940d      	str	r4, [sp, #52]	; 0x34
 8002c66:	940e      	str	r4, [sp, #56]	; 0x38
 8002c68:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c6a:	4baa      	ldr	r3, [pc, #680]	; (8002f14 <MX_GPIO_Init+0x2bc>)
 8002c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6e:	f042 0210 	orr.w	r2, r2, #16
 8002c72:	631a      	str	r2, [r3, #48]	; 0x30
 8002c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c76:	f002 0210 	and.w	r2, r2, #16
 8002c7a:	9200      	str	r2, [sp, #0]
 8002c7c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
 8002c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c88:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002c8c:	9201      	str	r2, [sp, #4]
 8002c8e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c92:	f042 0202 	orr.w	r2, r2, #2
 8002c96:	631a      	str	r2, [r3, #48]	; 0x30
 8002c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c9a:	f002 0202 	and.w	r2, r2, #2
 8002c9e:	9202      	str	r2, [sp, #8]
 8002ca0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca4:	f042 0208 	orr.w	r2, r2, #8
 8002ca8:	631a      	str	r2, [r3, #48]	; 0x30
 8002caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cac:	f002 0208 	and.w	r2, r2, #8
 8002cb0:	9203      	str	r2, [sp, #12]
 8002cb2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cb6:	f042 0204 	orr.w	r2, r2, #4
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
 8002cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cbe:	f002 0204 	and.w	r2, r2, #4
 8002cc2:	9204      	str	r2, [sp, #16]
 8002cc4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc8:	f042 0201 	orr.w	r2, r2, #1
 8002ccc:	631a      	str	r2, [r3, #48]	; 0x30
 8002cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd0:	f002 0201 	and.w	r2, r2, #1
 8002cd4:	9205      	str	r2, [sp, #20]
 8002cd6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
 8002ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002ce6:	9206      	str	r2, [sp, #24]
 8002ce8:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
 8002cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002cf8:	9207      	str	r2, [sp, #28]
 8002cfa:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cfe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d02:	631a      	str	r2, [r3, #48]	; 0x30
 8002d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d06:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002d0a:	9208      	str	r2, [sp, #32]
 8002d0c:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d10:	f042 0220 	orr.w	r2, r2, #32
 8002d14:	631a      	str	r2, [r3, #48]	; 0x30
 8002d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d18:	f002 0220 	and.w	r2, r2, #32
 8002d1c:	9209      	str	r2, [sp, #36]	; 0x24
 8002d1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2e:	930a      	str	r3, [sp, #40]	; 0x28
 8002d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002d32:	2201      	movs	r2, #1
 8002d34:	2120      	movs	r1, #32
 8002d36:	4878      	ldr	r0, [pc, #480]	; (8002f18 <MX_GPIO_Init+0x2c0>)
 8002d38:	f001 f93c 	bl	8003fb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8002d3c:	4622      	mov	r2, r4
 8002d3e:	210c      	movs	r1, #12
 8002d40:	4876      	ldr	r0, [pc, #472]	; (8002f1c <MX_GPIO_Init+0x2c4>)
 8002d42:	f001 f937 	bl	8003fb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002d46:	2201      	movs	r2, #1
 8002d48:	2108      	movs	r1, #8
 8002d4a:	4875      	ldr	r0, [pc, #468]	; (8002f20 <MX_GPIO_Init+0x2c8>)
 8002d4c:	f001 f932 	bl	8003fb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002d50:	2201      	movs	r2, #1
 8002d52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d56:	4871      	ldr	r0, [pc, #452]	; (8002f1c <MX_GPIO_Init+0x2c4>)
 8002d58:	f001 f92c 	bl	8003fb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002d5c:	4622      	mov	r2, r4
 8002d5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d62:	4870      	ldr	r0, [pc, #448]	; (8002f24 <MX_GPIO_Init+0x2cc>)
 8002d64:	f001 f926 	bl	8003fb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002d68:	4622      	mov	r2, r4
 8002d6a:	21c8      	movs	r1, #200	; 0xc8
 8002d6c:	486e      	ldr	r0, [pc, #440]	; (8002f28 <MX_GPIO_Init+0x2d0>)
 8002d6e:	f001 f921 	bl	8003fb4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002d72:	2308      	movs	r3, #8
 8002d74:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d76:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d78:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002d7a:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8002f34 <MX_GPIO_Init+0x2dc>
 8002d7e:	a90b      	add	r1, sp, #44	; 0x2c
 8002d80:	4648      	mov	r0, r9
 8002d82:	f001 f825 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002d86:	2304      	movs	r3, #4
 8002d88:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8a:	2502      	movs	r5, #2
 8002d8c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d90:	2603      	movs	r6, #3
 8002d92:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002d94:	2309      	movs	r3, #9
 8002d96:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002d98:	a90b      	add	r1, sp, #44	; 0x2c
 8002d9a:	4648      	mov	r0, r9
 8002d9c:	f001 f818 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002da0:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002da4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002daa:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002dac:	230b      	movs	r3, #11
 8002dae:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002db0:	a90b      	add	r1, sp, #44	; 0x2c
 8002db2:	485d      	ldr	r0, [pc, #372]	; (8002f28 <MX_GPIO_Init+0x2d0>)
 8002db4:	f001 f80c 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002db8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002dbc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dbe:	2312      	movs	r3, #18
 8002dc0:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc4:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002dc6:	2304      	movs	r3, #4
 8002dc8:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dca:	f8df b16c 	ldr.w	fp, [pc, #364]	; 8002f38 <MX_GPIO_Init+0x2e0>
 8002dce:	a90b      	add	r1, sp, #44	; 0x2c
 8002dd0:	4658      	mov	r0, fp
 8002dd2:	f000 fffd 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002dd6:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002dda:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ddc:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dde:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de0:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002de2:	f04f 080a 	mov.w	r8, #10
 8002de6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dea:	a90b      	add	r1, sp, #44	; 0x2c
 8002dec:	4658      	mov	r0, fp
 8002dee:	f000 ffef 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002df2:	2310      	movs	r3, #16
 8002df4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfa:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002dfc:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002dfe:	a90b      	add	r1, sp, #44	; 0x2c
 8002e00:	4658      	mov	r0, fp
 8002e02:	f000 ffe5 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002e06:	2380      	movs	r3, #128	; 0x80
 8002e08:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002e10:	2308      	movs	r3, #8
 8002e12:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002e14:	a90b      	add	r1, sp, #44	; 0x2c
 8002e16:	4840      	ldr	r0, [pc, #256]	; (8002f18 <MX_GPIO_Init+0x2c0>)
 8002e18:	f000 ffda 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e20:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e22:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e26:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e28:	2701      	movs	r7, #1
 8002e2a:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002e2c:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8002f3c <MX_GPIO_Init+0x2e4>
 8002e30:	a90b      	add	r1, sp, #44	; 0x2c
 8002e32:	4650      	mov	r0, sl
 8002e34:	f000 ffcc 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002e38:	2360      	movs	r3, #96	; 0x60
 8002e3a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e40:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002e42:	230d      	movs	r3, #13
 8002e44:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e46:	a90b      	add	r1, sp, #44	; 0x2c
 8002e48:	4648      	mov	r0, r9
 8002e4a:	f000 ffc1 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e56:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e58:	2307      	movs	r3, #7
 8002e5a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002e5c:	a90b      	add	r1, sp, #44	; 0x2c
 8002e5e:	4658      	mov	r0, fp
 8002e60:	f000 ffb6 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002e64:	2340      	movs	r3, #64	; 0x40
 8002e66:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e68:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002e6e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002e72:	a90b      	add	r1, sp, #44	; 0x2c
 8002e74:	4658      	mov	r0, fp
 8002e76:	f000 ffab 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e7e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e80:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002e84:	a90b      	add	r1, sp, #44	; 0x2c
 8002e86:	4829      	ldr	r0, [pc, #164]	; (8002f2c <MX_GPIO_Init+0x2d4>)
 8002e88:	f000 ffa2 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002e8c:	2340      	movs	r3, #64	; 0x40
 8002e8e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002e90:	4b27      	ldr	r3, [pc, #156]	; (8002f30 <MX_GPIO_Init+0x2d8>)
 8002e92:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e94:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002e96:	a90b      	add	r1, sp, #44	; 0x2c
 8002e98:	481f      	ldr	r0, [pc, #124]	; (8002f18 <MX_GPIO_Init+0x2c0>)
 8002e9a:	f000 ff99 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8002e9e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002ea2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea8:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002eaa:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eae:	a90b      	add	r1, sp, #44	; 0x2c
 8002eb0:	4650      	mov	r0, sl
 8002eb2:	f000 ff8d 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002eb6:	23f0      	movs	r3, #240	; 0xf0
 8002eb8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eba:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ebe:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002ec0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002ec4:	a90b      	add	r1, sp, #44	; 0x2c
 8002ec6:	4815      	ldr	r0, [pc, #84]	; (8002f1c <MX_GPIO_Init+0x2c4>)
 8002ec8:	f000 ff82 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ed0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed6:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002ed8:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002edc:	a90b      	add	r1, sp, #44	; 0x2c
 8002ede:	4812      	ldr	r0, [pc, #72]	; (8002f28 <MX_GPIO_Init+0x2d0>)
 8002ee0:	f000 ff76 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002ee4:	2320      	movs	r3, #32
 8002ee6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ee8:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eea:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eec:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002eee:	a90b      	add	r1, sp, #44	; 0x2c
 8002ef0:	4809      	ldr	r0, [pc, #36]	; (8002f18 <MX_GPIO_Init+0x2c0>)
 8002ef2:	f000 ff6d 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002ef6:	2208      	movs	r2, #8
 8002ef8:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efa:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efe:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002f00:	220d      	movs	r2, #13
 8002f02:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002f04:	a90b      	add	r1, sp, #44	; 0x2c
 8002f06:	4804      	ldr	r0, [pc, #16]	; (8002f18 <MX_GPIO_Init+0x2c0>)
 8002f08:	f000 ff62 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8002f0c:	f241 030c 	movw	r3, #4108	; 0x100c
 8002f10:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f12:	e015      	b.n	8002f40 <MX_GPIO_Init+0x2e8>
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40020c00 	.word	0x40020c00
 8002f1c:	40022000 	.word	0x40022000
 8002f20:	40022800 	.word	0x40022800
 8002f24:	40021c00 	.word	0x40021c00
 8002f28:	40021800 	.word	0x40021800
 8002f2c:	40022400 	.word	0x40022400
 8002f30:	10120000 	.word	0x10120000
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40020400 	.word	0x40020400
 8002f3c:	40020000 	.word	0x40020000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f40:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f42:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f44:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002f46:	a90b      	add	r1, sp, #44	; 0x2c
 8002f48:	488e      	ldr	r0, [pc, #568]	; (8003184 <MX_GPIO_Init+0x52c>)
 8002f4a:	f000 ff41 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002f4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f52:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f54:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002f58:	f5a9 6900 	sub.w	r9, r9, #2048	; 0x800
 8002f5c:	a90b      	add	r1, sp, #44	; 0x2c
 8002f5e:	4648      	mov	r0, r9
 8002f60:	f000 ff36 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002f64:	2208      	movs	r2, #8
 8002f66:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f68:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6c:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002f6e:	a90b      	add	r1, sp, #44	; 0x2c
 8002f70:	4885      	ldr	r0, [pc, #532]	; (8003188 <MX_GPIO_Init+0x530>)
 8002f72:	f000 ff2d 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f7a:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f80:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002f82:	220d      	movs	r2, #13
 8002f84:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002f86:	a90b      	add	r1, sp, #44	; 0x2c
 8002f88:	4880      	ldr	r0, [pc, #512]	; (800318c <MX_GPIO_Init+0x534>)
 8002f8a:	f000 ff21 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002f8e:	2210      	movs	r2, #16
 8002f90:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f92:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002f96:	a90b      	add	r1, sp, #44	; 0x2c
 8002f98:	487d      	ldr	r0, [pc, #500]	; (8003190 <MX_GPIO_Init+0x538>)
 8002f9a:	f000 ff19 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002f9e:	f248 0304 	movw	r3, #32772	; 0x8004
 8002fa2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fa4:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002fa8:	a90b      	add	r1, sp, #44	; 0x2c
 8002faa:	487a      	ldr	r0, [pc, #488]	; (8003194 <MX_GPIO_Init+0x53c>)
 8002fac:	f000 ff10 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002fb0:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb6:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fb8:	2205      	movs	r2, #5
 8002fba:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002fbc:	a90b      	add	r1, sp, #44	; 0x2c
 8002fbe:	4871      	ldr	r0, [pc, #452]	; (8003184 <MX_GPIO_Init+0x52c>)
 8002fc0:	f000 ff06 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002fc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fc8:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fca:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fcc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fce:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002fd0:	a90b      	add	r1, sp, #44	; 0x2c
 8002fd2:	4870      	ldr	r0, [pc, #448]	; (8003194 <MX_GPIO_Init+0x53c>)
 8002fd4:	f000 fefc 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002fd8:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002fdc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fde:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002fe4:	220d      	movs	r2, #13
 8002fe6:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002fe8:	a90b      	add	r1, sp, #44	; 0x2c
 8002fea:	486a      	ldr	r0, [pc, #424]	; (8003194 <MX_GPIO_Init+0x53c>)
 8002fec:	f000 fef0 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002ff0:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff6:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002ff8:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002ffa:	a90b      	add	r1, sp, #44	; 0x2c
 8002ffc:	4861      	ldr	r0, [pc, #388]	; (8003184 <MX_GPIO_Init+0x52c>)
 8002ffe:	f000 fee7 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003006:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003008:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800300e:	2207      	movs	r2, #7
 8003010:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003012:	a90b      	add	r1, sp, #44	; 0x2c
 8003014:	4650      	mov	r0, sl
 8003016:	f000 fedb 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800301a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800301e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003020:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003024:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003026:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003028:	a90b      	add	r1, sp, #44	; 0x2c
 800302a:	4650      	mov	r0, sl
 800302c:	f000 fed0 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8003030:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003034:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003036:	4b58      	ldr	r3, [pc, #352]	; (8003198 <MX_GPIO_Init+0x540>)
 8003038:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800303c:	a90b      	add	r1, sp, #44	; 0x2c
 800303e:	4851      	ldr	r0, [pc, #324]	; (8003184 <MX_GPIO_Init+0x52c>)
 8003040:	f000 fec6 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003044:	23c0      	movs	r3, #192	; 0xc0
 8003046:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003048:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800304c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800304e:	2308      	movs	r3, #8
 8003050:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003052:	a90b      	add	r1, sp, #44	; 0x2c
 8003054:	4648      	mov	r0, r9
 8003056:	f000 febb 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800305a:	2310      	movs	r3, #16
 800305c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003062:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003064:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8003068:	a90b      	add	r1, sp, #44	; 0x2c
 800306a:	484a      	ldr	r0, [pc, #296]	; (8003194 <MX_GPIO_Init+0x53c>)
 800306c:	f000 feb0 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8003070:	23c8      	movs	r3, #200	; 0xc8
 8003072:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003074:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003076:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003078:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800307a:	a90b      	add	r1, sp, #44	; 0x2c
 800307c:	4843      	ldr	r0, [pc, #268]	; (800318c <MX_GPIO_Init+0x534>)
 800307e:	f000 fea7 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8003082:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8003086:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003088:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800308c:	a90b      	add	r1, sp, #44	; 0x2c
 800308e:	4843      	ldr	r0, [pc, #268]	; (800319c <MX_GPIO_Init+0x544>)
 8003090:	f000 fe9e 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8003094:	2305      	movs	r3, #5
 8003096:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003098:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800309c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800309e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030a2:	a90b      	add	r1, sp, #44	; 0x2c
 80030a4:	4648      	mov	r0, r9
 80030a6:	f000 fe93 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80030aa:	2332      	movs	r3, #50	; 0x32
 80030ac:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ae:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030b2:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80030b4:	230b      	movs	r3, #11
 80030b6:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030b8:	a90b      	add	r1, sp, #44	; 0x2c
 80030ba:	4648      	mov	r0, r9
 80030bc:	f000 fe88 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030c0:	2304      	movs	r3, #4
 80030c2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c8:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80030ca:	2309      	movs	r3, #9
 80030cc:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ce:	a90b      	add	r1, sp, #44	; 0x2c
 80030d0:	4658      	mov	r0, fp
 80030d2:	f000 fe7d 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80030d6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80030da:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030dc:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e0:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80030e2:	2309      	movs	r3, #9
 80030e4:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030e6:	a90b      	add	r1, sp, #44	; 0x2c
 80030e8:	4829      	ldr	r0, [pc, #164]	; (8003190 <MX_GPIO_Init+0x538>)
 80030ea:	f000 fe71 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80030ee:	2304      	movs	r3, #4
 80030f0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030f2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f4:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80030f6:	a90b      	add	r1, sp, #44	; 0x2c
 80030f8:	4824      	ldr	r0, [pc, #144]	; (800318c <MX_GPIO_Init+0x534>)
 80030fa:	f000 fe69 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80030fe:	2386      	movs	r3, #134	; 0x86
 8003100:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003102:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003104:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003106:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003108:	230b      	movs	r3, #11
 800310a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310c:	a90b      	add	r1, sp, #44	; 0x2c
 800310e:	4650      	mov	r0, sl
 8003110:	f000 fe5e 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8003114:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003116:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003118:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800311a:	a90b      	add	r1, sp, #44	; 0x2c
 800311c:	4650      	mov	r0, sl
 800311e:	f000 fe57 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8003122:	2350      	movs	r3, #80	; 0x50
 8003124:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003126:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800312c:	230d      	movs	r3, #13
 800312e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003130:	a90b      	add	r1, sp, #44	; 0x2c
 8003132:	4650      	mov	r0, sl
 8003134:	f000 fe4c 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8003138:	2328      	movs	r3, #40	; 0x28
 800313a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003140:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003142:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003146:	a90b      	add	r1, sp, #44	; 0x2c
 8003148:	4650      	mov	r0, sl
 800314a:	f000 fe41 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800314e:	2340      	movs	r3, #64	; 0x40
 8003150:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003152:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003154:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003156:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003158:	2309      	movs	r3, #9
 800315a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800315c:	a90b      	add	r1, sp, #44	; 0x2c
 800315e:	480d      	ldr	r0, [pc, #52]	; (8003194 <MX_GPIO_Init+0x53c>)
 8003160:	f000 fe36 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003164:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003168:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003170:	2305      	movs	r3, #5
 8003172:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003174:	a90b      	add	r1, sp, #44	; 0x2c
 8003176:	4658      	mov	r0, fp
 8003178:	f000 fe2a 	bl	8003dd0 <HAL_GPIO_Init>
}
 800317c:	b011      	add	sp, #68	; 0x44
 800317e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003182:	bf00      	nop
 8003184:	40022000 	.word	0x40022000
 8003188:	40022800 	.word	0x40022800
 800318c:	40021800 	.word	0x40021800
 8003190:	40020c00 	.word	0x40020c00
 8003194:	40021c00 	.word	0x40021c00
 8003198:	10120000 	.word	0x10120000
 800319c:	40021400 	.word	0x40021400

080031a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80031a2:	6802      	ldr	r2, [r0, #0]
 80031a4:	4b03      	ldr	r3, [pc, #12]	; (80031b4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d000      	beq.n	80031ac <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80031aa:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80031ac:	f000 fc16 	bl	80039dc <HAL_IncTick>
}
 80031b0:	e7fb      	b.n	80031aa <HAL_TIM_PeriodElapsedCallback+0xa>
 80031b2:	bf00      	nop
 80031b4:	40001000 	.word	0x40001000

080031b8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031b8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031ba:	e7fe      	b.n	80031ba <Error_Handler+0x2>

080031bc <MX_DMA2D_Init>:
{
 80031bc:	b508      	push	{r3, lr}
  hdma2d.Instance = DMA2D;
 80031be:	480c      	ldr	r0, [pc, #48]	; (80031f0 <MX_DMA2D_Init+0x34>)
 80031c0:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <MX_DMA2D_Init+0x38>)
 80031c2:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80031c4:	2300      	movs	r3, #0
 80031c6:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80031c8:	2202      	movs	r2, #2
 80031ca:	6082      	str	r2, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 80031cc:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80031ce:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80031d0:	62c2      	str	r2, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80031d2:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80031d4:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80031d6:	f000 fccb 	bl	8003b70 <HAL_DMA2D_Init>
 80031da:	b928      	cbnz	r0, 80031e8 <MX_DMA2D_Init+0x2c>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80031dc:	2101      	movs	r1, #1
 80031de:	4804      	ldr	r0, [pc, #16]	; (80031f0 <MX_DMA2D_Init+0x34>)
 80031e0:	f000 fd94 	bl	8003d0c <HAL_DMA2D_ConfigLayer>
 80031e4:	b910      	cbnz	r0, 80031ec <MX_DMA2D_Init+0x30>
}
 80031e6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80031e8:	f7ff ffe6 	bl	80031b8 <Error_Handler>
    Error_Handler();
 80031ec:	f7ff ffe4 	bl	80031b8 <Error_Handler>
 80031f0:	2003fd4c 	.word	0x2003fd4c
 80031f4:	4002b000 	.word	0x4002b000

080031f8 <MX_FMC_Init>:
{
 80031f8:	b500      	push	{lr}
 80031fa:	b089      	sub	sp, #36	; 0x24
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80031fc:	2300      	movs	r3, #0
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	9302      	str	r3, [sp, #8]
 8003202:	9303      	str	r3, [sp, #12]
 8003204:	9304      	str	r3, [sp, #16]
 8003206:	9305      	str	r3, [sp, #20]
 8003208:	9306      	str	r3, [sp, #24]
 800320a:	9307      	str	r3, [sp, #28]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800320c:	4813      	ldr	r0, [pc, #76]	; (800325c <MX_FMC_Init+0x64>)
 800320e:	4a14      	ldr	r2, [pc, #80]	; (8003260 <MX_FMC_Init+0x68>)
 8003210:	6002      	str	r2, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8003212:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003214:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8003216:	2104      	movs	r1, #4
 8003218:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800321a:	2210      	movs	r2, #16
 800321c:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800321e:	2240      	movs	r2, #64	; 0x40
 8003220:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8003222:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003226:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003228:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800322a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800322e:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8003230:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003234:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8003236:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8003238:	2302      	movs	r3, #2
 800323a:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 800323c:	2206      	movs	r2, #6
 800323e:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 8003240:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
 8003242:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8003244:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 2;
 8003246:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8003248:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800324a:	4469      	add	r1, sp
 800324c:	f002 fd91 	bl	8005d72 <HAL_SDRAM_Init>
 8003250:	b910      	cbnz	r0, 8003258 <MX_FMC_Init+0x60>
}
 8003252:	b009      	add	sp, #36	; 0x24
 8003254:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8003258:	f7ff ffae 	bl	80031b8 <Error_Handler>
 800325c:	2003fea0 	.word	0x2003fea0
 8003260:	a0000140 	.word	0xa0000140

08003264 <MX_I2C3_Init>:
{
 8003264:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 8003266:	4811      	ldr	r0, [pc, #68]	; (80032ac <MX_I2C3_Init+0x48>)
 8003268:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <MX_I2C3_Init+0x4c>)
 800326a:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800326c:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <MX_I2C3_Init+0x50>)
 800326e:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 224;
 8003270:	23e0      	movs	r3, #224	; 0xe0
 8003272:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003274:	2301      	movs	r3, #1
 8003276:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003278:	2300      	movs	r3, #0
 800327a:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800327c:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800327e:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003280:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003282:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003284:	f001 f80c 	bl	80042a0 <HAL_I2C_Init>
 8003288:	b950      	cbnz	r0, 80032a0 <MX_I2C3_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800328a:	2100      	movs	r1, #0
 800328c:	4807      	ldr	r0, [pc, #28]	; (80032ac <MX_I2C3_Init+0x48>)
 800328e:	f001 fa13 	bl	80046b8 <HAL_I2CEx_ConfigAnalogFilter>
 8003292:	b938      	cbnz	r0, 80032a4 <MX_I2C3_Init+0x40>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003294:	2100      	movs	r1, #0
 8003296:	4805      	ldr	r0, [pc, #20]	; (80032ac <MX_I2C3_Init+0x48>)
 8003298:	f001 fa3c 	bl	8004714 <HAL_I2CEx_ConfigDigitalFilter>
 800329c:	b920      	cbnz	r0, 80032a8 <MX_I2C3_Init+0x44>
}
 800329e:	bd08      	pop	{r3, pc}
    Error_Handler();
 80032a0:	f7ff ff8a 	bl	80031b8 <Error_Handler>
    Error_Handler();
 80032a4:	f7ff ff88 	bl	80031b8 <Error_Handler>
    Error_Handler();
 80032a8:	f7ff ff86 	bl	80031b8 <Error_Handler>
 80032ac:	2003fd8c 	.word	0x2003fd8c
 80032b0:	40005c00 	.word	0x40005c00
 80032b4:	00c0eaff 	.word	0x00c0eaff

080032b8 <MX_LTDC_Init>:
{
 80032b8:	b500      	push	{lr}
 80032ba:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80032bc:	2234      	movs	r2, #52	; 0x34
 80032be:	2100      	movs	r1, #0
 80032c0:	a801      	add	r0, sp, #4
 80032c2:	f002 ffff 	bl	80062c4 <memset>
  hltdc.Instance = LTDC;
 80032c6:	4826      	ldr	r0, [pc, #152]	; (8003360 <MX_LTDC_Init+0xa8>)
 80032c8:	4b26      	ldr	r3, [pc, #152]	; (8003364 <MX_LTDC_Init+0xac>)
 80032ca:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80032d0:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80032d2:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80032d4:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 40;
 80032d6:	2228      	movs	r2, #40	; 0x28
 80032d8:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 9;
 80032da:	2209      	movs	r2, #9
 80032dc:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80032de:	2235      	movs	r2, #53	; 0x35
 80032e0:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80032e2:	220b      	movs	r2, #11
 80032e4:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80032e6:	f240 2215 	movw	r2, #533	; 0x215
 80032ea:	6242      	str	r2, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80032ec:	f240 121b 	movw	r2, #283	; 0x11b
 80032f0:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80032f2:	f240 2235 	movw	r2, #565	; 0x235
 80032f6:	62c2      	str	r2, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80032f8:	f240 121d 	movw	r2, #285	; 0x11d
 80032fc:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80032fe:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003302:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003306:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800330a:	f001 fb0b 	bl	8004924 <HAL_LTDC_Init>
 800330e:	bb18      	cbnz	r0, 8003358 <MX_LTDC_Init+0xa0>
  pLayerCfg.WindowX0 = 0;
 8003310:	2200      	movs	r2, #0
 8003312:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 8003314:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003318:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 800331a:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 800331c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003320:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003322:	2002      	movs	r0, #2
 8003324:	9005      	str	r0, [sp, #20]
  pLayerCfg.Alpha = 255;
 8003326:	20ff      	movs	r0, #255	; 0xff
 8003328:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 800332a:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800332c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003330:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003332:	2005      	movs	r0, #5
 8003334:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8003336:	920a      	str	r2, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8003338:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800333a:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800333c:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8003340:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8003344:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003348:	a901      	add	r1, sp, #4
 800334a:	4805      	ldr	r0, [pc, #20]	; (8003360 <MX_LTDC_Init+0xa8>)
 800334c:	f001 fbd4 	bl	8004af8 <HAL_LTDC_ConfigLayer>
 8003350:	b920      	cbnz	r0, 800335c <MX_LTDC_Init+0xa4>
}
 8003352:	b00f      	add	sp, #60	; 0x3c
 8003354:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003358:	f7ff ff2e 	bl	80031b8 <Error_Handler>
    Error_Handler();
 800335c:	f7ff ff2c 	bl	80031b8 <Error_Handler>
 8003360:	2003fdd8 	.word	0x2003fdd8
 8003364:	40016800 	.word	0x40016800

08003368 <MX_RTC_Init>:
{
 8003368:	b510      	push	{r4, lr}
 800336a:	b092      	sub	sp, #72	; 0x48
  RTC_TimeTypeDef sTime = {0};
 800336c:	2400      	movs	r4, #0
 800336e:	940c      	str	r4, [sp, #48]	; 0x30
 8003370:	940d      	str	r4, [sp, #52]	; 0x34
 8003372:	940e      	str	r4, [sp, #56]	; 0x38
 8003374:	940f      	str	r4, [sp, #60]	; 0x3c
 8003376:	9410      	str	r4, [sp, #64]	; 0x40
 8003378:	9411      	str	r4, [sp, #68]	; 0x44
  RTC_DateTypeDef sDate = {0};
 800337a:	940b      	str	r4, [sp, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800337c:	222c      	movs	r2, #44	; 0x2c
 800337e:	4621      	mov	r1, r4
 8003380:	4668      	mov	r0, sp
 8003382:	f002 ff9f 	bl	80062c4 <memset>
  hrtc.Instance = RTC;
 8003386:	4831      	ldr	r0, [pc, #196]	; (800344c <MX_RTC_Init+0xe4>)
 8003388:	4b31      	ldr	r3, [pc, #196]	; (8003450 <MX_RTC_Init+0xe8>)
 800338a:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800338c:	6044      	str	r4, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 800338e:	237f      	movs	r3, #127	; 0x7f
 8003390:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8003392:	23ff      	movs	r3, #255	; 0xff
 8003394:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003396:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003398:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800339a:	6184      	str	r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800339c:	f002 faac 	bl	80058f8 <HAL_RTC_Init>
 80033a0:	2800      	cmp	r0, #0
 80033a2:	d147      	bne.n	8003434 <MX_RTC_Init+0xcc>
  sTime.Hours = 0x0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  sTime.Minutes = 0x0;
 80033aa:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  sTime.Seconds = 0x0;
 80033ae:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80033b2:	9310      	str	r3, [sp, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80033b4:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80033b6:	2201      	movs	r2, #1
 80033b8:	a90c      	add	r1, sp, #48	; 0x30
 80033ba:	4824      	ldr	r0, [pc, #144]	; (800344c <MX_RTC_Init+0xe4>)
 80033bc:	f002 fb0a 	bl	80059d4 <HAL_RTC_SetTime>
 80033c0:	2800      	cmp	r0, #0
 80033c2:	d139      	bne.n	8003438 <MX_RTC_Init+0xd0>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80033c4:	2201      	movs	r2, #1
 80033c6:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80033ca:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  sDate.Date = 0x1;
 80033ce:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
  sDate.Year = 0x0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80033d8:	a90b      	add	r1, sp, #44	; 0x2c
 80033da:	481c      	ldr	r0, [pc, #112]	; (800344c <MX_RTC_Init+0xe4>)
 80033dc:	f002 fb7a 	bl	8005ad4 <HAL_RTC_SetDate>
 80033e0:	bb60      	cbnz	r0, 800343c <MX_RTC_Init+0xd4>
  sAlarm.AlarmTime.Hours = 0x0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	f88d 3000 	strb.w	r3, [sp]
  sAlarm.AlarmTime.Minutes = 0x0;
 80033e8:	f88d 3001 	strb.w	r3, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80033ec:	f88d 3002 	strb.w	r3, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80033f0:	9301      	str	r3, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80033f2:	9304      	str	r3, [sp, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80033f4:	9305      	str	r3, [sp, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80033f6:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80033f8:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80033fa:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80033fc:	2201      	movs	r2, #1
 80033fe:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8003402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003406:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003408:	4669      	mov	r1, sp
 800340a:	4810      	ldr	r0, [pc, #64]	; (800344c <MX_RTC_Init+0xe4>)
 800340c:	f002 fbd0 	bl	8005bb0 <HAL_RTC_SetAlarm>
 8003410:	b9b0      	cbnz	r0, 8003440 <MX_RTC_Init+0xd8>
  sAlarm.Alarm = RTC_ALARM_B;
 8003412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003416:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003418:	2201      	movs	r2, #1
 800341a:	4669      	mov	r1, sp
 800341c:	480b      	ldr	r0, [pc, #44]	; (800344c <MX_RTC_Init+0xe4>)
 800341e:	f002 fbc7 	bl	8005bb0 <HAL_RTC_SetAlarm>
 8003422:	b978      	cbnz	r0, 8003444 <MX_RTC_Init+0xdc>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8003424:	2202      	movs	r2, #2
 8003426:	2100      	movs	r1, #0
 8003428:	4808      	ldr	r0, [pc, #32]	; (800344c <MX_RTC_Init+0xe4>)
 800342a:	f002 fc71 	bl	8005d10 <HAL_RTCEx_SetTimeStamp>
 800342e:	b958      	cbnz	r0, 8003448 <MX_RTC_Init+0xe0>
}
 8003430:	b012      	add	sp, #72	; 0x48
 8003432:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003434:	f7ff fec0 	bl	80031b8 <Error_Handler>
    Error_Handler();
 8003438:	f7ff febe 	bl	80031b8 <Error_Handler>
    Error_Handler();
 800343c:	f7ff febc 	bl	80031b8 <Error_Handler>
    Error_Handler();
 8003440:	f7ff feba 	bl	80031b8 <Error_Handler>
    Error_Handler();
 8003444:	f7ff feb8 	bl	80031b8 <Error_Handler>
    Error_Handler();
 8003448:	f7ff feb6 	bl	80031b8 <Error_Handler>
 800344c:	2003fe80 	.word	0x2003fe80
 8003450:	40002800 	.word	0x40002800

08003454 <SystemClock_Config>:
{
 8003454:	b500      	push	{lr}
 8003456:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003458:	2230      	movs	r2, #48	; 0x30
 800345a:	2100      	movs	r1, #0
 800345c:	a828      	add	r0, sp, #160	; 0xa0
 800345e:	f002 ff31 	bl	80062c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003462:	2100      	movs	r1, #0
 8003464:	9123      	str	r1, [sp, #140]	; 0x8c
 8003466:	9124      	str	r1, [sp, #144]	; 0x90
 8003468:	9125      	str	r1, [sp, #148]	; 0x94
 800346a:	9126      	str	r1, [sp, #152]	; 0x98
 800346c:	9127      	str	r1, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800346e:	2284      	movs	r2, #132	; 0x84
 8003470:	a802      	add	r0, sp, #8
 8003472:	f002 ff27 	bl	80062c4 <memset>
  HAL_PWR_EnableBkUpAccess();
 8003476:	f001 fb95 	bl	8004ba4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 800347a:	4b33      	ldr	r3, [pc, #204]	; (8003548 <SystemClock_Config+0xf4>)
 800347c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800347e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003482:	641a      	str	r2, [r3, #64]	; 0x40
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800348e:	4b2f      	ldr	r3, [pc, #188]	; (800354c <SystemClock_Config+0xf8>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80034a2:	2309      	movs	r3, #9
 80034a4:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034aa:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80034ac:	2301      	movs	r3, #1
 80034ae:	932d      	str	r3, [sp, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034b0:	2302      	movs	r3, #2
 80034b2:	932e      	str	r3, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80034b8:	922f      	str	r2, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80034ba:	2219      	movs	r2, #25
 80034bc:	9230      	str	r2, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80034be:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80034c2:	9231      	str	r2, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034c4:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80034c6:	2308      	movs	r3, #8
 80034c8:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034ca:	a828      	add	r0, sp, #160	; 0xa0
 80034cc:	f001 fbb0 	bl	8004c30 <HAL_RCC_OscConfig>
 80034d0:	2800      	cmp	r0, #0
 80034d2:	d131      	bne.n	8003538 <SystemClock_Config+0xe4>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80034d4:	f001 fb6e 	bl	8004bb4 <HAL_PWREx_EnableOverDrive>
 80034d8:	2800      	cmp	r0, #0
 80034da:	d12f      	bne.n	800353c <SystemClock_Config+0xe8>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034dc:	230f      	movs	r3, #15
 80034de:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034e0:	2302      	movs	r3, #2
 80034e2:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034e4:	2300      	movs	r3, #0
 80034e6:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80034e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80034ec:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80034ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034f2:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80034f4:	2106      	movs	r1, #6
 80034f6:	a823      	add	r0, sp, #140	; 0x8c
 80034f8:	f001 fe06 	bl	8005108 <HAL_RCC_ClockConfig>
 80034fc:	bb00      	cbnz	r0, 8003540 <SystemClock_Config+0xec>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 80034fe:	4b14      	ldr	r3, [pc, #80]	; (8003550 <SystemClock_Config+0xfc>)
 8003500:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8003502:	2364      	movs	r3, #100	; 0x64
 8003504:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003506:	2302      	movs	r3, #2
 8003508:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800350a:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800350c:	2300      	movs	r3, #0
 800350e:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003510:	2201      	movs	r2, #1
 8003512:	920c      	str	r2, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003514:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003518:	920d      	str	r2, [sp, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800351a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800351e:	920e      	str	r2, [sp, #56]	; 0x38
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003520:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8003522:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003526:	9221      	str	r2, [sp, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8003528:	9322      	str	r3, [sp, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800352a:	a802      	add	r0, sp, #8
 800352c:	f001 fed6 	bl	80052dc <HAL_RCCEx_PeriphCLKConfig>
 8003530:	b940      	cbnz	r0, 8003544 <SystemClock_Config+0xf0>
}
 8003532:	b035      	add	sp, #212	; 0xd4
 8003534:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003538:	f7ff fe3e 	bl	80031b8 <Error_Handler>
    Error_Handler();
 800353c:	f7ff fe3c 	bl	80031b8 <Error_Handler>
    Error_Handler();
 8003540:	f7ff fe3a 	bl	80031b8 <Error_Handler>
    Error_Handler();
 8003544:	f7ff fe38 	bl	80031b8 <Error_Handler>
 8003548:	40023800 	.word	0x40023800
 800354c:	40007000 	.word	0x40007000
 8003550:	00a10028 	.word	0x00a10028

08003554 <main>:
{
 8003554:	b508      	push	{r3, lr}
  MPU_Config();
 8003556:	f7ff fb53 	bl	8002c00 <MPU_Config>
  HAL_Init();
 800355a:	f000 fa2d 	bl	80039b8 <HAL_Init>
  SystemClock_Config();
 800355e:	f7ff ff79 	bl	8003454 <SystemClock_Config>
  HAL_Delay(500);
 8003562:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003566:	f000 fa4b 	bl	8003a00 <HAL_Delay>
  MX_GPIO_Init();
 800356a:	f7ff fb75 	bl	8002c58 <MX_GPIO_Init>
  MX_DMA2D_Init();
 800356e:	f7ff fe25 	bl	80031bc <MX_DMA2D_Init>
  MX_FMC_Init();
 8003572:	f7ff fe41 	bl	80031f8 <MX_FMC_Init>
  MX_I2C3_Init();
 8003576:	f7ff fe75 	bl	8003264 <MX_I2C3_Init>
  MX_LTDC_Init();
 800357a:	f7ff fe9d 	bl	80032b8 <MX_LTDC_Init>
  MX_RTC_Init();
 800357e:	f7ff fef3 	bl	8003368 <MX_RTC_Init>
	  MainFunc ();
 8003582:	f7ff f84d 	bl	8002620 <MainFunc>
  while (1)
 8003586:	e7fc      	b.n	8003582 <main+0x2e>

08003588 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800358a:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800358c:	2300      	movs	r3, #0
 800358e:	9301      	str	r3, [sp, #4]
 8003590:	9302      	str	r3, [sp, #8]
 8003592:	9303      	str	r3, [sp, #12]
 8003594:	9304      	str	r3, [sp, #16]
 8003596:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8003598:	4b2a      	ldr	r3, [pc, #168]	; (8003644 <HAL_FMC_MspInit+0xbc>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	b10b      	cbz	r3, 80035a2 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800359e:	b007      	add	sp, #28
 80035a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 80035a2:	4b28      	ldr	r3, [pc, #160]	; (8003644 <HAL_FMC_MspInit+0xbc>)
 80035a4:	2201      	movs	r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 80035a8:	4b27      	ldr	r3, [pc, #156]	; (8003648 <HAL_FMC_MspInit+0xc0>)
 80035aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035ac:	f042 0201 	orr.w	r2, r2, #1
 80035b0:	639a      	str	r2, [r3, #56]	; 0x38
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80035bc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80035c0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2602      	movs	r6, #2
 80035c4:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c6:	2503      	movs	r5, #3
 80035c8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035ca:	240c      	movs	r4, #12
 80035cc:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035ce:	a901      	add	r1, sp, #4
 80035d0:	481e      	ldr	r0, [pc, #120]	; (800364c <HAL_FMC_MspInit+0xc4>)
 80035d2:	f000 fbfd 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80035d6:	f248 1333 	movw	r3, #33075	; 0x8133
 80035da:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035dc:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2700      	movs	r7, #0
 80035e0:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035e4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035e6:	a901      	add	r1, sp, #4
 80035e8:	4819      	ldr	r0, [pc, #100]	; (8003650 <HAL_FMC_MspInit+0xc8>)
 80035ea:	f000 fbf1 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80035ee:	f24c 7303 	movw	r3, #50947	; 0xc703
 80035f2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f4:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035fa:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035fc:	a901      	add	r1, sp, #4
 80035fe:	4815      	ldr	r0, [pc, #84]	; (8003654 <HAL_FMC_MspInit+0xcc>)
 8003600:	f000 fbe6 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003604:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003608:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360a:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800360e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003610:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003612:	a901      	add	r1, sp, #4
 8003614:	4810      	ldr	r0, [pc, #64]	; (8003658 <HAL_FMC_MspInit+0xd0>)
 8003616:	f000 fbdb 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800361a:	2328      	movs	r3, #40	; 0x28
 800361c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361e:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003622:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003624:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003626:	a901      	add	r1, sp, #4
 8003628:	480c      	ldr	r0, [pc, #48]	; (800365c <HAL_FMC_MspInit+0xd4>)
 800362a:	f000 fbd1 	bl	8003dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800362e:	2308      	movs	r3, #8
 8003630:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003632:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003634:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003636:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003638:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800363a:	a901      	add	r1, sp, #4
 800363c:	4808      	ldr	r0, [pc, #32]	; (8003660 <HAL_FMC_MspInit+0xd8>)
 800363e:	f000 fbc7 	bl	8003dd0 <HAL_GPIO_Init>
 8003642:	e7ac      	b.n	800359e <HAL_FMC_MspInit+0x16>
 8003644:	2003fed4 	.word	0x2003fed4
 8003648:	40023800 	.word	0x40023800
 800364c:	40021000 	.word	0x40021000
 8003650:	40021800 	.word	0x40021800
 8003654:	40020c00 	.word	0x40020c00
 8003658:	40021400 	.word	0x40021400
 800365c:	40021c00 	.word	0x40021c00
 8003660:	40020800 	.word	0x40020800

08003664 <HAL_MspInit>:
{
 8003664:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8003666:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <HAL_MspInit+0x2c>)
 8003668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800366a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800366e:	641a      	str	r2, [r3, #64]	; 0x40
 8003670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003672:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003676:	9200      	str	r2, [sp, #0]
 8003678:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800367c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003680:	645a      	str	r2, [r3, #68]	; 0x44
 8003682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	9b01      	ldr	r3, [sp, #4]
}
 800368c:	b002      	add	sp, #8
 800368e:	4770      	bx	lr
 8003690:	40023800 	.word	0x40023800

08003694 <HAL_DMA2D_MspInit>:
  if(hdma2d->Instance==DMA2D)
 8003694:	6802      	ldr	r2, [r0, #0]
 8003696:	4b0e      	ldr	r3, [pc, #56]	; (80036d0 <HAL_DMA2D_MspInit+0x3c>)
 8003698:	429a      	cmp	r2, r3
 800369a:	d000      	beq.n	800369e <HAL_DMA2D_MspInit+0xa>
 800369c:	4770      	bx	lr
{
 800369e:	b500      	push	{lr}
 80036a0:	b083      	sub	sp, #12
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80036a2:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 80036a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80036ac:	631a      	str	r2, [r3, #48]	; 0x30
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036b4:	9301      	str	r3, [sp, #4]
 80036b6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80036b8:	2200      	movs	r2, #0
 80036ba:	4611      	mov	r1, r2
 80036bc:	205a      	movs	r0, #90	; 0x5a
 80036be:	f000 f9c5 	bl	8003a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80036c2:	205a      	movs	r0, #90	; 0x5a
 80036c4:	f000 f9f8 	bl	8003ab8 <HAL_NVIC_EnableIRQ>
}
 80036c8:	b003      	add	sp, #12
 80036ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80036ce:	bf00      	nop
 80036d0:	4002b000 	.word	0x4002b000

080036d4 <HAL_I2C_MspInit>:
{
 80036d4:	b510      	push	{r4, lr}
 80036d6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d8:	2300      	movs	r3, #0
 80036da:	9303      	str	r3, [sp, #12]
 80036dc:	9304      	str	r3, [sp, #16]
 80036de:	9305      	str	r3, [sp, #20]
 80036e0:	9306      	str	r3, [sp, #24]
 80036e2:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C3)
 80036e4:	6802      	ldr	r2, [r0, #0]
 80036e6:	4b14      	ldr	r3, [pc, #80]	; (8003738 <HAL_I2C_MspInit+0x64>)
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_I2C_MspInit+0x1c>
}
 80036ec:	b008      	add	sp, #32
 80036ee:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80036f0:	4c12      	ldr	r4, [pc, #72]	; (800373c <HAL_I2C_MspInit+0x68>)
 80036f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80036f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f8:	6323      	str	r3, [r4, #48]	; 0x30
 80036fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80036fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003704:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003708:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800370a:	2312      	movs	r3, #18
 800370c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800370e:	2301      	movs	r3, #1
 8003710:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003712:	2303      	movs	r3, #3
 8003714:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003716:	2304      	movs	r3, #4
 8003718:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800371a:	a903      	add	r1, sp, #12
 800371c:	4808      	ldr	r0, [pc, #32]	; (8003740 <HAL_I2C_MspInit+0x6c>)
 800371e:	f000 fb57 	bl	8003dd0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003722:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003724:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003728:	6423      	str	r3, [r4, #64]	; 0x40
 800372a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800372c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003730:	9302      	str	r3, [sp, #8]
 8003732:	9b02      	ldr	r3, [sp, #8]
}
 8003734:	e7da      	b.n	80036ec <HAL_I2C_MspInit+0x18>
 8003736:	bf00      	nop
 8003738:	40005c00 	.word	0x40005c00
 800373c:	40023800 	.word	0x40023800
 8003740:	40021c00 	.word	0x40021c00

08003744 <HAL_LTDC_MspInit>:
{
 8003744:	b570      	push	{r4, r5, r6, lr}
 8003746:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003748:	2300      	movs	r3, #0
 800374a:	9307      	str	r3, [sp, #28]
 800374c:	9308      	str	r3, [sp, #32]
 800374e:	9309      	str	r3, [sp, #36]	; 0x24
 8003750:	930a      	str	r3, [sp, #40]	; 0x28
 8003752:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hltdc->Instance==LTDC)
 8003754:	6802      	ldr	r2, [r0, #0]
 8003756:	4b3e      	ldr	r3, [pc, #248]	; (8003850 <HAL_LTDC_MspInit+0x10c>)
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_LTDC_MspInit+0x1c>
}
 800375c:	b00c      	add	sp, #48	; 0x30
 800375e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003760:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8003764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003766:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800376a:	645a      	str	r2, [r3, #68]	; 0x44
 800376c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800376e:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8003772:	9201      	str	r2, [sp, #4]
 8003774:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003778:	f042 0210 	orr.w	r2, r2, #16
 800377c:	631a      	str	r2, [r3, #48]	; 0x30
 800377e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003780:	f002 0210 	and.w	r2, r2, #16
 8003784:	9202      	str	r2, [sp, #8]
 8003786:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800378a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378e:	631a      	str	r2, [r3, #48]	; 0x30
 8003790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003792:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003796:	9203      	str	r2, [sp, #12]
 8003798:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800379a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800379c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037a0:	631a      	str	r2, [r3, #48]	; 0x30
 80037a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037a4:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80037a8:	9204      	str	r2, [sp, #16]
 80037aa:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80037ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
 80037b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037b6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80037ba:	9205      	str	r2, [sp, #20]
 80037bc:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80037be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037c4:	631a      	str	r2, [r3, #48]	; 0x30
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037cc:	9306      	str	r3, [sp, #24]
 80037ce:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80037d0:	2310      	movs	r3, #16
 80037d2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d4:	2502      	movs	r5, #2
 80037d6:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80037d8:	260e      	movs	r6, #14
 80037da:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80037dc:	a907      	add	r1, sp, #28
 80037de:	481d      	ldr	r0, [pc, #116]	; (8003854 <HAL_LTDC_MspInit+0x110>)
 80037e0:	f000 faf6 	bl	8003dd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80037e4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80037e8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ea:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ec:	2400      	movs	r4, #0
 80037ee:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f0:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80037f2:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80037f4:	a907      	add	r1, sp, #28
 80037f6:	4818      	ldr	r0, [pc, #96]	; (8003858 <HAL_LTDC_MspInit+0x114>)
 80037f8:	f000 faea 	bl	8003dd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80037fc:	23f7      	movs	r3, #247	; 0xf7
 80037fe:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003800:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003802:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003804:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003806:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003808:	a907      	add	r1, sp, #28
 800380a:	4814      	ldr	r0, [pc, #80]	; (800385c <HAL_LTDC_MspInit+0x118>)
 800380c:	f000 fae0 	bl	8003dd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003814:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003816:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003818:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381a:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800381c:	2309      	movs	r3, #9
 800381e:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003820:	a907      	add	r1, sp, #28
 8003822:	480f      	ldr	r0, [pc, #60]	; (8003860 <HAL_LTDC_MspInit+0x11c>)
 8003824:	f000 fad4 	bl	8003dd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003828:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800382c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003830:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003832:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003834:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003836:	a907      	add	r1, sp, #28
 8003838:	480a      	ldr	r0, [pc, #40]	; (8003864 <HAL_LTDC_MspInit+0x120>)
 800383a:	f000 fac9 	bl	8003dd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800383e:	4622      	mov	r2, r4
 8003840:	4621      	mov	r1, r4
 8003842:	2058      	movs	r0, #88	; 0x58
 8003844:	f000 f902 	bl	8003a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003848:	2058      	movs	r0, #88	; 0x58
 800384a:	f000 f935 	bl	8003ab8 <HAL_NVIC_EnableIRQ>
}
 800384e:	e785      	b.n	800375c <HAL_LTDC_MspInit+0x18>
 8003850:	40016800 	.word	0x40016800
 8003854:	40021000 	.word	0x40021000
 8003858:	40022400 	.word	0x40022400
 800385c:	40022800 	.word	0x40022800
 8003860:	40021800 	.word	0x40021800
 8003864:	40022000 	.word	0x40022000

08003868 <HAL_RTC_MspInit>:
  if(hrtc->Instance==RTC)
 8003868:	6802      	ldr	r2, [r0, #0]
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <HAL_RTC_MspInit+0x18>)
 800386c:	429a      	cmp	r2, r3
 800386e:	d000      	beq.n	8003872 <HAL_RTC_MspInit+0xa>
}
 8003870:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8003872:	4a04      	ldr	r2, [pc, #16]	; (8003884 <HAL_RTC_MspInit+0x1c>)
 8003874:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800387a:	6713      	str	r3, [r2, #112]	; 0x70
}
 800387c:	e7f8      	b.n	8003870 <HAL_RTC_MspInit+0x8>
 800387e:	bf00      	nop
 8003880:	40002800 	.word	0x40002800
 8003884:	40023800 	.word	0x40023800

08003888 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003888:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800388a:	f7ff fe7d 	bl	8003588 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800388e:	bd08      	pop	{r3, pc}

08003890 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003890:	b500      	push	{lr}
 8003892:	b089      	sub	sp, #36	; 0x24
 8003894:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003896:	2200      	movs	r2, #0
 8003898:	2036      	movs	r0, #54	; 0x36
 800389a:	f000 f8d7 	bl	8003a4c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800389e:	2036      	movs	r0, #54	; 0x36
 80038a0:	f000 f90a 	bl	8003ab8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80038a4:	4b15      	ldr	r3, [pc, #84]	; (80038fc <HAL_InitTick+0x6c>)
 80038a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038a8:	f042 0210 	orr.w	r2, r2, #16
 80038ac:	641a      	str	r2, [r3, #64]	; 0x40
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	9301      	str	r3, [sp, #4]
 80038b6:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038b8:	a902      	add	r1, sp, #8
 80038ba:	a803      	add	r0, sp, #12
 80038bc:	f001 fcf0 	bl	80052a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80038c0:	f001 fcde 	bl	8005280 <HAL_RCC_GetPCLK1Freq>
 80038c4:	0043      	lsls	r3, r0, #1
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038c6:	480e      	ldr	r0, [pc, #56]	; (8003900 <HAL_InitTick+0x70>)
 80038c8:	fba0 2303 	umull	r2, r3, r0, r3
 80038cc:	0c9b      	lsrs	r3, r3, #18
 80038ce:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80038d0:	480c      	ldr	r0, [pc, #48]	; (8003904 <HAL_InitTick+0x74>)
 80038d2:	4a0d      	ldr	r2, [pc, #52]	; (8003908 <HAL_InitTick+0x78>)
 80038d4:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80038d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038da:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80038dc:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038e2:	6083      	str	r3, [r0, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80038e4:	f002 fc08 	bl	80060f8 <HAL_TIM_Base_Init>
 80038e8:	b118      	cbz	r0, 80038f2 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
 80038ea:	2001      	movs	r0, #1
}
 80038ec:	b009      	add	sp, #36	; 0x24
 80038ee:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim6);
 80038f2:	4804      	ldr	r0, [pc, #16]	; (8003904 <HAL_InitTick+0x74>)
 80038f4:	f002 fa5e 	bl	8005db4 <HAL_TIM_Base_Start_IT>
 80038f8:	e7f8      	b.n	80038ec <HAL_InitTick+0x5c>
 80038fa:	bf00      	nop
 80038fc:	40023800 	.word	0x40023800
 8003900:	431bde83 	.word	0x431bde83
 8003904:	2003fed8 	.word	0x2003fed8
 8003908:	40001000 	.word	0x40001000

0800390c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800390c:	e7fe      	b.n	800390c <NMI_Handler>

0800390e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800390e:	e7fe      	b.n	800390e <HardFault_Handler>

08003910 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003910:	e7fe      	b.n	8003910 <MemManage_Handler>

08003912 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003912:	e7fe      	b.n	8003912 <BusFault_Handler>

08003914 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003914:	e7fe      	b.n	8003914 <UsageFault_Handler>

08003916 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003916:	4770      	bx	lr

08003918 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003918:	4770      	bx	lr

0800391a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800391a:	4770      	bx	lr

0800391c <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800391c:	4770      	bx	lr
	...

08003920 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003920:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003922:	4802      	ldr	r0, [pc, #8]	; (800392c <TIM6_DAC_IRQHandler+0xc>)
 8003924:	f002 fa92 	bl	8005e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003928:	bd08      	pop	{r3, pc}
 800392a:	bf00      	nop
 800392c:	2003fed8 	.word	0x2003fed8

08003930 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003930:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003932:	4802      	ldr	r0, [pc, #8]	; (800393c <LTDC_IRQHandler+0xc>)
 8003934:	f001 f873 	bl	8004a1e <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003938:	bd08      	pop	{r3, pc}
 800393a:	bf00      	nop
 800393c:	2003fdd8 	.word	0x2003fdd8

08003940 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003940:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003942:	4802      	ldr	r0, [pc, #8]	; (800394c <DMA2D_IRQHandler+0xc>)
 8003944:	f000 f944 	bl	8003bd0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003948:	bd08      	pop	{r3, pc}
 800394a:	bf00      	nop
 800394c:	2003fd4c 	.word	0x2003fd4c

08003950 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003950:	4a03      	ldr	r2, [pc, #12]	; (8003960 <SystemInit+0x10>)
 8003952:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003956:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800395a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800395e:	4770      	bx	lr
 8003960:	e000ed00 	.word	0xe000ed00

08003964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800399c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003968:	480d      	ldr	r0, [pc, #52]	; (80039a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800396a:	490e      	ldr	r1, [pc, #56]	; (80039a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800396c:	4a0e      	ldr	r2, [pc, #56]	; (80039a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800396e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003970:	e002      	b.n	8003978 <LoopCopyDataInit>

08003972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003976:	3304      	adds	r3, #4

08003978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800397a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800397c:	d3f9      	bcc.n	8003972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800397e:	4a0b      	ldr	r2, [pc, #44]	; (80039ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003980:	4c0b      	ldr	r4, [pc, #44]	; (80039b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003984:	e001      	b.n	800398a <LoopFillZerobss>

08003986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003988:	3204      	adds	r2, #4

0800398a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800398a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800398c:	d3fb      	bcc.n	8003986 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800398e:	f7ff ffdf 	bl	8003950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003992:	f002 fc73 	bl	800627c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003996:	f7ff fddd 	bl	8003554 <main>
  bx  lr    
 800399a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800399c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80039a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039a4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80039a8:	0800805c 	.word	0x0800805c
  ldr r2, =_sbss
 80039ac:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80039b0:	2003ff28 	.word	0x2003ff28

080039b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039b4:	e7fe      	b.n	80039b4 <ADC_IRQHandler>
	...

080039b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039b8:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80039ba:	4a07      	ldr	r2, [pc, #28]	; (80039d8 <HAL_Init+0x20>)
 80039bc:	6813      	ldr	r3, [r2, #0]
 80039be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039c2:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039c4:	2003      	movs	r0, #3
 80039c6:	f000 f82f 	bl	8003a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039ca:	2000      	movs	r0, #0
 80039cc:	f7ff ff60 	bl	8003890 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80039d0:	f7ff fe48 	bl	8003664 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80039d4:	2000      	movs	r0, #0
 80039d6:	bd08      	pop	{r3, pc}
 80039d8:	40023c00 	.word	0x40023c00

080039dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80039dc:	4a03      	ldr	r2, [pc, #12]	; (80039ec <HAL_IncTick+0x10>)
 80039de:	6811      	ldr	r1, [r2, #0]
 80039e0:	4b03      	ldr	r3, [pc, #12]	; (80039f0 <HAL_IncTick+0x14>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	440b      	add	r3, r1
 80039e6:	6013      	str	r3, [r2, #0]
}
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	2003ff24 	.word	0x2003ff24
 80039f0:	2000000c 	.word	0x2000000c

080039f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80039f4:	4b01      	ldr	r3, [pc, #4]	; (80039fc <HAL_GetTick+0x8>)
 80039f6:	6818      	ldr	r0, [r3, #0]
}
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	2003ff24 	.word	0x2003ff24

08003a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a00:	b538      	push	{r3, r4, r5, lr}
 8003a02:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003a04:	f7ff fff6 	bl	80039f4 <HAL_GetTick>
 8003a08:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a0a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003a0e:	d002      	beq.n	8003a16 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a10:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <HAL_Delay+0x24>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a16:	f7ff ffed 	bl	80039f4 <HAL_GetTick>
 8003a1a:	1b40      	subs	r0, r0, r5
 8003a1c:	42a0      	cmp	r0, r4
 8003a1e:	d3fa      	bcc.n	8003a16 <HAL_Delay+0x16>
  {
  }
}
 8003a20:	bd38      	pop	{r3, r4, r5, pc}
 8003a22:	bf00      	nop
 8003a24:	2000000c 	.word	0x2000000c

08003a28 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a28:	4906      	ldr	r1, [pc, #24]	; (8003a44 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8003a2a:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a2c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a30:	041b      	lsls	r3, r3, #16
 8003a32:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a34:	0200      	lsls	r0, r0, #8
 8003a36:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a3a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003a3c:	4a02      	ldr	r2, [pc, #8]	; (8003a48 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003a3e:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8003a40:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003a42:	4770      	bx	lr
 8003a44:	e000ed00 	.word	0xe000ed00
 8003a48:	05fa0000 	.word	0x05fa0000

08003a4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a4c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a4e:	4b17      	ldr	r3, [pc, #92]	; (8003aac <HAL_NVIC_SetPriority+0x60>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a56:	f1c3 0c07 	rsb	ip, r3, #7
 8003a5a:	f1bc 0f04 	cmp.w	ip, #4
 8003a5e:	bf28      	it	cs
 8003a60:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a64:	f103 0e04 	add.w	lr, r3, #4
 8003a68:	f1be 0f06 	cmp.w	lr, #6
 8003a6c:	d914      	bls.n	8003a98 <HAL_NVIC_SetPriority+0x4c>
 8003a6e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a70:	f04f 3eff 	mov.w	lr, #4294967295
 8003a74:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003a78:	ea21 010c 	bic.w	r1, r1, ip
 8003a7c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a7e:	fa0e f303 	lsl.w	r3, lr, r3
 8003a82:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a86:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003a88:	2800      	cmp	r0, #0
 8003a8a:	db07      	blt.n	8003a9c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a8c:	0109      	lsls	r1, r1, #4
 8003a8e:	b2c9      	uxtb	r1, r1
 8003a90:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <HAL_NVIC_SetPriority+0x64>)
 8003a92:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003a94:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e7e9      	b.n	8003a70 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9c:	f000 000f 	and.w	r0, r0, #15
 8003aa0:	0109      	lsls	r1, r1, #4
 8003aa2:	b2c9      	uxtb	r1, r1
 8003aa4:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <HAL_NVIC_SetPriority+0x68>)
 8003aa6:	5419      	strb	r1, [r3, r0]
 8003aa8:	e7f4      	b.n	8003a94 <HAL_NVIC_SetPriority+0x48>
 8003aaa:	bf00      	nop
 8003aac:	e000ed00 	.word	0xe000ed00
 8003ab0:	e000e400 	.word	0xe000e400
 8003ab4:	e000ed14 	.word	0xe000ed14

08003ab8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	db07      	blt.n	8003acc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003abc:	f000 021f 	and.w	r2, r0, #31
 8003ac0:	0940      	lsrs	r0, r0, #5
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	4093      	lsls	r3, r2
 8003ac6:	4a02      	ldr	r2, [pc, #8]	; (8003ad0 <HAL_NVIC_EnableIRQ+0x18>)
 8003ac8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	e000e100 	.word	0xe000e100

08003ad4 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003ad4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003ad8:	4b04      	ldr	r3, [pc, #16]	; (8003aec <HAL_MPU_Disable+0x18>)
 8003ada:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003adc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ae0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003af0:	f040 0001 	orr.w	r0, r0, #1
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <HAL_MPU_Enable+0x1c>)
 8003af6:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003afc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b00:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003b02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003b06:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003b0a:	4770      	bx	lr
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003b10:	7842      	ldrb	r2, [r0, #1]
 8003b12:	4b16      	ldr	r3, [pc, #88]	; (8003b6c <HAL_MPU_ConfigRegion+0x5c>)
 8003b14:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 8003b18:	7803      	ldrb	r3, [r0, #0]
 8003b1a:	b1fb      	cbz	r3, 8003b5c <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8003b1c:	6843      	ldr	r3, [r0, #4]
 8003b1e:	4a13      	ldr	r2, [pc, #76]	; (8003b6c <HAL_MPU_ConfigRegion+0x5c>)
 8003b20:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003b24:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003b26:	7ac3      	ldrb	r3, [r0, #11]
 8003b28:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003b2a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003b2e:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003b30:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003b34:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003b36:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003b3a:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003b3c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003b40:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003b42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003b46:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003b48:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003b4c:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003b4e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003b52:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003b54:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003b56:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8003b5a:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8003b5c:	4b03      	ldr	r3, [pc, #12]	; (8003b6c <HAL_MPU_ConfigRegion+0x5c>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 8003b64:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	e000ed00 	.word	0xe000ed00

08003b70 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003b70:	b338      	cbz	r0, 8003bc2 <HAL_DMA2D_Init+0x52>
{
 8003b72:	b510      	push	{r4, lr}
 8003b74:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003b76:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003b7a:	b1eb      	cbz	r3, 8003bb8 <HAL_DMA2D_Init+0x48>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003b82:	6822      	ldr	r2, [r4, #0]
 8003b84:	6813      	ldr	r3, [r2, #0]
 8003b86:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003b8a:	6861      	ldr	r1, [r4, #4]
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003b90:	6822      	ldr	r2, [r4, #0]
 8003b92:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003b94:	f023 0307 	bic.w	r3, r3, #7
 8003b98:	68a1      	ldr	r1, [r4, #8]
 8003b9a:	430b      	orrs	r3, r1
 8003b9c:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003b9e:	6822      	ldr	r2, [r4, #0]
 8003ba0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003ba2:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <HAL_DMA2D_Init+0x58>)
 8003ba4:	400b      	ands	r3, r1
 8003ba6:	68e1      	ldr	r1, [r4, #12]
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003bac:	2000      	movs	r0, #0
 8003bae:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 8003bb6:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8003bb8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8003bbc:	f7ff fd6a 	bl	8003694 <HAL_DMA2D_MspInit>
 8003bc0:	e7dc      	b.n	8003b7c <HAL_DMA2D_Init+0xc>
    return HAL_ERROR;
 8003bc2:	2001      	movs	r0, #1
}
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	ffffc000 	.word	0xffffc000

08003bcc <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003bcc:	4770      	bx	lr

08003bce <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003bce:	4770      	bx	lr

08003bd0 <HAL_DMA2D_IRQHandler>:
{
 8003bd0:	b570      	push	{r4, r5, r6, lr}
 8003bd2:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003bd4:	6803      	ldr	r3, [r0, #0]
 8003bd6:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003bd8:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003bda:	f015 0f01 	tst.w	r5, #1
 8003bde:	d016      	beq.n	8003c0e <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003be0:	f416 7f80 	tst.w	r6, #256	; 0x100
 8003be4:	d013      	beq.n	8003c0e <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bec:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003bee:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	63c3      	str	r3, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003bf6:	6803      	ldr	r3, [r0, #0]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003bfc:	2304      	movs	r3, #4
 8003bfe:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8003c02:	2300      	movs	r3, #0
 8003c04:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8003c08:	6943      	ldr	r3, [r0, #20]
 8003c0a:	b103      	cbz	r3, 8003c0e <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 8003c0c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003c0e:	f015 0f20 	tst.w	r5, #32
 8003c12:	d018      	beq.n	8003c46 <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003c14:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8003c18:	d015      	beq.n	8003c46 <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003c1a:	6822      	ldr	r2, [r4, #0]
 8003c1c:	6813      	ldr	r3, [r2, #0]
 8003c1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c22:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003c24:	6823      	ldr	r3, [r4, #0]
 8003c26:	2220      	movs	r2, #32
 8003c28:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003c2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c2c:	f043 0302 	orr.w	r3, r3, #2
 8003c30:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c32:	2304      	movs	r3, #4
 8003c34:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8003c3e:	6963      	ldr	r3, [r4, #20]
 8003c40:	b10b      	cbz	r3, 8003c46 <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 8003c42:	4620      	mov	r0, r4
 8003c44:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003c46:	f015 0f08 	tst.w	r5, #8
 8003c4a:	d018      	beq.n	8003c7e <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003c4c:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8003c50:	d015      	beq.n	8003c7e <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003c52:	6822      	ldr	r2, [r4, #0]
 8003c54:	6813      	ldr	r3, [r2, #0]
 8003c56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c5a:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	2208      	movs	r2, #8
 8003c60:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003c62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c64:	f043 0304 	orr.w	r3, r3, #4
 8003c68:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c6a:	2304      	movs	r3, #4
 8003c6c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8003c70:	2300      	movs	r3, #0
 8003c72:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8003c76:	6963      	ldr	r3, [r4, #20]
 8003c78:	b10b      	cbz	r3, 8003c7e <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003c7e:	f015 0f04 	tst.w	r5, #4
 8003c82:	d002      	beq.n	8003c8a <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003c84:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8003c88:	d120      	bne.n	8003ccc <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003c8a:	f015 0f02 	tst.w	r5, #2
 8003c8e:	d016      	beq.n	8003cbe <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003c90:	f416 7f00 	tst.w	r6, #512	; 0x200
 8003c94:	d013      	beq.n	8003cbe <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003c96:	6822      	ldr	r2, [r4, #0]
 8003c98:	6813      	ldr	r3, [r2, #0]
 8003c9a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c9e:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003ca6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ca8:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003caa:	2301      	movs	r3, #1
 8003cac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8003cb6:	6923      	ldr	r3, [r4, #16]
 8003cb8:	b10b      	cbz	r3, 8003cbe <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 8003cba:	4620      	mov	r0, r4
 8003cbc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003cbe:	f015 0f10 	tst.w	r5, #16
 8003cc2:	d002      	beq.n	8003cca <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003cc4:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_DMA2D_IRQHandler+0x114>
}
 8003cca:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003ccc:	6822      	ldr	r2, [r4, #0]
 8003cce:	6813      	ldr	r3, [r2, #0]
 8003cd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cd4:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	2204      	movs	r2, #4
 8003cda:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003cdc:	4620      	mov	r0, r4
 8003cde:	f7ff ff75 	bl	8003bcc <HAL_DMA2D_LineEventCallback>
 8003ce2:	e7d2      	b.n	8003c8a <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003ce4:	6822      	ldr	r2, [r4, #0]
 8003ce6:	6813      	ldr	r3, [r2, #0]
 8003ce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cec:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	2210      	movs	r2, #16
 8003cf2:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003cf4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003cf6:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003d04:	4620      	mov	r0, r4
 8003d06:	f7ff ff62 	bl	8003bce <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8003d0a:	e7de      	b.n	8003cca <HAL_DMA2D_IRQHandler+0xfa>

08003d0c <HAL_DMA2D_ConfigLayer>:
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003d0c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d059      	beq.n	8003dc8 <HAL_DMA2D_ConfigLayer+0xbc>
{
 8003d14:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8003d16:	2301      	movs	r3, #1
 8003d18:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003d22:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8003d26:	69da      	ldr	r2, [r3, #28]
 8003d28:	1c8b      	adds	r3, r1, #2
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	58c3      	ldr	r3, [r0, r3]
 8003d2e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d32:	3a09      	subs	r2, #9
 8003d34:	2a01      	cmp	r2, #1
 8003d36:	d91e      	bls.n	8003d76 <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003d38:	1c8a      	adds	r2, r1, #2
 8003d3a:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8003d3e:	6852      	ldr	r2, [r2, #4]
 8003d40:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003d44:	bb41      	cbnz	r1, 8003d98 <HAL_DMA2D_ConfigLayer+0x8c>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003d46:	6804      	ldr	r4, [r0, #0]
 8003d48:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003d4a:	4a20      	ldr	r2, [pc, #128]	; (8003dcc <HAL_DMA2D_ConfigLayer+0xc0>)
 8003d4c:	402a      	ands	r2, r5
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003d52:	6802      	ldr	r2, [r0, #0]
 8003d54:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8003d58:	699c      	ldr	r4, [r3, #24]
 8003d5a:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	3b09      	subs	r3, #9
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d910      	bls.n	8003d86 <HAL_DMA2D_ConfigLayer+0x7a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d64:	2301      	movs	r3, #1
 8003d66:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8003d70:	4618      	mov	r0, r3
}
 8003d72:	bc30      	pop	{r4, r5}
 8003d74:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003d76:	1c8a      	adds	r2, r1, #2
 8003d78:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8003d7c:	6852      	ldr	r2, [r2, #4]
 8003d7e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003d82:	4313      	orrs	r3, r2
 8003d84:	e7de      	b.n	8003d44 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003d86:	3102      	adds	r1, #2
 8003d88:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003d8c:	684b      	ldr	r3, [r1, #4]
 8003d8e:	6802      	ldr	r2, [r0, #0]
 8003d90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003d94:	6293      	str	r3, [r2, #40]	; 0x28
 8003d96:	e7e5      	b.n	8003d64 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d98:	6804      	ldr	r4, [r0, #0]
 8003d9a:	69e5      	ldr	r5, [r4, #28]
 8003d9c:	4a0b      	ldr	r2, [pc, #44]	; (8003dcc <HAL_DMA2D_ConfigLayer+0xc0>)
 8003d9e:	402a      	ands	r2, r5
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003da4:	6802      	ldr	r2, [r0, #0]
 8003da6:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8003daa:	699c      	ldr	r4, [r3, #24]
 8003dac:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	3b09      	subs	r3, #9
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d8d6      	bhi.n	8003d64 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003db6:	3102      	adds	r1, #2
 8003db8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003dbc:	684b      	ldr	r3, [r1, #4]
 8003dbe:	6802      	ldr	r2, [r0, #0]
 8003dc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003dc4:	6213      	str	r3, [r2, #32]
 8003dc6:	e7cd      	b.n	8003d64 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 8003dc8:	2002      	movs	r0, #2
}
 8003dca:	4770      	bx	lr
 8003dcc:	00fcfff0 	.word	0x00fcfff0

08003dd0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	2b0f      	cmp	r3, #15
 8003dd4:	f200 80e4 	bhi.w	8003fa0 <HAL_GPIO_Init+0x1d0>
{
 8003dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	e03a      	b.n	8003e54 <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003dde:	2209      	movs	r2, #9
 8003de0:	e000      	b.n	8003de4 <HAL_GPIO_Init+0x14>
 8003de2:	2200      	movs	r2, #0
 8003de4:	40aa      	lsls	r2, r5
 8003de6:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8003de8:	3402      	adds	r4, #2
 8003dea:	4d6e      	ldr	r5, [pc, #440]	; (8003fa4 <HAL_GPIO_Init+0x1d4>)
 8003dec:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003df0:	4a6d      	ldr	r2, [pc, #436]	; (8003fa8 <HAL_GPIO_Init+0x1d8>)
 8003df2:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003df4:	ea6f 020c 	mvn.w	r2, ip
 8003df8:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003dfc:	684e      	ldr	r6, [r1, #4]
 8003dfe:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8003e02:	d001      	beq.n	8003e08 <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8003e04:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 8003e08:	4c67      	ldr	r4, [pc, #412]	; (8003fa8 <HAL_GPIO_Init+0x1d8>)
 8003e0a:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8003e0c:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8003e0e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e12:	684e      	ldr	r6, [r1, #4]
 8003e14:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8003e18:	d001      	beq.n	8003e1e <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 8003e1a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8003e1e:	4c62      	ldr	r4, [pc, #392]	; (8003fa8 <HAL_GPIO_Init+0x1d8>)
 8003e20:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e22:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8003e24:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e28:	684e      	ldr	r6, [r1, #4]
 8003e2a:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8003e2e:	d001      	beq.n	8003e34 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 8003e30:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8003e34:	4c5c      	ldr	r4, [pc, #368]	; (8003fa8 <HAL_GPIO_Init+0x1d8>)
 8003e36:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8003e38:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8003e3a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e3c:	684d      	ldr	r5, [r1, #4]
 8003e3e:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8003e42:	d001      	beq.n	8003e48 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8003e44:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 8003e48:	4c57      	ldr	r4, [pc, #348]	; (8003fa8 <HAL_GPIO_Init+0x1d8>)
 8003e4a:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	2b0f      	cmp	r3, #15
 8003e50:	f200 80a4 	bhi.w	8003f9c <HAL_GPIO_Init+0x1cc>
    ioposition = ((uint32_t)0x01) << position;
 8003e54:	2201      	movs	r2, #1
 8003e56:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e58:	680c      	ldr	r4, [r1, #0]
 8003e5a:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8003e5e:	ea32 0404 	bics.w	r4, r2, r4
 8003e62:	d1f3      	bne.n	8003e4c <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e64:	684c      	ldr	r4, [r1, #4]
 8003e66:	1e65      	subs	r5, r4, #1
 8003e68:	2c11      	cmp	r4, #17
 8003e6a:	bf18      	it	ne
 8003e6c:	2d01      	cmpne	r5, #1
 8003e6e:	d901      	bls.n	8003e74 <HAL_GPIO_Init+0xa4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e70:	2c12      	cmp	r4, #18
 8003e72:	d112      	bne.n	8003e9a <HAL_GPIO_Init+0xca>
        temp = GPIOx->OSPEEDR; 
 8003e74:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e76:	005e      	lsls	r6, r3, #1
 8003e78:	2403      	movs	r4, #3
 8003e7a:	40b4      	lsls	r4, r6
 8003e7c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e80:	68cc      	ldr	r4, [r1, #12]
 8003e82:	40b4      	lsls	r4, r6
 8003e84:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003e86:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003e88:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e8a:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003e8e:	684c      	ldr	r4, [r1, #4]
 8003e90:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8003e94:	409a      	lsls	r2, r3
 8003e96:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8003e98:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8003e9a:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e9c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003ea0:	2403      	movs	r4, #3
 8003ea2:	fa04 f40e 	lsl.w	r4, r4, lr
 8003ea6:	43e2      	mvns	r2, r4
 8003ea8:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003eac:	688c      	ldr	r4, [r1, #8]
 8003eae:	fa04 f40e 	lsl.w	r4, r4, lr
 8003eb2:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8003eb4:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eb6:	684c      	ldr	r4, [r1, #4]
 8003eb8:	2c12      	cmp	r4, #18
 8003eba:	bf18      	it	ne
 8003ebc:	2c02      	cmpne	r4, #2
 8003ebe:	d10f      	bne.n	8003ee0 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3];
 8003ec0:	08dd      	lsrs	r5, r3, #3
 8003ec2:	3508      	adds	r5, #8
 8003ec4:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003ec8:	f003 0407 	and.w	r4, r3, #7
 8003ecc:	00a6      	lsls	r6, r4, #2
 8003ece:	240f      	movs	r4, #15
 8003ed0:	40b4      	lsls	r4, r6
 8003ed2:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003ed6:	690c      	ldr	r4, [r1, #16]
 8003ed8:	40b4      	lsls	r4, r6
 8003eda:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 8003edc:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8003ee0:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003ee2:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003ee4:	684a      	ldr	r2, [r1, #4]
 8003ee6:	f002 0203 	and.w	r2, r2, #3
 8003eea:	fa02 f20e 	lsl.w	r2, r2, lr
 8003eee:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8003ef0:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ef2:	684a      	ldr	r2, [r1, #4]
 8003ef4:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8003ef8:	d0a8      	beq.n	8003e4c <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003efa:	4a2c      	ldr	r2, [pc, #176]	; (8003fac <HAL_GPIO_Init+0x1dc>)
 8003efc:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8003efe:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8003f02:	6454      	str	r4, [r2, #68]	; 0x44
 8003f04:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003f06:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003f0a:	9201      	str	r2, [sp, #4]
 8003f0c:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8003f0e:	089c      	lsrs	r4, r3, #2
 8003f10:	1ca5      	adds	r5, r4, #2
 8003f12:	4a24      	ldr	r2, [pc, #144]	; (8003fa4 <HAL_GPIO_Init+0x1d4>)
 8003f14:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003f18:	f003 0203 	and.w	r2, r3, #3
 8003f1c:	0095      	lsls	r5, r2, #2
 8003f1e:	220f      	movs	r2, #15
 8003f20:	40aa      	lsls	r2, r5
 8003f22:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f26:	4a22      	ldr	r2, [pc, #136]	; (8003fb0 <HAL_GPIO_Init+0x1e0>)
 8003f28:	4290      	cmp	r0, r2
 8003f2a:	f43f af5a 	beq.w	8003de2 <HAL_GPIO_Init+0x12>
 8003f2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f32:	4290      	cmp	r0, r2
 8003f34:	d022      	beq.n	8003f7c <HAL_GPIO_Init+0x1ac>
 8003f36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f3a:	4290      	cmp	r0, r2
 8003f3c:	d020      	beq.n	8003f80 <HAL_GPIO_Init+0x1b0>
 8003f3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f42:	4290      	cmp	r0, r2
 8003f44:	d01e      	beq.n	8003f84 <HAL_GPIO_Init+0x1b4>
 8003f46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f4a:	4290      	cmp	r0, r2
 8003f4c:	d01c      	beq.n	8003f88 <HAL_GPIO_Init+0x1b8>
 8003f4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f52:	4290      	cmp	r0, r2
 8003f54:	d01a      	beq.n	8003f8c <HAL_GPIO_Init+0x1bc>
 8003f56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f5a:	4290      	cmp	r0, r2
 8003f5c:	d018      	beq.n	8003f90 <HAL_GPIO_Init+0x1c0>
 8003f5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f62:	4290      	cmp	r0, r2
 8003f64:	d016      	beq.n	8003f94 <HAL_GPIO_Init+0x1c4>
 8003f66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f6a:	4290      	cmp	r0, r2
 8003f6c:	d014      	beq.n	8003f98 <HAL_GPIO_Init+0x1c8>
 8003f6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f72:	4290      	cmp	r0, r2
 8003f74:	f43f af33 	beq.w	8003dde <HAL_GPIO_Init+0xe>
 8003f78:	220a      	movs	r2, #10
 8003f7a:	e733      	b.n	8003de4 <HAL_GPIO_Init+0x14>
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	e731      	b.n	8003de4 <HAL_GPIO_Init+0x14>
 8003f80:	2202      	movs	r2, #2
 8003f82:	e72f      	b.n	8003de4 <HAL_GPIO_Init+0x14>
 8003f84:	2203      	movs	r2, #3
 8003f86:	e72d      	b.n	8003de4 <HAL_GPIO_Init+0x14>
 8003f88:	2204      	movs	r2, #4
 8003f8a:	e72b      	b.n	8003de4 <HAL_GPIO_Init+0x14>
 8003f8c:	2205      	movs	r2, #5
 8003f8e:	e729      	b.n	8003de4 <HAL_GPIO_Init+0x14>
 8003f90:	2206      	movs	r2, #6
 8003f92:	e727      	b.n	8003de4 <HAL_GPIO_Init+0x14>
 8003f94:	2207      	movs	r2, #7
 8003f96:	e725      	b.n	8003de4 <HAL_GPIO_Init+0x14>
 8003f98:	2208      	movs	r2, #8
 8003f9a:	e723      	b.n	8003de4 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8003f9c:	b003      	add	sp, #12
 8003f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40013800 	.word	0x40013800
 8003fa8:	40013c00 	.word	0x40013c00
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	40020000 	.word	0x40020000

08003fb4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fb4:	b10a      	cbz	r2, 8003fba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fb6:	6181      	str	r1, [r0, #24]
 8003fb8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003fba:	0409      	lsls	r1, r1, #16
 8003fbc:	6181      	str	r1, [r0, #24]
  }
}
 8003fbe:	4770      	bx	lr

08003fc0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fc0:	6803      	ldr	r3, [r0, #0]
 8003fc2:	699a      	ldr	r2, [r3, #24]
 8003fc4:	f012 0f02 	tst.w	r2, #2
 8003fc8:	d001      	beq.n	8003fce <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003fca:	2200      	movs	r2, #0
 8003fcc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fce:	6803      	ldr	r3, [r0, #0]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	f012 0f01 	tst.w	r2, #1
 8003fd6:	d103      	bne.n	8003fe0 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003fd8:	699a      	ldr	r2, [r3, #24]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	619a      	str	r2, [r3, #24]
  }
}
 8003fe0:	4770      	bx	lr

08003fe2 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003fe2:	b430      	push	{r4, r5}
 8003fe4:	9d02      	ldr	r5, [sp, #8]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003fe6:	6804      	ldr	r4, [r0, #0]
 8003fe8:	6860      	ldr	r0, [r4, #4]
 8003fea:	ea4f 5c55 	mov.w	ip, r5, lsr #21
 8003fee:	f40c 6c80 	and.w	ip, ip, #1024	; 0x400
 8003ff2:	f04c 7c7f 	orr.w	ip, ip, #66846720	; 0x3fc0000
 8003ff6:	f44c 3c58 	orr.w	ip, ip, #221184	; 0x36000
 8003ffa:	f44c 7c7f 	orr.w	ip, ip, #1020	; 0x3fc
 8003ffe:	f04c 0c03 	orr.w	ip, ip, #3
 8004002:	ea20 000c 	bic.w	r0, r0, ip
 8004006:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800400a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800400e:	4319      	orrs	r1, r3
 8004010:	4329      	orrs	r1, r5
 8004012:	4301      	orrs	r1, r0
 8004014:	6061      	str	r1, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004016:	bc30      	pop	{r4, r5}
 8004018:	4770      	bx	lr

0800401a <I2C_IsAcknowledgeFailed>:
{
 800401a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401c:	4605      	mov	r5, r0
 800401e:	460e      	mov	r6, r1
 8004020:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004022:	6803      	ldr	r3, [r0, #0]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f013 0f10 	tst.w	r3, #16
 800402a:	d101      	bne.n	8004030 <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 800402c:	2000      	movs	r0, #0
}
 800402e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004030:	682b      	ldr	r3, [r5, #0]
 8004032:	699c      	ldr	r4, [r3, #24]
 8004034:	f014 0f20 	tst.w	r4, #32
 8004038:	d117      	bne.n	800406a <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 800403a:	f1b6 3fff 	cmp.w	r6, #4294967295
 800403e:	d0f7      	beq.n	8004030 <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004040:	f7ff fcd8 	bl	80039f4 <HAL_GetTick>
 8004044:	1bc0      	subs	r0, r0, r7
 8004046:	42b0      	cmp	r0, r6
 8004048:	d801      	bhi.n	800404e <I2C_IsAcknowledgeFailed+0x34>
 800404a:	2e00      	cmp	r6, #0
 800404c:	d1f0      	bne.n	8004030 <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800404e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004050:	f043 0320 	orr.w	r3, r3, #32
 8004054:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004056:	2320      	movs	r3, #32
 8004058:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800405c:	2300      	movs	r3, #0
 800405e:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8004062:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8004066:	2001      	movs	r0, #1
 8004068:	e7e1      	b.n	800402e <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800406a:	2210      	movs	r2, #16
 800406c:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800406e:	682b      	ldr	r3, [r5, #0]
 8004070:	2420      	movs	r4, #32
 8004072:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8004074:	4628      	mov	r0, r5
 8004076:	f7ff ffa3 	bl	8003fc0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800407a:	682a      	ldr	r2, [r5, #0]
 800407c:	6853      	ldr	r3, [r2, #4]
 800407e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004082:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004086:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800408a:	f023 0301 	bic.w	r3, r3, #1
 800408e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004090:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004092:	f043 0304 	orr.w	r3, r3, #4
 8004096:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004098:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800409c:	2300      	movs	r3, #0
 800409e:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80040a2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 80040a6:	2001      	movs	r0, #1
 80040a8:	e7c1      	b.n	800402e <I2C_IsAcknowledgeFailed+0x14>

080040aa <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80040aa:	b570      	push	{r4, r5, r6, lr}
 80040ac:	4604      	mov	r4, r0
 80040ae:	460d      	mov	r5, r1
 80040b0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	f013 0f02 	tst.w	r3, #2
 80040ba:	d11d      	bne.n	80040f8 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80040bc:	4632      	mov	r2, r6
 80040be:	4629      	mov	r1, r5
 80040c0:	4620      	mov	r0, r4
 80040c2:	f7ff ffaa 	bl	800401a <I2C_IsAcknowledgeFailed>
 80040c6:	b9c8      	cbnz	r0, 80040fc <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80040c8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80040cc:	d0f1      	beq.n	80040b2 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ce:	f7ff fc91 	bl	80039f4 <HAL_GetTick>
 80040d2:	1b80      	subs	r0, r0, r6
 80040d4:	42a8      	cmp	r0, r5
 80040d6:	d801      	bhi.n	80040dc <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80040d8:	2d00      	cmp	r5, #0
 80040da:	d1ea      	bne.n	80040b2 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80040de:	f043 0320 	orr.w	r3, r3, #32
 80040e2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040e4:	2320      	movs	r3, #32
 80040e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ea:	2300      	movs	r3, #0
 80040ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80040f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80040f4:	2001      	movs	r0, #1
 80040f6:	e000      	b.n	80040fa <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80040f8:	2000      	movs	r0, #0
}
 80040fa:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80040fc:	2001      	movs	r0, #1
 80040fe:	e7fc      	b.n	80040fa <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08004100 <I2C_WaitOnFlagUntilTimeout>:
{
 8004100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004104:	4606      	mov	r6, r0
 8004106:	4688      	mov	r8, r1
 8004108:	4617      	mov	r7, r2
 800410a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800410c:	6834      	ldr	r4, [r6, #0]
 800410e:	69a4      	ldr	r4, [r4, #24]
 8004110:	ea38 0304 	bics.w	r3, r8, r4
 8004114:	bf0c      	ite	eq
 8004116:	f04f 0c01 	moveq.w	ip, #1
 800411a:	f04f 0c00 	movne.w	ip, #0
 800411e:	45bc      	cmp	ip, r7
 8004120:	d118      	bne.n	8004154 <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 8004122:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004126:	d0f1      	beq.n	800410c <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004128:	f7ff fc64 	bl	80039f4 <HAL_GetTick>
 800412c:	9b06      	ldr	r3, [sp, #24]
 800412e:	1ac0      	subs	r0, r0, r3
 8004130:	42a8      	cmp	r0, r5
 8004132:	d801      	bhi.n	8004138 <I2C_WaitOnFlagUntilTimeout+0x38>
 8004134:	2d00      	cmp	r5, #0
 8004136:	d1e9      	bne.n	800410c <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004138:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800413a:	f043 0320 	orr.w	r3, r3, #32
 800413e:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004140:	2320      	movs	r3, #32
 8004142:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004146:	2300      	movs	r3, #0
 8004148:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800414c:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8004150:	2001      	movs	r0, #1
 8004152:	e000      	b.n	8004156 <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 8004154:	2000      	movs	r0, #0
}
 8004156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800415c <I2C_RequestMemoryWrite>:
{
 800415c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	4604      	mov	r4, r0
 8004164:	4690      	mov	r8, r2
 8004166:	461d      	mov	r5, r3
 8004168:	9e08      	ldr	r6, [sp, #32]
 800416a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800416c:	4b19      	ldr	r3, [pc, #100]	; (80041d4 <I2C_RequestMemoryWrite+0x78>)
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004174:	b2ea      	uxtb	r2, r5
 8004176:	f7ff ff34 	bl	8003fe2 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800417a:	463a      	mov	r2, r7
 800417c:	4631      	mov	r1, r6
 800417e:	4620      	mov	r0, r4
 8004180:	f7ff ff93 	bl	80040aa <I2C_WaitOnTXISFlagUntilTimeout>
 8004184:	b9f8      	cbnz	r0, 80041c6 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004186:	2d01      	cmp	r5, #1
 8004188:	d10e      	bne.n	80041a8 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	fa5f f288 	uxtb.w	r2, r8
 8004190:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004192:	9700      	str	r7, [sp, #0]
 8004194:	4633      	mov	r3, r6
 8004196:	2200      	movs	r2, #0
 8004198:	2180      	movs	r1, #128	; 0x80
 800419a:	4620      	mov	r0, r4
 800419c:	f7ff ffb0 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 80041a0:	b9a8      	cbnz	r0, 80041ce <I2C_RequestMemoryWrite+0x72>
}
 80041a2:	b002      	add	sp, #8
 80041a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80041ae:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041b0:	463a      	mov	r2, r7
 80041b2:	4631      	mov	r1, r6
 80041b4:	4620      	mov	r0, r4
 80041b6:	f7ff ff78 	bl	80040aa <I2C_WaitOnTXISFlagUntilTimeout>
 80041ba:	b930      	cbnz	r0, 80041ca <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	fa5f f288 	uxtb.w	r2, r8
 80041c2:	629a      	str	r2, [r3, #40]	; 0x28
 80041c4:	e7e5      	b.n	8004192 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 80041c6:	2001      	movs	r0, #1
 80041c8:	e7eb      	b.n	80041a2 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 80041ca:	2001      	movs	r0, #1
 80041cc:	e7e9      	b.n	80041a2 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 80041ce:	2001      	movs	r0, #1
 80041d0:	e7e7      	b.n	80041a2 <I2C_RequestMemoryWrite+0x46>
 80041d2:	bf00      	nop
 80041d4:	80002000 	.word	0x80002000

080041d8 <I2C_RequestMemoryRead>:
{
 80041d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041dc:	b082      	sub	sp, #8
 80041de:	4604      	mov	r4, r0
 80041e0:	4690      	mov	r8, r2
 80041e2:	461d      	mov	r5, r3
 80041e4:	9e08      	ldr	r6, [sp, #32]
 80041e6:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80041e8:	4b18      	ldr	r3, [pc, #96]	; (800424c <I2C_RequestMemoryRead+0x74>)
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	2300      	movs	r3, #0
 80041ee:	b2ea      	uxtb	r2, r5
 80041f0:	f7ff fef7 	bl	8003fe2 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041f4:	463a      	mov	r2, r7
 80041f6:	4631      	mov	r1, r6
 80041f8:	4620      	mov	r0, r4
 80041fa:	f7ff ff56 	bl	80040aa <I2C_WaitOnTXISFlagUntilTimeout>
 80041fe:	b9f8      	cbnz	r0, 8004240 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004200:	2d01      	cmp	r5, #1
 8004202:	d10e      	bne.n	8004222 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	fa5f f288 	uxtb.w	r2, r8
 800420a:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800420c:	9700      	str	r7, [sp, #0]
 800420e:	4633      	mov	r3, r6
 8004210:	2200      	movs	r2, #0
 8004212:	2140      	movs	r1, #64	; 0x40
 8004214:	4620      	mov	r0, r4
 8004216:	f7ff ff73 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 800421a:	b9a8      	cbnz	r0, 8004248 <I2C_RequestMemoryRead+0x70>
}
 800421c:	b002      	add	sp, #8
 800421e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8004228:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800422a:	463a      	mov	r2, r7
 800422c:	4631      	mov	r1, r6
 800422e:	4620      	mov	r0, r4
 8004230:	f7ff ff3b 	bl	80040aa <I2C_WaitOnTXISFlagUntilTimeout>
 8004234:	b930      	cbnz	r0, 8004244 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	fa5f f288 	uxtb.w	r2, r8
 800423c:	629a      	str	r2, [r3, #40]	; 0x28
 800423e:	e7e5      	b.n	800420c <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8004240:	2001      	movs	r0, #1
 8004242:	e7eb      	b.n	800421c <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8004244:	2001      	movs	r0, #1
 8004246:	e7e9      	b.n	800421c <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8004248:	2001      	movs	r0, #1
 800424a:	e7e7      	b.n	800421c <I2C_RequestMemoryRead+0x44>
 800424c:	80002000 	.word	0x80002000

08004250 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004250:	b570      	push	{r4, r5, r6, lr}
 8004252:	4605      	mov	r5, r0
 8004254:	460c      	mov	r4, r1
 8004256:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004258:	682b      	ldr	r3, [r5, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	f013 0f20 	tst.w	r3, #32
 8004260:	d11a      	bne.n	8004298 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004262:	4632      	mov	r2, r6
 8004264:	4621      	mov	r1, r4
 8004266:	4628      	mov	r0, r5
 8004268:	f7ff fed7 	bl	800401a <I2C_IsAcknowledgeFailed>
 800426c:	b9b0      	cbnz	r0, 800429c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426e:	f7ff fbc1 	bl	80039f4 <HAL_GetTick>
 8004272:	1b80      	subs	r0, r0, r6
 8004274:	42a0      	cmp	r0, r4
 8004276:	d801      	bhi.n	800427c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8004278:	2c00      	cmp	r4, #0
 800427a:	d1ed      	bne.n	8004258 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800427c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800427e:	f043 0320 	orr.w	r3, r3, #32
 8004282:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004284:	2320      	movs	r3, #32
 8004286:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800428a:	2300      	movs	r3, #0
 800428c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004290:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8004294:	2001      	movs	r0, #1
}
 8004296:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8004298:	2000      	movs	r0, #0
 800429a:	e7fc      	b.n	8004296 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 800429c:	2001      	movs	r0, #1
 800429e:	e7fa      	b.n	8004296 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080042a0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80042a0:	2800      	cmp	r0, #0
 80042a2:	d057      	beq.n	8004354 <HAL_I2C_Init+0xb4>
{
 80042a4:	b510      	push	{r4, lr}
 80042a6:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042a8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d041      	beq.n	8004334 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80042b0:	2324      	movs	r3, #36	; 0x24
 80042b2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80042b6:	6822      	ldr	r2, [r4, #0]
 80042b8:	6813      	ldr	r3, [r2, #0]
 80042ba:	f023 0301 	bic.w	r3, r3, #1
 80042be:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042c0:	6863      	ldr	r3, [r4, #4]
 80042c2:	6822      	ldr	r2, [r4, #0]
 80042c4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80042c8:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042ca:	6822      	ldr	r2, [r4, #0]
 80042cc:	6893      	ldr	r3, [r2, #8]
 80042ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042d2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042d4:	68e3      	ldr	r3, [r4, #12]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d031      	beq.n	800433e <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042da:	68a3      	ldr	r3, [r4, #8]
 80042dc:	6822      	ldr	r2, [r4, #0]
 80042de:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80042e2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042e4:	68e3      	ldr	r3, [r4, #12]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d02f      	beq.n	800434a <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042ea:	6822      	ldr	r2, [r4, #0]
 80042ec:	6851      	ldr	r1, [r2, #4]
 80042ee:	4b1a      	ldr	r3, [pc, #104]	; (8004358 <HAL_I2C_Init+0xb8>)
 80042f0:	430b      	orrs	r3, r1
 80042f2:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80042f4:	6822      	ldr	r2, [r4, #0]
 80042f6:	68d3      	ldr	r3, [r2, #12]
 80042f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042fc:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80042fe:	6923      	ldr	r3, [r4, #16]
 8004300:	6962      	ldr	r2, [r4, #20]
 8004302:	4313      	orrs	r3, r2
 8004304:	69a1      	ldr	r1, [r4, #24]
 8004306:	6822      	ldr	r2, [r4, #0]
 8004308:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800430c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800430e:	69e3      	ldr	r3, [r4, #28]
 8004310:	6a21      	ldr	r1, [r4, #32]
 8004312:	6822      	ldr	r2, [r4, #0]
 8004314:	430b      	orrs	r3, r1
 8004316:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004318:	6822      	ldr	r2, [r4, #0]
 800431a:	6813      	ldr	r3, [r2, #0]
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004322:	2000      	movs	r0, #0
 8004324:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004326:	2320      	movs	r3, #32
 8004328:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800432c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800432e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004332:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004334:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004338:	f7ff f9cc 	bl	80036d4 <HAL_I2C_MspInit>
 800433c:	e7b8      	b.n	80042b0 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800433e:	68a3      	ldr	r3, [r4, #8]
 8004340:	6822      	ldr	r2, [r4, #0]
 8004342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004346:	6093      	str	r3, [r2, #8]
 8004348:	e7cc      	b.n	80042e4 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004350:	605a      	str	r2, [r3, #4]
 8004352:	e7ca      	b.n	80042ea <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8004354:	2001      	movs	r0, #1
}
 8004356:	4770      	bx	lr
 8004358:	02008000 	.word	0x02008000

0800435c <HAL_I2C_Mem_Write>:
{
 800435c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004360:	b083      	sub	sp, #12
 8004362:	460d      	mov	r5, r1
 8004364:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004368:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800436a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800436e:	b2c9      	uxtb	r1, r1
 8004370:	2920      	cmp	r1, #32
 8004372:	f040 80bc 	bne.w	80044ee <HAL_I2C_Mem_Write+0x192>
 8004376:	4604      	mov	r4, r0
 8004378:	4690      	mov	r8, r2
 800437a:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800437c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800437e:	f1ba 0f00 	cmp.w	sl, #0
 8004382:	bf18      	it	ne
 8004384:	2b00      	cmpne	r3, #0
 8004386:	d016      	beq.n	80043b6 <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 8004388:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800438c:	2b01      	cmp	r3, #1
 800438e:	f000 80b2 	beq.w	80044f6 <HAL_I2C_Mem_Write+0x19a>
 8004392:	f04f 0b01 	mov.w	fp, #1
 8004396:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800439a:	f7ff fb2b 	bl	80039f4 <HAL_GetTick>
 800439e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043a0:	9000      	str	r0, [sp, #0]
 80043a2:	2319      	movs	r3, #25
 80043a4:	465a      	mov	r2, fp
 80043a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043aa:	4620      	mov	r0, r4
 80043ac:	f7ff fea8 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 80043b0:	b130      	cbz	r0, 80043c0 <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 80043b2:	2001      	movs	r0, #1
 80043b4:	e09c      	b.n	80044f0 <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80043b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043ba:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80043bc:	2001      	movs	r0, #1
 80043be:	e097      	b.n	80044f0 <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043c0:	2321      	movs	r3, #33	; 0x21
 80043c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043c6:	2340      	movs	r3, #64	; 0x40
 80043c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043cc:	2300      	movs	r3, #0
 80043ce:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80043d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80043d2:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80043d4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80043d8:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043da:	9601      	str	r6, [sp, #4]
 80043dc:	9700      	str	r7, [sp, #0]
 80043de:	464b      	mov	r3, r9
 80043e0:	4642      	mov	r2, r8
 80043e2:	4629      	mov	r1, r5
 80043e4:	4620      	mov	r0, r4
 80043e6:	f7ff feb9 	bl	800415c <I2C_RequestMemoryWrite>
 80043ea:	b970      	cbnz	r0, 800440a <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2bff      	cmp	r3, #255	; 0xff
 80043f2:	d90f      	bls.n	8004414 <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043f4:	22ff      	movs	r2, #255	; 0xff
 80043f6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80043f8:	2300      	movs	r3, #0
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004400:	4629      	mov	r1, r5
 8004402:	4620      	mov	r0, r4
 8004404:	f7ff fded 	bl	8003fe2 <I2C_TransferConfig>
 8004408:	e021      	b.n	800444e <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 800440a:	2300      	movs	r3, #0
 800440c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004410:	4658      	mov	r0, fp
 8004412:	e06d      	b.n	80044f0 <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8004414:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004416:	b292      	uxth	r2, r2
 8004418:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800441a:	2300      	movs	r3, #0
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	4629      	mov	r1, r5
 8004426:	4620      	mov	r0, r4
 8004428:	f7ff fddb 	bl	8003fe2 <I2C_TransferConfig>
 800442c:	e00f      	b.n	800444e <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 800442e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004430:	b292      	uxth	r2, r2
 8004432:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004434:	2300      	movs	r3, #0
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	4629      	mov	r1, r5
 8004440:	4620      	mov	r0, r4
 8004442:	f7ff fdce 	bl	8003fe2 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004446:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d033      	beq.n	80044b6 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800444e:	4632      	mov	r2, r6
 8004450:	4639      	mov	r1, r7
 8004452:	4620      	mov	r0, r4
 8004454:	f7ff fe29 	bl	80040aa <I2C_WaitOnTXISFlagUntilTimeout>
 8004458:	2800      	cmp	r0, #0
 800445a:	d14e      	bne.n	80044fa <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800445c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	7812      	ldrb	r2, [r2, #0]
 8004462:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004464:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004466:	3301      	adds	r3, #1
 8004468:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800446a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800446c:	b29b      	uxth	r3, r3
 800446e:	3b01      	subs	r3, #1
 8004470:	b29b      	uxth	r3, r3
 8004472:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004474:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004476:	3b01      	subs	r3, #1
 8004478:	b29b      	uxth	r3, r3
 800447a:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800447c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800447e:	b292      	uxth	r2, r2
 8004480:	2a00      	cmp	r2, #0
 8004482:	d0e0      	beq.n	8004446 <HAL_I2C_Mem_Write+0xea>
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1de      	bne.n	8004446 <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004488:	9600      	str	r6, [sp, #0]
 800448a:	463b      	mov	r3, r7
 800448c:	2200      	movs	r2, #0
 800448e:	2180      	movs	r1, #128	; 0x80
 8004490:	4620      	mov	r0, r4
 8004492:	f7ff fe35 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 8004496:	bb90      	cbnz	r0, 80044fe <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004498:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800449a:	b29b      	uxth	r3, r3
 800449c:	2bff      	cmp	r3, #255	; 0xff
 800449e:	d9c6      	bls.n	800442e <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044a0:	22ff      	movs	r2, #255	; 0xff
 80044a2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80044a4:	2300      	movs	r3, #0
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044ac:	4629      	mov	r1, r5
 80044ae:	4620      	mov	r0, r4
 80044b0:	f7ff fd97 	bl	8003fe2 <I2C_TransferConfig>
 80044b4:	e7c7      	b.n	8004446 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044b6:	4632      	mov	r2, r6
 80044b8:	4639      	mov	r1, r7
 80044ba:	4620      	mov	r0, r4
 80044bc:	f7ff fec8 	bl	8004250 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044c0:	b9f8      	cbnz	r0, 8004502 <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	2220      	movs	r2, #32
 80044c6:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80044c8:	6821      	ldr	r1, [r4, #0]
 80044ca:	684b      	ldr	r3, [r1, #4]
 80044cc:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80044d0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80044d4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80044d8:	f023 0301 	bic.w	r3, r3, #1
 80044dc:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80044de:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044e2:	2300      	movs	r3, #0
 80044e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80044e8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 80044ec:	e000      	b.n	80044f0 <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 80044ee:	2002      	movs	r0, #2
}
 80044f0:	b003      	add	sp, #12
 80044f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80044f6:	2002      	movs	r0, #2
 80044f8:	e7fa      	b.n	80044f0 <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 80044fa:	2001      	movs	r0, #1
 80044fc:	e7f8      	b.n	80044f0 <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 80044fe:	2001      	movs	r0, #1
 8004500:	e7f6      	b.n	80044f0 <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 8004502:	2001      	movs	r0, #1
 8004504:	e7f4      	b.n	80044f0 <HAL_I2C_Mem_Write+0x194>
	...

08004508 <HAL_I2C_Mem_Read>:
{
 8004508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800450c:	b083      	sub	sp, #12
 800450e:	460d      	mov	r5, r1
 8004510:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004514:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004516:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800451a:	b2c9      	uxtb	r1, r1
 800451c:	2920      	cmp	r1, #32
 800451e:	f040 80bd 	bne.w	800469c <HAL_I2C_Mem_Read+0x194>
 8004522:	4604      	mov	r4, r0
 8004524:	4690      	mov	r8, r2
 8004526:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8004528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800452a:	f1ba 0f00 	cmp.w	sl, #0
 800452e:	bf18      	it	ne
 8004530:	2b00      	cmpne	r3, #0
 8004532:	d016      	beq.n	8004562 <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 8004534:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004538:	2b01      	cmp	r3, #1
 800453a:	f000 80b3 	beq.w	80046a4 <HAL_I2C_Mem_Read+0x19c>
 800453e:	f04f 0b01 	mov.w	fp, #1
 8004542:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004546:	f7ff fa55 	bl	80039f4 <HAL_GetTick>
 800454a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800454c:	9000      	str	r0, [sp, #0]
 800454e:	2319      	movs	r3, #25
 8004550:	465a      	mov	r2, fp
 8004552:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004556:	4620      	mov	r0, r4
 8004558:	f7ff fdd2 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 800455c:	b130      	cbz	r0, 800456c <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 800455e:	2001      	movs	r0, #1
 8004560:	e09d      	b.n	800469e <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004566:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8004568:	2001      	movs	r0, #1
 800456a:	e098      	b.n	800469e <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800456c:	2322      	movs	r3, #34	; 0x22
 800456e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004572:	2340      	movs	r3, #64	; 0x40
 8004574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004578:	2300      	movs	r3, #0
 800457a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800457c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800457e:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004580:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004584:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004586:	9601      	str	r6, [sp, #4]
 8004588:	9700      	str	r7, [sp, #0]
 800458a:	464b      	mov	r3, r9
 800458c:	4642      	mov	r2, r8
 800458e:	4629      	mov	r1, r5
 8004590:	4620      	mov	r0, r4
 8004592:	f7ff fe21 	bl	80041d8 <I2C_RequestMemoryRead>
 8004596:	b970      	cbnz	r0, 80045b6 <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004598:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	2bff      	cmp	r3, #255	; 0xff
 800459e:	d90f      	bls.n	80045c0 <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045a0:	22ff      	movs	r2, #255	; 0xff
 80045a2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80045a4:	4b43      	ldr	r3, [pc, #268]	; (80046b4 <HAL_I2C_Mem_Read+0x1ac>)
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045ac:	4629      	mov	r1, r5
 80045ae:	4620      	mov	r0, r4
 80045b0:	f7ff fd17 	bl	8003fe2 <I2C_TransferConfig>
 80045b4:	e021      	b.n	80045fa <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 80045b6:	2300      	movs	r3, #0
 80045b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80045bc:	4658      	mov	r0, fp
 80045be:	e06e      	b.n	800469e <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 80045c0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80045c2:	b292      	uxth	r2, r2
 80045c4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80045c6:	4b3b      	ldr	r3, [pc, #236]	; (80046b4 <HAL_I2C_Mem_Read+0x1ac>)
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	4629      	mov	r1, r5
 80045d2:	4620      	mov	r0, r4
 80045d4:	f7ff fd05 	bl	8003fe2 <I2C_TransferConfig>
 80045d8:	e00f      	b.n	80045fa <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 80045da:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80045dc:	b292      	uxth	r2, r2
 80045de:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80045e0:	2300      	movs	r3, #0
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	4629      	mov	r1, r5
 80045ec:	4620      	mov	r0, r4
 80045ee:	f7ff fcf8 	bl	8003fe2 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80045f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d034      	beq.n	8004664 <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80045fa:	9600      	str	r6, [sp, #0]
 80045fc:	463b      	mov	r3, r7
 80045fe:	2200      	movs	r2, #0
 8004600:	2104      	movs	r1, #4
 8004602:	4620      	mov	r0, r4
 8004604:	f7ff fd7c 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 8004608:	2800      	cmp	r0, #0
 800460a:	d14d      	bne.n	80046a8 <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004612:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004614:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004616:	3301      	adds	r3, #1
 8004618:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800461a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800461c:	3a01      	subs	r2, #1
 800461e:	b292      	uxth	r2, r2
 8004620:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004622:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29b      	uxth	r3, r3
 800462a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800462c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0de      	beq.n	80045f2 <HAL_I2C_Mem_Read+0xea>
 8004634:	2a00      	cmp	r2, #0
 8004636:	d1dc      	bne.n	80045f2 <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004638:	9600      	str	r6, [sp, #0]
 800463a:	463b      	mov	r3, r7
 800463c:	2180      	movs	r1, #128	; 0x80
 800463e:	4620      	mov	r0, r4
 8004640:	f7ff fd5e 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 8004644:	bb90      	cbnz	r0, 80046ac <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004646:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004648:	b29b      	uxth	r3, r3
 800464a:	2bff      	cmp	r3, #255	; 0xff
 800464c:	d9c5      	bls.n	80045da <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800464e:	22ff      	movs	r2, #255	; 0xff
 8004650:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004652:	2300      	movs	r3, #0
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800465a:	4629      	mov	r1, r5
 800465c:	4620      	mov	r0, r4
 800465e:	f7ff fcc0 	bl	8003fe2 <I2C_TransferConfig>
 8004662:	e7c6      	b.n	80045f2 <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004664:	4632      	mov	r2, r6
 8004666:	4639      	mov	r1, r7
 8004668:	4620      	mov	r0, r4
 800466a:	f7ff fdf1 	bl	8004250 <I2C_WaitOnSTOPFlagUntilTimeout>
 800466e:	b9f8      	cbnz	r0, 80046b0 <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	2220      	movs	r2, #32
 8004674:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004676:	6821      	ldr	r1, [r4, #0]
 8004678:	684b      	ldr	r3, [r1, #4]
 800467a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800467e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004682:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004686:	f023 0301 	bic.w	r3, r3, #1
 800468a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800468c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004690:	2300      	movs	r3, #0
 8004692:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004696:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800469a:	e000      	b.n	800469e <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 800469c:	2002      	movs	r0, #2
}
 800469e:	b003      	add	sp, #12
 80046a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80046a4:	2002      	movs	r0, #2
 80046a6:	e7fa      	b.n	800469e <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 80046a8:	2001      	movs	r0, #1
 80046aa:	e7f8      	b.n	800469e <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 80046ac:	2001      	movs	r0, #1
 80046ae:	e7f6      	b.n	800469e <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 80046b0:	2001      	movs	r0, #1
 80046b2:	e7f4      	b.n	800469e <HAL_I2C_Mem_Read+0x196>
 80046b4:	80002400 	.word	0x80002400

080046b8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046b8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b20      	cmp	r3, #32
 80046c0:	d124      	bne.n	800470c <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046c2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d022      	beq.n	8004710 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80046ca:	2301      	movs	r3, #1
 80046cc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046d0:	2324      	movs	r3, #36	; 0x24
 80046d2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046d6:	6802      	ldr	r2, [r0, #0]
 80046d8:	6813      	ldr	r3, [r2, #0]
 80046da:	f023 0301 	bic.w	r3, r3, #1
 80046de:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046e0:	6802      	ldr	r2, [r0, #0]
 80046e2:	6813      	ldr	r3, [r2, #0]
 80046e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046e8:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046ea:	6802      	ldr	r2, [r0, #0]
 80046ec:	6813      	ldr	r3, [r2, #0]
 80046ee:	4319      	orrs	r1, r3
 80046f0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046f2:	6802      	ldr	r2, [r0, #0]
 80046f4:	6813      	ldr	r3, [r2, #0]
 80046f6:	f043 0301 	orr.w	r3, r3, #1
 80046fa:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046fc:	2320      	movs	r3, #32
 80046fe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004702:	2300      	movs	r3, #0
 8004704:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004708:	4618      	mov	r0, r3
 800470a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800470c:	2002      	movs	r0, #2
 800470e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004710:	2002      	movs	r0, #2
  }
}
 8004712:	4770      	bx	lr

08004714 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004714:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b20      	cmp	r3, #32
 800471c:	d122      	bne.n	8004764 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800471e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004722:	2b01      	cmp	r3, #1
 8004724:	d020      	beq.n	8004768 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8004726:	2301      	movs	r3, #1
 8004728:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800472c:	2324      	movs	r3, #36	; 0x24
 800472e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004732:	6802      	ldr	r2, [r0, #0]
 8004734:	6813      	ldr	r3, [r2, #0]
 8004736:	f023 0301 	bic.w	r3, r3, #1
 800473a:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800473c:	6802      	ldr	r2, [r0, #0]
 800473e:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004740:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004744:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004748:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800474a:	6802      	ldr	r2, [r0, #0]
 800474c:	6813      	ldr	r3, [r2, #0]
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004754:	2320      	movs	r3, #32
 8004756:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800475a:	2300      	movs	r3, #0
 800475c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004760:	4618      	mov	r0, r3
 8004762:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004764:	2002      	movs	r0, #2
 8004766:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004768:	2002      	movs	r0, #2
  }
}
 800476a:	4770      	bx	lr

0800476c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800476c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800476e:	684d      	ldr	r5, [r1, #4]
 8004770:	6804      	ldr	r4, [r0, #0]
 8004772:	68e3      	ldr	r3, [r4, #12]
 8004774:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8004778:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800477a:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 800477e:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8004782:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004786:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800478a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800478e:	680b      	ldr	r3, [r1, #0]
 8004790:	6804      	ldr	r4, [r0, #0]
 8004792:	68e6      	ldr	r6, [r4, #12]
 8004794:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8004798:	4433      	add	r3, r6
 800479a:	3301      	adds	r3, #1
 800479c:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 80047a0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80047a4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80047a8:	68cd      	ldr	r5, [r1, #12]
 80047aa:	6804      	ldr	r4, [r0, #0]
 80047ac:	68e3      	ldr	r3, [r4, #12]
 80047ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047b2:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80047b4:	eb04 1ec2 	add.w	lr, r4, r2, lsl #7
 80047b8:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 80047bc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80047c0:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80047c4:	688b      	ldr	r3, [r1, #8]
 80047c6:	6804      	ldr	r4, [r0, #0]
 80047c8:	68e6      	ldr	r6, [r4, #12]
 80047ca:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 80047ce:	4473      	add	r3, lr
 80047d0:	3301      	adds	r3, #1
 80047d2:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 80047d6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80047da:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80047de:	6803      	ldr	r3, [r0, #0]
 80047e0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80047e4:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 80047e8:	f024 0407 	bic.w	r4, r4, #7
 80047ec:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80047f0:	6803      	ldr	r3, [r0, #0]
 80047f2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80047f6:	690c      	ldr	r4, [r1, #16]
 80047f8:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80047fc:	f891 7031 	ldrb.w	r7, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004800:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004804:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004806:	6804      	ldr	r4, [r0, #0]
 8004808:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800480c:	f104 0e84 	add.w	lr, r4, #132	; 0x84
 8004810:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8004814:	2400      	movs	r4, #0
 8004816:	f8ce 4018 	str.w	r4, [lr, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800481a:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800481e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8004822:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8004826:	6806      	ldr	r6, [r0, #0]
 8004828:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 800482c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8004830:	f8ce 309c 	str.w	r3, [lr, #156]	; 0x9c
 8004834:	f10e 0e84 	add.w	lr, lr, #132	; 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004838:	6803      	ldr	r3, [r0, #0]
 800483a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800483e:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8004842:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8004846:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800484a:	6803      	ldr	r3, [r0, #0]
 800484c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8004850:	694d      	ldr	r5, [r1, #20]
 8004852:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004856:	6803      	ldr	r3, [r0, #0]
 8004858:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800485c:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8004860:	4d2e      	ldr	r5, [pc, #184]	; (800491c <LTDC_SetConfig+0x1b0>)
 8004862:	4035      	ands	r5, r6
 8004864:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004868:	6a0d      	ldr	r5, [r1, #32]
 800486a:	6803      	ldr	r3, [r0, #0]
 800486c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8004870:	69ce      	ldr	r6, [r1, #28]
 8004872:	4335      	orrs	r5, r6
 8004874:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004878:	6803      	ldr	r3, [r0, #0]
 800487a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800487e:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8004882:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004886:	6803      	ldr	r3, [r0, #0]
 8004888:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 800488c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800488e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004892:	690b      	ldr	r3, [r1, #16]
 8004894:	b16b      	cbz	r3, 80048b2 <LTDC_SetConfig+0x146>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004896:	2b01      	cmp	r3, #1
 8004898:	d039      	beq.n	800490e <LTDC_SetConfig+0x1a2>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800489a:	2b02      	cmp	r3, #2
 800489c:	bf18      	it	ne
 800489e:	2b04      	cmpne	r3, #4
 80048a0:	d037      	beq.n	8004912 <LTDC_SetConfig+0x1a6>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d037      	beq.n	8004916 <LTDC_SetConfig+0x1aa>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80048a6:	2b07      	cmp	r3, #7
 80048a8:	d001      	beq.n	80048ae <LTDC_SetConfig+0x142>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 80048aa:	2501      	movs	r5, #1
 80048ac:	e002      	b.n	80048b4 <LTDC_SetConfig+0x148>
    tmp = 2U;
 80048ae:	2502      	movs	r5, #2
 80048b0:	e000      	b.n	80048b4 <LTDC_SetConfig+0x148>
    tmp = 4U;
 80048b2:	2504      	movs	r5, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80048b4:	6802      	ldr	r2, [r0, #0]
 80048b6:	4462      	add	r2, ip
 80048b8:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 80048bc:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 80048c0:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80048c4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80048c6:	fb05 f402 	mul.w	r4, r5, r2
 80048ca:	684b      	ldr	r3, [r1, #4]
 80048cc:	680a      	ldr	r2, [r1, #0]
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	fb05 f303 	mul.w	r3, r5, r3
 80048d4:	3303      	adds	r3, #3
 80048d6:	6802      	ldr	r2, [r0, #0]
 80048d8:	4462      	add	r2, ip
 80048da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80048de:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80048e2:	6803      	ldr	r3, [r0, #0]
 80048e4:	4463      	add	r3, ip
 80048e6:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80048ea:	4a0d      	ldr	r2, [pc, #52]	; (8004920 <LTDC_SetConfig+0x1b4>)
 80048ec:	4022      	ands	r2, r4
 80048ee:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80048f2:	6803      	ldr	r3, [r0, #0]
 80048f4:	4463      	add	r3, ip
 80048f6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80048f8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80048fc:	6803      	ldr	r3, [r0, #0]
 80048fe:	449c      	add	ip, r3
 8004900:	f8dc 3084 	ldr.w	r3, [ip, #132]	; 0x84
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
}
 800490c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 800490e:	2503      	movs	r5, #3
 8004910:	e7d0      	b.n	80048b4 <LTDC_SetConfig+0x148>
    tmp = 2U;
 8004912:	2502      	movs	r5, #2
 8004914:	e7ce      	b.n	80048b4 <LTDC_SetConfig+0x148>
 8004916:	2502      	movs	r5, #2
 8004918:	e7cc      	b.n	80048b4 <LTDC_SetConfig+0x148>
 800491a:	bf00      	nop
 800491c:	fffff8f8 	.word	0xfffff8f8
 8004920:	fffff800 	.word	0xfffff800

08004924 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8004924:	2800      	cmp	r0, #0
 8004926:	d072      	beq.n	8004a0e <HAL_LTDC_Init+0xea>
{
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800492c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d067      	beq.n	8004a04 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004934:	2302      	movs	r3, #2
 8004936:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800493a:	6822      	ldr	r2, [r4, #0]
 800493c:	6993      	ldr	r3, [r2, #24]
 800493e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004942:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004944:	6821      	ldr	r1, [r4, #0]
 8004946:	698a      	ldr	r2, [r1, #24]
 8004948:	6863      	ldr	r3, [r4, #4]
 800494a:	68a0      	ldr	r0, [r4, #8]
 800494c:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800494e:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004950:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004952:	6920      	ldr	r0, [r4, #16]
 8004954:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004956:	4313      	orrs	r3, r2
 8004958:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800495a:	6821      	ldr	r1, [r4, #0]
 800495c:	688a      	ldr	r2, [r1, #8]
 800495e:	4b2d      	ldr	r3, [pc, #180]	; (8004a14 <HAL_LTDC_Init+0xf0>)
 8004960:	401a      	ands	r2, r3
 8004962:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004964:	6820      	ldr	r0, [r4, #0]
 8004966:	6882      	ldr	r2, [r0, #8]
 8004968:	69a1      	ldr	r1, [r4, #24]
 800496a:	6965      	ldr	r5, [r4, #20]
 800496c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8004970:	430a      	orrs	r2, r1
 8004972:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004974:	6821      	ldr	r1, [r4, #0]
 8004976:	68ca      	ldr	r2, [r1, #12]
 8004978:	401a      	ands	r2, r3
 800497a:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800497c:	6820      	ldr	r0, [r4, #0]
 800497e:	68c2      	ldr	r2, [r0, #12]
 8004980:	6a21      	ldr	r1, [r4, #32]
 8004982:	69e5      	ldr	r5, [r4, #28]
 8004984:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8004988:	430a      	orrs	r2, r1
 800498a:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800498c:	6821      	ldr	r1, [r4, #0]
 800498e:	690a      	ldr	r2, [r1, #16]
 8004990:	401a      	ands	r2, r3
 8004992:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004994:	6820      	ldr	r0, [r4, #0]
 8004996:	6902      	ldr	r2, [r0, #16]
 8004998:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800499a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800499c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80049a0:	430a      	orrs	r2, r1
 80049a2:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80049a4:	6821      	ldr	r1, [r4, #0]
 80049a6:	694a      	ldr	r2, [r1, #20]
 80049a8:	4013      	ands	r3, r2
 80049aa:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80049ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80049ae:	6821      	ldr	r1, [r4, #0]
 80049b0:	694b      	ldr	r3, [r1, #20]
 80049b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80049b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80049b8:	4313      	orrs	r3, r2
 80049ba:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80049bc:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80049c0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80049c4:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80049c6:	6821      	ldr	r1, [r4, #0]
 80049c8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80049ca:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80049ce:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80049d0:	6821      	ldr	r1, [r4, #0]
 80049d2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80049d4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80049d8:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80049dc:	4303      	orrs	r3, r0
 80049de:	4313      	orrs	r3, r2
 80049e0:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80049e2:	6822      	ldr	r2, [r4, #0]
 80049e4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80049e6:	f043 0306 	orr.w	r3, r3, #6
 80049ea:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80049ec:	6822      	ldr	r2, [r4, #0]
 80049ee:	6993      	ldr	r3, [r2, #24]
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80049f6:	2000      	movs	r0, #0
 80049f8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80049fc:	2301      	movs	r3, #1
 80049fe:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8004a02:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8004a04:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8004a08:	f7fe fe9c 	bl	8003744 <HAL_LTDC_MspInit>
 8004a0c:	e792      	b.n	8004934 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8004a0e:	2001      	movs	r0, #1
}
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	f000f800 	.word	0xf000f800

08004a18 <HAL_LTDC_ErrorCallback>:
}
 8004a18:	4770      	bx	lr

08004a1a <HAL_LTDC_LineEventCallback>:
}
 8004a1a:	4770      	bx	lr

08004a1c <HAL_LTDC_ReloadEventCallback>:
}
 8004a1c:	4770      	bx	lr

08004a1e <HAL_LTDC_IRQHandler>:
{
 8004a1e:	b570      	push	{r4, r5, r6, lr}
 8004a20:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004a22:	6803      	ldr	r3, [r0, #0]
 8004a24:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004a26:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004a28:	f015 0f04 	tst.w	r5, #4
 8004a2c:	d002      	beq.n	8004a34 <HAL_LTDC_IRQHandler+0x16>
 8004a2e:	f016 0f04 	tst.w	r6, #4
 8004a32:	d112      	bne.n	8004a5a <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004a34:	f015 0f02 	tst.w	r5, #2
 8004a38:	d002      	beq.n	8004a40 <HAL_LTDC_IRQHandler+0x22>
 8004a3a:	f016 0f02 	tst.w	r6, #2
 8004a3e:	d121      	bne.n	8004a84 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004a40:	f015 0f01 	tst.w	r5, #1
 8004a44:	d002      	beq.n	8004a4c <HAL_LTDC_IRQHandler+0x2e>
 8004a46:	f016 0f01 	tst.w	r6, #1
 8004a4a:	d132      	bne.n	8004ab2 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004a4c:	f015 0f08 	tst.w	r5, #8
 8004a50:	d002      	beq.n	8004a58 <HAL_LTDC_IRQHandler+0x3a>
 8004a52:	f016 0f08 	tst.w	r6, #8
 8004a56:	d13d      	bne.n	8004ad4 <HAL_LTDC_IRQHandler+0xb6>
}
 8004a58:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a5c:	f022 0204 	bic.w	r2, r2, #4
 8004a60:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004a62:	6803      	ldr	r3, [r0, #0]
 8004a64:	2204      	movs	r2, #4
 8004a66:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004a68:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8004a6c:	f043 0301 	orr.w	r3, r3, #1
 8004a70:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004a74:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8004a7e:	f7ff ffcb 	bl	8004a18 <HAL_LTDC_ErrorCallback>
 8004a82:	e7d7      	b.n	8004a34 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004a84:	6822      	ldr	r2, [r4, #0]
 8004a86:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004a88:	f023 0302 	bic.w	r3, r3, #2
 8004a8c:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	2202      	movs	r2, #2
 8004a92:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004a94:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004a9e:	2304      	movs	r3, #4
 8004aa0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8004aaa:	4620      	mov	r0, r4
 8004aac:	f7ff ffb4 	bl	8004a18 <HAL_LTDC_ErrorCallback>
 8004ab0:	e7c6      	b.n	8004a40 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004ab2:	6822      	ldr	r2, [r4, #0]
 8004ab4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004ab6:	f023 0301 	bic.w	r3, r3, #1
 8004aba:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004abc:	6822      	ldr	r2, [r4, #0]
 8004abe:	2301      	movs	r3, #1
 8004ac0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8004ac2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8004acc:	4620      	mov	r0, r4
 8004ace:	f7ff ffa4 	bl	8004a1a <HAL_LTDC_LineEventCallback>
 8004ad2:	e7bb      	b.n	8004a4c <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004ad4:	6822      	ldr	r2, [r4, #0]
 8004ad6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004ad8:	f023 0308 	bic.w	r3, r3, #8
 8004adc:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	2208      	movs	r2, #8
 8004ae2:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004aea:	2300      	movs	r3, #0
 8004aec:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004af0:	4620      	mov	r0, r4
 8004af2:	f7ff ff93 	bl	8004a1c <HAL_LTDC_ReloadEventCallback>
}
 8004af6:	e7af      	b.n	8004a58 <HAL_LTDC_IRQHandler+0x3a>

08004af8 <HAL_LTDC_ConfigLayer>:
{
 8004af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8004afa:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d02c      	beq.n	8004b5c <HAL_LTDC_ConfigLayer+0x64>
 8004b02:	4604      	mov	r4, r0
 8004b04:	460d      	mov	r5, r1
 8004b06:	4616      	mov	r6, r2
 8004b08:	2701      	movs	r7, #1
 8004b0a:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004b0e:	2302      	movs	r3, #2
 8004b10:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004b14:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8004b18:	fb0c 0c02 	mla	ip, ip, r2, r0
 8004b1c:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8004b20:	468e      	mov	lr, r1
 8004b22:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004b26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004b2a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004b2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004b32:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004b36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004b3a:	f8de 3000 	ldr.w	r3, [lr]
 8004b3e:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004b42:	4632      	mov	r2, r6
 8004b44:	4629      	mov	r1, r5
 8004b46:	4620      	mov	r0, r4
 8004b48:	f7ff fe10 	bl	800476c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004b50:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004b54:	2000      	movs	r0, #0
 8004b56:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8004b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 8004b5c:	2002      	movs	r0, #2
 8004b5e:	e7fc      	b.n	8004b5a <HAL_LTDC_ConfigLayer+0x62>

08004b60 <HAL_LTDC_SetAddress>:
{
 8004b60:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hltdc);
 8004b62:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d019      	beq.n	8004b9e <HAL_LTDC_SetAddress+0x3e>
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	2501      	movs	r5, #1
 8004b6e:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004b72:	2302      	movs	r3, #2
 8004b74:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8004b78:	2334      	movs	r3, #52	; 0x34
 8004b7a:	fb02 f303 	mul.w	r3, r2, r3
 8004b7e:	f103 0038 	add.w	r0, r3, #56	; 0x38
  pLayerCfg->FBStartAdress = Address;
 8004b82:	4423      	add	r3, r4
 8004b84:	65d9      	str	r1, [r3, #92]	; 0x5c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004b86:	1821      	adds	r1, r4, r0
 8004b88:	4620      	mov	r0, r4
 8004b8a:	f7ff fdef 	bl	800476c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8004b92:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004b96:	2000      	movs	r0, #0
 8004b98:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8004b9c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hltdc);
 8004b9e:	2002      	movs	r0, #2
 8004ba0:	e7fc      	b.n	8004b9c <HAL_LTDC_SetAddress+0x3c>
	...

08004ba4 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ba4:	4a02      	ldr	r2, [pc, #8]	; (8004bb0 <HAL_PWR_EnableBkUpAccess+0xc>)
 8004ba6:	6813      	ldr	r3, [r2, #0]
 8004ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bac:	6013      	str	r3, [r2, #0]
}
 8004bae:	4770      	bx	lr
 8004bb0:	40007000 	.word	0x40007000

08004bb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004bb4:	b510      	push	{r4, lr}
 8004bb6:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bb8:	4b1b      	ldr	r3, [pc, #108]	; (8004c28 <HAL_PWREx_EnableOverDrive+0x74>)
 8004bba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bbc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004bc0:	641a      	str	r2, [r3, #64]	; 0x40
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc8:	9301      	str	r3, [sp, #4]
 8004bca:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004bcc:	4a17      	ldr	r2, [pc, #92]	; (8004c2c <HAL_PWREx_EnableOverDrive+0x78>)
 8004bce:	6813      	ldr	r3, [r2, #0]
 8004bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bd6:	f7fe ff0d 	bl	80039f4 <HAL_GetTick>
 8004bda:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bdc:	4b13      	ldr	r3, [pc, #76]	; (8004c2c <HAL_PWREx_EnableOverDrive+0x78>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004be4:	d108      	bne.n	8004bf8 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004be6:	f7fe ff05 	bl	80039f4 <HAL_GetTick>
 8004bea:	1b00      	subs	r0, r0, r4
 8004bec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004bf0:	d9f4      	bls.n	8004bdc <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8004bf2:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8004bf4:	b002      	add	sp, #8
 8004bf6:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004bf8:	4a0c      	ldr	r2, [pc, #48]	; (8004c2c <HAL_PWREx_EnableOverDrive+0x78>)
 8004bfa:	6813      	ldr	r3, [r2, #0]
 8004bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c00:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8004c02:	f7fe fef7 	bl	80039f4 <HAL_GetTick>
 8004c06:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c08:	4b08      	ldr	r3, [pc, #32]	; (8004c2c <HAL_PWREx_EnableOverDrive+0x78>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004c10:	d107      	bne.n	8004c22 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c12:	f7fe feef 	bl	80039f4 <HAL_GetTick>
 8004c16:	1b00      	subs	r0, r0, r4
 8004c18:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004c1c:	d9f4      	bls.n	8004c08 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8004c1e:	2003      	movs	r0, #3
 8004c20:	e7e8      	b.n	8004bf4 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8004c22:	2000      	movs	r0, #0
 8004c24:	e7e6      	b.n	8004bf4 <HAL_PWREx_EnableOverDrive+0x40>
 8004c26:	bf00      	nop
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	40007000 	.word	0x40007000

08004c30 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c30:	2800      	cmp	r0, #0
 8004c32:	f000 81ff 	beq.w	8005034 <HAL_RCC_OscConfig+0x404>
{
 8004c36:	b570      	push	{r4, r5, r6, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c3c:	6803      	ldr	r3, [r0, #0]
 8004c3e:	f013 0f01 	tst.w	r3, #1
 8004c42:	d029      	beq.n	8004c98 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c44:	4b95      	ldr	r3, [pc, #596]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 030c 	and.w	r3, r3, #12
 8004c4c:	2b04      	cmp	r3, #4
 8004c4e:	d01a      	beq.n	8004c86 <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c50:	4b92      	ldr	r3, [pc, #584]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 030c 	and.w	r3, r3, #12
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d00f      	beq.n	8004c7c <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c5c:	6863      	ldr	r3, [r4, #4]
 8004c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c62:	d040      	beq.n	8004ce6 <HAL_RCC_OscConfig+0xb6>
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d154      	bne.n	8004d12 <HAL_RCC_OscConfig+0xe2>
 8004c68:	4b8c      	ldr	r3, [pc, #560]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	e039      	b.n	8004cf0 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c7c:	4b87      	ldr	r3, [pc, #540]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004c84:	d0ea      	beq.n	8004c5c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c86:	4b85      	ldr	r3, [pc, #532]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004c8e:	d003      	beq.n	8004c98 <HAL_RCC_OscConfig+0x68>
 8004c90:	6863      	ldr	r3, [r4, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 81d0 	beq.w	8005038 <HAL_RCC_OscConfig+0x408>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	f013 0f02 	tst.w	r3, #2
 8004c9e:	d074      	beq.n	8004d8a <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ca0:	4b7e      	ldr	r3, [pc, #504]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f013 0f0c 	tst.w	r3, #12
 8004ca8:	d05e      	beq.n	8004d68 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004caa:	4b7c      	ldr	r3, [pc, #496]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	d053      	beq.n	8004d5e <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004cb6:	68e3      	ldr	r3, [r4, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 8089 	beq.w	8004dd0 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cbe:	4a77      	ldr	r2, [pc, #476]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cc0:	6813      	ldr	r3, [r2, #0]
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc8:	f7fe fe94 	bl	80039f4 <HAL_GetTick>
 8004ccc:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cce:	4b73      	ldr	r3, [pc, #460]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f013 0f02 	tst.w	r3, #2
 8004cd6:	d172      	bne.n	8004dbe <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd8:	f7fe fe8c 	bl	80039f4 <HAL_GetTick>
 8004cdc:	1b40      	subs	r0, r0, r5
 8004cde:	2802      	cmp	r0, #2
 8004ce0:	d9f5      	bls.n	8004cce <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8004ce2:	2003      	movs	r0, #3
 8004ce4:	e1ad      	b.n	8005042 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce6:	4a6d      	ldr	r2, [pc, #436]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004ce8:	6813      	ldr	r3, [r2, #0]
 8004cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cee:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cf0:	6863      	ldr	r3, [r4, #4]
 8004cf2:	b32b      	cbz	r3, 8004d40 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8004cf4:	f7fe fe7e 	bl	80039f4 <HAL_GetTick>
 8004cf8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfa:	4b68      	ldr	r3, [pc, #416]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004d02:	d1c9      	bne.n	8004c98 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d04:	f7fe fe76 	bl	80039f4 <HAL_GetTick>
 8004d08:	1b40      	subs	r0, r0, r5
 8004d0a:	2864      	cmp	r0, #100	; 0x64
 8004d0c:	d9f5      	bls.n	8004cfa <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8004d0e:	2003      	movs	r0, #3
 8004d10:	e197      	b.n	8005042 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d16:	d009      	beq.n	8004d2c <HAL_RCC_OscConfig+0xfc>
 8004d18:	4b60      	ldr	r3, [pc, #384]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	e7e1      	b.n	8004cf0 <HAL_RCC_OscConfig+0xc0>
 8004d2c:	4b5b      	ldr	r3, [pc, #364]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	e7d7      	b.n	8004cf0 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8004d40:	f7fe fe58 	bl	80039f4 <HAL_GetTick>
 8004d44:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d46:	4b55      	ldr	r3, [pc, #340]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004d4e:	d0a3      	beq.n	8004c98 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d50:	f7fe fe50 	bl	80039f4 <HAL_GetTick>
 8004d54:	1b40      	subs	r0, r0, r5
 8004d56:	2864      	cmp	r0, #100	; 0x64
 8004d58:	d9f5      	bls.n	8004d46 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8004d5a:	2003      	movs	r0, #3
 8004d5c:	e171      	b.n	8005042 <HAL_RCC_OscConfig+0x412>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d5e:	4b4f      	ldr	r3, [pc, #316]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004d66:	d1a6      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d68:	4b4c      	ldr	r3, [pc, #304]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f013 0f02 	tst.w	r3, #2
 8004d70:	d003      	beq.n	8004d7a <HAL_RCC_OscConfig+0x14a>
 8004d72:	68e3      	ldr	r3, [r4, #12]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	f040 8161 	bne.w	800503c <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d7a:	4a48      	ldr	r2, [pc, #288]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d7c:	6813      	ldr	r3, [r2, #0]
 8004d7e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004d82:	6921      	ldr	r1, [r4, #16]
 8004d84:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004d88:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	f013 0f08 	tst.w	r3, #8
 8004d90:	d046      	beq.n	8004e20 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d92:	6963      	ldr	r3, [r4, #20]
 8004d94:	b383      	cbz	r3, 8004df8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d96:	4a41      	ldr	r2, [pc, #260]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d98:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da0:	f7fe fe28 	bl	80039f4 <HAL_GetTick>
 8004da4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004da6:	4b3d      	ldr	r3, [pc, #244]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004daa:	f013 0f02 	tst.w	r3, #2
 8004dae:	d137      	bne.n	8004e20 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004db0:	f7fe fe20 	bl	80039f4 <HAL_GetTick>
 8004db4:	1b40      	subs	r0, r0, r5
 8004db6:	2802      	cmp	r0, #2
 8004db8:	d9f5      	bls.n	8004da6 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8004dba:	2003      	movs	r0, #3
 8004dbc:	e141      	b.n	8005042 <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dbe:	4a37      	ldr	r2, [pc, #220]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004dc0:	6813      	ldr	r3, [r2, #0]
 8004dc2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004dc6:	6921      	ldr	r1, [r4, #16]
 8004dc8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	e7dc      	b.n	8004d8a <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8004dd0:	4a32      	ldr	r2, [pc, #200]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004dd2:	6813      	ldr	r3, [r2, #0]
 8004dd4:	f023 0301 	bic.w	r3, r3, #1
 8004dd8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004dda:	f7fe fe0b 	bl	80039f4 <HAL_GetTick>
 8004dde:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004de0:	4b2e      	ldr	r3, [pc, #184]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f013 0f02 	tst.w	r3, #2
 8004de8:	d0cf      	beq.n	8004d8a <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dea:	f7fe fe03 	bl	80039f4 <HAL_GetTick>
 8004dee:	1b40      	subs	r0, r0, r5
 8004df0:	2802      	cmp	r0, #2
 8004df2:	d9f5      	bls.n	8004de0 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8004df4:	2003      	movs	r0, #3
 8004df6:	e124      	b.n	8005042 <HAL_RCC_OscConfig+0x412>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004df8:	4a28      	ldr	r2, [pc, #160]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004dfa:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004dfc:	f023 0301 	bic.w	r3, r3, #1
 8004e00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e02:	f7fe fdf7 	bl	80039f4 <HAL_GetTick>
 8004e06:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e08:	4b24      	ldr	r3, [pc, #144]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0c:	f013 0f02 	tst.w	r3, #2
 8004e10:	d006      	beq.n	8004e20 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e12:	f7fe fdef 	bl	80039f4 <HAL_GetTick>
 8004e16:	1b40      	subs	r0, r0, r5
 8004e18:	2802      	cmp	r0, #2
 8004e1a:	d9f5      	bls.n	8004e08 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8004e1c:	2003      	movs	r0, #3
 8004e1e:	e110      	b.n	8005042 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	f013 0f04 	tst.w	r3, #4
 8004e26:	d07d      	beq.n	8004f24 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e28:	4b1c      	ldr	r3, [pc, #112]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004e30:	d11e      	bne.n	8004e70 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e32:	4b1a      	ldr	r3, [pc, #104]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e42:	9301      	str	r3, [sp, #4]
 8004e44:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004e46:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e48:	4b15      	ldr	r3, [pc, #84]	; (8004ea0 <HAL_RCC_OscConfig+0x270>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004e50:	d010      	beq.n	8004e74 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e52:	68a3      	ldr	r3, [r4, #8]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d025      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x274>
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d13b      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x2a4>
 8004e5c:	4b0f      	ldr	r3, [pc, #60]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004e5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e60:	f022 0201 	bic.w	r2, r2, #1
 8004e64:	671a      	str	r2, [r3, #112]	; 0x70
 8004e66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e68:	f022 0204 	bic.w	r2, r2, #4
 8004e6c:	671a      	str	r2, [r3, #112]	; 0x70
 8004e6e:	e01e      	b.n	8004eae <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 8004e70:	2500      	movs	r5, #0
 8004e72:	e7e9      	b.n	8004e48 <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 8004e74:	4a0a      	ldr	r2, [pc, #40]	; (8004ea0 <HAL_RCC_OscConfig+0x270>)
 8004e76:	6813      	ldr	r3, [r2, #0]
 8004e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e7c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004e7e:	f7fe fdb9 	bl	80039f4 <HAL_GetTick>
 8004e82:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e84:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <HAL_RCC_OscConfig+0x270>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004e8c:	d1e1      	bne.n	8004e52 <HAL_RCC_OscConfig+0x222>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e8e:	f7fe fdb1 	bl	80039f4 <HAL_GetTick>
 8004e92:	1b80      	subs	r0, r0, r6
 8004e94:	2864      	cmp	r0, #100	; 0x64
 8004e96:	d9f5      	bls.n	8004e84 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8004e98:	2003      	movs	r0, #3
 8004e9a:	e0d2      	b.n	8005042 <HAL_RCC_OscConfig+0x412>
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ea4:	4a6e      	ldr	r2, [pc, #440]	; (8005060 <HAL_RCC_OscConfig+0x430>)
 8004ea6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004ea8:	f043 0301 	orr.w	r3, r3, #1
 8004eac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eae:	68a3      	ldr	r3, [r4, #8]
 8004eb0:	b333      	cbz	r3, 8004f00 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb2:	f7fe fd9f 	bl	80039f4 <HAL_GetTick>
 8004eb6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb8:	4b69      	ldr	r3, [pc, #420]	; (8005060 <HAL_RCC_OscConfig+0x430>)
 8004eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebc:	f013 0f02 	tst.w	r3, #2
 8004ec0:	d12f      	bne.n	8004f22 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec2:	f7fe fd97 	bl	80039f4 <HAL_GetTick>
 8004ec6:	1b80      	subs	r0, r0, r6
 8004ec8:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ecc:	4298      	cmp	r0, r3
 8004ece:	d9f3      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004ed0:	2003      	movs	r0, #3
 8004ed2:	e0b6      	b.n	8005042 <HAL_RCC_OscConfig+0x412>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ed4:	2b05      	cmp	r3, #5
 8004ed6:	d009      	beq.n	8004eec <HAL_RCC_OscConfig+0x2bc>
 8004ed8:	4b61      	ldr	r3, [pc, #388]	; (8005060 <HAL_RCC_OscConfig+0x430>)
 8004eda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004edc:	f022 0201 	bic.w	r2, r2, #1
 8004ee0:	671a      	str	r2, [r3, #112]	; 0x70
 8004ee2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ee4:	f022 0204 	bic.w	r2, r2, #4
 8004ee8:	671a      	str	r2, [r3, #112]	; 0x70
 8004eea:	e7e0      	b.n	8004eae <HAL_RCC_OscConfig+0x27e>
 8004eec:	4b5c      	ldr	r3, [pc, #368]	; (8005060 <HAL_RCC_OscConfig+0x430>)
 8004eee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ef0:	f042 0204 	orr.w	r2, r2, #4
 8004ef4:	671a      	str	r2, [r3, #112]	; 0x70
 8004ef6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ef8:	f042 0201 	orr.w	r2, r2, #1
 8004efc:	671a      	str	r2, [r3, #112]	; 0x70
 8004efe:	e7d6      	b.n	8004eae <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f00:	f7fe fd78 	bl	80039f4 <HAL_GetTick>
 8004f04:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f06:	4b56      	ldr	r3, [pc, #344]	; (8005060 <HAL_RCC_OscConfig+0x430>)
 8004f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0a:	f013 0f02 	tst.w	r3, #2
 8004f0e:	d008      	beq.n	8004f22 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f10:	f7fe fd70 	bl	80039f4 <HAL_GetTick>
 8004f14:	1b80      	subs	r0, r0, r6
 8004f16:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f1a:	4298      	cmp	r0, r3
 8004f1c:	d9f3      	bls.n	8004f06 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8004f1e:	2003      	movs	r0, #3
 8004f20:	e08f      	b.n	8005042 <HAL_RCC_OscConfig+0x412>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f22:	b9fd      	cbnz	r5, 8004f64 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f24:	69a3      	ldr	r3, [r4, #24]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 808a 	beq.w	8005040 <HAL_RCC_OscConfig+0x410>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f2c:	4a4c      	ldr	r2, [pc, #304]	; (8005060 <HAL_RCC_OscConfig+0x430>)
 8004f2e:	6892      	ldr	r2, [r2, #8]
 8004f30:	f002 020c 	and.w	r2, r2, #12
 8004f34:	2a08      	cmp	r2, #8
 8004f36:	d058      	beq.n	8004fea <HAL_RCC_OscConfig+0x3ba>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d019      	beq.n	8004f70 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f3c:	4a48      	ldr	r2, [pc, #288]	; (8005060 <HAL_RCC_OscConfig+0x430>)
 8004f3e:	6813      	ldr	r3, [r2, #0]
 8004f40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f46:	f7fe fd55 	bl	80039f4 <HAL_GetTick>
 8004f4a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4c:	4b44      	ldr	r3, [pc, #272]	; (8005060 <HAL_RCC_OscConfig+0x430>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004f54:	d047      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x3b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f56:	f7fe fd4d 	bl	80039f4 <HAL_GetTick>
 8004f5a:	1b00      	subs	r0, r0, r4
 8004f5c:	2802      	cmp	r0, #2
 8004f5e:	d9f5      	bls.n	8004f4c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004f60:	2003      	movs	r0, #3
 8004f62:	e06e      	b.n	8005042 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f64:	4a3e      	ldr	r2, [pc, #248]	; (8005060 <HAL_RCC_OscConfig+0x430>)
 8004f66:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f6e:	e7d9      	b.n	8004f24 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8004f70:	4a3b      	ldr	r2, [pc, #236]	; (8005060 <HAL_RCC_OscConfig+0x430>)
 8004f72:	6813      	ldr	r3, [r2, #0]
 8004f74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f78:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004f7a:	f7fe fd3b 	bl	80039f4 <HAL_GetTick>
 8004f7e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f80:	4b37      	ldr	r3, [pc, #220]	; (8005060 <HAL_RCC_OscConfig+0x430>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004f88:	d006      	beq.n	8004f98 <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f8a:	f7fe fd33 	bl	80039f4 <HAL_GetTick>
 8004f8e:	1b40      	subs	r0, r0, r5
 8004f90:	2802      	cmp	r0, #2
 8004f92:	d9f5      	bls.n	8004f80 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8004f94:	2003      	movs	r0, #3
 8004f96:	e054      	b.n	8005042 <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f98:	69e3      	ldr	r3, [r4, #28]
 8004f9a:	6a22      	ldr	r2, [r4, #32]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004fa0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004fa4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004fa6:	0852      	lsrs	r2, r2, #1
 8004fa8:	3a01      	subs	r2, #1
 8004faa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004fb0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004fb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fb8:	4a29      	ldr	r2, [pc, #164]	; (8005060 <HAL_RCC_OscConfig+0x430>)
 8004fba:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8004fbc:	6813      	ldr	r3, [r2, #0]
 8004fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fc2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004fc4:	f7fe fd16 	bl	80039f4 <HAL_GetTick>
 8004fc8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fca:	4b25      	ldr	r3, [pc, #148]	; (8005060 <HAL_RCC_OscConfig+0x430>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004fd2:	d106      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd4:	f7fe fd0e 	bl	80039f4 <HAL_GetTick>
 8004fd8:	1b00      	subs	r0, r0, r4
 8004fda:	2802      	cmp	r0, #2
 8004fdc:	d9f5      	bls.n	8004fca <HAL_RCC_OscConfig+0x39a>
            return HAL_TIMEOUT;
 8004fde:	2003      	movs	r0, #3
 8004fe0:	e02f      	b.n	8005042 <HAL_RCC_OscConfig+0x412>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	e02d      	b.n	8005042 <HAL_RCC_OscConfig+0x412>
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	e02b      	b.n	8005042 <HAL_RCC_OscConfig+0x412>
      pll_config = RCC->PLLCFGR;
 8004fea:	4a1d      	ldr	r2, [pc, #116]	; (8005060 <HAL_RCC_OscConfig+0x430>)
 8004fec:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d029      	beq.n	8005046 <HAL_RCC_OscConfig+0x416>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff2:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004ff6:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ff8:	428b      	cmp	r3, r1
 8004ffa:	d126      	bne.n	800504a <HAL_RCC_OscConfig+0x41a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ffc:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8005000:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005002:	428b      	cmp	r3, r1
 8005004:	d123      	bne.n	800504e <HAL_RCC_OscConfig+0x41e>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005006:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005008:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800500c:	4013      	ands	r3, r2
 800500e:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8005012:	d11e      	bne.n	8005052 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005014:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8005018:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800501a:	085b      	lsrs	r3, r3, #1
 800501c:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800501e:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8005022:	d118      	bne.n	8005056 <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005024:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8005028:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800502a:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 800502e:	d114      	bne.n	800505a <HAL_RCC_OscConfig+0x42a>
  return HAL_OK;
 8005030:	2000      	movs	r0, #0
 8005032:	e006      	b.n	8005042 <HAL_RCC_OscConfig+0x412>
    return HAL_ERROR;
 8005034:	2001      	movs	r0, #1
}
 8005036:	4770      	bx	lr
        return HAL_ERROR;
 8005038:	2001      	movs	r0, #1
 800503a:	e002      	b.n	8005042 <HAL_RCC_OscConfig+0x412>
        return HAL_ERROR;
 800503c:	2001      	movs	r0, #1
 800503e:	e000      	b.n	8005042 <HAL_RCC_OscConfig+0x412>
  return HAL_OK;
 8005040:	2000      	movs	r0, #0
}
 8005042:	b002      	add	sp, #8
 8005044:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8005046:	2001      	movs	r0, #1
 8005048:	e7fb      	b.n	8005042 <HAL_RCC_OscConfig+0x412>
 800504a:	2001      	movs	r0, #1
 800504c:	e7f9      	b.n	8005042 <HAL_RCC_OscConfig+0x412>
 800504e:	2001      	movs	r0, #1
 8005050:	e7f7      	b.n	8005042 <HAL_RCC_OscConfig+0x412>
 8005052:	2001      	movs	r0, #1
 8005054:	e7f5      	b.n	8005042 <HAL_RCC_OscConfig+0x412>
 8005056:	2001      	movs	r0, #1
 8005058:	e7f3      	b.n	8005042 <HAL_RCC_OscConfig+0x412>
 800505a:	2001      	movs	r0, #1
 800505c:	e7f1      	b.n	8005042 <HAL_RCC_OscConfig+0x412>
 800505e:	bf00      	nop
 8005060:	40023800 	.word	0x40023800

08005064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005064:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005066:	4b25      	ldr	r3, [pc, #148]	; (80050fc <HAL_RCC_GetSysClockFreq+0x98>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 030c 	and.w	r3, r3, #12
 800506e:	2b04      	cmp	r3, #4
 8005070:	d03f      	beq.n	80050f2 <HAL_RCC_GetSysClockFreq+0x8e>
 8005072:	2b08      	cmp	r3, #8
 8005074:	d13f      	bne.n	80050f6 <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005076:	4b21      	ldr	r3, [pc, #132]	; (80050fc <HAL_RCC_GetSysClockFreq+0x98>)
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005084:	d012      	beq.n	80050ac <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005086:	4b1d      	ldr	r3, [pc, #116]	; (80050fc <HAL_RCC_GetSysClockFreq+0x98>)
 8005088:	6859      	ldr	r1, [r3, #4]
 800508a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800508e:	481c      	ldr	r0, [pc, #112]	; (8005100 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005090:	2300      	movs	r3, #0
 8005092:	fba1 0100 	umull	r0, r1, r1, r0
 8005096:	f7fb f8b7 	bl	8000208 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800509a:	4b18      	ldr	r3, [pc, #96]	; (80050fc <HAL_RCC_GetSysClockFreq+0x98>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80050a2:	3301      	adds	r3, #1
 80050a4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80050a6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80050aa:	e025      	b.n	80050f8 <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ac:	4b13      	ldr	r3, [pc, #76]	; (80050fc <HAL_RCC_GetSysClockFreq+0x98>)
 80050ae:	6859      	ldr	r1, [r3, #4]
 80050b0:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80050b4:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80050b8:	ebb1 000c 	subs.w	r0, r1, ip
 80050bc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80050c0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80050c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80050c8:	0181      	lsls	r1, r0, #6
 80050ca:	1a09      	subs	r1, r1, r0
 80050cc:	eb63 030e 	sbc.w	r3, r3, lr
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050d6:	00c9      	lsls	r1, r1, #3
 80050d8:	eb11 0c0c 	adds.w	ip, r1, ip
 80050dc:	f143 0300 	adc.w	r3, r3, #0
 80050e0:	0299      	lsls	r1, r3, #10
 80050e2:	2300      	movs	r3, #0
 80050e4:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80050e8:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80050ec:	f7fb f88c 	bl	8000208 <__aeabi_uldivmod>
 80050f0:	e7d3      	b.n	800509a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80050f2:	4803      	ldr	r0, [pc, #12]	; (8005100 <HAL_RCC_GetSysClockFreq+0x9c>)
 80050f4:	e000      	b.n	80050f8 <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050f6:	4803      	ldr	r0, [pc, #12]	; (8005104 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80050f8:	bd08      	pop	{r3, pc}
 80050fa:	bf00      	nop
 80050fc:	40023800 	.word	0x40023800
 8005100:	017d7840 	.word	0x017d7840
 8005104:	00f42400 	.word	0x00f42400

08005108 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005108:	2800      	cmp	r0, #0
 800510a:	f000 80a0 	beq.w	800524e <HAL_RCC_ClockConfig+0x146>
{
 800510e:	b570      	push	{r4, r5, r6, lr}
 8005110:	460d      	mov	r5, r1
 8005112:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005114:	4b52      	ldr	r3, [pc, #328]	; (8005260 <HAL_RCC_ClockConfig+0x158>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 030f 	and.w	r3, r3, #15
 800511c:	428b      	cmp	r3, r1
 800511e:	d20b      	bcs.n	8005138 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005120:	4a4f      	ldr	r2, [pc, #316]	; (8005260 <HAL_RCC_ClockConfig+0x158>)
 8005122:	6813      	ldr	r3, [r2, #0]
 8005124:	f023 030f 	bic.w	r3, r3, #15
 8005128:	430b      	orrs	r3, r1
 800512a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800512c:	6813      	ldr	r3, [r2, #0]
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	428b      	cmp	r3, r1
 8005134:	f040 808d 	bne.w	8005252 <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	f013 0f02 	tst.w	r3, #2
 800513e:	d017      	beq.n	8005170 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005140:	f013 0f04 	tst.w	r3, #4
 8005144:	d004      	beq.n	8005150 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005146:	4a47      	ldr	r2, [pc, #284]	; (8005264 <HAL_RCC_ClockConfig+0x15c>)
 8005148:	6893      	ldr	r3, [r2, #8]
 800514a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800514e:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	f013 0f08 	tst.w	r3, #8
 8005156:	d004      	beq.n	8005162 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005158:	4a42      	ldr	r2, [pc, #264]	; (8005264 <HAL_RCC_ClockConfig+0x15c>)
 800515a:	6893      	ldr	r3, [r2, #8]
 800515c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005160:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005162:	4a40      	ldr	r2, [pc, #256]	; (8005264 <HAL_RCC_ClockConfig+0x15c>)
 8005164:	6893      	ldr	r3, [r2, #8]
 8005166:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800516a:	68a1      	ldr	r1, [r4, #8]
 800516c:	430b      	orrs	r3, r1
 800516e:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005170:	6823      	ldr	r3, [r4, #0]
 8005172:	f013 0f01 	tst.w	r3, #1
 8005176:	d031      	beq.n	80051dc <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005178:	6863      	ldr	r3, [r4, #4]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d020      	beq.n	80051c0 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800517e:	2b02      	cmp	r3, #2
 8005180:	d025      	beq.n	80051ce <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005182:	4a38      	ldr	r2, [pc, #224]	; (8005264 <HAL_RCC_ClockConfig+0x15c>)
 8005184:	6812      	ldr	r2, [r2, #0]
 8005186:	f012 0f02 	tst.w	r2, #2
 800518a:	d064      	beq.n	8005256 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800518c:	4935      	ldr	r1, [pc, #212]	; (8005264 <HAL_RCC_ClockConfig+0x15c>)
 800518e:	688a      	ldr	r2, [r1, #8]
 8005190:	f022 0203 	bic.w	r2, r2, #3
 8005194:	4313      	orrs	r3, r2
 8005196:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005198:	f7fe fc2c 	bl	80039f4 <HAL_GetTick>
 800519c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800519e:	4b31      	ldr	r3, [pc, #196]	; (8005264 <HAL_RCC_ClockConfig+0x15c>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 030c 	and.w	r3, r3, #12
 80051a6:	6862      	ldr	r2, [r4, #4]
 80051a8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80051ac:	d016      	beq.n	80051dc <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ae:	f7fe fc21 	bl	80039f4 <HAL_GetTick>
 80051b2:	1b80      	subs	r0, r0, r6
 80051b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80051b8:	4298      	cmp	r0, r3
 80051ba:	d9f0      	bls.n	800519e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80051bc:	2003      	movs	r0, #3
 80051be:	e045      	b.n	800524c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051c0:	4a28      	ldr	r2, [pc, #160]	; (8005264 <HAL_RCC_ClockConfig+0x15c>)
 80051c2:	6812      	ldr	r2, [r2, #0]
 80051c4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80051c8:	d1e0      	bne.n	800518c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80051ca:	2001      	movs	r0, #1
 80051cc:	e03e      	b.n	800524c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ce:	4a25      	ldr	r2, [pc, #148]	; (8005264 <HAL_RCC_ClockConfig+0x15c>)
 80051d0:	6812      	ldr	r2, [r2, #0]
 80051d2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80051d6:	d1d9      	bne.n	800518c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80051d8:	2001      	movs	r0, #1
 80051da:	e037      	b.n	800524c <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051dc:	4b20      	ldr	r3, [pc, #128]	; (8005260 <HAL_RCC_ClockConfig+0x158>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 030f 	and.w	r3, r3, #15
 80051e4:	42ab      	cmp	r3, r5
 80051e6:	d90a      	bls.n	80051fe <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e8:	4a1d      	ldr	r2, [pc, #116]	; (8005260 <HAL_RCC_ClockConfig+0x158>)
 80051ea:	6813      	ldr	r3, [r2, #0]
 80051ec:	f023 030f 	bic.w	r3, r3, #15
 80051f0:	432b      	orrs	r3, r5
 80051f2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f4:	6813      	ldr	r3, [r2, #0]
 80051f6:	f003 030f 	and.w	r3, r3, #15
 80051fa:	42ab      	cmp	r3, r5
 80051fc:	d12d      	bne.n	800525a <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	f013 0f04 	tst.w	r3, #4
 8005204:	d006      	beq.n	8005214 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005206:	4a17      	ldr	r2, [pc, #92]	; (8005264 <HAL_RCC_ClockConfig+0x15c>)
 8005208:	6893      	ldr	r3, [r2, #8]
 800520a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800520e:	68e1      	ldr	r1, [r4, #12]
 8005210:	430b      	orrs	r3, r1
 8005212:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	f013 0f08 	tst.w	r3, #8
 800521a:	d007      	beq.n	800522c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800521c:	4a11      	ldr	r2, [pc, #68]	; (8005264 <HAL_RCC_ClockConfig+0x15c>)
 800521e:	6893      	ldr	r3, [r2, #8]
 8005220:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005224:	6921      	ldr	r1, [r4, #16]
 8005226:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800522a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800522c:	f7ff ff1a 	bl	8005064 <HAL_RCC_GetSysClockFreq>
 8005230:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <HAL_RCC_ClockConfig+0x15c>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005238:	4a0b      	ldr	r2, [pc, #44]	; (8005268 <HAL_RCC_ClockConfig+0x160>)
 800523a:	5cd3      	ldrb	r3, [r2, r3]
 800523c:	40d8      	lsrs	r0, r3
 800523e:	4b0b      	ldr	r3, [pc, #44]	; (800526c <HAL_RCC_ClockConfig+0x164>)
 8005240:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8005242:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <HAL_RCC_ClockConfig+0x168>)
 8005244:	6818      	ldr	r0, [r3, #0]
 8005246:	f7fe fb23 	bl	8003890 <HAL_InitTick>
  return HAL_OK;
 800524a:	2000      	movs	r0, #0
}
 800524c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800524e:	2001      	movs	r0, #1
}
 8005250:	4770      	bx	lr
      return HAL_ERROR;
 8005252:	2001      	movs	r0, #1
 8005254:	e7fa      	b.n	800524c <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8005256:	2001      	movs	r0, #1
 8005258:	e7f8      	b.n	800524c <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 800525a:	2001      	movs	r0, #1
 800525c:	e7f6      	b.n	800524c <HAL_RCC_ClockConfig+0x144>
 800525e:	bf00      	nop
 8005260:	40023c00 	.word	0x40023c00
 8005264:	40023800 	.word	0x40023800
 8005268:	08008034 	.word	0x08008034
 800526c:	20000008 	.word	0x20000008
 8005270:	20000010 	.word	0x20000010

08005274 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8005274:	4b01      	ldr	r3, [pc, #4]	; (800527c <HAL_RCC_GetHCLKFreq+0x8>)
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	20000008 	.word	0x20000008

08005280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005280:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005282:	f7ff fff7 	bl	8005274 <HAL_RCC_GetHCLKFreq>
 8005286:	4b04      	ldr	r3, [pc, #16]	; (8005298 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800528e:	4a03      	ldr	r2, [pc, #12]	; (800529c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005290:	5cd3      	ldrb	r3, [r2, r3]
}
 8005292:	40d8      	lsrs	r0, r3
 8005294:	bd08      	pop	{r3, pc}
 8005296:	bf00      	nop
 8005298:	40023800 	.word	0x40023800
 800529c:	08008044 	.word	0x08008044

080052a0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052a0:	230f      	movs	r3, #15
 80052a2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052a4:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <HAL_RCC_GetClockConfig+0x34>)
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	f002 0203 	and.w	r2, r2, #3
 80052ac:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80052b4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80052bc:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	08db      	lsrs	r3, r3, #3
 80052c2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80052c6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80052c8:	4b03      	ldr	r3, [pc, #12]	; (80052d8 <HAL_RCC_GetClockConfig+0x38>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 030f 	and.w	r3, r3, #15
 80052d0:	600b      	str	r3, [r1, #0]
}
 80052d2:	4770      	bx	lr
 80052d4:	40023800 	.word	0x40023800
 80052d8:	40023c00 	.word	0x40023c00

080052dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052de:	b083      	sub	sp, #12
 80052e0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80052e2:	6806      	ldr	r6, [r0, #0]
 80052e4:	f016 0601 	ands.w	r6, r6, #1
 80052e8:	d00d      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052ea:	4ba7      	ldr	r3, [pc, #668]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80052f2:	609a      	str	r2, [r3, #8]
 80052f4:	689a      	ldr	r2, [r3, #8]
 80052f6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80052f8:	430a      	orrs	r2, r1
 80052fa:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80052fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 8139 	beq.w	8005576 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  uint32_t plli2sused = 0;
 8005304:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005306:	6825      	ldr	r5, [r4, #0]
 8005308:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 800530c:	d011      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800530e:	4a9e      	ldr	r2, [pc, #632]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005310:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005314:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005318:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800531a:	430b      	orrs	r3, r1
 800531c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005320:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005326:	f000 8128 	beq.w	800557a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 8127 	beq.w	800557e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  uint32_t pllsaiused = 0;
 8005330:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005338:	d00f      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800533a:	4a93      	ldr	r2, [pc, #588]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800533c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005340:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005344:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005346:	430b      	orrs	r3, r1
 8005348:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800534c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800534e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005352:	f000 8116 	beq.w	8005582 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005356:	b903      	cbnz	r3, 800535a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 8005358:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005360:	d000      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 8005362:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005364:	f013 0f20 	tst.w	r3, #32
 8005368:	f040 8110 	bne.w	800558c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	f013 0f10 	tst.w	r3, #16
 8005372:	d00c      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005374:	4b84      	ldr	r3, [pc, #528]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005376:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800537a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800537e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005382:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005386:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005388:	430a      	orrs	r2, r1
 800538a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005394:	d008      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005396:	4a7c      	ldr	r2, [pc, #496]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005398:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800539c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80053a0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80053a2:	430b      	orrs	r3, r1
 80053a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053a8:	6823      	ldr	r3, [r4, #0]
 80053aa:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80053ae:	d008      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053b0:	4a75      	ldr	r2, [pc, #468]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80053b2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80053b6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80053ba:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80053bc:	430b      	orrs	r3, r1
 80053be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80053c8:	d008      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053ca:	4a6f      	ldr	r2, [pc, #444]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80053cc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80053d0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80053d4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80053d6:	430b      	orrs	r3, r1
 80053d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80053e2:	d008      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053e4:	4a68      	ldr	r2, [pc, #416]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80053e6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80053ea:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80053ee:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80053f0:	430b      	orrs	r3, r1
 80053f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80053fc:	d008      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053fe:	4a62      	ldr	r2, [pc, #392]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005400:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005404:	f023 0303 	bic.w	r3, r3, #3
 8005408:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800540a:	430b      	orrs	r3, r1
 800540c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005410:	6823      	ldr	r3, [r4, #0]
 8005412:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005416:	d008      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005418:	4a5b      	ldr	r2, [pc, #364]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800541a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800541e:	f023 030c 	bic.w	r3, r3, #12
 8005422:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005424:	430b      	orrs	r3, r1
 8005426:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005430:	d008      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005432:	4a55      	ldr	r2, [pc, #340]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005434:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005438:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800543c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800543e:	430b      	orrs	r3, r1
 8005440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	f413 7f00 	tst.w	r3, #512	; 0x200
 800544a:	d008      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800544c:	4a4e      	ldr	r2, [pc, #312]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800544e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005452:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005456:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005458:	430b      	orrs	r3, r1
 800545a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005464:	d008      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005466:	4a48      	ldr	r2, [pc, #288]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005468:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800546c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005470:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005472:	430b      	orrs	r3, r1
 8005474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800547e:	d008      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005480:	4a41      	ldr	r2, [pc, #260]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005482:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005486:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800548a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800548c:	430b      	orrs	r3, r1
 800548e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005498:	d008      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800549a:	4a3b      	ldr	r2, [pc, #236]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800549c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80054a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80054a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80054a6:	430b      	orrs	r3, r1
 80054a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80054b2:	d008      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80054b4:	4a34      	ldr	r2, [pc, #208]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80054b6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80054ba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80054be:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80054c0:	430b      	orrs	r3, r1
 80054c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80054cc:	d008      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054ce:	4a2e      	ldr	r2, [pc, #184]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80054d0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80054d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054d8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80054da:	430b      	orrs	r3, r1
 80054dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80054e6:	d00d      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80054e8:	4a27      	ldr	r2, [pc, #156]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80054ea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80054ee:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80054f2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80054f4:	430b      	orrs	r3, r1
 80054f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80054fa:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80054fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005500:	f000 80aa 	beq.w	8005658 <HAL_RCCEx_PeriphCLKConfig+0x37c>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	f013 0f08 	tst.w	r3, #8
 800550a:	d000      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 800550c:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800550e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005512:	d008      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005514:	4a1c      	ldr	r2, [pc, #112]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005516:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800551a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800551e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8005520:	430b      	orrs	r3, r1
 8005522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800552c:	d009      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800552e:	4a16      	ldr	r2, [pc, #88]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005530:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005538:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800553c:	430b      	orrs	r3, r1
 800553e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005542:	b926      	cbnz	r6, 800554e <HAL_RCCEx_PeriphCLKConfig+0x272>
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800554a:	f000 8105 	beq.w	8005758 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800554e:	4a0e      	ldr	r2, [pc, #56]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005550:	6813      	ldr	r3, [r2, #0]
 8005552:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005558:	f7fe fa4c 	bl	80039f4 <HAL_GetTick>
 800555c:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800555e:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005566:	d079      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005568:	f7fe fa44 	bl	80039f4 <HAL_GetTick>
 800556c:	1b80      	subs	r0, r0, r6
 800556e:	2864      	cmp	r0, #100	; 0x64
 8005570:	d9f5      	bls.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x282>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005572:	2003      	movs	r0, #3
 8005574:	e0f3      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x482>
      plli2sused = 1;
 8005576:	2601      	movs	r6, #1
 8005578:	e6c5      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 800557a:	2601      	movs	r6, #1
 800557c:	e6d5      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 800557e:	2501      	movs	r5, #1
 8005580:	e6d7      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 8005582:	2601      	movs	r6, #1
 8005584:	e6e7      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005586:	bf00      	nop
 8005588:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 800558c:	4b7f      	ldr	r3, [pc, #508]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800558e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005590:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005594:	641a      	str	r2, [r3, #64]	; 0x40
 8005596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800559c:	9301      	str	r3, [sp, #4]
 800559e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80055a0:	4a7b      	ldr	r2, [pc, #492]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 80055a2:	6813      	ldr	r3, [r2, #0]
 80055a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80055aa:	f7fe fa23 	bl	80039f4 <HAL_GetTick>
 80055ae:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80055b0:	4b77      	ldr	r3, [pc, #476]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80055b8:	d106      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ba:	f7fe fa1b 	bl	80039f4 <HAL_GetTick>
 80055be:	1bc0      	subs	r0, r0, r7
 80055c0:	2864      	cmp	r0, #100	; 0x64
 80055c2:	d9f5      	bls.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        return HAL_TIMEOUT;
 80055c4:	2003      	movs	r0, #3
 80055c6:	e0ca      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x482>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055c8:	4b70      	ldr	r3, [pc, #448]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80055ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055cc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80055d0:	d015      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x322>
 80055d2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80055d4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80055d8:	429a      	cmp	r2, r3
 80055da:	d010      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x322>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055dc:	4b6b      	ldr	r3, [pc, #428]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80055de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80055e4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80055e6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80055ea:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055ec:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80055ee:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80055f2:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80055f4:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f8:	f013 0f01 	tst.w	r3, #1
 80055fc:	d112      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x348>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005600:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005604:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005608:	d01d      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800560a:	4a60      	ldr	r2, [pc, #384]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800560c:	6893      	ldr	r3, [r2, #8]
 800560e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005612:	6093      	str	r3, [r2, #8]
 8005614:	495d      	ldr	r1, [pc, #372]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005616:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8005618:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800561a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800561e:	4313      	orrs	r3, r2
 8005620:	670b      	str	r3, [r1, #112]	; 0x70
 8005622:	e6a3      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8005624:	f7fe f9e6 	bl	80039f4 <HAL_GetTick>
 8005628:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800562a:	4b58      	ldr	r3, [pc, #352]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800562c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562e:	f013 0f02 	tst.w	r3, #2
 8005632:	d1e4      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x322>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005634:	f7fe f9de 	bl	80039f4 <HAL_GetTick>
 8005638:	1bc0      	subs	r0, r0, r7
 800563a:	f241 3388 	movw	r3, #5000	; 0x1388
 800563e:	4298      	cmp	r0, r3
 8005640:	d9f3      	bls.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x34e>
            return HAL_TIMEOUT;
 8005642:	2003      	movs	r0, #3
 8005644:	e08b      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x482>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005646:	4851      	ldr	r0, [pc, #324]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005648:	6882      	ldr	r2, [r0, #8]
 800564a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800564e:	4951      	ldr	r1, [pc, #324]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8005650:	4019      	ands	r1, r3
 8005652:	430a      	orrs	r2, r1
 8005654:	6082      	str	r2, [r0, #8]
 8005656:	e7dd      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x338>
      pllsaiused = 1;
 8005658:	2501      	movs	r5, #1
 800565a:	e753      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x228>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	f013 0f01 	tst.w	r3, #1
 8005662:	d013      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8005664:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005666:	b98b      	cbnz	r3, 800568c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005668:	4a48      	ldr	r2, [pc, #288]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800566a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800566e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005672:	6860      	ldr	r0, [r4, #4]
 8005674:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005678:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800567c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8005680:	430b      	orrs	r3, r1
 8005682:	68a1      	ldr	r1, [r4, #8]
 8005684:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8005688:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005692:	d003      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005694:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005696:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800569a:	d006      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800569c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80056a0:	d01e      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x404>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80056a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056a8:	d11a      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x404>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80056aa:	4a38      	ldr	r2, [pc, #224]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80056ac:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056b0:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80056b4:	6860      	ldr	r0, [r4, #4]
 80056b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056ba:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80056be:	68e0      	ldr	r0, [r4, #12]
 80056c0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80056c4:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80056c8:	430b      	orrs	r3, r1
 80056ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056ce:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80056d2:	f023 031f 	bic.w	r3, r3, #31
 80056d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80056d8:	3901      	subs	r1, #1
 80056da:	430b      	orrs	r3, r1
 80056dc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80056e6:	d011      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056e8:	4a28      	ldr	r2, [pc, #160]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80056ea:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056ee:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80056f2:	6866      	ldr	r6, [r4, #4]
 80056f4:	6923      	ldr	r3, [r4, #16]
 80056f6:	041b      	lsls	r3, r3, #16
 80056f8:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 80056fc:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8005700:	4303      	orrs	r3, r0
 8005702:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8005706:	430b      	orrs	r3, r1
 8005708:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005712:	d00d      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x454>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005714:	6862      	ldr	r2, [r4, #4]
 8005716:	6923      	ldr	r3, [r4, #16]
 8005718:	041b      	lsls	r3, r3, #16
 800571a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800571e:	68e2      	ldr	r2, [r4, #12]
 8005720:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005724:	68a2      	ldr	r2, [r4, #8]
 8005726:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800572a:	4a18      	ldr	r2, [pc, #96]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800572c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005730:	4a16      	ldr	r2, [pc, #88]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005732:	6813      	ldr	r3, [r2, #0]
 8005734:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800573a:	f7fe f95b 	bl	80039f4 <HAL_GetTick>
 800573e:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005740:	4b12      	ldr	r3, [pc, #72]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005748:	d106      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800574a:	f7fe f953 	bl	80039f4 <HAL_GetTick>
 800574e:	1b80      	subs	r0, r0, r6
 8005750:	2864      	cmp	r0, #100	; 0x64
 8005752:	d9f5      	bls.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x464>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005754:	2003      	movs	r0, #3
 8005756:	e002      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x482>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005758:	2d01      	cmp	r5, #1
 800575a:	d002      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x486>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800575c:	2000      	movs	r0, #0
}
 800575e:	b003      	add	sp, #12
 8005760:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8005762:	4a0a      	ldr	r2, [pc, #40]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005764:	6813      	ldr	r3, [r2, #0]
 8005766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800576a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800576c:	f7fe f942 	bl	80039f4 <HAL_GetTick>
 8005770:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005772:	4b06      	ldr	r3, [pc, #24]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800577a:	d00d      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800577c:	f7fe f93a 	bl	80039f4 <HAL_GetTick>
 8005780:	1b40      	subs	r0, r0, r5
 8005782:	2864      	cmp	r0, #100	; 0x64
 8005784:	d9f5      	bls.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x496>
        return HAL_TIMEOUT;
 8005786:	2003      	movs	r0, #3
 8005788:	e7e9      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x482>
 800578a:	bf00      	nop
 800578c:	40023800 	.word	0x40023800
 8005790:	40007000 	.word	0x40007000
 8005794:	0ffffcff 	.word	0x0ffffcff
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800579e:	d001      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 80057a0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80057a2:	b122      	cbz	r2, 80057ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80057a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80057a8:	d01d      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057ac:	b9db      	cbnz	r3, 80057e6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057ae:	4a35      	ldr	r2, [pc, #212]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 80057b0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057b4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057b8:	6960      	ldr	r0, [r4, #20]
 80057ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057be:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80057c2:	69a0      	ldr	r0, [r4, #24]
 80057c4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80057c8:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80057cc:	430b      	orrs	r3, r1
 80057ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057d2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80057d6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80057da:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80057dc:	3901      	subs	r1, #1
 80057de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80057e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80057ec:	d003      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80057ee:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80057f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057f4:	d031      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x57e>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	f013 0f08 	tst.w	r3, #8
 80057fc:	d019      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x556>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80057fe:	4a21      	ldr	r2, [pc, #132]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8005800:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005804:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005808:	6960      	ldr	r0, [r4, #20]
 800580a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800580e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005812:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8005816:	430b      	orrs	r3, r1
 8005818:	69e1      	ldr	r1, [r4, #28]
 800581a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800581e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005822:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005826:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800582a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800582c:	430b      	orrs	r3, r1
 800582e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8005832:	4a14      	ldr	r2, [pc, #80]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8005834:	6813      	ldr	r3, [r2, #0]
 8005836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800583a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800583c:	f7fe f8da 	bl	80039f4 <HAL_GetTick>
 8005840:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005842:	4b10      	ldr	r3, [pc, #64]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800584a:	d119      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800584c:	f7fe f8d2 	bl	80039f4 <HAL_GetTick>
 8005850:	1b00      	subs	r0, r0, r4
 8005852:	2864      	cmp	r0, #100	; 0x64
 8005854:	d9f5      	bls.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x566>
        return HAL_TIMEOUT;
 8005856:	2003      	movs	r0, #3
 8005858:	e781      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x482>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800585a:	4a0a      	ldr	r2, [pc, #40]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 800585c:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005860:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005864:	6965      	ldr	r5, [r4, #20]
 8005866:	6a23      	ldr	r3, [r4, #32]
 8005868:	041b      	lsls	r3, r3, #16
 800586a:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800586e:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8005872:	4303      	orrs	r3, r0
 8005874:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8005878:	430b      	orrs	r3, r1
 800587a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800587e:	e7ba      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
  return HAL_OK;
 8005880:	2000      	movs	r0, #0
 8005882:	e76c      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005884:	40023800 	.word	0x40023800

08005888 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800588c:	6802      	ldr	r2, [r0, #0]
 800588e:	68d3      	ldr	r3, [r2, #12]
 8005890:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005894:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005896:	f7fe f8ad 	bl	80039f4 <HAL_GetTick>
 800589a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f013 0f20 	tst.w	r3, #32
 80058a4:	d107      	bne.n	80058b6 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80058a6:	f7fe f8a5 	bl	80039f4 <HAL_GetTick>
 80058aa:	1b40      	subs	r0, r0, r5
 80058ac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80058b0:	d9f4      	bls.n	800589c <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 80058b2:	2003      	movs	r0, #3
 80058b4:	e000      	b.n	80058b8 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 80058b6:	2000      	movs	r0, #0
}
 80058b8:	bd38      	pop	{r3, r4, r5, pc}

080058ba <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80058ba:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80058bc:	6803      	ldr	r3, [r0, #0]
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80058c4:	d001      	beq.n	80058ca <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80058c6:	2000      	movs	r0, #0
}
 80058c8:	bd38      	pop	{r3, r4, r5, pc}
 80058ca:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80058cc:	f04f 32ff 	mov.w	r2, #4294967295
 80058d0:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80058d2:	f7fe f88f 	bl	80039f4 <HAL_GetTick>
 80058d6:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80058e0:	d107      	bne.n	80058f2 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80058e2:	f7fe f887 	bl	80039f4 <HAL_GetTick>
 80058e6:	1b43      	subs	r3, r0, r5
 80058e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058ec:	d9f4      	bls.n	80058d8 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 80058ee:	2003      	movs	r0, #3
 80058f0:	e7ea      	b.n	80058c8 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 80058f2:	2000      	movs	r0, #0
 80058f4:	e7e8      	b.n	80058c8 <RTC_EnterInitMode+0xe>
	...

080058f8 <HAL_RTC_Init>:
{
 80058f8:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80058fa:	2800      	cmp	r0, #0
 80058fc:	d05a      	beq.n	80059b4 <HAL_RTC_Init+0xbc>
 80058fe:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005900:	7f43      	ldrb	r3, [r0, #29]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d03f      	beq.n	8005986 <HAL_RTC_Init+0x8e>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005906:	2302      	movs	r3, #2
 8005908:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	22ca      	movs	r2, #202	; 0xca
 800590e:	625a      	str	r2, [r3, #36]	; 0x24
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	2253      	movs	r2, #83	; 0x53
 8005914:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005916:	4620      	mov	r0, r4
 8005918:	f7ff ffcf 	bl	80058ba <RTC_EnterInitMode>
 800591c:	4605      	mov	r5, r0
 800591e:	2800      	cmp	r0, #0
 8005920:	d135      	bne.n	800598e <HAL_RTC_Init+0x96>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005922:	6822      	ldr	r2, [r4, #0]
 8005924:	6891      	ldr	r1, [r2, #8]
 8005926:	4b24      	ldr	r3, [pc, #144]	; (80059b8 <HAL_RTC_Init+0xc0>)
 8005928:	400b      	ands	r3, r1
 800592a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800592c:	6821      	ldr	r1, [r4, #0]
 800592e:	688a      	ldr	r2, [r1, #8]
 8005930:	6863      	ldr	r3, [r4, #4]
 8005932:	6920      	ldr	r0, [r4, #16]
 8005934:	4303      	orrs	r3, r0
 8005936:	6960      	ldr	r0, [r4, #20]
 8005938:	4303      	orrs	r3, r0
 800593a:	4313      	orrs	r3, r2
 800593c:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	68e2      	ldr	r2, [r4, #12]
 8005942:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8005944:	6822      	ldr	r2, [r4, #0]
 8005946:	6913      	ldr	r3, [r2, #16]
 8005948:	68a1      	ldr	r1, [r4, #8]
 800594a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800594e:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005950:	6822      	ldr	r2, [r4, #0]
 8005952:	68d3      	ldr	r3, [r2, #12]
 8005954:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005958:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f013 0f20 	tst.w	r3, #32
 8005962:	d01b      	beq.n	800599c <HAL_RTC_Init+0xa4>
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8005964:	6822      	ldr	r2, [r4, #0]
 8005966:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005968:	f023 0308 	bic.w	r3, r3, #8
 800596c:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800596e:	6822      	ldr	r2, [r4, #0]
 8005970:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005972:	69a1      	ldr	r1, [r4, #24]
 8005974:	430b      	orrs	r3, r1
 8005976:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	22ff      	movs	r2, #255	; 0xff
 800597c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800597e:	2301      	movs	r3, #1
 8005980:	7763      	strb	r3, [r4, #29]
}
 8005982:	4628      	mov	r0, r5
 8005984:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8005986:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8005988:	f7fd ff6e 	bl	8003868 <HAL_RTC_MspInit>
 800598c:	e7bb      	b.n	8005906 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	22ff      	movs	r2, #255	; 0xff
 8005992:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005994:	2304      	movs	r3, #4
 8005996:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8005998:	2501      	movs	r5, #1
 800599a:	e7f2      	b.n	8005982 <HAL_RTC_Init+0x8a>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800599c:	4620      	mov	r0, r4
 800599e:	f7ff ff73 	bl	8005888 <HAL_RTC_WaitForSynchro>
 80059a2:	2800      	cmp	r0, #0
 80059a4:	d0de      	beq.n	8005964 <HAL_RTC_Init+0x6c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	22ff      	movs	r2, #255	; 0xff
 80059aa:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80059ac:	2304      	movs	r3, #4
 80059ae:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 80059b0:	2501      	movs	r5, #1
 80059b2:	e7e6      	b.n	8005982 <HAL_RTC_Init+0x8a>
     return HAL_ERROR;
 80059b4:	2501      	movs	r5, #1
 80059b6:	e7e4      	b.n	8005982 <HAL_RTC_Init+0x8a>
 80059b8:	ff8fffbf 	.word	0xff8fffbf

080059bc <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 80059bc:	2300      	movs	r3, #0

  while(Value >= 10)
 80059be:	e002      	b.n	80059c6 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80059c0:	3301      	adds	r3, #1
    Value -= 10;
 80059c2:	380a      	subs	r0, #10
 80059c4:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 80059c6:	2809      	cmp	r0, #9
 80059c8:	d8fa      	bhi.n	80059c0 <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	b2db      	uxtb	r3, r3
}
 80059ce:	4318      	orrs	r0, r3
 80059d0:	4770      	bx	lr
	...

080059d4 <HAL_RTC_SetTime>:
{
 80059d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80059d6:	7f03      	ldrb	r3, [r0, #28]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d076      	beq.n	8005aca <HAL_RTC_SetTime+0xf6>
 80059dc:	4604      	mov	r4, r0
 80059de:	460e      	mov	r6, r1
 80059e0:	2301      	movs	r3, #1
 80059e2:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80059e4:	2302      	movs	r3, #2
 80059e6:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 80059e8:	2a00      	cmp	r2, #0
 80059ea:	d145      	bne.n	8005a78 <HAL_RTC_SetTime+0xa4>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80059ec:	6803      	ldr	r3, [r0, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80059f4:	d101      	bne.n	80059fa <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 80059f6:	2300      	movs	r3, #0
 80059f8:	730b      	strb	r3, [r1, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80059fa:	7830      	ldrb	r0, [r6, #0]
 80059fc:	f7ff ffde 	bl	80059bc <RTC_ByteToBcd2>
 8005a00:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005a02:	7870      	ldrb	r0, [r6, #1]
 8005a04:	f7ff ffda 	bl	80059bc <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005a08:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005a0c:	78b0      	ldrb	r0, [r6, #2]
 8005a0e:	f7ff ffd5 	bl	80059bc <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005a12:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16));
 8005a14:	7b30      	ldrb	r0, [r6, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005a16:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	22ca      	movs	r2, #202	; 0xca
 8005a1e:	625a      	str	r2, [r3, #36]	; 0x24
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	2253      	movs	r2, #83	; 0x53
 8005a24:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a26:	4620      	mov	r0, r4
 8005a28:	f7ff ff47 	bl	80058ba <RTC_EnterInitMode>
 8005a2c:	4607      	mov	r7, r0
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d134      	bne.n	8005a9c <HAL_RTC_SetTime+0xc8>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005a32:	6822      	ldr	r2, [r4, #0]
 8005a34:	4b26      	ldr	r3, [pc, #152]	; (8005ad0 <HAL_RTC_SetTime+0xfc>)
 8005a36:	402b      	ands	r3, r5
 8005a38:	6013      	str	r3, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005a3a:	6822      	ldr	r2, [r4, #0]
 8005a3c:	6893      	ldr	r3, [r2, #8]
 8005a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a42:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005a44:	6821      	ldr	r1, [r4, #0]
 8005a46:	688b      	ldr	r3, [r1, #8]
 8005a48:	6932      	ldr	r2, [r6, #16]
 8005a4a:	6970      	ldr	r0, [r6, #20]
 8005a4c:	4302      	orrs	r2, r0
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005a52:	6822      	ldr	r2, [r4, #0]
 8005a54:	68d3      	ldr	r3, [r2, #12]
 8005a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a5a:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f013 0f20 	tst.w	r3, #32
 8005a64:	d023      	beq.n	8005aae <HAL_RTC_SetTime+0xda>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	22ff      	movs	r2, #255	; 0xff
 8005a6a:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 8005a70:	2300      	movs	r3, #0
 8005a72:	7723      	strb	r3, [r4, #28]
}
 8005a74:	4638      	mov	r0, r7
 8005a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005a78:	6803      	ldr	r3, [r0, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005a80:	d101      	bne.n	8005a86 <HAL_RTC_SetTime+0xb2>
      sTime->TimeFormat = 0x00;
 8005a82:	2300      	movs	r3, #0
 8005a84:	730b      	strb	r3, [r1, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005a86:	7833      	ldrb	r3, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005a88:	7875      	ldrb	r5, [r6, #1]
 8005a8a:	022d      	lsls	r5, r5, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005a8c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8005a90:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005a92:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));
 8005a94:	7b30      	ldrb	r0, [r6, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005a96:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8005a9a:	e7be      	b.n	8005a1a <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	22ff      	movs	r2, #255	; 0xff
 8005aa0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005aa2:	2304      	movs	r3, #4
 8005aa4:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8005aaa:	2701      	movs	r7, #1
 8005aac:	e7e2      	b.n	8005a74 <HAL_RTC_SetTime+0xa0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f7ff feea 	bl	8005888 <HAL_RTC_WaitForSynchro>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	d0d6      	beq.n	8005a66 <HAL_RTC_SetTime+0x92>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	22ff      	movs	r2, #255	; 0xff
 8005abc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005abe:	2304      	movs	r3, #4
 8005ac0:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8005ac6:	2701      	movs	r7, #1
 8005ac8:	e7d4      	b.n	8005a74 <HAL_RTC_SetTime+0xa0>
  __HAL_LOCK(hrtc);
 8005aca:	2702      	movs	r7, #2
 8005acc:	e7d2      	b.n	8005a74 <HAL_RTC_SetTime+0xa0>
 8005ace:	bf00      	nop
 8005ad0:	007f7f7f 	.word	0x007f7f7f

08005ad4 <HAL_RTC_SetDate>:
{
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8005ad6:	7f03      	ldrb	r3, [r0, #28]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d064      	beq.n	8005ba6 <HAL_RTC_SetDate+0xd2>
 8005adc:	4604      	mov	r4, r0
 8005ade:	460e      	mov	r6, r1
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005ae8:	b93a      	cbnz	r2, 8005afa <HAL_RTC_SetDate+0x26>
 8005aea:	784b      	ldrb	r3, [r1, #1]
 8005aec:	f013 0f10 	tst.w	r3, #16
 8005af0:	d003      	beq.n	8005afa <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005af2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8005af6:	330a      	adds	r3, #10
 8005af8:	704b      	strb	r3, [r1, #1]
  if(Format == RTC_FORMAT_BIN)
 8005afa:	2a00      	cmp	r2, #0
 8005afc:	d131      	bne.n	8005b62 <HAL_RTC_SetDate+0x8e>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005afe:	78f0      	ldrb	r0, [r6, #3]
 8005b00:	f7ff ff5c 	bl	80059bc <RTC_ByteToBcd2>
 8005b04:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005b06:	7870      	ldrb	r0, [r6, #1]
 8005b08:	f7ff ff58 	bl	80059bc <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005b0c:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005b10:	78b0      	ldrb	r0, [r6, #2]
 8005b12:	f7ff ff53 	bl	80059bc <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005b16:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13));
 8005b18:	7830      	ldrb	r0, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005b1a:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	22ca      	movs	r2, #202	; 0xca
 8005b22:	625a      	str	r2, [r3, #36]	; 0x24
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	2253      	movs	r2, #83	; 0x53
 8005b28:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f7ff fec5 	bl	80058ba <RTC_EnterInitMode>
 8005b30:	4606      	mov	r6, r0
 8005b32:	bb08      	cbnz	r0, 8005b78 <HAL_RTC_SetDate+0xa4>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005b34:	6822      	ldr	r2, [r4, #0]
 8005b36:	4b1d      	ldr	r3, [pc, #116]	; (8005bac <HAL_RTC_SetDate+0xd8>)
 8005b38:	402b      	ands	r3, r5
 8005b3a:	6053      	str	r3, [r2, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005b3c:	6822      	ldr	r2, [r4, #0]
 8005b3e:	68d3      	ldr	r3, [r2, #12]
 8005b40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b44:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f013 0f20 	tst.w	r3, #32
 8005b4e:	d01c      	beq.n	8005b8a <HAL_RTC_SetDate+0xb6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	22ff      	movs	r2, #255	; 0xff
 8005b54:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8005b56:	2301      	movs	r3, #1
 8005b58:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	7723      	strb	r3, [r4, #28]
}
 8005b5e:	4630      	mov	r0, r6
 8005b60:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005b62:	78f3      	ldrb	r3, [r6, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 8005b64:	7875      	ldrb	r5, [r6, #1]
 8005b66:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005b68:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  ((uint32_t)sDate->Date) | \
 8005b6c:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8005b6e:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));
 8005b70:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005b72:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
 8005b76:	e7d2      	b.n	8005b1e <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	22ff      	movs	r2, #255	; 0xff
 8005b7c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b7e:	2304      	movs	r3, #4
 8005b80:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8005b82:	2300      	movs	r3, #0
 8005b84:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8005b86:	2601      	movs	r6, #1
 8005b88:	e7e9      	b.n	8005b5e <HAL_RTC_SetDate+0x8a>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	f7ff fe7c 	bl	8005888 <HAL_RTC_WaitForSynchro>
 8005b90:	2800      	cmp	r0, #0
 8005b92:	d0dd      	beq.n	8005b50 <HAL_RTC_SetDate+0x7c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	22ff      	movs	r2, #255	; 0xff
 8005b98:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b9a:	2304      	movs	r3, #4
 8005b9c:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8005ba2:	2601      	movs	r6, #1
 8005ba4:	e7db      	b.n	8005b5e <HAL_RTC_SetDate+0x8a>
 __HAL_LOCK(hrtc);
 8005ba6:	2602      	movs	r6, #2
 8005ba8:	e7d9      	b.n	8005b5e <HAL_RTC_SetDate+0x8a>
 8005baa:	bf00      	nop
 8005bac:	00ffff3f 	.word	0x00ffff3f

08005bb0 <HAL_RTC_SetAlarm>:
{
 8005bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8005bb2:	7f03      	ldrb	r3, [r0, #28]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	f000 80a9 	beq.w	8005d0c <HAL_RTC_SetAlarm+0x15c>
 8005bba:	4604      	mov	r4, r0
 8005bbc:	460d      	mov	r5, r1
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8005bc6:	2a00      	cmp	r2, #0
 8005bc8:	d14d      	bne.n	8005c66 <HAL_RTC_SetAlarm+0xb6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005bca:	6803      	ldr	r3, [r0, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005bd2:	d101      	bne.n	8005bd8 <HAL_RTC_SetAlarm+0x28>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8005bd8:	6a2e      	ldr	r6, [r5, #32]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005bda:	7828      	ldrb	r0, [r5, #0]
 8005bdc:	f7ff feee 	bl	80059bc <RTC_ByteToBcd2>
 8005be0:	0407      	lsls	r7, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005be2:	7868      	ldrb	r0, [r5, #1]
 8005be4:	f7ff feea 	bl	80059bc <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005be8:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005bec:	78a8      	ldrb	r0, [r5, #2]
 8005bee:	f7ff fee5 	bl	80059bc <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005bf2:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005bf4:	7b28      	ldrb	r0, [r5, #12]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005bf6:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8005bfa:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 8005bfe:	f7ff fedd 	bl	80059bc <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005c02:	ea47 6700 	orr.w	r7, r7, r0, lsl #24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8005c06:	433e      	orrs	r6, r7
              ((uint32_t)sAlarm->AlarmMask));
 8005c08:	69ab      	ldr	r3, [r5, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005c0a:	431e      	orrs	r6, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005c0c:	686f      	ldr	r7, [r5, #4]
 8005c0e:	69eb      	ldr	r3, [r5, #28]
 8005c10:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c12:	6823      	ldr	r3, [r4, #0]
 8005c14:	22ca      	movs	r2, #202	; 0xca
 8005c16:	625a      	str	r2, [r3, #36]	; 0x24
 8005c18:	6823      	ldr	r3, [r4, #0]
 8005c1a:	2253      	movs	r2, #83	; 0x53
 8005c1c:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005c1e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c24:	d039      	beq.n	8005c9a <HAL_RTC_SetAlarm+0xea>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005c26:	6822      	ldr	r2, [r4, #0]
 8005c28:	6893      	ldr	r3, [r2, #8]
 8005c2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c2e:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005c30:	6822      	ldr	r2, [r4, #0]
 8005c32:	6893      	ldr	r3, [r2, #8]
 8005c34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c38:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005c3a:	f7fd fedb 	bl	80039f4 <HAL_GetTick>
 8005c3e:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	68da      	ldr	r2, [r3, #12]
 8005c44:	f012 0f02 	tst.w	r2, #2
 8005c48:	d150      	bne.n	8005cec <HAL_RTC_SetAlarm+0x13c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c4a:	f7fd fed3 	bl	80039f4 <HAL_GetTick>
 8005c4e:	1b40      	subs	r0, r0, r5
 8005c50:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005c54:	d9f4      	bls.n	8005c40 <HAL_RTC_SetAlarm+0x90>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c56:	6823      	ldr	r3, [r4, #0]
 8005c58:	22ff      	movs	r2, #255	; 0xff
 8005c5a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c5c:	2003      	movs	r0, #3
 8005c5e:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8005c60:	2300      	movs	r3, #0
 8005c62:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8005c64:	e051      	b.n	8005d0a <HAL_RTC_SetAlarm+0x15a>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005c66:	6803      	ldr	r3, [r0, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005c6e:	d101      	bne.n	8005c74 <HAL_RTC_SetAlarm+0xc4>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005c70:	2300      	movs	r3, #0
 8005c72:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8005c74:	6a2e      	ldr	r6, [r5, #32]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005c76:	782a      	ldrb	r2, [r5, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005c78:	786b      	ldrb	r3, [r5, #1]
 8005c7a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005c7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005c80:	78aa      	ldrb	r2, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005c82:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005c84:	7b2a      	ldrb	r2, [r5, #12]
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005c8a:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005c8e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005c92:	431e      	orrs	r6, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005c94:	69ab      	ldr	r3, [r5, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005c96:	431e      	orrs	r6, r3
 8005c98:	e7b8      	b.n	8005c0c <HAL_RTC_SetAlarm+0x5c>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005c9a:	6822      	ldr	r2, [r4, #0]
 8005c9c:	6893      	ldr	r3, [r2, #8]
 8005c9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ca2:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005ca4:	6822      	ldr	r2, [r4, #0]
 8005ca6:	6893      	ldr	r3, [r2, #8]
 8005ca8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cac:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005cae:	f7fd fea1 	bl	80039f4 <HAL_GetTick>
 8005cb2:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	f012 0f01 	tst.w	r2, #1
 8005cbc:	d10d      	bne.n	8005cda <HAL_RTC_SetAlarm+0x12a>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005cbe:	f7fd fe99 	bl	80039f4 <HAL_GetTick>
 8005cc2:	1b40      	subs	r0, r0, r5
 8005cc4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005cc8:	d9f4      	bls.n	8005cb4 <HAL_RTC_SetAlarm+0x104>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cca:	6823      	ldr	r3, [r4, #0]
 8005ccc:	22ff      	movs	r2, #255	; 0xff
 8005cce:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005cd0:	2003      	movs	r0, #3
 8005cd2:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8005cd8:	e017      	b.n	8005d0a <HAL_RTC_SetAlarm+0x15a>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005cda:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005ce0:	6822      	ldr	r2, [r4, #0]
 8005ce2:	6893      	ldr	r3, [r2, #8]
 8005ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ce8:	6093      	str	r3, [r2, #8]
 8005cea:	e007      	b.n	8005cfc <HAL_RTC_SetAlarm+0x14c>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005cec:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005cf2:	6822      	ldr	r2, [r4, #0]
 8005cf4:	6893      	ldr	r3, [r2, #8]
 8005cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cfa:	6093      	str	r3, [r2, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	22ff      	movs	r2, #255	; 0xff
 8005d00:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005d02:	2301      	movs	r3, #1
 8005d04:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 8005d06:	2000      	movs	r0, #0
 8005d08:	7720      	strb	r0, [r4, #28]
}
 8005d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8005d0c:	2002      	movs	r0, #2
 8005d0e:	e7fc      	b.n	8005d0a <HAL_RTC_SetAlarm+0x15a>

08005d10 <HAL_RTCEx_SetTimeStamp>:
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d10:	7f03      	ldrb	r3, [r0, #28]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d02b      	beq.n	8005d6e <HAL_RTCEx_SetTimeStamp+0x5e>
{
 8005d16:	b430      	push	{r4, r5}
  __HAL_LOCK(hrtc);
 8005d18:	f04f 0c01 	mov.w	ip, #1
 8005d1c:	f880 c01c 	strb.w	ip, [r0, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d20:	2302      	movs	r3, #2
 8005d22:	7743      	strb	r3, [r0, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8005d24:	6804      	ldr	r4, [r0, #0]
 8005d26:	68a5      	ldr	r5, [r4, #8]
 8005d28:	f6a3 030b 	subw	r3, r3, #2059	; 0x80b
 8005d2c:	402b      	ands	r3, r5

  tmpreg|= TimeStampEdge;
 8005d2e:	4319      	orrs	r1, r3

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d30:	23ca      	movs	r3, #202	; 0xca
 8005d32:	6263      	str	r3, [r4, #36]	; 0x24
 8005d34:	6803      	ldr	r3, [r0, #0]
 8005d36:	2453      	movs	r4, #83	; 0x53
 8005d38:	625c      	str	r4, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8005d3a:	6804      	ldr	r4, [r0, #0]
 8005d3c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005d3e:	f023 0306 	bic.w	r3, r3, #6
 8005d42:	64e3      	str	r3, [r4, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8005d44:	6804      	ldr	r4, [r0, #0]
 8005d46:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	64e2      	str	r2, [r4, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8005d4c:	6803      	ldr	r3, [r0, #0]
 8005d4e:	6099      	str	r1, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8005d50:	6802      	ldr	r2, [r0, #0]
 8005d52:	6893      	ldr	r3, [r2, #8]
 8005d54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d58:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d5a:	6803      	ldr	r3, [r0, #0]
 8005d5c:	22ff      	movs	r2, #255	; 0xff
 8005d5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005d60:	f880 c01d 	strb.w	ip, [r0, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d64:	2300      	movs	r3, #0
 8005d66:	7703      	strb	r3, [r0, #28]

  return HAL_OK;
 8005d68:	4618      	mov	r0, r3
}
 8005d6a:	bc30      	pop	{r4, r5}
 8005d6c:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8005d6e:	2002      	movs	r0, #2
}
 8005d70:	4770      	bx	lr

08005d72 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005d72:	b1e0      	cbz	r0, 8005dae <HAL_SDRAM_Init+0x3c>
{   
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	460d      	mov	r5, r1
 8005d78:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005d7a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005d7e:	b18b      	cbz	r3, 8005da4 <HAL_SDRAM_Init+0x32>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005d80:	2302      	movs	r3, #2
 8005d82:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005d86:	4621      	mov	r1, r4
 8005d88:	f851 0b04 	ldr.w	r0, [r1], #4
 8005d8c:	f000 f9e8 	bl	8006160 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005d90:	6862      	ldr	r2, [r4, #4]
 8005d92:	4629      	mov	r1, r5
 8005d94:	6820      	ldr	r0, [r4, #0]
 8005d96:	f000 fa1d 	bl	80061d4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8005da0:	2000      	movs	r0, #0
}
 8005da2:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8005da4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8005da8:	f7fd fd6e 	bl	8003888 <HAL_SDRAM_MspInit>
 8005dac:	e7e8      	b.n	8005d80 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8005dae:	2001      	movs	r0, #1
}
 8005db0:	4770      	bx	lr

08005db2 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005db2:	4770      	bx	lr

08005db4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005db4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d13a      	bne.n	8005e34 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dc4:	6802      	ldr	r2, [r0, #0]
 8005dc6:	68d3      	ldr	r3, [r2, #12]
 8005dc8:	f043 0301 	orr.w	r3, r3, #1
 8005dcc:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dce:	6803      	ldr	r3, [r0, #0]
 8005dd0:	4a1a      	ldr	r2, [pc, #104]	; (8005e3c <HAL_TIM_Base_Start_IT+0x88>)
 8005dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd6:	bf18      	it	ne
 8005dd8:	4293      	cmpne	r3, r2
 8005dda:	d01d      	beq.n	8005e18 <HAL_TIM_Base_Start_IT+0x64>
 8005ddc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d019      	beq.n	8005e18 <HAL_TIM_Base_Start_IT+0x64>
 8005de4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d015      	beq.n	8005e18 <HAL_TIM_Base_Start_IT+0x64>
 8005dec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d011      	beq.n	8005e18 <HAL_TIM_Base_Start_IT+0x64>
 8005df4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00d      	beq.n	8005e18 <HAL_TIM_Base_Start_IT+0x64>
 8005dfc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d009      	beq.n	8005e18 <HAL_TIM_Base_Start_IT+0x64>
 8005e04:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d005      	beq.n	8005e18 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	f042 0201 	orr.w	r2, r2, #1
 8005e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e14:	2000      	movs	r0, #0
 8005e16:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e18:	6899      	ldr	r1, [r3, #8]
 8005e1a:	4a09      	ldr	r2, [pc, #36]	; (8005e40 <HAL_TIM_Base_Start_IT+0x8c>)
 8005e1c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1e:	2a06      	cmp	r2, #6
 8005e20:	bf18      	it	ne
 8005e22:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 8005e26:	d007      	beq.n	8005e38 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	f042 0201 	orr.w	r2, r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005e30:	2000      	movs	r0, #0
 8005e32:	4770      	bx	lr
    return HAL_ERROR;
 8005e34:	2001      	movs	r0, #1
 8005e36:	4770      	bx	lr
  return HAL_OK;
 8005e38:	2000      	movs	r0, #0
}
 8005e3a:	4770      	bx	lr
 8005e3c:	40010000 	.word	0x40010000
 8005e40:	00010007 	.word	0x00010007

08005e44 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e44:	4770      	bx	lr

08005e46 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e46:	4770      	bx	lr

08005e48 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e48:	4770      	bx	lr

08005e4a <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e4a:	4770      	bx	lr

08005e4c <HAL_TIM_IRQHandler>:
{
 8005e4c:	b510      	push	{r4, lr}
 8005e4e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e50:	6803      	ldr	r3, [r0, #0]
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	f012 0f02 	tst.w	r2, #2
 8005e58:	d011      	beq.n	8005e7e <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	f012 0f02 	tst.w	r2, #2
 8005e60:	d00d      	beq.n	8005e7e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e62:	f06f 0202 	mvn.w	r2, #2
 8005e66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e6c:	6803      	ldr	r3, [r0, #0]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	f013 0f03 	tst.w	r3, #3
 8005e74:	d079      	beq.n	8005f6a <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005e76:	f7ff ffe6 	bl	8005e46 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	691a      	ldr	r2, [r3, #16]
 8005e82:	f012 0f04 	tst.w	r2, #4
 8005e86:	d012      	beq.n	8005eae <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	f012 0f04 	tst.w	r2, #4
 8005e8e:	d00e      	beq.n	8005eae <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e90:	f06f 0204 	mvn.w	r2, #4
 8005e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e96:	2302      	movs	r3, #2
 8005e98:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005ea2:	d068      	beq.n	8005f76 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f7ff ffce 	bl	8005e46 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	691a      	ldr	r2, [r3, #16]
 8005eb2:	f012 0f08 	tst.w	r2, #8
 8005eb6:	d012      	beq.n	8005ede <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eb8:	68da      	ldr	r2, [r3, #12]
 8005eba:	f012 0f08 	tst.w	r2, #8
 8005ebe:	d00e      	beq.n	8005ede <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ec0:	f06f 0208 	mvn.w	r2, #8
 8005ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ec6:	2304      	movs	r3, #4
 8005ec8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005eca:	6823      	ldr	r3, [r4, #0]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	f013 0f03 	tst.w	r3, #3
 8005ed2:	d057      	beq.n	8005f84 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	f7ff ffb6 	bl	8005e46 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eda:	2300      	movs	r3, #0
 8005edc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	691a      	ldr	r2, [r3, #16]
 8005ee2:	f012 0f10 	tst.w	r2, #16
 8005ee6:	d012      	beq.n	8005f0e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	f012 0f10 	tst.w	r2, #16
 8005eee:	d00e      	beq.n	8005f0e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ef0:	f06f 0210 	mvn.w	r2, #16
 8005ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ef6:	2308      	movs	r3, #8
 8005ef8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005f02:	d046      	beq.n	8005f92 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005f04:	4620      	mov	r0, r4
 8005f06:	f7ff ff9e 	bl	8005e46 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	691a      	ldr	r2, [r3, #16]
 8005f12:	f012 0f01 	tst.w	r2, #1
 8005f16:	d003      	beq.n	8005f20 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f18:	68da      	ldr	r2, [r3, #12]
 8005f1a:	f012 0f01 	tst.w	r2, #1
 8005f1e:	d13f      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	691a      	ldr	r2, [r3, #16]
 8005f24:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005f28:	d003      	beq.n	8005f32 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f2a:	68da      	ldr	r2, [r3, #12]
 8005f2c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005f30:	d13d      	bne.n	8005fae <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	691a      	ldr	r2, [r3, #16]
 8005f36:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005f3a:	d003      	beq.n	8005f44 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005f42:	d13b      	bne.n	8005fbc <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	691a      	ldr	r2, [r3, #16]
 8005f48:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005f4c:	d003      	beq.n	8005f56 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005f54:	d139      	bne.n	8005fca <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	691a      	ldr	r2, [r3, #16]
 8005f5a:	f012 0f20 	tst.w	r2, #32
 8005f5e:	d003      	beq.n	8005f68 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	f012 0f20 	tst.w	r2, #32
 8005f66:	d137      	bne.n	8005fd8 <HAL_TIM_IRQHandler+0x18c>
}
 8005f68:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6a:	f7ff ff6b 	bl	8005e44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f7ff ff6a 	bl	8005e48 <HAL_TIM_PWM_PulseFinishedCallback>
 8005f74:	e781      	b.n	8005e7a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f76:	4620      	mov	r0, r4
 8005f78:	f7ff ff64 	bl	8005e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f7ff ff63 	bl	8005e48 <HAL_TIM_PWM_PulseFinishedCallback>
 8005f82:	e792      	b.n	8005eaa <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f84:	4620      	mov	r0, r4
 8005f86:	f7ff ff5d 	bl	8005e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	f7ff ff5c 	bl	8005e48 <HAL_TIM_PWM_PulseFinishedCallback>
 8005f90:	e7a3      	b.n	8005eda <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f92:	4620      	mov	r0, r4
 8005f94:	f7ff ff56 	bl	8005e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f7ff ff55 	bl	8005e48 <HAL_TIM_PWM_PulseFinishedCallback>
 8005f9e:	e7b4      	b.n	8005f0a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fa0:	f06f 0201 	mvn.w	r2, #1
 8005fa4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	f7fd f8fa 	bl	80031a0 <HAL_TIM_PeriodElapsedCallback>
 8005fac:	e7b8      	b.n	8005f20 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fb2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f000 f8d0 	bl	800615a <HAL_TIMEx_BreakCallback>
 8005fba:	e7ba      	b.n	8005f32 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fbc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005fc0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f000 f8ca 	bl	800615c <HAL_TIMEx_Break2Callback>
 8005fc8:	e7bc      	b.n	8005f44 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fce:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f7ff ff3a 	bl	8005e4a <HAL_TIM_TriggerCallback>
 8005fd6:	e7be      	b.n	8005f56 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fd8:	f06f 0220 	mvn.w	r2, #32
 8005fdc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f000 f8ba 	bl	8006158 <HAL_TIMEx_CommutCallback>
}
 8005fe4:	e7c0      	b.n	8005f68 <HAL_TIM_IRQHandler+0x11c>
	...

08005fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fe8:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fea:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fec:	4a3b      	ldr	r2, [pc, #236]	; (80060dc <TIM_Base_SetConfig+0xf4>)
 8005fee:	4290      	cmp	r0, r2
 8005ff0:	bf14      	ite	ne
 8005ff2:	f04f 0e00 	movne.w	lr, #0
 8005ff6:	f04f 0e01 	moveq.w	lr, #1
 8005ffa:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005ffe:	bf14      	ite	ne
 8006000:	4672      	movne	r2, lr
 8006002:	f04e 0201 	orreq.w	r2, lr, #1
 8006006:	b9aa      	cbnz	r2, 8006034 <TIM_Base_SetConfig+0x4c>
 8006008:	4c35      	ldr	r4, [pc, #212]	; (80060e0 <TIM_Base_SetConfig+0xf8>)
 800600a:	42a0      	cmp	r0, r4
 800600c:	bf14      	ite	ne
 800600e:	2400      	movne	r4, #0
 8006010:	2401      	moveq	r4, #1
 8006012:	4d34      	ldr	r5, [pc, #208]	; (80060e4 <TIM_Base_SetConfig+0xfc>)
 8006014:	42a8      	cmp	r0, r5
 8006016:	d00d      	beq.n	8006034 <TIM_Base_SetConfig+0x4c>
 8006018:	b964      	cbnz	r4, 8006034 <TIM_Base_SetConfig+0x4c>
 800601a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800601e:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 8006022:	42a0      	cmp	r0, r4
 8006024:	bf14      	ite	ne
 8006026:	2400      	movne	r4, #0
 8006028:	2401      	moveq	r4, #1
 800602a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800602e:	42a8      	cmp	r0, r5
 8006030:	d000      	beq.n	8006034 <TIM_Base_SetConfig+0x4c>
 8006032:	b11c      	cbz	r4, 800603c <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006038:	684c      	ldr	r4, [r1, #4]
 800603a:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800603c:	2a00      	cmp	r2, #0
 800603e:	d133      	bne.n	80060a8 <TIM_Base_SetConfig+0xc0>
 8006040:	4a27      	ldr	r2, [pc, #156]	; (80060e0 <TIM_Base_SetConfig+0xf8>)
 8006042:	4290      	cmp	r0, r2
 8006044:	bf14      	ite	ne
 8006046:	2200      	movne	r2, #0
 8006048:	2201      	moveq	r2, #1
 800604a:	4c26      	ldr	r4, [pc, #152]	; (80060e4 <TIM_Base_SetConfig+0xfc>)
 800604c:	42a0      	cmp	r0, r4
 800604e:	d02b      	beq.n	80060a8 <TIM_Base_SetConfig+0xc0>
 8006050:	bb52      	cbnz	r2, 80060a8 <TIM_Base_SetConfig+0xc0>
 8006052:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006056:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800605a:	4290      	cmp	r0, r2
 800605c:	bf14      	ite	ne
 800605e:	2200      	movne	r2, #0
 8006060:	2201      	moveq	r2, #1
 8006062:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006066:	42a0      	cmp	r0, r4
 8006068:	d01e      	beq.n	80060a8 <TIM_Base_SetConfig+0xc0>
 800606a:	b9ea      	cbnz	r2, 80060a8 <TIM_Base_SetConfig+0xc0>
 800606c:	4a1e      	ldr	r2, [pc, #120]	; (80060e8 <TIM_Base_SetConfig+0x100>)
 800606e:	4290      	cmp	r0, r2
 8006070:	bf14      	ite	ne
 8006072:	2200      	movne	r2, #0
 8006074:	2201      	moveq	r2, #1
 8006076:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 800607a:	42a0      	cmp	r0, r4
 800607c:	d014      	beq.n	80060a8 <TIM_Base_SetConfig+0xc0>
 800607e:	b99a      	cbnz	r2, 80060a8 <TIM_Base_SetConfig+0xc0>
 8006080:	4a1a      	ldr	r2, [pc, #104]	; (80060ec <TIM_Base_SetConfig+0x104>)
 8006082:	4290      	cmp	r0, r2
 8006084:	bf14      	ite	ne
 8006086:	2200      	movne	r2, #0
 8006088:	2201      	moveq	r2, #1
 800608a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800608e:	42a0      	cmp	r0, r4
 8006090:	d00a      	beq.n	80060a8 <TIM_Base_SetConfig+0xc0>
 8006092:	b94a      	cbnz	r2, 80060a8 <TIM_Base_SetConfig+0xc0>
 8006094:	4a16      	ldr	r2, [pc, #88]	; (80060f0 <TIM_Base_SetConfig+0x108>)
 8006096:	4290      	cmp	r0, r2
 8006098:	bf14      	ite	ne
 800609a:	2200      	movne	r2, #0
 800609c:	2201      	moveq	r2, #1
 800609e:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
 80060a2:	42a0      	cmp	r0, r4
 80060a4:	d000      	beq.n	80060a8 <TIM_Base_SetConfig+0xc0>
 80060a6:	b122      	cbz	r2, 80060b2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060a8:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ac:	68cb      	ldr	r3, [r1, #12]
 80060ae:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060b6:	694a      	ldr	r2, [r1, #20]
 80060b8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80060ba:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060bc:	688a      	ldr	r2, [r1, #8]
 80060be:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060c0:	680a      	ldr	r2, [r1, #0]
 80060c2:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060c4:	4a0b      	ldr	r2, [pc, #44]	; (80060f4 <TIM_Base_SetConfig+0x10c>)
 80060c6:	4290      	cmp	r0, r2
 80060c8:	bf14      	ite	ne
 80060ca:	4673      	movne	r3, lr
 80060cc:	f04e 0301 	orreq.w	r3, lr, #1
 80060d0:	b10b      	cbz	r3, 80060d6 <TIM_Base_SetConfig+0xee>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060d2:	690b      	ldr	r3, [r1, #16]
 80060d4:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060d6:	2301      	movs	r3, #1
 80060d8:	6143      	str	r3, [r0, #20]
}
 80060da:	bd30      	pop	{r4, r5, pc}
 80060dc:	40010000 	.word	0x40010000
 80060e0:	40000800 	.word	0x40000800
 80060e4:	40000400 	.word	0x40000400
 80060e8:	40014400 	.word	0x40014400
 80060ec:	40001800 	.word	0x40001800
 80060f0:	40002000 	.word	0x40002000
 80060f4:	40010400 	.word	0x40010400

080060f8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80060f8:	b360      	cbz	r0, 8006154 <HAL_TIM_Base_Init+0x5c>
{
 80060fa:	b510      	push	{r4, lr}
 80060fc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80060fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006102:	b313      	cbz	r3, 800614a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8006104:	2302      	movs	r3, #2
 8006106:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800610a:	4621      	mov	r1, r4
 800610c:	f851 0b04 	ldr.w	r0, [r1], #4
 8006110:	f7ff ff6a 	bl	8005fe8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006114:	2301      	movs	r3, #1
 8006116:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800611a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800611e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006122:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006126:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800612a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800612e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006132:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006136:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800613a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800613e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006142:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006146:	2000      	movs	r0, #0
}
 8006148:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800614a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800614e:	f7ff fe30 	bl	8005db2 <HAL_TIM_Base_MspInit>
 8006152:	e7d7      	b.n	8006104 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006154:	2001      	movs	r0, #1
}
 8006156:	4770      	bx	lr

08006158 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006158:	4770      	bx	lr

0800615a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800615a:	4770      	bx	lr

0800615c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800615c:	4770      	bx	lr
	...

08006160 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006160:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006162:	680b      	ldr	r3, [r1, #0]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d018      	beq.n	800619a <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006168:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800616a:	4a19      	ldr	r2, [pc, #100]	; (80061d0 <FMC_SDRAM_Init+0x70>)
 800616c:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800616e:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 8006170:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006172:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 8006174:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 8006176:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 8006178:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 800617a:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 800617c:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 800617e:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 8006180:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 8006182:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 8006184:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 8006186:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 8006188:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 800618a:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 800618c:	6a49      	ldr	r1, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 800618e:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006190:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006192:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8006194:	2000      	movs	r0, #0
 8006196:	bc30      	pop	{r4, r5}
 8006198:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800619a:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800619c:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80061a0:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 80061a2:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80061a4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80061a6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 80061a8:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80061aa:	4322      	orrs	r2, r4
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80061ac:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80061ae:	4c08      	ldr	r4, [pc, #32]	; (80061d0 <FMC_SDRAM_Init+0x70>)
 80061b0:	401c      	ands	r4, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80061b2:	684b      	ldr	r3, [r1, #4]
 80061b4:	688d      	ldr	r5, [r1, #8]
 80061b6:	432b      	orrs	r3, r5
                       Init->RowBitsNumber       |\
 80061b8:	68cd      	ldr	r5, [r1, #12]
 80061ba:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 80061bc:	690d      	ldr	r5, [r1, #16]
 80061be:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 80061c0:	694d      	ldr	r5, [r1, #20]
 80061c2:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 80061c4:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 80061c6:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80061c8:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80061ca:	6002      	str	r2, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80061cc:	6043      	str	r3, [r0, #4]
 80061ce:	e7e1      	b.n	8006194 <FMC_SDRAM_Init+0x34>
 80061d0:	ffff8000 	.word	0xffff8000

080061d4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80061d4:	b510      	push	{r4, lr}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80061d6:	2a01      	cmp	r2, #1
 80061d8:	d025      	beq.n	8006226 <FMC_SDRAM_Timing_Init+0x52>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80061da:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80061dc:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80061e0:	680b      	ldr	r3, [r1, #0]
 80061e2:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80061e4:	684c      	ldr	r4, [r1, #4]
 80061e6:	f104 3cff 	add.w	ip, r4, #4294967295
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80061ea:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80061ee:	688c      	ldr	r4, [r1, #8]
 80061f0:	f104 3cff 	add.w	ip, r4, #4294967295
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80061f4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80061f8:	68cc      	ldr	r4, [r1, #12]
 80061fa:	f104 3cff 	add.w	ip, r4, #4294967295
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80061fe:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006202:	690c      	ldr	r4, [r1, #16]
 8006204:	f104 3cff 	add.w	ip, r4, #4294967295
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8006208:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 800620c:	694c      	ldr	r4, [r1, #20]
 800620e:	f104 3cff 	add.w	ip, r4, #4294967295
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006212:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 8006216:	6989      	ldr	r1, [r1, #24]
 8006218:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800621a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800621e:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006220:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8006222:	2000      	movs	r0, #0
 8006224:	bd10      	pop	{r4, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006226:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006228:	4c13      	ldr	r4, [pc, #76]	; (8006278 <FMC_SDRAM_Timing_Init+0xa4>)
 800622a:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800622c:	68ca      	ldr	r2, [r1, #12]
 800622e:	f102 3cff 	add.w	ip, r2, #4294967295
                        (((Timing->RPDelay)-1) << 20)); 
 8006232:	694b      	ldr	r3, [r1, #20]
 8006234:	1e5a      	subs	r2, r3, #1
 8006236:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006238:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
 800623c:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800623e:	68c3      	ldr	r3, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006240:	f003 4c70 	and.w	ip, r3, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006244:	680b      	ldr	r3, [r1, #0]
 8006246:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8006248:	684c      	ldr	r4, [r1, #4]
 800624a:	f104 3eff 	add.w	lr, r4, #4294967295
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800624e:	ea43 130e 	orr.w	r3, r3, lr, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006252:	688c      	ldr	r4, [r1, #8]
 8006254:	f104 3eff 	add.w	lr, r4, #4294967295
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8006258:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800625c:	690c      	ldr	r4, [r1, #16]
 800625e:	f104 3eff 	add.w	lr, r4, #4294967295
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006262:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 8006266:	6989      	ldr	r1, [r1, #24]
 8006268:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800626a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800626e:	ea43 030c 	orr.w	r3, r3, ip
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006272:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006274:	60c3      	str	r3, [r0, #12]
 8006276:	e7d4      	b.n	8006222 <FMC_SDRAM_Timing_Init+0x4e>
 8006278:	ff0f0fff 	.word	0xff0f0fff

0800627c <__libc_init_array>:
 800627c:	b570      	push	{r4, r5, r6, lr}
 800627e:	4d0d      	ldr	r5, [pc, #52]	; (80062b4 <__libc_init_array+0x38>)
 8006280:	4c0d      	ldr	r4, [pc, #52]	; (80062b8 <__libc_init_array+0x3c>)
 8006282:	1b64      	subs	r4, r4, r5
 8006284:	10a4      	asrs	r4, r4, #2
 8006286:	2600      	movs	r6, #0
 8006288:	42a6      	cmp	r6, r4
 800628a:	d109      	bne.n	80062a0 <__libc_init_array+0x24>
 800628c:	4d0b      	ldr	r5, [pc, #44]	; (80062bc <__libc_init_array+0x40>)
 800628e:	4c0c      	ldr	r4, [pc, #48]	; (80062c0 <__libc_init_array+0x44>)
 8006290:	f000 f820 	bl	80062d4 <_init>
 8006294:	1b64      	subs	r4, r4, r5
 8006296:	10a4      	asrs	r4, r4, #2
 8006298:	2600      	movs	r6, #0
 800629a:	42a6      	cmp	r6, r4
 800629c:	d105      	bne.n	80062aa <__libc_init_array+0x2e>
 800629e:	bd70      	pop	{r4, r5, r6, pc}
 80062a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062a4:	4798      	blx	r3
 80062a6:	3601      	adds	r6, #1
 80062a8:	e7ee      	b.n	8006288 <__libc_init_array+0xc>
 80062aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ae:	4798      	blx	r3
 80062b0:	3601      	adds	r6, #1
 80062b2:	e7f2      	b.n	800629a <__libc_init_array+0x1e>
 80062b4:	08008054 	.word	0x08008054
 80062b8:	08008054 	.word	0x08008054
 80062bc:	08008054 	.word	0x08008054
 80062c0:	08008058 	.word	0x08008058

080062c4 <memset>:
 80062c4:	4402      	add	r2, r0
 80062c6:	4603      	mov	r3, r0
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d100      	bne.n	80062ce <memset+0xa>
 80062cc:	4770      	bx	lr
 80062ce:	f803 1b01 	strb.w	r1, [r3], #1
 80062d2:	e7f9      	b.n	80062c8 <memset+0x4>

080062d4 <_init>:
 80062d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d6:	bf00      	nop
 80062d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062da:	bc08      	pop	{r3}
 80062dc:	469e      	mov	lr, r3
 80062de:	4770      	bx	lr

080062e0 <_fini>:
 80062e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e2:	bf00      	nop
 80062e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062e6:	bc08      	pop	{r3}
 80062e8:	469e      	mov	lr, r3
 80062ea:	4770      	bx	lr
