
SimpleGraphics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000444c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800462c  0800462c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800462c  0800462c  0001462c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004634  08004634  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004634  08004634  00014634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004638  08004638  00014638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800463c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003feac  2000000c  08004648  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2003feb8  08004648  0002feb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024289  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003caf  00000000  00000000  000442c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000169b7  00000000  00000000  00047f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f0  00000000  00000000  0005e930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016b0  00000000  00000000  00060120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028a43  00000000  00000000  000617d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024943  00000000  00000000  0008a213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fcd8c  00000000  00000000  000aeb56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001ab8e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000445c  00000000  00000000  001ab938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080045fc 	.word	0x080045fc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080045fc 	.word	0x080045fc

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <Init_Graphics_System>:

void Init_Graphics_System(uint32 H, uint32 W, uint32 LCD_RAM_START_ADDRESS, uint8 Layers, uint8 ColorType) //Инициализация драйвера дисплея, графического ускорителя и т.п.
{
	LTDC_LayerCfgTypeDef pLayerCfg = {0};
	LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
	Height = H;
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <Init_Graphics_System+0x24>)
 8000502:	6018      	str	r0, [r3, #0]
    Width = W;
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <Init_Graphics_System+0x28>)
 8000506:	6019      	str	r1, [r3, #0]

    LCD_FRAME_BUFFER0 = LCD_RAM_START_ADDRESS;
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <Init_Graphics_System+0x2c>)
 800050a:	601a      	str	r2, [r3, #0]
    LCD_FRAME_BUFFER1 = LCD_FRAME_BUFFER0 + (Height * Width * 2);
 800050c:	fb01 f100 	mul.w	r1, r1, r0
 8000510:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <Init_Graphics_System+0x30>)
 8000516:	601a      	str	r2, [r3, #0]
    LCD_FRAME_BUFFER2 = LCD_FRAME_BUFFER1 + (Height * Width * 2);
 8000518:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <Init_Graphics_System+0x34>)
 800051e:	601a      	str	r2, [r3, #0]
    if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
    {

    } */

}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20000028 	.word	0x20000028
 8000528:	20000038 	.word	0x20000038
 800052c:	2000002c 	.word	0x2000002c
 8000530:	20000030 	.word	0x20000030
 8000534:	20000034 	.word	0x20000034

08000538 <Fill_all>:

void Fill_all(uint32 Color) //Заливка всего дисплея цветом
{
	for(int i=0; i<480*272; i++)
 8000538:	2300      	movs	r3, #0
 800053a:	f5b3 3fff 	cmp.w	r3, #130560	; 0x1fe00
 800053e:	da06      	bge.n	800054e <Fill_all+0x16>
	{
	  *(__IO uint16*) (LCD_FRAME_BUFFER0 + (i*2)) = Color;
 8000540:	4a03      	ldr	r2, [pc, #12]	; (8000550 <Fill_all+0x18>)
 8000542:	6812      	ldr	r2, [r2, #0]
 8000544:	b281      	uxth	r1, r0
 8000546:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<480*272; i++)
 800054a:	3301      	adds	r3, #1
 800054c:	e7f5      	b.n	800053a <Fill_all+0x2>
	}
}
 800054e:	4770      	bx	lr
 8000550:	2000002c 	.word	0x2000002c

08000554 <Fill_rectangle>:

void Fill_rectangle(uint32 Color, int32 StartX, int32 StopX, int32 StartY, int32 StopY) //Заливка прямоугольной формы
{
 8000554:	b4f0      	push	{r4, r5, r6, r7}
 8000556:	f8dd c010 	ldr.w	ip, [sp, #16]
	StartX--;
 800055a:	1e4f      	subs	r7, r1, #1
	StartY--;
 800055c:	1e5e      	subs	r6, r3, #1
    	   //HAL_Delay(5);
    	   HAL_DMA2D_PollForTransfer(&hdma2d, TransferDelay);
       }
    } */

	for(uint32 y = StartY; y < StopY; y++)
 800055e:	e00c      	b.n	800057a <Fill_rectangle+0x26>
	{
		for(uint32 x = StartX; x < StopX; x++)
		{
			*(__IO uint16*) (LCD_FRAME_BUFFER0 + (2*(y*Width + x))) = Color;
 8000560:	4909      	ldr	r1, [pc, #36]	; (8000588 <Fill_rectangle+0x34>)
 8000562:	6809      	ldr	r1, [r1, #0]
 8000564:	fb01 3106 	mla	r1, r1, r6, r3
 8000568:	4c08      	ldr	r4, [pc, #32]	; (800058c <Fill_rectangle+0x38>)
 800056a:	6824      	ldr	r4, [r4, #0]
 800056c:	b285      	uxth	r5, r0
 800056e:	f824 5011 	strh.w	r5, [r4, r1, lsl #1]
		for(uint32 x = StartX; x < StopX; x++)
 8000572:	3301      	adds	r3, #1
 8000574:	429a      	cmp	r2, r3
 8000576:	d8f3      	bhi.n	8000560 <Fill_rectangle+0xc>
	for(uint32 y = StartY; y < StopY; y++)
 8000578:	3601      	adds	r6, #1
 800057a:	45b4      	cmp	ip, r6
 800057c:	d901      	bls.n	8000582 <Fill_rectangle+0x2e>
		for(uint32 x = StartX; x < StopX; x++)
 800057e:	463b      	mov	r3, r7
 8000580:	e7f8      	b.n	8000574 <Fill_rectangle+0x20>
		}
	}
}
 8000582:	bcf0      	pop	{r4, r5, r6, r7}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000038 	.word	0x20000038
 800058c:	2000002c 	.word	0x2000002c

08000590 <Get565Color>:
{
	uint8 FontH = calibri[1];
	return FontH;
}
uint16 Get565Color(uint32 Color)
{
 8000590:	b410      	push	{r4}
   uint8 R, G, B;
   R = (Color >> 16) & 0xff;
   G = (Color >> 8) & 0xff;
   B = Color & 0xff;

   R = 31 * R / 255;
 8000592:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8000596:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 800059a:	4c13      	ldr	r4, [pc, #76]	; (80005e8 <Get565Color+0x58>)
 800059c:	fb84 2103 	smull	r2, r1, r4, r3
 80005a0:	4419      	add	r1, r3
 80005a2:	17db      	asrs	r3, r3, #31
 80005a4:	ebc3 11e1 	rsb	r1, r3, r1, asr #7
   G = 63 * G / 255;
 80005a8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80005ac:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 80005b0:	fb84 c203 	smull	ip, r2, r4, r3
 80005b4:	441a      	add	r2, r3
 80005b6:	17db      	asrs	r3, r3, #31
 80005b8:	ebc3 13e2 	rsb	r3, r3, r2, asr #7
   B = 31 * B / 255;
 80005bc:	b2c2      	uxtb	r2, r0
 80005be:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 80005c2:	fb84 4002 	smull	r4, r0, r4, r2
 80005c6:	4410      	add	r0, r2
 80005c8:	17d2      	asrs	r2, r2, #31
 80005ca:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
 80005ce:	b2c2      	uxtb	r2, r0

   RezColor |= B;
   RezColor |= (G << 5);
 80005d0:	0158      	lsls	r0, r3, #5
 80005d2:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
 80005d6:	4310      	orrs	r0, r2
   RezColor |= (R << 11);
 80005d8:	02c9      	lsls	r1, r1, #11
 80005da:	f401 21ff 	and.w	r1, r1, #522240	; 0x7f800
 80005de:	4308      	orrs	r0, r1

   return RezColor;
}
 80005e0:	b280      	uxth	r0, r0
 80005e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	80808081 	.word	0x80808081

080005ec <is_Disp_Res>:
{
	Backlight(Brightness, State);
}
uint8 is_Disp_Res(int32 x1, int32 x2, int32 y1, int32 y2)
{
	if((x1 > 0)&&(x2 <= DispWidth))
 80005ec:	2800      	cmp	r0, #0
 80005ee:	dd0b      	ble.n	8000608 <is_Disp_Res+0x1c>
 80005f0:	4809      	ldr	r0, [pc, #36]	; (8000618 <is_Disp_Res+0x2c>)
 80005f2:	6800      	ldr	r0, [r0, #0]
 80005f4:	4281      	cmp	r1, r0
 80005f6:	d809      	bhi.n	800060c <is_Disp_Res+0x20>
	{
		if((y1 > 0)&&(y2 <= DispHeight))
 80005f8:	2a00      	cmp	r2, #0
 80005fa:	dd09      	ble.n	8000610 <is_Disp_Res+0x24>
 80005fc:	4a07      	ldr	r2, [pc, #28]	; (800061c <is_Disp_Res+0x30>)
 80005fe:	6812      	ldr	r2, [r2, #0]
 8000600:	4293      	cmp	r3, r2
 8000602:	d907      	bls.n	8000614 <is_Disp_Res+0x28>
		{
			return Ok;
		}
	}
	return Error;
 8000604:	2000      	movs	r0, #0
 8000606:	4770      	bx	lr
 8000608:	2000      	movs	r0, #0
 800060a:	4770      	bx	lr
 800060c:	2000      	movs	r0, #0
 800060e:	4770      	bx	lr
 8000610:	2000      	movs	r0, #0
 8000612:	4770      	bx	lr
			return Ok;
 8000614:	2001      	movs	r0, #1
}
 8000616:	4770      	bx	lr
 8000618:	20000044 	.word	0x20000044
 800061c:	20000040 	.word	0x20000040

08000620 <Graphics_Init>:

void Graphics_Init(DisplayConfig *dcf)
{
 8000620:	b510      	push	{r4, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	4602      	mov	r2, r0
	DispHeight = dcf->Display_Height;
 8000626:	6840      	ldr	r0, [r0, #4]
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <Graphics_Init+0x28>)
 800062a:	6018      	str	r0, [r3, #0]
	DispWidth = dcf->Display_Width;
 800062c:	6891      	ldr	r1, [r2, #8]
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <Graphics_Init+0x2c>)
 8000630:	6019      	str	r1, [r3, #0]
	ColorType = dcf->Color_Type;
 8000632:	7b13      	ldrb	r3, [r2, #12]
 8000634:	4c06      	ldr	r4, [pc, #24]	; (8000650 <Graphics_Init+0x30>)
 8000636:	7023      	strb	r3, [r4, #0]
	Init_Graphics_System(dcf->Display_Height, dcf->Display_Width, dcf->Start_RAM_Address, dcf->Layers, dcf->Color_Type);
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	7b53      	ldrb	r3, [r2, #13]
 800063c:	6812      	ldr	r2, [r2, #0]
 800063e:	f7ff ff5f 	bl	8000500 <Init_Graphics_System>
}
 8000642:	b002      	add	sp, #8
 8000644:	bd10      	pop	{r4, pc}
 8000646:	bf00      	nop
 8000648:	20000040 	.word	0x20000040
 800064c:	20000044 	.word	0x20000044
 8000650:	2000003c 	.word	0x2000003c

08000654 <Fill_Display>:

void Fill_Display(uint32 Color)
{
 8000654:	b510      	push	{r4, lr}
 8000656:	4604      	mov	r4, r0
	if(ColorType == Color565)
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <Fill_Display+0x38>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b143      	cbz	r3, 8000670 <Fill_Display+0x1c>
	{ Fill_all(Get565Color(Color)); }

	if(ColorType == Color888)
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <Fill_Display+0x38>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d009      	beq.n	800067a <Fill_Display+0x26>
	{ Fill_all(Color | 0xFF << 24); }

	if(ColorType == Color_A888)
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <Fill_Display+0x38>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b02      	cmp	r3, #2
 800066c:	d00a      	beq.n	8000684 <Fill_Display+0x30>
	{ Fill_all(Color); }
}
 800066e:	bd10      	pop	{r4, pc}
	{ Fill_all(Get565Color(Color)); }
 8000670:	f7ff ff8e 	bl	8000590 <Get565Color>
 8000674:	f7ff ff60 	bl	8000538 <Fill_all>
 8000678:	e7f1      	b.n	800065e <Fill_Display+0xa>
	{ Fill_all(Color | 0xFF << 24); }
 800067a:	f044 407f 	orr.w	r0, r4, #4278190080	; 0xff000000
 800067e:	f7ff ff5b 	bl	8000538 <Fill_all>
 8000682:	e7f0      	b.n	8000666 <Fill_Display+0x12>
	{ Fill_all(Color); }
 8000684:	4620      	mov	r0, r4
 8000686:	f7ff ff57 	bl	8000538 <Fill_all>
}
 800068a:	e7f0      	b.n	800066e <Fill_Display+0x1a>
 800068c:	2000003c 	.word	0x2000003c

08000690 <Fill_Rectangle>:
void Fill_Rectangle(uint32 Color, int32 StartX, int32 StopX, int32 StartY, int32 StopY)
{
 8000690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000692:	b083      	sub	sp, #12
 8000694:	4607      	mov	r7, r0
 8000696:	460c      	mov	r4, r1
 8000698:	4615      	mov	r5, r2
 800069a:	461e      	mov	r6, r3
	if(is_Disp_Res(StartX, StopX, StartY, StopY) == Ok)
 800069c:	9b08      	ldr	r3, [sp, #32]
 800069e:	4632      	mov	r2, r6
 80006a0:	4629      	mov	r1, r5
 80006a2:	4620      	mov	r0, r4
 80006a4:	f7ff ffa2 	bl	80005ec <is_Disp_Res>
 80006a8:	2801      	cmp	r0, #1
 80006aa:	d001      	beq.n	80006b0 <Fill_Rectangle+0x20>
		{ Fill_rectangle(Color | 0xFF << 24, StartX, StopX, StartY, StopY); }

		if(ColorType == Color_A888)
		{ Fill_all(Color); }
	}
}
 80006ac:	b003      	add	sp, #12
 80006ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(ColorType == Color565)
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <Fill_Rectangle+0x68>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	b15b      	cbz	r3, 80006ce <Fill_Rectangle+0x3e>
		if(ColorType == Color888)
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <Fill_Rectangle+0x68>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d012      	beq.n	80006e4 <Fill_Rectangle+0x54>
		if(ColorType == Color_A888)
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <Fill_Rectangle+0x68>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b02      	cmp	r3, #2
 80006c4:	d1f2      	bne.n	80006ac <Fill_Rectangle+0x1c>
		{ Fill_all(Color); }
 80006c6:	4638      	mov	r0, r7
 80006c8:	f7ff ff36 	bl	8000538 <Fill_all>
}
 80006cc:	e7ee      	b.n	80006ac <Fill_Rectangle+0x1c>
		{ Fill_rectangle(Get565Color(Color), StartX, StopX, StartY, StopY); }
 80006ce:	4638      	mov	r0, r7
 80006d0:	f7ff ff5e 	bl	8000590 <Get565Color>
 80006d4:	9b08      	ldr	r3, [sp, #32]
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	4633      	mov	r3, r6
 80006da:	462a      	mov	r2, r5
 80006dc:	4621      	mov	r1, r4
 80006de:	f7ff ff39 	bl	8000554 <Fill_rectangle>
 80006e2:	e7e8      	b.n	80006b6 <Fill_Rectangle+0x26>
		{ Fill_rectangle(Color | 0xFF << 24, StartX, StopX, StartY, StopY); }
 80006e4:	9b08      	ldr	r3, [sp, #32]
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	4633      	mov	r3, r6
 80006ea:	462a      	mov	r2, r5
 80006ec:	4621      	mov	r1, r4
 80006ee:	f047 407f 	orr.w	r0, r7, #4278190080	; 0xff000000
 80006f2:	f7ff ff2f 	bl	8000554 <Fill_rectangle>
 80006f6:	e7e2      	b.n	80006be <Fill_Rectangle+0x2e>
 80006f8:	2000003c 	.word	0x2000003c

080006fc <MainFunc>:

extern LTDC_HandleTypeDef hltdc;
DisplayConfig ds;

void MainFunc ()
{
 80006fc:	b500      	push	{lr}
 80006fe:	b083      	sub	sp, #12
	ds.Color_Type = Color565;
 8000700:	4c31      	ldr	r4, [pc, #196]	; (80007c8 <MainFunc+0xcc>)
 8000702:	2200      	movs	r2, #0
 8000704:	7322      	strb	r2, [r4, #12]
	ds.Display_Height = 272;
 8000706:	f44f 7388 	mov.w	r3, #272	; 0x110
 800070a:	6063      	str	r3, [r4, #4]
	ds.Display_Width = 480;
 800070c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000710:	60a3      	str	r3, [r4, #8]
	ds.Layers = 1;
 8000712:	2301      	movs	r3, #1
 8000714:	7363      	strb	r3, [r4, #13]
	ds.Start_RAM_Address = (uint32_t)&RGB;
 8000716:	492d      	ldr	r1, [pc, #180]	; (80007cc <MainFunc+0xd0>)
 8000718:	6021      	str	r1, [r4, #0]

	HAL_LTDC_SetAddress(&hltdc,(uint32_t)&RGB,0);
 800071a:	482d      	ldr	r0, [pc, #180]	; (80007d0 <MainFunc+0xd4>)
 800071c:	f001 fd7a 	bl	8002214 <HAL_LTDC_SetAddress>
	Graphics_Init(&ds);
 8000720:	4620      	mov	r0, r4
 8000722:	f7ff ff7d 	bl	8000620 <Graphics_Init>

	Fill_Display(green);
 8000726:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 800072a:	f7ff ff93 	bl	8000654 <Fill_Display>
	HAL_Delay(1000);
 800072e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000732:	f000 fff1 	bl	8001718 <HAL_Delay>

	while(1)
	{
		Fill_Display(white);
 8000736:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800073a:	f7ff ff8b 	bl	8000654 <Fill_Display>
		Fill_Rectangle(darkBlue4, 1, 480, 1, 272);
 800073e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	2301      	movs	r3, #1
 8000746:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800074a:	4619      	mov	r1, r3
 800074c:	2033      	movs	r0, #51	; 0x33
 800074e:	f7ff ff9f 	bl	8000690 <Fill_Rectangle>
		HAL_Delay(3000);
 8000752:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000756:	f000 ffdf 	bl	8001718 <HAL_Delay>

		Fill_Display(white);
 800075a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800075e:	f7ff ff79 	bl	8000654 <Fill_Display>
		Fill_Rectangle(darkBlue4, 2, 479, 2, 271);
 8000762:	f240 130f 	movw	r3, #271	; 0x10f
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2302      	movs	r3, #2
 800076a:	f240 12df 	movw	r2, #479	; 0x1df
 800076e:	4619      	mov	r1, r3
 8000770:	2033      	movs	r0, #51	; 0x33
 8000772:	f7ff ff8d 	bl	8000690 <Fill_Rectangle>
		HAL_Delay(3000);
 8000776:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800077a:	f000 ffcd 	bl	8001718 <HAL_Delay>

		Fill_Display(white);
 800077e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8000782:	f7ff ff67 	bl	8000654 <Fill_Display>
		Fill_Rectangle(darkBlue4, 3, 478, 3, 270);
 8000786:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2303      	movs	r3, #3
 800078e:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8000792:	4619      	mov	r1, r3
 8000794:	2033      	movs	r0, #51	; 0x33
 8000796:	f7ff ff7b 	bl	8000690 <Fill_Rectangle>
		HAL_Delay(3000);
 800079a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800079e:	f000 ffbb 	bl	8001718 <HAL_Delay>

		Fill_Display(white);
 80007a2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80007a6:	f7ff ff55 	bl	8000654 <Fill_Display>
		Fill_Rectangle(darkBlue4, 50, 400, 70, 180);
 80007aa:	23b4      	movs	r3, #180	; 0xb4
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	2346      	movs	r3, #70	; 0x46
 80007b0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80007b4:	2132      	movs	r1, #50	; 0x32
 80007b6:	2033      	movs	r0, #51	; 0x33
 80007b8:	f7ff ff6a 	bl	8000690 <Fill_Rectangle>
		HAL_Delay(3000);
 80007bc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80007c0:	f000 ffaa 	bl	8001718 <HAL_Delay>
	while(1)
 80007c4:	e7b7      	b.n	8000736 <MainFunc+0x3a>
 80007c6:	bf00      	nop
 80007c8:	2000004c 	.word	0x2000004c
 80007cc:	2000005c 	.word	0x2000005c
 80007d0:	2003fd2c 	.word	0x2003fd2c

080007d4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80007d4:	b510      	push	{r4, lr}
 80007d6:	b084      	sub	sp, #16
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d8:	2400      	movs	r4, #0
 80007da:	9400      	str	r4, [sp, #0]
 80007dc:	9401      	str	r4, [sp, #4]
 80007de:	9402      	str	r4, [sp, #8]
 80007e0:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80007e2:	f000 ffff 	bl	80017e4 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007e6:	2301      	movs	r3, #1
 80007e8:	f88d 3000 	strb.w	r3, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80007ec:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x20000004;
 80007f0:	4a0d      	ldr	r2, [pc, #52]	; (8000828 <MPU_Config+0x54>)
 80007f2:	9201      	str	r2, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80007f4:	2211      	movs	r2, #17
 80007f6:	f88d 2008 	strb.w	r2, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80007fa:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80007fe:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000802:	2203      	movs	r2, #3
 8000804:	f88d 200b 	strb.w	r2, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000808:	f88d 400c 	strb.w	r4, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800080c:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000810:	f88d 300e 	strb.w	r3, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000814:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000818:	4668      	mov	r0, sp
 800081a:	f001 f805 	bl	8001828 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800081e:	2004      	movs	r0, #4
 8000820:	f000 fff0 	bl	8001804 <HAL_MPU_Enable>

}
 8000824:	b004      	add	sp, #16
 8000826:	bd10      	pop	{r4, pc}
 8000828:	20000004 	.word	0x20000004

0800082c <MX_GPIO_Init>:
{
 800082c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000830:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	2400      	movs	r4, #0
 8000834:	940b      	str	r4, [sp, #44]	; 0x2c
 8000836:	940c      	str	r4, [sp, #48]	; 0x30
 8000838:	940d      	str	r4, [sp, #52]	; 0x34
 800083a:	940e      	str	r4, [sp, #56]	; 0x38
 800083c:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800083e:	4baa      	ldr	r3, [pc, #680]	; (8000ae8 <MX_GPIO_Init+0x2bc>)
 8000840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000842:	f042 0210 	orr.w	r2, r2, #16
 8000846:	631a      	str	r2, [r3, #48]	; 0x30
 8000848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800084a:	f002 0210 	and.w	r2, r2, #16
 800084e:	9200      	str	r2, [sp, #0]
 8000850:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000858:	631a      	str	r2, [r3, #48]	; 0x30
 800085a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800085c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000860:	9201      	str	r2, [sp, #4]
 8000862:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000866:	f042 0202 	orr.w	r2, r2, #2
 800086a:	631a      	str	r2, [r3, #48]	; 0x30
 800086c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800086e:	f002 0202 	and.w	r2, r2, #2
 8000872:	9202      	str	r2, [sp, #8]
 8000874:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000878:	f042 0208 	orr.w	r2, r2, #8
 800087c:	631a      	str	r2, [r3, #48]	; 0x30
 800087e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000880:	f002 0208 	and.w	r2, r2, #8
 8000884:	9203      	str	r2, [sp, #12]
 8000886:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800088a:	f042 0204 	orr.w	r2, r2, #4
 800088e:	631a      	str	r2, [r3, #48]	; 0x30
 8000890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000892:	f002 0204 	and.w	r2, r2, #4
 8000896:	9204      	str	r2, [sp, #16]
 8000898:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800089c:	f042 0201 	orr.w	r2, r2, #1
 80008a0:	631a      	str	r2, [r3, #48]	; 0x30
 80008a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008a4:	f002 0201 	and.w	r2, r2, #1
 80008a8:	9205      	str	r2, [sp, #20]
 80008aa:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80008ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80008b2:	631a      	str	r2, [r3, #48]	; 0x30
 80008b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008b6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80008ba:	9206      	str	r2, [sp, #24]
 80008bc:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80008c4:	631a      	str	r2, [r3, #48]	; 0x30
 80008c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008c8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80008cc:	9207      	str	r2, [sp, #28]
 80008ce:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80008d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80008d6:	631a      	str	r2, [r3, #48]	; 0x30
 80008d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008da:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80008de:	9208      	str	r2, [sp, #32]
 80008e0:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e4:	f042 0220 	orr.w	r2, r2, #32
 80008e8:	631a      	str	r2, [r3, #48]	; 0x30
 80008ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008ec:	f002 0220 	and.w	r2, r2, #32
 80008f0:	9209      	str	r2, [sp, #36]	; 0x24
 80008f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80008fa:	631a      	str	r2, [r3, #48]	; 0x30
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000902:	930a      	str	r3, [sp, #40]	; 0x28
 8000904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000906:	2201      	movs	r2, #1
 8000908:	2120      	movs	r1, #32
 800090a:	4878      	ldr	r0, [pc, #480]	; (8000aec <MX_GPIO_Init+0x2c0>)
 800090c:	f001 f9d6 	bl	8001cbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8000910:	4622      	mov	r2, r4
 8000912:	210c      	movs	r1, #12
 8000914:	4876      	ldr	r0, [pc, #472]	; (8000af0 <MX_GPIO_Init+0x2c4>)
 8000916:	f001 f9d1 	bl	8001cbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800091a:	2201      	movs	r2, #1
 800091c:	2108      	movs	r1, #8
 800091e:	4875      	ldr	r0, [pc, #468]	; (8000af4 <MX_GPIO_Init+0x2c8>)
 8000920:	f001 f9cc 	bl	8001cbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800092a:	4871      	ldr	r0, [pc, #452]	; (8000af0 <MX_GPIO_Init+0x2c4>)
 800092c:	f001 f9c6 	bl	8001cbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000930:	4622      	mov	r2, r4
 8000932:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000936:	4870      	ldr	r0, [pc, #448]	; (8000af8 <MX_GPIO_Init+0x2cc>)
 8000938:	f001 f9c0 	bl	8001cbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800093c:	4622      	mov	r2, r4
 800093e:	21c8      	movs	r1, #200	; 0xc8
 8000940:	486e      	ldr	r0, [pc, #440]	; (8000afc <MX_GPIO_Init+0x2d0>)
 8000942:	f001 f9bb 	bl	8001cbc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000946:	2308      	movs	r3, #8
 8000948:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800094e:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8000b08 <MX_GPIO_Init+0x2dc>
 8000952:	a90b      	add	r1, sp, #44	; 0x2c
 8000954:	4648      	mov	r0, r9
 8000956:	f001 f8c1 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800095a:	2304      	movs	r3, #4
 800095c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2502      	movs	r5, #2
 8000960:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	2603      	movs	r6, #3
 8000966:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000968:	2309      	movs	r3, #9
 800096a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800096c:	a90b      	add	r1, sp, #44	; 0x2c
 800096e:	4648      	mov	r0, r9
 8000970:	f001 f8b4 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000974:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000978:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000980:	230b      	movs	r3, #11
 8000982:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000984:	a90b      	add	r1, sp, #44	; 0x2c
 8000986:	485d      	ldr	r0, [pc, #372]	; (8000afc <MX_GPIO_Init+0x2d0>)
 8000988:	f001 f8a8 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800098c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000990:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000992:	2312      	movs	r3, #18
 8000994:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800099a:	2304      	movs	r3, #4
 800099c:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	f8df b16c 	ldr.w	fp, [pc, #364]	; 8000b0c <MX_GPIO_Init+0x2e0>
 80009a2:	a90b      	add	r1, sp, #44	; 0x2c
 80009a4:	4658      	mov	r0, fp
 80009a6:	f001 f899 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80009aa:	f643 4323 	movw	r3, #15395	; 0x3c23
 80009ae:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80009b6:	f04f 080a 	mov.w	r8, #10
 80009ba:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	a90b      	add	r1, sp, #44	; 0x2c
 80009c0:	4658      	mov	r0, fp
 80009c2:	f001 f88b 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80009c6:	2310      	movs	r3, #16
 80009c8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009d0:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80009d2:	a90b      	add	r1, sp, #44	; 0x2c
 80009d4:	4658      	mov	r0, fp
 80009d6:	f001 f881 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80009da:	2380      	movs	r3, #128	; 0x80
 80009dc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80009e4:	2308      	movs	r3, #8
 80009e6:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80009e8:	a90b      	add	r1, sp, #44	; 0x2c
 80009ea:	4840      	ldr	r0, [pc, #256]	; (8000aec <MX_GPIO_Init+0x2c0>)
 80009ec:	f001 f876 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80009f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009f4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009fc:	2701      	movs	r7, #1
 80009fe:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8000b10 <MX_GPIO_Init+0x2e4>
 8000a04:	a90b      	add	r1, sp, #44	; 0x2c
 8000a06:	4650      	mov	r0, sl
 8000a08:	f001 f868 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000a0c:	2360      	movs	r3, #96	; 0x60
 8000a0e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a16:	230d      	movs	r3, #13
 8000a18:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a1a:	a90b      	add	r1, sp, #44	; 0x2c
 8000a1c:	4648      	mov	r0, r9
 8000a1e:	f001 f85d 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a22:	2380      	movs	r3, #128	; 0x80
 8000a24:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a2c:	2307      	movs	r3, #7
 8000a2e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a30:	a90b      	add	r1, sp, #44	; 0x2c
 8000a32:	4658      	mov	r0, fp
 8000a34:	f001 f852 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000a38:	2340      	movs	r3, #64	; 0x40
 8000a3a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000a42:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000a46:	a90b      	add	r1, sp, #44	; 0x2c
 8000a48:	4658      	mov	r0, fp
 8000a4a:	f001 f847 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a52:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a54:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a58:	a90b      	add	r1, sp, #44	; 0x2c
 8000a5a:	4829      	ldr	r0, [pc, #164]	; (8000b00 <MX_GPIO_Init+0x2d4>)
 8000a5c:	f001 f83e 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000a60:	2340      	movs	r3, #64	; 0x40
 8000a62:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a64:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <MX_GPIO_Init+0x2d8>)
 8000a66:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	a90b      	add	r1, sp, #44	; 0x2c
 8000a6c:	481f      	ldr	r0, [pc, #124]	; (8000aec <MX_GPIO_Init+0x2c0>)
 8000a6e:	f001 f835 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000a72:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a76:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a7e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	a90b      	add	r1, sp, #44	; 0x2c
 8000a84:	4650      	mov	r0, sl
 8000a86:	f001 f829 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000a8a:	23f0      	movs	r3, #240	; 0xf0
 8000a8c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a94:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a98:	a90b      	add	r1, sp, #44	; 0x2c
 8000a9a:	4815      	ldr	r0, [pc, #84]	; (8000af0 <MX_GPIO_Init+0x2c4>)
 8000a9c:	f001 f81e 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000aac:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	a90b      	add	r1, sp, #44	; 0x2c
 8000ab2:	4812      	ldr	r0, [pc, #72]	; (8000afc <MX_GPIO_Init+0x2d0>)
 8000ab4:	f001 f812 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ab8:	2320      	movs	r3, #32
 8000aba:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	a90b      	add	r1, sp, #44	; 0x2c
 8000ac4:	4809      	ldr	r0, [pc, #36]	; (8000aec <MX_GPIO_Init+0x2c0>)
 8000ac6:	f001 f809 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000aca:	2208      	movs	r2, #8
 8000acc:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ad4:	220d      	movs	r2, #13
 8000ad6:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	a90b      	add	r1, sp, #44	; 0x2c
 8000ada:	4804      	ldr	r0, [pc, #16]	; (8000aec <MX_GPIO_Init+0x2c0>)
 8000adc:	f000 fffe 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000ae0:	f241 030c 	movw	r3, #4108	; 0x100c
 8000ae4:	930b      	str	r3, [sp, #44]	; 0x2c
 8000ae6:	e015      	b.n	8000b14 <MX_GPIO_Init+0x2e8>
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020c00 	.word	0x40020c00
 8000af0:	40022000 	.word	0x40022000
 8000af4:	40022800 	.word	0x40022800
 8000af8:	40021c00 	.word	0x40021c00
 8000afc:	40021800 	.word	0x40021800
 8000b00:	40022400 	.word	0x40022400
 8000b04:	10120000 	.word	0x10120000
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40020400 	.word	0x40020400
 8000b10:	40020000 	.word	0x40020000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b1a:	a90b      	add	r1, sp, #44	; 0x2c
 8000b1c:	488e      	ldr	r0, [pc, #568]	; (8000d58 <MX_GPIO_Init+0x52c>)
 8000b1e:	f000 ffdd 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000b22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b26:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b28:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f5a9 6900 	sub.w	r9, r9, #2048	; 0x800
 8000b30:	a90b      	add	r1, sp, #44	; 0x2c
 8000b32:	4648      	mov	r0, r9
 8000b34:	f000 ffd2 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000b38:	2208      	movs	r2, #8
 8000b3a:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b42:	a90b      	add	r1, sp, #44	; 0x2c
 8000b44:	4885      	ldr	r0, [pc, #532]	; (8000d5c <MX_GPIO_Init+0x530>)
 8000b46:	f000 ffc9 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b4e:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b56:	220d      	movs	r2, #13
 8000b58:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	a90b      	add	r1, sp, #44	; 0x2c
 8000b5c:	4880      	ldr	r0, [pc, #512]	; (8000d60 <MX_GPIO_Init+0x534>)
 8000b5e:	f000 ffbd 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b62:	2210      	movs	r2, #16
 8000b64:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b66:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	a90b      	add	r1, sp, #44	; 0x2c
 8000b6c:	487d      	ldr	r0, [pc, #500]	; (8000d64 <MX_GPIO_Init+0x538>)
 8000b6e:	f000 ffb5 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000b72:	f248 0304 	movw	r3, #32772	; 0x8004
 8000b76:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b78:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b7c:	a90b      	add	r1, sp, #44	; 0x2c
 8000b7e:	487a      	ldr	r0, [pc, #488]	; (8000d68 <MX_GPIO_Init+0x53c>)
 8000b80:	f000 ffac 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000b84:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b8c:	2205      	movs	r2, #5
 8000b8e:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000b90:	a90b      	add	r1, sp, #44	; 0x2c
 8000b92:	4871      	ldr	r0, [pc, #452]	; (8000d58 <MX_GPIO_Init+0x52c>)
 8000b94:	f000 ffa2 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000b98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b9c:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	a90b      	add	r1, sp, #44	; 0x2c
 8000ba6:	4870      	ldr	r0, [pc, #448]	; (8000d68 <MX_GPIO_Init+0x53c>)
 8000ba8:	f000 ff98 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000bac:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000bb0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000bb8:	220d      	movs	r2, #13
 8000bba:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bbc:	a90b      	add	r1, sp, #44	; 0x2c
 8000bbe:	486a      	ldr	r0, [pc, #424]	; (8000d68 <MX_GPIO_Init+0x53c>)
 8000bc0:	f000 ff8c 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000bc4:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000bcc:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000bce:	a90b      	add	r1, sp, #44	; 0x2c
 8000bd0:	4861      	ldr	r0, [pc, #388]	; (8000d58 <MX_GPIO_Init+0x52c>)
 8000bd2:	f000 ff83 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000bd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bda:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000be2:	2207      	movs	r2, #7
 8000be4:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000be6:	a90b      	add	r1, sp, #44	; 0x2c
 8000be8:	4650      	mov	r0, sl
 8000bea:	f000 ff77 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bfa:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	a90b      	add	r1, sp, #44	; 0x2c
 8000bfe:	4650      	mov	r0, sl
 8000c00:	f000 ff6c 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000c04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c08:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c0a:	4b58      	ldr	r3, [pc, #352]	; (8000d6c <MX_GPIO_Init+0x540>)
 8000c0c:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000c10:	a90b      	add	r1, sp, #44	; 0x2c
 8000c12:	4851      	ldr	r0, [pc, #324]	; (8000d58 <MX_GPIO_Init+0x52c>)
 8000c14:	f000 ff62 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000c18:	23c0      	movs	r3, #192	; 0xc0
 8000c1a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c22:	2308      	movs	r3, #8
 8000c24:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c26:	a90b      	add	r1, sp, #44	; 0x2c
 8000c28:	4648      	mov	r0, r9
 8000c2a:	f000 ff57 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000c2e:	2310      	movs	r3, #16
 8000c30:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c38:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	a90b      	add	r1, sp, #44	; 0x2c
 8000c3e:	484a      	ldr	r0, [pc, #296]	; (8000d68 <MX_GPIO_Init+0x53c>)
 8000c40:	f000 ff4c 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000c44:	23c8      	movs	r3, #200	; 0xc8
 8000c46:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c4e:	a90b      	add	r1, sp, #44	; 0x2c
 8000c50:	4843      	ldr	r0, [pc, #268]	; (8000d60 <MX_GPIO_Init+0x534>)
 8000c52:	f000 ff43 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000c56:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000c5a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c5c:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c60:	a90b      	add	r1, sp, #44	; 0x2c
 8000c62:	4843      	ldr	r0, [pc, #268]	; (8000d70 <MX_GPIO_Init+0x544>)
 8000c64:	f000 ff3a 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000c68:	2305      	movs	r3, #5
 8000c6a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c72:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c76:	a90b      	add	r1, sp, #44	; 0x2c
 8000c78:	4648      	mov	r0, r9
 8000c7a:	f000 ff2f 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c7e:	2332      	movs	r3, #50	; 0x32
 8000c80:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c86:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c88:	230b      	movs	r3, #11
 8000c8a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8c:	a90b      	add	r1, sp, #44	; 0x2c
 8000c8e:	4648      	mov	r0, r9
 8000c90:	f000 ff24 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c94:	2304      	movs	r3, #4
 8000c96:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000c9e:	2309      	movs	r3, #9
 8000ca0:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca2:	a90b      	add	r1, sp, #44	; 0x2c
 8000ca4:	4658      	mov	r0, fp
 8000ca6:	f000 ff19 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000caa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000cae:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000cb6:	2309      	movs	r3, #9
 8000cb8:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cba:	a90b      	add	r1, sp, #44	; 0x2c
 8000cbc:	4829      	ldr	r0, [pc, #164]	; (8000d64 <MX_GPIO_Init+0x538>)
 8000cbe:	f000 ff0d 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc6:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000cca:	a90b      	add	r1, sp, #44	; 0x2c
 8000ccc:	4824      	ldr	r0, [pc, #144]	; (8000d60 <MX_GPIO_Init+0x534>)
 8000cce:	f000 ff05 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cd2:	2386      	movs	r3, #134	; 0x86
 8000cd4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cdc:	230b      	movs	r3, #11
 8000cde:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	a90b      	add	r1, sp, #44	; 0x2c
 8000ce2:	4650      	mov	r0, sl
 8000ce4:	f000 fefa 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000ce8:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cea:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000cee:	a90b      	add	r1, sp, #44	; 0x2c
 8000cf0:	4650      	mov	r0, sl
 8000cf2:	f000 fef3 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000cf6:	2350      	movs	r3, #80	; 0x50
 8000cf8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d00:	230d      	movs	r3, #13
 8000d02:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	a90b      	add	r1, sp, #44	; 0x2c
 8000d06:	4650      	mov	r0, sl
 8000d08:	f000 fee8 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000d0c:	2328      	movs	r3, #40	; 0x28
 8000d0e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d16:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	a90b      	add	r1, sp, #44	; 0x2c
 8000d1c:	4650      	mov	r0, sl
 8000d1e:	f000 fedd 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000d22:	2340      	movs	r3, #64	; 0x40
 8000d24:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000d2c:	2309      	movs	r3, #9
 8000d2e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000d30:	a90b      	add	r1, sp, #44	; 0x2c
 8000d32:	480d      	ldr	r0, [pc, #52]	; (8000d68 <MX_GPIO_Init+0x53c>)
 8000d34:	f000 fed2 	bl	8001adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000d38:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000d3c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d44:	2305      	movs	r3, #5
 8000d46:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d48:	a90b      	add	r1, sp, #44	; 0x2c
 8000d4a:	4658      	mov	r0, fp
 8000d4c:	f000 fec6 	bl	8001adc <HAL_GPIO_Init>
}
 8000d50:	b011      	add	sp, #68	; 0x44
 8000d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d56:	bf00      	nop
 8000d58:	40022000 	.word	0x40022000
 8000d5c:	40022800 	.word	0x40022800
 8000d60:	40021800 	.word	0x40021800
 8000d64:	40020c00 	.word	0x40020c00
 8000d68:	40021c00 	.word	0x40021c00
 8000d6c:	10120000 	.word	0x10120000
 8000d70:	40021400 	.word	0x40021400

08000d74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d76:	6802      	ldr	r2, [r0, #0]
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d000      	beq.n	8000d80 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d7e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000d80:	f000 fcb8 	bl	80016f4 <HAL_IncTick>
}
 8000d84:	e7fb      	b.n	8000d7e <HAL_TIM_PeriodElapsedCallback+0xa>
 8000d86:	bf00      	nop
 8000d88:	40001000 	.word	0x40001000

08000d8c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <Error_Handler+0x2>

08000d90 <MX_DMA2D_Init>:
{
 8000d90:	b508      	push	{r3, lr}
  hdma2d.Instance = DMA2D;
 8000d92:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <MX_DMA2D_Init+0x34>)
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_DMA2D_Init+0x38>)
 8000d96:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	6082      	str	r2, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8000da0:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000da2:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000da4:	62c2      	str	r2, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000da6:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000da8:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000daa:	f000 fd67 	bl	800187c <HAL_DMA2D_Init>
 8000dae:	b928      	cbnz	r0, 8000dbc <MX_DMA2D_Init+0x2c>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000db0:	2101      	movs	r1, #1
 8000db2:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <MX_DMA2D_Init+0x34>)
 8000db4:	f000 fe30 	bl	8001a18 <HAL_DMA2D_ConfigLayer>
 8000db8:	b910      	cbnz	r0, 8000dc0 <MX_DMA2D_Init+0x30>
}
 8000dba:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000dbc:	f7ff ffe6 	bl	8000d8c <Error_Handler>
    Error_Handler();
 8000dc0:	f7ff ffe4 	bl	8000d8c <Error_Handler>
 8000dc4:	2003fdf4 	.word	0x2003fdf4
 8000dc8:	4002b000 	.word	0x4002b000

08000dcc <MX_FMC_Init>:
{
 8000dcc:	b500      	push	{lr}
 8000dce:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000dd0:	4814      	ldr	r0, [pc, #80]	; (8000e24 <MX_FMC_Init+0x58>)
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <MX_FMC_Init+0x5c>)
 8000dd4:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000dda:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000ddc:	2104      	movs	r1, #4
 8000dde:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000de0:	2210      	movs	r2, #16
 8000de2:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000de4:	2240      	movs	r2, #64	; 0x40
 8000de6:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000de8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000dec:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000dee:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000df4:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000df6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dfa:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000dfc:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000e02:	2206      	movs	r2, #6
 8000e04:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000e06:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
 8000e08:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8000e0a:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 2;
 8000e0c:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8000e0e:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e10:	4469      	add	r1, sp
 8000e12:	f002 fe5b 	bl	8003acc <HAL_SDRAM_Init>
 8000e16:	b910      	cbnz	r0, 8000e1e <MX_FMC_Init+0x52>
}
 8000e18:	b009      	add	sp, #36	; 0x24
 8000e1a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8000e1e:	f7ff ffb5 	bl	8000d8c <Error_Handler>
 8000e22:	bf00      	nop
 8000e24:	2003fe34 	.word	0x2003fe34
 8000e28:	a0000140 	.word	0xa0000140

08000e2c <MX_I2C3_Init>:
{
 8000e2c:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 8000e2e:	4811      	ldr	r0, [pc, #68]	; (8000e74 <MX_I2C3_Init+0x48>)
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_I2C3_Init+0x4c>)
 8000e32:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_I2C3_Init+0x50>)
 8000e36:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 224;
 8000e38:	23e0      	movs	r3, #224	; 0xe0
 8000e3a:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000e44:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e46:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e48:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e4a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e4c:	f000 ff3c 	bl	8001cc8 <HAL_I2C_Init>
 8000e50:	b950      	cbnz	r0, 8000e68 <MX_I2C3_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e52:	2100      	movs	r1, #0
 8000e54:	4807      	ldr	r0, [pc, #28]	; (8000e74 <MX_I2C3_Init+0x48>)
 8000e56:	f000 ff95 	bl	8001d84 <HAL_I2CEx_ConfigAnalogFilter>
 8000e5a:	b938      	cbnz	r0, 8000e6c <MX_I2C3_Init+0x40>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_I2C3_Init+0x48>)
 8000e60:	f000 ffbe 	bl	8001de0 <HAL_I2CEx_ConfigDigitalFilter>
 8000e64:	b920      	cbnz	r0, 8000e70 <MX_I2C3_Init+0x44>
}
 8000e66:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000e68:	f7ff ff90 	bl	8000d8c <Error_Handler>
    Error_Handler();
 8000e6c:	f7ff ff8e 	bl	8000d8c <Error_Handler>
    Error_Handler();
 8000e70:	f7ff ff8c 	bl	8000d8c <Error_Handler>
 8000e74:	2003fc5c 	.word	0x2003fc5c
 8000e78:	40005c00 	.word	0x40005c00
 8000e7c:	00c0eaff 	.word	0x00c0eaff

08000e80 <MX_LTDC_Init>:
{
 8000e80:	b500      	push	{lr}
 8000e82:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e84:	2234      	movs	r2, #52	; 0x34
 8000e86:	2100      	movs	r1, #0
 8000e88:	a801      	add	r0, sp, #4
 8000e8a:	f003 fbaf 	bl	80045ec <memset>
  hltdc.Instance = LTDC;
 8000e8e:	4826      	ldr	r0, [pc, #152]	; (8000f28 <MX_LTDC_Init+0xa8>)
 8000e90:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <MX_LTDC_Init+0xac>)
 8000e92:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000e98:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000e9a:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000e9c:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 40;
 8000e9e:	2228      	movs	r2, #40	; 0x28
 8000ea0:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 9;
 8000ea2:	2209      	movs	r2, #9
 8000ea4:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000ea6:	2235      	movs	r2, #53	; 0x35
 8000ea8:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000eaa:	220b      	movs	r2, #11
 8000eac:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000eae:	f240 2215 	movw	r2, #533	; 0x215
 8000eb2:	6242      	str	r2, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000eb4:	f240 121b 	movw	r2, #283	; 0x11b
 8000eb8:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000eba:	f240 2235 	movw	r2, #565	; 0x235
 8000ebe:	62c2      	str	r2, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000ec0:	f240 121d 	movw	r2, #285	; 0x11d
 8000ec4:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ec6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000eca:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ece:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ed2:	f001 f887 	bl	8001fe4 <HAL_LTDC_Init>
 8000ed6:	bb18      	cbnz	r0, 8000f20 <MX_LTDC_Init+0xa0>
  pLayerCfg.WindowX0 = 0;
 8000ed8:	2200      	movs	r2, #0
 8000eda:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 8000edc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000ee0:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8000ee2:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 8000ee4:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000ee8:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000eea:	2002      	movs	r0, #2
 8000eec:	9005      	str	r0, [sp, #20]
  pLayerCfg.Alpha = 255;
 8000eee:	20ff      	movs	r0, #255	; 0xff
 8000ef0:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 8000ef2:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000ef4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ef8:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000efa:	2005      	movs	r0, #5
 8000efc:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8000efe:	920a      	str	r2, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000f00:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000f02:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000f04:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000f08:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000f0c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f10:	a901      	add	r1, sp, #4
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_LTDC_Init+0xa8>)
 8000f14:	f001 f950 	bl	80021b8 <HAL_LTDC_ConfigLayer>
 8000f18:	b920      	cbnz	r0, 8000f24 <MX_LTDC_Init+0xa4>
}
 8000f1a:	b00f      	add	sp, #60	; 0x3c
 8000f1c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f20:	f7ff ff34 	bl	8000d8c <Error_Handler>
    Error_Handler();
 8000f24:	f7ff ff32 	bl	8000d8c <Error_Handler>
 8000f28:	2003fd2c 	.word	0x2003fd2c
 8000f2c:	40016800 	.word	0x40016800

08000f30 <MX_RTC_Init>:
{
 8000f30:	b510      	push	{r4, lr}
 8000f32:	b092      	sub	sp, #72	; 0x48
  RTC_TimeTypeDef sTime = {0};
 8000f34:	2400      	movs	r4, #0
 8000f36:	940c      	str	r4, [sp, #48]	; 0x30
 8000f38:	940d      	str	r4, [sp, #52]	; 0x34
 8000f3a:	940e      	str	r4, [sp, #56]	; 0x38
 8000f3c:	940f      	str	r4, [sp, #60]	; 0x3c
 8000f3e:	9410      	str	r4, [sp, #64]	; 0x40
 8000f40:	9411      	str	r4, [sp, #68]	; 0x44
  RTC_DateTypeDef sDate = {0};
 8000f42:	940b      	str	r4, [sp, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000f44:	222c      	movs	r2, #44	; 0x2c
 8000f46:	4621      	mov	r1, r4
 8000f48:	4668      	mov	r0, sp
 8000f4a:	f003 fb4f 	bl	80045ec <memset>
  hrtc.Instance = RTC;
 8000f4e:	4831      	ldr	r0, [pc, #196]	; (8001014 <MX_RTC_Init+0xe4>)
 8000f50:	4b31      	ldr	r3, [pc, #196]	; (8001018 <MX_RTC_Init+0xe8>)
 8000f52:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f54:	6044      	str	r4, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f56:	237f      	movs	r3, #127	; 0x7f
 8000f58:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f5a:	23ff      	movs	r3, #255	; 0xff
 8000f5c:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f5e:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f60:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f62:	6184      	str	r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f64:	f002 f81e 	bl	8002fa4 <HAL_RTC_Init>
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	d147      	bne.n	8000ffc <MX_RTC_Init+0xcc>
  sTime.Hours = 0x0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000f72:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000f76:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f7a:	9310      	str	r3, [sp, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f7c:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	a90c      	add	r1, sp, #48	; 0x30
 8000f82:	4824      	ldr	r0, [pc, #144]	; (8001014 <MX_RTC_Init+0xe4>)
 8000f84:	f002 f87c 	bl	8003080 <HAL_RTC_SetTime>
 8000f88:	2800      	cmp	r0, #0
 8000f8a:	d139      	bne.n	8001000 <MX_RTC_Init+0xd0>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000f92:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  sDate.Date = 0x1;
 8000f96:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
  sDate.Year = 0x0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000fa0:	a90b      	add	r1, sp, #44	; 0x2c
 8000fa2:	481c      	ldr	r0, [pc, #112]	; (8001014 <MX_RTC_Init+0xe4>)
 8000fa4:	f002 f8ec 	bl	8003180 <HAL_RTC_SetDate>
 8000fa8:	bb60      	cbnz	r0, 8001004 <MX_RTC_Init+0xd4>
  sAlarm.AlarmTime.Hours = 0x0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f88d 3000 	strb.w	r3, [sp]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000fb0:	f88d 3001 	strb.w	r3, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000fb4:	f88d 3002 	strb.w	r3, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000fb8:	9301      	str	r3, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fba:	9304      	str	r3, [sp, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fbc:	9305      	str	r3, [sp, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000fbe:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000fc0:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000fc2:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000fca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fce:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000fd0:	4669      	mov	r1, sp
 8000fd2:	4810      	ldr	r0, [pc, #64]	; (8001014 <MX_RTC_Init+0xe4>)
 8000fd4:	f002 f942 	bl	800325c <HAL_RTC_SetAlarm>
 8000fd8:	b9b0      	cbnz	r0, 8001008 <MX_RTC_Init+0xd8>
  sAlarm.Alarm = RTC_ALARM_B;
 8000fda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fde:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4669      	mov	r1, sp
 8000fe4:	480b      	ldr	r0, [pc, #44]	; (8001014 <MX_RTC_Init+0xe4>)
 8000fe6:	f002 f939 	bl	800325c <HAL_RTC_SetAlarm>
 8000fea:	b978      	cbnz	r0, 800100c <MX_RTC_Init+0xdc>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000fec:	2202      	movs	r2, #2
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4808      	ldr	r0, [pc, #32]	; (8001014 <MX_RTC_Init+0xe4>)
 8000ff2:	f002 f9e3 	bl	80033bc <HAL_RTCEx_SetTimeStamp>
 8000ff6:	b958      	cbnz	r0, 8001010 <MX_RTC_Init+0xe0>
}
 8000ff8:	b012      	add	sp, #72	; 0x48
 8000ffa:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000ffc:	f7ff fec6 	bl	8000d8c <Error_Handler>
    Error_Handler();
 8001000:	f7ff fec4 	bl	8000d8c <Error_Handler>
    Error_Handler();
 8001004:	f7ff fec2 	bl	8000d8c <Error_Handler>
    Error_Handler();
 8001008:	f7ff fec0 	bl	8000d8c <Error_Handler>
    Error_Handler();
 800100c:	f7ff febe 	bl	8000d8c <Error_Handler>
    Error_Handler();
 8001010:	f7ff febc 	bl	8000d8c <Error_Handler>
 8001014:	2003fdd4 	.word	0x2003fdd4
 8001018:	40002800 	.word	0x40002800

0800101c <MX_SDMMC1_SD_Init>:
{
 800101c:	b508      	push	{r3, lr}
  hsd1.Instance = SDMMC1;
 800101e:	480c      	ldr	r0, [pc, #48]	; (8001050 <MX_SDMMC1_SD_Init+0x34>)
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_SDMMC1_SD_Init+0x38>)
 8001022:	6003      	str	r3, [r0, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001024:	2300      	movs	r3, #0
 8001026:	6043      	str	r3, [r0, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001028:	6083      	str	r3, [r0, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800102a:	60c3      	str	r3, [r0, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800102c:	6103      	str	r3, [r0, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800102e:	6143      	str	r3, [r0, #20]
  hsd1.Init.ClockDiv = 5;
 8001030:	2305      	movs	r3, #5
 8001032:	6183      	str	r3, [r0, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001034:	f002 fcce 	bl	80039d4 <HAL_SD_Init>
 8001038:	b930      	cbnz	r0, 8001048 <MX_SDMMC1_SD_Init+0x2c>
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800103a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <MX_SDMMC1_SD_Init+0x34>)
 8001040:	f002 fce4 	bl	8003a0c <HAL_SD_ConfigWideBusOperation>
 8001044:	b910      	cbnz	r0, 800104c <MX_SDMMC1_SD_Init+0x30>
}
 8001046:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001048:	f7ff fea0 	bl	8000d8c <Error_Handler>
    Error_Handler();
 800104c:	f7ff fe9e 	bl	8000d8c <Error_Handler>
 8001050:	2003fca8 	.word	0x2003fca8
 8001054:	40012c00 	.word	0x40012c00

08001058 <SystemClock_Config>:
{
 8001058:	b500      	push	{lr}
 800105a:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105c:	2230      	movs	r2, #48	; 0x30
 800105e:	2100      	movs	r1, #0
 8001060:	a828      	add	r0, sp, #160	; 0xa0
 8001062:	f003 fac3 	bl	80045ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001066:	2100      	movs	r1, #0
 8001068:	9123      	str	r1, [sp, #140]	; 0x8c
 800106a:	9124      	str	r1, [sp, #144]	; 0x90
 800106c:	9125      	str	r1, [sp, #148]	; 0x94
 800106e:	9126      	str	r1, [sp, #152]	; 0x98
 8001070:	9127      	str	r1, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001072:	2284      	movs	r2, #132	; 0x84
 8001074:	a802      	add	r0, sp, #8
 8001076:	f003 fab9 	bl	80045ec <memset>
  HAL_PWR_EnableBkUpAccess();
 800107a:	f001 f8ed 	bl	8002258 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	4b33      	ldr	r3, [pc, #204]	; (800114c <SystemClock_Config+0xf4>)
 8001080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001082:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001086:	641a      	str	r2, [r3, #64]	; 0x40
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001092:	4b2f      	ldr	r3, [pc, #188]	; (8001150 <SystemClock_Config+0xf8>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010a2:	9301      	str	r3, [sp, #4]
 80010a4:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80010a6:	2309      	movs	r3, #9
 80010a8:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ae:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010b0:	2301      	movs	r3, #1
 80010b2:	932d      	str	r3, [sp, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b4:	2302      	movs	r3, #2
 80010b6:	932e      	str	r3, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80010bc:	922f      	str	r2, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010be:	2219      	movs	r2, #25
 80010c0:	9230      	str	r2, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80010c2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80010c6:	9231      	str	r2, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c8:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80010ca:	2308      	movs	r3, #8
 80010cc:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ce:	a828      	add	r0, sp, #160	; 0xa0
 80010d0:	f001 f908 	bl	80022e4 <HAL_RCC_OscConfig>
 80010d4:	2800      	cmp	r0, #0
 80010d6:	d131      	bne.n	800113c <SystemClock_Config+0xe4>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010d8:	f001 f8c6 	bl	8002268 <HAL_PWREx_EnableOverDrive>
 80010dc:	2800      	cmp	r0, #0
 80010de:	d12f      	bne.n	8001140 <SystemClock_Config+0xe8>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e0:	230f      	movs	r3, #15
 80010e2:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e4:	2302      	movs	r3, #2
 80010e6:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010f0:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f6:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80010f8:	2106      	movs	r1, #6
 80010fa:	a823      	add	r0, sp, #140	; 0x8c
 80010fc:	f001 fb5c 	bl	80027b8 <HAL_RCC_ClockConfig>
 8001100:	bb00      	cbnz	r0, 8001144 <SystemClock_Config+0xec>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <SystemClock_Config+0xfc>)
 8001104:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8001106:	2364      	movs	r3, #100	; 0x64
 8001108:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800110a:	2302      	movs	r3, #2
 800110c:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800110e:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001110:	2300      	movs	r3, #0
 8001112:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001114:	2201      	movs	r2, #1
 8001116:	920c      	str	r2, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001118:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800111c:	920d      	str	r2, [sp, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800111e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001122:	920e      	str	r2, [sp, #56]	; 0x38
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001124:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001126:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800112a:	9221      	str	r2, [sp, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800112c:	9322      	str	r3, [sp, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800112e:	a802      	add	r0, sp, #8
 8001130:	f001 fc2c 	bl	800298c <HAL_RCCEx_PeriphCLKConfig>
 8001134:	b940      	cbnz	r0, 8001148 <SystemClock_Config+0xf0>
}
 8001136:	b035      	add	sp, #212	; 0xd4
 8001138:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800113c:	f7ff fe26 	bl	8000d8c <Error_Handler>
    Error_Handler();
 8001140:	f7ff fe24 	bl	8000d8c <Error_Handler>
    Error_Handler();
 8001144:	f7ff fe22 	bl	8000d8c <Error_Handler>
    Error_Handler();
 8001148:	f7ff fe20 	bl	8000d8c <Error_Handler>
 800114c:	40023800 	.word	0x40023800
 8001150:	40007000 	.word	0x40007000
 8001154:	00a10028 	.word	0x00a10028

08001158 <main>:
{
 8001158:	b508      	push	{r3, lr}
  MPU_Config();
 800115a:	f7ff fb3b 	bl	80007d4 <MPU_Config>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800115e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001162:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001166:	4b27      	ldr	r3, [pc, #156]	; (8001204 <main+0xac>)
 8001168:	2100      	movs	r1, #0
 800116a:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800116e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001172:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001176:	695a      	ldr	r2, [r3, #20]
 8001178:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800117c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800117e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001182:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001186:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800118a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800118e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001192:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001196:	e000      	b.n	800119a <main+0x42>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8001198:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800119a:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800119e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80011a2:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 80011a6:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80011aa:	4916      	ldr	r1, [pc, #88]	; (8001204 <main+0xac>)
 80011ac:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80011b0:	4613      	mov	r3, r2
 80011b2:	3a01      	subs	r2, #1
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1f2      	bne.n	800119e <main+0x46>
    } while(sets-- != 0U);
 80011b8:	1e43      	subs	r3, r0, #1
 80011ba:	2800      	cmp	r0, #0
 80011bc:	d1ec      	bne.n	8001198 <main+0x40>
 80011be:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80011c2:	694b      	ldr	r3, [r1, #20]
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c8:	614b      	str	r3, [r1, #20]
 80011ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011ce:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80011d2:	f000 fa7d 	bl	80016d0 <HAL_Init>
  SystemClock_Config();
 80011d6:	f7ff ff3f 	bl	8001058 <SystemClock_Config>
  HAL_Delay(500);
 80011da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011de:	f000 fa9b 	bl	8001718 <HAL_Delay>
  MX_GPIO_Init();
 80011e2:	f7ff fb23 	bl	800082c <MX_GPIO_Init>
  MX_DMA2D_Init();
 80011e6:	f7ff fdd3 	bl	8000d90 <MX_DMA2D_Init>
  MX_FMC_Init();
 80011ea:	f7ff fdef 	bl	8000dcc <MX_FMC_Init>
  MX_I2C3_Init();
 80011ee:	f7ff fe1d 	bl	8000e2c <MX_I2C3_Init>
  MX_LTDC_Init();
 80011f2:	f7ff fe45 	bl	8000e80 <MX_LTDC_Init>
  MX_RTC_Init();
 80011f6:	f7ff fe9b 	bl	8000f30 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 80011fa:	f7ff ff0f 	bl	800101c <MX_SDMMC1_SD_Init>
	  MainFunc ();
 80011fe:	f7ff fa7d 	bl	80006fc <MainFunc>
  while (1)
 8001202:	e7fc      	b.n	80011fe <main+0xa6>
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <HAL_FMC_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
 8001208:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <HAL_FMC_MspInit+0xb4>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	b103      	cbz	r3, 8001210 <HAL_FMC_MspInit+0x8>
 800120e:	4770      	bx	lr
static void HAL_FMC_MspInit(void){
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	b087      	sub	sp, #28
    return;
  }
  FMC_Initialized = 1;
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <HAL_FMC_MspInit+0xb4>)
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800121a:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <HAL_FMC_MspInit+0xb8>)
 800121c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800121e:	f042 0201 	orr.w	r2, r2, #1
 8001222:	639a      	str	r2, [r3, #56]	; 0x38
 8001224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	9b00      	ldr	r3, [sp, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800122e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001232:	9301      	str	r3, [sp, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2702      	movs	r7, #2
 8001236:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2600      	movs	r6, #0
 800123a:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2503      	movs	r5, #3
 800123e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001240:	240c      	movs	r4, #12
 8001242:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001244:	a901      	add	r1, sp, #4
 8001246:	481f      	ldr	r0, [pc, #124]	; (80012c4 <HAL_FMC_MspInit+0xbc>)
 8001248:	f000 fc48 	bl	8001adc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800124c:	f248 1333 	movw	r3, #33075	; 0x8133
 8001250:	9301      	str	r3, [sp, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001256:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001258:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800125a:	a901      	add	r1, sp, #4
 800125c:	481a      	ldr	r0, [pc, #104]	; (80012c8 <HAL_FMC_MspInit+0xc0>)
 800125e:	f000 fc3d 	bl	8001adc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001262:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001266:	9301      	str	r3, [sp, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800126e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001270:	a901      	add	r1, sp, #4
 8001272:	4816      	ldr	r0, [pc, #88]	; (80012cc <HAL_FMC_MspInit+0xc4>)
 8001274:	f000 fc32 	bl	8001adc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001278:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800127c:	9301      	str	r3, [sp, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001284:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001286:	a901      	add	r1, sp, #4
 8001288:	4811      	ldr	r0, [pc, #68]	; (80012d0 <HAL_FMC_MspInit+0xc8>)
 800128a:	f000 fc27 	bl	8001adc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800128e:	2328      	movs	r3, #40	; 0x28
 8001290:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001298:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800129a:	a901      	add	r1, sp, #4
 800129c:	480d      	ldr	r0, [pc, #52]	; (80012d4 <HAL_FMC_MspInit+0xcc>)
 800129e:	f000 fc1d 	bl	8001adc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80012a2:	2308      	movs	r3, #8
 80012a4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012ac:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80012ae:	a901      	add	r1, sp, #4
 80012b0:	4809      	ldr	r0, [pc, #36]	; (80012d8 <HAL_FMC_MspInit+0xd0>)
 80012b2:	f000 fc13 	bl	8001adc <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80012b6:	b007      	add	sp, #28
 80012b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000048 	.word	0x20000048
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40021800 	.word	0x40021800
 80012cc:	40020c00 	.word	0x40020c00
 80012d0:	40021400 	.word	0x40021400
 80012d4:	40021c00 	.word	0x40021c00
 80012d8:	40020800 	.word	0x40020800

080012dc <HAL_MspInit>:
{
 80012dc:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <HAL_MspInit+0x2c>)
 80012e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012e6:	641a      	str	r2, [r3, #64]	; 0x40
 80012e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ea:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80012ee:	9200      	str	r2, [sp, #0]
 80012f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012f8:	645a      	str	r2, [r3, #68]	; 0x44
 80012fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	9b01      	ldr	r3, [sp, #4]
}
 8001304:	b002      	add	sp, #8
 8001306:	4770      	bx	lr
 8001308:	40023800 	.word	0x40023800

0800130c <HAL_DMA2D_MspInit>:
  if(hdma2d->Instance==DMA2D)
 800130c:	6802      	ldr	r2, [r0, #0]
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <HAL_DMA2D_MspInit+0x3c>)
 8001310:	429a      	cmp	r2, r3
 8001312:	d000      	beq.n	8001316 <HAL_DMA2D_MspInit+0xa>
 8001314:	4770      	bx	lr
{
 8001316:	b500      	push	{lr}
 8001318:	b083      	sub	sp, #12
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800131a:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 800131e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001320:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001324:	631a      	str	r2, [r3, #48]	; 0x30
 8001326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001328:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	4611      	mov	r1, r2
 8001334:	205a      	movs	r0, #90	; 0x5a
 8001336:	f000 fa15 	bl	8001764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800133a:	205a      	movs	r0, #90	; 0x5a
 800133c:	f000 fa44 	bl	80017c8 <HAL_NVIC_EnableIRQ>
}
 8001340:	b003      	add	sp, #12
 8001342:	f85d fb04 	ldr.w	pc, [sp], #4
 8001346:	bf00      	nop
 8001348:	4002b000 	.word	0x4002b000

0800134c <HAL_I2C_MspInit>:
{
 800134c:	b510      	push	{r4, lr}
 800134e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	2300      	movs	r3, #0
 8001352:	9303      	str	r3, [sp, #12]
 8001354:	9304      	str	r3, [sp, #16]
 8001356:	9305      	str	r3, [sp, #20]
 8001358:	9306      	str	r3, [sp, #24]
 800135a:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C3)
 800135c:	6802      	ldr	r2, [r0, #0]
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <HAL_I2C_MspInit+0x64>)
 8001360:	429a      	cmp	r2, r3
 8001362:	d001      	beq.n	8001368 <HAL_I2C_MspInit+0x1c>
}
 8001364:	b008      	add	sp, #32
 8001366:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001368:	4c12      	ldr	r4, [pc, #72]	; (80013b4 <HAL_I2C_MspInit+0x68>)
 800136a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800136c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001370:	6323      	str	r3, [r4, #48]	; 0x30
 8001372:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800137c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001380:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001382:	2312      	movs	r3, #18
 8001384:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001386:	2301      	movs	r3, #1
 8001388:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800138e:	2304      	movs	r3, #4
 8001390:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001392:	a903      	add	r1, sp, #12
 8001394:	4808      	ldr	r0, [pc, #32]	; (80013b8 <HAL_I2C_MspInit+0x6c>)
 8001396:	f000 fba1 	bl	8001adc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800139a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800139c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013a0:	6423      	str	r3, [r4, #64]	; 0x40
 80013a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013a8:	9302      	str	r3, [sp, #8]
 80013aa:	9b02      	ldr	r3, [sp, #8]
}
 80013ac:	e7da      	b.n	8001364 <HAL_I2C_MspInit+0x18>
 80013ae:	bf00      	nop
 80013b0:	40005c00 	.word	0x40005c00
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40021c00 	.word	0x40021c00

080013bc <HAL_LTDC_MspInit>:
{
 80013bc:	b570      	push	{r4, r5, r6, lr}
 80013be:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	2300      	movs	r3, #0
 80013c2:	9307      	str	r3, [sp, #28]
 80013c4:	9308      	str	r3, [sp, #32]
 80013c6:	9309      	str	r3, [sp, #36]	; 0x24
 80013c8:	930a      	str	r3, [sp, #40]	; 0x28
 80013ca:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hltdc->Instance==LTDC)
 80013cc:	6802      	ldr	r2, [r0, #0]
 80013ce:	4b3f      	ldr	r3, [pc, #252]	; (80014cc <HAL_LTDC_MspInit+0x110>)
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d001      	beq.n	80013d8 <HAL_LTDC_MspInit+0x1c>
}
 80013d4:	b00c      	add	sp, #48	; 0x30
 80013d6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 80013d8:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 80013dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80013e2:	645a      	str	r2, [r3, #68]	; 0x44
 80013e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013e6:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80013ea:	9201      	str	r2, [sp, #4]
 80013ec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f0:	f042 0210 	orr.w	r2, r2, #16
 80013f4:	631a      	str	r2, [r3, #48]	; 0x30
 80013f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f8:	f002 0210 	and.w	r2, r2, #16
 80013fc:	9202      	str	r2, [sp, #8]
 80013fe:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001406:	631a      	str	r2, [r3, #48]	; 0x30
 8001408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800140a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800140e:	9203      	str	r2, [sp, #12]
 8001410:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001414:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001418:	631a      	str	r2, [r3, #48]	; 0x30
 800141a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800141c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001420:	9204      	str	r2, [sp, #16]
 8001422:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001426:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800142a:	631a      	str	r2, [r3, #48]	; 0x30
 800142c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800142e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001432:	9205      	str	r2, [sp, #20]
 8001434:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800143c:	631a      	str	r2, [r3, #48]	; 0x30
 800143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001444:	9306      	str	r3, [sp, #24]
 8001446:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001448:	2310      	movs	r3, #16
 800144a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2502      	movs	r5, #2
 800144e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2400      	movs	r4, #0
 8001452:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001456:	260e      	movs	r6, #14
 8001458:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800145a:	a907      	add	r1, sp, #28
 800145c:	481c      	ldr	r0, [pc, #112]	; (80014d0 <HAL_LTDC_MspInit+0x114>)
 800145e:	f000 fb3d 	bl	8001adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001462:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001466:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800146e:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001470:	a907      	add	r1, sp, #28
 8001472:	4818      	ldr	r0, [pc, #96]	; (80014d4 <HAL_LTDC_MspInit+0x118>)
 8001474:	f000 fb32 	bl	8001adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001478:	23f7      	movs	r3, #247	; 0xf7
 800147a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001482:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001484:	a907      	add	r1, sp, #28
 8001486:	4814      	ldr	r0, [pc, #80]	; (80014d8 <HAL_LTDC_MspInit+0x11c>)
 8001488:	f000 fb28 	bl	8001adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800148c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001490:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001498:	2309      	movs	r3, #9
 800149a:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800149c:	a907      	add	r1, sp, #28
 800149e:	480f      	ldr	r0, [pc, #60]	; (80014dc <HAL_LTDC_MspInit+0x120>)
 80014a0:	f000 fb1c 	bl	8001adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80014a4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80014a8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014b0:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014b2:	a907      	add	r1, sp, #28
 80014b4:	480a      	ldr	r0, [pc, #40]	; (80014e0 <HAL_LTDC_MspInit+0x124>)
 80014b6:	f000 fb11 	bl	8001adc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80014ba:	4622      	mov	r2, r4
 80014bc:	4621      	mov	r1, r4
 80014be:	2058      	movs	r0, #88	; 0x58
 80014c0:	f000 f950 	bl	8001764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80014c4:	2058      	movs	r0, #88	; 0x58
 80014c6:	f000 f97f 	bl	80017c8 <HAL_NVIC_EnableIRQ>
}
 80014ca:	e783      	b.n	80013d4 <HAL_LTDC_MspInit+0x18>
 80014cc:	40016800 	.word	0x40016800
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40022400 	.word	0x40022400
 80014d8:	40022800 	.word	0x40022800
 80014dc:	40021800 	.word	0x40021800
 80014e0:	40022000 	.word	0x40022000

080014e4 <HAL_RTC_MspInit>:
  if(hrtc->Instance==RTC)
 80014e4:	6802      	ldr	r2, [r0, #0]
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <HAL_RTC_MspInit+0x18>)
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d000      	beq.n	80014ee <HAL_RTC_MspInit+0xa>
}
 80014ec:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 80014ee:	4a04      	ldr	r2, [pc, #16]	; (8001500 <HAL_RTC_MspInit+0x1c>)
 80014f0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80014f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014f6:	6713      	str	r3, [r2, #112]	; 0x70
}
 80014f8:	e7f8      	b.n	80014ec <HAL_RTC_MspInit+0x8>
 80014fa:	bf00      	nop
 80014fc:	40002800 	.word	0x40002800
 8001500:	40023800 	.word	0x40023800

08001504 <HAL_SD_MspInit>:
{
 8001504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001506:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	2300      	movs	r3, #0
 800150a:	9303      	str	r3, [sp, #12]
 800150c:	9304      	str	r3, [sp, #16]
 800150e:	9305      	str	r3, [sp, #20]
 8001510:	9306      	str	r3, [sp, #24]
 8001512:	9307      	str	r3, [sp, #28]
  if(hsd->Instance==SDMMC1)
 8001514:	6802      	ldr	r2, [r0, #0]
 8001516:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <HAL_SD_MspInit+0x90>)
 8001518:	429a      	cmp	r2, r3
 800151a:	d001      	beq.n	8001520 <HAL_SD_MspInit+0x1c>
}
 800151c:	b009      	add	sp, #36	; 0x24
 800151e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001520:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8001524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800152a:	645a      	str	r2, [r3, #68]	; 0x44
 800152c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800152e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001532:	9200      	str	r2, [sp, #0]
 8001534:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001538:	f042 0204 	orr.w	r2, r2, #4
 800153c:	631a      	str	r2, [r3, #48]	; 0x30
 800153e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001540:	f002 0204 	and.w	r2, r2, #4
 8001544:	9201      	str	r2, [sp, #4]
 8001546:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800154a:	f042 0208 	orr.w	r2, r2, #8
 800154e:	631a      	str	r2, [r3, #48]	; 0x30
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800155a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800155e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2702      	movs	r7, #2
 8001562:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2600      	movs	r6, #0
 8001566:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	2503      	movs	r5, #3
 800156a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800156c:	240c      	movs	r4, #12
 800156e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001570:	eb0d 0104 	add.w	r1, sp, r4
 8001574:	4808      	ldr	r0, [pc, #32]	; (8001598 <HAL_SD_MspInit+0x94>)
 8001576:	f000 fab1 	bl	8001adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800157a:	2304      	movs	r3, #4
 800157c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001584:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001586:	eb0d 0104 	add.w	r1, sp, r4
 800158a:	4804      	ldr	r0, [pc, #16]	; (800159c <HAL_SD_MspInit+0x98>)
 800158c:	f000 faa6 	bl	8001adc <HAL_GPIO_Init>
}
 8001590:	e7c4      	b.n	800151c <HAL_SD_MspInit+0x18>
 8001592:	bf00      	nop
 8001594:	40012c00 	.word	0x40012c00
 8001598:	40020800 	.word	0x40020800
 800159c:	40020c00 	.word	0x40020c00

080015a0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80015a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80015a2:	f7ff fe31 	bl	8001208 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80015a6:	bd08      	pop	{r3, pc}

080015a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a8:	b500      	push	{lr}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2036      	movs	r0, #54	; 0x36
 80015b2:	f000 f8d7 	bl	8001764 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015b6:	2036      	movs	r0, #54	; 0x36
 80015b8:	f000 f906 	bl	80017c8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_InitTick+0x6c>)
 80015be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015c0:	f042 0210 	orr.w	r2, r2, #16
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015d0:	a902      	add	r1, sp, #8
 80015d2:	a803      	add	r0, sp, #12
 80015d4:	f001 f9bc 	bl	8002950 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80015d8:	f001 f9aa 	bl	8002930 <HAL_RCC_GetPCLK1Freq>
 80015dc:	0043      	lsls	r3, r0, #1
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015de:	480e      	ldr	r0, [pc, #56]	; (8001618 <HAL_InitTick+0x70>)
 80015e0:	fba0 2303 	umull	r2, r3, r0, r3
 80015e4:	0c9b      	lsrs	r3, r3, #18
 80015e6:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <HAL_InitTick+0x74>)
 80015ea:	4a0d      	ldr	r2, [pc, #52]	; (8001620 <HAL_InitTick+0x78>)
 80015ec:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015f2:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015f4:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fa:	6083      	str	r3, [r0, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015fc:	f002 fc28 	bl	8003e50 <HAL_TIM_Base_Init>
 8001600:	b118      	cbz	r0, 800160a <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
 8001602:	2001      	movs	r0, #1
}
 8001604:	b009      	add	sp, #36	; 0x24
 8001606:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim6);
 800160a:	4804      	ldr	r0, [pc, #16]	; (800161c <HAL_InitTick+0x74>)
 800160c:	f002 fa80 	bl	8003b10 <HAL_TIM_Base_Start_IT>
 8001610:	e7f8      	b.n	8001604 <HAL_InitTick+0x5c>
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800
 8001618:	431bde83 	.word	0x431bde83
 800161c:	2003fe68 	.word	0x2003fe68
 8001620:	40001000 	.word	0x40001000

08001624 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <NMI_Handler>

08001626 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <HardFault_Handler>

08001628 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <MemManage_Handler>

0800162a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <BusFault_Handler>

0800162c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <UsageFault_Handler>

0800162e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800162e:	4770      	bx	lr

08001630 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001630:	4770      	bx	lr

08001632 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001632:	4770      	bx	lr

08001634 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001634:	4770      	bx	lr
	...

08001638 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001638:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800163a:	4802      	ldr	r0, [pc, #8]	; (8001644 <TIM6_DAC_IRQHandler+0xc>)
 800163c:	f002 fab4 	bl	8003ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001640:	bd08      	pop	{r3, pc}
 8001642:	bf00      	nop
 8001644:	2003fe68 	.word	0x2003fe68

08001648 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001648:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800164a:	4802      	ldr	r0, [pc, #8]	; (8001654 <LTDC_IRQHandler+0xc>)
 800164c:	f000 fd47 	bl	80020de <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001650:	bd08      	pop	{r3, pc}
 8001652:	bf00      	nop
 8001654:	2003fd2c 	.word	0x2003fd2c

08001658 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001658:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800165a:	4802      	ldr	r0, [pc, #8]	; (8001664 <DMA2D_IRQHandler+0xc>)
 800165c:	f000 f93e 	bl	80018dc <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001660:	bd08      	pop	{r3, pc}
 8001662:	bf00      	nop
 8001664:	2003fdf4 	.word	0x2003fdf4

08001668 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001668:	4a03      	ldr	r2, [pc, #12]	; (8001678 <SystemInit+0x10>)
 800166a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800166e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001672:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800167c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001680:	480d      	ldr	r0, [pc, #52]	; (80016b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001682:	490e      	ldr	r1, [pc, #56]	; (80016bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001684:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001688:	e002      	b.n	8001690 <LoopCopyDataInit>

0800168a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800168c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168e:	3304      	adds	r3, #4

08001690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001694:	d3f9      	bcc.n	800168a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001698:	4c0b      	ldr	r4, [pc, #44]	; (80016c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800169c:	e001      	b.n	80016a2 <LoopFillZerobss>

0800169e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a0:	3204      	adds	r2, #4

080016a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a4:	d3fb      	bcc.n	800169e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016a6:	f7ff ffdf 	bl	8001668 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016aa:	f002 ff7b 	bl	80045a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ae:	f7ff fd53 	bl	8001158 <main>
  bx  lr    
 80016b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016b4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80016b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016c0:	0800463c 	.word	0x0800463c
  ldr r2, =_sbss
 80016c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016c8:	2003feb8 	.word	0x2003feb8

080016cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016cc:	e7fe      	b.n	80016cc <ADC_IRQHandler>
	...

080016d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d0:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80016d2:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_Init+0x20>)
 80016d4:	6813      	ldr	r3, [r2, #0]
 80016d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016da:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016dc:	2003      	movs	r0, #3
 80016de:	f000 f82f 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016e2:	2000      	movs	r0, #0
 80016e4:	f7ff ff60 	bl	80015a8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80016e8:	f7ff fdf8 	bl	80012dc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80016ec:	2000      	movs	r0, #0
 80016ee:	bd08      	pop	{r3, pc}
 80016f0:	40023c00 	.word	0x40023c00

080016f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80016f4:	4a03      	ldr	r2, [pc, #12]	; (8001704 <HAL_IncTick+0x10>)
 80016f6:	6811      	ldr	r1, [r2, #0]
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_IncTick+0x14>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	440b      	add	r3, r1
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	2003feb4 	.word	0x2003feb4
 8001708:	20000004 	.word	0x20000004

0800170c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800170c:	4b01      	ldr	r3, [pc, #4]	; (8001714 <HAL_GetTick+0x8>)
 800170e:	6818      	ldr	r0, [r3, #0]
}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	2003feb4 	.word	0x2003feb4

08001718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b538      	push	{r3, r4, r5, lr}
 800171a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff fff6 	bl	800170c <HAL_GetTick>
 8001720:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001722:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001726:	d002      	beq.n	800172e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <HAL_Delay+0x24>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800172e:	f7ff ffed 	bl	800170c <HAL_GetTick>
 8001732:	1b40      	subs	r0, r0, r5
 8001734:	42a0      	cmp	r0, r4
 8001736:	d3fa      	bcc.n	800172e <HAL_Delay+0x16>
  {
  }
}
 8001738:	bd38      	pop	{r3, r4, r5, pc}
 800173a:	bf00      	nop
 800173c:	20000004 	.word	0x20000004

08001740 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	4906      	ldr	r1, [pc, #24]	; (800175c <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8001742:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001744:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001748:	041b      	lsls	r3, r3, #16
 800174a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800174c:	0200      	lsls	r0, r0, #8
 800174e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001752:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001754:	4a02      	ldr	r2, [pc, #8]	; (8001760 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001756:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8001758:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00
 8001760:	05fa0000 	.word	0x05fa0000

08001764 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001764:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_NVIC_SetPriority+0x58>)
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800176e:	f1c3 0407 	rsb	r4, r3, #7
 8001772:	2c04      	cmp	r4, #4
 8001774:	bf28      	it	cs
 8001776:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001778:	1d1d      	adds	r5, r3, #4
 800177a:	2d06      	cmp	r5, #6
 800177c:	d914      	bls.n	80017a8 <HAL_NVIC_SetPriority+0x44>
 800177e:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	f04f 35ff 	mov.w	r5, #4294967295
 8001784:	fa05 f404 	lsl.w	r4, r5, r4
 8001788:	ea21 0104 	bic.w	r1, r1, r4
 800178c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800178e:	fa05 f303 	lsl.w	r3, r5, r3
 8001792:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001796:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001798:	2800      	cmp	r0, #0
 800179a:	db07      	blt.n	80017ac <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179c:	0109      	lsls	r1, r1, #4
 800179e:	b2c9      	uxtb	r1, r1
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <HAL_NVIC_SetPriority+0x5c>)
 80017a2:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017a4:	bc30      	pop	{r4, r5}
 80017a6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a8:	2300      	movs	r3, #0
 80017aa:	e7e9      	b.n	8001780 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ac:	f000 000f 	and.w	r0, r0, #15
 80017b0:	0109      	lsls	r1, r1, #4
 80017b2:	b2c9      	uxtb	r1, r1
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_NVIC_SetPriority+0x60>)
 80017b6:	5419      	strb	r1, [r3, r0]
 80017b8:	e7f4      	b.n	80017a4 <HAL_NVIC_SetPriority+0x40>
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00
 80017c0:	e000e400 	.word	0xe000e400
 80017c4:	e000ed14 	.word	0xe000ed14

080017c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80017c8:	2800      	cmp	r0, #0
 80017ca:	db07      	blt.n	80017dc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017cc:	f000 021f 	and.w	r2, r0, #31
 80017d0:	0940      	lsrs	r0, r0, #5
 80017d2:	2301      	movs	r3, #1
 80017d4:	4093      	lsls	r3, r2
 80017d6:	4a02      	ldr	r2, [pc, #8]	; (80017e0 <HAL_NVIC_EnableIRQ+0x18>)
 80017d8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e100 	.word	0xe000e100

080017e4 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80017e4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <HAL_MPU_Disable+0x18>)
 80017ea:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80017ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f0:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80017f2:	4b03      	ldr	r3, [pc, #12]	; (8001800 <HAL_MPU_Disable+0x1c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	605a      	str	r2, [r3, #4]
}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000ed00 	.word	0xe000ed00
 8001800:	e000ed90 	.word	0xe000ed90

08001804 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001804:	f040 0001 	orr.w	r0, r0, #1
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_MPU_Enable+0x1c>)
 800180a:	6058      	str	r0, [r3, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800180c:	4a05      	ldr	r2, [pc, #20]	; (8001824 <HAL_MPU_Enable+0x20>)
 800180e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001814:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001816:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800181a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800181e:	4770      	bx	lr
 8001820:	e000ed90 	.word	0xe000ed90
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001828:	7842      	ldrb	r2, [r0, #1]
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <HAL_MPU_ConfigRegion+0x50>)
 800182c:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 800182e:	7803      	ldrb	r3, [r0, #0]
 8001830:	b1eb      	cbz	r3, 800186e <HAL_MPU_ConfigRegion+0x46>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001832:	6843      	ldr	r3, [r0, #4]
 8001834:	4a10      	ldr	r2, [pc, #64]	; (8001878 <HAL_MPU_ConfigRegion+0x50>)
 8001836:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001838:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800183a:	7ac3      	ldrb	r3, [r0, #11]
 800183c:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800183e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001842:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001844:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001848:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800184a:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800184e:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001850:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001854:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001856:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800185a:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800185c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001860:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001862:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001866:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001868:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800186a:	6113      	str	r3, [r2, #16]
 800186c:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 800186e:	4b02      	ldr	r3, [pc, #8]	; (8001878 <HAL_MPU_ConfigRegion+0x50>)
 8001870:	2200      	movs	r2, #0
 8001872:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001874:	611a      	str	r2, [r3, #16]
  }
}
 8001876:	4770      	bx	lr
 8001878:	e000ed90 	.word	0xe000ed90

0800187c <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800187c:	b338      	cbz	r0, 80018ce <HAL_DMA2D_Init+0x52>
{
 800187e:	b510      	push	{r4, lr}
 8001880:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001882:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001886:	b1eb      	cbz	r3, 80018c4 <HAL_DMA2D_Init+0x48>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001888:	2302      	movs	r3, #2
 800188a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800188e:	6822      	ldr	r2, [r4, #0]
 8001890:	6813      	ldr	r3, [r2, #0]
 8001892:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001896:	6861      	ldr	r1, [r4, #4]
 8001898:	430b      	orrs	r3, r1
 800189a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800189c:	6822      	ldr	r2, [r4, #0]
 800189e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80018a0:	f023 0307 	bic.w	r3, r3, #7
 80018a4:	68a1      	ldr	r1, [r4, #8]
 80018a6:	430b      	orrs	r3, r1
 80018a8:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80018aa:	6822      	ldr	r2, [r4, #0]
 80018ac:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_DMA2D_Init+0x58>)
 80018b0:	400b      	ands	r3, r1
 80018b2:	68e1      	ldr	r1, [r4, #12]
 80018b4:	430b      	orrs	r3, r1
 80018b6:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80018b8:	2000      	movs	r0, #0
 80018ba:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80018bc:	2301      	movs	r3, #1
 80018be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 80018c2:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 80018c4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 80018c8:	f7ff fd20 	bl	800130c <HAL_DMA2D_MspInit>
 80018cc:	e7dc      	b.n	8001888 <HAL_DMA2D_Init+0xc>
    return HAL_ERROR;
 80018ce:	2001      	movs	r0, #1
}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	ffffc000 	.word	0xffffc000

080018d8 <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80018d8:	4770      	bx	lr

080018da <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80018da:	4770      	bx	lr

080018dc <HAL_DMA2D_IRQHandler>:
{
 80018dc:	b570      	push	{r4, r5, r6, lr}
 80018de:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80018e0:	6803      	ldr	r3, [r0, #0]
 80018e2:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80018e4:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80018e6:	f015 0f01 	tst.w	r5, #1
 80018ea:	d016      	beq.n	800191a <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 80018ec:	f416 7f80 	tst.w	r6, #256	; 0x100
 80018f0:	d013      	beq.n	800191a <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018f8:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80018fa:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	63c3      	str	r3, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001902:	6803      	ldr	r3, [r0, #0]
 8001904:	2201      	movs	r2, #1
 8001906:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001908:	2304      	movs	r3, #4
 800190a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800190e:	2300      	movs	r3, #0
 8001910:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8001914:	6943      	ldr	r3, [r0, #20]
 8001916:	b103      	cbz	r3, 800191a <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 8001918:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800191a:	f015 0f20 	tst.w	r5, #32
 800191e:	d018      	beq.n	8001952 <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001920:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8001924:	d015      	beq.n	8001952 <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001926:	6822      	ldr	r2, [r4, #0]
 8001928:	6813      	ldr	r3, [r2, #0]
 800192a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800192e:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001930:	6823      	ldr	r3, [r4, #0]
 8001932:	2220      	movs	r2, #32
 8001934:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001936:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800193e:	2304      	movs	r3, #4
 8001940:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001944:	2300      	movs	r3, #0
 8001946:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 800194a:	6963      	ldr	r3, [r4, #20]
 800194c:	b10b      	cbz	r3, 8001952 <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 800194e:	4620      	mov	r0, r4
 8001950:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001952:	f015 0f08 	tst.w	r5, #8
 8001956:	d018      	beq.n	800198a <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001958:	f416 6f00 	tst.w	r6, #2048	; 0x800
 800195c:	d015      	beq.n	800198a <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800195e:	6822      	ldr	r2, [r4, #0]
 8001960:	6813      	ldr	r3, [r2, #0]
 8001962:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001966:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001968:	6823      	ldr	r3, [r4, #0]
 800196a:	2208      	movs	r2, #8
 800196c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800196e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001976:	2304      	movs	r3, #4
 8001978:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800197c:	2300      	movs	r3, #0
 800197e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8001982:	6963      	ldr	r3, [r4, #20]
 8001984:	b10b      	cbz	r3, 800198a <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 8001986:	4620      	mov	r0, r4
 8001988:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800198a:	f015 0f04 	tst.w	r5, #4
 800198e:	d002      	beq.n	8001996 <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001990:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8001994:	d120      	bne.n	80019d8 <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001996:	f015 0f02 	tst.w	r5, #2
 800199a:	d016      	beq.n	80019ca <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800199c:	f416 7f00 	tst.w	r6, #512	; 0x200
 80019a0:	d013      	beq.n	80019ca <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80019a2:	6822      	ldr	r2, [r4, #0]
 80019a4:	6813      	ldr	r3, [r2, #0]
 80019a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80019aa:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80019ac:	6823      	ldr	r3, [r4, #0]
 80019ae:	2202      	movs	r2, #2
 80019b0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80019b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019b4:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80019b6:	2301      	movs	r3, #1
 80019b8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80019bc:	2300      	movs	r3, #0
 80019be:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferCpltCallback != NULL)
 80019c2:	6923      	ldr	r3, [r4, #16]
 80019c4:	b10b      	cbz	r3, 80019ca <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 80019c6:	4620      	mov	r0, r4
 80019c8:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80019ca:	f015 0f10 	tst.w	r5, #16
 80019ce:	d002      	beq.n	80019d6 <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80019d0:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 80019d4:	d10c      	bne.n	80019f0 <HAL_DMA2D_IRQHandler+0x114>
}
 80019d6:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80019d8:	6822      	ldr	r2, [r4, #0]
 80019da:	6813      	ldr	r3, [r2, #0]
 80019dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019e0:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80019e2:	6823      	ldr	r3, [r4, #0]
 80019e4:	2204      	movs	r2, #4
 80019e6:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80019e8:	4620      	mov	r0, r4
 80019ea:	f7ff ff75 	bl	80018d8 <HAL_DMA2D_LineEventCallback>
 80019ee:	e7d2      	b.n	8001996 <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80019f0:	6822      	ldr	r2, [r4, #0]
 80019f2:	6813      	ldr	r3, [r2, #0]
 80019f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019f8:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	2210      	movs	r2, #16
 80019fe:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001a00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a02:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001a04:	2301      	movs	r3, #1
 8001a06:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001a10:	4620      	mov	r0, r4
 8001a12:	f7ff ff62 	bl	80018da <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8001a16:	e7de      	b.n	80019d6 <HAL_DMA2D_IRQHandler+0xfa>

08001a18 <HAL_DMA2D_ConfigLayer>:
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001a18:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d059      	beq.n	8001ad4 <HAL_DMA2D_ConfigLayer+0xbc>
{
 8001a20:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8001a22:	2301      	movs	r3, #1
 8001a24:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001a2e:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8001a32:	69da      	ldr	r2, [r3, #28]
 8001a34:	1c8b      	adds	r3, r1, #2
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	58c3      	ldr	r3, [r0, r3]
 8001a3a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001a3e:	3a09      	subs	r2, #9
 8001a40:	2a01      	cmp	r2, #1
 8001a42:	d91e      	bls.n	8001a82 <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001a44:	1c8a      	adds	r2, r1, #2
 8001a46:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8001a4a:	6852      	ldr	r2, [r2, #4]
 8001a4c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001a50:	bb41      	cbnz	r1, 8001aa4 <HAL_DMA2D_ConfigLayer+0x8c>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001a52:	6804      	ldr	r4, [r0, #0]
 8001a54:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001a56:	4a20      	ldr	r2, [pc, #128]	; (8001ad8 <HAL_DMA2D_ConfigLayer+0xc0>)
 8001a58:	402a      	ands	r2, r5
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001a5e:	6802      	ldr	r2, [r0, #0]
 8001a60:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8001a64:	699c      	ldr	r4, [r3, #24]
 8001a66:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	3b09      	subs	r3, #9
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d910      	bls.n	8001a92 <HAL_DMA2D_ConfigLayer+0x7a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001a70:	2301      	movs	r3, #1
 8001a72:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001a76:	2300      	movs	r3, #0
 8001a78:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001a7c:	4618      	mov	r0, r3
}
 8001a7e:	bc30      	pop	{r4, r5}
 8001a80:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001a82:	1c8a      	adds	r2, r1, #2
 8001a84:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8001a88:	6852      	ldr	r2, [r2, #4]
 8001a8a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	e7de      	b.n	8001a50 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001a92:	3102      	adds	r1, #2
 8001a94:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8001a98:	684b      	ldr	r3, [r1, #4]
 8001a9a:	6802      	ldr	r2, [r0, #0]
 8001a9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001aa0:	6293      	str	r3, [r2, #40]	; 0x28
 8001aa2:	e7e5      	b.n	8001a70 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001aa4:	6804      	ldr	r4, [r0, #0]
 8001aa6:	69e5      	ldr	r5, [r4, #28]
 8001aa8:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <HAL_DMA2D_ConfigLayer+0xc0>)
 8001aaa:	402a      	ands	r2, r5
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001ab0:	6802      	ldr	r2, [r0, #0]
 8001ab2:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8001ab6:	699c      	ldr	r4, [r3, #24]
 8001ab8:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	3b09      	subs	r3, #9
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d8d6      	bhi.n	8001a70 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001ac2:	3102      	adds	r1, #2
 8001ac4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8001ac8:	684b      	ldr	r3, [r1, #4]
 8001aca:	6802      	ldr	r2, [r0, #0]
 8001acc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001ad0:	6213      	str	r3, [r2, #32]
 8001ad2:	e7cd      	b.n	8001a70 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 8001ad4:	2002      	movs	r0, #2
}
 8001ad6:	4770      	bx	lr
 8001ad8:	00fcfff0 	.word	0x00fcfff0

08001adc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001adc:	2300      	movs	r3, #0
 8001ade:	2b0f      	cmp	r3, #15
 8001ae0:	f200 80e3 	bhi.w	8001caa <HAL_GPIO_Init+0x1ce>
{
 8001ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	e039      	b.n	8001b5e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001aea:	2209      	movs	r2, #9
 8001aec:	e000      	b.n	8001af0 <HAL_GPIO_Init+0x14>
 8001aee:	2200      	movs	r2, #0
 8001af0:	40b2      	lsls	r2, r6
 8001af2:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8001af4:	3402      	adds	r4, #2
 8001af6:	4e6d      	ldr	r6, [pc, #436]	; (8001cac <HAL_GPIO_Init+0x1d0>)
 8001af8:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001afc:	4a6c      	ldr	r2, [pc, #432]	; (8001cb0 <HAL_GPIO_Init+0x1d4>)
 8001afe:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001b00:	43ea      	mvns	r2, r5
 8001b02:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b06:	684f      	ldr	r7, [r1, #4]
 8001b08:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001b0c:	d001      	beq.n	8001b12 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8001b0e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8001b12:	4c67      	ldr	r4, [pc, #412]	; (8001cb0 <HAL_GPIO_Init+0x1d4>)
 8001b14:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001b16:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001b18:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b1c:	684f      	ldr	r7, [r1, #4]
 8001b1e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001b22:	d001      	beq.n	8001b28 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8001b24:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8001b28:	4c61      	ldr	r4, [pc, #388]	; (8001cb0 <HAL_GPIO_Init+0x1d4>)
 8001b2a:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b2c:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001b2e:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b32:	684f      	ldr	r7, [r1, #4]
 8001b34:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001b38:	d001      	beq.n	8001b3e <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8001b3a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8001b3e:	4c5c      	ldr	r4, [pc, #368]	; (8001cb0 <HAL_GPIO_Init+0x1d4>)
 8001b40:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001b42:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001b44:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b46:	684e      	ldr	r6, [r1, #4]
 8001b48:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001b4c:	d001      	beq.n	8001b52 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8001b4e:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8001b52:	4c57      	ldr	r4, [pc, #348]	; (8001cb0 <HAL_GPIO_Init+0x1d4>)
 8001b54:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b56:	3301      	adds	r3, #1
 8001b58:	2b0f      	cmp	r3, #15
 8001b5a:	f200 80a4 	bhi.w	8001ca6 <HAL_GPIO_Init+0x1ca>
    ioposition = ((uint32_t)0x01) << position;
 8001b5e:	2201      	movs	r2, #1
 8001b60:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b62:	680c      	ldr	r4, [r1, #0]
 8001b64:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8001b68:	ea32 0404 	bics.w	r4, r2, r4
 8001b6c:	d1f3      	bne.n	8001b56 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b6e:	684c      	ldr	r4, [r1, #4]
 8001b70:	1e66      	subs	r6, r4, #1
 8001b72:	2c11      	cmp	r4, #17
 8001b74:	bf18      	it	ne
 8001b76:	2e01      	cmpne	r6, #1
 8001b78:	d901      	bls.n	8001b7e <HAL_GPIO_Init+0xa2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b7a:	2c12      	cmp	r4, #18
 8001b7c:	d112      	bne.n	8001ba4 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->OSPEEDR; 
 8001b7e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b80:	005f      	lsls	r7, r3, #1
 8001b82:	2403      	movs	r4, #3
 8001b84:	40bc      	lsls	r4, r7
 8001b86:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b8a:	68cc      	ldr	r4, [r1, #12]
 8001b8c:	40bc      	lsls	r4, r7
 8001b8e:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001b90:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001b92:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b94:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001b98:	684c      	ldr	r4, [r1, #4]
 8001b9a:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8001ba2:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001ba4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ba6:	005e      	lsls	r6, r3, #1
 8001ba8:	2403      	movs	r4, #3
 8001baa:	40b4      	lsls	r4, r6
 8001bac:	43e2      	mvns	r2, r4
 8001bae:	ea27 0704 	bic.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001bb2:	688c      	ldr	r4, [r1, #8]
 8001bb4:	40b4      	lsls	r4, r6
 8001bb6:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8001bb8:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bba:	684c      	ldr	r4, [r1, #4]
 8001bbc:	2c12      	cmp	r4, #18
 8001bbe:	bf18      	it	ne
 8001bc0:	2c02      	cmpne	r4, #2
 8001bc2:	d113      	bne.n	8001bec <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3];
 8001bc4:	08df      	lsrs	r7, r3, #3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bcc:	f003 0407 	and.w	r4, r3, #7
 8001bd0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8001bd4:	240f      	movs	r4, #15
 8001bd6:	fa04 f40c 	lsl.w	r4, r4, ip
 8001bda:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bde:	690c      	ldr	r4, [r1, #16]
 8001be0:	fa04 f40c 	lsl.w	r4, r4, ip
 8001be4:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 8001be8:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8001bec:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bee:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bf0:	684a      	ldr	r2, [r1, #4]
 8001bf2:	f002 0203 	and.w	r2, r2, #3
 8001bf6:	40b2      	lsls	r2, r6
 8001bf8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001bfa:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bfc:	684a      	ldr	r2, [r1, #4]
 8001bfe:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001c02:	d0a8      	beq.n	8001b56 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c04:	4a2b      	ldr	r2, [pc, #172]	; (8001cb4 <HAL_GPIO_Init+0x1d8>)
 8001c06:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001c08:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001c0c:	6454      	str	r4, [r2, #68]	; 0x44
 8001c0e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c10:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c14:	9201      	str	r2, [sp, #4]
 8001c16:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001c18:	089c      	lsrs	r4, r3, #2
 8001c1a:	1ca6      	adds	r6, r4, #2
 8001c1c:	4a23      	ldr	r2, [pc, #140]	; (8001cac <HAL_GPIO_Init+0x1d0>)
 8001c1e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c22:	f003 0203 	and.w	r2, r3, #3
 8001c26:	0096      	lsls	r6, r2, #2
 8001c28:	220f      	movs	r2, #15
 8001c2a:	40b2      	lsls	r2, r6
 8001c2c:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c30:	4a21      	ldr	r2, [pc, #132]	; (8001cb8 <HAL_GPIO_Init+0x1dc>)
 8001c32:	4290      	cmp	r0, r2
 8001c34:	f43f af5b 	beq.w	8001aee <HAL_GPIO_Init+0x12>
 8001c38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c3c:	4290      	cmp	r0, r2
 8001c3e:	d022      	beq.n	8001c86 <HAL_GPIO_Init+0x1aa>
 8001c40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c44:	4290      	cmp	r0, r2
 8001c46:	d020      	beq.n	8001c8a <HAL_GPIO_Init+0x1ae>
 8001c48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c4c:	4290      	cmp	r0, r2
 8001c4e:	d01e      	beq.n	8001c8e <HAL_GPIO_Init+0x1b2>
 8001c50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c54:	4290      	cmp	r0, r2
 8001c56:	d01c      	beq.n	8001c92 <HAL_GPIO_Init+0x1b6>
 8001c58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c5c:	4290      	cmp	r0, r2
 8001c5e:	d01a      	beq.n	8001c96 <HAL_GPIO_Init+0x1ba>
 8001c60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c64:	4290      	cmp	r0, r2
 8001c66:	d018      	beq.n	8001c9a <HAL_GPIO_Init+0x1be>
 8001c68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c6c:	4290      	cmp	r0, r2
 8001c6e:	d016      	beq.n	8001c9e <HAL_GPIO_Init+0x1c2>
 8001c70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c74:	4290      	cmp	r0, r2
 8001c76:	d014      	beq.n	8001ca2 <HAL_GPIO_Init+0x1c6>
 8001c78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c7c:	4290      	cmp	r0, r2
 8001c7e:	f43f af34 	beq.w	8001aea <HAL_GPIO_Init+0xe>
 8001c82:	220a      	movs	r2, #10
 8001c84:	e734      	b.n	8001af0 <HAL_GPIO_Init+0x14>
 8001c86:	2201      	movs	r2, #1
 8001c88:	e732      	b.n	8001af0 <HAL_GPIO_Init+0x14>
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	e730      	b.n	8001af0 <HAL_GPIO_Init+0x14>
 8001c8e:	2203      	movs	r2, #3
 8001c90:	e72e      	b.n	8001af0 <HAL_GPIO_Init+0x14>
 8001c92:	2204      	movs	r2, #4
 8001c94:	e72c      	b.n	8001af0 <HAL_GPIO_Init+0x14>
 8001c96:	2205      	movs	r2, #5
 8001c98:	e72a      	b.n	8001af0 <HAL_GPIO_Init+0x14>
 8001c9a:	2206      	movs	r2, #6
 8001c9c:	e728      	b.n	8001af0 <HAL_GPIO_Init+0x14>
 8001c9e:	2207      	movs	r2, #7
 8001ca0:	e726      	b.n	8001af0 <HAL_GPIO_Init+0x14>
 8001ca2:	2208      	movs	r2, #8
 8001ca4:	e724      	b.n	8001af0 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8001ca6:	b003      	add	sp, #12
 8001ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001caa:	4770      	bx	lr
 8001cac:	40013800 	.word	0x40013800
 8001cb0:	40013c00 	.word	0x40013c00
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40020000 	.word	0x40020000

08001cbc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cbc:	b10a      	cbz	r2, 8001cc2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cbe:	6181      	str	r1, [r0, #24]
 8001cc0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001cc2:	0409      	lsls	r1, r1, #16
 8001cc4:	6181      	str	r1, [r0, #24]
  }
}
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cc8:	2800      	cmp	r0, #0
 8001cca:	d057      	beq.n	8001d7c <HAL_I2C_Init+0xb4>
{
 8001ccc:	b510      	push	{r4, lr}
 8001cce:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cd0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d041      	beq.n	8001d5c <HAL_I2C_Init+0x94>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd8:	2324      	movs	r3, #36	; 0x24
 8001cda:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cde:	6822      	ldr	r2, [r4, #0]
 8001ce0:	6813      	ldr	r3, [r2, #0]
 8001ce2:	f023 0301 	bic.w	r3, r3, #1
 8001ce6:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ce8:	6863      	ldr	r3, [r4, #4]
 8001cea:	6822      	ldr	r2, [r4, #0]
 8001cec:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001cf0:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cf2:	6822      	ldr	r2, [r4, #0]
 8001cf4:	6893      	ldr	r3, [r2, #8]
 8001cf6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001cfa:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cfc:	68e3      	ldr	r3, [r4, #12]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d031      	beq.n	8001d66 <HAL_I2C_Init+0x9e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d02:	68a3      	ldr	r3, [r4, #8]
 8001d04:	6822      	ldr	r2, [r4, #0]
 8001d06:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001d0a:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d0c:	68e3      	ldr	r3, [r4, #12]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d02f      	beq.n	8001d72 <HAL_I2C_Init+0xaa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d12:	6822      	ldr	r2, [r4, #0]
 8001d14:	6851      	ldr	r1, [r2, #4]
 8001d16:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <HAL_I2C_Init+0xb8>)
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d1c:	6822      	ldr	r2, [r4, #0]
 8001d1e:	68d3      	ldr	r3, [r2, #12]
 8001d20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001d24:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d26:	6923      	ldr	r3, [r4, #16]
 8001d28:	6962      	ldr	r2, [r4, #20]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	69a1      	ldr	r1, [r4, #24]
 8001d2e:	6822      	ldr	r2, [r4, #0]
 8001d30:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001d34:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d36:	69e3      	ldr	r3, [r4, #28]
 8001d38:	6a21      	ldr	r1, [r4, #32]
 8001d3a:	6822      	ldr	r2, [r4, #0]
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d40:	6822      	ldr	r2, [r4, #0]
 8001d42:	6813      	ldr	r3, [r2, #0]
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d4e:	2320      	movs	r3, #32
 8001d50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d54:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d56:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 8001d5a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001d5c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001d60:	f7ff faf4 	bl	800134c <HAL_I2C_MspInit>
 8001d64:	e7b8      	b.n	8001cd8 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d66:	68a3      	ldr	r3, [r4, #8]
 8001d68:	6822      	ldr	r2, [r4, #0]
 8001d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d6e:	6093      	str	r3, [r2, #8]
 8001d70:	e7cc      	b.n	8001d0c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	e7ca      	b.n	8001d12 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001d7c:	2001      	movs	r0, #1
}
 8001d7e:	4770      	bx	lr
 8001d80:	02008000 	.word	0x02008000

08001d84 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d84:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b20      	cmp	r3, #32
 8001d8c:	d124      	bne.n	8001dd8 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d8e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d022      	beq.n	8001ddc <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001d96:	2301      	movs	r3, #1
 8001d98:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d9c:	2324      	movs	r3, #36	; 0x24
 8001d9e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001da2:	6802      	ldr	r2, [r0, #0]
 8001da4:	6813      	ldr	r3, [r2, #0]
 8001da6:	f023 0301 	bic.w	r3, r3, #1
 8001daa:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dac:	6802      	ldr	r2, [r0, #0]
 8001dae:	6813      	ldr	r3, [r2, #0]
 8001db0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001db4:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001db6:	6802      	ldr	r2, [r0, #0]
 8001db8:	6813      	ldr	r3, [r2, #0]
 8001dba:	4319      	orrs	r1, r3
 8001dbc:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dbe:	6802      	ldr	r2, [r0, #0]
 8001dc0:	6813      	ldr	r3, [r2, #0]
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dc8:	2320      	movs	r3, #32
 8001dca:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001dd8:	2002      	movs	r0, #2
 8001dda:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001ddc:	2002      	movs	r0, #2
  }
}
 8001dde:	4770      	bx	lr

08001de0 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b20      	cmp	r3, #32
 8001de8:	d122      	bne.n	8001e30 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dea:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d020      	beq.n	8001e34 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8001df2:	2301      	movs	r3, #1
 8001df4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001df8:	2324      	movs	r3, #36	; 0x24
 8001dfa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dfe:	6802      	ldr	r2, [r0, #0]
 8001e00:	6813      	ldr	r3, [r2, #0]
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e08:	6802      	ldr	r2, [r0, #0]
 8001e0a:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e10:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e14:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e16:	6802      	ldr	r2, [r0, #0]
 8001e18:	6813      	ldr	r3, [r2, #0]
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e20:	2320      	movs	r3, #32
 8001e22:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e26:	2300      	movs	r3, #0
 8001e28:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001e30:	2002      	movs	r0, #2
 8001e32:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001e34:	2002      	movs	r0, #2
  }
}
 8001e36:	4770      	bx	lr

08001e38 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001e38:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001e3a:	684e      	ldr	r6, [r1, #4]
 8001e3c:	6805      	ldr	r5, [r0, #0]
 8001e3e:	68eb      	ldr	r3, [r5, #12]
 8001e40:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8001e44:	441e      	add	r6, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001e46:	01d4      	lsls	r4, r2, #7
 8001e48:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 8001e4c:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8001e50:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001e54:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001e58:	680b      	ldr	r3, [r1, #0]
 8001e5a:	6805      	ldr	r5, [r0, #0]
 8001e5c:	68ef      	ldr	r7, [r5, #12]
 8001e5e:	f3c7 470b 	ubfx	r7, r7, #16, #12
 8001e62:	443b      	add	r3, r7
 8001e64:	3301      	adds	r3, #1
 8001e66:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 8001e6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001e6e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8001e72:	68ce      	ldr	r6, [r1, #12]
 8001e74:	6805      	ldr	r5, [r0, #0]
 8001e76:	68eb      	ldr	r3, [r5, #12]
 8001e78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e7c:	441e      	add	r6, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001e7e:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 8001e82:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8001e86:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001e8a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001e8e:	688b      	ldr	r3, [r1, #8]
 8001e90:	6805      	ldr	r5, [r0, #0]
 8001e92:	68ef      	ldr	r7, [r5, #12]
 8001e94:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8001e98:	443b      	add	r3, r7
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 8001ea0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001ea4:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001ea8:	6803      	ldr	r3, [r0, #0]
 8001eaa:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8001eae:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
 8001eb2:	f025 0507 	bic.w	r5, r5, #7
 8001eb6:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001eba:	6803      	ldr	r3, [r0, #0]
 8001ebc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8001ec0:	690d      	ldr	r5, [r1, #16]
 8001ec2:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8001ec6:	f891 e031 	ldrb.w	lr, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001eca:	f891 c032 	ldrb.w	ip, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8001ece:	698f      	ldr	r7, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001ed0:	6806      	ldr	r6, [r0, #0]
 8001ed2:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
 8001ed6:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
 8001eda:	2500      	movs	r5, #0
 8001edc:	f8c6 509c 	str.w	r5, [r6, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8001ee0:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8001ee4:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8001ee8:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8001eec:	6806      	ldr	r6, [r0, #0]
 8001eee:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
 8001ef2:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8001ef6:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001efa:	6803      	ldr	r3, [r0, #0]
 8001efc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8001f00:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8001f04:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
 8001f08:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001f0c:	6803      	ldr	r3, [r0, #0]
 8001f0e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8001f12:	694e      	ldr	r6, [r1, #20]
 8001f14:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001f18:	6803      	ldr	r3, [r0, #0]
 8001f1a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8001f1e:	f8d3 70a0 	ldr.w	r7, [r3, #160]	; 0xa0
 8001f22:	4e2e      	ldr	r6, [pc, #184]	; (8001fdc <LTDC_SetConfig+0x1a4>)
 8001f24:	403e      	ands	r6, r7
 8001f26:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001f2a:	69ce      	ldr	r6, [r1, #28]
 8001f2c:	6a0f      	ldr	r7, [r1, #32]
 8001f2e:	6803      	ldr	r3, [r0, #0]
 8001f30:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8001f34:	433e      	orrs	r6, r7
 8001f36:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001f3a:	6803      	ldr	r3, [r0, #0]
 8001f3c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8001f40:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
 8001f44:	f8c3 50ac 	str.w	r5, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001f48:	6803      	ldr	r3, [r0, #0]
 8001f4a:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 8001f4e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001f50:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001f54:	690b      	ldr	r3, [r1, #16]
 8001f56:	b16b      	cbz	r3, 8001f74 <LTDC_SetConfig+0x13c>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d039      	beq.n	8001fd0 <LTDC_SetConfig+0x198>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	bf18      	it	ne
 8001f60:	2b04      	cmpne	r3, #4
 8001f62:	d037      	beq.n	8001fd4 <LTDC_SetConfig+0x19c>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d037      	beq.n	8001fd8 <LTDC_SetConfig+0x1a0>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001f68:	2b07      	cmp	r3, #7
 8001f6a:	d001      	beq.n	8001f70 <LTDC_SetConfig+0x138>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e002      	b.n	8001f76 <LTDC_SetConfig+0x13e>
    tmp = 2U;
 8001f70:	2302      	movs	r3, #2
 8001f72:	e000      	b.n	8001f76 <LTDC_SetConfig+0x13e>
    tmp = 4U;
 8001f74:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001f76:	6802      	ldr	r2, [r0, #0]
 8001f78:	4422      	add	r2, r4
 8001f7a:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
 8001f7e:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8001f82:	f8c2 50b0 	str.w	r5, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001f86:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8001f88:	fb03 f502 	mul.w	r5, r3, r2
 8001f8c:	684a      	ldr	r2, [r1, #4]
 8001f8e:	680e      	ldr	r6, [r1, #0]
 8001f90:	1b92      	subs	r2, r2, r6
 8001f92:	fb03 f302 	mul.w	r3, r3, r2
 8001f96:	3303      	adds	r3, #3
 8001f98:	6802      	ldr	r2, [r0, #0]
 8001f9a:	4422      	add	r2, r4
 8001f9c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001fa0:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001fa4:	6803      	ldr	r3, [r0, #0]
 8001fa6:	4423      	add	r3, r4
 8001fa8:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 8001fac:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <LTDC_SetConfig+0x1a8>)
 8001fae:	402a      	ands	r2, r5
 8001fb0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001fb4:	6803      	ldr	r3, [r0, #0]
 8001fb6:	4423      	add	r3, r4
 8001fb8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8001fba:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001fbe:	6803      	ldr	r3, [r0, #0]
 8001fc0:	441c      	add	r4, r3
 8001fc2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8001fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e7d0      	b.n	8001f76 <LTDC_SetConfig+0x13e>
    tmp = 2U;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e7ce      	b.n	8001f76 <LTDC_SetConfig+0x13e>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e7cc      	b.n	8001f76 <LTDC_SetConfig+0x13e>
 8001fdc:	fffff8f8 	.word	0xfffff8f8
 8001fe0:	fffff800 	.word	0xfffff800

08001fe4 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	d072      	beq.n	80020ce <HAL_LTDC_Init+0xea>
{
 8001fe8:	b538      	push	{r3, r4, r5, lr}
 8001fea:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8001fec:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d067      	beq.n	80020c4 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001ffa:	6822      	ldr	r2, [r4, #0]
 8001ffc:	6993      	ldr	r3, [r2, #24]
 8001ffe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002002:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002004:	6821      	ldr	r1, [r4, #0]
 8002006:	698a      	ldr	r2, [r1, #24]
 8002008:	6863      	ldr	r3, [r4, #4]
 800200a:	68a0      	ldr	r0, [r4, #8]
 800200c:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800200e:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002010:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002012:	6920      	ldr	r0, [r4, #16]
 8002014:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002016:	4313      	orrs	r3, r2
 8002018:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800201a:	6821      	ldr	r1, [r4, #0]
 800201c:	688a      	ldr	r2, [r1, #8]
 800201e:	4b2d      	ldr	r3, [pc, #180]	; (80020d4 <HAL_LTDC_Init+0xf0>)
 8002020:	401a      	ands	r2, r3
 8002022:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002024:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002026:	6820      	ldr	r0, [r4, #0]
 8002028:	6882      	ldr	r2, [r0, #8]
 800202a:	69a1      	ldr	r1, [r4, #24]
 800202c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002030:	430a      	orrs	r2, r1
 8002032:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002034:	6821      	ldr	r1, [r4, #0]
 8002036:	68ca      	ldr	r2, [r1, #12]
 8002038:	401a      	ands	r2, r3
 800203a:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800203c:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800203e:	6820      	ldr	r0, [r4, #0]
 8002040:	68c2      	ldr	r2, [r0, #12]
 8002042:	6a21      	ldr	r1, [r4, #32]
 8002044:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002048:	430a      	orrs	r2, r1
 800204a:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800204c:	6821      	ldr	r1, [r4, #0]
 800204e:	690a      	ldr	r2, [r1, #16]
 8002050:	401a      	ands	r2, r3
 8002052:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002054:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002056:	6820      	ldr	r0, [r4, #0]
 8002058:	6902      	ldr	r2, [r0, #16]
 800205a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800205c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002060:	430a      	orrs	r2, r1
 8002062:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002064:	6821      	ldr	r1, [r4, #0]
 8002066:	694a      	ldr	r2, [r1, #20]
 8002068:	4013      	ands	r3, r2
 800206a:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800206c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800206e:	6821      	ldr	r1, [r4, #0]
 8002070:	694b      	ldr	r3, [r1, #20]
 8002072:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002074:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002078:	4313      	orrs	r3, r2
 800207a:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800207c:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002080:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8002084:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002086:	6821      	ldr	r1, [r4, #0]
 8002088:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800208a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800208e:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002090:	6821      	ldr	r1, [r4, #0]
 8002092:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002094:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002098:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 800209c:	4303      	orrs	r3, r0
 800209e:	4313      	orrs	r3, r2
 80020a0:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80020a2:	6822      	ldr	r2, [r4, #0]
 80020a4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80020a6:	f043 0306 	orr.w	r3, r3, #6
 80020aa:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80020ac:	6822      	ldr	r2, [r4, #0]
 80020ae:	6993      	ldr	r3, [r2, #24]
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80020b6:	2000      	movs	r0, #0
 80020b8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80020bc:	2301      	movs	r3, #1
 80020be:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80020c2:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 80020c4:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80020c8:	f7ff f978 	bl	80013bc <HAL_LTDC_MspInit>
 80020cc:	e792      	b.n	8001ff4 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 80020ce:	2001      	movs	r0, #1
}
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	f000f800 	.word	0xf000f800

080020d8 <HAL_LTDC_ErrorCallback>:
}
 80020d8:	4770      	bx	lr

080020da <HAL_LTDC_LineEventCallback>:
}
 80020da:	4770      	bx	lr

080020dc <HAL_LTDC_ReloadEventCallback>:
}
 80020dc:	4770      	bx	lr

080020de <HAL_LTDC_IRQHandler>:
{
 80020de:	b570      	push	{r4, r5, r6, lr}
 80020e0:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80020e2:	6803      	ldr	r3, [r0, #0]
 80020e4:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80020e6:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80020e8:	f015 0f04 	tst.w	r5, #4
 80020ec:	d002      	beq.n	80020f4 <HAL_LTDC_IRQHandler+0x16>
 80020ee:	f016 0f04 	tst.w	r6, #4
 80020f2:	d112      	bne.n	800211a <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80020f4:	f015 0f02 	tst.w	r5, #2
 80020f8:	d002      	beq.n	8002100 <HAL_LTDC_IRQHandler+0x22>
 80020fa:	f016 0f02 	tst.w	r6, #2
 80020fe:	d121      	bne.n	8002144 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002100:	f015 0f01 	tst.w	r5, #1
 8002104:	d002      	beq.n	800210c <HAL_LTDC_IRQHandler+0x2e>
 8002106:	f016 0f01 	tst.w	r6, #1
 800210a:	d132      	bne.n	8002172 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800210c:	f015 0f08 	tst.w	r5, #8
 8002110:	d002      	beq.n	8002118 <HAL_LTDC_IRQHandler+0x3a>
 8002112:	f016 0f08 	tst.w	r6, #8
 8002116:	d13d      	bne.n	8002194 <HAL_LTDC_IRQHandler+0xb6>
}
 8002118:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800211a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800211c:	f022 0204 	bic.w	r2, r2, #4
 8002120:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002122:	6803      	ldr	r3, [r0, #0]
 8002124:	2204      	movs	r2, #4
 8002126:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002128:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002134:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002138:	2300      	movs	r3, #0
 800213a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800213e:	f7ff ffcb 	bl	80020d8 <HAL_LTDC_ErrorCallback>
 8002142:	e7d7      	b.n	80020f4 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002144:	6822      	ldr	r2, [r4, #0]
 8002146:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002148:	f023 0302 	bic.w	r3, r3, #2
 800214c:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	2202      	movs	r2, #2
 8002152:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002154:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800215e:	2304      	movs	r3, #4
 8002160:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002164:	2300      	movs	r3, #0
 8002166:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800216a:	4620      	mov	r0, r4
 800216c:	f7ff ffb4 	bl	80020d8 <HAL_LTDC_ErrorCallback>
 8002170:	e7c6      	b.n	8002100 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002172:	6822      	ldr	r2, [r4, #0]
 8002174:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002176:	f023 0301 	bic.w	r3, r3, #1
 800217a:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800217c:	6822      	ldr	r2, [r4, #0]
 800217e:	2301      	movs	r3, #1
 8002180:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8002182:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002186:	2300      	movs	r3, #0
 8002188:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800218c:	4620      	mov	r0, r4
 800218e:	f7ff ffa4 	bl	80020da <HAL_LTDC_LineEventCallback>
 8002192:	e7bb      	b.n	800210c <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002194:	6822      	ldr	r2, [r4, #0]
 8002196:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002198:	f023 0308 	bic.w	r3, r3, #8
 800219c:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800219e:	6823      	ldr	r3, [r4, #0]
 80021a0:	2208      	movs	r2, #8
 80021a2:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80021a4:	2301      	movs	r3, #1
 80021a6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80021aa:	2300      	movs	r3, #0
 80021ac:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80021b0:	4620      	mov	r0, r4
 80021b2:	f7ff ff93 	bl	80020dc <HAL_LTDC_ReloadEventCallback>
}
 80021b6:	e7af      	b.n	8002118 <HAL_LTDC_IRQHandler+0x3a>

080021b8 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 80021b8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d027      	beq.n	8002210 <HAL_LTDC_ConfigLayer+0x58>
{
 80021c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021c4:	4606      	mov	r6, r0
 80021c6:	460f      	mov	r7, r1
 80021c8:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 80021ca:	f04f 0801 	mov.w	r8, #1
 80021ce:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80021d2:	2302      	movs	r3, #2
 80021d4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80021d8:	2434      	movs	r4, #52	; 0x34
 80021da:	fb04 0402 	mla	r4, r4, r2, r0
 80021de:	3438      	adds	r4, #56	; 0x38
 80021e0:	460d      	mov	r5, r1
 80021e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ee:	682b      	ldr	r3, [r5, #0]
 80021f0:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80021f2:	4662      	mov	r2, ip
 80021f4:	4639      	mov	r1, r7
 80021f6:	4630      	mov	r0, r6
 80021f8:	f7ff fe1e 	bl	8001e38 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80021fc:	6833      	ldr	r3, [r6, #0]
 80021fe:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002202:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002206:	2000      	movs	r0, #0
 8002208:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800220c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8002210:	2002      	movs	r0, #2
}
 8002212:	4770      	bx	lr

08002214 <HAL_LTDC_SetAddress>:
{
 8002214:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hltdc);
 8002216:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800221a:	2b01      	cmp	r3, #1
 800221c:	d019      	beq.n	8002252 <HAL_LTDC_SetAddress+0x3e>
 800221e:	4604      	mov	r4, r0
 8002220:	2501      	movs	r5, #1
 8002222:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002226:	2302      	movs	r3, #2
 8002228:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800222c:	2334      	movs	r3, #52	; 0x34
 800222e:	fb03 f302 	mul.w	r3, r3, r2
 8002232:	f103 0038 	add.w	r0, r3, #56	; 0x38
  pLayerCfg->FBStartAdress = Address;
 8002236:	4423      	add	r3, r4
 8002238:	65d9      	str	r1, [r3, #92]	; 0x5c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800223a:	1821      	adds	r1, r4, r0
 800223c:	4620      	mov	r0, r4
 800223e:	f7ff fdfb 	bl	8001e38 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8002246:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800224a:	2000      	movs	r0, #0
 800224c:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8002250:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hltdc);
 8002252:	2002      	movs	r0, #2
 8002254:	e7fc      	b.n	8002250 <HAL_LTDC_SetAddress+0x3c>
	...

08002258 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002258:	4a02      	ldr	r2, [pc, #8]	; (8002264 <HAL_PWR_EnableBkUpAccess+0xc>)
 800225a:	6813      	ldr	r3, [r2, #0]
 800225c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002260:	6013      	str	r3, [r2, #0]
}
 8002262:	4770      	bx	lr
 8002264:	40007000 	.word	0x40007000

08002268 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002268:	b510      	push	{r4, lr}
 800226a:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800226c:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <HAL_PWREx_EnableOverDrive+0x74>)
 800226e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002270:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002280:	4a17      	ldr	r2, [pc, #92]	; (80022e0 <HAL_PWREx_EnableOverDrive+0x78>)
 8002282:	6813      	ldr	r3, [r2, #0]
 8002284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002288:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800228a:	f7ff fa3f 	bl	800170c <HAL_GetTick>
 800228e:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002290:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <HAL_PWREx_EnableOverDrive+0x78>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002298:	d108      	bne.n	80022ac <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800229a:	f7ff fa37 	bl	800170c <HAL_GetTick>
 800229e:	1b00      	subs	r0, r0, r4
 80022a0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80022a4:	d9f4      	bls.n	8002290 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 80022a6:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 80022a8:	b002      	add	sp, #8
 80022aa:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80022ac:	4a0c      	ldr	r2, [pc, #48]	; (80022e0 <HAL_PWREx_EnableOverDrive+0x78>)
 80022ae:	6813      	ldr	r3, [r2, #0]
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b4:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80022b6:	f7ff fa29 	bl	800170c <HAL_GetTick>
 80022ba:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <HAL_PWREx_EnableOverDrive+0x78>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80022c4:	d107      	bne.n	80022d6 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022c6:	f7ff fa21 	bl	800170c <HAL_GetTick>
 80022ca:	1b00      	subs	r0, r0, r4
 80022cc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80022d0:	d9f4      	bls.n	80022bc <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 80022d2:	2003      	movs	r0, #3
 80022d4:	e7e8      	b.n	80022a8 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 80022d6:	2000      	movs	r0, #0
 80022d8:	e7e6      	b.n	80022a8 <HAL_PWREx_EnableOverDrive+0x40>
 80022da:	bf00      	nop
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40007000 	.word	0x40007000

080022e4 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022e4:	2800      	cmp	r0, #0
 80022e6:	f000 81ff 	beq.w	80026e8 <HAL_RCC_OscConfig+0x404>
{
 80022ea:	b570      	push	{r4, r5, r6, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f0:	6803      	ldr	r3, [r0, #0]
 80022f2:	f013 0f01 	tst.w	r3, #1
 80022f6:	d029      	beq.n	800234c <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022f8:	4ba7      	ldr	r3, [pc, #668]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b04      	cmp	r3, #4
 8002302:	d01a      	beq.n	800233a <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002304:	4ba4      	ldr	r3, [pc, #656]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 030c 	and.w	r3, r3, #12
 800230c:	2b08      	cmp	r3, #8
 800230e:	d00f      	beq.n	8002330 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002310:	6863      	ldr	r3, [r4, #4]
 8002312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002316:	d040      	beq.n	800239a <HAL_RCC_OscConfig+0xb6>
 8002318:	2b00      	cmp	r3, #0
 800231a:	d154      	bne.n	80023c6 <HAL_RCC_OscConfig+0xe2>
 800231c:	4b9e      	ldr	r3, [pc, #632]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	e039      	b.n	80023a4 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002330:	4b99      	ldr	r3, [pc, #612]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002338:	d0ea      	beq.n	8002310 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233a:	4b97      	ldr	r3, [pc, #604]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002342:	d003      	beq.n	800234c <HAL_RCC_OscConfig+0x68>
 8002344:	6863      	ldr	r3, [r4, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 81d0 	beq.w	80026ec <HAL_RCC_OscConfig+0x408>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234c:	6823      	ldr	r3, [r4, #0]
 800234e:	f013 0f02 	tst.w	r3, #2
 8002352:	d074      	beq.n	800243e <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002354:	4b90      	ldr	r3, [pc, #576]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f013 0f0c 	tst.w	r3, #12
 800235c:	d05e      	beq.n	800241c <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800235e:	4b8e      	ldr	r3, [pc, #568]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b08      	cmp	r3, #8
 8002368:	d053      	beq.n	8002412 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800236a:	68e3      	ldr	r3, [r4, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 8089 	beq.w	8002484 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002372:	4a89      	ldr	r2, [pc, #548]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 8002374:	6813      	ldr	r3, [r2, #0]
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7ff f9c6 	bl	800170c <HAL_GetTick>
 8002380:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002382:	4b85      	ldr	r3, [pc, #532]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f013 0f02 	tst.w	r3, #2
 800238a:	d172      	bne.n	8002472 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800238c:	f7ff f9be 	bl	800170c <HAL_GetTick>
 8002390:	1b40      	subs	r0, r0, r5
 8002392:	2802      	cmp	r0, #2
 8002394:	d9f5      	bls.n	8002382 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8002396:	2003      	movs	r0, #3
 8002398:	e1ad      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239a:	4a7f      	ldr	r2, [pc, #508]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 800239c:	6813      	ldr	r3, [r2, #0]
 800239e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a2:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023a4:	6863      	ldr	r3, [r4, #4]
 80023a6:	b32b      	cbz	r3, 80023f4 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80023a8:	f7ff f9b0 	bl	800170c <HAL_GetTick>
 80023ac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ae:	4b7a      	ldr	r3, [pc, #488]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80023b6:	d1c9      	bne.n	800234c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b8:	f7ff f9a8 	bl	800170c <HAL_GetTick>
 80023bc:	1b40      	subs	r0, r0, r5
 80023be:	2864      	cmp	r0, #100	; 0x64
 80023c0:	d9f5      	bls.n	80023ae <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80023c2:	2003      	movs	r0, #3
 80023c4:	e197      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023ca:	d009      	beq.n	80023e0 <HAL_RCC_OscConfig+0xfc>
 80023cc:	4b72      	ldr	r3, [pc, #456]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	e7e1      	b.n	80023a4 <HAL_RCC_OscConfig+0xc0>
 80023e0:	4b6d      	ldr	r3, [pc, #436]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	e7d7      	b.n	80023a4 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 80023f4:	f7ff f98a 	bl	800170c <HAL_GetTick>
 80023f8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fa:	4b67      	ldr	r3, [pc, #412]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002402:	d0a3      	beq.n	800234c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002404:	f7ff f982 	bl	800170c <HAL_GetTick>
 8002408:	1b40      	subs	r0, r0, r5
 800240a:	2864      	cmp	r0, #100	; 0x64
 800240c:	d9f5      	bls.n	80023fa <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 800240e:	2003      	movs	r0, #3
 8002410:	e171      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002412:	4b61      	ldr	r3, [pc, #388]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800241a:	d1a6      	bne.n	800236a <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241c:	4b5e      	ldr	r3, [pc, #376]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f013 0f02 	tst.w	r3, #2
 8002424:	d003      	beq.n	800242e <HAL_RCC_OscConfig+0x14a>
 8002426:	68e3      	ldr	r3, [r4, #12]
 8002428:	2b01      	cmp	r3, #1
 800242a:	f040 8161 	bne.w	80026f0 <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242e:	4a5a      	ldr	r2, [pc, #360]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 8002430:	6813      	ldr	r3, [r2, #0]
 8002432:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002436:	6921      	ldr	r1, [r4, #16]
 8002438:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800243c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800243e:	6823      	ldr	r3, [r4, #0]
 8002440:	f013 0f08 	tst.w	r3, #8
 8002444:	d046      	beq.n	80024d4 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002446:	6963      	ldr	r3, [r4, #20]
 8002448:	b383      	cbz	r3, 80024ac <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800244a:	4a53      	ldr	r2, [pc, #332]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 800244c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002454:	f7ff f95a 	bl	800170c <HAL_GetTick>
 8002458:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800245a:	4b4f      	ldr	r3, [pc, #316]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 800245c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245e:	f013 0f02 	tst.w	r3, #2
 8002462:	d137      	bne.n	80024d4 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002464:	f7ff f952 	bl	800170c <HAL_GetTick>
 8002468:	1b40      	subs	r0, r0, r5
 800246a:	2802      	cmp	r0, #2
 800246c:	d9f5      	bls.n	800245a <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 800246e:	2003      	movs	r0, #3
 8002470:	e141      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002472:	4a49      	ldr	r2, [pc, #292]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 8002474:	6813      	ldr	r3, [r2, #0]
 8002476:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800247a:	6921      	ldr	r1, [r4, #16]
 800247c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e7dc      	b.n	800243e <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8002484:	4a44      	ldr	r2, [pc, #272]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 8002486:	6813      	ldr	r3, [r2, #0]
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800248e:	f7ff f93d 	bl	800170c <HAL_GetTick>
 8002492:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002494:	4b40      	ldr	r3, [pc, #256]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f013 0f02 	tst.w	r3, #2
 800249c:	d0cf      	beq.n	800243e <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800249e:	f7ff f935 	bl	800170c <HAL_GetTick>
 80024a2:	1b40      	subs	r0, r0, r5
 80024a4:	2802      	cmp	r0, #2
 80024a6:	d9f5      	bls.n	8002494 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 80024a8:	2003      	movs	r0, #3
 80024aa:	e124      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ac:	4a3a      	ldr	r2, [pc, #232]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 80024ae:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b6:	f7ff f929 	bl	800170c <HAL_GetTick>
 80024ba:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024bc:	4b36      	ldr	r3, [pc, #216]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 80024be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c0:	f013 0f02 	tst.w	r3, #2
 80024c4:	d006      	beq.n	80024d4 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c6:	f7ff f921 	bl	800170c <HAL_GetTick>
 80024ca:	1b40      	subs	r0, r0, r5
 80024cc:	2802      	cmp	r0, #2
 80024ce:	d9f5      	bls.n	80024bc <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 80024d0:	2003      	movs	r0, #3
 80024d2:	e110      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d4:	6823      	ldr	r3, [r4, #0]
 80024d6:	f013 0f04 	tst.w	r3, #4
 80024da:	d07d      	beq.n	80025d8 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024dc:	4b2e      	ldr	r3, [pc, #184]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80024e4:	d10b      	bne.n	80024fe <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e6:	4b2c      	ldr	r3, [pc, #176]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 80024e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024ee:	641a      	str	r2, [r3, #64]	; 0x40
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f6:	9301      	str	r3, [sp, #4]
 80024f8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80024fa:	2501      	movs	r5, #1
 80024fc:	e000      	b.n	8002500 <HAL_RCC_OscConfig+0x21c>
  FlagStatus pwrclkchanged = RESET;
 80024fe:	2500      	movs	r5, #0
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002500:	4b26      	ldr	r3, [pc, #152]	; (800259c <HAL_RCC_OscConfig+0x2b8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002508:	d00e      	beq.n	8002528 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800250a:	68a3      	ldr	r3, [r4, #8]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d01f      	beq.n	8002550 <HAL_RCC_OscConfig+0x26c>
 8002510:	2b00      	cmp	r3, #0
 8002512:	d135      	bne.n	8002580 <HAL_RCC_OscConfig+0x29c>
 8002514:	4b20      	ldr	r3, [pc, #128]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 8002516:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002518:	f022 0201 	bic.w	r2, r2, #1
 800251c:	671a      	str	r2, [r3, #112]	; 0x70
 800251e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002520:	f022 0204 	bic.w	r2, r2, #4
 8002524:	671a      	str	r2, [r3, #112]	; 0x70
 8002526:	e018      	b.n	800255a <HAL_RCC_OscConfig+0x276>
      PWR->CR1 |= PWR_CR1_DBP;
 8002528:	4a1c      	ldr	r2, [pc, #112]	; (800259c <HAL_RCC_OscConfig+0x2b8>)
 800252a:	6813      	ldr	r3, [r2, #0]
 800252c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002530:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002532:	f7ff f8eb 	bl	800170c <HAL_GetTick>
 8002536:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002538:	4b18      	ldr	r3, [pc, #96]	; (800259c <HAL_RCC_OscConfig+0x2b8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002540:	d1e3      	bne.n	800250a <HAL_RCC_OscConfig+0x226>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002542:	f7ff f8e3 	bl	800170c <HAL_GetTick>
 8002546:	1b80      	subs	r0, r0, r6
 8002548:	2864      	cmp	r0, #100	; 0x64
 800254a:	d9f5      	bls.n	8002538 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 800254c:	2003      	movs	r0, #3
 800254e:	e0d2      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002550:	4a11      	ldr	r2, [pc, #68]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 8002552:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800255a:	68a3      	ldr	r3, [r4, #8]
 800255c:	b353      	cbz	r3, 80025b4 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255e:	f7ff f8d5 	bl	800170c <HAL_GetTick>
 8002562:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 8002566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002568:	f013 0f02 	tst.w	r3, #2
 800256c:	d133      	bne.n	80025d6 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256e:	f7ff f8cd 	bl	800170c <HAL_GetTick>
 8002572:	1b80      	subs	r0, r0, r6
 8002574:	f241 3388 	movw	r3, #5000	; 0x1388
 8002578:	4298      	cmp	r0, r3
 800257a:	d9f3      	bls.n	8002564 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800257c:	2003      	movs	r0, #3
 800257e:	e0ba      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002580:	2b05      	cmp	r3, #5
 8002582:	d00d      	beq.n	80025a0 <HAL_RCC_OscConfig+0x2bc>
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 8002586:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002588:	f022 0201 	bic.w	r2, r2, #1
 800258c:	671a      	str	r2, [r3, #112]	; 0x70
 800258e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002590:	f022 0204 	bic.w	r2, r2, #4
 8002594:	671a      	str	r2, [r3, #112]	; 0x70
 8002596:	e7e0      	b.n	800255a <HAL_RCC_OscConfig+0x276>
 8002598:	40023800 	.word	0x40023800
 800259c:	40007000 	.word	0x40007000
 80025a0:	4b5c      	ldr	r3, [pc, #368]	; (8002714 <HAL_RCC_OscConfig+0x430>)
 80025a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025a4:	f042 0204 	orr.w	r2, r2, #4
 80025a8:	671a      	str	r2, [r3, #112]	; 0x70
 80025aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025ac:	f042 0201 	orr.w	r2, r2, #1
 80025b0:	671a      	str	r2, [r3, #112]	; 0x70
 80025b2:	e7d2      	b.n	800255a <HAL_RCC_OscConfig+0x276>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7ff f8aa 	bl	800170c <HAL_GetTick>
 80025b8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ba:	4b56      	ldr	r3, [pc, #344]	; (8002714 <HAL_RCC_OscConfig+0x430>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025be:	f013 0f02 	tst.w	r3, #2
 80025c2:	d008      	beq.n	80025d6 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c4:	f7ff f8a2 	bl	800170c <HAL_GetTick>
 80025c8:	1b80      	subs	r0, r0, r6
 80025ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80025ce:	4298      	cmp	r0, r3
 80025d0:	d9f3      	bls.n	80025ba <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 80025d2:	2003      	movs	r0, #3
 80025d4:	e08f      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025d6:	b9fd      	cbnz	r5, 8002618 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d8:	69a3      	ldr	r3, [r4, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 808a 	beq.w	80026f4 <HAL_RCC_OscConfig+0x410>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e0:	4a4c      	ldr	r2, [pc, #304]	; (8002714 <HAL_RCC_OscConfig+0x430>)
 80025e2:	6892      	ldr	r2, [r2, #8]
 80025e4:	f002 020c 	and.w	r2, r2, #12
 80025e8:	2a08      	cmp	r2, #8
 80025ea:	d058      	beq.n	800269e <HAL_RCC_OscConfig+0x3ba>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d019      	beq.n	8002624 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f0:	4a48      	ldr	r2, [pc, #288]	; (8002714 <HAL_RCC_OscConfig+0x430>)
 80025f2:	6813      	ldr	r3, [r2, #0]
 80025f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fa:	f7ff f887 	bl	800170c <HAL_GetTick>
 80025fe:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002600:	4b44      	ldr	r3, [pc, #272]	; (8002714 <HAL_RCC_OscConfig+0x430>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002608:	d047      	beq.n	800269a <HAL_RCC_OscConfig+0x3b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260a:	f7ff f87f 	bl	800170c <HAL_GetTick>
 800260e:	1b00      	subs	r0, r0, r4
 8002610:	2802      	cmp	r0, #2
 8002612:	d9f5      	bls.n	8002600 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002614:	2003      	movs	r0, #3
 8002616:	e06e      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002618:	4a3e      	ldr	r2, [pc, #248]	; (8002714 <HAL_RCC_OscConfig+0x430>)
 800261a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800261c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002620:	6413      	str	r3, [r2, #64]	; 0x40
 8002622:	e7d9      	b.n	80025d8 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8002624:	4a3b      	ldr	r2, [pc, #236]	; (8002714 <HAL_RCC_OscConfig+0x430>)
 8002626:	6813      	ldr	r3, [r2, #0]
 8002628:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800262c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800262e:	f7ff f86d 	bl	800170c <HAL_GetTick>
 8002632:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002634:	4b37      	ldr	r3, [pc, #220]	; (8002714 <HAL_RCC_OscConfig+0x430>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800263c:	d006      	beq.n	800264c <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263e:	f7ff f865 	bl	800170c <HAL_GetTick>
 8002642:	1b40      	subs	r0, r0, r5
 8002644:	2802      	cmp	r0, #2
 8002646:	d9f5      	bls.n	8002634 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8002648:	2003      	movs	r0, #3
 800264a:	e054      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800264c:	69e3      	ldr	r3, [r4, #28]
 800264e:	6a22      	ldr	r2, [r4, #32]
 8002650:	4313      	orrs	r3, r2
 8002652:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002654:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002658:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800265a:	0852      	lsrs	r2, r2, #1
 800265c:	3a01      	subs	r2, #1
 800265e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002662:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002664:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002668:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800266c:	4a29      	ldr	r2, [pc, #164]	; (8002714 <HAL_RCC_OscConfig+0x430>)
 800266e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002670:	6813      	ldr	r3, [r2, #0]
 8002672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002676:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002678:	f7ff f848 	bl	800170c <HAL_GetTick>
 800267c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267e:	4b25      	ldr	r3, [pc, #148]	; (8002714 <HAL_RCC_OscConfig+0x430>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002686:	d106      	bne.n	8002696 <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002688:	f7ff f840 	bl	800170c <HAL_GetTick>
 800268c:	1b00      	subs	r0, r0, r4
 800268e:	2802      	cmp	r0, #2
 8002690:	d9f5      	bls.n	800267e <HAL_RCC_OscConfig+0x39a>
            return HAL_TIMEOUT;
 8002692:	2003      	movs	r0, #3
 8002694:	e02f      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002696:	2000      	movs	r0, #0
 8002698:	e02d      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
 800269a:	2000      	movs	r0, #0
 800269c:	e02b      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
      pll_config = RCC->PLLCFGR;
 800269e:	4a1d      	ldr	r2, [pc, #116]	; (8002714 <HAL_RCC_OscConfig+0x430>)
 80026a0:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d029      	beq.n	80026fa <HAL_RCC_OscConfig+0x416>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a6:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80026aa:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ac:	428b      	cmp	r3, r1
 80026ae:	d126      	bne.n	80026fe <HAL_RCC_OscConfig+0x41a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026b0:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 80026b4:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b6:	428b      	cmp	r3, r1
 80026b8:	d123      	bne.n	8002702 <HAL_RCC_OscConfig+0x41e>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026c0:	4013      	ands	r3, r2
 80026c2:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80026c6:	d11e      	bne.n	8002706 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026c8:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 80026cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026ce:	085b      	lsrs	r3, r3, #1
 80026d0:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026d2:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 80026d6:	d118      	bne.n	800270a <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026d8:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80026dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026de:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 80026e2:	d114      	bne.n	800270e <HAL_RCC_OscConfig+0x42a>
  return HAL_OK;
 80026e4:	2000      	movs	r0, #0
 80026e6:	e006      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
    return HAL_ERROR;
 80026e8:	2001      	movs	r0, #1
}
 80026ea:	4770      	bx	lr
        return HAL_ERROR;
 80026ec:	2001      	movs	r0, #1
 80026ee:	e002      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
        return HAL_ERROR;
 80026f0:	2001      	movs	r0, #1
 80026f2:	e000      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
  return HAL_OK;
 80026f4:	2000      	movs	r0, #0
}
 80026f6:	b002      	add	sp, #8
 80026f8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80026fa:	2001      	movs	r0, #1
 80026fc:	e7fb      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
 80026fe:	2001      	movs	r0, #1
 8002700:	e7f9      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
 8002702:	2001      	movs	r0, #1
 8002704:	e7f7      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
 8002706:	2001      	movs	r0, #1
 8002708:	e7f5      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
 800270a:	2001      	movs	r0, #1
 800270c:	e7f3      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
 800270e:	2001      	movs	r0, #1
 8002710:	e7f1      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800

08002718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800271a:	4b24      	ldr	r3, [pc, #144]	; (80027ac <HAL_RCC_GetSysClockFreq+0x94>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
 8002722:	2b04      	cmp	r3, #4
 8002724:	d03d      	beq.n	80027a2 <HAL_RCC_GetSysClockFreq+0x8a>
 8002726:	2b08      	cmp	r3, #8
 8002728:	d13d      	bne.n	80027a6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800272a:	4b20      	ldr	r3, [pc, #128]	; (80027ac <HAL_RCC_GetSysClockFreq+0x94>)
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002738:	d012      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800273a:	4b1c      	ldr	r3, [pc, #112]	; (80027ac <HAL_RCC_GetSysClockFreq+0x94>)
 800273c:	6859      	ldr	r1, [r3, #4]
 800273e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002742:	2300      	movs	r3, #0
 8002744:	481a      	ldr	r0, [pc, #104]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002746:	fba1 0100 	umull	r0, r1, r1, r0
 800274a:	f7fd fd5d 	bl	8000208 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800274e:	4b17      	ldr	r3, [pc, #92]	; (80027ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002756:	3301      	adds	r3, #1
 8002758:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800275a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800275e:	e023      	b.n	80027a8 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002760:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002768:	015c      	lsls	r4, r3, #5
 800276a:	2500      	movs	r5, #0
 800276c:	1ae4      	subs	r4, r4, r3
 800276e:	f165 0500 	sbc.w	r5, r5, #0
 8002772:	01ae      	lsls	r6, r5, #6
 8002774:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8002778:	01a7      	lsls	r7, r4, #6
 800277a:	1b38      	subs	r0, r7, r4
 800277c:	eb66 0105 	sbc.w	r1, r6, r5
 8002780:	00cc      	lsls	r4, r1, #3
 8002782:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8002786:	00c5      	lsls	r5, r0, #3
 8002788:	18e8      	adds	r0, r5, r3
 800278a:	f144 0100 	adc.w	r1, r4, #0
 800278e:	028b      	lsls	r3, r1, #10
 8002790:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002794:	0284      	lsls	r4, r0, #10
 8002796:	4620      	mov	r0, r4
 8002798:	4619      	mov	r1, r3
 800279a:	2300      	movs	r3, #0
 800279c:	f7fd fd34 	bl	8000208 <__aeabi_uldivmod>
 80027a0:	e7d5      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80027a2:	4803      	ldr	r0, [pc, #12]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x98>)
 80027a4:	e000      	b.n	80027a8 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027a6:	4803      	ldr	r0, [pc, #12]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80027a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800
 80027b0:	017d7840 	.word	0x017d7840
 80027b4:	00f42400 	.word	0x00f42400

080027b8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80027b8:	2800      	cmp	r0, #0
 80027ba:	f000 80a0 	beq.w	80028fe <HAL_RCC_ClockConfig+0x146>
{
 80027be:	b570      	push	{r4, r5, r6, lr}
 80027c0:	460d      	mov	r5, r1
 80027c2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027c4:	4b52      	ldr	r3, [pc, #328]	; (8002910 <HAL_RCC_ClockConfig+0x158>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	428b      	cmp	r3, r1
 80027ce:	d20b      	bcs.n	80027e8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d0:	4a4f      	ldr	r2, [pc, #316]	; (8002910 <HAL_RCC_ClockConfig+0x158>)
 80027d2:	6813      	ldr	r3, [r2, #0]
 80027d4:	f023 030f 	bic.w	r3, r3, #15
 80027d8:	430b      	orrs	r3, r1
 80027da:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027dc:	6813      	ldr	r3, [r2, #0]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	428b      	cmp	r3, r1
 80027e4:	f040 808d 	bne.w	8002902 <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e8:	6823      	ldr	r3, [r4, #0]
 80027ea:	f013 0f02 	tst.w	r3, #2
 80027ee:	d017      	beq.n	8002820 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f0:	f013 0f04 	tst.w	r3, #4
 80027f4:	d004      	beq.n	8002800 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027f6:	4a47      	ldr	r2, [pc, #284]	; (8002914 <HAL_RCC_ClockConfig+0x15c>)
 80027f8:	6893      	ldr	r3, [r2, #8]
 80027fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027fe:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002800:	6823      	ldr	r3, [r4, #0]
 8002802:	f013 0f08 	tst.w	r3, #8
 8002806:	d004      	beq.n	8002812 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002808:	4a42      	ldr	r2, [pc, #264]	; (8002914 <HAL_RCC_ClockConfig+0x15c>)
 800280a:	6893      	ldr	r3, [r2, #8]
 800280c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002810:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002812:	4a40      	ldr	r2, [pc, #256]	; (8002914 <HAL_RCC_ClockConfig+0x15c>)
 8002814:	6893      	ldr	r3, [r2, #8]
 8002816:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800281a:	68a1      	ldr	r1, [r4, #8]
 800281c:	430b      	orrs	r3, r1
 800281e:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	f013 0f01 	tst.w	r3, #1
 8002826:	d031      	beq.n	800288c <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002828:	6863      	ldr	r3, [r4, #4]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d020      	beq.n	8002870 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800282e:	2b02      	cmp	r3, #2
 8002830:	d025      	beq.n	800287e <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002832:	4a38      	ldr	r2, [pc, #224]	; (8002914 <HAL_RCC_ClockConfig+0x15c>)
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	f012 0f02 	tst.w	r2, #2
 800283a:	d064      	beq.n	8002906 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800283c:	4935      	ldr	r1, [pc, #212]	; (8002914 <HAL_RCC_ClockConfig+0x15c>)
 800283e:	688a      	ldr	r2, [r1, #8]
 8002840:	f022 0203 	bic.w	r2, r2, #3
 8002844:	4313      	orrs	r3, r2
 8002846:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002848:	f7fe ff60 	bl	800170c <HAL_GetTick>
 800284c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284e:	4b31      	ldr	r3, [pc, #196]	; (8002914 <HAL_RCC_ClockConfig+0x15c>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	6862      	ldr	r2, [r4, #4]
 8002858:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800285c:	d016      	beq.n	800288c <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800285e:	f7fe ff55 	bl	800170c <HAL_GetTick>
 8002862:	1b80      	subs	r0, r0, r6
 8002864:	f241 3388 	movw	r3, #5000	; 0x1388
 8002868:	4298      	cmp	r0, r3
 800286a:	d9f0      	bls.n	800284e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 800286c:	2003      	movs	r0, #3
 800286e:	e045      	b.n	80028fc <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002870:	4a28      	ldr	r2, [pc, #160]	; (8002914 <HAL_RCC_ClockConfig+0x15c>)
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002878:	d1e0      	bne.n	800283c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800287a:	2001      	movs	r0, #1
 800287c:	e03e      	b.n	80028fc <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287e:	4a25      	ldr	r2, [pc, #148]	; (8002914 <HAL_RCC_ClockConfig+0x15c>)
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002886:	d1d9      	bne.n	800283c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002888:	2001      	movs	r0, #1
 800288a:	e037      	b.n	80028fc <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800288c:	4b20      	ldr	r3, [pc, #128]	; (8002910 <HAL_RCC_ClockConfig+0x158>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	42ab      	cmp	r3, r5
 8002896:	d90a      	bls.n	80028ae <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002898:	4a1d      	ldr	r2, [pc, #116]	; (8002910 <HAL_RCC_ClockConfig+0x158>)
 800289a:	6813      	ldr	r3, [r2, #0]
 800289c:	f023 030f 	bic.w	r3, r3, #15
 80028a0:	432b      	orrs	r3, r5
 80028a2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a4:	6813      	ldr	r3, [r2, #0]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	42ab      	cmp	r3, r5
 80028ac:	d12d      	bne.n	800290a <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ae:	6823      	ldr	r3, [r4, #0]
 80028b0:	f013 0f04 	tst.w	r3, #4
 80028b4:	d006      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b6:	4a17      	ldr	r2, [pc, #92]	; (8002914 <HAL_RCC_ClockConfig+0x15c>)
 80028b8:	6893      	ldr	r3, [r2, #8]
 80028ba:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80028be:	68e1      	ldr	r1, [r4, #12]
 80028c0:	430b      	orrs	r3, r1
 80028c2:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c4:	6823      	ldr	r3, [r4, #0]
 80028c6:	f013 0f08 	tst.w	r3, #8
 80028ca:	d007      	beq.n	80028dc <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028cc:	4a11      	ldr	r2, [pc, #68]	; (8002914 <HAL_RCC_ClockConfig+0x15c>)
 80028ce:	6893      	ldr	r3, [r2, #8]
 80028d0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80028d4:	6921      	ldr	r1, [r4, #16]
 80028d6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80028da:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028dc:	f7ff ff1c 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <HAL_RCC_ClockConfig+0x15c>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80028e8:	4a0b      	ldr	r2, [pc, #44]	; (8002918 <HAL_RCC_ClockConfig+0x160>)
 80028ea:	5cd3      	ldrb	r3, [r2, r3]
 80028ec:	40d8      	lsrs	r0, r3
 80028ee:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_RCC_ClockConfig+0x164>)
 80028f0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <HAL_RCC_ClockConfig+0x168>)
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	f7fe fe57 	bl	80015a8 <HAL_InitTick>
  return HAL_OK;
 80028fa:	2000      	movs	r0, #0
}
 80028fc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80028fe:	2001      	movs	r0, #1
}
 8002900:	4770      	bx	lr
      return HAL_ERROR;
 8002902:	2001      	movs	r0, #1
 8002904:	e7fa      	b.n	80028fc <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8002906:	2001      	movs	r0, #1
 8002908:	e7f8      	b.n	80028fc <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 800290a:	2001      	movs	r0, #1
 800290c:	e7f6      	b.n	80028fc <HAL_RCC_ClockConfig+0x144>
 800290e:	bf00      	nop
 8002910:	40023c00 	.word	0x40023c00
 8002914:	40023800 	.word	0x40023800
 8002918:	08004614 	.word	0x08004614
 800291c:	20000000 	.word	0x20000000
 8002920:	20000008 	.word	0x20000008

08002924 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002924:	4b01      	ldr	r3, [pc, #4]	; (800292c <HAL_RCC_GetHCLKFreq+0x8>)
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000000 	.word	0x20000000

08002930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002930:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002932:	f7ff fff7 	bl	8002924 <HAL_RCC_GetHCLKFreq>
 8002936:	4b04      	ldr	r3, [pc, #16]	; (8002948 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800293e:	4a03      	ldr	r2, [pc, #12]	; (800294c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002940:	5cd3      	ldrb	r3, [r2, r3]
}
 8002942:	40d8      	lsrs	r0, r3
 8002944:	bd08      	pop	{r3, pc}
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800
 800294c:	08004624 	.word	0x08004624

08002950 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002950:	230f      	movs	r3, #15
 8002952:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_GetClockConfig+0x34>)
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	f002 0203 	and.w	r2, r2, #3
 800295c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002964:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800296c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	08db      	lsrs	r3, r3, #3
 8002972:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002976:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <HAL_RCC_GetClockConfig+0x38>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	600b      	str	r3, [r1, #0]
}
 8002982:	4770      	bx	lr
 8002984:	40023800 	.word	0x40023800
 8002988:	40023c00 	.word	0x40023c00

0800298c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800298c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800298e:	b083      	sub	sp, #12
 8002990:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002992:	6806      	ldr	r6, [r0, #0]
 8002994:	f016 0601 	ands.w	r6, r6, #1
 8002998:	d00d      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800299a:	4bb6      	ldr	r3, [pc, #728]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80029a8:	430a      	orrs	r2, r1
 80029aa:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80029ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8139 	beq.w	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  uint32_t plli2sused = 0;
 80029b4:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80029b6:	6825      	ldr	r5, [r4, #0]
 80029b8:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 80029bc:	d011      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029be:	4aad      	ldr	r2, [pc, #692]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80029c0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80029c4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80029c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80029ca:	430b      	orrs	r3, r1
 80029cc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80029d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029d6:	f000 8128 	beq.w	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 8127 	beq.w	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  uint32_t pllsaiused = 0;
 80029e0:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80029e2:	6823      	ldr	r3, [r4, #0]
 80029e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80029e8:	d00f      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029ea:	4aa2      	ldr	r2, [pc, #648]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80029ec:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80029f0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80029f4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80029f6:	430b      	orrs	r3, r1
 80029f8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80029fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a02:	f000 8116 	beq.w	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a06:	b903      	cbnz	r3, 8002a0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 8002a08:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002a10:	d000      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 8002a12:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a14:	f013 0f20 	tst.w	r3, #32
 8002a18:	f040 810d 	bne.w	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a1c:	6823      	ldr	r3, [r4, #0]
 8002a1e:	f013 0f10 	tst.w	r3, #16
 8002a22:	d00c      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a24:	4b93      	ldr	r3, [pc, #588]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a26:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a2a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002a2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8002a32:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a3e:	6823      	ldr	r3, [r4, #0]
 8002a40:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002a44:	d008      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a46:	4a8b      	ldr	r2, [pc, #556]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a48:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002a4c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002a50:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002a52:	430b      	orrs	r3, r1
 8002a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a58:	6823      	ldr	r3, [r4, #0]
 8002a5a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a60:	4a84      	ldr	r2, [pc, #528]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a62:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002a66:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002a6a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a72:	6823      	ldr	r3, [r4, #0]
 8002a74:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002a78:	d008      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a7a:	4a7e      	ldr	r2, [pc, #504]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a7c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002a80:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002a84:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002a86:	430b      	orrs	r3, r1
 8002a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a8c:	6823      	ldr	r3, [r4, #0]
 8002a8e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a94:	4a77      	ldr	r2, [pc, #476]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a96:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002a9a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002a9e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aa6:	6823      	ldr	r3, [r4, #0]
 8002aa8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002aac:	d008      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aae:	4a71      	ldr	r2, [pc, #452]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ab0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002ab4:	f023 0303 	bic.w	r3, r3, #3
 8002ab8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002aba:	430b      	orrs	r3, r1
 8002abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002ac6:	d008      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ac8:	4a6a      	ldr	r2, [pc, #424]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002aca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002ace:	f023 030c 	bic.w	r3, r3, #12
 8002ad2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ada:	6823      	ldr	r3, [r4, #0]
 8002adc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ae0:	d008      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ae2:	4a64      	ldr	r2, [pc, #400]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ae4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002ae8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002aec:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002aee:	430b      	orrs	r3, r1
 8002af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002afa:	d008      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002afc:	4a5d      	ldr	r2, [pc, #372]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002afe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002b02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002b06:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b0e:	6823      	ldr	r3, [r4, #0]
 8002b10:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002b14:	d008      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b16:	4a57      	ldr	r2, [pc, #348]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b18:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b20:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002b22:	430b      	orrs	r3, r1
 8002b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b28:	6823      	ldr	r3, [r4, #0]
 8002b2a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002b2e:	d008      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b30:	4a50      	ldr	r2, [pc, #320]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b32:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002b36:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002b3a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b42:	6823      	ldr	r3, [r4, #0]
 8002b44:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002b48:	d008      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b4a:	4a4a      	ldr	r2, [pc, #296]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b4c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002b50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002b56:	430b      	orrs	r3, r1
 8002b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002b62:	d008      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b64:	4a43      	ldr	r2, [pc, #268]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b66:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002b6a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002b6e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002b70:	430b      	orrs	r3, r1
 8002b72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002b7c:	d008      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b7e:	4a3d      	ldr	r2, [pc, #244]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b80:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002b84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b88:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002b8a:	430b      	orrs	r3, r1
 8002b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b90:	6823      	ldr	r3, [r4, #0]
 8002b92:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002b96:	d00d      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b98:	4a36      	ldr	r2, [pc, #216]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b9a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002b9e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002ba2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002baa:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002bac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bb0:	f000 80ac 	beq.w	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x380>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	f013 0f08 	tst.w	r3, #8
 8002bba:	d000      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 8002bbc:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bbe:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002bc2:	d008      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bc4:	4a2b      	ldr	r2, [pc, #172]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002bc6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002bca:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002bce:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002bd6:	6823      	ldr	r3, [r4, #0]
 8002bd8:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8002bdc:	d009      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bde:	4a25      	ldr	r2, [pc, #148]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002be0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002bec:	430b      	orrs	r3, r1
 8002bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002bf2:	b926      	cbnz	r6, 8002bfe <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002bf4:	6823      	ldr	r3, [r4, #0]
 8002bf6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002bfa:	f000 8107 	beq.w	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x480>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002bfe:	4a1d      	ldr	r2, [pc, #116]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c00:	6813      	ldr	r3, [r2, #0]
 8002c02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c08:	f7fe fd80 	bl	800170c <HAL_GetTick>
 8002c0c:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c0e:	4b19      	ldr	r3, [pc, #100]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002c16:	d07b      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x384>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c18:	f7fe fd78 	bl	800170c <HAL_GetTick>
 8002c1c:	1b80      	subs	r0, r0, r6
 8002c1e:	2864      	cmp	r0, #100	; 0x64
 8002c20:	d9f5      	bls.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x282>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c22:	2003      	movs	r0, #3
 8002c24:	e0f5      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x486>
      plli2sused = 1;
 8002c26:	2601      	movs	r6, #1
 8002c28:	e6c5      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8002c2a:	2601      	movs	r6, #1
 8002c2c:	e6d5      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 8002c2e:	2501      	movs	r5, #1
 8002c30:	e6d7      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 8002c32:	2601      	movs	r6, #1
 8002c34:	e6e7      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c36:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c46:	9301      	str	r3, [sp, #4]
 8002c48:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002c4a:	4a0b      	ldr	r2, [pc, #44]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002c4c:	6813      	ldr	r3, [r2, #0]
 8002c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c52:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002c54:	f7fe fd5a 	bl	800170c <HAL_GetTick>
 8002c58:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c5a:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002c62:	d10b      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c64:	f7fe fd52 	bl	800170c <HAL_GetTick>
 8002c68:	1bc0      	subs	r0, r0, r7
 8002c6a:	2864      	cmp	r0, #100	; 0x64
 8002c6c:	d9f5      	bls.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        return HAL_TIMEOUT;
 8002c6e:	2003      	movs	r0, #3
 8002c70:	e0cf      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c7c:	4bab      	ldr	r3, [pc, #684]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c80:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002c84:	d015      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8002c86:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002c88:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d010      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x326>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c90:	4ba6      	ldr	r3, [pc, #664]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002c92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c94:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c98:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002c9a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002c9e:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ca0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002ca2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002ca6:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002ca8:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	f013 0f01 	tst.w	r3, #1
 8002cb0:	d112      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002cb4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002cb8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002cbc:	d01d      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002cbe:	4a9b      	ldr	r2, [pc, #620]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002cc0:	6893      	ldr	r3, [r2, #8]
 8002cc2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002cc6:	6093      	str	r3, [r2, #8]
 8002cc8:	4998      	ldr	r1, [pc, #608]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002cca:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8002ccc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002cce:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	670b      	str	r3, [r1, #112]	; 0x70
 8002cd6:	e6a1      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8002cd8:	f7fe fd18 	bl	800170c <HAL_GetTick>
 8002cdc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cde:	4b93      	ldr	r3, [pc, #588]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	f013 0f02 	tst.w	r3, #2
 8002ce6:	d1e4      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x326>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce8:	f7fe fd10 	bl	800170c <HAL_GetTick>
 8002cec:	1bc0      	subs	r0, r0, r7
 8002cee:	f241 3388 	movw	r3, #5000	; 0x1388
 8002cf2:	4298      	cmp	r0, r3
 8002cf4:	d9f3      	bls.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x352>
            return HAL_TIMEOUT;
 8002cf6:	2003      	movs	r0, #3
 8002cf8:	e08b      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x486>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cfa:	488c      	ldr	r0, [pc, #560]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002cfc:	6882      	ldr	r2, [r0, #8]
 8002cfe:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002d02:	498b      	ldr	r1, [pc, #556]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002d04:	4019      	ands	r1, r3
 8002d06:	430a      	orrs	r2, r1
 8002d08:	6082      	str	r2, [r0, #8]
 8002d0a:	e7dd      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      pllsaiused = 1;
 8002d0c:	2501      	movs	r5, #1
 8002d0e:	e751      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x228>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d10:	6823      	ldr	r3, [r4, #0]
 8002d12:	f013 0f01 	tst.w	r3, #1
 8002d16:	d013      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8002d18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d1a:	b98b      	cbnz	r3, 8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d1c:	4a83      	ldr	r2, [pc, #524]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002d1e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d22:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d26:	6860      	ldr	r0, [r4, #4]
 8002d28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d2c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002d30:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002d34:	430b      	orrs	r3, r1
 8002d36:	68a1      	ldr	r1, [r4, #8]
 8002d38:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002d3c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002d46:	d003      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8002d48:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002d4a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002d4e:	d006      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8002d50:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002d54:	d01e      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x408>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d5c:	d11a      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x408>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d5e:	4a73      	ldr	r2, [pc, #460]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002d60:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d64:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d68:	6860      	ldr	r0, [r4, #4]
 8002d6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d6e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002d72:	68e0      	ldr	r0, [r4, #12]
 8002d74:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002d78:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002d82:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002d86:	f023 031f 	bic.w	r3, r3, #31
 8002d8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002d8c:	3901      	subs	r1, #1
 8002d8e:	430b      	orrs	r3, r1
 8002d90:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d94:	6823      	ldr	r3, [r4, #0]
 8002d96:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002d9a:	d011      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d9c:	4a63      	ldr	r2, [pc, #396]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002d9e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002da2:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002da6:	6866      	ldr	r6, [r4, #4]
 8002da8:	6923      	ldr	r3, [r4, #16]
 8002daa:	041b      	lsls	r3, r3, #16
 8002dac:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8002db0:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8002db4:	4303      	orrs	r3, r0
 8002db6:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002dba:	430b      	orrs	r3, r1
 8002dbc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002dc0:	6823      	ldr	r3, [r4, #0]
 8002dc2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002dc6:	d00d      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x458>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002dc8:	6862      	ldr	r2, [r4, #4]
 8002dca:	6923      	ldr	r3, [r4, #16]
 8002dcc:	041b      	lsls	r3, r3, #16
 8002dce:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002dd2:	68e2      	ldr	r2, [r4, #12]
 8002dd4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002dd8:	68a2      	ldr	r2, [r4, #8]
 8002dda:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002dde:	4a53      	ldr	r2, [pc, #332]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002de0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002de4:	4a51      	ldr	r2, [pc, #324]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002de6:	6813      	ldr	r3, [r2, #0]
 8002de8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dee:	f7fe fc8d 	bl	800170c <HAL_GetTick>
 8002df2:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002df4:	4b4d      	ldr	r3, [pc, #308]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002dfc:	d106      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002dfe:	f7fe fc85 	bl	800170c <HAL_GetTick>
 8002e02:	1b80      	subs	r0, r0, r6
 8002e04:	2864      	cmp	r0, #100	; 0x64
 8002e06:	d9f5      	bls.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x468>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e08:	2003      	movs	r0, #3
 8002e0a:	e002      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x486>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e0c:	2d01      	cmp	r5, #1
 8002e0e:	d002      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002e10:	2000      	movs	r0, #0
}
 8002e12:	b003      	add	sp, #12
 8002e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8002e16:	4a45      	ldr	r2, [pc, #276]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002e18:	6813      	ldr	r3, [r2, #0]
 8002e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002e20:	f7fe fc74 	bl	800170c <HAL_GetTick>
 8002e24:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e26:	4b41      	ldr	r3, [pc, #260]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002e2e:	d006      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e30:	f7fe fc6c 	bl	800170c <HAL_GetTick>
 8002e34:	1b40      	subs	r0, r0, r5
 8002e36:	2864      	cmp	r0, #100	; 0x64
 8002e38:	d9f5      	bls.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x49a>
        return HAL_TIMEOUT;
 8002e3a:	2003      	movs	r0, #3
 8002e3c:	e7e9      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x486>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e3e:	6823      	ldr	r3, [r4, #0]
 8002e40:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002e44:	d001      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8002e46:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002e48:	b122      	cbz	r2, 8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 8002e4a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002e4e:	d01d      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x500>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e52:	b9db      	cbnz	r3, 8002e8c <HAL_RCCEx_PeriphCLKConfig+0x500>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e54:	4a35      	ldr	r2, [pc, #212]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002e56:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e5a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e5e:	6960      	ldr	r0, [r4, #20]
 8002e60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e64:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002e68:	69a0      	ldr	r0, [r4, #24]
 8002e6a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002e6e:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002e72:	430b      	orrs	r3, r1
 8002e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e78:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002e7c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002e80:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002e82:	3901      	subs	r1, #1
 8002e84:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002e88:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002e92:	d003      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8002e94:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002e96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e9a:	d031      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x574>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	f013 0f08 	tst.w	r3, #8
 8002ea2:	d019      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ea4:	4a21      	ldr	r2, [pc, #132]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002ea6:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002eaa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002eae:	6960      	ldr	r0, [r4, #20]
 8002eb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eb4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002eb8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	69e1      	ldr	r1, [r4, #28]
 8002ec0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ec8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002ecc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002ed0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002ed2:	430b      	orrs	r3, r1
 8002ed4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8002ed8:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002eda:	6813      	ldr	r3, [r2, #0]
 8002edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002ee2:	f7fe fc13 	bl	800170c <HAL_GetTick>
 8002ee6:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ee8:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002ef0:	d119      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x59a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ef2:	f7fe fc0b 	bl	800170c <HAL_GetTick>
 8002ef6:	1b00      	subs	r0, r0, r4
 8002ef8:	2864      	cmp	r0, #100	; 0x64
 8002efa:	d9f5      	bls.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
        return HAL_TIMEOUT;
 8002efc:	2003      	movs	r0, #3
 8002efe:	e788      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x486>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f00:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002f02:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f06:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f0a:	6965      	ldr	r5, [r4, #20]
 8002f0c:	6a23      	ldr	r3, [r4, #32]
 8002f0e:	041b      	lsls	r3, r3, #16
 8002f10:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8002f14:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8002f18:	4303      	orrs	r3, r0
 8002f1a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002f1e:	430b      	orrs	r3, r1
 8002f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002f24:	e7ba      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x510>
  return HAL_OK;
 8002f26:	2000      	movs	r0, #0
 8002f28:	e773      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	0ffffcff 	.word	0x0ffffcff

08002f34 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002f34:	b538      	push	{r3, r4, r5, lr}
 8002f36:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002f38:	6802      	ldr	r2, [r0, #0]
 8002f3a:	68d3      	ldr	r3, [r2, #12]
 8002f3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f40:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f42:	f7fe fbe3 	bl	800170c <HAL_GetTick>
 8002f46:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002f48:	6823      	ldr	r3, [r4, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f013 0f20 	tst.w	r3, #32
 8002f50:	d107      	bne.n	8002f62 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002f52:	f7fe fbdb 	bl	800170c <HAL_GetTick>
 8002f56:	1b40      	subs	r0, r0, r5
 8002f58:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002f5c:	d9f4      	bls.n	8002f48 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8002f5e:	2003      	movs	r0, #3
 8002f60:	e000      	b.n	8002f64 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8002f62:	2000      	movs	r0, #0
}
 8002f64:	bd38      	pop	{r3, r4, r5, pc}

08002f66 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002f66:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002f68:	6803      	ldr	r3, [r0, #0]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002f70:	d001      	beq.n	8002f76 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002f72:	2000      	movs	r0, #0
}
 8002f74:	bd38      	pop	{r3, r4, r5, pc}
 8002f76:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002f78:	f04f 32ff 	mov.w	r2, #4294967295
 8002f7c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002f7e:	f7fe fbc5 	bl	800170c <HAL_GetTick>
 8002f82:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002f84:	6823      	ldr	r3, [r4, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002f8c:	d107      	bne.n	8002f9e <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002f8e:	f7fe fbbd 	bl	800170c <HAL_GetTick>
 8002f92:	1b43      	subs	r3, r0, r5
 8002f94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f98:	d9f4      	bls.n	8002f84 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8002f9a:	2003      	movs	r0, #3
 8002f9c:	e7ea      	b.n	8002f74 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	e7e8      	b.n	8002f74 <RTC_EnterInitMode+0xe>
	...

08002fa4 <HAL_RTC_Init>:
{
 8002fa4:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8002fa6:	2800      	cmp	r0, #0
 8002fa8:	d05a      	beq.n	8003060 <HAL_RTC_Init+0xbc>
 8002faa:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002fac:	7f43      	ldrb	r3, [r0, #29]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d03f      	beq.n	8003032 <HAL_RTC_Init+0x8e>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	22ca      	movs	r2, #202	; 0xca
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24
 8002fbc:	6823      	ldr	r3, [r4, #0]
 8002fbe:	2253      	movs	r2, #83	; 0x53
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f7ff ffcf 	bl	8002f66 <RTC_EnterInitMode>
 8002fc8:	4605      	mov	r5, r0
 8002fca:	2800      	cmp	r0, #0
 8002fcc:	d135      	bne.n	800303a <HAL_RTC_Init+0x96>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002fce:	6822      	ldr	r2, [r4, #0]
 8002fd0:	6891      	ldr	r1, [r2, #8]
 8002fd2:	4b24      	ldr	r3, [pc, #144]	; (8003064 <HAL_RTC_Init+0xc0>)
 8002fd4:	400b      	ands	r3, r1
 8002fd6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002fd8:	6821      	ldr	r1, [r4, #0]
 8002fda:	688a      	ldr	r2, [r1, #8]
 8002fdc:	6863      	ldr	r3, [r4, #4]
 8002fde:	6920      	ldr	r0, [r4, #16]
 8002fe0:	4303      	orrs	r3, r0
 8002fe2:	6960      	ldr	r0, [r4, #20]
 8002fe4:	4303      	orrs	r3, r0
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	68e2      	ldr	r2, [r4, #12]
 8002fee:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002ff0:	6822      	ldr	r2, [r4, #0]
 8002ff2:	6913      	ldr	r3, [r2, #16]
 8002ff4:	68a1      	ldr	r1, [r4, #8]
 8002ff6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002ffa:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002ffc:	6822      	ldr	r2, [r4, #0]
 8002ffe:	68d3      	ldr	r3, [r2, #12]
 8003000:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003004:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f013 0f20 	tst.w	r3, #32
 800300e:	d01b      	beq.n	8003048 <HAL_RTC_Init+0xa4>
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8003010:	6822      	ldr	r2, [r4, #0]
 8003012:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003014:	f023 0308 	bic.w	r3, r3, #8
 8003018:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800301a:	6822      	ldr	r2, [r4, #0]
 800301c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800301e:	69a1      	ldr	r1, [r4, #24]
 8003020:	430b      	orrs	r3, r1
 8003022:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	22ff      	movs	r2, #255	; 0xff
 8003028:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800302a:	2301      	movs	r3, #1
 800302c:	7763      	strb	r3, [r4, #29]
}
 800302e:	4628      	mov	r0, r5
 8003030:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8003032:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8003034:	f7fe fa56 	bl	80014e4 <HAL_RTC_MspInit>
 8003038:	e7bb      	b.n	8002fb2 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	22ff      	movs	r2, #255	; 0xff
 800303e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003040:	2304      	movs	r3, #4
 8003042:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8003044:	2501      	movs	r5, #1
 8003046:	e7f2      	b.n	800302e <HAL_RTC_Init+0x8a>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003048:	4620      	mov	r0, r4
 800304a:	f7ff ff73 	bl	8002f34 <HAL_RTC_WaitForSynchro>
 800304e:	2800      	cmp	r0, #0
 8003050:	d0de      	beq.n	8003010 <HAL_RTC_Init+0x6c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	22ff      	movs	r2, #255	; 0xff
 8003056:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003058:	2304      	movs	r3, #4
 800305a:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 800305c:	2501      	movs	r5, #1
 800305e:	e7e6      	b.n	800302e <HAL_RTC_Init+0x8a>
     return HAL_ERROR;
 8003060:	2501      	movs	r5, #1
 8003062:	e7e4      	b.n	800302e <HAL_RTC_Init+0x8a>
 8003064:	ff8fffbf 	.word	0xff8fffbf

08003068 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8003068:	2300      	movs	r3, #0

  while(Value >= 10)
 800306a:	2809      	cmp	r0, #9
 800306c:	d903      	bls.n	8003076 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 800306e:	3301      	adds	r3, #1
    Value -= 10;
 8003070:	380a      	subs	r0, #10
 8003072:	b2c0      	uxtb	r0, r0
 8003074:	e7f9      	b.n	800306a <RTC_ByteToBcd2+0x2>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	b2db      	uxtb	r3, r3
}
 800307a:	4318      	orrs	r0, r3
 800307c:	4770      	bx	lr
	...

08003080 <HAL_RTC_SetTime>:
{
 8003080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8003082:	7f03      	ldrb	r3, [r0, #28]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d076      	beq.n	8003176 <HAL_RTC_SetTime+0xf6>
 8003088:	4604      	mov	r4, r0
 800308a:	460e      	mov	r6, r1
 800308c:	2301      	movs	r3, #1
 800308e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003090:	2302      	movs	r3, #2
 8003092:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8003094:	2a00      	cmp	r2, #0
 8003096:	d145      	bne.n	8003124 <HAL_RTC_SetTime+0xa4>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003098:	6803      	ldr	r3, [r0, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f013 0f40 	tst.w	r3, #64	; 0x40
 80030a0:	d101      	bne.n	80030a6 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 80030a2:	2300      	movs	r3, #0
 80030a4:	730b      	strb	r3, [r1, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80030a6:	7830      	ldrb	r0, [r6, #0]
 80030a8:	f7ff ffde 	bl	8003068 <RTC_ByteToBcd2>
 80030ac:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80030ae:	7870      	ldrb	r0, [r6, #1]
 80030b0:	f7ff ffda 	bl	8003068 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80030b4:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80030b8:	78b0      	ldrb	r0, [r6, #2]
 80030ba:	f7ff ffd5 	bl	8003068 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80030be:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16));
 80030c0:	7b30      	ldrb	r0, [r6, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80030c2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030c6:	6823      	ldr	r3, [r4, #0]
 80030c8:	22ca      	movs	r2, #202	; 0xca
 80030ca:	625a      	str	r2, [r3, #36]	; 0x24
 80030cc:	6823      	ldr	r3, [r4, #0]
 80030ce:	2253      	movs	r2, #83	; 0x53
 80030d0:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80030d2:	4620      	mov	r0, r4
 80030d4:	f7ff ff47 	bl	8002f66 <RTC_EnterInitMode>
 80030d8:	4607      	mov	r7, r0
 80030da:	2800      	cmp	r0, #0
 80030dc:	d134      	bne.n	8003148 <HAL_RTC_SetTime+0xc8>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80030de:	6822      	ldr	r2, [r4, #0]
 80030e0:	4b26      	ldr	r3, [pc, #152]	; (800317c <HAL_RTC_SetTime+0xfc>)
 80030e2:	402b      	ands	r3, r5
 80030e4:	6013      	str	r3, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80030e6:	6822      	ldr	r2, [r4, #0]
 80030e8:	6893      	ldr	r3, [r2, #8]
 80030ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ee:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80030f0:	6821      	ldr	r1, [r4, #0]
 80030f2:	688b      	ldr	r3, [r1, #8]
 80030f4:	6932      	ldr	r2, [r6, #16]
 80030f6:	6970      	ldr	r0, [r6, #20]
 80030f8:	4302      	orrs	r2, r0
 80030fa:	4313      	orrs	r3, r2
 80030fc:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80030fe:	6822      	ldr	r2, [r4, #0]
 8003100:	68d3      	ldr	r3, [r2, #12]
 8003102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003106:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f013 0f20 	tst.w	r3, #32
 8003110:	d023      	beq.n	800315a <HAL_RTC_SetTime+0xda>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	22ff      	movs	r2, #255	; 0xff
 8003116:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8003118:	2301      	movs	r3, #1
 800311a:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 800311c:	2300      	movs	r3, #0
 800311e:	7723      	strb	r3, [r4, #28]
}
 8003120:	4638      	mov	r0, r7
 8003122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003124:	6803      	ldr	r3, [r0, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f013 0f40 	tst.w	r3, #64	; 0x40
 800312c:	d101      	bne.n	8003132 <HAL_RTC_SetTime+0xb2>
      sTime->TimeFormat = 0x00;
 800312e:	2300      	movs	r3, #0
 8003130:	730b      	strb	r3, [r1, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8003132:	7833      	ldrb	r3, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8003134:	7875      	ldrb	r5, [r6, #1]
 8003136:	022d      	lsls	r5, r5, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8003138:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t)sTime->Seconds) | \
 800313c:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800313e:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));
 8003140:	7b30      	ldrb	r0, [r6, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8003142:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8003146:	e7be      	b.n	80030c6 <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	22ff      	movs	r2, #255	; 0xff
 800314c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800314e:	2304      	movs	r3, #4
 8003150:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8003152:	2300      	movs	r3, #0
 8003154:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8003156:	2701      	movs	r7, #1
 8003158:	e7e2      	b.n	8003120 <HAL_RTC_SetTime+0xa0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800315a:	4620      	mov	r0, r4
 800315c:	f7ff feea 	bl	8002f34 <HAL_RTC_WaitForSynchro>
 8003160:	2800      	cmp	r0, #0
 8003162:	d0d6      	beq.n	8003112 <HAL_RTC_SetTime+0x92>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003164:	6823      	ldr	r3, [r4, #0]
 8003166:	22ff      	movs	r2, #255	; 0xff
 8003168:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800316a:	2304      	movs	r3, #4
 800316c:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800316e:	2300      	movs	r3, #0
 8003170:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8003172:	2701      	movs	r7, #1
 8003174:	e7d4      	b.n	8003120 <HAL_RTC_SetTime+0xa0>
  __HAL_LOCK(hrtc);
 8003176:	2702      	movs	r7, #2
 8003178:	e7d2      	b.n	8003120 <HAL_RTC_SetTime+0xa0>
 800317a:	bf00      	nop
 800317c:	007f7f7f 	.word	0x007f7f7f

08003180 <HAL_RTC_SetDate>:
{
 8003180:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8003182:	7f03      	ldrb	r3, [r0, #28]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d064      	beq.n	8003252 <HAL_RTC_SetDate+0xd2>
 8003188:	4604      	mov	r4, r0
 800318a:	460e      	mov	r6, r1
 800318c:	2301      	movs	r3, #1
 800318e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003190:	2302      	movs	r3, #2
 8003192:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003194:	b93a      	cbnz	r2, 80031a6 <HAL_RTC_SetDate+0x26>
 8003196:	784b      	ldrb	r3, [r1, #1]
 8003198:	f013 0f10 	tst.w	r3, #16
 800319c:	d003      	beq.n	80031a6 <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800319e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80031a2:	330a      	adds	r3, #10
 80031a4:	704b      	strb	r3, [r1, #1]
  if(Format == RTC_FORMAT_BIN)
 80031a6:	2a00      	cmp	r2, #0
 80031a8:	d131      	bne.n	800320e <HAL_RTC_SetDate+0x8e>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80031aa:	78f0      	ldrb	r0, [r6, #3]
 80031ac:	f7ff ff5c 	bl	8003068 <RTC_ByteToBcd2>
 80031b0:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80031b2:	7870      	ldrb	r0, [r6, #1]
 80031b4:	f7ff ff58 	bl	8003068 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80031b8:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80031bc:	78b0      	ldrb	r0, [r6, #2]
 80031be:	f7ff ff53 	bl	8003068 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80031c2:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13));
 80031c4:	7830      	ldrb	r0, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80031c6:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031ca:	6823      	ldr	r3, [r4, #0]
 80031cc:	22ca      	movs	r2, #202	; 0xca
 80031ce:	625a      	str	r2, [r3, #36]	; 0x24
 80031d0:	6823      	ldr	r3, [r4, #0]
 80031d2:	2253      	movs	r2, #83	; 0x53
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80031d6:	4620      	mov	r0, r4
 80031d8:	f7ff fec5 	bl	8002f66 <RTC_EnterInitMode>
 80031dc:	4606      	mov	r6, r0
 80031de:	bb08      	cbnz	r0, 8003224 <HAL_RTC_SetDate+0xa4>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80031e0:	6822      	ldr	r2, [r4, #0]
 80031e2:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <HAL_RTC_SetDate+0xd8>)
 80031e4:	402b      	ands	r3, r5
 80031e6:	6053      	str	r3, [r2, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80031e8:	6822      	ldr	r2, [r4, #0]
 80031ea:	68d3      	ldr	r3, [r2, #12]
 80031ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031f0:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f013 0f20 	tst.w	r3, #32
 80031fa:	d01c      	beq.n	8003236 <HAL_RTC_SetDate+0xb6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	22ff      	movs	r2, #255	; 0xff
 8003200:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8003202:	2301      	movs	r3, #1
 8003204:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8003206:	2300      	movs	r3, #0
 8003208:	7723      	strb	r3, [r4, #28]
}
 800320a:	4630      	mov	r0, r6
 800320c:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800320e:	78f3      	ldrb	r3, [r6, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 8003210:	7875      	ldrb	r5, [r6, #1]
 8003212:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003214:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  ((uint32_t)sDate->Date) | \
 8003218:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800321a:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));
 800321c:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800321e:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
 8003222:	e7d2      	b.n	80031ca <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	22ff      	movs	r2, #255	; 0xff
 8003228:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800322a:	2304      	movs	r3, #4
 800322c:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800322e:	2300      	movs	r3, #0
 8003230:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8003232:	2601      	movs	r6, #1
 8003234:	e7e9      	b.n	800320a <HAL_RTC_SetDate+0x8a>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003236:	4620      	mov	r0, r4
 8003238:	f7ff fe7c 	bl	8002f34 <HAL_RTC_WaitForSynchro>
 800323c:	2800      	cmp	r0, #0
 800323e:	d0dd      	beq.n	80031fc <HAL_RTC_SetDate+0x7c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003240:	6823      	ldr	r3, [r4, #0]
 8003242:	22ff      	movs	r2, #255	; 0xff
 8003244:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003246:	2304      	movs	r3, #4
 8003248:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800324a:	2300      	movs	r3, #0
 800324c:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 800324e:	2601      	movs	r6, #1
 8003250:	e7db      	b.n	800320a <HAL_RTC_SetDate+0x8a>
 __HAL_LOCK(hrtc);
 8003252:	2602      	movs	r6, #2
 8003254:	e7d9      	b.n	800320a <HAL_RTC_SetDate+0x8a>
 8003256:	bf00      	nop
 8003258:	00ffff3f 	.word	0x00ffff3f

0800325c <HAL_RTC_SetAlarm>:
{
 800325c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800325e:	7f03      	ldrb	r3, [r0, #28]
 8003260:	2b01      	cmp	r3, #1
 8003262:	f000 80a9 	beq.w	80033b8 <HAL_RTC_SetAlarm+0x15c>
 8003266:	4604      	mov	r4, r0
 8003268:	460d      	mov	r5, r1
 800326a:	2301      	movs	r3, #1
 800326c:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800326e:	2302      	movs	r3, #2
 8003270:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8003272:	2a00      	cmp	r2, #0
 8003274:	d14d      	bne.n	8003312 <HAL_RTC_SetAlarm+0xb6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003276:	6803      	ldr	r3, [r0, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800327e:	d101      	bne.n	8003284 <HAL_RTC_SetAlarm+0x28>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8003280:	2300      	movs	r3, #0
 8003282:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8003284:	6a2e      	ldr	r6, [r5, #32]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8003286:	7828      	ldrb	r0, [r5, #0]
 8003288:	f7ff feee 	bl	8003068 <RTC_ByteToBcd2>
 800328c:	0407      	lsls	r7, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800328e:	7868      	ldrb	r0, [r5, #1]
 8003290:	f7ff feea 	bl	8003068 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8003294:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003298:	78a8      	ldrb	r0, [r5, #2]
 800329a:	f7ff fee5 	bl	8003068 <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800329e:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80032a0:	7b28      	ldrb	r0, [r5, #12]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80032a2:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80032a6:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 80032aa:	f7ff fedd 	bl	8003068 <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80032ae:	ea47 6700 	orr.w	r7, r7, r0, lsl #24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80032b2:	4337      	orrs	r7, r6
              ((uint32_t)sAlarm->AlarmMask));
 80032b4:	69ae      	ldr	r6, [r5, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80032b6:	433e      	orrs	r6, r7
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80032b8:	686f      	ldr	r7, [r5, #4]
 80032ba:	69eb      	ldr	r3, [r5, #28]
 80032bc:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	22ca      	movs	r2, #202	; 0xca
 80032c2:	625a      	str	r2, [r3, #36]	; 0x24
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	2253      	movs	r2, #83	; 0x53
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 80032ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80032cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032d0:	d039      	beq.n	8003346 <HAL_RTC_SetAlarm+0xea>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80032d2:	6822      	ldr	r2, [r4, #0]
 80032d4:	6893      	ldr	r3, [r2, #8]
 80032d6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032da:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80032dc:	6822      	ldr	r2, [r4, #0]
 80032de:	6893      	ldr	r3, [r2, #8]
 80032e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032e4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80032e6:	f7fe fa11 	bl	800170c <HAL_GetTick>
 80032ea:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	f012 0f02 	tst.w	r2, #2
 80032f4:	d150      	bne.n	8003398 <HAL_RTC_SetAlarm+0x13c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80032f6:	f7fe fa09 	bl	800170c <HAL_GetTick>
 80032fa:	1b40      	subs	r0, r0, r5
 80032fc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003300:	d9f4      	bls.n	80032ec <HAL_RTC_SetAlarm+0x90>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	22ff      	movs	r2, #255	; 0xff
 8003306:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003308:	2003      	movs	r0, #3
 800330a:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800330c:	2300      	movs	r3, #0
 800330e:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8003310:	e051      	b.n	80033b6 <HAL_RTC_SetAlarm+0x15a>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003312:	6803      	ldr	r3, [r0, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f013 0f40 	tst.w	r3, #64	; 0x40
 800331a:	d101      	bne.n	8003320 <HAL_RTC_SetAlarm+0xc4>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800331c:	2300      	movs	r3, #0
 800331e:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8003320:	6a2e      	ldr	r6, [r5, #32]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8003322:	782a      	ldrb	r2, [r5, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8003324:	786b      	ldrb	r3, [r5, #1]
 8003326:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8003328:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800332c:	78aa      	ldrb	r2, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800332e:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8003330:	7b2a      	ldrb	r2, [r5, #12]
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8003336:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800333a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800333e:	431e      	orrs	r6, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003340:	69ab      	ldr	r3, [r5, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8003342:	431e      	orrs	r6, r3
 8003344:	e7b8      	b.n	80032b8 <HAL_RTC_SetAlarm+0x5c>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003346:	6822      	ldr	r2, [r4, #0]
 8003348:	6893      	ldr	r3, [r2, #8]
 800334a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800334e:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003350:	6822      	ldr	r2, [r4, #0]
 8003352:	6893      	ldr	r3, [r2, #8]
 8003354:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003358:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800335a:	f7fe f9d7 	bl	800170c <HAL_GetTick>
 800335e:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	f012 0f01 	tst.w	r2, #1
 8003368:	d10d      	bne.n	8003386 <HAL_RTC_SetAlarm+0x12a>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800336a:	f7fe f9cf 	bl	800170c <HAL_GetTick>
 800336e:	1b40      	subs	r0, r0, r5
 8003370:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003374:	d9f4      	bls.n	8003360 <HAL_RTC_SetAlarm+0x104>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	22ff      	movs	r2, #255	; 0xff
 800337a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800337c:	2003      	movs	r0, #3
 800337e:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8003380:	2300      	movs	r3, #0
 8003382:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8003384:	e017      	b.n	80033b6 <HAL_RTC_SetAlarm+0x15a>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003386:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003388:	6823      	ldr	r3, [r4, #0]
 800338a:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800338c:	6822      	ldr	r2, [r4, #0]
 800338e:	6893      	ldr	r3, [r2, #8]
 8003390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003394:	6093      	str	r3, [r2, #8]
 8003396:	e007      	b.n	80033a8 <HAL_RTC_SetAlarm+0x14c>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003398:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800339e:	6822      	ldr	r2, [r4, #0]
 80033a0:	6893      	ldr	r3, [r2, #8]
 80033a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033a6:	6093      	str	r3, [r2, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	22ff      	movs	r2, #255	; 0xff
 80033ac:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80033ae:	2301      	movs	r3, #1
 80033b0:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 80033b2:	2000      	movs	r0, #0
 80033b4:	7720      	strb	r0, [r4, #28]
}
 80033b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 80033b8:	2002      	movs	r0, #2
 80033ba:	e7fc      	b.n	80033b6 <HAL_RTC_SetAlarm+0x15a>

080033bc <HAL_RTCEx_SetTimeStamp>:
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033bc:	7f03      	ldrb	r3, [r0, #28]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d028      	beq.n	8003414 <HAL_RTCEx_SetTimeStamp+0x58>
{
 80033c2:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hrtc);
 80033c4:	2401      	movs	r4, #1
 80033c6:	7704      	strb	r4, [r0, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033c8:	2302      	movs	r3, #2
 80033ca:	7743      	strb	r3, [r0, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80033cc:	6805      	ldr	r5, [r0, #0]
 80033ce:	68ae      	ldr	r6, [r5, #8]
 80033d0:	f6a3 030b 	subw	r3, r3, #2059	; 0x80b
 80033d4:	4033      	ands	r3, r6

  tmpreg|= TimeStampEdge;
 80033d6:	4319      	orrs	r1, r3

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033d8:	23ca      	movs	r3, #202	; 0xca
 80033da:	626b      	str	r3, [r5, #36]	; 0x24
 80033dc:	6803      	ldr	r3, [r0, #0]
 80033de:	2553      	movs	r5, #83	; 0x53
 80033e0:	625d      	str	r5, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80033e2:	6805      	ldr	r5, [r0, #0]
 80033e4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80033e6:	f023 0306 	bic.w	r3, r3, #6
 80033ea:	64eb      	str	r3, [r5, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80033ec:	6805      	ldr	r5, [r0, #0]
 80033ee:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80033f0:	431a      	orrs	r2, r3
 80033f2:	64ea      	str	r2, [r5, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80033f4:	6803      	ldr	r3, [r0, #0]
 80033f6:	6099      	str	r1, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80033f8:	6802      	ldr	r2, [r0, #0]
 80033fa:	6893      	ldr	r3, [r2, #8]
 80033fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003400:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003402:	6803      	ldr	r3, [r0, #0]
 8003404:	22ff      	movs	r2, #255	; 0xff
 8003406:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003408:	7744      	strb	r4, [r0, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800340a:	2300      	movs	r3, #0
 800340c:	7703      	strb	r3, [r0, #28]

  return HAL_OK;
 800340e:	4618      	mov	r0, r3
}
 8003410:	bc70      	pop	{r4, r5, r6}
 8003412:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8003414:	2002      	movs	r0, #2
}
 8003416:	4770      	bx	lr

08003418 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003418:	b570      	push	{r4, r5, r6, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003422:	6800      	ldr	r0, [r0, #0]
 8003424:	f000 fff0 	bl	8004408 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003428:	4605      	mov	r5, r0
 800342a:	b110      	cbz	r0, 8003432 <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 800342c:	4628      	mov	r0, r5
 800342e:	b002      	add	sp, #8
 8003430:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003432:	6820      	ldr	r0, [r4, #0]
 8003434:	f000 fffb 	bl	800442e <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003438:	b938      	cbnz	r0, 800344a <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800343a:	2301      	movs	r3, #1
 800343c:	64a3      	str	r3, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800343e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003440:	2b01      	cmp	r3, #1
 8003442:	d00b      	beq.n	800345c <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003444:	462e      	mov	r6, r5
 8003446:	4628      	mov	r0, r5
 8003448:	e014      	b.n	8003474 <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800344a:	2300      	movs	r3, #0
 800344c:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800344e:	6820      	ldr	r0, [r4, #0]
 8003450:	f000 ffda 	bl	8004408 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003454:	2800      	cmp	r0, #0
 8003456:	d0f2      	beq.n	800343e <SD_PowerON+0x26>
      return errorstate;
 8003458:	4605      	mov	r5, r0
 800345a:	e7e7      	b.n	800342c <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800345c:	2100      	movs	r1, #0
 800345e:	6820      	ldr	r0, [r4, #0]
 8003460:	f000 fffc 	bl	800445c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003464:	2800      	cmp	r0, #0
 8003466:	d0ed      	beq.n	8003444 <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003468:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800346c:	e7de      	b.n	800342c <SD_PowerON+0x14>
    count++;
 800346e:	9b01      	ldr	r3, [sp, #4]
 8003470:	3301      	adds	r3, #1
 8003472:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003474:	9a01      	ldr	r2, [sp, #4]
 8003476:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800347a:	429a      	cmp	r2, r3
 800347c:	d813      	bhi.n	80034a6 <SD_PowerON+0x8e>
 800347e:	b996      	cbnz	r6, 80034a6 <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003480:	2100      	movs	r1, #0
 8003482:	6820      	ldr	r0, [r4, #0]
 8003484:	f000 ffea 	bl	800445c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003488:	b9e0      	cbnz	r0, 80034c4 <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800348a:	4912      	ldr	r1, [pc, #72]	; (80034d4 <SD_PowerON+0xbc>)
 800348c:	6820      	ldr	r0, [r4, #0]
 800348e:	f000 fffd 	bl	800448c <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003492:	4606      	mov	r6, r0
 8003494:	b9c0      	cbnz	r0, 80034c8 <SD_PowerON+0xb0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003496:	2100      	movs	r1, #0
 8003498:	6820      	ldr	r0, [r4, #0]
 800349a:	f000 fe76 	bl	800418a <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800349e:	0fc3      	lsrs	r3, r0, #31
 80034a0:	d0e5      	beq.n	800346e <SD_PowerON+0x56>
 80034a2:	461e      	mov	r6, r3
 80034a4:	e7e3      	b.n	800346e <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80034a6:	9a01      	ldr	r2, [sp, #4]
 80034a8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d80e      	bhi.n	80034ce <SD_PowerON+0xb6>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80034b0:	f010 4380 	ands.w	r3, r0, #1073741824	; 0x40000000
 80034b4:	d002      	beq.n	80034bc <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80034b6:	2301      	movs	r3, #1
 80034b8:	6463      	str	r3, [r4, #68]	; 0x44
 80034ba:	e7b7      	b.n	800342c <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDSC;
 80034bc:	2200      	movs	r2, #0
 80034be:	6462      	str	r2, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 80034c0:	461d      	mov	r5, r3
 80034c2:	e7b3      	b.n	800342c <SD_PowerON+0x14>
      return errorstate;
 80034c4:	4605      	mov	r5, r0
 80034c6:	e7b1      	b.n	800342c <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80034c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80034cc:	e7ae      	b.n	800342c <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80034ce:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 80034d2:	e7ab      	b.n	800342c <SD_PowerON+0x14>
 80034d4:	c1100000 	.word	0xc1100000

080034d8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80034d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034da:	b089      	sub	sp, #36	; 0x24
 80034dc:	4604      	mov	r4, r0
 80034de:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80034e0:	f7fe f914 	bl	800170c <HAL_GetTick>
 80034e4:	4606      	mov	r6, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 80034e6:	2300      	movs	r3, #0
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80034ec:	2108      	movs	r1, #8
 80034ee:	6820      	ldr	r0, [r4, #0]
 80034f0:	f000 ff5a 	bl	80043a8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80034f4:	4605      	mov	r5, r0
 80034f6:	b110      	cbz	r0, 80034fe <SD_FindSCR+0x26>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 80034f8:	4628      	mov	r0, r5
 80034fa:	b009      	add	sp, #36	; 0x24
 80034fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80034fe:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003500:	0409      	lsls	r1, r1, #16
 8003502:	6820      	ldr	r0, [r4, #0]
 8003504:	f000 ffaa 	bl	800445c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003508:	4605      	mov	r5, r0
 800350a:	2800      	cmp	r0, #0
 800350c:	d1f4      	bne.n	80034f8 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800350e:	f04f 33ff 	mov.w	r3, #4294967295
 8003512:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8003514:	2308      	movs	r3, #8
 8003516:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8003518:	2330      	movs	r3, #48	; 0x30
 800351a:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800351c:	2302      	movs	r3, #2
 800351e:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003520:	2300      	movs	r3, #0
 8003522:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8003524:	2301      	movs	r3, #1
 8003526:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003528:	a902      	add	r1, sp, #8
 800352a:	6820      	ldr	r0, [r4, #0]
 800352c:	f000 ff2a 	bl	8004384 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003530:	6820      	ldr	r0, [r4, #0]
 8003532:	f000 ffdd 	bl	80044f0 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003536:	4605      	mov	r5, r0
 8003538:	b158      	cbz	r0, 8003552 <SD_FindSCR+0x7a>
 800353a:	e7dd      	b.n	80034f8 <SD_FindSCR+0x20>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800353c:	f000 fe00 	bl	8004140 <SDMMC_ReadFIFO>
 8003540:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
      index++;
 8003544:	3501      	adds	r5, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003546:	f7fe f8e1 	bl	800170c <HAL_GetTick>
 800354a:	1b83      	subs	r3, r0, r6
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d03f      	beq.n	80035d2 <SD_FindSCR+0xfa>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8003552:	6820      	ldr	r0, [r4, #0]
 8003554:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003556:	f013 0f2a 	tst.w	r3, #42	; 0x2a
 800355a:	d107      	bne.n	800356c <SD_FindSCR+0x94>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800355c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800355e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003562:	d1eb      	bne.n	800353c <SD_FindSCR+0x64>
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8003564:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003566:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800356a:	d1ec      	bne.n	8003546 <SD_FindSCR+0x6e>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800356c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800356e:	f013 0f08 	tst.w	r3, #8
 8003572:	d125      	bne.n	80035c0 <SD_FindSCR+0xe8>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003574:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003576:	f013 0f02 	tst.w	r3, #2
 800357a:	d124      	bne.n	80035c6 <SD_FindSCR+0xee>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800357c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800357e:	f015 0520 	ands.w	r5, r5, #32
 8003582:	d123      	bne.n	80035cc <SD_FindSCR+0xf4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003584:	f240 533a 	movw	r3, #1338	; 0x53a
 8003588:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800358a:	9a01      	ldr	r2, [sp, #4]
 800358c:	0213      	lsls	r3, r2, #8
 800358e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003592:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003596:	0a11      	lsrs	r1, r2, #8
 8003598:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800359c:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800359e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80035a2:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80035a4:	9a00      	ldr	r2, [sp, #0]
 80035a6:	0213      	lsls	r3, r2, #8
 80035a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80035ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80035b0:	0a11      	lsrs	r1, r2, #8
 80035b2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80035b6:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80035b8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80035bc:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 80035be:	e79b      	b.n	80034f8 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80035c0:	2508      	movs	r5, #8
 80035c2:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80035c4:	e798      	b.n	80034f8 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80035c6:	2502      	movs	r5, #2
 80035c8:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80035ca:	e795      	b.n	80034f8 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80035cc:	2520      	movs	r5, #32
 80035ce:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 80035d0:	e792      	b.n	80034f8 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 80035d2:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80035d6:	e78f      	b.n	80034f8 <SD_FindSCR+0x20>

080035d8 <SD_WideBus_Enable>:
{
 80035d8:	b510      	push	{r4, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 80035de:	2100      	movs	r1, #0
 80035e0:	9100      	str	r1, [sp, #0]
 80035e2:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80035e4:	6800      	ldr	r0, [r0, #0]
 80035e6:	f000 fdd0 	bl	800418a <SDMMC_GetResponse>
 80035ea:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80035ee:	d113      	bne.n	8003618 <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 80035f0:	4669      	mov	r1, sp
 80035f2:	4620      	mov	r0, r4
 80035f4:	f7ff ff70 	bl	80034d8 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80035f8:	b980      	cbnz	r0, 800361c <SD_WideBus_Enable+0x44>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80035fa:	9b01      	ldr	r3, [sp, #4]
 80035fc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003600:	d00e      	beq.n	8003620 <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003602:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003604:	0409      	lsls	r1, r1, #16
 8003606:	6820      	ldr	r0, [r4, #0]
 8003608:	f000 ff28 	bl	800445c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800360c:	b930      	cbnz	r0, 800361c <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800360e:	2102      	movs	r1, #2
 8003610:	6820      	ldr	r0, [r4, #0]
 8003612:	f000 ff55 	bl	80044c0 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003616:	e001      	b.n	800361c <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003618:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 800361c:	b002      	add	sp, #8
 800361e:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003620:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003624:	e7fa      	b.n	800361c <SD_WideBus_Enable+0x44>

08003626 <SD_WideBus_Disable>:
{
 8003626:	b510      	push	{r4, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 800362c:	2100      	movs	r1, #0
 800362e:	9100      	str	r1, [sp, #0]
 8003630:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003632:	6800      	ldr	r0, [r0, #0]
 8003634:	f000 fda9 	bl	800418a <SDMMC_GetResponse>
 8003638:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800363c:	d113      	bne.n	8003666 <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 800363e:	4669      	mov	r1, sp
 8003640:	4620      	mov	r0, r4
 8003642:	f7ff ff49 	bl	80034d8 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003646:	b980      	cbnz	r0, 800366a <SD_WideBus_Disable+0x44>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003648:	9b01      	ldr	r3, [sp, #4]
 800364a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800364e:	d00e      	beq.n	800366e <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003650:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003652:	0409      	lsls	r1, r1, #16
 8003654:	6820      	ldr	r0, [r4, #0]
 8003656:	f000 ff01 	bl	800445c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800365a:	b930      	cbnz	r0, 800366a <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800365c:	2100      	movs	r1, #0
 800365e:	6820      	ldr	r0, [r4, #0]
 8003660:	f000 ff2e 	bl	80044c0 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003664:	e001      	b.n	800366a <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003666:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 800366a:	b002      	add	sp, #8
 800366c:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800366e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003672:	e7fa      	b.n	800366a <SD_WideBus_Disable+0x44>

08003674 <HAL_SD_GetCardCSD>:
{
 8003674:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003676:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003678:	0f9b      	lsrs	r3, r3, #30
 800367a:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800367c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800367e:	f3c3 6383 	ubfx	r3, r3, #26, #4
 8003682:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003684:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800368e:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8003692:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003694:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 8003698:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800369a:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 800369e:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80036a0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80036a2:	0d1b      	lsrs	r3, r3, #20
 80036a4:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80036a6:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80036b0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80036b2:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80036b6:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80036b8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80036ba:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80036be:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80036c0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80036c2:	f3c3 3340 	ubfx	r3, r3, #13, #1
 80036c6:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80036c8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80036ca:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80036ce:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80036d0:	2300      	movs	r3, #0
 80036d2:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80036d4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f040 8088 	bne.w	80037ec <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80036dc:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80036de:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036e2:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 80036e6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80036e8:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 80036ec:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80036ee:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80036f0:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 80036f4:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80036f6:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003700:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003702:	f3c3 5342 	ubfx	r3, r3, #21, #3
 8003706:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003708:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800370a:	f3c3 4382 	ubfx	r3, r3, #18, #3
 800370e:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003710:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003712:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 8003716:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003718:	690b      	ldr	r3, [r1, #16]
 800371a:	3301      	adds	r3, #1
 800371c:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800371e:	7e0a      	ldrb	r2, [r1, #24]
 8003720:	f002 0207 	and.w	r2, r2, #7
 8003724:	3202      	adds	r2, #2
 8003726:	fa03 f202 	lsl.w	r2, r3, r2
 800372a:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800372c:	7a0b      	ldrb	r3, [r1, #8]
 800372e:	f003 040f 	and.w	r4, r3, #15
 8003732:	2301      	movs	r3, #1
 8003734:	40a3      	lsls	r3, r4
 8003736:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003738:	0a5b      	lsrs	r3, r3, #9
 800373a:	fb03 f302 	mul.w	r3, r3, r2
 800373e:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003740:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003744:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003746:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003748:	f3c3 3380 	ubfx	r3, r3, #14, #1
 800374c:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800374e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003750:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8003754:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003756:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800375c:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800375e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003760:	0fdb      	lsrs	r3, r3, #31
 8003762:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003764:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003766:	f3c3 7341 	ubfx	r3, r3, #29, #2
 800376a:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800376c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800376e:	f3c3 6382 	ubfx	r3, r3, #26, #3
 8003772:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003774:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003776:	f3c3 5383 	ubfx	r3, r3, #22, #4
 800377a:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800377c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800377e:	f3c3 5340 	ubfx	r3, r3, #21, #1
 8003782:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 8003786:	2300      	movs	r3, #0
 8003788:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800378c:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
 8003790:	f002 0201 	and.w	r2, r2, #1
 8003794:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003798:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800379a:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800379e:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80037a2:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80037a4:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80037a8:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80037ac:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80037ae:	f3c2 3240 	ubfx	r2, r2, #13, #1
 80037b2:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80037b6:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80037b8:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80037bc:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80037c0:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80037c2:	f3c2 2281 	ubfx	r2, r2, #10, #2
 80037c6:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80037ca:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80037cc:	f3c2 2201 	ubfx	r2, r2, #8, #2
 80037d0:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80037d4:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80037d6:	f3c2 0246 	ubfx	r2, r2, #1, #7
 80037da:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80037de:	2201      	movs	r2, #1
 80037e0:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 80037e4:	4618      	mov	r0, r3
}
 80037e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037ea:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d111      	bne.n	8003814 <HAL_SD_GetCardCSD+0x1a0>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80037f0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80037f2:	041b      	lsls	r3, r3, #16
 80037f4:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80037f8:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 80037fc:	4313      	orrs	r3, r2
 80037fe:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003800:	690b      	ldr	r3, [r1, #16]
 8003802:	3301      	adds	r3, #1
 8003804:	029b      	lsls	r3, r3, #10
 8003806:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003808:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800380a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800380e:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003810:	6603      	str	r3, [r0, #96]	; 0x60
 8003812:	e798      	b.n	8003746 <HAL_SD_GetCardCSD+0xd2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003814:	6803      	ldr	r3, [r0, #0]
 8003816:	4a05      	ldr	r2, [pc, #20]	; (800382c <HAL_SD_GetCardCSD+0x1b8>)
 8003818:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800381a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800381c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003820:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003822:	2301      	movs	r3, #1
 8003824:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8003828:	4618      	mov	r0, r3
 800382a:	e7dc      	b.n	80037e6 <HAL_SD_GetCardCSD+0x172>
 800382c:	004005ff 	.word	0x004005ff

08003830 <SD_InitCard>:
{
 8003830:	b570      	push	{r4, r5, r6, lr}
 8003832:	b090      	sub	sp, #64	; 0x40
 8003834:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 8003836:	2301      	movs	r3, #1
 8003838:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800383c:	6800      	ldr	r0, [r0, #0]
 800383e:	f000 fc8a 	bl	8004156 <SDMMC_GetPowerState>
 8003842:	2800      	cmp	r0, #0
 8003844:	d06c      	beq.n	8003920 <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003846:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003848:	2b03      	cmp	r3, #3
 800384a:	d145      	bne.n	80038d8 <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800384c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800384e:	2b03      	cmp	r3, #3
 8003850:	d15d      	bne.n	800390e <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003852:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003854:	2b03      	cmp	r3, #3
 8003856:	d01d      	beq.n	8003894 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 8003858:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800385c:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800385e:	0409      	lsls	r1, r1, #16
 8003860:	6820      	ldr	r0, [r4, #0]
 8003862:	f000 fe72 	bl	800454a <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003866:	4605      	mov	r5, r0
 8003868:	2800      	cmp	r0, #0
 800386a:	d15b      	bne.n	8003924 <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800386c:	2100      	movs	r1, #0
 800386e:	6820      	ldr	r0, [r4, #0]
 8003870:	f000 fc8b 	bl	800418a <SDMMC_GetResponse>
 8003874:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003876:	2104      	movs	r1, #4
 8003878:	6820      	ldr	r0, [r4, #0]
 800387a:	f000 fc86 	bl	800418a <SDMMC_GetResponse>
 800387e:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003880:	2108      	movs	r1, #8
 8003882:	6820      	ldr	r0, [r4, #0]
 8003884:	f000 fc81 	bl	800418a <SDMMC_GetResponse>
 8003888:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800388a:	210c      	movs	r1, #12
 800388c:	6820      	ldr	r0, [r4, #0]
 800388e:	f000 fc7c 	bl	800418a <SDMMC_GetResponse>
 8003892:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003894:	2104      	movs	r1, #4
 8003896:	6820      	ldr	r0, [r4, #0]
 8003898:	f000 fc77 	bl	800418a <SDMMC_GetResponse>
 800389c:	0d00      	lsrs	r0, r0, #20
 800389e:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80038a0:	a905      	add	r1, sp, #20
 80038a2:	4620      	mov	r0, r4
 80038a4:	f7ff fee6 	bl	8003674 <HAL_SD_GetCardCSD>
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d13e      	bne.n	800392a <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80038ac:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80038ae:	0412      	lsls	r2, r2, #16
 80038b0:	2300      	movs	r3, #0
 80038b2:	6820      	ldr	r0, [r4, #0]
 80038b4:	f000 fd90 	bl	80043d8 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80038b8:	4605      	mov	r5, r0
 80038ba:	bb98      	cbnz	r0, 8003924 <SD_InitCard+0xf4>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80038bc:	4623      	mov	r3, r4
 80038be:	f853 6b10 	ldr.w	r6, [r3], #16
 80038c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038c6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80038ca:	3404      	adds	r4, #4
 80038cc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80038d0:	4630      	mov	r0, r6
 80038d2:	f000 fc19 	bl	8004108 <SDMMC_Init>
  return HAL_SD_ERROR_NONE;
 80038d6:	e025      	b.n	8003924 <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80038d8:	6820      	ldr	r0, [r4, #0]
 80038da:	f000 fe21 	bl	8004520 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80038de:	4605      	mov	r5, r0
 80038e0:	bb00      	cbnz	r0, 8003924 <SD_InitCard+0xf4>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80038e2:	2100      	movs	r1, #0
 80038e4:	6820      	ldr	r0, [r4, #0]
 80038e6:	f000 fc50 	bl	800418a <SDMMC_GetResponse>
 80038ea:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80038ec:	2104      	movs	r1, #4
 80038ee:	6820      	ldr	r0, [r4, #0]
 80038f0:	f000 fc4b 	bl	800418a <SDMMC_GetResponse>
 80038f4:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80038f6:	2108      	movs	r1, #8
 80038f8:	6820      	ldr	r0, [r4, #0]
 80038fa:	f000 fc46 	bl	800418a <SDMMC_GetResponse>
 80038fe:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003900:	210c      	movs	r1, #12
 8003902:	6820      	ldr	r0, [r4, #0]
 8003904:	f000 fc41 	bl	800418a <SDMMC_GetResponse>
 8003908:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 800390c:	e79e      	b.n	800384c <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800390e:	f10d 0112 	add.w	r1, sp, #18
 8003912:	6820      	ldr	r0, [r4, #0]
 8003914:	f000 fe2e 	bl	8004574 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003918:	4605      	mov	r5, r0
 800391a:	2800      	cmp	r0, #0
 800391c:	d099      	beq.n	8003852 <SD_InitCard+0x22>
 800391e:	e001      	b.n	8003924 <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003920:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8003924:	4628      	mov	r0, r5
 8003926:	b010      	add	sp, #64	; 0x40
 8003928:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800392a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800392e:	e7f9      	b.n	8003924 <SD_InitCard+0xf4>

08003930 <HAL_SD_InitCard>:
{
 8003930:	b530      	push	{r4, r5, lr}
 8003932:	b08b      	sub	sp, #44	; 0x2c
 8003934:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003936:	2300      	movs	r3, #0
 8003938:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800393a:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800393c:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800393e:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003940:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003942:	2376      	movs	r3, #118	; 0x76
 8003944:	9309      	str	r3, [sp, #36]	; 0x24
  status = SDMMC_Init(hsd->Instance, Init);
 8003946:	ab0a      	add	r3, sp, #40	; 0x28
 8003948:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800394c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003950:	ab04      	add	r3, sp, #16
 8003952:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003954:	6820      	ldr	r0, [r4, #0]
 8003956:	f000 fbd7 	bl	8004108 <SDMMC_Init>
  if(status != HAL_OK)
 800395a:	b118      	cbz	r0, 8003964 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 800395c:	2501      	movs	r5, #1
}
 800395e:	4628      	mov	r0, r5
 8003960:	b00b      	add	sp, #44	; 0x2c
 8003962:	bd30      	pop	{r4, r5, pc}
 8003964:	4605      	mov	r5, r0
  __HAL_SD_DISABLE(hsd);
 8003966:	6822      	ldr	r2, [r4, #0]
 8003968:	6853      	ldr	r3, [r2, #4]
 800396a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800396e:	6053      	str	r3, [r2, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003970:	6820      	ldr	r0, [r4, #0]
 8003972:	f000 fbe8 	bl	8004146 <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8003976:	6822      	ldr	r2, [r4, #0]
 8003978:	6853      	ldr	r3, [r2, #4]
 800397a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397e:	6053      	str	r3, [r2, #4]
  errorstate = SD_PowerON(hsd);
 8003980:	4620      	mov	r0, r4
 8003982:	f7ff fd49 	bl	8003418 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003986:	b130      	cbz	r0, 8003996 <HAL_SD_InitCard+0x66>
    hsd->State = HAL_SD_STATE_READY;
 8003988:	2501      	movs	r5, #1
 800398a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800398e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003990:	4303      	orrs	r3, r0
 8003992:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003994:	e7e3      	b.n	800395e <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 8003996:	4620      	mov	r0, r4
 8003998:	f7ff ff4a 	bl	8003830 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 800399c:	b130      	cbz	r0, 80039ac <HAL_SD_InitCard+0x7c>
    hsd->State = HAL_SD_STATE_READY;
 800399e:	2501      	movs	r5, #1
 80039a0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80039a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039a6:	4303      	orrs	r3, r0
 80039a8:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80039aa:	e7d8      	b.n	800395e <HAL_SD_InitCard+0x2e>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80039ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039b0:	6820      	ldr	r0, [r4, #0]
 80039b2:	f000 fcf9 	bl	80043a8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80039b6:	2800      	cmp	r0, #0
 80039b8:	d0d1      	beq.n	800395e <HAL_SD_InitCard+0x2e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	4904      	ldr	r1, [pc, #16]	; (80039d0 <HAL_SD_InitCard+0xa0>)
 80039be:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80039c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039c2:	4303      	orrs	r3, r0
 80039c4:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80039c6:	2501      	movs	r5, #1
 80039c8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 80039cc:	e7c7      	b.n	800395e <HAL_SD_InitCard+0x2e>
 80039ce:	bf00      	nop
 80039d0:	004005ff 	.word	0x004005ff

080039d4 <HAL_SD_Init>:
  if(hsd == NULL)
 80039d4:	b1a8      	cbz	r0, 8003a02 <HAL_SD_Init+0x2e>
{
 80039d6:	b510      	push	{r4, lr}
 80039d8:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 80039da:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80039de:	b163      	cbz	r3, 80039fa <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 80039e0:	2303      	movs	r3, #3
 80039e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80039e6:	4620      	mov	r0, r4
 80039e8:	f7ff ffa2 	bl	8003930 <HAL_SD_InitCard>
 80039ec:	b958      	cbnz	r0, 8003a06 <HAL_SD_Init+0x32>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80039ee:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80039f0:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80039f2:	2301      	movs	r3, #1
 80039f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80039f8:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 80039fa:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 80039fc:	f7fd fd82 	bl	8001504 <HAL_SD_MspInit>
 8003a00:	e7ee      	b.n	80039e0 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8003a02:	2001      	movs	r0, #1
}
 8003a04:	4770      	bx	lr
    return HAL_ERROR;
 8003a06:	2001      	movs	r0, #1
 8003a08:	e7f6      	b.n	80039f8 <HAL_SD_Init+0x24>
	...

08003a0c <HAL_SD_ConfigWideBusOperation>:
{
 8003a0c:	b530      	push	{r4, r5, lr}
 8003a0e:	b08b      	sub	sp, #44	; 0x2c
 8003a10:	4604      	mov	r4, r0
 8003a12:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8003a14:	2303      	movs	r3, #3
 8003a16:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003a1a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d01c      	beq.n	8003a5a <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003a20:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003a24:	d008      	beq.n	8003a38 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8003a26:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8003a2a:	d00a      	beq.n	8003a42 <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8003a2c:	b179      	cbz	r1, 8003a4e <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003a2e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003a30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a34:	6383      	str	r3, [r0, #56]	; 0x38
 8003a36:	e014      	b.n	8003a62 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a38:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	6383      	str	r3, [r0, #56]	; 0x38
 8003a40:	e00f      	b.n	8003a62 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8003a42:	f7ff fdc9 	bl	80035d8 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8003a46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a48:	4303      	orrs	r3, r0
 8003a4a:	63a3      	str	r3, [r4, #56]	; 0x38
 8003a4c:	e009      	b.n	8003a62 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 8003a4e:	f7ff fdea 	bl	8003626 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8003a52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a54:	4303      	orrs	r3, r0
 8003a56:	63a3      	str	r3, [r4, #56]	; 0x38
 8003a58:	e003      	b.n	8003a62 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a60:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003a62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a64:	b1c3      	cbz	r3, 8003a98 <HAL_SD_ConfigWideBusOperation+0x8c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	4a17      	ldr	r2, [pc, #92]	; (8003ac8 <HAL_SD_ConfigWideBusOperation+0xbc>)
 8003a6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a6c:	2501      	movs	r5, #1
 8003a6e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003a72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a76:	6820      	ldr	r0, [r4, #0]
 8003a78:	f000 fc96 	bl	80043a8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a7c:	b130      	cbz	r0, 8003a8c <HAL_SD_ConfigWideBusOperation+0x80>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a7e:	6823      	ldr	r3, [r4, #0]
 8003a80:	4911      	ldr	r1, [pc, #68]	; (8003ac8 <HAL_SD_ConfigWideBusOperation+0xbc>)
 8003a82:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003a84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a86:	4303      	orrs	r3, r0
 8003a88:	63a3      	str	r3, [r4, #56]	; 0x38
    status = HAL_ERROR;
 8003a8a:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8003a92:	4628      	mov	r0, r5
 8003a94:	b00b      	add	sp, #44	; 0x2c
 8003a96:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003a98:	6863      	ldr	r3, [r4, #4]
 8003a9a:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003a9c:	68a3      	ldr	r3, [r4, #8]
 8003a9e:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003aa0:	68e3      	ldr	r3, [r4, #12]
 8003aa2:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8003aa4:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003aa6:	6963      	ldr	r3, [r4, #20]
 8003aa8:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003aaa:	69a3      	ldr	r3, [r4, #24]
 8003aac:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDMMC_Init(hsd->Instance, Init);
 8003aae:	ab0a      	add	r3, sp, #40	; 0x28
 8003ab0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003ab4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003ab8:	ab04      	add	r3, sp, #16
 8003aba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003abc:	6820      	ldr	r0, [r4, #0]
 8003abe:	f000 fb23 	bl	8004108 <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 8003ac2:	2500      	movs	r5, #0
 8003ac4:	e7d5      	b.n	8003a72 <HAL_SD_ConfigWideBusOperation+0x66>
 8003ac6:	bf00      	nop
 8003ac8:	004005ff 	.word	0x004005ff

08003acc <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003acc:	b1e0      	cbz	r0, 8003b08 <HAL_SDRAM_Init+0x3c>
{   
 8003ace:	b538      	push	{r3, r4, r5, lr}
 8003ad0:	460d      	mov	r5, r1
 8003ad2:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003ad4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003ad8:	b18b      	cbz	r3, 8003afe <HAL_SDRAM_Init+0x32>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003ada:	2302      	movs	r3, #2
 8003adc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	f851 0b04 	ldr.w	r0, [r1], #4
 8003ae6:	f000 f9e7 	bl	8003eb8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003aea:	6862      	ldr	r2, [r4, #4]
 8003aec:	4629      	mov	r1, r5
 8003aee:	6820      	ldr	r0, [r4, #0]
 8003af0:	f000 fa1c 	bl	8003f2c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003af4:	2301      	movs	r3, #1
 8003af6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8003afa:	2000      	movs	r0, #0
}
 8003afc:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8003afe:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8003b02:	f7fd fd4d 	bl	80015a0 <HAL_SDRAM_MspInit>
 8003b06:	e7e8      	b.n	8003ada <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8003b08:	2001      	movs	r0, #1
}
 8003b0a:	4770      	bx	lr

08003b0c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b0c:	4770      	bx	lr
	...

08003b10 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b10:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d13a      	bne.n	8003b90 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b20:	6802      	ldr	r2, [r0, #0]
 8003b22:	68d3      	ldr	r3, [r2, #12]
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b2a:	6803      	ldr	r3, [r0, #0]
 8003b2c:	4a1a      	ldr	r2, [pc, #104]	; (8003b98 <HAL_TIM_Base_Start_IT+0x88>)
 8003b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b32:	bf18      	it	ne
 8003b34:	4293      	cmpne	r3, r2
 8003b36:	d01d      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x64>
 8003b38:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d019      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x64>
 8003b40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d015      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x64>
 8003b48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d011      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x64>
 8003b50:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d00d      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x64>
 8003b58:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d009      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x64>
 8003b60:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d005      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	f042 0201 	orr.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b70:	2000      	movs	r0, #0
 8003b72:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b74:	6899      	ldr	r1, [r3, #8]
 8003b76:	4a09      	ldr	r2, [pc, #36]	; (8003b9c <HAL_TIM_Base_Start_IT+0x8c>)
 8003b78:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7a:	2a06      	cmp	r2, #6
 8003b7c:	bf18      	it	ne
 8003b7e:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 8003b82:	d007      	beq.n	8003b94 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	4770      	bx	lr
    return HAL_ERROR;
 8003b90:	2001      	movs	r0, #1
 8003b92:	4770      	bx	lr
  return HAL_OK;
 8003b94:	2000      	movs	r0, #0
}
 8003b96:	4770      	bx	lr
 8003b98:	40010000 	.word	0x40010000
 8003b9c:	00010007 	.word	0x00010007

08003ba0 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_TIM_IRQHandler>:
{
 8003ba8:	b510      	push	{r4, lr}
 8003baa:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bac:	6803      	ldr	r3, [r0, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	f012 0f02 	tst.w	r2, #2
 8003bb4:	d011      	beq.n	8003bda <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	f012 0f02 	tst.w	r2, #2
 8003bbc:	d00d      	beq.n	8003bda <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bbe:	f06f 0202 	mvn.w	r2, #2
 8003bc2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bc8:	6803      	ldr	r3, [r0, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	f013 0f03 	tst.w	r3, #3
 8003bd0:	d079      	beq.n	8003cc6 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003bd2:	f7ff ffe6 	bl	8003ba2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	691a      	ldr	r2, [r3, #16]
 8003bde:	f012 0f04 	tst.w	r2, #4
 8003be2:	d012      	beq.n	8003c0a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	f012 0f04 	tst.w	r2, #4
 8003bea:	d00e      	beq.n	8003c0a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bec:	f06f 0204 	mvn.w	r2, #4
 8003bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003bfe:	d068      	beq.n	8003cd2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c00:	4620      	mov	r0, r4
 8003c02:	f7ff ffce 	bl	8003ba2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c06:	2300      	movs	r3, #0
 8003c08:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	691a      	ldr	r2, [r3, #16]
 8003c0e:	f012 0f08 	tst.w	r2, #8
 8003c12:	d012      	beq.n	8003c3a <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	f012 0f08 	tst.w	r2, #8
 8003c1a:	d00e      	beq.n	8003c3a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c1c:	f06f 0208 	mvn.w	r2, #8
 8003c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c22:	2304      	movs	r3, #4
 8003c24:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c26:	6823      	ldr	r3, [r4, #0]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	f013 0f03 	tst.w	r3, #3
 8003c2e:	d057      	beq.n	8003ce0 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c30:	4620      	mov	r0, r4
 8003c32:	f7ff ffb6 	bl	8003ba2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c36:	2300      	movs	r3, #0
 8003c38:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	691a      	ldr	r2, [r3, #16]
 8003c3e:	f012 0f10 	tst.w	r2, #16
 8003c42:	d012      	beq.n	8003c6a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	f012 0f10 	tst.w	r2, #16
 8003c4a:	d00e      	beq.n	8003c6a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c4c:	f06f 0210 	mvn.w	r2, #16
 8003c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c52:	2308      	movs	r3, #8
 8003c54:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003c5e:	d046      	beq.n	8003cee <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c60:	4620      	mov	r0, r4
 8003c62:	f7ff ff9e 	bl	8003ba2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c66:	2300      	movs	r3, #0
 8003c68:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	f012 0f01 	tst.w	r2, #1
 8003c72:	d003      	beq.n	8003c7c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	f012 0f01 	tst.w	r2, #1
 8003c7a:	d13f      	bne.n	8003cfc <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003c84:	d003      	beq.n	8003c8e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c86:	68da      	ldr	r2, [r3, #12]
 8003c88:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003c8c:	d13d      	bne.n	8003d0a <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003c96:	d003      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003c9e:	d13b      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003ca8:	d003      	beq.n	8003cb2 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003cb0:	d139      	bne.n	8003d26 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	691a      	ldr	r2, [r3, #16]
 8003cb6:	f012 0f20 	tst.w	r2, #32
 8003cba:	d003      	beq.n	8003cc4 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	f012 0f20 	tst.w	r2, #32
 8003cc2:	d137      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x18c>
}
 8003cc4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc6:	f7ff ff6b 	bl	8003ba0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f7ff ff6a 	bl	8003ba4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003cd0:	e781      	b.n	8003bd6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	f7ff ff64 	bl	8003ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f7ff ff63 	bl	8003ba4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003cde:	e792      	b.n	8003c06 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	f7ff ff5d 	bl	8003ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	f7ff ff5c 	bl	8003ba4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003cec:	e7a3      	b.n	8003c36 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cee:	4620      	mov	r0, r4
 8003cf0:	f7ff ff56 	bl	8003ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f7ff ff55 	bl	8003ba4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003cfa:	e7b4      	b.n	8003c66 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cfc:	f06f 0201 	mvn.w	r2, #1
 8003d00:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d02:	4620      	mov	r0, r4
 8003d04:	f7fd f836 	bl	8000d74 <HAL_TIM_PeriodElapsedCallback>
 8003d08:	e7b8      	b.n	8003c7c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d0e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003d10:	4620      	mov	r0, r4
 8003d12:	f000 f8ce 	bl	8003eb2 <HAL_TIMEx_BreakCallback>
 8003d16:	e7ba      	b.n	8003c8e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d18:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d1c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f000 f8c8 	bl	8003eb4 <HAL_TIMEx_Break2Callback>
 8003d24:	e7bc      	b.n	8003ca0 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d2a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	f7ff ff3a 	bl	8003ba6 <HAL_TIM_TriggerCallback>
 8003d32:	e7be      	b.n	8003cb2 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d34:	f06f 0220 	mvn.w	r2, #32
 8003d38:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f000 f8b8 	bl	8003eb0 <HAL_TIMEx_CommutCallback>
}
 8003d40:	e7c0      	b.n	8003cc4 <HAL_TIM_IRQHandler+0x11c>
	...

08003d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d44:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d46:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d48:	4c3a      	ldr	r4, [pc, #232]	; (8003e34 <TIM_Base_SetConfig+0xf0>)
 8003d4a:	42a0      	cmp	r0, r4
 8003d4c:	bf14      	ite	ne
 8003d4e:	2400      	movne	r4, #0
 8003d50:	2401      	moveq	r4, #1
 8003d52:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003d56:	bf14      	ite	ne
 8003d58:	4622      	movne	r2, r4
 8003d5a:	f044 0201 	orreq.w	r2, r4, #1
 8003d5e:	b9aa      	cbnz	r2, 8003d8c <TIM_Base_SetConfig+0x48>
 8003d60:	4d35      	ldr	r5, [pc, #212]	; (8003e38 <TIM_Base_SetConfig+0xf4>)
 8003d62:	42a8      	cmp	r0, r5
 8003d64:	bf14      	ite	ne
 8003d66:	2500      	movne	r5, #0
 8003d68:	2501      	moveq	r5, #1
 8003d6a:	4e34      	ldr	r6, [pc, #208]	; (8003e3c <TIM_Base_SetConfig+0xf8>)
 8003d6c:	42b0      	cmp	r0, r6
 8003d6e:	d00d      	beq.n	8003d8c <TIM_Base_SetConfig+0x48>
 8003d70:	b965      	cbnz	r5, 8003d8c <TIM_Base_SetConfig+0x48>
 8003d72:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8003d76:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8003d7a:	42a8      	cmp	r0, r5
 8003d7c:	bf14      	ite	ne
 8003d7e:	2500      	movne	r5, #0
 8003d80:	2501      	moveq	r5, #1
 8003d82:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003d86:	42b0      	cmp	r0, r6
 8003d88:	d000      	beq.n	8003d8c <TIM_Base_SetConfig+0x48>
 8003d8a:	b11d      	cbz	r5, 8003d94 <TIM_Base_SetConfig+0x50>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d90:	684d      	ldr	r5, [r1, #4]
 8003d92:	432b      	orrs	r3, r5
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d94:	2a00      	cmp	r2, #0
 8003d96:	d133      	bne.n	8003e00 <TIM_Base_SetConfig+0xbc>
 8003d98:	4a27      	ldr	r2, [pc, #156]	; (8003e38 <TIM_Base_SetConfig+0xf4>)
 8003d9a:	4290      	cmp	r0, r2
 8003d9c:	bf14      	ite	ne
 8003d9e:	2200      	movne	r2, #0
 8003da0:	2201      	moveq	r2, #1
 8003da2:	4d26      	ldr	r5, [pc, #152]	; (8003e3c <TIM_Base_SetConfig+0xf8>)
 8003da4:	42a8      	cmp	r0, r5
 8003da6:	d02b      	beq.n	8003e00 <TIM_Base_SetConfig+0xbc>
 8003da8:	bb52      	cbnz	r2, 8003e00 <TIM_Base_SetConfig+0xbc>
 8003daa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003dae:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8003db2:	4290      	cmp	r0, r2
 8003db4:	bf14      	ite	ne
 8003db6:	2200      	movne	r2, #0
 8003db8:	2201      	moveq	r2, #1
 8003dba:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003dbe:	42a8      	cmp	r0, r5
 8003dc0:	d01e      	beq.n	8003e00 <TIM_Base_SetConfig+0xbc>
 8003dc2:	b9ea      	cbnz	r2, 8003e00 <TIM_Base_SetConfig+0xbc>
 8003dc4:	4a1e      	ldr	r2, [pc, #120]	; (8003e40 <TIM_Base_SetConfig+0xfc>)
 8003dc6:	4290      	cmp	r0, r2
 8003dc8:	bf14      	ite	ne
 8003dca:	2200      	movne	r2, #0
 8003dcc:	2201      	moveq	r2, #1
 8003dce:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8003dd2:	42a8      	cmp	r0, r5
 8003dd4:	d014      	beq.n	8003e00 <TIM_Base_SetConfig+0xbc>
 8003dd6:	b99a      	cbnz	r2, 8003e00 <TIM_Base_SetConfig+0xbc>
 8003dd8:	4a1a      	ldr	r2, [pc, #104]	; (8003e44 <TIM_Base_SetConfig+0x100>)
 8003dda:	4290      	cmp	r0, r2
 8003ddc:	bf14      	ite	ne
 8003dde:	2200      	movne	r2, #0
 8003de0:	2201      	moveq	r2, #1
 8003de2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003de6:	42a8      	cmp	r0, r5
 8003de8:	d00a      	beq.n	8003e00 <TIM_Base_SetConfig+0xbc>
 8003dea:	b94a      	cbnz	r2, 8003e00 <TIM_Base_SetConfig+0xbc>
 8003dec:	4a16      	ldr	r2, [pc, #88]	; (8003e48 <TIM_Base_SetConfig+0x104>)
 8003dee:	4290      	cmp	r0, r2
 8003df0:	bf14      	ite	ne
 8003df2:	2200      	movne	r2, #0
 8003df4:	2201      	moveq	r2, #1
 8003df6:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 8003dfa:	42a8      	cmp	r0, r5
 8003dfc:	d000      	beq.n	8003e00 <TIM_Base_SetConfig+0xbc>
 8003dfe:	b11a      	cbz	r2, 8003e08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e04:	68ca      	ldr	r2, [r1, #12]
 8003e06:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e0c:	694a      	ldr	r2, [r1, #20]
 8003e0e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003e10:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e12:	688a      	ldr	r2, [r1, #8]
 8003e14:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e16:	680a      	ldr	r2, [r1, #0]
 8003e18:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e1a:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <TIM_Base_SetConfig+0x108>)
 8003e1c:	4298      	cmp	r0, r3
 8003e1e:	bf14      	ite	ne
 8003e20:	4623      	movne	r3, r4
 8003e22:	f044 0301 	orreq.w	r3, r4, #1
 8003e26:	b10b      	cbz	r3, 8003e2c <TIM_Base_SetConfig+0xe8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e28:	690b      	ldr	r3, [r1, #16]
 8003e2a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	6143      	str	r3, [r0, #20]
}
 8003e30:	bc70      	pop	{r4, r5, r6}
 8003e32:	4770      	bx	lr
 8003e34:	40010000 	.word	0x40010000
 8003e38:	40000800 	.word	0x40000800
 8003e3c:	40000400 	.word	0x40000400
 8003e40:	40014400 	.word	0x40014400
 8003e44:	40001800 	.word	0x40001800
 8003e48:	40002000 	.word	0x40002000
 8003e4c:	40010400 	.word	0x40010400

08003e50 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003e50:	b360      	cbz	r0, 8003eac <HAL_TIM_Base_Init+0x5c>
{
 8003e52:	b510      	push	{r4, lr}
 8003e54:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003e56:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003e5a:	b313      	cbz	r3, 8003ea2 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e62:	4621      	mov	r1, r4
 8003e64:	f851 0b04 	ldr.w	r0, [r1], #4
 8003e68:	f7ff ff6c 	bl	8003d44 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e72:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003e76:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003e7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003e7e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003e82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e8a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003e8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e92:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003e96:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003e9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003e9e:	2000      	movs	r0, #0
}
 8003ea0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003ea2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003ea6:	f7ff fe31 	bl	8003b0c <HAL_TIM_Base_MspInit>
 8003eaa:	e7d7      	b.n	8003e5c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003eac:	2001      	movs	r0, #1
}
 8003eae:	4770      	bx	lr

08003eb0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003eb4:	4770      	bx	lr
	...

08003eb8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003eb8:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8003eba:	680b      	ldr	r3, [r1, #0]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d018      	beq.n	8003ef2 <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003ec0:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003ec2:	4a19      	ldr	r2, [pc, #100]	; (8003f28 <FMC_SDRAM_Init+0x70>)
 8003ec4:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003ec6:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 8003ec8:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003eca:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 8003ecc:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 8003ece:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 8003ed0:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 8003ed2:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 8003ed4:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 8003ed6:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 8003ed8:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 8003eda:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 8003edc:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 8003ede:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 8003ee0:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 8003ee2:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 8003ee4:	6a49      	ldr	r1, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8003ee6:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003ee8:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003eea:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8003eec:	2000      	movs	r0, #0
 8003eee:	bc30      	pop	{r4, r5}
 8003ef0:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003ef2:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8003ef4:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003ef8:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 8003efa:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003efc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8003efe:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8003f00:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003f02:	4322      	orrs	r2, r4
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8003f04:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003f06:	4c08      	ldr	r4, [pc, #32]	; (8003f28 <FMC_SDRAM_Init+0x70>)
 8003f08:	401c      	ands	r4, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003f0a:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber       |\
 8003f0c:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003f0e:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 8003f10:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber       |\
 8003f12:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 8003f14:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth     |\
 8003f16:	432b      	orrs	r3, r5
                       Init->CASLatency          |\
 8003f18:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber  |\
 8003f1a:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 8003f1c:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 8003f1e:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003f20:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003f22:	6002      	str	r2, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8003f24:	6043      	str	r3, [r0, #4]
 8003f26:	e7e1      	b.n	8003eec <FMC_SDRAM_Init+0x34>
 8003f28:	ffff8000 	.word	0xffff8000

08003f2c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003f2c:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8003f2e:	2a01      	cmp	r2, #1
 8003f30:	d021      	beq.n	8003f76 <FMC_SDRAM_Timing_Init+0x4a>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003f32:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003f34:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003f38:	680b      	ldr	r3, [r1, #0]
 8003f3a:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8003f3c:	684c      	ldr	r4, [r1, #4]
 8003f3e:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003f40:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8003f44:	688c      	ldr	r4, [r1, #8]
 8003f46:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8003f48:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8003f4c:	68cc      	ldr	r4, [r1, #12]
 8003f4e:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8003f50:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8003f54:	690c      	ldr	r4, [r1, #16]
 8003f56:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8003f58:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 8003f5c:	694c      	ldr	r4, [r1, #20]
 8003f5e:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8003f60:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 8003f64:	6989      	ldr	r1, [r1, #24]
 8003f66:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003f68:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003f6c:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003f6e:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8003f70:	2000      	movs	r0, #0
 8003f72:	bc30      	pop	{r4, r5}
 8003f74:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003f76:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8003f78:	4c11      	ldr	r4, [pc, #68]	; (8003fc0 <FMC_SDRAM_Timing_Init+0x94>)
 8003f7a:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8003f7c:	68ca      	ldr	r2, [r1, #12]
 8003f7e:	1e55      	subs	r5, r2, #1
                        (((Timing->RPDelay)-1) << 20)); 
 8003f80:	694b      	ldr	r3, [r1, #20]
 8003f82:	1e5a      	subs	r2, r3, #1
 8003f84:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8003f86:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 8003f8a:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8003f8c:	68c4      	ldr	r4, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003f8e:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003f92:	680b      	ldr	r3, [r1, #0]
 8003f94:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8003f96:	684d      	ldr	r5, [r1, #4]
 8003f98:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003f9a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8003f9e:	688d      	ldr	r5, [r1, #8]
 8003fa0:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8003fa2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8003fa6:	690d      	ldr	r5, [r1, #16]
 8003fa8:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8003faa:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 8003fae:	6989      	ldr	r1, [r1, #24]
 8003fb0:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003fb2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003fb6:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003fb8:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8003fba:	60c3      	str	r3, [r0, #12]
 8003fbc:	e7d8      	b.n	8003f70 <FMC_SDRAM_Timing_Init+0x44>
 8003fbe:	bf00      	nop
 8003fc0:	ff0f0fff 	.word	0xff0f0fff

08003fc4 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <SDMMC_GetCmdError+0x30>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a0b      	ldr	r2, [pc, #44]	; (8003ff8 <SDMMC_GetCmdError+0x34>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	0a5a      	lsrs	r2, r3, #9
 8003fd0:	f241 3388 	movw	r3, #5000	; 0x1388
 8003fd4:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8003fd8:	461a      	mov	r2, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b13a      	cbz	r2, 8003fee <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8003fde:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003fe0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003fe4:	d0f8      	beq.n	8003fd8 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003fe6:	23c5      	movs	r3, #197	; 0xc5
 8003fe8:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8003fea:	2000      	movs	r0, #0
 8003fec:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8003fee:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003ff2:	4770      	bx	lr
 8003ff4:	20000000 	.word	0x20000000
 8003ff8:	10624dd3 	.word	0x10624dd3

08003ffc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8003ffc:	4601      	mov	r1, r0
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ffe:	4b14      	ldr	r3, [pc, #80]	; (8004050 <SDMMC_GetCmdResp2+0x54>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a14      	ldr	r2, [pc, #80]	; (8004054 <SDMMC_GetCmdResp2+0x58>)
 8004004:	fba2 2303 	umull	r2, r3, r2, r3
 8004008:	0a5a      	lsrs	r2, r3, #9
 800400a:	f241 3388 	movw	r3, #5000	; 0x1388
 800400e:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8004012:	461a      	mov	r2, r3
 8004014:	3b01      	subs	r3, #1
 8004016:	b1ba      	cbz	r2, 8004048 <SDMMC_GetCmdResp2+0x4c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8004018:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800401a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800401e:	d0f8      	beq.n	8004012 <SDMMC_GetCmdResp2+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004020:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004024:	d1f5      	bne.n	8004012 <SDMMC_GetCmdResp2+0x16>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004026:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004028:	f013 0f04 	tst.w	r3, #4
 800402c:	d106      	bne.n	800403c <SDMMC_GetCmdResp2+0x40>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800402e:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8004030:	f010 0001 	ands.w	r0, r0, #1
 8004034:	d105      	bne.n	8004042 <SDMMC_GetCmdResp2+0x46>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004036:	23c5      	movs	r3, #197	; 0xc5
 8004038:	638b      	str	r3, [r1, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800403a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800403c:	2004      	movs	r0, #4
 800403e:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004040:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004042:	2001      	movs	r0, #1
 8004044:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004046:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004048:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	20000000 	.word	0x20000000
 8004054:	10624dd3 	.word	0x10624dd3

08004058 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8004058:	4601      	mov	r1, r0
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800405a:	4b10      	ldr	r3, [pc, #64]	; (800409c <SDMMC_GetCmdResp3+0x44>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a10      	ldr	r2, [pc, #64]	; (80040a0 <SDMMC_GetCmdResp3+0x48>)
 8004060:	fba2 2303 	umull	r2, r3, r2, r3
 8004064:	0a5a      	lsrs	r2, r3, #9
 8004066:	f241 3388 	movw	r3, #5000	; 0x1388
 800406a:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 800406e:	461a      	mov	r2, r3
 8004070:	3b01      	subs	r3, #1
 8004072:	b182      	cbz	r2, 8004096 <SDMMC_GetCmdResp3+0x3e>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8004074:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004076:	f012 0f45 	tst.w	r2, #69	; 0x45
 800407a:	d0f8      	beq.n	800406e <SDMMC_GetCmdResp3+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800407c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004080:	d1f5      	bne.n	800406e <SDMMC_GetCmdResp3+0x16>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004082:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8004084:	f010 0004 	ands.w	r0, r0, #4
 8004088:	d102      	bne.n	8004090 <SDMMC_GetCmdResp3+0x38>
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800408a:	23c5      	movs	r3, #197	; 0xc5
 800408c:	638b      	str	r3, [r1, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800408e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004090:	2004      	movs	r0, #4
 8004092:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004094:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004096:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800409a:	4770      	bx	lr
 800409c:	20000000 	.word	0x20000000
 80040a0:	10624dd3 	.word	0x10624dd3

080040a4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80040a4:	4601      	mov	r1, r0
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80040a6:	4b16      	ldr	r3, [pc, #88]	; (8004100 <SDMMC_GetCmdResp7+0x5c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a16      	ldr	r2, [pc, #88]	; (8004104 <SDMMC_GetCmdResp7+0x60>)
 80040ac:	fba2 2303 	umull	r2, r3, r2, r3
 80040b0:	0a5a      	lsrs	r2, r3, #9
 80040b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80040b6:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 80040ba:	461a      	mov	r2, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b1e2      	cbz	r2, 80040fa <SDMMC_GetCmdResp7+0x56>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 80040c0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80040c2:	f012 0f45 	tst.w	r2, #69	; 0x45
 80040c6:	d0f8      	beq.n	80040ba <SDMMC_GetCmdResp7+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80040c8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80040cc:	d1f5      	bne.n	80040ba <SDMMC_GetCmdResp7+0x16>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80040ce:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80040d0:	f013 0f04 	tst.w	r3, #4
 80040d4:	d10b      	bne.n	80040ee <SDMMC_GetCmdResp7+0x4a>
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80040d6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80040d8:	f013 0301 	ands.w	r3, r3, #1
 80040dc:	d10a      	bne.n	80040f4 <SDMMC_GetCmdResp7+0x50>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80040de:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80040e0:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 80040e4:	d00b      	beq.n	80040fe <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80040e6:	2240      	movs	r2, #64	; 0x40
 80040e8:	638a      	str	r2, [r1, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80040ea:	4618      	mov	r0, r3
 80040ec:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80040ee:	2004      	movs	r0, #4
 80040f0:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80040f2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80040f4:	2001      	movs	r0, #1
 80040f6:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80040f8:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80040fa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  
}
 80040fe:	4770      	bx	lr
 8004100:	20000000 	.word	0x20000000
 8004104:	10624dd3 	.word	0x10624dd3

08004108 <SDMMC_Init>:
{
 8004108:	b084      	sub	sp, #16
 800410a:	b410      	push	{r4}
 800410c:	ac02      	add	r4, sp, #8
 800410e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8004112:	460b      	mov	r3, r1
 8004114:	9a03      	ldr	r2, [sp, #12]
 8004116:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 8004118:	9a04      	ldr	r2, [sp, #16]
             Init.ClockBypass         |\
 800411a:	4313      	orrs	r3, r2
             Init.BusWide             |\
 800411c:	9a05      	ldr	r2, [sp, #20]
             Init.ClockPowerSave      |\
 800411e:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8004120:	9a06      	ldr	r2, [sp, #24]
             Init.BusWide             |\
 8004122:	4313      	orrs	r3, r2
             Init.ClockDiv
 8004124:	9a07      	ldr	r2, [sp, #28]
             Init.HardwareFlowControl |\
 8004126:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004128:	6841      	ldr	r1, [r0, #4]
 800412a:	4a04      	ldr	r2, [pc, #16]	; (800413c <SDMMC_Init+0x34>)
 800412c:	400a      	ands	r2, r1
 800412e:	4313      	orrs	r3, r2
 8004130:	6043      	str	r3, [r0, #4]
}
 8004132:	2000      	movs	r0, #0
 8004134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004138:	b004      	add	sp, #16
 800413a:	4770      	bx	lr
 800413c:	ffff8100 	.word	0xffff8100

08004140 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8004140:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8004144:	4770      	bx	lr

08004146 <SDMMC_PowerState_ON>:
{  
 8004146:	b508      	push	{r3, lr}
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004148:	2303      	movs	r3, #3
 800414a:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 800414c:	2002      	movs	r0, #2
 800414e:	f7fd fae3 	bl	8001718 <HAL_Delay>
}
 8004152:	2000      	movs	r0, #0
 8004154:	bd08      	pop	{r3, pc}

08004156 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8004156:	6800      	ldr	r0, [r0, #0]
}
 8004158:	f000 0003 	and.w	r0, r0, #3
 800415c:	4770      	bx	lr
	...

08004160 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8004160:	680b      	ldr	r3, [r1, #0]
 8004162:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004164:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 8004166:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004168:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 800416a:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 800416c:	4313      	orrs	r3, r2
                       Command->CPSM);
 800416e:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 8004170:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004172:	68c1      	ldr	r1, [r0, #12]
 8004174:	4a02      	ldr	r2, [pc, #8]	; (8004180 <SDMMC_SendCommand+0x20>)
 8004176:	400a      	ands	r2, r1
 8004178:	4313      	orrs	r3, r2
 800417a:	60c3      	str	r3, [r0, #12]
}
 800417c:	2000      	movs	r0, #0
 800417e:	4770      	bx	lr
 8004180:	fffff000 	.word	0xfffff000

08004184 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 8004184:	6900      	ldr	r0, [r0, #16]
}
 8004186:	b2c0      	uxtb	r0, r0
 8004188:	4770      	bx	lr

0800418a <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800418a:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800418c:	5840      	ldr	r0, [r0, r1]
}  
 800418e:	4770      	bx	lr

08004190 <SDMMC_GetCmdResp1>:
{
 8004190:	b538      	push	{r3, r4, r5, lr}
 8004192:	4604      	mov	r4, r0
 8004194:	460d      	mov	r5, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004196:	4b50      	ldr	r3, [pc, #320]	; (80042d8 <SDMMC_GetCmdResp1+0x148>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4950      	ldr	r1, [pc, #320]	; (80042dc <SDMMC_GetCmdResp1+0x14c>)
 800419c:	fba1 1303 	umull	r1, r3, r1, r3
 80041a0:	0a5b      	lsrs	r3, r3, #9
 80041a2:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 80041a6:	4613      	mov	r3, r2
 80041a8:	3a01      	subs	r2, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d05d      	beq.n	800426a <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDMMCx->STA;
 80041ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80041b0:	f013 0f45 	tst.w	r3, #69	; 0x45
 80041b4:	d0f7      	beq.n	80041a6 <SDMMC_GetCmdResp1+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80041b6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80041ba:	d1f4      	bne.n	80041a6 <SDMMC_GetCmdResp1+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80041bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041be:	f013 0f04 	tst.w	r3, #4
 80041c2:	d106      	bne.n	80041d2 <SDMMC_GetCmdResp1+0x42>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80041c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041c6:	f013 0f01 	tst.w	r3, #1
 80041ca:	d005      	beq.n	80041d8 <SDMMC_GetCmdResp1+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80041cc:	2001      	movs	r0, #1
 80041ce:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80041d0:	e04d      	b.n	800426e <SDMMC_GetCmdResp1+0xde>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80041d2:	2004      	movs	r0, #4
 80041d4:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80041d6:	e04a      	b.n	800426e <SDMMC_GetCmdResp1+0xde>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80041d8:	23c5      	movs	r3, #197	; 0xc5
 80041da:	63a3      	str	r3, [r4, #56]	; 0x38
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80041dc:	4620      	mov	r0, r4
 80041de:	f7ff ffd1 	bl	8004184 <SDMMC_GetCommandResponse>
 80041e2:	42a8      	cmp	r0, r5
 80041e4:	d001      	beq.n	80041ea <SDMMC_GetCmdResp1+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80041e6:	2001      	movs	r0, #1
 80041e8:	e041      	b.n	800426e <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80041ea:	2100      	movs	r1, #0
 80041ec:	4620      	mov	r0, r4
 80041ee:	f7ff ffcc 	bl	800418a <SDMMC_GetResponse>
 80041f2:	4603      	mov	r3, r0
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80041f4:	483a      	ldr	r0, [pc, #232]	; (80042e0 <SDMMC_GetCmdResp1+0x150>)
 80041f6:	4018      	ands	r0, r3
 80041f8:	b3c8      	cbz	r0, 800426e <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	db38      	blt.n	8004270 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80041fe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004202:	d138      	bne.n	8004276 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004204:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004208:	d137      	bne.n	800427a <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800420a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800420e:	d136      	bne.n	800427e <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004210:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004214:	d136      	bne.n	8004284 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004216:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800421a:	d136      	bne.n	800428a <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800421c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004220:	d136      	bne.n	8004290 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004222:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004226:	d136      	bne.n	8004296 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004228:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800422c:	d136      	bne.n	800429c <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800422e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004232:	d136      	bne.n	80042a2 <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004234:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004238:	d136      	bne.n	80042a8 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800423a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800423e:	d136      	bne.n	80042ae <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004240:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004244:	d136      	bne.n	80042b4 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004246:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800424a:	d136      	bne.n	80042ba <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800424c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004250:	d136      	bne.n	80042c0 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004252:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004256:	d136      	bne.n	80042c6 <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004258:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800425c:	d136      	bne.n	80042cc <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800425e:	f013 0f08 	tst.w	r3, #8
 8004262:	d036      	beq.n	80042d2 <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004264:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004268:	e001      	b.n	800426e <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 800426a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800426e:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004270:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8004274:	e7fb      	b.n	800426e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004276:	2040      	movs	r0, #64	; 0x40
 8004278:	e7f9      	b.n	800426e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800427a:	2080      	movs	r0, #128	; 0x80
 800427c:	e7f7      	b.n	800426e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800427e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004282:	e7f4      	b.n	800426e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004284:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004288:	e7f1      	b.n	800426e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800428a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800428e:	e7ee      	b.n	800426e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004290:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004294:	e7eb      	b.n	800426e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004296:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800429a:	e7e8      	b.n	800426e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800429c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80042a0:	e7e5      	b.n	800426e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80042a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80042a6:	e7e2      	b.n	800426e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 80042a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80042ac:	e7df      	b.n	800426e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80042ae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80042b2:	e7dc      	b.n	800426e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80042b4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80042b8:	e7d9      	b.n	800426e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80042ba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80042be:	e7d6      	b.n	800426e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80042c0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80042c4:	e7d3      	b.n	800426e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80042c6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80042ca:	e7d0      	b.n	800426e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 80042cc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80042d0:	e7cd      	b.n	800426e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80042d2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80042d6:	e7ca      	b.n	800426e <SDMMC_GetCmdResp1+0xde>
 80042d8:	20000000 	.word	0x20000000
 80042dc:	10624dd3 	.word	0x10624dd3
 80042e0:	fdffe008 	.word	0xfdffe008

080042e4 <SDMMC_GetCmdResp6>:
{
 80042e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e6:	4605      	mov	r5, r0
 80042e8:	460e      	mov	r6, r1
 80042ea:	4617      	mov	r7, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80042ec:	4b23      	ldr	r3, [pc, #140]	; (800437c <SDMMC_GetCmdResp6+0x98>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4823      	ldr	r0, [pc, #140]	; (8004380 <SDMMC_GetCmdResp6+0x9c>)
 80042f2:	fba0 2303 	umull	r2, r3, r0, r3
 80042f6:	0a58      	lsrs	r0, r3, #9
 80042f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80042fc:	fb03 f300 	mul.w	r3, r3, r0
    if (count-- == 0U)
 8004300:	461c      	mov	r4, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	b38c      	cbz	r4, 800436a <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDMMCx->STA;
 8004306:	6b6c      	ldr	r4, [r5, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004308:	f014 0f45 	tst.w	r4, #69	; 0x45
 800430c:	d0f8      	beq.n	8004300 <SDMMC_GetCmdResp6+0x1c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800430e:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8004312:	d1f5      	bne.n	8004300 <SDMMC_GetCmdResp6+0x1c>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004314:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004316:	f013 0f04 	tst.w	r3, #4
 800431a:	d106      	bne.n	800432a <SDMMC_GetCmdResp6+0x46>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800431c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800431e:	f013 0f01 	tst.w	r3, #1
 8004322:	d005      	beq.n	8004330 <SDMMC_GetCmdResp6+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004324:	2001      	movs	r0, #1
 8004326:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004328:	e021      	b.n	800436e <SDMMC_GetCmdResp6+0x8a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800432a:	2004      	movs	r0, #4
 800432c:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800432e:	e01e      	b.n	800436e <SDMMC_GetCmdResp6+0x8a>
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004330:	4628      	mov	r0, r5
 8004332:	f7ff ff27 	bl	8004184 <SDMMC_GetCommandResponse>
 8004336:	42b0      	cmp	r0, r6
 8004338:	d001      	beq.n	800433e <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800433a:	2001      	movs	r0, #1
 800433c:	e017      	b.n	800436e <SDMMC_GetCmdResp6+0x8a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800433e:	23c5      	movs	r3, #197	; 0xc5
 8004340:	63ab      	str	r3, [r5, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004342:	2100      	movs	r1, #0
 8004344:	4628      	mov	r0, r5
 8004346:	f7ff ff20 	bl	800418a <SDMMC_GetResponse>
 800434a:	4603      	mov	r3, r0
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800434c:	f410 4060 	ands.w	r0, r0, #57344	; 0xe000
 8004350:	d008      	beq.n	8004364 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004352:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004356:	d10b      	bne.n	8004370 <SDMMC_GetCmdResp6+0x8c>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004358:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800435c:	d00b      	beq.n	8004376 <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800435e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004362:	e004      	b.n	800436e <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004364:	0c1b      	lsrs	r3, r3, #16
 8004366:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 8004368:	e001      	b.n	800436e <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 800436a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800436e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004370:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004374:	e7fb      	b.n	800436e <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004376:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800437a:	e7f8      	b.n	800436e <SDMMC_GetCmdResp6+0x8a>
 800437c:	20000000 	.word	0x20000000
 8004380:	10624dd3 	.word	0x10624dd3

08004384 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004384:	680b      	ldr	r3, [r1, #0]
 8004386:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8004388:	684b      	ldr	r3, [r1, #4]
 800438a:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800438c:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 800438e:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004390:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8004392:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8004394:	4313      	orrs	r3, r2
                       Data->DPSM);
 8004396:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8004398:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800439a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800439c:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 80043a0:	4313      	orrs	r3, r2
 80043a2:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80043a4:	2000      	movs	r0, #0
 80043a6:	4770      	bx	lr

080043a8 <SDMMC_CmdBlockLength>:
{
 80043a8:	b530      	push	{r4, r5, lr}
 80043aa:	b087      	sub	sp, #28
 80043ac:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80043ae:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80043b0:	2510      	movs	r5, #16
 80043b2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80043b4:	2340      	movs	r3, #64	; 0x40
 80043b6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80043b8:	2300      	movs	r3, #0
 80043ba:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80043bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043c0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80043c2:	a901      	add	r1, sp, #4
 80043c4:	f7ff fecc 	bl	8004160 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80043c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043cc:	4629      	mov	r1, r5
 80043ce:	4620      	mov	r0, r4
 80043d0:	f7ff fede 	bl	8004190 <SDMMC_GetCmdResp1>
}
 80043d4:	b007      	add	sp, #28
 80043d6:	bd30      	pop	{r4, r5, pc}

080043d8 <SDMMC_CmdSelDesel>:
{
 80043d8:	b530      	push	{r4, r5, lr}
 80043da:	b087      	sub	sp, #28
 80043dc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80043de:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80043e0:	2507      	movs	r5, #7
 80043e2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80043e4:	2340      	movs	r3, #64	; 0x40
 80043e6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80043e8:	2300      	movs	r3, #0
 80043ea:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80043ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043f0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80043f2:	a901      	add	r1, sp, #4
 80043f4:	f7ff feb4 	bl	8004160 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80043f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fc:	4629      	mov	r1, r5
 80043fe:	4620      	mov	r0, r4
 8004400:	f7ff fec6 	bl	8004190 <SDMMC_GetCmdResp1>
}
 8004404:	b007      	add	sp, #28
 8004406:	bd30      	pop	{r4, r5, pc}

08004408 <SDMMC_CmdGoIdleState>:
{
 8004408:	b510      	push	{r4, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004412:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8004414:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004416:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800441c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800441e:	a901      	add	r1, sp, #4
 8004420:	f7ff fe9e 	bl	8004160 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8004424:	4620      	mov	r0, r4
 8004426:	f7ff fdcd 	bl	8003fc4 <SDMMC_GetCmdError>
}
 800442a:	b006      	add	sp, #24
 800442c:	bd10      	pop	{r4, pc}

0800442e <SDMMC_CmdOperCond>:
{
 800442e:	b510      	push	{r4, lr}
 8004430:	b086      	sub	sp, #24
 8004432:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004434:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004438:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800443a:	2308      	movs	r3, #8
 800443c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800443e:	2340      	movs	r3, #64	; 0x40
 8004440:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004442:	2300      	movs	r3, #0
 8004444:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800444a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800444c:	a901      	add	r1, sp, #4
 800444e:	f7ff fe87 	bl	8004160 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8004452:	4620      	mov	r0, r4
 8004454:	f7ff fe26 	bl	80040a4 <SDMMC_GetCmdResp7>
}
 8004458:	b006      	add	sp, #24
 800445a:	bd10      	pop	{r4, pc}

0800445c <SDMMC_CmdAppCommand>:
{
 800445c:	b530      	push	{r4, r5, lr}
 800445e:	b087      	sub	sp, #28
 8004460:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004462:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004464:	2537      	movs	r5, #55	; 0x37
 8004466:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004468:	2340      	movs	r3, #64	; 0x40
 800446a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800446c:	2300      	movs	r3, #0
 800446e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004474:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004476:	a901      	add	r1, sp, #4
 8004478:	f7ff fe72 	bl	8004160 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800447c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004480:	4629      	mov	r1, r5
 8004482:	4620      	mov	r0, r4
 8004484:	f7ff fe84 	bl	8004190 <SDMMC_GetCmdResp1>
}
 8004488:	b007      	add	sp, #28
 800448a:	bd30      	pop	{r4, r5, pc}

0800448c <SDMMC_CmdAppOperCommand>:
{
 800448c:	b510      	push	{r4, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004492:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <SDMMC_CmdAppOperCommand+0x30>)
 8004494:	430b      	orrs	r3, r1
 8004496:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004498:	2329      	movs	r3, #41	; 0x29
 800449a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800449c:	2340      	movs	r3, #64	; 0x40
 800449e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80044a0:	2300      	movs	r3, #0
 80044a2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80044a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044a8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80044aa:	a901      	add	r1, sp, #4
 80044ac:	f7ff fe58 	bl	8004160 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80044b0:	4620      	mov	r0, r4
 80044b2:	f7ff fdd1 	bl	8004058 <SDMMC_GetCmdResp3>
}
 80044b6:	b006      	add	sp, #24
 80044b8:	bd10      	pop	{r4, pc}
 80044ba:	bf00      	nop
 80044bc:	80100000 	.word	0x80100000

080044c0 <SDMMC_CmdBusWidth>:
{
 80044c0:	b530      	push	{r4, r5, lr}
 80044c2:	b087      	sub	sp, #28
 80044c4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80044c6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80044c8:	2506      	movs	r5, #6
 80044ca:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80044cc:	2340      	movs	r3, #64	; 0x40
 80044ce:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80044d0:	2300      	movs	r3, #0
 80044d2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80044d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044d8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80044da:	a901      	add	r1, sp, #4
 80044dc:	f7ff fe40 	bl	8004160 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80044e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e4:	4629      	mov	r1, r5
 80044e6:	4620      	mov	r0, r4
 80044e8:	f7ff fe52 	bl	8004190 <SDMMC_GetCmdResp1>
}
 80044ec:	b007      	add	sp, #28
 80044ee:	bd30      	pop	{r4, r5, pc}

080044f0 <SDMMC_CmdSendSCR>:
{
 80044f0:	b530      	push	{r4, r5, lr}
 80044f2:	b087      	sub	sp, #28
 80044f4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80044fa:	2533      	movs	r5, #51	; 0x33
 80044fc:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80044fe:	2240      	movs	r2, #64	; 0x40
 8004500:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004502:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004508:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800450a:	a901      	add	r1, sp, #4
 800450c:	f7ff fe28 	bl	8004160 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8004510:	f241 3288 	movw	r2, #5000	; 0x1388
 8004514:	4629      	mov	r1, r5
 8004516:	4620      	mov	r0, r4
 8004518:	f7ff fe3a 	bl	8004190 <SDMMC_GetCmdResp1>
}
 800451c:	b007      	add	sp, #28
 800451e:	bd30      	pop	{r4, r5, pc}

08004520 <SDMMC_CmdSendCID>:
{
 8004520:	b510      	push	{r4, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800452a:	2202      	movs	r2, #2
 800452c:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800452e:	22c0      	movs	r2, #192	; 0xc0
 8004530:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004532:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004538:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800453a:	a901      	add	r1, sp, #4
 800453c:	f7ff fe10 	bl	8004160 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004540:	4620      	mov	r0, r4
 8004542:	f7ff fd5b 	bl	8003ffc <SDMMC_GetCmdResp2>
}
 8004546:	b006      	add	sp, #24
 8004548:	bd10      	pop	{r4, pc}

0800454a <SDMMC_CmdSendCSD>:
{
 800454a:	b510      	push	{r4, lr}
 800454c:	b086      	sub	sp, #24
 800454e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8004550:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004552:	2309      	movs	r3, #9
 8004554:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004556:	23c0      	movs	r3, #192	; 0xc0
 8004558:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800455a:	2300      	movs	r3, #0
 800455c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800455e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004562:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004564:	a901      	add	r1, sp, #4
 8004566:	f7ff fdfb 	bl	8004160 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800456a:	4620      	mov	r0, r4
 800456c:	f7ff fd46 	bl	8003ffc <SDMMC_GetCmdResp2>
}
 8004570:	b006      	add	sp, #24
 8004572:	bd10      	pop	{r4, pc}

08004574 <SDMMC_CmdSetRelAdd>:
{
 8004574:	b570      	push	{r4, r5, r6, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	4604      	mov	r4, r0
 800457a:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004580:	2603      	movs	r6, #3
 8004582:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004584:	2240      	movs	r2, #64	; 0x40
 8004586:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004588:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800458a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800458e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004590:	a901      	add	r1, sp, #4
 8004592:	f7ff fde5 	bl	8004160 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004596:	462a      	mov	r2, r5
 8004598:	4631      	mov	r1, r6
 800459a:	4620      	mov	r0, r4
 800459c:	f7ff fea2 	bl	80042e4 <SDMMC_GetCmdResp6>
}
 80045a0:	b006      	add	sp, #24
 80045a2:	bd70      	pop	{r4, r5, r6, pc}

080045a4 <__libc_init_array>:
 80045a4:	b570      	push	{r4, r5, r6, lr}
 80045a6:	4d0d      	ldr	r5, [pc, #52]	; (80045dc <__libc_init_array+0x38>)
 80045a8:	4c0d      	ldr	r4, [pc, #52]	; (80045e0 <__libc_init_array+0x3c>)
 80045aa:	1b64      	subs	r4, r4, r5
 80045ac:	10a4      	asrs	r4, r4, #2
 80045ae:	2600      	movs	r6, #0
 80045b0:	42a6      	cmp	r6, r4
 80045b2:	d109      	bne.n	80045c8 <__libc_init_array+0x24>
 80045b4:	4d0b      	ldr	r5, [pc, #44]	; (80045e4 <__libc_init_array+0x40>)
 80045b6:	4c0c      	ldr	r4, [pc, #48]	; (80045e8 <__libc_init_array+0x44>)
 80045b8:	f000 f820 	bl	80045fc <_init>
 80045bc:	1b64      	subs	r4, r4, r5
 80045be:	10a4      	asrs	r4, r4, #2
 80045c0:	2600      	movs	r6, #0
 80045c2:	42a6      	cmp	r6, r4
 80045c4:	d105      	bne.n	80045d2 <__libc_init_array+0x2e>
 80045c6:	bd70      	pop	{r4, r5, r6, pc}
 80045c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045cc:	4798      	blx	r3
 80045ce:	3601      	adds	r6, #1
 80045d0:	e7ee      	b.n	80045b0 <__libc_init_array+0xc>
 80045d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d6:	4798      	blx	r3
 80045d8:	3601      	adds	r6, #1
 80045da:	e7f2      	b.n	80045c2 <__libc_init_array+0x1e>
 80045dc:	08004634 	.word	0x08004634
 80045e0:	08004634 	.word	0x08004634
 80045e4:	08004634 	.word	0x08004634
 80045e8:	08004638 	.word	0x08004638

080045ec <memset>:
 80045ec:	4402      	add	r2, r0
 80045ee:	4603      	mov	r3, r0
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d100      	bne.n	80045f6 <memset+0xa>
 80045f4:	4770      	bx	lr
 80045f6:	f803 1b01 	strb.w	r1, [r3], #1
 80045fa:	e7f9      	b.n	80045f0 <memset+0x4>

080045fc <_init>:
 80045fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fe:	bf00      	nop
 8004600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004602:	bc08      	pop	{r3}
 8004604:	469e      	mov	lr, r3
 8004606:	4770      	bx	lr

08004608 <_fini>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	bf00      	nop
 800460c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460e:	bc08      	pop	{r3}
 8004610:	469e      	mov	lr, r3
 8004612:	4770      	bx	lr
