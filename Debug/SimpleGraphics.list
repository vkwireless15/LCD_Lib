
SimpleGraphics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d8c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d04  08003f54  08003f54  00013f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c58  08005c58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c58  08005c58  00015c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c60  08005c60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c60  08005c60  00015c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c64  08005c64  00015c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003fe20  2000000c  08005c74  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2003fe2c  08005c74  0002fe2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023d56  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003796  00000000  00000000  00043d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  00047528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00029329  00000000  00000000  00048c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000231e6  00000000  00000000  00071f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0010057a  00000000  00000000  0009510f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00195689  2**0
                  CONTENTS, READONLY
 19 .debug_loc    000181c6  00000000  00000000  001956d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00001698  00000000  00000000  001ad8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000041d8  00000000  00000000  001aef38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003f3c 	.word	0x08003f3c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08003f3c 	.word	0x08003f3c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <Init_Graphics_System>:

void Init_Graphics_System(uint32 H, uint32 W, uint32 LCD_RAM_START_ADDRESS, uint8 Layers, uint8 ColorType) //Инициализация драйвера дисплея, графического ускорителя и т.п.
{
	//LTDC_LayerCfgTypeDef pLayerCfg = {0};
	//LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
	Height = H;
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <Init_Graphics_System+0x10>)
 800050e:	6018      	str	r0, [r3, #0]
    Width = W;
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <Init_Graphics_System+0x14>)
 8000512:	6019      	str	r1, [r3, #0]

    LCD_FRAME_BUFFER0 = LCD_RAM_START_ADDRESS;
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <Init_Graphics_System+0x18>)
 8000516:	601a      	str	r2, [r3, #0]
    if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
    {

    } */

}
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000028 	.word	0x20000028
 8000520:	20000030 	.word	0x20000030
 8000524:	2000002c 	.word	0x2000002c

08000528 <Fill_all>:

void Fill_all(uint32 Color) //Заливка всего дисплея цветом
{
	for(int i=0; i<480*272; i++)
 8000528:	2300      	movs	r3, #0
 800052a:	e005      	b.n	8000538 <Fill_all+0x10>
	{
	  *(__IO uint16*) (LCD_FRAME_BUFFER0 + (i*2)) = Color;
 800052c:	4a04      	ldr	r2, [pc, #16]	; (8000540 <Fill_all+0x18>)
 800052e:	6812      	ldr	r2, [r2, #0]
 8000530:	b281      	uxth	r1, r0
 8000532:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<480*272; i++)
 8000536:	3301      	adds	r3, #1
 8000538:	f5b3 3fff 	cmp.w	r3, #130560	; 0x1fe00
 800053c:	dbf6      	blt.n	800052c <Fill_all+0x4>
	}
}
 800053e:	4770      	bx	lr
 8000540:	2000002c 	.word	0x2000002c

08000544 <Fill_rectangle>:

void Fill_rectangle(uint32 Color, int32 StartX, int32 StopX, int32 StartY, int32 StopY) //Заливка прямоугольной формы
{
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	4604      	mov	r4, r0
 8000548:	4610      	mov	r0, r2
 800054a:	9e04      	ldr	r6, [sp, #16]
	StartX--;
 800054c:	1e4d      	subs	r5, r1, #1
	StartY--;
 800054e:	f103 3eff 	add.w	lr, r3, #4294967295
    	   //HAL_Delay(5);
    	   HAL_DMA2D_PollForTransfer(&hdma2d, TransferDelay);
       }
    } */

	for(uint32 y = StartY; y < StopY; y++)
 8000552:	e00e      	b.n	8000572 <Fill_rectangle+0x2e>
	{
		for(uint32 x = StartX; x < StopX; x++)
		{
			*(__IO uint16*) (LCD_FRAME_BUFFER0 + (2*(y*Width + x))) = Color;
 8000554:	4909      	ldr	r1, [pc, #36]	; (800057c <Fill_rectangle+0x38>)
 8000556:	6809      	ldr	r1, [r1, #0]
 8000558:	fb01 310e 	mla	r1, r1, lr, r3
 800055c:	4a08      	ldr	r2, [pc, #32]	; (8000580 <Fill_rectangle+0x3c>)
 800055e:	6812      	ldr	r2, [r2, #0]
 8000560:	fa1f fc84 	uxth.w	ip, r4
 8000564:	f822 c011 	strh.w	ip, [r2, r1, lsl #1]
		for(uint32 x = StartX; x < StopX; x++)
 8000568:	3301      	adds	r3, #1
 800056a:	4298      	cmp	r0, r3
 800056c:	d8f2      	bhi.n	8000554 <Fill_rectangle+0x10>
	for(uint32 y = StartY; y < StopY; y++)
 800056e:	f10e 0e01 	add.w	lr, lr, #1
 8000572:	4576      	cmp	r6, lr
 8000574:	d901      	bls.n	800057a <Fill_rectangle+0x36>
		for(uint32 x = StartX; x < StopX; x++)
 8000576:	462b      	mov	r3, r5
 8000578:	e7f7      	b.n	800056a <Fill_rectangle+0x26>
		}
	}
}
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	20000030 	.word	0x20000030
 8000580:	2000002c 	.word	0x2000002c

08000584 <MemPoint>:

void MemPoint(int32 x, int32 y, int32 Color) //Отрисовка одного пикселя
{
	*(__IO uint16*) (LCD_FRAME_BUFFER0 + (2*(y*Width + x))) = Color;
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <MemPoint+0x14>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	fb03 0001 	mla	r0, r3, r1, r0
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <MemPoint+0x18>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	b292      	uxth	r2, r2
 8000592:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
}
 8000596:	4770      	bx	lr
 8000598:	20000030 	.word	0x20000030
 800059c:	2000002c 	.word	0x2000002c

080005a0 <Get565Color>:
{
	uint8 FontH = calibri[1];
	return FontH;
}
uint16 Get565Color(uint32 Color) //Возвращает значение цвета в формате пикселя 565(5 бит - красный цвет, 6 - зеленый, 5 - синий)
{
 80005a0:	b500      	push	{lr}
   uint8 R, G, B;
   R = (Color >> 16) & 0xff;
   G = (Color >> 8) & 0xff;
   B = Color & 0xff;

   R = 31 * R / 255;
 80005a2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80005a6:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 80005aa:	4912      	ldr	r1, [pc, #72]	; (80005f4 <Get565Color+0x54>)
 80005ac:	fb81 c203 	smull	ip, r2, r1, r3
 80005b0:	441a      	add	r2, r3
 80005b2:	17db      	asrs	r3, r3, #31
 80005b4:	ebc3 12e2 	rsb	r2, r3, r2, asr #7
   G = 63 * G / 255;
 80005b8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80005bc:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 80005c0:	fb81 ec03 	smull	lr, ip, r1, r3
 80005c4:	449c      	add	ip, r3
 80005c6:	17db      	asrs	r3, r3, #31
 80005c8:	ebc3 13ec 	rsb	r3, r3, ip, asr #7
   B = 31 * B / 255;
 80005cc:	b2c0      	uxtb	r0, r0
 80005ce:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 80005d2:	fb81 c100 	smull	ip, r1, r1, r0
 80005d6:	4401      	add	r1, r0
 80005d8:	17c0      	asrs	r0, r0, #31
 80005da:	ebc0 10e1 	rsb	r0, r0, r1, asr #7
 80005de:	b2c0      	uxtb	r0, r0

   RezColor |= B;
   RezColor |= (G << 5);
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   RezColor |= (R << 11);
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	ea40 20c2 	orr.w	r0, r0, r2, lsl #11

   return RezColor;
}
 80005ec:	b280      	uxth	r0, r0
 80005ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80005f2:	bf00      	nop
 80005f4:	80808081 	.word	0x80808081

080005f8 <Graphics_Init>:
	*CharWt = CharW;
	*CharHt = FontH;
}

void Graphics_Init(DisplayConfig *dcf) //Инициализация самой бибиллиотеки а также инициализация графических устройств(дисплей, графические ускорители, тач-панели)
{
 80005f8:	b510      	push	{r4, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	4602      	mov	r2, r0
	DispHeight = dcf->Display_Height;
 80005fe:	6840      	ldr	r0, [r0, #4]
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <Graphics_Init+0x28>)
 8000602:	6018      	str	r0, [r3, #0]
	DispWidth = dcf->Display_Width;
 8000604:	6891      	ldr	r1, [r2, #8]
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <Graphics_Init+0x2c>)
 8000608:	6019      	str	r1, [r3, #0]
	ColorType = dcf->Color_Type;
 800060a:	7b13      	ldrb	r3, [r2, #12]
 800060c:	4c06      	ldr	r4, [pc, #24]	; (8000628 <Graphics_Init+0x30>)
 800060e:	7023      	strb	r3, [r4, #0]
	Init_Graphics_System(dcf->Display_Height, dcf->Display_Width, dcf->Start_RAM_Address, dcf->Layers, dcf->Color_Type);
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	7b53      	ldrb	r3, [r2, #13]
 8000614:	6812      	ldr	r2, [r2, #0]
 8000616:	f7ff ff79 	bl	800050c <Init_Graphics_System>
}
 800061a:	b002      	add	sp, #8
 800061c:	bd10      	pop	{r4, pc}
 800061e:	bf00      	nop
 8000620:	20000038 	.word	0x20000038
 8000624:	2000003c 	.word	0x2000003c
 8000628:	20000034 	.word	0x20000034

0800062c <Fill_Rectangle>:

	if(ColorType == Color_A888)
	{ Fill_all(Color); }
}
void Fill_Rectangle(uint32 Color, int32 StartX, int32 StopX, int32 StartY, int32 StopY) //заливает цветом прямоугольную область
{
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	b083      	sub	sp, #12
 8000630:	4607      	mov	r7, r0
 8000632:	4615      	mov	r5, r2
 8000634:	461e      	mov	r6, r3
	if(((StartX > 0) && (StartX <= DispWidth)) || ((StopX > 0) && (StopX <= DispWidth)))
 8000636:	1e0c      	subs	r4, r1, #0
 8000638:	dd03      	ble.n	8000642 <Fill_Rectangle+0x16>
 800063a:	4b28      	ldr	r3, [pc, #160]	; (80006dc <Fill_Rectangle+0xb0>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	429c      	cmp	r4, r3
 8000640:	d905      	bls.n	800064e <Fill_Rectangle+0x22>
 8000642:	2d00      	cmp	r5, #0
 8000644:	dd2b      	ble.n	800069e <Fill_Rectangle+0x72>
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <Fill_Rectangle+0xb0>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	429d      	cmp	r5, r3
 800064c:	d827      	bhi.n	800069e <Fill_Rectangle+0x72>
	{
		if(((StartY > 0) && (StartY <= DispHeight)) || ((StopY > 0) && (StopY <= DispHeight)))
 800064e:	2e00      	cmp	r6, #0
 8000650:	dd03      	ble.n	800065a <Fill_Rectangle+0x2e>
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <Fill_Rectangle+0xb4>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	429e      	cmp	r6, r3
 8000658:	d907      	bls.n	800066a <Fill_Rectangle+0x3e>
 800065a:	9b08      	ldr	r3, [sp, #32]
 800065c:	2b00      	cmp	r3, #0
 800065e:	dd1e      	ble.n	800069e <Fill_Rectangle+0x72>
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <Fill_Rectangle+0xb4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	9a08      	ldr	r2, [sp, #32]
 8000666:	429a      	cmp	r2, r3
 8000668:	d819      	bhi.n	800069e <Fill_Rectangle+0x72>
		{
			if(StartX <= 0)
 800066a:	2c00      	cmp	r4, #0
 800066c:	dd19      	ble.n	80006a2 <Fill_Rectangle+0x76>
			{ StartX = 1;}
			if(StopX > DispWidth)
 800066e:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <Fill_Rectangle+0xb0>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	429d      	cmp	r5, r3
 8000674:	d900      	bls.n	8000678 <Fill_Rectangle+0x4c>
			{ StartX = DispWidth;}
 8000676:	461c      	mov	r4, r3

			if(StartY <= 0)
 8000678:	2e00      	cmp	r6, #0
 800067a:	dd14      	ble.n	80006a6 <Fill_Rectangle+0x7a>
			{ StartY = 1;}
			if(StopY > DispHeight)
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <Fill_Rectangle+0xb4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	9a08      	ldr	r2, [sp, #32]
 8000682:	429a      	cmp	r2, r3
 8000684:	d900      	bls.n	8000688 <Fill_Rectangle+0x5c>
			{ StartY = DispHeight;}
 8000686:	461e      	mov	r6, r3

			if(ColorType == Color565)
 8000688:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <Fill_Rectangle+0xb8>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	b16b      	cbz	r3, 80006aa <Fill_Rectangle+0x7e>
			{ Fill_rectangle(Get565Color(Color), StartX, StopX, StartY, StopY); }

			if(ColorType == Color888)
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <Fill_Rectangle+0xb8>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d014      	beq.n	80006c0 <Fill_Rectangle+0x94>
			{ Fill_rectangle(Color | 0xFF << 24, StartX, StopX, StartY, StopY); }

			if(ColorType == Color_A888)
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <Fill_Rectangle+0xb8>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b02      	cmp	r3, #2
 800069c:	d01a      	beq.n	80006d4 <Fill_Rectangle+0xa8>
			{ Fill_all(Color); }
		}
	}
}
 800069e:	b003      	add	sp, #12
 80006a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			{ StartX = 1;}
 80006a2:	2401      	movs	r4, #1
 80006a4:	e7e3      	b.n	800066e <Fill_Rectangle+0x42>
			{ StartY = 1;}
 80006a6:	2601      	movs	r6, #1
 80006a8:	e7e8      	b.n	800067c <Fill_Rectangle+0x50>
			{ Fill_rectangle(Get565Color(Color), StartX, StopX, StartY, StopY); }
 80006aa:	4638      	mov	r0, r7
 80006ac:	f7ff ff78 	bl	80005a0 <Get565Color>
 80006b0:	9b08      	ldr	r3, [sp, #32]
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	4633      	mov	r3, r6
 80006b6:	462a      	mov	r2, r5
 80006b8:	4621      	mov	r1, r4
 80006ba:	f7ff ff43 	bl	8000544 <Fill_rectangle>
 80006be:	e7e6      	b.n	800068e <Fill_Rectangle+0x62>
			{ Fill_rectangle(Color | 0xFF << 24, StartX, StopX, StartY, StopY); }
 80006c0:	9b08      	ldr	r3, [sp, #32]
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	4633      	mov	r3, r6
 80006c6:	462a      	mov	r2, r5
 80006c8:	4621      	mov	r1, r4
 80006ca:	f047 407f 	orr.w	r0, r7, #4278190080	; 0xff000000
 80006ce:	f7ff ff39 	bl	8000544 <Fill_rectangle>
 80006d2:	e7e0      	b.n	8000696 <Fill_Rectangle+0x6a>
			{ Fill_all(Color); }
 80006d4:	4638      	mov	r0, r7
 80006d6:	f7ff ff27 	bl	8000528 <Fill_all>
}
 80006da:	e7e0      	b.n	800069e <Fill_Rectangle+0x72>
 80006dc:	2000003c 	.word	0x2000003c
 80006e0:	20000038 	.word	0x20000038
 80006e4:	20000034 	.word	0x20000034

080006e8 <HLine>:
void HLine(uint32 Color, int16 x1, int16 x2, int16 y1, uint8 Tolshina)//
{
 80006e8:	b510      	push	{r4, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	f89d 4010 	ldrb.w	r4, [sp, #16]
    if(Tolshina > 0)
 80006f0:	b90c      	cbnz	r4, 80006f6 <HLine+0xe>
    {
    	Tolshina--;
    	Fill_Rectangle(Color, x1, x2, y1, y1+Tolshina);
    }
}
 80006f2:	b002      	add	sp, #8
 80006f4:	bd10      	pop	{r4, pc}
    	Tolshina--;
 80006f6:	3c01      	subs	r4, #1
    	Fill_Rectangle(Color, x1, x2, y1, y1+Tolshina);
 80006f8:	fa53 f484 	uxtab	r4, r3, r4
 80006fc:	9400      	str	r4, [sp, #0]
 80006fe:	f7ff ff95 	bl	800062c <Fill_Rectangle>
}
 8000702:	e7f6      	b.n	80006f2 <HLine+0xa>

08000704 <VLine>:
void VLine(uint32 Color, int16 x1, int16 y1, int16 y2, uint8 Tolshina)
{
 8000704:	b510      	push	{r4, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	f89d 4010 	ldrb.w	r4, [sp, #16]
	if(Tolshina > 0)
 800070c:	b90c      	cbnz	r4, 8000712 <VLine+0xe>
	{
		Tolshina--;
		Fill_Rectangle(Color, x1, x1+Tolshina, y1, y2);
	}
}
 800070e:	b002      	add	sp, #8
 8000710:	bd10      	pop	{r4, pc}
		Tolshina--;
 8000712:	3c01      	subs	r4, #1
		Fill_Rectangle(Color, x1, x1+Tolshina, y1, y2);
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	4613      	mov	r3, r2
 8000718:	fa51 f284 	uxtab	r2, r1, r4
 800071c:	f7ff ff86 	bl	800062c <Fill_Rectangle>
}
 8000720:	e7f5      	b.n	800070e <VLine+0xa>

08000722 <FramePanel>:
void FramePanel(uint32 BorderColor, uint32 FloodColor, int16 x1, int16 x2, int16 y1, int16 y2, uint8 Tolshina)
{
 8000722:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000726:	b083      	sub	sp, #12
 8000728:	4605      	mov	r5, r0
 800072a:	4608      	mov	r0, r1
 800072c:	4616      	mov	r6, r2
 800072e:	461c      	mov	r4, r3
 8000730:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
 8000734:	f9bd a034 	ldrsh.w	sl, [sp, #52]	; 0x34
 8000738:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	Tolshina --;
 800073c:	f108 37ff 	add.w	r7, r8, #4294967295
 8000740:	b2ff      	uxtb	r7, r7
	Fill_Rectangle(FloodColor,x1,x2,y1,y2);
 8000742:	f8cd a000 	str.w	sl, [sp]
 8000746:	464b      	mov	r3, r9
 8000748:	4622      	mov	r2, r4
 800074a:	4631      	mov	r1, r6
 800074c:	f7ff ff6e 	bl	800062c <Fill_Rectangle>
    HLine(BorderColor,x1,x2,y1,Tolshina + 1);
 8000750:	f8cd 8000 	str.w	r8, [sp]
 8000754:	464b      	mov	r3, r9
 8000756:	4622      	mov	r2, r4
 8000758:	4631      	mov	r1, r6
 800075a:	4628      	mov	r0, r5
 800075c:	f7ff ffc4 	bl	80006e8 <HLine>
    HLine(BorderColor,x1,x2,y2 - Tolshina,Tolshina +1);
 8000760:	fa1f fb87 	uxth.w	fp, r7
 8000764:	ebaa 0307 	sub.w	r3, sl, r7
 8000768:	f8cd 8000 	str.w	r8, [sp]
 800076c:	b21b      	sxth	r3, r3
 800076e:	4622      	mov	r2, r4
 8000770:	4631      	mov	r1, r6
 8000772:	4628      	mov	r0, r5
 8000774:	f7ff ffb8 	bl	80006e8 <HLine>
    VLine(BorderColor,x1,y1,y2,Tolshina + 1);
 8000778:	f8cd 8000 	str.w	r8, [sp]
 800077c:	4653      	mov	r3, sl
 800077e:	464a      	mov	r2, r9
 8000780:	4631      	mov	r1, r6
 8000782:	4628      	mov	r0, r5
 8000784:	f7ff ffbe 	bl	8000704 <VLine>
    VLine(BorderColor,x2 - Tolshina,y1,y2,Tolshina + 1);
 8000788:	eba4 010b 	sub.w	r1, r4, fp
 800078c:	f8cd 8000 	str.w	r8, [sp]
 8000790:	4653      	mov	r3, sl
 8000792:	464a      	mov	r2, r9
 8000794:	b209      	sxth	r1, r1
 8000796:	4628      	mov	r0, r5
 8000798:	f7ff ffb4 	bl	8000704 <VLine>
}
 800079c:	b003      	add	sp, #12
 800079e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080007a2 <Inverse>:
		  FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,Tolshina);
		  VGradB(XStart + 1 + Tr, XEnd - Tr - 1, YPOS, YEnd - Tr - 1, BarColorH, BarColorC, BarColorH);
	  }
}
uint8 Inverse(uint8 S)
{
 80007a2:	4602      	mov	r2, r0
	uint8 K = 0;
	for(uint8 i = 0; i<8; i++)
 80007a4:	2300      	movs	r3, #0
	uint8 K = 0;
 80007a6:	4618      	mov	r0, r3
	for(uint8 i = 0; i<8; i++)
 80007a8:	e006      	b.n	80007b8 <Inverse+0x16>
	{
		if((S & 0x01) != 0)
		{
			K = K | 0x01;
		}
		S = S >> 1;
 80007aa:	0852      	lsrs	r2, r2, #1
		if(i<7)
 80007ac:	2b06      	cmp	r3, #6
 80007ae:	d801      	bhi.n	80007b4 <Inverse+0x12>
		{
		  K = K << 1;
 80007b0:	0040      	lsls	r0, r0, #1
 80007b2:	b2c0      	uxtb	r0, r0
	for(uint8 i = 0; i<8; i++)
 80007b4:	3301      	adds	r3, #1
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	2b07      	cmp	r3, #7
 80007ba:	d805      	bhi.n	80007c8 <Inverse+0x26>
		if((S & 0x01) != 0)
 80007bc:	f012 0f01 	tst.w	r2, #1
 80007c0:	d0f3      	beq.n	80007aa <Inverse+0x8>
			K = K | 0x01;
 80007c2:	f040 0001 	orr.w	r0, r0, #1
 80007c6:	e7f0      	b.n	80007aa <Inverse+0x8>
	    }
	}
	return K;
}
 80007c8:	4770      	bx	lr
	...

080007cc <Symbol>:
void Symbol(uint16 X, uint16 Y, uint16 *NextX, uint16 *NextY, uint8 *CharWt, uint8 *CharHt, uint32 Color, char Symbol)
{
 80007cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007d0:	b085      	sub	sp, #20
 80007d2:	4681      	mov	r9, r0
 80007d4:	460d      	mov	r5, r1
 80007d6:	9102      	str	r1, [sp, #8]
	uint8 FontH = calibri[1];
 80007d8:	497f      	ldr	r1, [pc, #508]	; (80009d8 <Symbol+0x20c>)
 80007da:	f891 a001 	ldrb.w	sl, [r1, #1]
	uint8 FirstChar = calibri[2];
 80007de:	7888      	ldrb	r0, [r1, #2]
	uint8 NumOfChar = calibri[3];
	uint8 Cursor = Symbol - FirstChar;
 80007e0:	f89d 4044 	ldrb.w	r4, [sp, #68]	; 0x44
 80007e4:	1a24      	subs	r4, r4, r0
 80007e6:	b2e4      	uxtb	r4, r4
	uint16 SymbStartPos = 4 + NumOfChar;
 80007e8:	78ce      	ldrb	r6, [r1, #3]
 80007ea:	3604      	adds	r6, #4
	uint8 CharW = calibri[Cursor + 4];
 80007ec:	1d20      	adds	r0, r4, #4
 80007ee:	5c0f      	ldrb	r7, [r1, r0]
	uint16 i, j, k = 0;
	uint32 CharBit = 0;

	*NextX = X + CharW;
 80007f0:	eb09 0107 	add.w	r1, r9, r7
 80007f4:	8011      	strh	r1, [r2, #0]
	*NextY = Y + FontH;
 80007f6:	fa1f f08a 	uxth.w	r0, sl
 80007fa:	eb0a 0205 	add.w	r2, sl, r5
 80007fe:	801a      	strh	r2, [r3, #0]
	*CharWt = CharW;
 8000800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000802:	701f      	strb	r7, [r3, #0]
	*CharHt = FontH;
 8000804:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000806:	f883 a000 	strb.w	sl, [r3]
	for(i = 4; i < Cursor + 4; i++)
 800080a:	2204      	movs	r2, #4
 800080c:	e001      	b.n	8000812 <Symbol+0x46>
 800080e:	3201      	adds	r2, #1
 8000810:	b292      	uxth	r2, r2
 8000812:	1ce3      	adds	r3, r4, #3
 8000814:	4293      	cmp	r3, r2
 8000816:	db1e      	blt.n	8000856 <Symbol+0x8a>
	{
	   	if(calibri[i] <= 8)
 8000818:	4b6f      	ldr	r3, [pc, #444]	; (80009d8 <Symbol+0x20c>)
 800081a:	5c9b      	ldrb	r3, [r3, r2]
 800081c:	2b08      	cmp	r3, #8
 800081e:	d801      	bhi.n	8000824 <Symbol+0x58>
	   	{
	   	   SymbStartPos += FontH;
 8000820:	4406      	add	r6, r0
 8000822:	b2b6      	uxth	r6, r6
	   	}

	   	if(calibri[i] > 8 && calibri[i] <= 16)
 8000824:	f1a3 0109 	sub.w	r1, r3, #9
 8000828:	b2c9      	uxtb	r1, r1
 800082a:	2907      	cmp	r1, #7
 800082c:	d802      	bhi.n	8000834 <Symbol+0x68>
		{
	   		SymbStartPos += FontH * 2;
 800082e:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8000832:	b2b6      	uxth	r6, r6
		}

	   	if(calibri[i] > 16 && calibri[i] <= 24)
 8000834:	f1a3 0111 	sub.w	r1, r3, #17
 8000838:	b2c9      	uxtb	r1, r1
 800083a:	2907      	cmp	r1, #7
 800083c:	d803      	bhi.n	8000846 <Symbol+0x7a>
		{
	   		SymbStartPos += FontH * 3;
 800083e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8000842:	440e      	add	r6, r1
 8000844:	b2b6      	uxth	r6, r6
		}
	   	if(calibri[i] > 24 && calibri[i] <= 32)
 8000846:	3b19      	subs	r3, #25
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b07      	cmp	r3, #7
 800084c:	d8df      	bhi.n	800080e <Symbol+0x42>
		{
	   		SymbStartPos += FontH * 4;
 800084e:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8000852:	b2b6      	uxth	r6, r6
 8000854:	e7db      	b.n	800080e <Symbol+0x42>
		}
	}

	for(i = Y; i < Y + FontH; i++)
 8000856:	f8dd b008 	ldr.w	fp, [sp, #8]
	uint32 CharBit = 0;
 800085a:	2500      	movs	r5, #0
	uint16 i, j, k = 0;
 800085c:	46a8      	mov	r8, r5
 800085e:	f8cd a00c 	str.w	sl, [sp, #12]
 8000862:	e038      	b.n	80008d6 <Symbol+0x10a>
      		    if(i < DispHeight && j < DispWidth)
      		    {
      			    if(ColorType == Color565)
      			    { MemPoint(j,i,Get565Color(Color)); }

      			    if(ColorType == Color888)
 8000864:	4b5d      	ldr	r3, [pc, #372]	; (80009dc <Symbol+0x210>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d022      	beq.n	80008b2 <Symbol+0xe6>
      			    { MemPoint(j,i,Color | 0xFF << 24); }

      			    if(ColorType == Color_A888)
 800086c:	4b5b      	ldr	r3, [pc, #364]	; (80009dc <Symbol+0x210>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b02      	cmp	r3, #2
 8000872:	d026      	beq.n	80008c2 <Symbol+0xf6>
      			    { MemPoint(j,i,Color); }
      	        }
            }
            CharBit = CharBit << 1;
 8000874:	006d      	lsls	r5, r5, #1
		for(j = X; j < X + CharW; j++)
 8000876:	3401      	adds	r4, #1
 8000878:	b2a4      	uxth	r4, r4
 800087a:	46a2      	mov	sl, r4
 800087c:	eb09 0307 	add.w	r3, r9, r7
 8000880:	429c      	cmp	r4, r3
 8000882:	da24      	bge.n	80008ce <Symbol+0x102>
            if((CharBit & 0x80000000) != 0)
 8000884:	2d00      	cmp	r5, #0
 8000886:	daf5      	bge.n	8000874 <Symbol+0xa8>
      		    if(i < DispHeight && j < DispWidth)
 8000888:	4b55      	ldr	r3, [pc, #340]	; (80009e0 <Symbol+0x214>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	459b      	cmp	fp, r3
 800088e:	d2f1      	bcs.n	8000874 <Symbol+0xa8>
 8000890:	4b54      	ldr	r3, [pc, #336]	; (80009e4 <Symbol+0x218>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	429c      	cmp	r4, r3
 8000896:	d2ed      	bcs.n	8000874 <Symbol+0xa8>
      			    if(ColorType == Color565)
 8000898:	4b50      	ldr	r3, [pc, #320]	; (80009dc <Symbol+0x210>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d1e1      	bne.n	8000864 <Symbol+0x98>
      			    { MemPoint(j,i,Get565Color(Color)); }
 80008a0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80008a2:	f7ff fe7d 	bl	80005a0 <Get565Color>
 80008a6:	4602      	mov	r2, r0
 80008a8:	9901      	ldr	r1, [sp, #4]
 80008aa:	4650      	mov	r0, sl
 80008ac:	f7ff fe6a 	bl	8000584 <MemPoint>
 80008b0:	e7d8      	b.n	8000864 <Symbol+0x98>
      			    { MemPoint(j,i,Color | 0xFF << 24); }
 80008b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80008b4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80008b8:	9901      	ldr	r1, [sp, #4]
 80008ba:	4650      	mov	r0, sl
 80008bc:	f7ff fe62 	bl	8000584 <MemPoint>
 80008c0:	e7d4      	b.n	800086c <Symbol+0xa0>
      			    { MemPoint(j,i,Color); }
 80008c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80008c4:	9901      	ldr	r1, [sp, #4]
 80008c6:	4650      	mov	r0, sl
 80008c8:	f7ff fe5c 	bl	8000584 <MemPoint>
 80008cc:	e7d2      	b.n	8000874 <Symbol+0xa8>
	for(i = Y; i < Y + FontH; i++)
 80008ce:	f10b 0b01 	add.w	fp, fp, #1
 80008d2:	fa1f fb8b 	uxth.w	fp, fp
 80008d6:	f8cd b004 	str.w	fp, [sp, #4]
 80008da:	9b02      	ldr	r3, [sp, #8]
 80008dc:	9a03      	ldr	r2, [sp, #12]
 80008de:	4413      	add	r3, r2
 80008e0:	459b      	cmp	fp, r3
 80008e2:	da75      	bge.n	80009d0 <Symbol+0x204>
		if(CharW <= 8)
 80008e4:	2f08      	cmp	r7, #8
 80008e6:	d80a      	bhi.n	80008fe <Symbol+0x132>
			CharBit = Inverse(calibri[SymbStartPos + k]);
 80008e8:	eb06 0308 	add.w	r3, r6, r8
 80008ec:	4a3a      	ldr	r2, [pc, #232]	; (80009d8 <Symbol+0x20c>)
 80008ee:	5cd0      	ldrb	r0, [r2, r3]
 80008f0:	f7ff ff57 	bl	80007a2 <Inverse>
			CharBit = CharBit << 24;
 80008f4:	0605      	lsls	r5, r0, #24
			k++;
 80008f6:	f108 0801 	add.w	r8, r8, #1
 80008fa:	fa1f f888 	uxth.w	r8, r8
		if(CharW > 8 && CharW <= 16)
 80008fe:	f1a7 0309 	sub.w	r3, r7, #9
 8000902:	b2db      	uxtb	r3, r3
 8000904:	2b07      	cmp	r3, #7
 8000906:	d813      	bhi.n	8000930 <Symbol+0x164>
			CharBit = Inverse(calibri[SymbStartPos + k]);
 8000908:	eb08 0306 	add.w	r3, r8, r6
 800090c:	4d32      	ldr	r5, [pc, #200]	; (80009d8 <Symbol+0x20c>)
 800090e:	5ce8      	ldrb	r0, [r5, r3]
 8000910:	f7ff ff47 	bl	80007a2 <Inverse>
			k++;
 8000914:	f108 0301 	add.w	r3, r8, #1
			CharBit = CharBit << 8;
 8000918:	0204      	lsls	r4, r0, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 800091a:	fa16 f383 	uxtah	r3, r6, r3
 800091e:	5ce8      	ldrb	r0, [r5, r3]
 8000920:	f7ff ff3f 	bl	80007a2 <Inverse>
 8000924:	4320      	orrs	r0, r4
			CharBit = CharBit << 16;
 8000926:	0405      	lsls	r5, r0, #16
			k++;
 8000928:	f108 0802 	add.w	r8, r8, #2
 800092c:	fa1f f888 	uxth.w	r8, r8
		if(CharW > 16 && CharW <= 24)
 8000930:	f1a7 0311 	sub.w	r3, r7, #17
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2b07      	cmp	r3, #7
 8000938:	d81d      	bhi.n	8000976 <Symbol+0x1aa>
			CharBit = Inverse(calibri[SymbStartPos + k]);
 800093a:	eb08 0306 	add.w	r3, r8, r6
 800093e:	4d26      	ldr	r5, [pc, #152]	; (80009d8 <Symbol+0x20c>)
 8000940:	5ce8      	ldrb	r0, [r5, r3]
 8000942:	f7ff ff2e 	bl	80007a2 <Inverse>
			k++;
 8000946:	f108 0301 	add.w	r3, r8, #1
			CharBit = CharBit << 8;
 800094a:	0204      	lsls	r4, r0, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 800094c:	fa16 f383 	uxtah	r3, r6, r3
 8000950:	5ce8      	ldrb	r0, [r5, r3]
 8000952:	f7ff ff26 	bl	80007a2 <Inverse>
 8000956:	4304      	orrs	r4, r0
			k++;
 8000958:	f108 0302 	add.w	r3, r8, #2
			CharBit = CharBit << 8;
 800095c:	0224      	lsls	r4, r4, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 800095e:	fa16 f383 	uxtah	r3, r6, r3
 8000962:	5ce8      	ldrb	r0, [r5, r3]
 8000964:	f7ff ff1d 	bl	80007a2 <Inverse>
 8000968:	ea40 0504 	orr.w	r5, r0, r4
			CharBit = CharBit << 8;
 800096c:	022d      	lsls	r5, r5, #8
			k++;
 800096e:	f108 0803 	add.w	r8, r8, #3
 8000972:	fa1f f888 	uxth.w	r8, r8
		if(CharW > 24 && CharW <= 32)
 8000976:	f1a7 0319 	sub.w	r3, r7, #25
 800097a:	b2db      	uxtb	r3, r3
 800097c:	2b07      	cmp	r3, #7
 800097e:	d825      	bhi.n	80009cc <Symbol+0x200>
			CharBit = Inverse(calibri[SymbStartPos + k]);
 8000980:	eb08 0306 	add.w	r3, r8, r6
 8000984:	4d14      	ldr	r5, [pc, #80]	; (80009d8 <Symbol+0x20c>)
 8000986:	5ce8      	ldrb	r0, [r5, r3]
 8000988:	f7ff ff0b 	bl	80007a2 <Inverse>
			k++;
 800098c:	f108 0301 	add.w	r3, r8, #1
			CharBit = CharBit << 8;
 8000990:	0204      	lsls	r4, r0, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 8000992:	fa16 f383 	uxtah	r3, r6, r3
 8000996:	5ce8      	ldrb	r0, [r5, r3]
 8000998:	f7ff ff03 	bl	80007a2 <Inverse>
 800099c:	4304      	orrs	r4, r0
			k++;
 800099e:	f108 0302 	add.w	r3, r8, #2
			CharBit = CharBit << 8;
 80009a2:	0224      	lsls	r4, r4, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 80009a4:	fa16 f383 	uxtah	r3, r6, r3
 80009a8:	5ce8      	ldrb	r0, [r5, r3]
 80009aa:	f7ff fefa 	bl	80007a2 <Inverse>
 80009ae:	4304      	orrs	r4, r0
			k++;
 80009b0:	f108 0303 	add.w	r3, r8, #3
			CharBit = CharBit << 8;
 80009b4:	0224      	lsls	r4, r4, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 80009b6:	fa16 f383 	uxtah	r3, r6, r3
 80009ba:	5ce8      	ldrb	r0, [r5, r3]
 80009bc:	f7ff fef1 	bl	80007a2 <Inverse>
 80009c0:	ea40 0504 	orr.w	r5, r0, r4
			k++;
 80009c4:	f108 0804 	add.w	r8, r8, #4
 80009c8:	fa1f f888 	uxth.w	r8, r8
		for(j = X; j < X + CharW; j++)
 80009cc:	464c      	mov	r4, r9
 80009ce:	e754      	b.n	800087a <Symbol+0xae>
		}
	}
}
 80009d0:	b005      	add	sp, #20
 80009d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009d6:	bf00      	nop
 80009d8:	08003f54 	.word	0x08003f54
 80009dc:	20000034 	.word	0x20000034
 80009e0:	20000038 	.word	0x20000038
 80009e4:	2000003c 	.word	0x2000003c

080009e8 <RichTextBox>:

	//Line(160, 140, 260, 40, green | 0xff000000, 2);
	//Line(270, 40, 170, 140, green | 0xff000000, 2);
}
void RichTextBox(uint16 x1, uint16 x2, uint16 y1, uint16 y2,uint16 Tolshina, uint32 BColor, uint32 FloodColor, uint32 TextColor, char Text[])//++
{
 80009e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009ec:	b089      	sub	sp, #36	; 0x24
 80009ee:	468a      	mov	sl, r1
 80009f0:	4617      	mov	r7, r2
 80009f2:	4699      	mov	r9, r3
 80009f4:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 80009f8:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 80009fc:	9e16      	ldr	r6, [sp, #88]	; 0x58
    uint16 Sym_count = 0;
    uint16 Nx = 0, Ny = 0;
 80009fe:	2400      	movs	r4, #0
 8000a00:	f8ad 401e 	strh.w	r4, [sp, #30]
 8000a04:	f8ad 401c 	strh.w	r4, [sp, #28]
    uint16 x = 0, y = 0;
    uint8 ChWt = 0;
 8000a08:	f88d 401b 	strb.w	r4, [sp, #27]
    uint8 ChH = 0;
 8000a0c:	f88d 401a 	strb.w	r4, [sp, #26]

    x = x1 + Tolshina;
 8000a10:	eb00 0308 	add.w	r3, r0, r8
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	9305      	str	r3, [sp, #20]
    y = y1;
    while(Text[Sym_count]!=0)
 8000a18:	e001      	b.n	8000a1e <RichTextBox+0x36>
    {
      Sym_count++;
 8000a1a:	3401      	adds	r4, #1
 8000a1c:	b2a4      	uxth	r4, r4
    while(Text[Sym_count]!=0)
 8000a1e:	5d33      	ldrb	r3, [r6, r4]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1fa      	bne.n	8000a1a <RichTextBox+0x32>
    }
    FramePanel(BColor,FloodColor,x1,x2,y1,y2,Tolshina);
 8000a24:	fa5f f388 	uxtb.w	r3, r8
 8000a28:	9302      	str	r3, [sp, #8]
 8000a2a:	fa0f f389 	sxth.w	r3, r9
 8000a2e:	9301      	str	r3, [sp, #4]
 8000a30:	b23b      	sxth	r3, r7
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	fa0f f38a 	sxth.w	r3, sl
 8000a38:	b202      	sxth	r2, r0
 8000a3a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8000a3c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8000a3e:	f7ff fe70 	bl	8000722 <FramePanel>
    x = x1 + Tolshina;
 8000a42:	9805      	ldr	r0, [sp, #20]

    for(int i = 0; i < Sym_count; i++)
 8000a44:	2500      	movs	r5, #0
 8000a46:	e004      	b.n	8000a52 <RichTextBox+0x6a>
    {
       if((Text[i] >= 0x20) | (Text[i] == 10))
       {
          if(Text[i] == 10)
          {
     	     y = Ny;
 8000a48:	f8bd 701c 	ldrh.w	r7, [sp, #28]
     	     x = x1 + Tolshina;
 8000a4c:	9805      	ldr	r0, [sp, #20]
 8000a4e:	e00f      	b.n	8000a70 <RichTextBox+0x88>
    for(int i = 0; i < Sym_count; i++)
 8000a50:	3501      	adds	r5, #1
 8000a52:	42ac      	cmp	r4, r5
 8000a54:	dd2d      	ble.n	8000ab2 <RichTextBox+0xca>
       if((Text[i] >= 0x20) | (Text[i] == 10))
 8000a56:	5d72      	ldrb	r2, [r6, r5]
 8000a58:	2a0a      	cmp	r2, #10
 8000a5a:	bf14      	ite	ne
 8000a5c:	2300      	movne	r3, #0
 8000a5e:	2301      	moveq	r3, #1
 8000a60:	2a1f      	cmp	r2, #31
 8000a62:	bf88      	it	hi
 8000a64:	f043 0301 	orrhi.w	r3, r3, #1
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d0f1      	beq.n	8000a50 <RichTextBox+0x68>
          if(Text[i] == 10)
 8000a6c:	2a0a      	cmp	r2, #10
 8000a6e:	d0eb      	beq.n	8000a48 <RichTextBox+0x60>
          }

          if(y + ChH + Tolshina >= y2)
 8000a70:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8000a74:	443b      	add	r3, r7
 8000a76:	4443      	add	r3, r8
 8000a78:	454b      	cmp	r3, r9
 8000a7a:	da1a      	bge.n	8000ab2 <RichTextBox+0xca>
          {
    	     break;
          }

          Symbol(x, y, &Nx, &Ny, &ChWt,&ChH, TextColor, Text[i]);
 8000a7c:	9203      	str	r2, [sp, #12]
 8000a7e:	f8cd b008 	str.w	fp, [sp, #8]
 8000a82:	f10d 031a 	add.w	r3, sp, #26
 8000a86:	9301      	str	r3, [sp, #4]
 8000a88:	f10d 031b 	add.w	r3, sp, #27
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	ab07      	add	r3, sp, #28
 8000a90:	f10d 021e 	add.w	r2, sp, #30
 8000a94:	4639      	mov	r1, r7
 8000a96:	f7ff fe99 	bl	80007cc <Symbol>

          if(Nx + ChWt + Tolshina >= x2)
 8000a9a:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 8000a9e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8000aa2:	4403      	add	r3, r0
 8000aa4:	4443      	add	r3, r8
 8000aa6:	4553      	cmp	r3, sl
 8000aa8:	dbd2      	blt.n	8000a50 <RichTextBox+0x68>
          {
    	     y = Ny;
 8000aaa:	f8bd 701c 	ldrh.w	r7, [sp, #28]
    	     x = x1 + Tolshina;
 8000aae:	9805      	ldr	r0, [sp, #20]
 8000ab0:	e7ce      	b.n	8000a50 <RichTextBox+0x68>
          {
    	     x = Nx;
          }
       }
    }
}
 8000ab2:	b009      	add	sp, #36	; 0x24
 8000ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000ab8 <LCD_RichTextBox>:
	{
	   GraphLine(Gr->X1, Gr->X2, Gr->Y1, Gr->Y2, GrL->LineColor, Gr->Thickness, Gr->StepX, Gr->StepY, Gr->XMax, Gr->XMin, Gr->YMax, Gr->YMin, data, GrL->Points_count, GrL->Thickness);
	}
}
uint8 LCD_RichTextBox(D_RichTextBox *richTextBox, char Text[])
{
 8000ab8:	b500      	push	{lr}
 8000aba:	b087      	sub	sp, #28
	//uint8 TouchDet = GetCursorPosition();
	RichTextBox(richTextBox->X1, richTextBox->X2, richTextBox->Y1, richTextBox->Y2, richTextBox->Thickness, richTextBox->FrameColor, richTextBox->FillColor, richTextBox->TextColor, Text);
 8000abc:	9104      	str	r1, [sp, #16]
 8000abe:	69c3      	ldr	r3, [r0, #28]
 8000ac0:	9303      	str	r3, [sp, #12]
 8000ac2:	6983      	ldr	r3, [r0, #24]
 8000ac4:	9302      	str	r3, [sp, #8]
 8000ac6:	6943      	ldr	r3, [r0, #20]
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	8a03      	ldrh	r3, [r0, #16]
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	8983      	ldrh	r3, [r0, #12]
 8000ad0:	8902      	ldrh	r2, [r0, #8]
 8000ad2:	8881      	ldrh	r1, [r0, #4]
 8000ad4:	8800      	ldrh	r0, [r0, #0]
 8000ad6:	f7ff ff87 	bl	80009e8 <RichTextBox>
//		{
//			return NotClicked;
//		}
//	}
	return NotClicked;
}
 8000ada:	2000      	movs	r0, #0
 8000adc:	b007      	add	sp, #28
 8000ade:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000ae4 <MainFunc>:

extern LTDC_HandleTypeDef hltdc;
DisplayConfig ds;

void MainFunc ()
{
 8000ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ae8:	f5ad 7d5b 	sub.w	sp, sp, #876	; 0x36c
	ds.Color_Type = Color565;
 8000aec:	4ec4      	ldr	r6, [pc, #784]	; (8000e00 <MainFunc+0x31c>)
 8000aee:	2400      	movs	r4, #0
 8000af0:	7334      	strb	r4, [r6, #12]
	ds.Display_Height = 272;
 8000af2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000af6:	6073      	str	r3, [r6, #4]
	ds.Display_Width = 480;
 8000af8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000afc:	60b3      	str	r3, [r6, #8]
	ds.Layers = 1;
 8000afe:	2501      	movs	r5, #1
 8000b00:	7375      	strb	r5, [r6, #13]
	ds.Start_RAM_Address = (uint32_t)&RGB;
 8000b02:	49c0      	ldr	r1, [pc, #768]	; (8000e04 <MainFunc+0x320>)
 8000b04:	6031      	str	r1, [r6, #0]

	HAL_LTDC_SetAddress(&hltdc,(uint32_t)&RGB,0);  // запускаем модуль LTDC (железный)
 8000b06:	4622      	mov	r2, r4
 8000b08:	48bf      	ldr	r0, [pc, #764]	; (8000e08 <MainFunc+0x324>)
 8000b0a:	f001 fe5d 	bl	80027c8 <HAL_LTDC_SetAddress>
	Graphics_Init(&ds); //инит библиотеки (из структуры ds)
 8000b0e:	4630      	mov	r0, r6
 8000b10:	f7ff fd72 	bl	80005f8 <Graphics_Init>
    D_Graph gr;
    D_GraphLine grL;
    D_RichTextBox RTB;


	kv.X1 = 200;
 8000b14:	f04f 08c8 	mov.w	r8, #200	; 0xc8
 8000b18:	f8cd 8358 	str.w	r8, [sp, #856]	; 0x358
	kv.X2 = 400;
 8000b1c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b20:	93d7      	str	r3, [sp, #860]	; 0x35c
	kv.Y1 = 30;
 8000b22:	201e      	movs	r0, #30
 8000b24:	90d8      	str	r0, [sp, #864]	; 0x360
	kv.Y2 = 230;
 8000b26:	23e6      	movs	r3, #230	; 0xe6
 8000b28:	93d9      	str	r3, [sp, #868]	; 0x364
	kv.Color = green;
 8000b2a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000b2e:	91d5      	str	r1, [sp, #852]	; 0x354

	pan.FrameColor = blue;
 8000b30:	23ff      	movs	r3, #255	; 0xff
 8000b32:	93ce      	str	r3, [sp, #824]	; 0x338
	pan.FillColor = yellow;
 8000b34:	f8df b2d4 	ldr.w	fp, [pc, #724]	; 8000e0c <MainFunc+0x328>
 8000b38:	f8cd b33c 	str.w	fp, [sp, #828]	; 0x33c
	pan.Thickness = 2;
 8000b3c:	f04f 0c02 	mov.w	ip, #2
 8000b40:	f88d c350 	strb.w	ip, [sp, #848]	; 0x350
	pan.X1 = 1;
 8000b44:	95d0      	str	r5, [sp, #832]	; 0x340
	pan.X2 = 480;
 8000b46:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000b4a:	92d1      	str	r2, [sp, #836]	; 0x344
	pan.Y1 = 1;
 8000b4c:	95d2      	str	r5, [sp, #840]	; 0x348
	pan.Y2 = 272;
 8000b4e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000b52:	92d3      	str	r2, [sp, #844]	; 0x34c

	rec.X1 = 50;
 8000b54:	2232      	movs	r2, #50	; 0x32
 8000b56:	92ca      	str	r2, [sp, #808]	; 0x328
	rec.X2 = 480;
 8000b58:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000b5c:	92cb      	str	r2, [sp, #812]	; 0x32c
	rec.Y1 = 50;
 8000b5e:	2232      	movs	r2, #50	; 0x32
 8000b60:	92cc      	str	r2, [sp, #816]	; 0x330
	rec.Y2 = 270;
 8000b62:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8000b66:	92cd      	str	r2, [sp, #820]	; 0x334
	rec.Color = red;
 8000b68:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8000b6c:	92c9      	str	r2, [sp, #804]	; 0x324

	line.X1 = 100;
 8000b6e:	2664      	movs	r6, #100	; 0x64
 8000b70:	96c5      	str	r6, [sp, #788]	; 0x314
	line.X2 = 450;
 8000b72:	f44f 76e1 	mov.w	r6, #450	; 0x1c2
 8000b76:	96c6      	str	r6, [sp, #792]	; 0x318
	line.Y1 = 200;
 8000b78:	f8cd 831c 	str.w	r8, [sp, #796]	; 0x31c
	line.Color = blue;
 8000b7c:	93c4      	str	r3, [sp, #784]	; 0x310
	line.Thickness = 5;
 8000b7e:	f04f 0605 	mov.w	r6, #5
 8000b82:	f88d 6320 	strb.w	r6, [sp, #800]	; 0x320

	ball.X1 = 200;
 8000b86:	f8cd 82fc 	str.w	r8, [sp, #764]	; 0x2fc
	ball.Y1 = 125;
 8000b8a:	267d      	movs	r6, #125	; 0x7d
 8000b8c:	96c0      	str	r6, [sp, #768]	; 0x300
	ball.Color = green;
 8000b8e:	91c2      	str	r1, [sp, #776]	; 0x308
	ball.R = 40;
 8000b90:	2628      	movs	r6, #40	; 0x28
 8000b92:	96c1      	str	r6, [sp, #772]	; 0x304

	p.X1 = 200;
 8000b94:	f8cd 82d0 	str.w	r8, [sp, #720]	; 0x2d0
	p.X2 = 400;
 8000b98:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8000b9c:	96b5      	str	r6, [sp, #724]	; 0x2d4
	p.Y1 = 30;
 8000b9e:	90b6      	str	r0, [sp, #728]	; 0x2d8
	p.Y2 = 40;
 8000ba0:	2628      	movs	r6, #40	; 0x28
 8000ba2:	96b7      	str	r6, [sp, #732]	; 0x2dc
	p.StartValue = 0;
 8000ba4:	94b8      	str	r4, [sp, #736]	; 0x2e0
	p.StopValue = 10;
 8000ba6:	f04f 0e0a 	mov.w	lr, #10
 8000baa:	f8cd e2e4 	str.w	lr, [sp, #740]	; 0x2e4
	p.CurrentValue = 6;
 8000bae:	2606      	movs	r6, #6
 8000bb0:	96ba      	str	r6, [sp, #744]	; 0x2e8
	p.Thickness = 3;
 8000bb2:	2703      	movs	r7, #3
 8000bb4:	f88d 72f8 	strb.w	r7, [sp, #760]	; 0x2f8
	p.FillColor = black;
 8000bb8:	94bc      	str	r4, [sp, #752]	; 0x2f0
	p.FrameColor = blue;
 8000bba:	93bb      	str	r3, [sp, #748]	; 0x2ec
	p.BarColor = red;
 8000bbc:	92bd      	str	r2, [sp, #756]	; 0x2f4
	p.Orientation = Horisontal;
 8000bbe:	f88d 72f9 	strb.w	r7, [sp, #761]	; 0x2f9

	pa.X1 = 30;
 8000bc2:	90a9      	str	r0, [sp, #676]	; 0x2a4
	pa.X2 = 50;
 8000bc4:	2632      	movs	r6, #50	; 0x32
 8000bc6:	96aa      	str	r6, [sp, #680]	; 0x2a8
	pa.Y1 = 30;
 8000bc8:	90ab      	str	r0, [sp, #684]	; 0x2ac
	pa.Y2 = 262;
 8000bca:	f44f 7983 	mov.w	r9, #262	; 0x106
 8000bce:	f8cd 92b0 	str.w	r9, [sp, #688]	; 0x2b0
	pa.StartValue = 0;
 8000bd2:	94ad      	str	r4, [sp, #692]	; 0x2b4
	pa.StopValue = 10;
 8000bd4:	f8cd e2b8 	str.w	lr, [sp, #696]	; 0x2b8
	pa.CurrentValue = 6;
 8000bd8:	2006      	movs	r0, #6
 8000bda:	90af      	str	r0, [sp, #700]	; 0x2bc
	pa.Thickness = 3;
 8000bdc:	f88d 72cc 	strb.w	r7, [sp, #716]	; 0x2cc
	pa.FillColor = black;
 8000be0:	94b1      	str	r4, [sp, #708]	; 0x2c4
	pa.FrameColor = blue;
 8000be2:	93b0      	str	r3, [sp, #704]	; 0x2c0
	pa.BarColor = red;
 8000be4:	92b2      	str	r2, [sp, #712]	; 0x2c8
	pa.Orientation = Vertical;
 8000be6:	f04f 0a04 	mov.w	sl, #4
 8000bea:	f88d a2cd 	strb.w	sl, [sp, #717]	; 0x2cd

	round.X1 = 100;
 8000bee:	2064      	movs	r0, #100	; 0x64
 8000bf0:	90a3      	str	r0, [sp, #652]	; 0x28c
	round.Y1 = 120;
 8000bf2:	2078      	movs	r0, #120	; 0x78
 8000bf4:	90a4      	str	r0, [sp, #656]	; 0x290
	round.Color = yellow;
 8000bf6:	f8cd b298 	str.w	fp, [sp, #664]	; 0x298
	round.Thickness = 3;
 8000bfa:	97a7      	str	r7, [sp, #668]	; 0x29c
	round.R = 40;
 8000bfc:	2028      	movs	r0, #40	; 0x28
 8000bfe:	90a5      	str	r0, [sp, #660]	; 0x294

	check.X1 = 20;
 8000c00:	2014      	movs	r0, #20
 8000c02:	9099      	str	r0, [sp, #612]	; 0x264
	check.X2 = 35;
 8000c04:	2023      	movs	r0, #35	; 0x23
 8000c06:	909a      	str	r0, [sp, #616]	; 0x268
	check.Y1 = 10;
 8000c08:	f8cd e26c 	str.w	lr, [sp, #620]	; 0x26c
	check.Y2 = 25;
 8000c0c:	2019      	movs	r0, #25
 8000c0e:	909c      	str	r0, [sp, #624]	; 0x270
	check.FrameColor = blue;
 8000c10:	939d      	str	r3, [sp, #628]	; 0x274
	check.BackColor = white;
 8000c12:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8000c16:	909e      	str	r0, [sp, #632]	; 0x278
	check.CheckColor = black;
 8000c18:	949f      	str	r4, [sp, #636]	; 0x27c
	check.Checked = 1;
 8000c1a:	f88d 5280 	strb.w	r5, [sp, #640]	; 0x280
	check.TextColor = white;
 8000c1e:	90a1      	str	r0, [sp, #644]	; 0x284

	tr.X1 = 200;
 8000c20:	f8cd 8230 	str.w	r8, [sp, #560]	; 0x230
	tr.X2 = 400;
 8000c24:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8000c28:	968d      	str	r6, [sp, #564]	; 0x234
	tr.Y1 = 45;
 8000c2a:	262d      	movs	r6, #45	; 0x2d
 8000c2c:	968e      	str	r6, [sp, #568]	; 0x238
	tr.Y2 = 50;
 8000c2e:	2632      	movs	r6, #50	; 0x32
 8000c30:	968f      	str	r6, [sp, #572]	; 0x23c
	tr.StartValue = 0;
 8000c32:	9490      	str	r4, [sp, #576]	; 0x240
	tr.StopValue = 10;
 8000c34:	f8cd e244 	str.w	lr, [sp, #580]	; 0x244
	tr.FrameColor = blue;
 8000c38:	9393      	str	r3, [sp, #588]	; 0x24c
	tr.BackColor = red;
 8000c3a:	9294      	str	r2, [sp, #592]	; 0x250
	tr.Orientation = Horisontal;
 8000c3c:	f88d 7258 	strb.w	r7, [sp, #600]	; 0x258
	tr.Radius = 6;
 8000c40:	2606      	movs	r6, #6
 8000c42:	9697      	str	r6, [sp, #604]	; 0x25c
	tr.TrackerColor = yellow;
 8000c44:	f8cd b254 	str.w	fp, [sp, #596]	; 0x254

	tra.X1 = 20;
 8000c48:	2614      	movs	r6, #20
 8000c4a:	967f      	str	r6, [sp, #508]	; 0x1fc
	tra.X2 = 25;
 8000c4c:	2619      	movs	r6, #25
 8000c4e:	9680      	str	r6, [sp, #512]	; 0x200
	tra.Y1 = 35;
 8000c50:	2623      	movs	r6, #35	; 0x23
 8000c52:	9681      	str	r6, [sp, #516]	; 0x204
	tra.Y2 = 262;
 8000c54:	f8cd 9208 	str.w	r9, [sp, #520]	; 0x208
	tra.StartValue = 0;
 8000c58:	9483      	str	r4, [sp, #524]	; 0x20c
	tra.StopValue = 10;
 8000c5a:	f8cd e210 	str.w	lr, [sp, #528]	; 0x210
	tra.FrameColor = blue;
 8000c5e:	9386      	str	r3, [sp, #536]	; 0x218
	tra.BackColor = red;
 8000c60:	9287      	str	r2, [sp, #540]	; 0x21c
	tra.Orientation = Vertical;
 8000c62:	f88d a224 	strb.w	sl, [sp, #548]	; 0x224
	tra.Radius = 6;
 8000c66:	2606      	movs	r6, #6
 8000c68:	968a      	str	r6, [sp, #552]	; 0x228
	tra.TrackerColor = yellow;
 8000c6a:	f8cd b220 	str.w	fp, [sp, #544]	; 0x220

	vgr.X1 = 240;
 8000c6e:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 8000c72:	f8cd a1e0 	str.w	sl, [sp, #480]	; 0x1e0
	vgr.X2 = 340;
 8000c76:	f44f 7aaa 	mov.w	sl, #340	; 0x154
 8000c7a:	f8cd a1e4 	str.w	sl, [sp, #484]	; 0x1e4
	vgr.Y1 = 190;
 8000c7e:	26be      	movs	r6, #190	; 0xbe
 8000c80:	967a      	str	r6, [sp, #488]	; 0x1e8
	vgr.Y2 = 262;
 8000c82:	f8cd 91ec 	str.w	r9, [sp, #492]	; 0x1ec
	vgr.ColorH = red;
 8000c86:	927c      	str	r2, [sp, #496]	; 0x1f0
	vgr.ColorL = lightBlue1;
 8000c88:	f8df a184 	ldr.w	sl, [pc, #388]	; 8000e10 <MainFunc+0x32c>
 8000c8c:	f8cd a1f4 	str.w	sl, [sp, #500]	; 0x1f4
	vgr.Unvisible = 0;
 8000c90:	f88d 41f9 	strb.w	r4, [sp, #505]	; 0x1f9
	vgr.Is_pressed = 0;
 8000c94:	f88d 41f8 	strb.w	r4, [sp, #504]	; 0x1f8

	hgr.X1 = 135;
 8000c98:	f04f 0b87 	mov.w	fp, #135	; 0x87
 8000c9c:	f8cd b1c4 	str.w	fp, [sp, #452]	; 0x1c4
	hgr.X2 = 235;
 8000ca0:	f04f 0beb 	mov.w	fp, #235	; 0xeb
 8000ca4:	f8cd b1c8 	str.w	fp, [sp, #456]	; 0x1c8
	hgr.Y1 = 190;
 8000ca8:	9673      	str	r6, [sp, #460]	; 0x1cc
	hgr.Y2 = 262;
 8000caa:	f8cd 91d0 	str.w	r9, [sp, #464]	; 0x1d0
	hgr.ColorH = red;
 8000cae:	9275      	str	r2, [sp, #468]	; 0x1d4
	hgr.ColorL = lightBlue1;
 8000cb0:	f8cd a1d8 	str.w	sl, [sp, #472]	; 0x1d8
	hgr.Unvisible = 0;
 8000cb4:	f88d 41dd 	strb.w	r4, [sp, #477]	; 0x1dd
	hgr.Is_pressed = 0;
 8000cb8:	f88d 41dc 	strb.w	r4, [sp, #476]	; 0x1dc

	dhgr.X1 = 345;
 8000cbc:	f240 1b59 	movw	fp, #345	; 0x159
 8000cc0:	f8cd b1a4 	str.w	fp, [sp, #420]	; 0x1a4
	dhgr.X2 = 445;
 8000cc4:	f240 1abd 	movw	sl, #445	; 0x1bd
 8000cc8:	f8cd a1a8 	str.w	sl, [sp, #424]	; 0x1a8
	dhgr.Y1 = 190;
 8000ccc:	966b      	str	r6, [sp, #428]	; 0x1ac
	dhgr.Y2 = 262;
 8000cce:	f8cd 91b0 	str.w	r9, [sp, #432]	; 0x1b0
	dhgr.ColorH  = red;
 8000cd2:	926d      	str	r2, [sp, #436]	; 0x1b4
	dhgr.ColorC = green;
 8000cd4:	916e      	str	r1, [sp, #440]	; 0x1b8
	dhgr.ColorL = blue;
 8000cd6:	936f      	str	r3, [sp, #444]	; 0x1bc

	dvgr.X1 = 345;
 8000cd8:	f8cd b184 	str.w	fp, [sp, #388]	; 0x184
	dvgr.X2 = 445;
 8000cdc:	f8cd a188 	str.w	sl, [sp, #392]	; 0x188
	dvgr.Y1 = 113;
 8000ce0:	f04f 0971 	mov.w	r9, #113	; 0x71
 8000ce4:	f8cd 918c 	str.w	r9, [sp, #396]	; 0x18c
	dvgr.Y2 = 185;
 8000ce8:	f04f 09b9 	mov.w	r9, #185	; 0xb9
 8000cec:	f8cd 9190 	str.w	r9, [sp, #400]	; 0x190
	dvgr.ColorH  = red;
 8000cf0:	9265      	str	r2, [sp, #404]	; 0x194
	dvgr.ColorC = green;
 8000cf2:	9166      	str	r1, [sp, #408]	; 0x198
	dvgr.ColorL = blue;
 8000cf4:	9367      	str	r3, [sp, #412]	; 0x19c

    lb.X = 80;
 8000cf6:	f04f 0950 	mov.w	r9, #80	; 0x50
 8000cfa:	f8cd 9170 	str.w	r9, [sp, #368]	; 0x170
    lb.Y = 90;
 8000cfe:	265a      	movs	r6, #90	; 0x5a
 8000d00:	965d      	str	r6, [sp, #372]	; 0x174
    lb.Color = white;
 8000d02:	905e      	str	r0, [sp, #376]	; 0x178
    lb.ClickedColor = gray;
 8000d04:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8000e14 <MainFunc+0x330>
 8000d08:	f8cd 917c 	str.w	r9, [sp, #380]	; 0x17c

    fr.X1 = 2;
 8000d0c:	f8cd c144 	str.w	ip, [sp, #324]	; 0x144
    fr.X2 = 479;
 8000d10:	f240 1adf 	movw	sl, #479	; 0x1df
 8000d14:	f8cd a148 	str.w	sl, [sp, #328]	; 0x148
    fr.Y1 = 2;
 8000d18:	f8cd c14c 	str.w	ip, [sp, #332]	; 0x14c
    fr.Y2 = 271;
 8000d1c:	f240 1b0f 	movw	fp, #271	; 0x10f
 8000d20:	f8cd b150 	str.w	fp, [sp, #336]	; 0x150
    fr.YBar = 25;
 8000d24:	2619      	movs	r6, #25
 8000d26:	9655      	str	r6, [sp, #340]	; 0x154
    fr.BarColor = blue;
 8000d28:	9358      	str	r3, [sp, #352]	; 0x160
    fr.FrameColor = red;
 8000d2a:	9257      	str	r2, [sp, #348]	; 0x15c
    fr.TextColor = green;
 8000d2c:	915a      	str	r1, [sp, #360]	; 0x168
    fr.Thickness = 1;
 8000d2e:	f88d 5158 	strb.w	r5, [sp, #344]	; 0x158
    fr.WindowColor = white;
 8000d32:	9059      	str	r0, [sp, #356]	; 0x164

    bt.FillColor = gray2;
 8000d34:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8000e18 <MainFunc+0x334>
 8000d38:	f8cd 9134 	str.w	r9, [sp, #308]	; 0x134
    bt.FrameColor = black;
 8000d3c:	944c      	str	r4, [sp, #304]	; 0x130
    bt.PressedColor = white;
 8000d3e:	904e      	str	r0, [sp, #312]	; 0x138
    bt.TextColor = black;
 8000d40:	944f      	str	r4, [sp, #316]	; 0x13c
    bt.Thickness = 1;
 8000d42:	f88d 512c 	strb.w	r5, [sp, #300]	; 0x12c
    bt.X1 = 230;
 8000d46:	26e6      	movs	r6, #230	; 0xe6
 8000d48:	9647      	str	r6, [sp, #284]	; 0x11c
    bt.X2 = 310;
 8000d4a:	f44f 799b 	mov.w	r9, #310	; 0x136
 8000d4e:	f8cd 9120 	str.w	r9, [sp, #288]	; 0x120
    bt.Y1 = 100;
 8000d52:	2664      	movs	r6, #100	; 0x64
 8000d54:	9649      	str	r6, [sp, #292]	; 0x124
    bt.Y2 = 120;
 8000d56:	2678      	movs	r6, #120	; 0x78
 8000d58:	964a      	str	r6, [sp, #296]	; 0x128

    hfr.X1 = 2;
 8000d5a:	f8cd c0ec 	str.w	ip, [sp, #236]	; 0xec
    hfr.X2 = 479;
 8000d5e:	f8cd a0f0 	str.w	sl, [sp, #240]	; 0xf0
    hfr.Y1 = 2;
 8000d62:	f8cd c0f4 	str.w	ip, [sp, #244]	; 0xf4
    hfr.Y2 = 271;
 8000d66:	f8cd b0f8 	str.w	fp, [sp, #248]	; 0xf8
    hfr.YBar = 25;
 8000d6a:	2619      	movs	r6, #25
 8000d6c:	963f      	str	r6, [sp, #252]	; 0xfc
    hfr.BarColorH = blue;
 8000d6e:	9342      	str	r3, [sp, #264]	; 0x108
    hfr.BarColorL = lightBlue3;
 8000d70:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8000e1c <MainFunc+0x338>
 8000d74:	f8cd 910c 	str.w	r9, [sp, #268]	; 0x10c
    hfr.FrameColor = red;
 8000d78:	9241      	str	r2, [sp, #260]	; 0x104
    hfr.TextColor = green;
 8000d7a:	9145      	str	r1, [sp, #276]	; 0x114
    hfr.Thickness = 1;
 8000d7c:	f88d 5100 	strb.w	r5, [sp, #256]	; 0x100
    hfr.WindowColor = white;
 8000d80:	9044      	str	r0, [sp, #272]	; 0x110

    vfr.X1 = 2;
 8000d82:	f8cd c0bc 	str.w	ip, [sp, #188]	; 0xbc
    vfr.X2 = 479;
 8000d86:	f8cd a0c0 	str.w	sl, [sp, #192]	; 0xc0
    vfr.Y1 = 2;
 8000d8a:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
    vfr.Y2 = 271;
 8000d8e:	f8cd b0c8 	str.w	fp, [sp, #200]	; 0xc8
    vfr.YBar = 25;
 8000d92:	9633      	str	r6, [sp, #204]	; 0xcc
    vfr.BarColorL = blue;
 8000d94:	9337      	str	r3, [sp, #220]	; 0xdc
    vfr.BarColorH = lightBlue4;
 8000d96:	f509 194c 	add.w	r9, r9, #3342336	; 0x330000
 8000d9a:	f509 594c 	add.w	r9, r9, #13056	; 0x3300
 8000d9e:	f8cd 90d8 	str.w	r9, [sp, #216]	; 0xd8
    vfr.FrameColor = red;
 8000da2:	9235      	str	r2, [sp, #212]	; 0xd4
    vfr.TextColor = green;
 8000da4:	9139      	str	r1, [sp, #228]	; 0xe4
    vfr.Thickness = 1;
 8000da6:	f88d 50d0 	strb.w	r5, [sp, #208]	; 0xd0
    vfr.WindowColor = white;
 8000daa:	9038      	str	r0, [sp, #224]	; 0xe0


	pvg.X1 = 200;
 8000dac:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
	pvg.X2 = 400;
 8000db0:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8000db4:	9624      	str	r6, [sp, #144]	; 0x90
	pvg.Y1 = 70;
 8000db6:	f04f 0846 	mov.w	r8, #70	; 0x46
 8000dba:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
	pvg.Y2 = 90;
 8000dbe:	265a      	movs	r6, #90	; 0x5a
 8000dc0:	9626      	str	r6, [sp, #152]	; 0x98
	pvg.StartValue = 0;
 8000dc2:	9427      	str	r4, [sp, #156]	; 0x9c
	pvg.StopValue = 10;
 8000dc4:	f8cd e0a0 	str.w	lr, [sp, #160]	; 0xa0
	pvg.CurrentValue = 6;
 8000dc8:	2606      	movs	r6, #6
 8000dca:	9629      	str	r6, [sp, #164]	; 0xa4
	pvg.Thickness = 1;
 8000dcc:	f88d 50b8 	strb.w	r5, [sp, #184]	; 0xb8
	pvg.FillColor = black;
 8000dd0:	942b      	str	r4, [sp, #172]	; 0xac
	pvg.FrameColor = green;
 8000dd2:	912a      	str	r1, [sp, #168]	; 0xa8
	pvg.BarColorC = red;
 8000dd4:	922d      	str	r2, [sp, #180]	; 0xb4
	pvg.BarColorH = blue;
 8000dd6:	932c      	str	r3, [sp, #176]	; 0xb0
	pvg.Orientation = Horisontal;
 8000dd8:	f88d 70b9 	strb.w	r7, [sp, #185]	; 0xb9


	rb.BackColor = blue;
 8000ddc:	9320      	str	r3, [sp, #128]	; 0x80
	rb.Checked = 1;
 8000dde:	f88d 5089 	strb.w	r5, [sp, #137]	; 0x89
	rb.Radius = 5;
 8000de2:	2605      	movs	r6, #5
 8000de4:	961d      	str	r6, [sp, #116]	; 0x74
	rb.TextColor = white;
 8000de6:	9021      	str	r0, [sp, #132]	; 0x84
	rb.X = 25;
 8000de8:	2619      	movs	r6, #25
 8000dea:	961b      	str	r6, [sp, #108]	; 0x6c
	rb.Y = 50;
 8000dec:	2632      	movs	r6, #50	; 0x32
 8000dee:	961c      	str	r6, [sp, #112]	; 0x70
	rb.Transp_key = 0;
 8000df0:	f88d 4088 	strb.w	r4, [sp, #136]	; 0x88
	rb.ExCirColor = green;
 8000df4:	911e      	str	r1, [sp, #120]	; 0x78
	rb.InCirColor = blue;
 8000df6:	931f      	str	r3, [sp, #124]	; 0x7c
	rb.Unvisible = 1;
 8000df8:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
 8000dfc:	e010      	b.n	8000e20 <MainFunc+0x33c>
 8000dfe:	bf00      	nop
 8000e00:	2003fc40 	.word	0x2003fc40
 8000e04:	20000040 	.word	0x20000040
 8000e08:	2003fcdc 	.word	0x2003fcdc
 8000e0c:	00ffff00 	.word	0x00ffff00
 8000e10:	003333ff 	.word	0x003333ff
 8000e14:	00808080 	.word	0x00808080
 8000e18:	00c0c0c0 	.word	0x00c0c0c0
 8000e1c:	009999ff 	.word	0x009999ff

	gr.FillColor = white;
 8000e20:	9010      	str	r0, [sp, #64]	; 0x40
	gr.FrameColor = green;
 8000e22:	9111      	str	r1, [sp, #68]	; 0x44
	gr.LinesColor = red;
 8000e24:	9213      	str	r2, [sp, #76]	; 0x4c
	gr.StepX = 1;
 8000e26:	9514      	str	r5, [sp, #80]	; 0x50
	gr.StepY = 10;
 8000e28:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
	gr.X1 = 1;
 8000e2c:	950c      	str	r5, [sp, #48]	; 0x30
	gr.X2 = 480;
 8000e2e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000e32:	930d      	str	r3, [sp, #52]	; 0x34
	gr.XMax = 10;
 8000e34:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
	gr.XMin = 0;
 8000e38:	9417      	str	r4, [sp, #92]	; 0x5c
	gr.Y1 = 1;
 8000e3a:	950e      	str	r5, [sp, #56]	; 0x38
	gr.Y2 = 272;
 8000e3c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000e40:	930f      	str	r3, [sp, #60]	; 0x3c
	gr.YMax = 100;
 8000e42:	2364      	movs	r3, #100	; 0x64
 8000e44:	9318      	str	r3, [sp, #96]	; 0x60
	gr.YMin = 0;
 8000e46:	9419      	str	r4, [sp, #100]	; 0x64
	gr.Unvisible = 0;
 8000e48:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
	gr.Thickness = 2;
 8000e4c:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48

	grL.LineColor = black;
 8000e50:	940a      	str	r4, [sp, #40]	; 0x28
	grL.Points_count = 10;
 8000e52:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
	grL.Thickness = 2;
 8000e56:	f88d c02c 	strb.w	ip, [sp, #44]	; 0x2c


    RTB.Y1 = 1;
 8000e5a:	9502      	str	r5, [sp, #8]
    RTB.Y2 = 40;
 8000e5c:	2328      	movs	r3, #40	; 0x28
 8000e5e:	9303      	str	r3, [sp, #12]
    RTB.Thickness = 2;
 8000e60:	f8cd c010 	str.w	ip, [sp, #16]
    RTB.FrameColor = white;
 8000e64:	9005      	str	r0, [sp, #20]
    RTB.FillColor = black;
 8000e66:	9406      	str	r4, [sp, #24]
    RTB.TextColor = green;
 8000e68:	9107      	str	r1, [sp, #28]





    uint16 i = 0;
 8000e6a:	e011      	b.n	8000e90 <MainFunc+0x3ac>
//		    LCD_HGradient(&hgr);
//		    LCD_DualHGradient(&dhgr);
//		    LCD_DualVGradient(&dvgr);
//		    LCD_Label(&lb, "Hello!");
//		    LCD_Button(&bt, "Butt1");
		    LCD_RichTextBox(&RTB, "QWERTYUIOPASDFGHJKL;'ZXCVBNM,./qwertyuiop[]asdfghjkl;'zxcvbnm,./");
 8000e6c:	490c      	ldr	r1, [pc, #48]	; (8000ea0 <MainFunc+0x3bc>)
 8000e6e:	4668      	mov	r0, sp
 8000e70:	f7ff fe22 	bl	8000ab8 <LCD_RichTextBox>
		    HAL_Delay(300);
 8000e74:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e78:	f000 ff14 	bl	8001ca4 <HAL_Delay>

		    RTB.X2+=1;
 8000e7c:	9b01      	ldr	r3, [sp, #4]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	9301      	str	r3, [sp, #4]
		    RTB.Y2+=1;
 8000e82:	9b03      	ldr	r3, [sp, #12]
 8000e84:	3301      	adds	r3, #1
 8000e86:	9303      	str	r3, [sp, #12]
		for(i = 0; i < 220; i++)
 8000e88:	3401      	adds	r4, #1
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	2cdb      	cmp	r4, #219	; 0xdb
 8000e8e:	d9ed      	bls.n	8000e6c <MainFunc+0x388>
		RTB.X1 = 10;
 8000e90:	230a      	movs	r3, #10
 8000e92:	9300      	str	r3, [sp, #0]
		RTB.X2 = 20;
 8000e94:	2314      	movs	r3, #20
 8000e96:	9301      	str	r3, [sp, #4]
		RTB.Y2 = 40;
 8000e98:	2328      	movs	r3, #40	; 0x28
 8000e9a:	9303      	str	r3, [sp, #12]
		for(i = 0; i < 220; i++)
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	e7f5      	b.n	8000e8c <MainFunc+0x3a8>
 8000ea0:	08005bfc 	.word	0x08005bfc

08000ea4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000ea4:	b510      	push	{r4, lr}
 8000ea6:	b084      	sub	sp, #16
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ea8:	2400      	movs	r4, #0
 8000eaa:	9400      	str	r4, [sp, #0]
 8000eac:	9401      	str	r4, [sp, #4]
 8000eae:	9402      	str	r4, [sp, #8]
 8000eb0:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000eb2:	f000 ff61 	bl	8001d78 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	f88d 3000 	strb.w	r3, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ebc:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x20000004;
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <MPU_Config+0x54>)
 8000ec2:	9201      	str	r2, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000ec4:	2211      	movs	r2, #17
 8000ec6:	f88d 2008 	strb.w	r2, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000eca:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ece:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	f88d 200b 	strb.w	r2, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000ed8:	f88d 400c 	strb.w	r4, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000edc:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000ee0:	f88d 300e 	strb.w	r3, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ee4:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ee8:	4668      	mov	r0, sp
 8000eea:	f000 ff63 	bl	8001db4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000eee:	2004      	movs	r0, #4
 8000ef0:	f000 ff50 	bl	8001d94 <HAL_MPU_Enable>

}
 8000ef4:	b004      	add	sp, #16
 8000ef6:	bd10      	pop	{r4, pc}
 8000ef8:	20000004 	.word	0x20000004

08000efc <MX_GPIO_Init>:
{
 8000efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f00:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	2400      	movs	r4, #0
 8000f04:	940b      	str	r4, [sp, #44]	; 0x2c
 8000f06:	940c      	str	r4, [sp, #48]	; 0x30
 8000f08:	940d      	str	r4, [sp, #52]	; 0x34
 8000f0a:	940e      	str	r4, [sp, #56]	; 0x38
 8000f0c:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f0e:	4baa      	ldr	r3, [pc, #680]	; (80011b8 <MX_GPIO_Init+0x2bc>)
 8000f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f12:	f042 0210 	orr.w	r2, r2, #16
 8000f16:	631a      	str	r2, [r3, #48]	; 0x30
 8000f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f1a:	f002 0210 	and.w	r2, r2, #16
 8000f1e:	9200      	str	r2, [sp, #0]
 8000f20:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f28:	631a      	str	r2, [r3, #48]	; 0x30
 8000f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f2c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000f30:	9201      	str	r2, [sp, #4]
 8000f32:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f36:	f042 0202 	orr.w	r2, r2, #2
 8000f3a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f3e:	f002 0202 	and.w	r2, r2, #2
 8000f42:	9202      	str	r2, [sp, #8]
 8000f44:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f48:	f042 0208 	orr.w	r2, r2, #8
 8000f4c:	631a      	str	r2, [r3, #48]	; 0x30
 8000f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f50:	f002 0208 	and.w	r2, r2, #8
 8000f54:	9203      	str	r2, [sp, #12]
 8000f56:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f5a:	f042 0204 	orr.w	r2, r2, #4
 8000f5e:	631a      	str	r2, [r3, #48]	; 0x30
 8000f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f62:	f002 0204 	and.w	r2, r2, #4
 8000f66:	9204      	str	r2, [sp, #16]
 8000f68:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f6c:	f042 0201 	orr.w	r2, r2, #1
 8000f70:	631a      	str	r2, [r3, #48]	; 0x30
 8000f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f74:	f002 0201 	and.w	r2, r2, #1
 8000f78:	9205      	str	r2, [sp, #20]
 8000f7a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f82:	631a      	str	r2, [r3, #48]	; 0x30
 8000f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f86:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000f8a:	9206      	str	r2, [sp, #24]
 8000f8c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f94:	631a      	str	r2, [r3, #48]	; 0x30
 8000f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f98:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000f9c:	9207      	str	r2, [sp, #28]
 8000f9e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fa2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fa6:	631a      	str	r2, [r3, #48]	; 0x30
 8000fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000faa:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000fae:	9208      	str	r2, [sp, #32]
 8000fb0:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fb4:	f042 0220 	orr.w	r2, r2, #32
 8000fb8:	631a      	str	r2, [r3, #48]	; 0x30
 8000fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fbc:	f002 0220 	and.w	r2, r2, #32
 8000fc0:	9209      	str	r2, [sp, #36]	; 0x24
 8000fc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fca:	631a      	str	r2, [r3, #48]	; 0x30
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd2:	930a      	str	r3, [sp, #40]	; 0x28
 8000fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2120      	movs	r1, #32
 8000fda:	4878      	ldr	r0, [pc, #480]	; (80011bc <MX_GPIO_Init+0x2c0>)
 8000fdc:	f001 f93c 	bl	8002258 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8000fe0:	4622      	mov	r2, r4
 8000fe2:	210c      	movs	r1, #12
 8000fe4:	4876      	ldr	r0, [pc, #472]	; (80011c0 <MX_GPIO_Init+0x2c4>)
 8000fe6:	f001 f937 	bl	8002258 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	2108      	movs	r1, #8
 8000fee:	4875      	ldr	r0, [pc, #468]	; (80011c4 <MX_GPIO_Init+0x2c8>)
 8000ff0:	f001 f932 	bl	8002258 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ffa:	4871      	ldr	r0, [pc, #452]	; (80011c0 <MX_GPIO_Init+0x2c4>)
 8000ffc:	f001 f92c 	bl	8002258 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001000:	4622      	mov	r2, r4
 8001002:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001006:	4870      	ldr	r0, [pc, #448]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8001008:	f001 f926 	bl	8002258 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800100c:	4622      	mov	r2, r4
 800100e:	21c8      	movs	r1, #200	; 0xc8
 8001010:	486e      	ldr	r0, [pc, #440]	; (80011cc <MX_GPIO_Init+0x2d0>)
 8001012:	f001 f921 	bl	8002258 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001016:	2308      	movs	r3, #8
 8001018:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800101e:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 80011d8 <MX_GPIO_Init+0x2dc>
 8001022:	a90b      	add	r1, sp, #44	; 0x2c
 8001024:	4648      	mov	r0, r9
 8001026:	f001 f825 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800102a:	2304      	movs	r3, #4
 800102c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2502      	movs	r5, #2
 8001030:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2603      	movs	r6, #3
 8001036:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001038:	2309      	movs	r3, #9
 800103a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800103c:	a90b      	add	r1, sp, #44	; 0x2c
 800103e:	4648      	mov	r0, r9
 8001040:	f001 f818 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001044:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001048:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001050:	230b      	movs	r3, #11
 8001052:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001054:	a90b      	add	r1, sp, #44	; 0x2c
 8001056:	485d      	ldr	r0, [pc, #372]	; (80011cc <MX_GPIO_Init+0x2d0>)
 8001058:	f001 f80c 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800105c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001060:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001062:	2312      	movs	r3, #18
 8001064:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800106a:	2304      	movs	r3, #4
 800106c:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106e:	f8df b16c 	ldr.w	fp, [pc, #364]	; 80011dc <MX_GPIO_Init+0x2e0>
 8001072:	a90b      	add	r1, sp, #44	; 0x2c
 8001074:	4658      	mov	r0, fp
 8001076:	f000 fffd 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800107a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800107e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001086:	f04f 080a 	mov.w	r8, #10
 800108a:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	a90b      	add	r1, sp, #44	; 0x2c
 8001090:	4658      	mov	r0, fp
 8001092:	f000 ffef 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001096:	2310      	movs	r3, #16
 8001098:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010a0:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80010a2:	a90b      	add	r1, sp, #44	; 0x2c
 80010a4:	4658      	mov	r0, fp
 80010a6:	f000 ffe5 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80010b4:	2308      	movs	r3, #8
 80010b6:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80010b8:	a90b      	add	r1, sp, #44	; 0x2c
 80010ba:	4840      	ldr	r0, [pc, #256]	; (80011bc <MX_GPIO_Init+0x2c0>)
 80010bc:	f000 ffda 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80010c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010c4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010cc:	2701      	movs	r7, #1
 80010ce:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f8df a10c 	ldr.w	sl, [pc, #268]	; 80011e0 <MX_GPIO_Init+0x2e4>
 80010d4:	a90b      	add	r1, sp, #44	; 0x2c
 80010d6:	4650      	mov	r0, sl
 80010d8:	f000 ffcc 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80010dc:	2360      	movs	r3, #96	; 0x60
 80010de:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010e6:	230d      	movs	r3, #13
 80010e8:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ea:	a90b      	add	r1, sp, #44	; 0x2c
 80010ec:	4648      	mov	r0, r9
 80010ee:	f000 ffc1 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010fc:	2307      	movs	r3, #7
 80010fe:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001100:	a90b      	add	r1, sp, #44	; 0x2c
 8001102:	4658      	mov	r0, fp
 8001104:	f000 ffb6 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001108:	2340      	movs	r3, #64	; 0x40
 800110a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001112:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001116:	a90b      	add	r1, sp, #44	; 0x2c
 8001118:	4658      	mov	r0, fp
 800111a:	f000 ffab 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800111e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001122:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001124:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001128:	a90b      	add	r1, sp, #44	; 0x2c
 800112a:	4829      	ldr	r0, [pc, #164]	; (80011d0 <MX_GPIO_Init+0x2d4>)
 800112c:	f000 ffa2 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001130:	2340      	movs	r3, #64	; 0x40
 8001132:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001134:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <MX_GPIO_Init+0x2d8>)
 8001136:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800113a:	a90b      	add	r1, sp, #44	; 0x2c
 800113c:	481f      	ldr	r0, [pc, #124]	; (80011bc <MX_GPIO_Init+0x2c0>)
 800113e:	f000 ff99 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001142:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001146:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800114e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	a90b      	add	r1, sp, #44	; 0x2c
 8001154:	4650      	mov	r0, sl
 8001156:	f000 ff8d 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800115a:	23f0      	movs	r3, #240	; 0xf0
 800115c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001164:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001168:	a90b      	add	r1, sp, #44	; 0x2c
 800116a:	4815      	ldr	r0, [pc, #84]	; (80011c0 <MX_GPIO_Init+0x2c4>)
 800116c:	f000 ff82 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001174:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800117c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001180:	a90b      	add	r1, sp, #44	; 0x2c
 8001182:	4812      	ldr	r0, [pc, #72]	; (80011cc <MX_GPIO_Init+0x2d0>)
 8001184:	f000 ff76 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001188:	2320      	movs	r3, #32
 800118a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118c:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001192:	a90b      	add	r1, sp, #44	; 0x2c
 8001194:	4809      	ldr	r0, [pc, #36]	; (80011bc <MX_GPIO_Init+0x2c0>)
 8001196:	f000 ff6d 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800119a:	2208      	movs	r2, #8
 800119c:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011a4:	220d      	movs	r2, #13
 80011a6:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80011a8:	a90b      	add	r1, sp, #44	; 0x2c
 80011aa:	4804      	ldr	r0, [pc, #16]	; (80011bc <MX_GPIO_Init+0x2c0>)
 80011ac:	f000 ff62 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80011b0:	f241 030c 	movw	r3, #4108	; 0x100c
 80011b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80011b6:	e015      	b.n	80011e4 <MX_GPIO_Init+0x2e8>
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020c00 	.word	0x40020c00
 80011c0:	40022000 	.word	0x40022000
 80011c4:	40022800 	.word	0x40022800
 80011c8:	40021c00 	.word	0x40021c00
 80011cc:	40021800 	.word	0x40021800
 80011d0:	40022400 	.word	0x40022400
 80011d4:	10120000 	.word	0x10120000
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40020400 	.word	0x40020400
 80011e0:	40020000 	.word	0x40020000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011ea:	a90b      	add	r1, sp, #44	; 0x2c
 80011ec:	488e      	ldr	r0, [pc, #568]	; (8001428 <MX_GPIO_Init+0x52c>)
 80011ee:	f000 ff41 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80011f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011f6:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f8:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f5a9 6900 	sub.w	r9, r9, #2048	; 0x800
 8001200:	a90b      	add	r1, sp, #44	; 0x2c
 8001202:	4648      	mov	r0, r9
 8001204:	f000 ff36 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001208:	2208      	movs	r2, #8
 800120a:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001212:	a90b      	add	r1, sp, #44	; 0x2c
 8001214:	4885      	ldr	r0, [pc, #532]	; (800142c <MX_GPIO_Init+0x530>)
 8001216:	f000 ff2d 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800121a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800121e:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001226:	220d      	movs	r2, #13
 8001228:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800122a:	a90b      	add	r1, sp, #44	; 0x2c
 800122c:	4880      	ldr	r0, [pc, #512]	; (8001430 <MX_GPIO_Init+0x534>)
 800122e:	f000 ff21 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001232:	2210      	movs	r2, #16
 8001234:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001236:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800123a:	a90b      	add	r1, sp, #44	; 0x2c
 800123c:	487d      	ldr	r0, [pc, #500]	; (8001434 <MX_GPIO_Init+0x538>)
 800123e:	f000 ff19 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001242:	f248 0304 	movw	r3, #32772	; 0x8004
 8001246:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001248:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800124c:	a90b      	add	r1, sp, #44	; 0x2c
 800124e:	487a      	ldr	r0, [pc, #488]	; (8001438 <MX_GPIO_Init+0x53c>)
 8001250:	f000 ff10 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001254:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800125c:	2205      	movs	r2, #5
 800125e:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001260:	a90b      	add	r1, sp, #44	; 0x2c
 8001262:	4871      	ldr	r0, [pc, #452]	; (8001428 <MX_GPIO_Init+0x52c>)
 8001264:	f000 ff06 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001268:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800126c:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126e:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001274:	a90b      	add	r1, sp, #44	; 0x2c
 8001276:	4870      	ldr	r0, [pc, #448]	; (8001438 <MX_GPIO_Init+0x53c>)
 8001278:	f000 fefc 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800127c:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001280:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001288:	220d      	movs	r2, #13
 800128a:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800128c:	a90b      	add	r1, sp, #44	; 0x2c
 800128e:	486a      	ldr	r0, [pc, #424]	; (8001438 <MX_GPIO_Init+0x53c>)
 8001290:	f000 fef0 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001294:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800129c:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800129e:	a90b      	add	r1, sp, #44	; 0x2c
 80012a0:	4861      	ldr	r0, [pc, #388]	; (8001428 <MX_GPIO_Init+0x52c>)
 80012a2:	f000 fee7 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 80012a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012aa:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012b2:	2207      	movs	r2, #7
 80012b4:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80012b6:	a90b      	add	r1, sp, #44	; 0x2c
 80012b8:	4650      	mov	r0, sl
 80012ba:	f000 fedb 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80012be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012ca:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80012cc:	a90b      	add	r1, sp, #44	; 0x2c
 80012ce:	4650      	mov	r0, sl
 80012d0:	f000 fed0 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80012d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012d8:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012da:	4b58      	ldr	r3, [pc, #352]	; (800143c <MX_GPIO_Init+0x540>)
 80012dc:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80012e0:	a90b      	add	r1, sp, #44	; 0x2c
 80012e2:	4851      	ldr	r0, [pc, #324]	; (8001428 <MX_GPIO_Init+0x52c>)
 80012e4:	f000 fec6 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80012e8:	23c0      	movs	r3, #192	; 0xc0
 80012ea:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80012f2:	2308      	movs	r3, #8
 80012f4:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f6:	a90b      	add	r1, sp, #44	; 0x2c
 80012f8:	4648      	mov	r0, r9
 80012fa:	f000 febb 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80012fe:	2310      	movs	r3, #16
 8001300:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001308:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800130c:	a90b      	add	r1, sp, #44	; 0x2c
 800130e:	484a      	ldr	r0, [pc, #296]	; (8001438 <MX_GPIO_Init+0x53c>)
 8001310:	f000 feb0 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001314:	23c8      	movs	r3, #200	; 0xc8
 8001316:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800131e:	a90b      	add	r1, sp, #44	; 0x2c
 8001320:	4843      	ldr	r0, [pc, #268]	; (8001430 <MX_GPIO_Init+0x534>)
 8001322:	f000 fea7 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001326:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800132a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800132c:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001330:	a90b      	add	r1, sp, #44	; 0x2c
 8001332:	4843      	ldr	r0, [pc, #268]	; (8001440 <MX_GPIO_Init+0x544>)
 8001334:	f000 fe9e 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001338:	2305      	movs	r3, #5
 800133a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001342:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001346:	a90b      	add	r1, sp, #44	; 0x2c
 8001348:	4648      	mov	r0, r9
 800134a:	f000 fe93 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800134e:	2332      	movs	r3, #50	; 0x32
 8001350:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001358:	230b      	movs	r3, #11
 800135a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135c:	a90b      	add	r1, sp, #44	; 0x2c
 800135e:	4648      	mov	r0, r9
 8001360:	f000 fe88 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001364:	2304      	movs	r3, #4
 8001366:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800136e:	2309      	movs	r3, #9
 8001370:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001372:	a90b      	add	r1, sp, #44	; 0x2c
 8001374:	4658      	mov	r0, fp
 8001376:	f000 fe7d 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800137a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800137e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001386:	2309      	movs	r3, #9
 8001388:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800138a:	a90b      	add	r1, sp, #44	; 0x2c
 800138c:	4829      	ldr	r0, [pc, #164]	; (8001434 <MX_GPIO_Init+0x538>)
 800138e:	f000 fe71 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001392:	2304      	movs	r3, #4
 8001394:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001396:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800139a:	a90b      	add	r1, sp, #44	; 0x2c
 800139c:	4824      	ldr	r0, [pc, #144]	; (8001430 <MX_GPIO_Init+0x534>)
 800139e:	f000 fe69 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013a2:	2386      	movs	r3, #134	; 0x86
 80013a4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ac:	230b      	movs	r3, #11
 80013ae:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	a90b      	add	r1, sp, #44	; 0x2c
 80013b2:	4650      	mov	r0, sl
 80013b4:	f000 fe5e 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80013b8:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ba:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80013be:	a90b      	add	r1, sp, #44	; 0x2c
 80013c0:	4650      	mov	r0, sl
 80013c2:	f000 fe57 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80013c6:	2350      	movs	r3, #80	; 0x50
 80013c8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013d0:	230d      	movs	r3, #13
 80013d2:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	a90b      	add	r1, sp, #44	; 0x2c
 80013d6:	4650      	mov	r0, sl
 80013d8:	f000 fe4c 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80013dc:	2328      	movs	r3, #40	; 0x28
 80013de:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e4:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80013e6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	a90b      	add	r1, sp, #44	; 0x2c
 80013ec:	4650      	mov	r0, sl
 80013ee:	f000 fe41 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80013f2:	2340      	movs	r3, #64	; 0x40
 80013f4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80013fc:	2309      	movs	r3, #9
 80013fe:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001400:	a90b      	add	r1, sp, #44	; 0x2c
 8001402:	480d      	ldr	r0, [pc, #52]	; (8001438 <MX_GPIO_Init+0x53c>)
 8001404:	f000 fe36 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001408:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800140c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001414:	2305      	movs	r3, #5
 8001416:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001418:	a90b      	add	r1, sp, #44	; 0x2c
 800141a:	4658      	mov	r0, fp
 800141c:	f000 fe2a 	bl	8002074 <HAL_GPIO_Init>
}
 8001420:	b011      	add	sp, #68	; 0x44
 8001422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001426:	bf00      	nop
 8001428:	40022000 	.word	0x40022000
 800142c:	40022800 	.word	0x40022800
 8001430:	40021800 	.word	0x40021800
 8001434:	40020c00 	.word	0x40020c00
 8001438:	40021c00 	.word	0x40021c00
 800143c:	10120000 	.word	0x10120000
 8001440:	40021400 	.word	0x40021400

08001444 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001444:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001446:	6802      	ldr	r2, [r0, #0]
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800144a:	429a      	cmp	r2, r3
 800144c:	d000      	beq.n	8001450 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800144e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8001450:	f000 fc16 	bl	8001c80 <HAL_IncTick>
}
 8001454:	e7fb      	b.n	800144e <HAL_TIM_PeriodElapsedCallback+0xa>
 8001456:	bf00      	nop
 8001458:	40001000 	.word	0x40001000

0800145c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800145c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800145e:	e7fe      	b.n	800145e <Error_Handler+0x2>

08001460 <MX_DMA2D_Init>:
{
 8001460:	b508      	push	{r3, lr}
  hdma2d.Instance = DMA2D;
 8001462:	480c      	ldr	r0, [pc, #48]	; (8001494 <MX_DMA2D_Init+0x34>)
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_DMA2D_Init+0x38>)
 8001466:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001468:	2300      	movs	r3, #0
 800146a:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800146c:	2202      	movs	r2, #2
 800146e:	6082      	str	r2, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8001470:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001472:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001474:	62c2      	str	r2, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001476:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001478:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800147a:	f000 fccb 	bl	8001e14 <HAL_DMA2D_Init>
 800147e:	b928      	cbnz	r0, 800148c <MX_DMA2D_Init+0x2c>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001480:	2101      	movs	r1, #1
 8001482:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_DMA2D_Init+0x34>)
 8001484:	f000 fd94 	bl	8001fb0 <HAL_DMA2D_ConfigLayer>
 8001488:	b910      	cbnz	r0, 8001490 <MX_DMA2D_Init+0x30>
}
 800148a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800148c:	f7ff ffe6 	bl	800145c <Error_Handler>
    Error_Handler();
 8001490:	f7ff ffe4 	bl	800145c <Error_Handler>
 8001494:	2003fc50 	.word	0x2003fc50
 8001498:	4002b000 	.word	0x4002b000

0800149c <MX_FMC_Init>:
{
 800149c:	b500      	push	{lr}
 800149e:	b089      	sub	sp, #36	; 0x24
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80014a0:	2300      	movs	r3, #0
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	9303      	str	r3, [sp, #12]
 80014a8:	9304      	str	r3, [sp, #16]
 80014aa:	9305      	str	r3, [sp, #20]
 80014ac:	9306      	str	r3, [sp, #24]
 80014ae:	9307      	str	r3, [sp, #28]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80014b0:	4813      	ldr	r0, [pc, #76]	; (8001500 <MX_FMC_Init+0x64>)
 80014b2:	4a14      	ldr	r2, [pc, #80]	; (8001504 <MX_FMC_Init+0x68>)
 80014b4:	6002      	str	r2, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80014b6:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80014b8:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80014ba:	2104      	movs	r1, #4
 80014bc:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80014be:	2210      	movs	r2, #16
 80014c0:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80014c2:	2240      	movs	r2, #64	; 0x40
 80014c4:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80014c6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80014ca:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80014cc:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80014ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014d2:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80014d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014d8:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80014da:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 80014dc:	2302      	movs	r3, #2
 80014de:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80014e0:	2206      	movs	r2, #6
 80014e2:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 80014e4:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
 80014e6:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80014e8:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 2;
 80014ea:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 80014ec:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80014ee:	4469      	add	r1, sp
 80014f0:	f002 fa73 	bl	80039da <HAL_SDRAM_Init>
 80014f4:	b910      	cbnz	r0, 80014fc <MX_FMC_Init+0x60>
}
 80014f6:	b009      	add	sp, #36	; 0x24
 80014f8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 80014fc:	f7ff ffae 	bl	800145c <Error_Handler>
 8001500:	2003fda4 	.word	0x2003fda4
 8001504:	a0000140 	.word	0xa0000140

08001508 <MX_I2C3_Init>:
{
 8001508:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 800150a:	4811      	ldr	r0, [pc, #68]	; (8001550 <MX_I2C3_Init+0x48>)
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <MX_I2C3_Init+0x4c>)
 800150e:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <MX_I2C3_Init+0x50>)
 8001512:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 224;
 8001514:	23e0      	movs	r3, #224	; 0xe0
 8001516:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001518:	2301      	movs	r3, #1
 800151a:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001520:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001522:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001524:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001526:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001528:	f000 fe9c 	bl	8002264 <HAL_I2C_Init>
 800152c:	b950      	cbnz	r0, 8001544 <MX_I2C3_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800152e:	2100      	movs	r1, #0
 8001530:	4807      	ldr	r0, [pc, #28]	; (8001550 <MX_I2C3_Init+0x48>)
 8001532:	f000 fef5 	bl	8002320 <HAL_I2CEx_ConfigAnalogFilter>
 8001536:	b938      	cbnz	r0, 8001548 <MX_I2C3_Init+0x40>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001538:	2100      	movs	r1, #0
 800153a:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_I2C3_Init+0x48>)
 800153c:	f000 ff1e 	bl	800237c <HAL_I2CEx_ConfigDigitalFilter>
 8001540:	b920      	cbnz	r0, 800154c <MX_I2C3_Init+0x44>
}
 8001542:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001544:	f7ff ff8a 	bl	800145c <Error_Handler>
    Error_Handler();
 8001548:	f7ff ff88 	bl	800145c <Error_Handler>
    Error_Handler();
 800154c:	f7ff ff86 	bl	800145c <Error_Handler>
 8001550:	2003fc90 	.word	0x2003fc90
 8001554:	40005c00 	.word	0x40005c00
 8001558:	00c0eaff 	.word	0x00c0eaff

0800155c <MX_LTDC_Init>:
{
 800155c:	b500      	push	{lr}
 800155e:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001560:	2234      	movs	r2, #52	; 0x34
 8001562:	2100      	movs	r1, #0
 8001564:	a801      	add	r0, sp, #4
 8001566:	f002 fce1 	bl	8003f2c <memset>
  hltdc.Instance = LTDC;
 800156a:	4826      	ldr	r0, [pc, #152]	; (8001604 <MX_LTDC_Init+0xa8>)
 800156c:	4b26      	ldr	r3, [pc, #152]	; (8001608 <MX_LTDC_Init+0xac>)
 800156e:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001570:	2300      	movs	r3, #0
 8001572:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001574:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001576:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001578:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 40;
 800157a:	2228      	movs	r2, #40	; 0x28
 800157c:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 9;
 800157e:	2209      	movs	r2, #9
 8001580:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001582:	2235      	movs	r2, #53	; 0x35
 8001584:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001586:	220b      	movs	r2, #11
 8001588:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800158a:	f240 2215 	movw	r2, #533	; 0x215
 800158e:	6242      	str	r2, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001590:	f240 121b 	movw	r2, #283	; 0x11b
 8001594:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001596:	f240 2235 	movw	r2, #565	; 0x235
 800159a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800159c:	f240 121d 	movw	r2, #285	; 0x11d
 80015a0:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80015a2:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80015a6:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80015aa:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80015ae:	f000 ffed 	bl	800258c <HAL_LTDC_Init>
 80015b2:	bb18      	cbnz	r0, 80015fc <MX_LTDC_Init+0xa0>
  pLayerCfg.WindowX0 = 0;
 80015b4:	2200      	movs	r2, #0
 80015b6:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 80015b8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80015bc:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 80015be:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 80015c0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80015c4:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80015c6:	2002      	movs	r0, #2
 80015c8:	9005      	str	r0, [sp, #20]
  pLayerCfg.Alpha = 255;
 80015ca:	20ff      	movs	r0, #255	; 0xff
 80015cc:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 80015ce:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80015d0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015d4:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80015d6:	2005      	movs	r0, #5
 80015d8:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80015da:	920a      	str	r2, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80015dc:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80015de:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80015e0:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80015e4:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80015e8:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80015ec:	a901      	add	r1, sp, #4
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_LTDC_Init+0xa8>)
 80015f0:	f001 f8b6 	bl	8002760 <HAL_LTDC_ConfigLayer>
 80015f4:	b920      	cbnz	r0, 8001600 <MX_LTDC_Init+0xa4>
}
 80015f6:	b00f      	add	sp, #60	; 0x3c
 80015f8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80015fc:	f7ff ff2e 	bl	800145c <Error_Handler>
    Error_Handler();
 8001600:	f7ff ff2c 	bl	800145c <Error_Handler>
 8001604:	2003fcdc 	.word	0x2003fcdc
 8001608:	40016800 	.word	0x40016800

0800160c <MX_RTC_Init>:
{
 800160c:	b510      	push	{r4, lr}
 800160e:	b092      	sub	sp, #72	; 0x48
  RTC_TimeTypeDef sTime = {0};
 8001610:	2400      	movs	r4, #0
 8001612:	940c      	str	r4, [sp, #48]	; 0x30
 8001614:	940d      	str	r4, [sp, #52]	; 0x34
 8001616:	940e      	str	r4, [sp, #56]	; 0x38
 8001618:	940f      	str	r4, [sp, #60]	; 0x3c
 800161a:	9410      	str	r4, [sp, #64]	; 0x40
 800161c:	9411      	str	r4, [sp, #68]	; 0x44
  RTC_DateTypeDef sDate = {0};
 800161e:	940b      	str	r4, [sp, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001620:	222c      	movs	r2, #44	; 0x2c
 8001622:	4621      	mov	r1, r4
 8001624:	4668      	mov	r0, sp
 8001626:	f002 fc81 	bl	8003f2c <memset>
  hrtc.Instance = RTC;
 800162a:	4831      	ldr	r0, [pc, #196]	; (80016f0 <MX_RTC_Init+0xe4>)
 800162c:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <MX_RTC_Init+0xe8>)
 800162e:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001630:	6044      	str	r4, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001632:	237f      	movs	r3, #127	; 0x7f
 8001634:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8001636:	23ff      	movs	r3, #255	; 0xff
 8001638:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800163a:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800163c:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800163e:	6184      	str	r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001640:	f001 ff8e 	bl	8003560 <HAL_RTC_Init>
 8001644:	2800      	cmp	r0, #0
 8001646:	d147      	bne.n	80016d8 <MX_RTC_Init+0xcc>
  sTime.Hours = 0x0;
 8001648:	2300      	movs	r3, #0
 800164a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  sTime.Minutes = 0x0;
 800164e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001652:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001656:	9310      	str	r3, [sp, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001658:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800165a:	2201      	movs	r2, #1
 800165c:	a90c      	add	r1, sp, #48	; 0x30
 800165e:	4824      	ldr	r0, [pc, #144]	; (80016f0 <MX_RTC_Init+0xe4>)
 8001660:	f001 ffec 	bl	800363c <HAL_RTC_SetTime>
 8001664:	2800      	cmp	r0, #0
 8001666:	d139      	bne.n	80016dc <MX_RTC_Init+0xd0>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001668:	2201      	movs	r2, #1
 800166a:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800166e:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  sDate.Date = 0x1;
 8001672:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
  sDate.Year = 0x0;
 8001676:	2300      	movs	r3, #0
 8001678:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800167c:	a90b      	add	r1, sp, #44	; 0x2c
 800167e:	481c      	ldr	r0, [pc, #112]	; (80016f0 <MX_RTC_Init+0xe4>)
 8001680:	f002 f85c 	bl	800373c <HAL_RTC_SetDate>
 8001684:	bb60      	cbnz	r0, 80016e0 <MX_RTC_Init+0xd4>
  sAlarm.AlarmTime.Hours = 0x0;
 8001686:	2300      	movs	r3, #0
 8001688:	f88d 3000 	strb.w	r3, [sp]
  sAlarm.AlarmTime.Minutes = 0x0;
 800168c:	f88d 3001 	strb.w	r3, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001690:	f88d 3002 	strb.w	r3, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001694:	9301      	str	r3, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001696:	9304      	str	r3, [sp, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001698:	9305      	str	r3, [sp, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800169a:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800169c:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800169e:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80016a0:	2201      	movs	r2, #1
 80016a2:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80016a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016aa:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80016ac:	4669      	mov	r1, sp
 80016ae:	4810      	ldr	r0, [pc, #64]	; (80016f0 <MX_RTC_Init+0xe4>)
 80016b0:	f002 f8b2 	bl	8003818 <HAL_RTC_SetAlarm>
 80016b4:	b9b0      	cbnz	r0, 80016e4 <MX_RTC_Init+0xd8>
  sAlarm.Alarm = RTC_ALARM_B;
 80016b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ba:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80016bc:	2201      	movs	r2, #1
 80016be:	4669      	mov	r1, sp
 80016c0:	480b      	ldr	r0, [pc, #44]	; (80016f0 <MX_RTC_Init+0xe4>)
 80016c2:	f002 f8a9 	bl	8003818 <HAL_RTC_SetAlarm>
 80016c6:	b978      	cbnz	r0, 80016e8 <MX_RTC_Init+0xdc>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80016c8:	2202      	movs	r2, #2
 80016ca:	2100      	movs	r1, #0
 80016cc:	4808      	ldr	r0, [pc, #32]	; (80016f0 <MX_RTC_Init+0xe4>)
 80016ce:	f002 f953 	bl	8003978 <HAL_RTCEx_SetTimeStamp>
 80016d2:	b958      	cbnz	r0, 80016ec <MX_RTC_Init+0xe0>
}
 80016d4:	b012      	add	sp, #72	; 0x48
 80016d6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80016d8:	f7ff fec0 	bl	800145c <Error_Handler>
    Error_Handler();
 80016dc:	f7ff febe 	bl	800145c <Error_Handler>
    Error_Handler();
 80016e0:	f7ff febc 	bl	800145c <Error_Handler>
    Error_Handler();
 80016e4:	f7ff feba 	bl	800145c <Error_Handler>
    Error_Handler();
 80016e8:	f7ff feb8 	bl	800145c <Error_Handler>
    Error_Handler();
 80016ec:	f7ff feb6 	bl	800145c <Error_Handler>
 80016f0:	2003fd84 	.word	0x2003fd84
 80016f4:	40002800 	.word	0x40002800

080016f8 <SystemClock_Config>:
{
 80016f8:	b500      	push	{lr}
 80016fa:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fc:	2230      	movs	r2, #48	; 0x30
 80016fe:	2100      	movs	r1, #0
 8001700:	a828      	add	r0, sp, #160	; 0xa0
 8001702:	f002 fc13 	bl	8003f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001706:	2100      	movs	r1, #0
 8001708:	9123      	str	r1, [sp, #140]	; 0x8c
 800170a:	9124      	str	r1, [sp, #144]	; 0x90
 800170c:	9125      	str	r1, [sp, #148]	; 0x94
 800170e:	9126      	str	r1, [sp, #152]	; 0x98
 8001710:	9127      	str	r1, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001712:	2284      	movs	r2, #132	; 0x84
 8001714:	a802      	add	r0, sp, #8
 8001716:	f002 fc09 	bl	8003f2c <memset>
  HAL_PWR_EnableBkUpAccess();
 800171a:	f001 f877 	bl	800280c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	4b33      	ldr	r3, [pc, #204]	; (80017ec <SystemClock_Config+0xf4>)
 8001720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001722:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001726:	641a      	str	r2, [r3, #64]	; 0x40
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001732:	4b2f      	ldr	r3, [pc, #188]	; (80017f0 <SystemClock_Config+0xf8>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001742:	9301      	str	r3, [sp, #4]
 8001744:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001746:	2309      	movs	r3, #9
 8001748:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800174a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800174e:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001750:	2301      	movs	r3, #1
 8001752:	932d      	str	r3, [sp, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001754:	2302      	movs	r3, #2
 8001756:	932e      	str	r3, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001758:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800175c:	922f      	str	r2, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800175e:	2219      	movs	r2, #25
 8001760:	9230      	str	r2, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001762:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001766:	9231      	str	r2, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001768:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800176a:	2308      	movs	r3, #8
 800176c:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800176e:	a828      	add	r0, sp, #160	; 0xa0
 8001770:	f001 f892 	bl	8002898 <HAL_RCC_OscConfig>
 8001774:	2800      	cmp	r0, #0
 8001776:	d131      	bne.n	80017dc <SystemClock_Config+0xe4>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001778:	f001 f850 	bl	800281c <HAL_PWREx_EnableOverDrive>
 800177c:	2800      	cmp	r0, #0
 800177e:	d12f      	bne.n	80017e0 <SystemClock_Config+0xe8>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001780:	230f      	movs	r3, #15
 8001782:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001784:	2302      	movs	r3, #2
 8001786:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001788:	2300      	movs	r3, #0
 800178a:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800178c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001790:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001796:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001798:	2106      	movs	r1, #6
 800179a:	a823      	add	r0, sp, #140	; 0x8c
 800179c:	f001 fae8 	bl	8002d70 <HAL_RCC_ClockConfig>
 80017a0:	bb00      	cbnz	r0, 80017e4 <SystemClock_Config+0xec>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <SystemClock_Config+0xfc>)
 80017a4:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 80017a6:	2364      	movs	r3, #100	; 0x64
 80017a8:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80017aa:	2302      	movs	r3, #2
 80017ac:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80017ae:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80017b0:	2300      	movs	r3, #0
 80017b2:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80017b4:	2201      	movs	r2, #1
 80017b6:	920c      	str	r2, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80017b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017bc:	920d      	str	r2, [sp, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80017be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c2:	920e      	str	r2, [sp, #56]	; 0x38
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80017c4:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80017c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017ca:	9221      	str	r2, [sp, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80017cc:	9322      	str	r3, [sp, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ce:	a802      	add	r0, sp, #8
 80017d0:	f001 fbb8 	bl	8002f44 <HAL_RCCEx_PeriphCLKConfig>
 80017d4:	b940      	cbnz	r0, 80017e8 <SystemClock_Config+0xf0>
}
 80017d6:	b035      	add	sp, #212	; 0xd4
 80017d8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80017dc:	f7ff fe3e 	bl	800145c <Error_Handler>
    Error_Handler();
 80017e0:	f7ff fe3c 	bl	800145c <Error_Handler>
    Error_Handler();
 80017e4:	f7ff fe3a 	bl	800145c <Error_Handler>
    Error_Handler();
 80017e8:	f7ff fe38 	bl	800145c <Error_Handler>
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40007000 	.word	0x40007000
 80017f4:	00a10028 	.word	0x00a10028

080017f8 <main>:
{
 80017f8:	b508      	push	{r3, lr}
  MPU_Config();
 80017fa:	f7ff fb53 	bl	8000ea4 <MPU_Config>
  HAL_Init();
 80017fe:	f000 fa2d 	bl	8001c5c <HAL_Init>
  SystemClock_Config();
 8001802:	f7ff ff79 	bl	80016f8 <SystemClock_Config>
  HAL_Delay(500);
 8001806:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800180a:	f000 fa4b 	bl	8001ca4 <HAL_Delay>
  MX_GPIO_Init();
 800180e:	f7ff fb75 	bl	8000efc <MX_GPIO_Init>
  MX_DMA2D_Init();
 8001812:	f7ff fe25 	bl	8001460 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001816:	f7ff fe41 	bl	800149c <MX_FMC_Init>
  MX_I2C3_Init();
 800181a:	f7ff fe75 	bl	8001508 <MX_I2C3_Init>
  MX_LTDC_Init();
 800181e:	f7ff fe9d 	bl	800155c <MX_LTDC_Init>
  MX_RTC_Init();
 8001822:	f7ff fef3 	bl	800160c <MX_RTC_Init>
	  MainFunc ();
 8001826:	f7ff f95d 	bl	8000ae4 <MainFunc>
  while (1)
 800182a:	e7fc      	b.n	8001826 <main+0x2e>

0800182c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800182c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800182e:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001830:	2300      	movs	r3, #0
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	9302      	str	r3, [sp, #8]
 8001836:	9303      	str	r3, [sp, #12]
 8001838:	9304      	str	r3, [sp, #16]
 800183a:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 800183c:	4b2a      	ldr	r3, [pc, #168]	; (80018e8 <HAL_FMC_MspInit+0xbc>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	b10b      	cbz	r3, 8001846 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001842:	b007      	add	sp, #28
 8001844:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8001846:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <HAL_FMC_MspInit+0xbc>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 800184c:	4b27      	ldr	r3, [pc, #156]	; (80018ec <HAL_FMC_MspInit+0xc0>)
 800184e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001850:	f042 0201 	orr.w	r2, r2, #1
 8001854:	639a      	str	r2, [r3, #56]	; 0x38
 8001856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001860:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001864:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2602      	movs	r6, #2
 8001868:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186a:	2503      	movs	r5, #3
 800186c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800186e:	240c      	movs	r4, #12
 8001870:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001872:	a901      	add	r1, sp, #4
 8001874:	481e      	ldr	r0, [pc, #120]	; (80018f0 <HAL_FMC_MspInit+0xc4>)
 8001876:	f000 fbfd 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800187a:	f248 1333 	movw	r3, #33075	; 0x8133
 800187e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2700      	movs	r7, #0
 8001884:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001886:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001888:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800188a:	a901      	add	r1, sp, #4
 800188c:	4819      	ldr	r0, [pc, #100]	; (80018f4 <HAL_FMC_MspInit+0xc8>)
 800188e:	f000 fbf1 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001892:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001896:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800189e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a0:	a901      	add	r1, sp, #4
 80018a2:	4815      	ldr	r0, [pc, #84]	; (80018f8 <HAL_FMC_MspInit+0xcc>)
 80018a4:	f000 fbe6 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80018a8:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80018ac:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018b4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018b6:	a901      	add	r1, sp, #4
 80018b8:	4810      	ldr	r0, [pc, #64]	; (80018fc <HAL_FMC_MspInit+0xd0>)
 80018ba:	f000 fbdb 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80018be:	2328      	movs	r3, #40	; 0x28
 80018c0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018c8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018ca:	a901      	add	r1, sp, #4
 80018cc:	480c      	ldr	r0, [pc, #48]	; (8001900 <HAL_FMC_MspInit+0xd4>)
 80018ce:	f000 fbd1 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80018d2:	2308      	movs	r3, #8
 80018d4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018da:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018dc:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80018de:	a901      	add	r1, sp, #4
 80018e0:	4808      	ldr	r0, [pc, #32]	; (8001904 <HAL_FMC_MspInit+0xd8>)
 80018e2:	f000 fbc7 	bl	8002074 <HAL_GPIO_Init>
 80018e6:	e7ac      	b.n	8001842 <HAL_FMC_MspInit+0x16>
 80018e8:	2003fdd8 	.word	0x2003fdd8
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40021800 	.word	0x40021800
 80018f8:	40020c00 	.word	0x40020c00
 80018fc:	40021400 	.word	0x40021400
 8001900:	40021c00 	.word	0x40021c00
 8001904:	40020800 	.word	0x40020800

08001908 <HAL_MspInit>:
{
 8001908:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <HAL_MspInit+0x2c>)
 800190c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800190e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001912:	641a      	str	r2, [r3, #64]	; 0x40
 8001914:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001916:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800191a:	9200      	str	r2, [sp, #0]
 800191c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001920:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001924:	645a      	str	r2, [r3, #68]	; 0x44
 8001926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	9b01      	ldr	r3, [sp, #4]
}
 8001930:	b002      	add	sp, #8
 8001932:	4770      	bx	lr
 8001934:	40023800 	.word	0x40023800

08001938 <HAL_DMA2D_MspInit>:
  if(hdma2d->Instance==DMA2D)
 8001938:	6802      	ldr	r2, [r0, #0]
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <HAL_DMA2D_MspInit+0x3c>)
 800193c:	429a      	cmp	r2, r3
 800193e:	d000      	beq.n	8001942 <HAL_DMA2D_MspInit+0xa>
 8001940:	4770      	bx	lr
{
 8001942:	b500      	push	{lr}
 8001944:	b083      	sub	sp, #12
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001946:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 800194a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800194c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001950:	631a      	str	r2, [r3, #48]	; 0x30
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800195c:	2200      	movs	r2, #0
 800195e:	4611      	mov	r1, r2
 8001960:	205a      	movs	r0, #90	; 0x5a
 8001962:	f000 f9c5 	bl	8001cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001966:	205a      	movs	r0, #90	; 0x5a
 8001968:	f000 f9f8 	bl	8001d5c <HAL_NVIC_EnableIRQ>
}
 800196c:	b003      	add	sp, #12
 800196e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001972:	bf00      	nop
 8001974:	4002b000 	.word	0x4002b000

08001978 <HAL_I2C_MspInit>:
{
 8001978:	b510      	push	{r4, lr}
 800197a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	2300      	movs	r3, #0
 800197e:	9303      	str	r3, [sp, #12]
 8001980:	9304      	str	r3, [sp, #16]
 8001982:	9305      	str	r3, [sp, #20]
 8001984:	9306      	str	r3, [sp, #24]
 8001986:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C3)
 8001988:	6802      	ldr	r2, [r0, #0]
 800198a:	4b14      	ldr	r3, [pc, #80]	; (80019dc <HAL_I2C_MspInit+0x64>)
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_I2C_MspInit+0x1c>
}
 8001990:	b008      	add	sp, #32
 8001992:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001994:	4c12      	ldr	r4, [pc, #72]	; (80019e0 <HAL_I2C_MspInit+0x68>)
 8001996:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800199c:	6323      	str	r3, [r4, #48]	; 0x30
 800199e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80019a8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80019ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ae:	2312      	movs	r3, #18
 80019b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b2:	2301      	movs	r3, #1
 80019b4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b6:	2303      	movs	r3, #3
 80019b8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019ba:	2304      	movs	r3, #4
 80019bc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019be:	a903      	add	r1, sp, #12
 80019c0:	4808      	ldr	r0, [pc, #32]	; (80019e4 <HAL_I2C_MspInit+0x6c>)
 80019c2:	f000 fb57 	bl	8002074 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80019c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019cc:	6423      	str	r3, [r4, #64]	; 0x40
 80019ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019d4:	9302      	str	r3, [sp, #8]
 80019d6:	9b02      	ldr	r3, [sp, #8]
}
 80019d8:	e7da      	b.n	8001990 <HAL_I2C_MspInit+0x18>
 80019da:	bf00      	nop
 80019dc:	40005c00 	.word	0x40005c00
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40021c00 	.word	0x40021c00

080019e8 <HAL_LTDC_MspInit>:
{
 80019e8:	b570      	push	{r4, r5, r6, lr}
 80019ea:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	2300      	movs	r3, #0
 80019ee:	9307      	str	r3, [sp, #28]
 80019f0:	9308      	str	r3, [sp, #32]
 80019f2:	9309      	str	r3, [sp, #36]	; 0x24
 80019f4:	930a      	str	r3, [sp, #40]	; 0x28
 80019f6:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hltdc->Instance==LTDC)
 80019f8:	6802      	ldr	r2, [r0, #0]
 80019fa:	4b3e      	ldr	r3, [pc, #248]	; (8001af4 <HAL_LTDC_MspInit+0x10c>)
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_LTDC_MspInit+0x1c>
}
 8001a00:	b00c      	add	sp, #48	; 0x30
 8001a02:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001a04:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8001a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a0a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001a0e:	645a      	str	r2, [r3, #68]	; 0x44
 8001a10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a12:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001a16:	9201      	str	r2, [sp, #4]
 8001a18:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a1c:	f042 0210 	orr.w	r2, r2, #16
 8001a20:	631a      	str	r2, [r3, #48]	; 0x30
 8001a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a24:	f002 0210 	and.w	r2, r2, #16
 8001a28:	9202      	str	r2, [sp, #8]
 8001a2a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a32:	631a      	str	r2, [r3, #48]	; 0x30
 8001a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a36:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001a3a:	9203      	str	r2, [sp, #12]
 8001a3c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a44:	631a      	str	r2, [r3, #48]	; 0x30
 8001a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a48:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001a4c:	9204      	str	r2, [sp, #16]
 8001a4e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a56:	631a      	str	r2, [r3, #48]	; 0x30
 8001a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a5a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001a5e:	9205      	str	r2, [sp, #20]
 8001a60:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a68:	631a      	str	r2, [r3, #48]	; 0x30
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a70:	9306      	str	r3, [sp, #24]
 8001a72:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001a74:	2310      	movs	r3, #16
 8001a76:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2502      	movs	r5, #2
 8001a7a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a7c:	260e      	movs	r6, #14
 8001a7e:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001a80:	a907      	add	r1, sp, #28
 8001a82:	481d      	ldr	r0, [pc, #116]	; (8001af8 <HAL_LTDC_MspInit+0x110>)
 8001a84:	f000 faf6 	bl	8002074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001a88:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001a8c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2400      	movs	r4, #0
 8001a92:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a96:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001a98:	a907      	add	r1, sp, #28
 8001a9a:	4818      	ldr	r0, [pc, #96]	; (8001afc <HAL_LTDC_MspInit+0x114>)
 8001a9c:	f000 faea 	bl	8002074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001aa0:	23f7      	movs	r3, #247	; 0xf7
 8001aa2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001aaa:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001aac:	a907      	add	r1, sp, #28
 8001aae:	4814      	ldr	r0, [pc, #80]	; (8001b00 <HAL_LTDC_MspInit+0x118>)
 8001ab0:	f000 fae0 	bl	8002074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001ac0:	2309      	movs	r3, #9
 8001ac2:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001ac4:	a907      	add	r1, sp, #28
 8001ac6:	480f      	ldr	r0, [pc, #60]	; (8001b04 <HAL_LTDC_MspInit+0x11c>)
 8001ac8:	f000 fad4 	bl	8002074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001acc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001ad0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ad8:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001ada:	a907      	add	r1, sp, #28
 8001adc:	480a      	ldr	r0, [pc, #40]	; (8001b08 <HAL_LTDC_MspInit+0x120>)
 8001ade:	f000 fac9 	bl	8002074 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001ae2:	4622      	mov	r2, r4
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	2058      	movs	r0, #88	; 0x58
 8001ae8:	f000 f902 	bl	8001cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001aec:	2058      	movs	r0, #88	; 0x58
 8001aee:	f000 f935 	bl	8001d5c <HAL_NVIC_EnableIRQ>
}
 8001af2:	e785      	b.n	8001a00 <HAL_LTDC_MspInit+0x18>
 8001af4:	40016800 	.word	0x40016800
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40022400 	.word	0x40022400
 8001b00:	40022800 	.word	0x40022800
 8001b04:	40021800 	.word	0x40021800
 8001b08:	40022000 	.word	0x40022000

08001b0c <HAL_RTC_MspInit>:
  if(hrtc->Instance==RTC)
 8001b0c:	6802      	ldr	r2, [r0, #0]
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_RTC_MspInit+0x18>)
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d000      	beq.n	8001b16 <HAL_RTC_MspInit+0xa>
}
 8001b14:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8001b16:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_RTC_MspInit+0x1c>)
 8001b18:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b1e:	6713      	str	r3, [r2, #112]	; 0x70
}
 8001b20:	e7f8      	b.n	8001b14 <HAL_RTC_MspInit+0x8>
 8001b22:	bf00      	nop
 8001b24:	40002800 	.word	0x40002800
 8001b28:	40023800 	.word	0x40023800

08001b2c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001b2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001b2e:	f7ff fe7d 	bl	800182c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001b32:	bd08      	pop	{r3, pc}

08001b34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b34:	b500      	push	{lr}
 8001b36:	b089      	sub	sp, #36	; 0x24
 8001b38:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2036      	movs	r0, #54	; 0x36
 8001b3e:	f000 f8d7 	bl	8001cf0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b42:	2036      	movs	r0, #54	; 0x36
 8001b44:	f000 f90a 	bl	8001d5c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b48:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_InitTick+0x6c>)
 8001b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b4c:	f042 0210 	orr.w	r2, r2, #16
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b5c:	a902      	add	r1, sp, #8
 8001b5e:	a803      	add	r0, sp, #12
 8001b60:	f001 f9d2 	bl	8002f08 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b64:	f001 f9c0 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 8001b68:	0043      	lsls	r3, r0, #1
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b6a:	480e      	ldr	r0, [pc, #56]	; (8001ba4 <HAL_InitTick+0x70>)
 8001b6c:	fba0 2303 	umull	r2, r3, r0, r3
 8001b70:	0c9b      	lsrs	r3, r3, #18
 8001b72:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b74:	480c      	ldr	r0, [pc, #48]	; (8001ba8 <HAL_InitTick+0x74>)
 8001b76:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <HAL_InitTick+0x78>)
 8001b78:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b7e:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b80:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b86:	6083      	str	r3, [r0, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b88:	f002 f8ea 	bl	8003d60 <HAL_TIM_Base_Init>
 8001b8c:	b118      	cbz	r0, 8001b96 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
 8001b8e:	2001      	movs	r0, #1
}
 8001b90:	b009      	add	sp, #36	; 0x24
 8001b92:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim6);
 8001b96:	4804      	ldr	r0, [pc, #16]	; (8001ba8 <HAL_InitTick+0x74>)
 8001b98:	f001 ff40 	bl	8003a1c <HAL_TIM_Base_Start_IT>
 8001b9c:	e7f8      	b.n	8001b90 <HAL_InitTick+0x5c>
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	431bde83 	.word	0x431bde83
 8001ba8:	2003fddc 	.word	0x2003fddc
 8001bac:	40001000 	.word	0x40001000

08001bb0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <NMI_Handler>

08001bb2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb2:	e7fe      	b.n	8001bb2 <HardFault_Handler>

08001bb4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <MemManage_Handler>

08001bb6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb6:	e7fe      	b.n	8001bb6 <BusFault_Handler>

08001bb8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <UsageFault_Handler>

08001bba <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bba:	4770      	bx	lr

08001bbc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bbc:	4770      	bx	lr

08001bbe <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bbe:	4770      	bx	lr

08001bc0 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc0:	4770      	bx	lr
	...

08001bc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bc6:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <TIM6_DAC_IRQHandler+0xc>)
 8001bc8:	f001 ff74 	bl	8003ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bcc:	bd08      	pop	{r3, pc}
 8001bce:	bf00      	nop
 8001bd0:	2003fddc 	.word	0x2003fddc

08001bd4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001bd4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001bd6:	4802      	ldr	r0, [pc, #8]	; (8001be0 <LTDC_IRQHandler+0xc>)
 8001bd8:	f000 fd55 	bl	8002686 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001bdc:	bd08      	pop	{r3, pc}
 8001bde:	bf00      	nop
 8001be0:	2003fcdc 	.word	0x2003fcdc

08001be4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001be4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001be6:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <DMA2D_IRQHandler+0xc>)
 8001be8:	f000 f944 	bl	8001e74 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001bec:	bd08      	pop	{r3, pc}
 8001bee:	bf00      	nop
 8001bf0:	2003fc50 	.word	0x2003fc50

08001bf4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf4:	4a03      	ldr	r2, [pc, #12]	; (8001c04 <SystemInit+0x10>)
 8001bf6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001bfa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bfe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c02:	4770      	bx	lr
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c0c:	480d      	ldr	r0, [pc, #52]	; (8001c44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c0e:	490e      	ldr	r1, [pc, #56]	; (8001c48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c10:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c14:	e002      	b.n	8001c1c <LoopCopyDataInit>

08001c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1a:	3304      	adds	r3, #4

08001c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c20:	d3f9      	bcc.n	8001c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c22:	4a0b      	ldr	r2, [pc, #44]	; (8001c50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c24:	4c0b      	ldr	r4, [pc, #44]	; (8001c54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c28:	e001      	b.n	8001c2e <LoopFillZerobss>

08001c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c2c:	3204      	adds	r2, #4

08001c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c30:	d3fb      	bcc.n	8001c2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c32:	f7ff ffdf 	bl	8001bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c36:	f002 f955 	bl	8003ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c3a:	f7ff fddd 	bl	80017f8 <main>
  bx  lr    
 8001c3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c40:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c4c:	08005c68 	.word	0x08005c68
  ldr r2, =_sbss
 8001c50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c54:	2003fe2c 	.word	0x2003fe2c

08001c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c58:	e7fe      	b.n	8001c58 <ADC_IRQHandler>
	...

08001c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c5c:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001c5e:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <HAL_Init+0x20>)
 8001c60:	6813      	ldr	r3, [r2, #0]
 8001c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c66:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c68:	2003      	movs	r0, #3
 8001c6a:	f000 f82f 	bl	8001ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f7ff ff60 	bl	8001b34 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001c74:	f7ff fe48 	bl	8001908 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8001c78:	2000      	movs	r0, #0
 8001c7a:	bd08      	pop	{r3, pc}
 8001c7c:	40023c00 	.word	0x40023c00

08001c80 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001c80:	4a03      	ldr	r2, [pc, #12]	; (8001c90 <HAL_IncTick+0x10>)
 8001c82:	6811      	ldr	r1, [r2, #0]
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <HAL_IncTick+0x14>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	440b      	add	r3, r1
 8001c8a:	6013      	str	r3, [r2, #0]
}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	2003fe28 	.word	0x2003fe28
 8001c94:	20000004 	.word	0x20000004

08001c98 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001c98:	4b01      	ldr	r3, [pc, #4]	; (8001ca0 <HAL_GetTick+0x8>)
 8001c9a:	6818      	ldr	r0, [r3, #0]
}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	2003fe28 	.word	0x2003fe28

08001ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca4:	b538      	push	{r3, r4, r5, lr}
 8001ca6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001ca8:	f7ff fff6 	bl	8001c98 <HAL_GetTick>
 8001cac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cae:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001cb2:	d002      	beq.n	8001cba <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <HAL_Delay+0x24>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cba:	f7ff ffed 	bl	8001c98 <HAL_GetTick>
 8001cbe:	1b40      	subs	r0, r0, r5
 8001cc0:	42a0      	cmp	r0, r4
 8001cc2:	d3fa      	bcc.n	8001cba <HAL_Delay+0x16>
  {
  }
}
 8001cc4:	bd38      	pop	{r3, r4, r5, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000004 	.word	0x20000004

08001ccc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ccc:	4906      	ldr	r1, [pc, #24]	; (8001ce8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8001cce:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cd4:	041b      	lsls	r3, r3, #16
 8001cd6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd8:	0200      	lsls	r0, r0, #8
 8001cda:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cde:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001ce0:	4a02      	ldr	r2, [pc, #8]	; (8001cec <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001ce2:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8001ce4:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00
 8001cec:	05fa0000 	.word	0x05fa0000

08001cf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf0:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <HAL_NVIC_SetPriority+0x60>)
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cfa:	f1c3 0c07 	rsb	ip, r3, #7
 8001cfe:	f1bc 0f04 	cmp.w	ip, #4
 8001d02:	bf28      	it	cs
 8001d04:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d08:	f103 0e04 	add.w	lr, r3, #4
 8001d0c:	f1be 0f06 	cmp.w	lr, #6
 8001d10:	d914      	bls.n	8001d3c <HAL_NVIC_SetPriority+0x4c>
 8001d12:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	f04f 3eff 	mov.w	lr, #4294967295
 8001d18:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001d1c:	ea21 010c 	bic.w	r1, r1, ip
 8001d20:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d22:	fa0e f303 	lsl.w	r3, lr, r3
 8001d26:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001d2c:	2800      	cmp	r0, #0
 8001d2e:	db07      	blt.n	8001d40 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	0109      	lsls	r1, r1, #4
 8001d32:	b2c9      	uxtb	r1, r1
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <HAL_NVIC_SetPriority+0x64>)
 8001d36:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001d38:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e7e9      	b.n	8001d14 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d40:	f000 000f 	and.w	r0, r0, #15
 8001d44:	0109      	lsls	r1, r1, #4
 8001d46:	b2c9      	uxtb	r1, r1
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <HAL_NVIC_SetPriority+0x68>)
 8001d4a:	5419      	strb	r1, [r3, r0]
 8001d4c:	e7f4      	b.n	8001d38 <HAL_NVIC_SetPriority+0x48>
 8001d4e:	bf00      	nop
 8001d50:	e000ed00 	.word	0xe000ed00
 8001d54:	e000e400 	.word	0xe000e400
 8001d58:	e000ed14 	.word	0xe000ed14

08001d5c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d5c:	2800      	cmp	r0, #0
 8001d5e:	db07      	blt.n	8001d70 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d60:	f000 021f 	and.w	r2, r0, #31
 8001d64:	0940      	lsrs	r0, r0, #5
 8001d66:	2301      	movs	r3, #1
 8001d68:	4093      	lsls	r3, r2
 8001d6a:	4a02      	ldr	r2, [pc, #8]	; (8001d74 <HAL_NVIC_EnableIRQ+0x18>)
 8001d6c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000e100 	.word	0xe000e100

08001d78 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001d78:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <HAL_MPU_Disable+0x18>)
 8001d7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d84:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001d86:	2200      	movs	r2, #0
 8001d88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001d94:	f040 0001 	orr.w	r0, r0, #1
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <HAL_MPU_Enable+0x1c>)
 8001d9a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001da0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001da6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001daa:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001db4:	7842      	ldrb	r2, [r0, #1]
 8001db6:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <HAL_MPU_ConfigRegion+0x5c>)
 8001db8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 8001dbc:	7803      	ldrb	r3, [r0, #0]
 8001dbe:	b1fb      	cbz	r3, 8001e00 <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001dc0:	6843      	ldr	r3, [r0, #4]
 8001dc2:	4a13      	ldr	r2, [pc, #76]	; (8001e10 <HAL_MPU_ConfigRegion+0x5c>)
 8001dc4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dc8:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001dca:	7ac3      	ldrb	r3, [r0, #11]
 8001dcc:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dce:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001dd2:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001dd4:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001dd8:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001dda:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001dde:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001de0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001de4:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001dea:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001dec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001df0:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001df2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001df6:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001df8:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dfa:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8001dfe:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8001e00:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <HAL_MPU_ConfigRegion+0x5c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 8001e08:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001e14:	b338      	cbz	r0, 8001e66 <HAL_DMA2D_Init+0x52>
{
 8001e16:	b510      	push	{r4, lr}
 8001e18:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001e1a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001e1e:	b1eb      	cbz	r3, 8001e5c <HAL_DMA2D_Init+0x48>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e20:	2302      	movs	r3, #2
 8001e22:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001e26:	6822      	ldr	r2, [r4, #0]
 8001e28:	6813      	ldr	r3, [r2, #0]
 8001e2a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001e2e:	6861      	ldr	r1, [r4, #4]
 8001e30:	430b      	orrs	r3, r1
 8001e32:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001e34:	6822      	ldr	r2, [r4, #0]
 8001e36:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001e38:	f023 0307 	bic.w	r3, r3, #7
 8001e3c:	68a1      	ldr	r1, [r4, #8]
 8001e3e:	430b      	orrs	r3, r1
 8001e40:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001e42:	6822      	ldr	r2, [r4, #0]
 8001e44:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_DMA2D_Init+0x58>)
 8001e48:	400b      	ands	r3, r1
 8001e4a:	68e1      	ldr	r1, [r4, #12]
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001e50:	2000      	movs	r0, #0
 8001e52:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001e54:	2301      	movs	r3, #1
 8001e56:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 8001e5a:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8001e5c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8001e60:	f7ff fd6a 	bl	8001938 <HAL_DMA2D_MspInit>
 8001e64:	e7dc      	b.n	8001e20 <HAL_DMA2D_Init+0xc>
    return HAL_ERROR;
 8001e66:	2001      	movs	r0, #1
}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	ffffc000 	.word	0xffffc000

08001e70 <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001e70:	4770      	bx	lr

08001e72 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001e72:	4770      	bx	lr

08001e74 <HAL_DMA2D_IRQHandler>:
{
 8001e74:	b570      	push	{r4, r5, r6, lr}
 8001e76:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001e78:	6803      	ldr	r3, [r0, #0]
 8001e7a:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001e7c:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001e7e:	f015 0f01 	tst.w	r5, #1
 8001e82:	d016      	beq.n	8001eb2 <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001e84:	f416 7f80 	tst.w	r6, #256	; 0x100
 8001e88:	d013      	beq.n	8001eb2 <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e90:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001e92:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	63c3      	str	r3, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001e9a:	6803      	ldr	r3, [r0, #0]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ea0:	2304      	movs	r3, #4
 8001ea2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8001eac:	6943      	ldr	r3, [r0, #20]
 8001eae:	b103      	cbz	r3, 8001eb2 <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 8001eb0:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001eb2:	f015 0f20 	tst.w	r5, #32
 8001eb6:	d018      	beq.n	8001eea <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001eb8:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8001ebc:	d015      	beq.n	8001eea <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001ebe:	6822      	ldr	r2, [r4, #0]
 8001ec0:	6813      	ldr	r3, [r2, #0]
 8001ec2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ec6:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001ec8:	6823      	ldr	r3, [r4, #0]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001ece:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001edc:	2300      	movs	r3, #0
 8001ede:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8001ee2:	6963      	ldr	r3, [r4, #20]
 8001ee4:	b10b      	cbz	r3, 8001eea <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001eea:	f015 0f08 	tst.w	r5, #8
 8001eee:	d018      	beq.n	8001f22 <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001ef0:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8001ef4:	d015      	beq.n	8001f22 <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001ef6:	6822      	ldr	r2, [r4, #0]
 8001ef8:	6813      	ldr	r3, [r2, #0]
 8001efa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001efe:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	2208      	movs	r2, #8
 8001f04:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001f06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001f0e:	2304      	movs	r3, #4
 8001f10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001f14:	2300      	movs	r3, #0
 8001f16:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8001f1a:	6963      	ldr	r3, [r4, #20]
 8001f1c:	b10b      	cbz	r3, 8001f22 <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 8001f1e:	4620      	mov	r0, r4
 8001f20:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001f22:	f015 0f04 	tst.w	r5, #4
 8001f26:	d002      	beq.n	8001f2e <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001f28:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8001f2c:	d120      	bne.n	8001f70 <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001f2e:	f015 0f02 	tst.w	r5, #2
 8001f32:	d016      	beq.n	8001f62 <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001f34:	f416 7f00 	tst.w	r6, #512	; 0x200
 8001f38:	d013      	beq.n	8001f62 <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001f3a:	6822      	ldr	r2, [r4, #0]
 8001f3c:	6813      	ldr	r3, [r2, #0]
 8001f3e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f42:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	2202      	movs	r2, #2
 8001f48:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001f4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f4c:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001f54:	2300      	movs	r3, #0
 8001f56:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8001f5a:	6923      	ldr	r3, [r4, #16]
 8001f5c:	b10b      	cbz	r3, 8001f62 <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 8001f5e:	4620      	mov	r0, r4
 8001f60:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001f62:	f015 0f10 	tst.w	r5, #16
 8001f66:	d002      	beq.n	8001f6e <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001f68:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8001f6c:	d10c      	bne.n	8001f88 <HAL_DMA2D_IRQHandler+0x114>
}
 8001f6e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001f70:	6822      	ldr	r2, [r4, #0]
 8001f72:	6813      	ldr	r3, [r2, #0]
 8001f74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f78:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001f7a:	6823      	ldr	r3, [r4, #0]
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001f80:	4620      	mov	r0, r4
 8001f82:	f7ff ff75 	bl	8001e70 <HAL_DMA2D_LineEventCallback>
 8001f86:	e7d2      	b.n	8001f2e <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001f88:	6822      	ldr	r2, [r4, #0]
 8001f8a:	6813      	ldr	r3, [r2, #0]
 8001f8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f90:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001f92:	6823      	ldr	r3, [r4, #0]
 8001f94:	2210      	movs	r2, #16
 8001f96:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001f98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f9a:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001fa8:	4620      	mov	r0, r4
 8001faa:	f7ff ff62 	bl	8001e72 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8001fae:	e7de      	b.n	8001f6e <HAL_DMA2D_IRQHandler+0xfa>

08001fb0 <HAL_DMA2D_ConfigLayer>:
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001fb0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d059      	beq.n	800206c <HAL_DMA2D_ConfigLayer+0xbc>
{
 8001fb8:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8001fba:	2301      	movs	r3, #1
 8001fbc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001fc6:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8001fca:	69da      	ldr	r2, [r3, #28]
 8001fcc:	1c8b      	adds	r3, r1, #2
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	58c3      	ldr	r3, [r0, r3]
 8001fd2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001fd6:	3a09      	subs	r2, #9
 8001fd8:	2a01      	cmp	r2, #1
 8001fda:	d91e      	bls.n	800201a <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001fdc:	1c8a      	adds	r2, r1, #2
 8001fde:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8001fe2:	6852      	ldr	r2, [r2, #4]
 8001fe4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001fe8:	bb41      	cbnz	r1, 800203c <HAL_DMA2D_ConfigLayer+0x8c>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001fea:	6804      	ldr	r4, [r0, #0]
 8001fec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001fee:	4a20      	ldr	r2, [pc, #128]	; (8002070 <HAL_DMA2D_ConfigLayer+0xc0>)
 8001ff0:	402a      	ands	r2, r5
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001ff6:	6802      	ldr	r2, [r0, #0]
 8001ff8:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8001ffc:	699c      	ldr	r4, [r3, #24]
 8001ffe:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	3b09      	subs	r3, #9
 8002004:	2b01      	cmp	r3, #1
 8002006:	d910      	bls.n	800202a <HAL_DMA2D_ConfigLayer+0x7a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002008:	2301      	movs	r3, #1
 800200a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800200e:	2300      	movs	r3, #0
 8002010:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8002014:	4618      	mov	r0, r3
}
 8002016:	bc30      	pop	{r4, r5}
 8002018:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800201a:	1c8a      	adds	r2, r1, #2
 800201c:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8002020:	6852      	ldr	r2, [r2, #4]
 8002022:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002026:	4313      	orrs	r3, r2
 8002028:	e7de      	b.n	8001fe8 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800202a:	3102      	adds	r1, #2
 800202c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002030:	684b      	ldr	r3, [r1, #4]
 8002032:	6802      	ldr	r2, [r0, #0]
 8002034:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002038:	6293      	str	r3, [r2, #40]	; 0x28
 800203a:	e7e5      	b.n	8002008 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800203c:	6804      	ldr	r4, [r0, #0]
 800203e:	69e5      	ldr	r5, [r4, #28]
 8002040:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <HAL_DMA2D_ConfigLayer+0xc0>)
 8002042:	402a      	ands	r2, r5
 8002044:	4313      	orrs	r3, r2
 8002046:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002048:	6802      	ldr	r2, [r0, #0]
 800204a:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 800204e:	699c      	ldr	r4, [r3, #24]
 8002050:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	3b09      	subs	r3, #9
 8002056:	2b01      	cmp	r3, #1
 8002058:	d8d6      	bhi.n	8002008 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800205a:	3102      	adds	r1, #2
 800205c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002060:	684b      	ldr	r3, [r1, #4]
 8002062:	6802      	ldr	r2, [r0, #0]
 8002064:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002068:	6213      	str	r3, [r2, #32]
 800206a:	e7cd      	b.n	8002008 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 800206c:	2002      	movs	r0, #2
}
 800206e:	4770      	bx	lr
 8002070:	00fcfff0 	.word	0x00fcfff0

08002074 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002074:	2300      	movs	r3, #0
 8002076:	2b0f      	cmp	r3, #15
 8002078:	f200 80e4 	bhi.w	8002244 <HAL_GPIO_Init+0x1d0>
{
 800207c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800207e:	b083      	sub	sp, #12
 8002080:	e03a      	b.n	80020f8 <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002082:	2209      	movs	r2, #9
 8002084:	e000      	b.n	8002088 <HAL_GPIO_Init+0x14>
 8002086:	2200      	movs	r2, #0
 8002088:	40aa      	lsls	r2, r5
 800208a:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 800208c:	3402      	adds	r4, #2
 800208e:	4d6e      	ldr	r5, [pc, #440]	; (8002248 <HAL_GPIO_Init+0x1d4>)
 8002090:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002094:	4a6d      	ldr	r2, [pc, #436]	; (800224c <HAL_GPIO_Init+0x1d8>)
 8002096:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002098:	ea6f 020c 	mvn.w	r2, ip
 800209c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020a0:	684e      	ldr	r6, [r1, #4]
 80020a2:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80020a6:	d001      	beq.n	80020ac <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 80020a8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 80020ac:	4c67      	ldr	r4, [pc, #412]	; (800224c <HAL_GPIO_Init+0x1d8>)
 80020ae:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 80020b0:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80020b2:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020b6:	684e      	ldr	r6, [r1, #4]
 80020b8:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 80020bc:	d001      	beq.n	80020c2 <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 80020be:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80020c2:	4c62      	ldr	r4, [pc, #392]	; (800224c <HAL_GPIO_Init+0x1d8>)
 80020c4:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c6:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80020c8:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020cc:	684e      	ldr	r6, [r1, #4]
 80020ce:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 80020d2:	d001      	beq.n	80020d8 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 80020d4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80020d8:	4c5c      	ldr	r4, [pc, #368]	; (800224c <HAL_GPIO_Init+0x1d8>)
 80020da:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80020dc:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80020de:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020e0:	684d      	ldr	r5, [r1, #4]
 80020e2:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 80020e6:	d001      	beq.n	80020ec <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 80020e8:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 80020ec:	4c57      	ldr	r4, [pc, #348]	; (800224c <HAL_GPIO_Init+0x1d8>)
 80020ee:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020f0:	3301      	adds	r3, #1
 80020f2:	2b0f      	cmp	r3, #15
 80020f4:	f200 80a4 	bhi.w	8002240 <HAL_GPIO_Init+0x1cc>
    ioposition = ((uint32_t)0x01) << position;
 80020f8:	2201      	movs	r2, #1
 80020fa:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020fc:	680c      	ldr	r4, [r1, #0]
 80020fe:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8002102:	ea32 0404 	bics.w	r4, r2, r4
 8002106:	d1f3      	bne.n	80020f0 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002108:	684c      	ldr	r4, [r1, #4]
 800210a:	1e65      	subs	r5, r4, #1
 800210c:	2c11      	cmp	r4, #17
 800210e:	bf18      	it	ne
 8002110:	2d01      	cmpne	r5, #1
 8002112:	d901      	bls.n	8002118 <HAL_GPIO_Init+0xa4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002114:	2c12      	cmp	r4, #18
 8002116:	d112      	bne.n	800213e <HAL_GPIO_Init+0xca>
        temp = GPIOx->OSPEEDR; 
 8002118:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800211a:	005e      	lsls	r6, r3, #1
 800211c:	2403      	movs	r4, #3
 800211e:	40b4      	lsls	r4, r6
 8002120:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8002124:	68cc      	ldr	r4, [r1, #12]
 8002126:	40b4      	lsls	r4, r6
 8002128:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800212a:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800212c:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800212e:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002132:	684c      	ldr	r4, [r1, #4]
 8002134:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8002138:	409a      	lsls	r2, r3
 800213a:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 800213c:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800213e:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002140:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002144:	2403      	movs	r4, #3
 8002146:	fa04 f40e 	lsl.w	r4, r4, lr
 800214a:	43e2      	mvns	r2, r4
 800214c:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002150:	688c      	ldr	r4, [r1, #8]
 8002152:	fa04 f40e 	lsl.w	r4, r4, lr
 8002156:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8002158:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800215a:	684c      	ldr	r4, [r1, #4]
 800215c:	2c12      	cmp	r4, #18
 800215e:	bf18      	it	ne
 8002160:	2c02      	cmpne	r4, #2
 8002162:	d10f      	bne.n	8002184 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3];
 8002164:	08dd      	lsrs	r5, r3, #3
 8002166:	3508      	adds	r5, #8
 8002168:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800216c:	f003 0407 	and.w	r4, r3, #7
 8002170:	00a6      	lsls	r6, r4, #2
 8002172:	240f      	movs	r4, #15
 8002174:	40b4      	lsls	r4, r6
 8002176:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800217a:	690c      	ldr	r4, [r1, #16]
 800217c:	40b4      	lsls	r4, r6
 800217e:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 8002180:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8002184:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002186:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002188:	684a      	ldr	r2, [r1, #4]
 800218a:	f002 0203 	and.w	r2, r2, #3
 800218e:	fa02 f20e 	lsl.w	r2, r2, lr
 8002192:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002194:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002196:	684a      	ldr	r2, [r1, #4]
 8002198:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800219c:	d0a8      	beq.n	80020f0 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219e:	4a2c      	ldr	r2, [pc, #176]	; (8002250 <HAL_GPIO_Init+0x1dc>)
 80021a0:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80021a2:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80021a6:	6454      	str	r4, [r2, #68]	; 0x44
 80021a8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021aa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80021ae:	9201      	str	r2, [sp, #4]
 80021b0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80021b2:	089c      	lsrs	r4, r3, #2
 80021b4:	1ca5      	adds	r5, r4, #2
 80021b6:	4a24      	ldr	r2, [pc, #144]	; (8002248 <HAL_GPIO_Init+0x1d4>)
 80021b8:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021bc:	f003 0203 	and.w	r2, r3, #3
 80021c0:	0095      	lsls	r5, r2, #2
 80021c2:	220f      	movs	r2, #15
 80021c4:	40aa      	lsls	r2, r5
 80021c6:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021ca:	4a22      	ldr	r2, [pc, #136]	; (8002254 <HAL_GPIO_Init+0x1e0>)
 80021cc:	4290      	cmp	r0, r2
 80021ce:	f43f af5a 	beq.w	8002086 <HAL_GPIO_Init+0x12>
 80021d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021d6:	4290      	cmp	r0, r2
 80021d8:	d022      	beq.n	8002220 <HAL_GPIO_Init+0x1ac>
 80021da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021de:	4290      	cmp	r0, r2
 80021e0:	d020      	beq.n	8002224 <HAL_GPIO_Init+0x1b0>
 80021e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021e6:	4290      	cmp	r0, r2
 80021e8:	d01e      	beq.n	8002228 <HAL_GPIO_Init+0x1b4>
 80021ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021ee:	4290      	cmp	r0, r2
 80021f0:	d01c      	beq.n	800222c <HAL_GPIO_Init+0x1b8>
 80021f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021f6:	4290      	cmp	r0, r2
 80021f8:	d01a      	beq.n	8002230 <HAL_GPIO_Init+0x1bc>
 80021fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021fe:	4290      	cmp	r0, r2
 8002200:	d018      	beq.n	8002234 <HAL_GPIO_Init+0x1c0>
 8002202:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002206:	4290      	cmp	r0, r2
 8002208:	d016      	beq.n	8002238 <HAL_GPIO_Init+0x1c4>
 800220a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800220e:	4290      	cmp	r0, r2
 8002210:	d014      	beq.n	800223c <HAL_GPIO_Init+0x1c8>
 8002212:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002216:	4290      	cmp	r0, r2
 8002218:	f43f af33 	beq.w	8002082 <HAL_GPIO_Init+0xe>
 800221c:	220a      	movs	r2, #10
 800221e:	e733      	b.n	8002088 <HAL_GPIO_Init+0x14>
 8002220:	2201      	movs	r2, #1
 8002222:	e731      	b.n	8002088 <HAL_GPIO_Init+0x14>
 8002224:	2202      	movs	r2, #2
 8002226:	e72f      	b.n	8002088 <HAL_GPIO_Init+0x14>
 8002228:	2203      	movs	r2, #3
 800222a:	e72d      	b.n	8002088 <HAL_GPIO_Init+0x14>
 800222c:	2204      	movs	r2, #4
 800222e:	e72b      	b.n	8002088 <HAL_GPIO_Init+0x14>
 8002230:	2205      	movs	r2, #5
 8002232:	e729      	b.n	8002088 <HAL_GPIO_Init+0x14>
 8002234:	2206      	movs	r2, #6
 8002236:	e727      	b.n	8002088 <HAL_GPIO_Init+0x14>
 8002238:	2207      	movs	r2, #7
 800223a:	e725      	b.n	8002088 <HAL_GPIO_Init+0x14>
 800223c:	2208      	movs	r2, #8
 800223e:	e723      	b.n	8002088 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8002240:	b003      	add	sp, #12
 8002242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40013800 	.word	0x40013800
 800224c:	40013c00 	.word	0x40013c00
 8002250:	40023800 	.word	0x40023800
 8002254:	40020000 	.word	0x40020000

08002258 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002258:	b10a      	cbz	r2, 800225e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800225a:	6181      	str	r1, [r0, #24]
 800225c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800225e:	0409      	lsls	r1, r1, #16
 8002260:	6181      	str	r1, [r0, #24]
  }
}
 8002262:	4770      	bx	lr

08002264 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002264:	2800      	cmp	r0, #0
 8002266:	d057      	beq.n	8002318 <HAL_I2C_Init+0xb4>
{
 8002268:	b510      	push	{r4, lr}
 800226a:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800226c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002270:	2b00      	cmp	r3, #0
 8002272:	d041      	beq.n	80022f8 <HAL_I2C_Init+0x94>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002274:	2324      	movs	r3, #36	; 0x24
 8002276:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800227a:	6822      	ldr	r2, [r4, #0]
 800227c:	6813      	ldr	r3, [r2, #0]
 800227e:	f023 0301 	bic.w	r3, r3, #1
 8002282:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002284:	6863      	ldr	r3, [r4, #4]
 8002286:	6822      	ldr	r2, [r4, #0]
 8002288:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800228c:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800228e:	6822      	ldr	r2, [r4, #0]
 8002290:	6893      	ldr	r3, [r2, #8]
 8002292:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002296:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002298:	68e3      	ldr	r3, [r4, #12]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d031      	beq.n	8002302 <HAL_I2C_Init+0x9e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800229e:	68a3      	ldr	r3, [r4, #8]
 80022a0:	6822      	ldr	r2, [r4, #0]
 80022a2:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80022a6:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022a8:	68e3      	ldr	r3, [r4, #12]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d02f      	beq.n	800230e <HAL_I2C_Init+0xaa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022ae:	6822      	ldr	r2, [r4, #0]
 80022b0:	6851      	ldr	r1, [r2, #4]
 80022b2:	4b1a      	ldr	r3, [pc, #104]	; (800231c <HAL_I2C_Init+0xb8>)
 80022b4:	430b      	orrs	r3, r1
 80022b6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022b8:	6822      	ldr	r2, [r4, #0]
 80022ba:	68d3      	ldr	r3, [r2, #12]
 80022bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80022c0:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80022c2:	6923      	ldr	r3, [r4, #16]
 80022c4:	6962      	ldr	r2, [r4, #20]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	69a1      	ldr	r1, [r4, #24]
 80022ca:	6822      	ldr	r2, [r4, #0]
 80022cc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80022d0:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022d2:	69e3      	ldr	r3, [r4, #28]
 80022d4:	6a21      	ldr	r1, [r4, #32]
 80022d6:	6822      	ldr	r2, [r4, #0]
 80022d8:	430b      	orrs	r3, r1
 80022da:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022dc:	6822      	ldr	r2, [r4, #0]
 80022de:	6813      	ldr	r3, [r2, #0]
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e6:	2000      	movs	r0, #0
 80022e8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022ea:	2320      	movs	r3, #32
 80022ec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022f0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 80022f6:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80022f8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80022fc:	f7ff fb3c 	bl	8001978 <HAL_I2C_MspInit>
 8002300:	e7b8      	b.n	8002274 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002302:	68a3      	ldr	r3, [r4, #8]
 8002304:	6822      	ldr	r2, [r4, #0]
 8002306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800230a:	6093      	str	r3, [r2, #8]
 800230c:	e7cc      	b.n	80022a8 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800230e:	6823      	ldr	r3, [r4, #0]
 8002310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	e7ca      	b.n	80022ae <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002318:	2001      	movs	r0, #1
}
 800231a:	4770      	bx	lr
 800231c:	02008000 	.word	0x02008000

08002320 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002320:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b20      	cmp	r3, #32
 8002328:	d124      	bne.n	8002374 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800232a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800232e:	2b01      	cmp	r3, #1
 8002330:	d022      	beq.n	8002378 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002332:	2301      	movs	r3, #1
 8002334:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002338:	2324      	movs	r3, #36	; 0x24
 800233a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800233e:	6802      	ldr	r2, [r0, #0]
 8002340:	6813      	ldr	r3, [r2, #0]
 8002342:	f023 0301 	bic.w	r3, r3, #1
 8002346:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002348:	6802      	ldr	r2, [r0, #0]
 800234a:	6813      	ldr	r3, [r2, #0]
 800234c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002350:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002352:	6802      	ldr	r2, [r0, #0]
 8002354:	6813      	ldr	r3, [r2, #0]
 8002356:	4319      	orrs	r1, r3
 8002358:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800235a:	6802      	ldr	r2, [r0, #0]
 800235c:	6813      	ldr	r3, [r2, #0]
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002364:	2320      	movs	r3, #32
 8002366:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800236a:	2300      	movs	r3, #0
 800236c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002370:	4618      	mov	r0, r3
 8002372:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002374:	2002      	movs	r0, #2
 8002376:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002378:	2002      	movs	r0, #2
  }
}
 800237a:	4770      	bx	lr

0800237c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800237c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b20      	cmp	r3, #32
 8002384:	d122      	bne.n	80023cc <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002386:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800238a:	2b01      	cmp	r3, #1
 800238c:	d020      	beq.n	80023d0 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800238e:	2301      	movs	r3, #1
 8002390:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002394:	2324      	movs	r3, #36	; 0x24
 8002396:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800239a:	6802      	ldr	r2, [r0, #0]
 800239c:	6813      	ldr	r3, [r2, #0]
 800239e:	f023 0301 	bic.w	r3, r3, #1
 80023a2:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023a4:	6802      	ldr	r2, [r0, #0]
 80023a6:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023ac:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023b0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023b2:	6802      	ldr	r2, [r0, #0]
 80023b4:	6813      	ldr	r3, [r2, #0]
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023bc:	2320      	movs	r3, #32
 80023be:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023c2:	2300      	movs	r3, #0
 80023c4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80023c8:	4618      	mov	r0, r3
 80023ca:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80023cc:	2002      	movs	r0, #2
 80023ce:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80023d0:	2002      	movs	r0, #2
  }
}
 80023d2:	4770      	bx	lr

080023d4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80023d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80023d6:	684d      	ldr	r5, [r1, #4]
 80023d8:	6804      	ldr	r4, [r0, #0]
 80023da:	68e3      	ldr	r3, [r4, #12]
 80023dc:	f3c3 430b 	ubfx	r3, r3, #16, #12
 80023e0:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80023e2:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 80023e6:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 80023ea:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80023ee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80023f2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80023f6:	680b      	ldr	r3, [r1, #0]
 80023f8:	6804      	ldr	r4, [r0, #0]
 80023fa:	68e6      	ldr	r6, [r4, #12]
 80023fc:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8002400:	4433      	add	r3, r6
 8002402:	3301      	adds	r3, #1
 8002404:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8002408:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800240c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002410:	68cd      	ldr	r5, [r1, #12]
 8002412:	6804      	ldr	r4, [r0, #0]
 8002414:	68e3      	ldr	r3, [r4, #12]
 8002416:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800241a:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800241c:	eb04 1ec2 	add.w	lr, r4, r2, lsl #7
 8002420:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8002424:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002428:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800242c:	688b      	ldr	r3, [r1, #8]
 800242e:	6804      	ldr	r4, [r0, #0]
 8002430:	68e6      	ldr	r6, [r4, #12]
 8002432:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 8002436:	4473      	add	r3, lr
 8002438:	3301      	adds	r3, #1
 800243a:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800243e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002442:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002446:	6803      	ldr	r3, [r0, #0]
 8002448:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800244c:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8002450:	f024 0407 	bic.w	r4, r4, #7
 8002454:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002458:	6803      	ldr	r3, [r0, #0]
 800245a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800245e:	690c      	ldr	r4, [r1, #16]
 8002460:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002464:	f891 7031 	ldrb.w	r7, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002468:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800246c:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800246e:	6804      	ldr	r4, [r0, #0]
 8002470:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8002474:	f104 0e84 	add.w	lr, r4, #132	; 0x84
 8002478:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800247c:	2400      	movs	r4, #0
 800247e:	f8ce 4018 	str.w	r4, [lr, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002482:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8002486:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800248a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800248e:	6806      	ldr	r6, [r0, #0]
 8002490:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 8002494:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8002498:	f8ce 309c 	str.w	r3, [lr, #156]	; 0x9c
 800249c:	f10e 0e84 	add.w	lr, lr, #132	; 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80024a0:	6803      	ldr	r3, [r0, #0]
 80024a2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80024a6:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 80024aa:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80024ae:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80024b2:	6803      	ldr	r3, [r0, #0]
 80024b4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80024b8:	694d      	ldr	r5, [r1, #20]
 80024ba:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80024be:	6803      	ldr	r3, [r0, #0]
 80024c0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80024c4:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 80024c8:	4d2e      	ldr	r5, [pc, #184]	; (8002584 <LTDC_SetConfig+0x1b0>)
 80024ca:	4035      	ands	r5, r6
 80024cc:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80024d0:	6a0d      	ldr	r5, [r1, #32]
 80024d2:	6803      	ldr	r3, [r0, #0]
 80024d4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80024d8:	69ce      	ldr	r6, [r1, #28]
 80024da:	4335      	orrs	r5, r6
 80024dc:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80024e0:	6803      	ldr	r3, [r0, #0]
 80024e2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80024e6:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 80024ea:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80024ee:	6803      	ldr	r3, [r0, #0]
 80024f0:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 80024f4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80024f6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80024fa:	690b      	ldr	r3, [r1, #16]
 80024fc:	b16b      	cbz	r3, 800251a <LTDC_SetConfig+0x146>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d039      	beq.n	8002576 <LTDC_SetConfig+0x1a2>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002502:	2b02      	cmp	r3, #2
 8002504:	bf18      	it	ne
 8002506:	2b04      	cmpne	r3, #4
 8002508:	d037      	beq.n	800257a <LTDC_SetConfig+0x1a6>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800250a:	2b03      	cmp	r3, #3
 800250c:	d037      	beq.n	800257e <LTDC_SetConfig+0x1aa>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800250e:	2b07      	cmp	r3, #7
 8002510:	d001      	beq.n	8002516 <LTDC_SetConfig+0x142>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8002512:	2501      	movs	r5, #1
 8002514:	e002      	b.n	800251c <LTDC_SetConfig+0x148>
    tmp = 2U;
 8002516:	2502      	movs	r5, #2
 8002518:	e000      	b.n	800251c <LTDC_SetConfig+0x148>
    tmp = 4U;
 800251a:	2504      	movs	r5, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800251c:	6802      	ldr	r2, [r0, #0]
 800251e:	4462      	add	r2, ip
 8002520:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8002524:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 8002528:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800252c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800252e:	fb05 f402 	mul.w	r4, r5, r2
 8002532:	684b      	ldr	r3, [r1, #4]
 8002534:	680a      	ldr	r2, [r1, #0]
 8002536:	1a9b      	subs	r3, r3, r2
 8002538:	fb05 f303 	mul.w	r3, r5, r3
 800253c:	3303      	adds	r3, #3
 800253e:	6802      	ldr	r2, [r0, #0]
 8002540:	4462      	add	r2, ip
 8002542:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8002546:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800254a:	6803      	ldr	r3, [r0, #0]
 800254c:	4463      	add	r3, ip
 800254e:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8002552:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <LTDC_SetConfig+0x1b4>)
 8002554:	4022      	ands	r2, r4
 8002556:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800255a:	6803      	ldr	r3, [r0, #0]
 800255c:	4463      	add	r3, ip
 800255e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002560:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002564:	6803      	ldr	r3, [r0, #0]
 8002566:	449c      	add	ip, r3
 8002568:	f8dc 3084 	ldr.w	r3, [ip, #132]	; 0x84
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
}
 8002574:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 8002576:	2503      	movs	r5, #3
 8002578:	e7d0      	b.n	800251c <LTDC_SetConfig+0x148>
    tmp = 2U;
 800257a:	2502      	movs	r5, #2
 800257c:	e7ce      	b.n	800251c <LTDC_SetConfig+0x148>
 800257e:	2502      	movs	r5, #2
 8002580:	e7cc      	b.n	800251c <LTDC_SetConfig+0x148>
 8002582:	bf00      	nop
 8002584:	fffff8f8 	.word	0xfffff8f8
 8002588:	fffff800 	.word	0xfffff800

0800258c <HAL_LTDC_Init>:
  if (hltdc == NULL)
 800258c:	2800      	cmp	r0, #0
 800258e:	d072      	beq.n	8002676 <HAL_LTDC_Init+0xea>
{
 8002590:	b538      	push	{r3, r4, r5, lr}
 8002592:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002594:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d067      	beq.n	800266c <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800259c:	2302      	movs	r3, #2
 800259e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80025a2:	6822      	ldr	r2, [r4, #0]
 80025a4:	6993      	ldr	r3, [r2, #24]
 80025a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80025aa:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80025ac:	6821      	ldr	r1, [r4, #0]
 80025ae:	698a      	ldr	r2, [r1, #24]
 80025b0:	6863      	ldr	r3, [r4, #4]
 80025b2:	68a0      	ldr	r0, [r4, #8]
 80025b4:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80025b6:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80025b8:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80025ba:	6920      	ldr	r0, [r4, #16]
 80025bc:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80025be:	4313      	orrs	r3, r2
 80025c0:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80025c2:	6821      	ldr	r1, [r4, #0]
 80025c4:	688a      	ldr	r2, [r1, #8]
 80025c6:	4b2d      	ldr	r3, [pc, #180]	; (800267c <HAL_LTDC_Init+0xf0>)
 80025c8:	401a      	ands	r2, r3
 80025ca:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80025cc:	6820      	ldr	r0, [r4, #0]
 80025ce:	6882      	ldr	r2, [r0, #8]
 80025d0:	69a1      	ldr	r1, [r4, #24]
 80025d2:	6965      	ldr	r5, [r4, #20]
 80025d4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80025d8:	430a      	orrs	r2, r1
 80025da:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80025dc:	6821      	ldr	r1, [r4, #0]
 80025de:	68ca      	ldr	r2, [r1, #12]
 80025e0:	401a      	ands	r2, r3
 80025e2:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80025e4:	6820      	ldr	r0, [r4, #0]
 80025e6:	68c2      	ldr	r2, [r0, #12]
 80025e8:	6a21      	ldr	r1, [r4, #32]
 80025ea:	69e5      	ldr	r5, [r4, #28]
 80025ec:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80025f0:	430a      	orrs	r2, r1
 80025f2:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80025f4:	6821      	ldr	r1, [r4, #0]
 80025f6:	690a      	ldr	r2, [r1, #16]
 80025f8:	401a      	ands	r2, r3
 80025fa:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80025fc:	6820      	ldr	r0, [r4, #0]
 80025fe:	6902      	ldr	r2, [r0, #16]
 8002600:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002602:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002604:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002608:	430a      	orrs	r2, r1
 800260a:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800260c:	6821      	ldr	r1, [r4, #0]
 800260e:	694a      	ldr	r2, [r1, #20]
 8002610:	4013      	ands	r3, r2
 8002612:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002614:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002616:	6821      	ldr	r1, [r4, #0]
 8002618:	694b      	ldr	r3, [r1, #20]
 800261a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800261c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002620:	4313      	orrs	r3, r2
 8002622:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002624:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002628:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800262c:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800262e:	6821      	ldr	r1, [r4, #0]
 8002630:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002632:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002636:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002638:	6821      	ldr	r1, [r4, #0]
 800263a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800263c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002640:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8002644:	4303      	orrs	r3, r0
 8002646:	4313      	orrs	r3, r2
 8002648:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800264a:	6822      	ldr	r2, [r4, #0]
 800264c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800264e:	f043 0306 	orr.w	r3, r3, #6
 8002652:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8002654:	6822      	ldr	r2, [r4, #0]
 8002656:	6993      	ldr	r3, [r2, #24]
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800265e:	2000      	movs	r0, #0
 8002660:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8002664:	2301      	movs	r3, #1
 8002666:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800266a:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800266c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8002670:	f7ff f9ba 	bl	80019e8 <HAL_LTDC_MspInit>
 8002674:	e792      	b.n	800259c <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8002676:	2001      	movs	r0, #1
}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	f000f800 	.word	0xf000f800

08002680 <HAL_LTDC_ErrorCallback>:
}
 8002680:	4770      	bx	lr

08002682 <HAL_LTDC_LineEventCallback>:
}
 8002682:	4770      	bx	lr

08002684 <HAL_LTDC_ReloadEventCallback>:
}
 8002684:	4770      	bx	lr

08002686 <HAL_LTDC_IRQHandler>:
{
 8002686:	b570      	push	{r4, r5, r6, lr}
 8002688:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800268a:	6803      	ldr	r3, [r0, #0]
 800268c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800268e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002690:	f015 0f04 	tst.w	r5, #4
 8002694:	d002      	beq.n	800269c <HAL_LTDC_IRQHandler+0x16>
 8002696:	f016 0f04 	tst.w	r6, #4
 800269a:	d112      	bne.n	80026c2 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800269c:	f015 0f02 	tst.w	r5, #2
 80026a0:	d002      	beq.n	80026a8 <HAL_LTDC_IRQHandler+0x22>
 80026a2:	f016 0f02 	tst.w	r6, #2
 80026a6:	d121      	bne.n	80026ec <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80026a8:	f015 0f01 	tst.w	r5, #1
 80026ac:	d002      	beq.n	80026b4 <HAL_LTDC_IRQHandler+0x2e>
 80026ae:	f016 0f01 	tst.w	r6, #1
 80026b2:	d132      	bne.n	800271a <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80026b4:	f015 0f08 	tst.w	r5, #8
 80026b8:	d002      	beq.n	80026c0 <HAL_LTDC_IRQHandler+0x3a>
 80026ba:	f016 0f08 	tst.w	r6, #8
 80026be:	d13d      	bne.n	800273c <HAL_LTDC_IRQHandler+0xb6>
}
 80026c0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80026c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026c4:	f022 0204 	bic.w	r2, r2, #4
 80026c8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80026ca:	6803      	ldr	r3, [r0, #0]
 80026cc:	2204      	movs	r2, #4
 80026ce:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80026d0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80026dc:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80026e0:	2300      	movs	r3, #0
 80026e2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80026e6:	f7ff ffcb 	bl	8002680 <HAL_LTDC_ErrorCallback>
 80026ea:	e7d7      	b.n	800269c <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80026ec:	6822      	ldr	r2, [r4, #0]
 80026ee:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80026f0:	f023 0302 	bic.w	r3, r3, #2
 80026f4:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	2202      	movs	r2, #2
 80026fa:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80026fc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002706:	2304      	movs	r3, #4
 8002708:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800270c:	2300      	movs	r3, #0
 800270e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8002712:	4620      	mov	r0, r4
 8002714:	f7ff ffb4 	bl	8002680 <HAL_LTDC_ErrorCallback>
 8002718:	e7c6      	b.n	80026a8 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800271a:	6822      	ldr	r2, [r4, #0]
 800271c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800271e:	f023 0301 	bic.w	r3, r3, #1
 8002722:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002724:	6822      	ldr	r2, [r4, #0]
 8002726:	2301      	movs	r3, #1
 8002728:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800272a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800272e:	2300      	movs	r3, #0
 8002730:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8002734:	4620      	mov	r0, r4
 8002736:	f7ff ffa4 	bl	8002682 <HAL_LTDC_LineEventCallback>
 800273a:	e7bb      	b.n	80026b4 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800273c:	6822      	ldr	r2, [r4, #0]
 800273e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002740:	f023 0308 	bic.w	r3, r3, #8
 8002744:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002746:	6823      	ldr	r3, [r4, #0]
 8002748:	2208      	movs	r2, #8
 800274a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800274c:	2301      	movs	r3, #1
 800274e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002752:	2300      	movs	r3, #0
 8002754:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002758:	4620      	mov	r0, r4
 800275a:	f7ff ff93 	bl	8002684 <HAL_LTDC_ReloadEventCallback>
}
 800275e:	e7af      	b.n	80026c0 <HAL_LTDC_IRQHandler+0x3a>

08002760 <HAL_LTDC_ConfigLayer>:
{
 8002760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8002762:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002766:	2b01      	cmp	r3, #1
 8002768:	d02c      	beq.n	80027c4 <HAL_LTDC_ConfigLayer+0x64>
 800276a:	4604      	mov	r4, r0
 800276c:	460d      	mov	r5, r1
 800276e:	4616      	mov	r6, r2
 8002770:	2701      	movs	r7, #1
 8002772:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002776:	2302      	movs	r3, #2
 8002778:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800277c:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8002780:	fb0c 0c02 	mla	ip, ip, r2, r0
 8002784:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8002788:	468e      	mov	lr, r1
 800278a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800278e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002792:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002796:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800279a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800279e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80027a2:	f8de 3000 	ldr.w	r3, [lr]
 80027a6:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80027aa:	4632      	mov	r2, r6
 80027ac:	4629      	mov	r1, r5
 80027ae:	4620      	mov	r0, r4
 80027b0:	f7ff fe10 	bl	80023d4 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80027b4:	6823      	ldr	r3, [r4, #0]
 80027b6:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80027b8:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80027bc:	2000      	movs	r0, #0
 80027be:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 80027c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 80027c4:	2002      	movs	r0, #2
 80027c6:	e7fc      	b.n	80027c2 <HAL_LTDC_ConfigLayer+0x62>

080027c8 <HAL_LTDC_SetAddress>:
{
 80027c8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hltdc);
 80027ca:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d019      	beq.n	8002806 <HAL_LTDC_SetAddress+0x3e>
 80027d2:	4604      	mov	r4, r0
 80027d4:	2501      	movs	r5, #1
 80027d6:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80027da:	2302      	movs	r3, #2
 80027dc:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80027e0:	2334      	movs	r3, #52	; 0x34
 80027e2:	fb02 f303 	mul.w	r3, r2, r3
 80027e6:	f103 0038 	add.w	r0, r3, #56	; 0x38
  pLayerCfg->FBStartAdress = Address;
 80027ea:	4423      	add	r3, r4
 80027ec:	65d9      	str	r1, [r3, #92]	; 0x5c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80027ee:	1821      	adds	r1, r4, r0
 80027f0:	4620      	mov	r0, r4
 80027f2:	f7ff fdef 	bl	80023d4 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80027f6:	6823      	ldr	r3, [r4, #0]
 80027f8:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80027fa:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80027fe:	2000      	movs	r0, #0
 8002800:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8002804:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hltdc);
 8002806:	2002      	movs	r0, #2
 8002808:	e7fc      	b.n	8002804 <HAL_LTDC_SetAddress+0x3c>
	...

0800280c <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800280c:	4a02      	ldr	r2, [pc, #8]	; (8002818 <HAL_PWR_EnableBkUpAccess+0xc>)
 800280e:	6813      	ldr	r3, [r2, #0]
 8002810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002814:	6013      	str	r3, [r2, #0]
}
 8002816:	4770      	bx	lr
 8002818:	40007000 	.word	0x40007000

0800281c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800281c:	b510      	push	{r4, lr}
 800281e:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002820:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <HAL_PWREx_EnableOverDrive+0x74>)
 8002822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002824:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002828:	641a      	str	r2, [r3, #64]	; 0x40
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002830:	9301      	str	r3, [sp, #4]
 8002832:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002834:	4a17      	ldr	r2, [pc, #92]	; (8002894 <HAL_PWREx_EnableOverDrive+0x78>)
 8002836:	6813      	ldr	r3, [r2, #0]
 8002838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800283e:	f7ff fa2b 	bl	8001c98 <HAL_GetTick>
 8002842:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002844:	4b13      	ldr	r3, [pc, #76]	; (8002894 <HAL_PWREx_EnableOverDrive+0x78>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800284c:	d108      	bne.n	8002860 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800284e:	f7ff fa23 	bl	8001c98 <HAL_GetTick>
 8002852:	1b00      	subs	r0, r0, r4
 8002854:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002858:	d9f4      	bls.n	8002844 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800285a:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 800285c:	b002      	add	sp, #8
 800285e:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002860:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <HAL_PWREx_EnableOverDrive+0x78>)
 8002862:	6813      	ldr	r3, [r2, #0]
 8002864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002868:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800286a:	f7ff fa15 	bl	8001c98 <HAL_GetTick>
 800286e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002870:	4b08      	ldr	r3, [pc, #32]	; (8002894 <HAL_PWREx_EnableOverDrive+0x78>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002878:	d107      	bne.n	800288a <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800287a:	f7ff fa0d 	bl	8001c98 <HAL_GetTick>
 800287e:	1b00      	subs	r0, r0, r4
 8002880:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002884:	d9f4      	bls.n	8002870 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8002886:	2003      	movs	r0, #3
 8002888:	e7e8      	b.n	800285c <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 800288a:	2000      	movs	r0, #0
 800288c:	e7e6      	b.n	800285c <HAL_PWREx_EnableOverDrive+0x40>
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800
 8002894:	40007000 	.word	0x40007000

08002898 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002898:	2800      	cmp	r0, #0
 800289a:	f000 81ff 	beq.w	8002c9c <HAL_RCC_OscConfig+0x404>
{
 800289e:	b570      	push	{r4, r5, r6, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a4:	6803      	ldr	r3, [r0, #0]
 80028a6:	f013 0f01 	tst.w	r3, #1
 80028aa:	d029      	beq.n	8002900 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028ac:	4b95      	ldr	r3, [pc, #596]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 030c 	and.w	r3, r3, #12
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d01a      	beq.n	80028ee <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028b8:	4b92      	ldr	r3, [pc, #584]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d00f      	beq.n	80028e4 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c4:	6863      	ldr	r3, [r4, #4]
 80028c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ca:	d040      	beq.n	800294e <HAL_RCC_OscConfig+0xb6>
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d154      	bne.n	800297a <HAL_RCC_OscConfig+0xe2>
 80028d0:	4b8c      	ldr	r3, [pc, #560]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	e039      	b.n	8002958 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028e4:	4b87      	ldr	r3, [pc, #540]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80028ec:	d0ea      	beq.n	80028c4 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ee:	4b85      	ldr	r3, [pc, #532]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80028f6:	d003      	beq.n	8002900 <HAL_RCC_OscConfig+0x68>
 80028f8:	6863      	ldr	r3, [r4, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 81d0 	beq.w	8002ca0 <HAL_RCC_OscConfig+0x408>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002900:	6823      	ldr	r3, [r4, #0]
 8002902:	f013 0f02 	tst.w	r3, #2
 8002906:	d074      	beq.n	80029f2 <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002908:	4b7e      	ldr	r3, [pc, #504]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f013 0f0c 	tst.w	r3, #12
 8002910:	d05e      	beq.n	80029d0 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002912:	4b7c      	ldr	r3, [pc, #496]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b08      	cmp	r3, #8
 800291c:	d053      	beq.n	80029c6 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800291e:	68e3      	ldr	r3, [r4, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8089 	beq.w	8002a38 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002926:	4a77      	ldr	r2, [pc, #476]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002928:	6813      	ldr	r3, [r2, #0]
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7ff f9b2 	bl	8001c98 <HAL_GetTick>
 8002934:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002936:	4b73      	ldr	r3, [pc, #460]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f013 0f02 	tst.w	r3, #2
 800293e:	d172      	bne.n	8002a26 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002940:	f7ff f9aa 	bl	8001c98 <HAL_GetTick>
 8002944:	1b40      	subs	r0, r0, r5
 8002946:	2802      	cmp	r0, #2
 8002948:	d9f5      	bls.n	8002936 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 800294a:	2003      	movs	r0, #3
 800294c:	e1ad      	b.n	8002caa <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800294e:	4a6d      	ldr	r2, [pc, #436]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002950:	6813      	ldr	r3, [r2, #0]
 8002952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002956:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002958:	6863      	ldr	r3, [r4, #4]
 800295a:	b32b      	cbz	r3, 80029a8 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 800295c:	f7ff f99c 	bl	8001c98 <HAL_GetTick>
 8002960:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	4b68      	ldr	r3, [pc, #416]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800296a:	d1c9      	bne.n	8002900 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800296c:	f7ff f994 	bl	8001c98 <HAL_GetTick>
 8002970:	1b40      	subs	r0, r0, r5
 8002972:	2864      	cmp	r0, #100	; 0x64
 8002974:	d9f5      	bls.n	8002962 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8002976:	2003      	movs	r0, #3
 8002978:	e197      	b.n	8002caa <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800297a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800297e:	d009      	beq.n	8002994 <HAL_RCC_OscConfig+0xfc>
 8002980:	4b60      	ldr	r3, [pc, #384]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	e7e1      	b.n	8002958 <HAL_RCC_OscConfig+0xc0>
 8002994:	4b5b      	ldr	r3, [pc, #364]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	e7d7      	b.n	8002958 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 80029a8:	f7ff f976 	bl	8001c98 <HAL_GetTick>
 80029ac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ae:	4b55      	ldr	r3, [pc, #340]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80029b6:	d0a3      	beq.n	8002900 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b8:	f7ff f96e 	bl	8001c98 <HAL_GetTick>
 80029bc:	1b40      	subs	r0, r0, r5
 80029be:	2864      	cmp	r0, #100	; 0x64
 80029c0:	d9f5      	bls.n	80029ae <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 80029c2:	2003      	movs	r0, #3
 80029c4:	e171      	b.n	8002caa <HAL_RCC_OscConfig+0x412>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029c6:	4b4f      	ldr	r3, [pc, #316]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80029ce:	d1a6      	bne.n	800291e <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d0:	4b4c      	ldr	r3, [pc, #304]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f013 0f02 	tst.w	r3, #2
 80029d8:	d003      	beq.n	80029e2 <HAL_RCC_OscConfig+0x14a>
 80029da:	68e3      	ldr	r3, [r4, #12]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	f040 8161 	bne.w	8002ca4 <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e2:	4a48      	ldr	r2, [pc, #288]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	6813      	ldr	r3, [r2, #0]
 80029e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80029ea:	6921      	ldr	r1, [r4, #16]
 80029ec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029f0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	f013 0f08 	tst.w	r3, #8
 80029f8:	d046      	beq.n	8002a88 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029fa:	6963      	ldr	r3, [r4, #20]
 80029fc:	b383      	cbz	r3, 8002a60 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fe:	4a41      	ldr	r2, [pc, #260]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a00:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a08:	f7ff f946 	bl	8001c98 <HAL_GetTick>
 8002a0c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0e:	4b3d      	ldr	r3, [pc, #244]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a12:	f013 0f02 	tst.w	r3, #2
 8002a16:	d137      	bne.n	8002a88 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a18:	f7ff f93e 	bl	8001c98 <HAL_GetTick>
 8002a1c:	1b40      	subs	r0, r0, r5
 8002a1e:	2802      	cmp	r0, #2
 8002a20:	d9f5      	bls.n	8002a0e <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8002a22:	2003      	movs	r0, #3
 8002a24:	e141      	b.n	8002caa <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a26:	4a37      	ldr	r2, [pc, #220]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a28:	6813      	ldr	r3, [r2, #0]
 8002a2a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002a2e:	6921      	ldr	r1, [r4, #16]
 8002a30:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e7dc      	b.n	80029f2 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8002a38:	4a32      	ldr	r2, [pc, #200]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a3a:	6813      	ldr	r3, [r2, #0]
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002a42:	f7ff f929 	bl	8001c98 <HAL_GetTick>
 8002a46:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a48:	4b2e      	ldr	r3, [pc, #184]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f013 0f02 	tst.w	r3, #2
 8002a50:	d0cf      	beq.n	80029f2 <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a52:	f7ff f921 	bl	8001c98 <HAL_GetTick>
 8002a56:	1b40      	subs	r0, r0, r5
 8002a58:	2802      	cmp	r0, #2
 8002a5a:	d9f5      	bls.n	8002a48 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8002a5c:	2003      	movs	r0, #3
 8002a5e:	e124      	b.n	8002caa <HAL_RCC_OscConfig+0x412>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a60:	4a28      	ldr	r2, [pc, #160]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a62:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002a64:	f023 0301 	bic.w	r3, r3, #1
 8002a68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6a:	f7ff f915 	bl	8001c98 <HAL_GetTick>
 8002a6e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a70:	4b24      	ldr	r3, [pc, #144]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a74:	f013 0f02 	tst.w	r3, #2
 8002a78:	d006      	beq.n	8002a88 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a7a:	f7ff f90d 	bl	8001c98 <HAL_GetTick>
 8002a7e:	1b40      	subs	r0, r0, r5
 8002a80:	2802      	cmp	r0, #2
 8002a82:	d9f5      	bls.n	8002a70 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8002a84:	2003      	movs	r0, #3
 8002a86:	e110      	b.n	8002caa <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	f013 0f04 	tst.w	r3, #4
 8002a8e:	d07d      	beq.n	8002b8c <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a90:	4b1c      	ldr	r3, [pc, #112]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002a98:	d11e      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9a:	4b1a      	ldr	r3, [pc, #104]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002aa2:	641a      	str	r2, [r3, #64]	; 0x40
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002aae:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab0:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ab8:	d010      	beq.n	8002adc <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aba:	68a3      	ldr	r3, [r4, #8]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d025      	beq.n	8002b0c <HAL_RCC_OscConfig+0x274>
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d13b      	bne.n	8002b3c <HAL_RCC_OscConfig+0x2a4>
 8002ac4:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ac8:	f022 0201 	bic.w	r2, r2, #1
 8002acc:	671a      	str	r2, [r3, #112]	; 0x70
 8002ace:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ad0:	f022 0204 	bic.w	r2, r2, #4
 8002ad4:	671a      	str	r2, [r3, #112]	; 0x70
 8002ad6:	e01e      	b.n	8002b16 <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 8002ad8:	2500      	movs	r5, #0
 8002ada:	e7e9      	b.n	8002ab0 <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 8002adc:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002ade:	6813      	ldr	r3, [r2, #0]
 8002ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002ae6:	f7ff f8d7 	bl	8001c98 <HAL_GetTick>
 8002aea:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aec:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002af4:	d1e1      	bne.n	8002aba <HAL_RCC_OscConfig+0x222>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af6:	f7ff f8cf 	bl	8001c98 <HAL_GetTick>
 8002afa:	1b80      	subs	r0, r0, r6
 8002afc:	2864      	cmp	r0, #100	; 0x64
 8002afe:	d9f5      	bls.n	8002aec <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8002b00:	2003      	movs	r0, #3
 8002b02:	e0d2      	b.n	8002caa <HAL_RCC_OscConfig+0x412>
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b0c:	4a6e      	ldr	r2, [pc, #440]	; (8002cc8 <HAL_RCC_OscConfig+0x430>)
 8002b0e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b16:	68a3      	ldr	r3, [r4, #8]
 8002b18:	b333      	cbz	r3, 8002b68 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1a:	f7ff f8bd 	bl	8001c98 <HAL_GetTick>
 8002b1e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b20:	4b69      	ldr	r3, [pc, #420]	; (8002cc8 <HAL_RCC_OscConfig+0x430>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	f013 0f02 	tst.w	r3, #2
 8002b28:	d12f      	bne.n	8002b8a <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2a:	f7ff f8b5 	bl	8001c98 <HAL_GetTick>
 8002b2e:	1b80      	subs	r0, r0, r6
 8002b30:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b34:	4298      	cmp	r0, r3
 8002b36:	d9f3      	bls.n	8002b20 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002b38:	2003      	movs	r0, #3
 8002b3a:	e0b6      	b.n	8002caa <HAL_RCC_OscConfig+0x412>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b3c:	2b05      	cmp	r3, #5
 8002b3e:	d009      	beq.n	8002b54 <HAL_RCC_OscConfig+0x2bc>
 8002b40:	4b61      	ldr	r3, [pc, #388]	; (8002cc8 <HAL_RCC_OscConfig+0x430>)
 8002b42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b44:	f022 0201 	bic.w	r2, r2, #1
 8002b48:	671a      	str	r2, [r3, #112]	; 0x70
 8002b4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b4c:	f022 0204 	bic.w	r2, r2, #4
 8002b50:	671a      	str	r2, [r3, #112]	; 0x70
 8002b52:	e7e0      	b.n	8002b16 <HAL_RCC_OscConfig+0x27e>
 8002b54:	4b5c      	ldr	r3, [pc, #368]	; (8002cc8 <HAL_RCC_OscConfig+0x430>)
 8002b56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b58:	f042 0204 	orr.w	r2, r2, #4
 8002b5c:	671a      	str	r2, [r3, #112]	; 0x70
 8002b5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b60:	f042 0201 	orr.w	r2, r2, #1
 8002b64:	671a      	str	r2, [r3, #112]	; 0x70
 8002b66:	e7d6      	b.n	8002b16 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b68:	f7ff f896 	bl	8001c98 <HAL_GetTick>
 8002b6c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6e:	4b56      	ldr	r3, [pc, #344]	; (8002cc8 <HAL_RCC_OscConfig+0x430>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	f013 0f02 	tst.w	r3, #2
 8002b76:	d008      	beq.n	8002b8a <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b78:	f7ff f88e 	bl	8001c98 <HAL_GetTick>
 8002b7c:	1b80      	subs	r0, r0, r6
 8002b7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b82:	4298      	cmp	r0, r3
 8002b84:	d9f3      	bls.n	8002b6e <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8002b86:	2003      	movs	r0, #3
 8002b88:	e08f      	b.n	8002caa <HAL_RCC_OscConfig+0x412>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b8a:	b9fd      	cbnz	r5, 8002bcc <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b8c:	69a3      	ldr	r3, [r4, #24]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 808a 	beq.w	8002ca8 <HAL_RCC_OscConfig+0x410>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b94:	4a4c      	ldr	r2, [pc, #304]	; (8002cc8 <HAL_RCC_OscConfig+0x430>)
 8002b96:	6892      	ldr	r2, [r2, #8]
 8002b98:	f002 020c 	and.w	r2, r2, #12
 8002b9c:	2a08      	cmp	r2, #8
 8002b9e:	d058      	beq.n	8002c52 <HAL_RCC_OscConfig+0x3ba>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d019      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba4:	4a48      	ldr	r2, [pc, #288]	; (8002cc8 <HAL_RCC_OscConfig+0x430>)
 8002ba6:	6813      	ldr	r3, [r2, #0]
 8002ba8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bae:	f7ff f873 	bl	8001c98 <HAL_GetTick>
 8002bb2:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb4:	4b44      	ldr	r3, [pc, #272]	; (8002cc8 <HAL_RCC_OscConfig+0x430>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002bbc:	d047      	beq.n	8002c4e <HAL_RCC_OscConfig+0x3b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbe:	f7ff f86b 	bl	8001c98 <HAL_GetTick>
 8002bc2:	1b00      	subs	r0, r0, r4
 8002bc4:	2802      	cmp	r0, #2
 8002bc6:	d9f5      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002bc8:	2003      	movs	r0, #3
 8002bca:	e06e      	b.n	8002caa <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bcc:	4a3e      	ldr	r2, [pc, #248]	; (8002cc8 <HAL_RCC_OscConfig+0x430>)
 8002bce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd6:	e7d9      	b.n	8002b8c <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8002bd8:	4a3b      	ldr	r2, [pc, #236]	; (8002cc8 <HAL_RCC_OscConfig+0x430>)
 8002bda:	6813      	ldr	r3, [r2, #0]
 8002bdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002be0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002be2:	f7ff f859 	bl	8001c98 <HAL_GetTick>
 8002be6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be8:	4b37      	ldr	r3, [pc, #220]	; (8002cc8 <HAL_RCC_OscConfig+0x430>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002bf0:	d006      	beq.n	8002c00 <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf2:	f7ff f851 	bl	8001c98 <HAL_GetTick>
 8002bf6:	1b40      	subs	r0, r0, r5
 8002bf8:	2802      	cmp	r0, #2
 8002bfa:	d9f5      	bls.n	8002be8 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8002bfc:	2003      	movs	r0, #3
 8002bfe:	e054      	b.n	8002caa <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c00:	69e3      	ldr	r3, [r4, #28]
 8002c02:	6a22      	ldr	r2, [r4, #32]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c08:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002c0c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c0e:	0852      	lsrs	r2, r2, #1
 8002c10:	3a01      	subs	r2, #1
 8002c12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c18:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002c1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c20:	4a29      	ldr	r2, [pc, #164]	; (8002cc8 <HAL_RCC_OscConfig+0x430>)
 8002c22:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002c24:	6813      	ldr	r3, [r2, #0]
 8002c26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c2a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002c2c:	f7ff f834 	bl	8001c98 <HAL_GetTick>
 8002c30:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c32:	4b25      	ldr	r3, [pc, #148]	; (8002cc8 <HAL_RCC_OscConfig+0x430>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c3a:	d106      	bne.n	8002c4a <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7ff f82c 	bl	8001c98 <HAL_GetTick>
 8002c40:	1b00      	subs	r0, r0, r4
 8002c42:	2802      	cmp	r0, #2
 8002c44:	d9f5      	bls.n	8002c32 <HAL_RCC_OscConfig+0x39a>
            return HAL_TIMEOUT;
 8002c46:	2003      	movs	r0, #3
 8002c48:	e02f      	b.n	8002caa <HAL_RCC_OscConfig+0x412>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	e02d      	b.n	8002caa <HAL_RCC_OscConfig+0x412>
 8002c4e:	2000      	movs	r0, #0
 8002c50:	e02b      	b.n	8002caa <HAL_RCC_OscConfig+0x412>
      pll_config = RCC->PLLCFGR;
 8002c52:	4a1d      	ldr	r2, [pc, #116]	; (8002cc8 <HAL_RCC_OscConfig+0x430>)
 8002c54:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d029      	beq.n	8002cae <HAL_RCC_OscConfig+0x416>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5a:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002c5e:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c60:	428b      	cmp	r3, r1
 8002c62:	d126      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x41a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c64:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8002c68:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6a:	428b      	cmp	r3, r1
 8002c6c:	d123      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x41e>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c74:	4013      	ands	r3, r2
 8002c76:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8002c7a:	d11e      	bne.n	8002cba <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c7c:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8002c80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c82:	085b      	lsrs	r3, r3, #1
 8002c84:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c86:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8002c8a:	d118      	bne.n	8002cbe <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c8c:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8002c90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c92:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 8002c96:	d114      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x42a>
  return HAL_OK;
 8002c98:	2000      	movs	r0, #0
 8002c9a:	e006      	b.n	8002caa <HAL_RCC_OscConfig+0x412>
    return HAL_ERROR;
 8002c9c:	2001      	movs	r0, #1
}
 8002c9e:	4770      	bx	lr
        return HAL_ERROR;
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	e002      	b.n	8002caa <HAL_RCC_OscConfig+0x412>
        return HAL_ERROR;
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	e000      	b.n	8002caa <HAL_RCC_OscConfig+0x412>
  return HAL_OK;
 8002ca8:	2000      	movs	r0, #0
}
 8002caa:	b002      	add	sp, #8
 8002cac:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002cae:	2001      	movs	r0, #1
 8002cb0:	e7fb      	b.n	8002caa <HAL_RCC_OscConfig+0x412>
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	e7f9      	b.n	8002caa <HAL_RCC_OscConfig+0x412>
 8002cb6:	2001      	movs	r0, #1
 8002cb8:	e7f7      	b.n	8002caa <HAL_RCC_OscConfig+0x412>
 8002cba:	2001      	movs	r0, #1
 8002cbc:	e7f5      	b.n	8002caa <HAL_RCC_OscConfig+0x412>
 8002cbe:	2001      	movs	r0, #1
 8002cc0:	e7f3      	b.n	8002caa <HAL_RCC_OscConfig+0x412>
 8002cc2:	2001      	movs	r0, #1
 8002cc4:	e7f1      	b.n	8002caa <HAL_RCC_OscConfig+0x412>
 8002cc6:	bf00      	nop
 8002cc8:	40023800 	.word	0x40023800

08002ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ccc:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cce:	4b25      	ldr	r3, [pc, #148]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d03f      	beq.n	8002d5a <HAL_RCC_GetSysClockFreq+0x8e>
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d13f      	bne.n	8002d5e <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cde:	4b21      	ldr	r3, [pc, #132]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002cec:	d012      	beq.n	8002d14 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cee:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cf0:	6859      	ldr	r1, [r3, #4]
 8002cf2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002cf6:	481c      	ldr	r0, [pc, #112]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	fba1 0100 	umull	r0, r1, r1, r0
 8002cfe:	f7fd fa83 	bl	8000208 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d02:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002d0e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002d12:	e025      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d14:	4b13      	ldr	r3, [pc, #76]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d16:	6859      	ldr	r1, [r3, #4]
 8002d18:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8002d1c:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8002d20:	ebb1 000c 	subs.w	r0, r1, ip
 8002d24:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002d28:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002d2c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d30:	0181      	lsls	r1, r0, #6
 8002d32:	1a09      	subs	r1, r1, r0
 8002d34:	eb63 030e 	sbc.w	r3, r3, lr
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d3e:	00c9      	lsls	r1, r1, #3
 8002d40:	eb11 0c0c 	adds.w	ip, r1, ip
 8002d44:	f143 0300 	adc.w	r3, r3, #0
 8002d48:	0299      	lsls	r1, r3, #10
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002d50:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002d54:	f7fd fa58 	bl	8000208 <__aeabi_uldivmod>
 8002d58:	e7d3      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8002d5a:	4803      	ldr	r0, [pc, #12]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d5c:	e000      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d5e:	4803      	ldr	r0, [pc, #12]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002d60:	bd08      	pop	{r3, pc}
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800
 8002d68:	017d7840 	.word	0x017d7840
 8002d6c:	00f42400 	.word	0x00f42400

08002d70 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002d70:	2800      	cmp	r0, #0
 8002d72:	f000 80a0 	beq.w	8002eb6 <HAL_RCC_ClockConfig+0x146>
{
 8002d76:	b570      	push	{r4, r5, r6, lr}
 8002d78:	460d      	mov	r5, r1
 8002d7a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b52      	ldr	r3, [pc, #328]	; (8002ec8 <HAL_RCC_ClockConfig+0x158>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	428b      	cmp	r3, r1
 8002d86:	d20b      	bcs.n	8002da0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d88:	4a4f      	ldr	r2, [pc, #316]	; (8002ec8 <HAL_RCC_ClockConfig+0x158>)
 8002d8a:	6813      	ldr	r3, [r2, #0]
 8002d8c:	f023 030f 	bic.w	r3, r3, #15
 8002d90:	430b      	orrs	r3, r1
 8002d92:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d94:	6813      	ldr	r3, [r2, #0]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	428b      	cmp	r3, r1
 8002d9c:	f040 808d 	bne.w	8002eba <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da0:	6823      	ldr	r3, [r4, #0]
 8002da2:	f013 0f02 	tst.w	r3, #2
 8002da6:	d017      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da8:	f013 0f04 	tst.w	r3, #4
 8002dac:	d004      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dae:	4a47      	ldr	r2, [pc, #284]	; (8002ecc <HAL_RCC_ClockConfig+0x15c>)
 8002db0:	6893      	ldr	r3, [r2, #8]
 8002db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002db6:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	f013 0f08 	tst.w	r3, #8
 8002dbe:	d004      	beq.n	8002dca <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dc0:	4a42      	ldr	r2, [pc, #264]	; (8002ecc <HAL_RCC_ClockConfig+0x15c>)
 8002dc2:	6893      	ldr	r3, [r2, #8]
 8002dc4:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dc8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dca:	4a40      	ldr	r2, [pc, #256]	; (8002ecc <HAL_RCC_ClockConfig+0x15c>)
 8002dcc:	6893      	ldr	r3, [r2, #8]
 8002dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dd2:	68a1      	ldr	r1, [r4, #8]
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd8:	6823      	ldr	r3, [r4, #0]
 8002dda:	f013 0f01 	tst.w	r3, #1
 8002dde:	d031      	beq.n	8002e44 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de0:	6863      	ldr	r3, [r4, #4]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d020      	beq.n	8002e28 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d025      	beq.n	8002e36 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dea:	4a38      	ldr	r2, [pc, #224]	; (8002ecc <HAL_RCC_ClockConfig+0x15c>)
 8002dec:	6812      	ldr	r2, [r2, #0]
 8002dee:	f012 0f02 	tst.w	r2, #2
 8002df2:	d064      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002df4:	4935      	ldr	r1, [pc, #212]	; (8002ecc <HAL_RCC_ClockConfig+0x15c>)
 8002df6:	688a      	ldr	r2, [r1, #8]
 8002df8:	f022 0203 	bic.w	r2, r2, #3
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002e00:	f7fe ff4a 	bl	8001c98 <HAL_GetTick>
 8002e04:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e06:	4b31      	ldr	r3, [pc, #196]	; (8002ecc <HAL_RCC_ClockConfig+0x15c>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	6862      	ldr	r2, [r4, #4]
 8002e10:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002e14:	d016      	beq.n	8002e44 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e16:	f7fe ff3f 	bl	8001c98 <HAL_GetTick>
 8002e1a:	1b80      	subs	r0, r0, r6
 8002e1c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e20:	4298      	cmp	r0, r3
 8002e22:	d9f0      	bls.n	8002e06 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8002e24:	2003      	movs	r0, #3
 8002e26:	e045      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e28:	4a28      	ldr	r2, [pc, #160]	; (8002ecc <HAL_RCC_ClockConfig+0x15c>)
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002e30:	d1e0      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002e32:	2001      	movs	r0, #1
 8002e34:	e03e      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e36:	4a25      	ldr	r2, [pc, #148]	; (8002ecc <HAL_RCC_ClockConfig+0x15c>)
 8002e38:	6812      	ldr	r2, [r2, #0]
 8002e3a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002e3e:	d1d9      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002e40:	2001      	movs	r0, #1
 8002e42:	e037      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e44:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <HAL_RCC_ClockConfig+0x158>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	42ab      	cmp	r3, r5
 8002e4e:	d90a      	bls.n	8002e66 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e50:	4a1d      	ldr	r2, [pc, #116]	; (8002ec8 <HAL_RCC_ClockConfig+0x158>)
 8002e52:	6813      	ldr	r3, [r2, #0]
 8002e54:	f023 030f 	bic.w	r3, r3, #15
 8002e58:	432b      	orrs	r3, r5
 8002e5a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5c:	6813      	ldr	r3, [r2, #0]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	42ab      	cmp	r3, r5
 8002e64:	d12d      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	f013 0f04 	tst.w	r3, #4
 8002e6c:	d006      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e6e:	4a17      	ldr	r2, [pc, #92]	; (8002ecc <HAL_RCC_ClockConfig+0x15c>)
 8002e70:	6893      	ldr	r3, [r2, #8]
 8002e72:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002e76:	68e1      	ldr	r1, [r4, #12]
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	f013 0f08 	tst.w	r3, #8
 8002e82:	d007      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e84:	4a11      	ldr	r2, [pc, #68]	; (8002ecc <HAL_RCC_ClockConfig+0x15c>)
 8002e86:	6893      	ldr	r3, [r2, #8]
 8002e88:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002e8c:	6921      	ldr	r1, [r4, #16]
 8002e8e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e92:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e94:	f7ff ff1a 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <HAL_RCC_ClockConfig+0x15c>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ea0:	4a0b      	ldr	r2, [pc, #44]	; (8002ed0 <HAL_RCC_ClockConfig+0x160>)
 8002ea2:	5cd3      	ldrb	r3, [r2, r3]
 8002ea4:	40d8      	lsrs	r0, r3
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HAL_RCC_ClockConfig+0x164>)
 8002ea8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002eaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <HAL_RCC_ClockConfig+0x168>)
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	f7fe fe41 	bl	8001b34 <HAL_InitTick>
  return HAL_OK;
 8002eb2:	2000      	movs	r0, #0
}
 8002eb4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002eb6:	2001      	movs	r0, #1
}
 8002eb8:	4770      	bx	lr
      return HAL_ERROR;
 8002eba:	2001      	movs	r0, #1
 8002ebc:	e7fa      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	e7f8      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	e7f6      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x144>
 8002ec6:	bf00      	nop
 8002ec8:	40023c00 	.word	0x40023c00
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	08005c40 	.word	0x08005c40
 8002ed4:	20000000 	.word	0x20000000
 8002ed8:	20000008 	.word	0x20000008

08002edc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002edc:	4b01      	ldr	r3, [pc, #4]	; (8002ee4 <HAL_RCC_GetHCLKFreq+0x8>)
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20000000 	.word	0x20000000

08002ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002eea:	f7ff fff7 	bl	8002edc <HAL_RCC_GetHCLKFreq>
 8002eee:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002ef6:	4a03      	ldr	r2, [pc, #12]	; (8002f04 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002ef8:	5cd3      	ldrb	r3, [r2, r3]
}
 8002efa:	40d8      	lsrs	r0, r3
 8002efc:	bd08      	pop	{r3, pc}
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800
 8002f04:	08005c50 	.word	0x08005c50

08002f08 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f08:	230f      	movs	r3, #15
 8002f0a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_RCC_GetClockConfig+0x34>)
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	f002 0203 	and.w	r2, r2, #3
 8002f14:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002f1c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002f24:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	08db      	lsrs	r3, r3, #3
 8002f2a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002f2e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f30:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <HAL_RCC_GetClockConfig+0x38>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	600b      	str	r3, [r1, #0]
}
 8002f3a:	4770      	bx	lr
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40023c00 	.word	0x40023c00

08002f44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f46:	b083      	sub	sp, #12
 8002f48:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002f4a:	6806      	ldr	r6, [r0, #0]
 8002f4c:	f016 0601 	ands.w	r6, r6, #1
 8002f50:	d00d      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f52:	4ba7      	ldr	r3, [pc, #668]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002f60:	430a      	orrs	r2, r1
 8002f62:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002f64:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 8139 	beq.w	80031de <HAL_RCCEx_PeriphCLKConfig+0x29a>
  uint32_t plli2sused = 0;
 8002f6c:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f6e:	6825      	ldr	r5, [r4, #0]
 8002f70:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 8002f74:	d011      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f76:	4a9e      	ldr	r2, [pc, #632]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002f78:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002f7c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002f80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002f82:	430b      	orrs	r3, r1
 8002f84:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f8e:	f000 8128 	beq.w	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 8127 	beq.w	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  uint32_t pllsaiused = 0;
 8002f98:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002fa0:	d00f      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fa2:	4a93      	ldr	r2, [pc, #588]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002fa4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002fa8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002fac:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002fae:	430b      	orrs	r3, r1
 8002fb0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002fb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fba:	f000 8116 	beq.w	80031ea <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002fbe:	b903      	cbnz	r3, 8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 8002fc0:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002fc8:	d000      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 8002fca:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fcc:	f013 0f20 	tst.w	r3, #32
 8002fd0:	f040 8110 	bne.w	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	f013 0f10 	tst.w	r3, #16
 8002fda:	d00c      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fdc:	4b84      	ldr	r3, [pc, #528]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002fde:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002fe2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002fe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8002fea:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002fee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002ffc:	d008      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ffe:	4a7c      	ldr	r2, [pc, #496]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003000:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003004:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003008:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800300a:	430b      	orrs	r3, r1
 800300c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003010:	6823      	ldr	r3, [r4, #0]
 8003012:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003016:	d008      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003018:	4a75      	ldr	r2, [pc, #468]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800301a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800301e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003022:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003024:	430b      	orrs	r3, r1
 8003026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800302a:	6823      	ldr	r3, [r4, #0]
 800302c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003030:	d008      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003032:	4a6f      	ldr	r2, [pc, #444]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003034:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003038:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800303c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800303e:	430b      	orrs	r3, r1
 8003040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800304a:	d008      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800304c:	4a68      	ldr	r2, [pc, #416]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800304e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003052:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003056:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003058:	430b      	orrs	r3, r1
 800305a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003064:	d008      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003066:	4a62      	ldr	r2, [pc, #392]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003068:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800306c:	f023 0303 	bic.w	r3, r3, #3
 8003070:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003072:	430b      	orrs	r3, r1
 8003074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003078:	6823      	ldr	r3, [r4, #0]
 800307a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800307e:	d008      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003080:	4a5b      	ldr	r2, [pc, #364]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003082:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003086:	f023 030c 	bic.w	r3, r3, #12
 800308a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800308c:	430b      	orrs	r3, r1
 800308e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003098:	d008      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800309a:	4a55      	ldr	r2, [pc, #340]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800309c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80030a0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80030a4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80030a6:	430b      	orrs	r3, r1
 80030a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030ac:	6823      	ldr	r3, [r4, #0]
 80030ae:	f413 7f00 	tst.w	r3, #512	; 0x200
 80030b2:	d008      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030b4:	4a4e      	ldr	r2, [pc, #312]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80030b6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80030ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80030be:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80030c0:	430b      	orrs	r3, r1
 80030c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030c6:	6823      	ldr	r3, [r4, #0]
 80030c8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80030cc:	d008      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030ce:	4a48      	ldr	r2, [pc, #288]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80030d0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80030d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80030da:	430b      	orrs	r3, r1
 80030dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80030e6:	d008      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80030e8:	4a41      	ldr	r2, [pc, #260]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80030ea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80030ee:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80030f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80030f4:	430b      	orrs	r3, r1
 80030f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003100:	d008      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003102:	4a3b      	ldr	r2, [pc, #236]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003104:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003108:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800310c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800310e:	430b      	orrs	r3, r1
 8003110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003114:	6823      	ldr	r3, [r4, #0]
 8003116:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800311a:	d008      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800311c:	4a34      	ldr	r2, [pc, #208]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800311e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003122:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003126:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003128:	430b      	orrs	r3, r1
 800312a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800312e:	6823      	ldr	r3, [r4, #0]
 8003130:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003134:	d008      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003136:	4a2e      	ldr	r2, [pc, #184]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003138:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800313c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003140:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003142:	430b      	orrs	r3, r1
 8003144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800314e:	d00d      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003150:	4a27      	ldr	r2, [pc, #156]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003152:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003156:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800315a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800315c:	430b      	orrs	r3, r1
 800315e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003162:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003168:	f000 80aa 	beq.w	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800316c:	6823      	ldr	r3, [r4, #0]
 800316e:	f013 0f08 	tst.w	r3, #8
 8003172:	d000      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 8003174:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003176:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800317a:	d008      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800317c:	4a1c      	ldr	r2, [pc, #112]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800317e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003182:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003186:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003188:	430b      	orrs	r3, r1
 800318a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800318e:	6823      	ldr	r3, [r4, #0]
 8003190:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003194:	d009      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003196:	4a16      	ldr	r2, [pc, #88]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003198:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800319c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80031a4:	430b      	orrs	r3, r1
 80031a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031aa:	b926      	cbnz	r6, 80031b6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80031b2:	f000 8105 	beq.w	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031b6:	4a0e      	ldr	r2, [pc, #56]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80031b8:	6813      	ldr	r3, [r2, #0]
 80031ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c0:	f7fe fd6a 	bl	8001c98 <HAL_GetTick>
 80031c4:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031c6:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80031ce:	d079      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031d0:	f7fe fd62 	bl	8001c98 <HAL_GetTick>
 80031d4:	1b80      	subs	r0, r0, r6
 80031d6:	2864      	cmp	r0, #100	; 0x64
 80031d8:	d9f5      	bls.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x282>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031da:	2003      	movs	r0, #3
 80031dc:	e0f3      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x482>
      plli2sused = 1;
 80031de:	2601      	movs	r6, #1
 80031e0:	e6c5      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 80031e2:	2601      	movs	r6, #1
 80031e4:	e6d5      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 80031e6:	2501      	movs	r5, #1
 80031e8:	e6d7      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 80031ea:	2601      	movs	r6, #1
 80031ec:	e6e7      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80031ee:	bf00      	nop
 80031f0:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 80031f4:	4b7f      	ldr	r3, [pc, #508]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80031f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003204:	9301      	str	r3, [sp, #4]
 8003206:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003208:	4a7b      	ldr	r2, [pc, #492]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 800320a:	6813      	ldr	r3, [r2, #0]
 800320c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003210:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003212:	f7fe fd41 	bl	8001c98 <HAL_GetTick>
 8003216:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003218:	4b77      	ldr	r3, [pc, #476]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003220:	d106      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003222:	f7fe fd39 	bl	8001c98 <HAL_GetTick>
 8003226:	1bc0      	subs	r0, r0, r7
 8003228:	2864      	cmp	r0, #100	; 0x64
 800322a:	d9f5      	bls.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        return HAL_TIMEOUT;
 800322c:	2003      	movs	r0, #3
 800322e:	e0ca      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x482>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003230:	4b70      	ldr	r3, [pc, #448]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003234:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003238:	d015      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x322>
 800323a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800323c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003240:	429a      	cmp	r2, r3
 8003242:	d010      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x322>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003244:	4b6b      	ldr	r3, [pc, #428]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003246:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003248:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800324c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800324e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003252:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003254:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003256:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800325a:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800325c:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	f013 0f01 	tst.w	r3, #1
 8003264:	d112      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x348>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003266:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003268:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800326c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003270:	d01d      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003272:	4a60      	ldr	r2, [pc, #384]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003274:	6893      	ldr	r3, [r2, #8]
 8003276:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800327a:	6093      	str	r3, [r2, #8]
 800327c:	495d      	ldr	r1, [pc, #372]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800327e:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8003280:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003282:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003286:	4313      	orrs	r3, r2
 8003288:	670b      	str	r3, [r1, #112]	; 0x70
 800328a:	e6a3      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 800328c:	f7fe fd04 	bl	8001c98 <HAL_GetTick>
 8003290:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003292:	4b58      	ldr	r3, [pc, #352]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003296:	f013 0f02 	tst.w	r3, #2
 800329a:	d1e4      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x322>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800329c:	f7fe fcfc 	bl	8001c98 <HAL_GetTick>
 80032a0:	1bc0      	subs	r0, r0, r7
 80032a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80032a6:	4298      	cmp	r0, r3
 80032a8:	d9f3      	bls.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x34e>
            return HAL_TIMEOUT;
 80032aa:	2003      	movs	r0, #3
 80032ac:	e08b      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x482>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ae:	4851      	ldr	r0, [pc, #324]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80032b0:	6882      	ldr	r2, [r0, #8]
 80032b2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80032b6:	4951      	ldr	r1, [pc, #324]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 80032b8:	4019      	ands	r1, r3
 80032ba:	430a      	orrs	r2, r1
 80032bc:	6082      	str	r2, [r0, #8]
 80032be:	e7dd      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x338>
      pllsaiused = 1;
 80032c0:	2501      	movs	r5, #1
 80032c2:	e753      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x228>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	f013 0f01 	tst.w	r3, #1
 80032ca:	d013      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80032cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032ce:	b98b      	cbnz	r3, 80032f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032d0:	4a48      	ldr	r2, [pc, #288]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80032d2:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032d6:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80032da:	6860      	ldr	r0, [r4, #4]
 80032dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032e0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80032e4:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80032e8:	430b      	orrs	r3, r1
 80032ea:	68a1      	ldr	r1, [r4, #8]
 80032ec:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80032f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032f4:	6823      	ldr	r3, [r4, #0]
 80032f6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80032fa:	d003      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80032fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80032fe:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003302:	d006      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003304:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003308:	d01e      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x404>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800330a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800330c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003310:	d11a      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x404>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003312:	4a38      	ldr	r2, [pc, #224]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003314:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003318:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800331c:	6860      	ldr	r0, [r4, #4]
 800331e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003322:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003326:	68e0      	ldr	r0, [r4, #12]
 8003328:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800332c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003330:	430b      	orrs	r3, r1
 8003332:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003336:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800333a:	f023 031f 	bic.w	r3, r3, #31
 800333e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003340:	3901      	subs	r1, #1
 8003342:	430b      	orrs	r3, r1
 8003344:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800334e:	d011      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003350:	4a28      	ldr	r2, [pc, #160]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003352:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003356:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800335a:	6866      	ldr	r6, [r4, #4]
 800335c:	6923      	ldr	r3, [r4, #16]
 800335e:	041b      	lsls	r3, r3, #16
 8003360:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8003364:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8003368:	4303      	orrs	r3, r0
 800336a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800336e:	430b      	orrs	r3, r1
 8003370:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003374:	6823      	ldr	r3, [r4, #0]
 8003376:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800337a:	d00d      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x454>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800337c:	6862      	ldr	r2, [r4, #4]
 800337e:	6923      	ldr	r3, [r4, #16]
 8003380:	041b      	lsls	r3, r3, #16
 8003382:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003386:	68e2      	ldr	r2, [r4, #12]
 8003388:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800338c:	68a2      	ldr	r2, [r4, #8]
 800338e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003392:	4a18      	ldr	r2, [pc, #96]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003394:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003398:	4a16      	ldr	r2, [pc, #88]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800339a:	6813      	ldr	r3, [r2, #0]
 800339c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a2:	f7fe fc79 	bl	8001c98 <HAL_GetTick>
 80033a6:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033a8:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80033b0:	d106      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033b2:	f7fe fc71 	bl	8001c98 <HAL_GetTick>
 80033b6:	1b80      	subs	r0, r0, r6
 80033b8:	2864      	cmp	r0, #100	; 0x64
 80033ba:	d9f5      	bls.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x464>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033bc:	2003      	movs	r0, #3
 80033be:	e002      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x482>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80033c0:	2d01      	cmp	r5, #1
 80033c2:	d002      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x486>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80033c4:	2000      	movs	r0, #0
}
 80033c6:	b003      	add	sp, #12
 80033c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 80033ca:	4a0a      	ldr	r2, [pc, #40]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80033cc:	6813      	ldr	r3, [r2, #0]
 80033ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80033d4:	f7fe fc60 	bl	8001c98 <HAL_GetTick>
 80033d8:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033da:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80033e2:	d00d      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033e4:	f7fe fc58 	bl	8001c98 <HAL_GetTick>
 80033e8:	1b40      	subs	r0, r0, r5
 80033ea:	2864      	cmp	r0, #100	; 0x64
 80033ec:	d9f5      	bls.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x496>
        return HAL_TIMEOUT;
 80033ee:	2003      	movs	r0, #3
 80033f0:	e7e9      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80033f2:	bf00      	nop
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40007000 	.word	0x40007000
 80033fc:	0ffffcff 	.word	0x0ffffcff
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003400:	6823      	ldr	r3, [r4, #0]
 8003402:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003406:	d001      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 8003408:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800340a:	b122      	cbz	r2, 8003416 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800340c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003410:	d01d      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x50a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003412:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003414:	b9db      	cbnz	r3, 800344e <HAL_RCCEx_PeriphCLKConfig+0x50a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003416:	4a35      	ldr	r2, [pc, #212]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8003418:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800341c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003420:	6960      	ldr	r0, [r4, #20]
 8003422:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003426:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800342a:	69a0      	ldr	r0, [r4, #24]
 800342c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003430:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003434:	430b      	orrs	r3, r1
 8003436:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800343a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800343e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003442:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003444:	3901      	subs	r1, #1
 8003446:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800344a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003454:	d003      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003456:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800345c:	d031      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800345e:	6823      	ldr	r3, [r4, #0]
 8003460:	f013 0f08 	tst.w	r3, #8
 8003464:	d019      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x556>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003466:	4a21      	ldr	r2, [pc, #132]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8003468:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800346c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003470:	6960      	ldr	r0, [r4, #20]
 8003472:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003476:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800347a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800347e:	430b      	orrs	r3, r1
 8003480:	69e1      	ldr	r1, [r4, #28]
 8003482:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003486:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800348a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800348e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003492:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003494:	430b      	orrs	r3, r1
 8003496:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800349a:	4a14      	ldr	r2, [pc, #80]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 800349c:	6813      	ldr	r3, [r2, #0]
 800349e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80034a4:	f7fe fbf8 	bl	8001c98 <HAL_GetTick>
 80034a8:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034aa:	4b10      	ldr	r3, [pc, #64]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80034b2:	d119      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034b4:	f7fe fbf0 	bl	8001c98 <HAL_GetTick>
 80034b8:	1b00      	subs	r0, r0, r4
 80034ba:	2864      	cmp	r0, #100	; 0x64
 80034bc:	d9f5      	bls.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x566>
        return HAL_TIMEOUT;
 80034be:	2003      	movs	r0, #3
 80034c0:	e781      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x482>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034c2:	4a0a      	ldr	r2, [pc, #40]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 80034c4:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034c8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80034cc:	6965      	ldr	r5, [r4, #20]
 80034ce:	6a23      	ldr	r3, [r4, #32]
 80034d0:	041b      	lsls	r3, r3, #16
 80034d2:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80034d6:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80034da:	4303      	orrs	r3, r0
 80034dc:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80034e0:	430b      	orrs	r3, r1
 80034e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80034e6:	e7ba      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x51a>
  return HAL_OK;
 80034e8:	2000      	movs	r0, #0
 80034ea:	e76c      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80034ec:	40023800 	.word	0x40023800

080034f0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80034f0:	b538      	push	{r3, r4, r5, lr}
 80034f2:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80034f4:	6802      	ldr	r2, [r0, #0]
 80034f6:	68d3      	ldr	r3, [r2, #12]
 80034f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034fc:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034fe:	f7fe fbcb 	bl	8001c98 <HAL_GetTick>
 8003502:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f013 0f20 	tst.w	r3, #32
 800350c:	d107      	bne.n	800351e <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800350e:	f7fe fbc3 	bl	8001c98 <HAL_GetTick>
 8003512:	1b40      	subs	r0, r0, r5
 8003514:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003518:	d9f4      	bls.n	8003504 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 800351a:	2003      	movs	r0, #3
 800351c:	e000      	b.n	8003520 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 800351e:	2000      	movs	r0, #0
}
 8003520:	bd38      	pop	{r3, r4, r5, pc}

08003522 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003522:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003524:	6803      	ldr	r3, [r0, #0]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	f012 0f40 	tst.w	r2, #64	; 0x40
 800352c:	d001      	beq.n	8003532 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800352e:	2000      	movs	r0, #0
}
 8003530:	bd38      	pop	{r3, r4, r5, pc}
 8003532:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003534:	f04f 32ff 	mov.w	r2, #4294967295
 8003538:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800353a:	f7fe fbad 	bl	8001c98 <HAL_GetTick>
 800353e:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003540:	6823      	ldr	r3, [r4, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003548:	d107      	bne.n	800355a <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800354a:	f7fe fba5 	bl	8001c98 <HAL_GetTick>
 800354e:	1b43      	subs	r3, r0, r5
 8003550:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003554:	d9f4      	bls.n	8003540 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8003556:	2003      	movs	r0, #3
 8003558:	e7ea      	b.n	8003530 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 800355a:	2000      	movs	r0, #0
 800355c:	e7e8      	b.n	8003530 <RTC_EnterInitMode+0xe>
	...

08003560 <HAL_RTC_Init>:
{
 8003560:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8003562:	2800      	cmp	r0, #0
 8003564:	d05a      	beq.n	800361c <HAL_RTC_Init+0xbc>
 8003566:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003568:	7f43      	ldrb	r3, [r0, #29]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d03f      	beq.n	80035ee <HAL_RTC_Init+0x8e>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800356e:	2302      	movs	r3, #2
 8003570:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003572:	6823      	ldr	r3, [r4, #0]
 8003574:	22ca      	movs	r2, #202	; 0xca
 8003576:	625a      	str	r2, [r3, #36]	; 0x24
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	2253      	movs	r2, #83	; 0x53
 800357c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800357e:	4620      	mov	r0, r4
 8003580:	f7ff ffcf 	bl	8003522 <RTC_EnterInitMode>
 8003584:	4605      	mov	r5, r0
 8003586:	2800      	cmp	r0, #0
 8003588:	d135      	bne.n	80035f6 <HAL_RTC_Init+0x96>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800358a:	6822      	ldr	r2, [r4, #0]
 800358c:	6891      	ldr	r1, [r2, #8]
 800358e:	4b24      	ldr	r3, [pc, #144]	; (8003620 <HAL_RTC_Init+0xc0>)
 8003590:	400b      	ands	r3, r1
 8003592:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003594:	6821      	ldr	r1, [r4, #0]
 8003596:	688a      	ldr	r2, [r1, #8]
 8003598:	6863      	ldr	r3, [r4, #4]
 800359a:	6920      	ldr	r0, [r4, #16]
 800359c:	4303      	orrs	r3, r0
 800359e:	6960      	ldr	r0, [r4, #20]
 80035a0:	4303      	orrs	r3, r0
 80035a2:	4313      	orrs	r3, r2
 80035a4:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	68e2      	ldr	r2, [r4, #12]
 80035aa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80035ac:	6822      	ldr	r2, [r4, #0]
 80035ae:	6913      	ldr	r3, [r2, #16]
 80035b0:	68a1      	ldr	r1, [r4, #8]
 80035b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80035b6:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80035b8:	6822      	ldr	r2, [r4, #0]
 80035ba:	68d3      	ldr	r3, [r2, #12]
 80035bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035c0:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f013 0f20 	tst.w	r3, #32
 80035ca:	d01b      	beq.n	8003604 <HAL_RTC_Init+0xa4>
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80035cc:	6822      	ldr	r2, [r4, #0]
 80035ce:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80035d0:	f023 0308 	bic.w	r3, r3, #8
 80035d4:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80035d6:	6822      	ldr	r2, [r4, #0]
 80035d8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80035da:	69a1      	ldr	r1, [r4, #24]
 80035dc:	430b      	orrs	r3, r1
 80035de:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	22ff      	movs	r2, #255	; 0xff
 80035e4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80035e6:	2301      	movs	r3, #1
 80035e8:	7763      	strb	r3, [r4, #29]
}
 80035ea:	4628      	mov	r0, r5
 80035ec:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80035ee:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80035f0:	f7fe fa8c 	bl	8001b0c <HAL_RTC_MspInit>
 80035f4:	e7bb      	b.n	800356e <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035f6:	6823      	ldr	r3, [r4, #0]
 80035f8:	22ff      	movs	r2, #255	; 0xff
 80035fa:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80035fc:	2304      	movs	r3, #4
 80035fe:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8003600:	2501      	movs	r5, #1
 8003602:	e7f2      	b.n	80035ea <HAL_RTC_Init+0x8a>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003604:	4620      	mov	r0, r4
 8003606:	f7ff ff73 	bl	80034f0 <HAL_RTC_WaitForSynchro>
 800360a:	2800      	cmp	r0, #0
 800360c:	d0de      	beq.n	80035cc <HAL_RTC_Init+0x6c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800360e:	6823      	ldr	r3, [r4, #0]
 8003610:	22ff      	movs	r2, #255	; 0xff
 8003612:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003614:	2304      	movs	r3, #4
 8003616:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8003618:	2501      	movs	r5, #1
 800361a:	e7e6      	b.n	80035ea <HAL_RTC_Init+0x8a>
     return HAL_ERROR;
 800361c:	2501      	movs	r5, #1
 800361e:	e7e4      	b.n	80035ea <HAL_RTC_Init+0x8a>
 8003620:	ff8fffbf 	.word	0xff8fffbf

08003624 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8003624:	2300      	movs	r3, #0

  while(Value >= 10)
 8003626:	e002      	b.n	800362e <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8003628:	3301      	adds	r3, #1
    Value -= 10;
 800362a:	380a      	subs	r0, #10
 800362c:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 800362e:	2809      	cmp	r0, #9
 8003630:	d8fa      	bhi.n	8003628 <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	b2db      	uxtb	r3, r3
}
 8003636:	4318      	orrs	r0, r3
 8003638:	4770      	bx	lr
	...

0800363c <HAL_RTC_SetTime>:
{
 800363c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800363e:	7f03      	ldrb	r3, [r0, #28]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d076      	beq.n	8003732 <HAL_RTC_SetTime+0xf6>
 8003644:	4604      	mov	r4, r0
 8003646:	460e      	mov	r6, r1
 8003648:	2301      	movs	r3, #1
 800364a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800364c:	2302      	movs	r3, #2
 800364e:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8003650:	2a00      	cmp	r2, #0
 8003652:	d145      	bne.n	80036e0 <HAL_RTC_SetTime+0xa4>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003654:	6803      	ldr	r3, [r0, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f013 0f40 	tst.w	r3, #64	; 0x40
 800365c:	d101      	bne.n	8003662 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 800365e:	2300      	movs	r3, #0
 8003660:	730b      	strb	r3, [r1, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8003662:	7830      	ldrb	r0, [r6, #0]
 8003664:	f7ff ffde 	bl	8003624 <RTC_ByteToBcd2>
 8003668:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800366a:	7870      	ldrb	r0, [r6, #1]
 800366c:	f7ff ffda 	bl	8003624 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8003670:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003674:	78b0      	ldrb	r0, [r6, #2]
 8003676:	f7ff ffd5 	bl	8003624 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800367a:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16));
 800367c:	7b30      	ldrb	r0, [r6, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800367e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003682:	6823      	ldr	r3, [r4, #0]
 8003684:	22ca      	movs	r2, #202	; 0xca
 8003686:	625a      	str	r2, [r3, #36]	; 0x24
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	2253      	movs	r2, #83	; 0x53
 800368c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800368e:	4620      	mov	r0, r4
 8003690:	f7ff ff47 	bl	8003522 <RTC_EnterInitMode>
 8003694:	4607      	mov	r7, r0
 8003696:	2800      	cmp	r0, #0
 8003698:	d134      	bne.n	8003704 <HAL_RTC_SetTime+0xc8>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800369a:	6822      	ldr	r2, [r4, #0]
 800369c:	4b26      	ldr	r3, [pc, #152]	; (8003738 <HAL_RTC_SetTime+0xfc>)
 800369e:	402b      	ands	r3, r5
 80036a0:	6013      	str	r3, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80036a2:	6822      	ldr	r2, [r4, #0]
 80036a4:	6893      	ldr	r3, [r2, #8]
 80036a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036aa:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80036ac:	6821      	ldr	r1, [r4, #0]
 80036ae:	688b      	ldr	r3, [r1, #8]
 80036b0:	6932      	ldr	r2, [r6, #16]
 80036b2:	6970      	ldr	r0, [r6, #20]
 80036b4:	4302      	orrs	r2, r0
 80036b6:	4313      	orrs	r3, r2
 80036b8:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80036ba:	6822      	ldr	r2, [r4, #0]
 80036bc:	68d3      	ldr	r3, [r2, #12]
 80036be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036c2:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f013 0f20 	tst.w	r3, #32
 80036cc:	d023      	beq.n	8003716 <HAL_RTC_SetTime+0xda>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	22ff      	movs	r2, #255	; 0xff
 80036d2:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80036d4:	2301      	movs	r3, #1
 80036d6:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 80036d8:	2300      	movs	r3, #0
 80036da:	7723      	strb	r3, [r4, #28]
}
 80036dc:	4638      	mov	r0, r7
 80036de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80036e0:	6803      	ldr	r3, [r0, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80036e8:	d101      	bne.n	80036ee <HAL_RTC_SetTime+0xb2>
      sTime->TimeFormat = 0x00;
 80036ea:	2300      	movs	r3, #0
 80036ec:	730b      	strb	r3, [r1, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80036ee:	7833      	ldrb	r3, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80036f0:	7875      	ldrb	r5, [r6, #1]
 80036f2:	022d      	lsls	r5, r5, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80036f4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t)sTime->Seconds) | \
 80036f8:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80036fa:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));
 80036fc:	7b30      	ldrb	r0, [r6, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80036fe:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8003702:	e7be      	b.n	8003682 <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003704:	6823      	ldr	r3, [r4, #0]
 8003706:	22ff      	movs	r2, #255	; 0xff
 8003708:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800370a:	2304      	movs	r3, #4
 800370c:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800370e:	2300      	movs	r3, #0
 8003710:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8003712:	2701      	movs	r7, #1
 8003714:	e7e2      	b.n	80036dc <HAL_RTC_SetTime+0xa0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003716:	4620      	mov	r0, r4
 8003718:	f7ff feea 	bl	80034f0 <HAL_RTC_WaitForSynchro>
 800371c:	2800      	cmp	r0, #0
 800371e:	d0d6      	beq.n	80036ce <HAL_RTC_SetTime+0x92>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	22ff      	movs	r2, #255	; 0xff
 8003724:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003726:	2304      	movs	r3, #4
 8003728:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800372a:	2300      	movs	r3, #0
 800372c:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 800372e:	2701      	movs	r7, #1
 8003730:	e7d4      	b.n	80036dc <HAL_RTC_SetTime+0xa0>
  __HAL_LOCK(hrtc);
 8003732:	2702      	movs	r7, #2
 8003734:	e7d2      	b.n	80036dc <HAL_RTC_SetTime+0xa0>
 8003736:	bf00      	nop
 8003738:	007f7f7f 	.word	0x007f7f7f

0800373c <HAL_RTC_SetDate>:
{
 800373c:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 800373e:	7f03      	ldrb	r3, [r0, #28]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d064      	beq.n	800380e <HAL_RTC_SetDate+0xd2>
 8003744:	4604      	mov	r4, r0
 8003746:	460e      	mov	r6, r1
 8003748:	2301      	movs	r3, #1
 800374a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800374c:	2302      	movs	r3, #2
 800374e:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003750:	b93a      	cbnz	r2, 8003762 <HAL_RTC_SetDate+0x26>
 8003752:	784b      	ldrb	r3, [r1, #1]
 8003754:	f013 0f10 	tst.w	r3, #16
 8003758:	d003      	beq.n	8003762 <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800375a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800375e:	330a      	adds	r3, #10
 8003760:	704b      	strb	r3, [r1, #1]
  if(Format == RTC_FORMAT_BIN)
 8003762:	2a00      	cmp	r2, #0
 8003764:	d131      	bne.n	80037ca <HAL_RTC_SetDate+0x8e>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003766:	78f0      	ldrb	r0, [r6, #3]
 8003768:	f7ff ff5c 	bl	8003624 <RTC_ByteToBcd2>
 800376c:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800376e:	7870      	ldrb	r0, [r6, #1]
 8003770:	f7ff ff58 	bl	8003624 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003774:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003778:	78b0      	ldrb	r0, [r6, #2]
 800377a:	f7ff ff53 	bl	8003624 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800377e:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13));
 8003780:	7830      	ldrb	r0, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003782:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	22ca      	movs	r2, #202	; 0xca
 800378a:	625a      	str	r2, [r3, #36]	; 0x24
 800378c:	6823      	ldr	r3, [r4, #0]
 800378e:	2253      	movs	r2, #83	; 0x53
 8003790:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003792:	4620      	mov	r0, r4
 8003794:	f7ff fec5 	bl	8003522 <RTC_EnterInitMode>
 8003798:	4606      	mov	r6, r0
 800379a:	bb08      	cbnz	r0, 80037e0 <HAL_RTC_SetDate+0xa4>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800379c:	6822      	ldr	r2, [r4, #0]
 800379e:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <HAL_RTC_SetDate+0xd8>)
 80037a0:	402b      	ands	r3, r5
 80037a2:	6053      	str	r3, [r2, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80037a4:	6822      	ldr	r2, [r4, #0]
 80037a6:	68d3      	ldr	r3, [r2, #12]
 80037a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ac:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f013 0f20 	tst.w	r3, #32
 80037b6:	d01c      	beq.n	80037f2 <HAL_RTC_SetDate+0xb6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037b8:	6823      	ldr	r3, [r4, #0]
 80037ba:	22ff      	movs	r2, #255	; 0xff
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80037be:	2301      	movs	r3, #1
 80037c0:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80037c2:	2300      	movs	r3, #0
 80037c4:	7723      	strb	r3, [r4, #28]
}
 80037c6:	4630      	mov	r0, r6
 80037c8:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80037ca:	78f3      	ldrb	r3, [r6, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 80037cc:	7875      	ldrb	r5, [r6, #1]
 80037ce:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80037d0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  ((uint32_t)sDate->Date) | \
 80037d4:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80037d6:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));
 80037d8:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80037da:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
 80037de:	e7d2      	b.n	8003786 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	22ff      	movs	r2, #255	; 0xff
 80037e4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80037e6:	2304      	movs	r3, #4
 80037e8:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80037ea:	2300      	movs	r3, #0
 80037ec:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80037ee:	2601      	movs	r6, #1
 80037f0:	e7e9      	b.n	80037c6 <HAL_RTC_SetDate+0x8a>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037f2:	4620      	mov	r0, r4
 80037f4:	f7ff fe7c 	bl	80034f0 <HAL_RTC_WaitForSynchro>
 80037f8:	2800      	cmp	r0, #0
 80037fa:	d0dd      	beq.n	80037b8 <HAL_RTC_SetDate+0x7c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037fc:	6823      	ldr	r3, [r4, #0]
 80037fe:	22ff      	movs	r2, #255	; 0xff
 8003800:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003802:	2304      	movs	r3, #4
 8003804:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8003806:	2300      	movs	r3, #0
 8003808:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 800380a:	2601      	movs	r6, #1
 800380c:	e7db      	b.n	80037c6 <HAL_RTC_SetDate+0x8a>
 __HAL_LOCK(hrtc);
 800380e:	2602      	movs	r6, #2
 8003810:	e7d9      	b.n	80037c6 <HAL_RTC_SetDate+0x8a>
 8003812:	bf00      	nop
 8003814:	00ffff3f 	.word	0x00ffff3f

08003818 <HAL_RTC_SetAlarm>:
{
 8003818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800381a:	7f03      	ldrb	r3, [r0, #28]
 800381c:	2b01      	cmp	r3, #1
 800381e:	f000 80a9 	beq.w	8003974 <HAL_RTC_SetAlarm+0x15c>
 8003822:	4604      	mov	r4, r0
 8003824:	460d      	mov	r5, r1
 8003826:	2301      	movs	r3, #1
 8003828:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800382a:	2302      	movs	r3, #2
 800382c:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 800382e:	2a00      	cmp	r2, #0
 8003830:	d14d      	bne.n	80038ce <HAL_RTC_SetAlarm+0xb6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003832:	6803      	ldr	r3, [r0, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f013 0f40 	tst.w	r3, #64	; 0x40
 800383a:	d101      	bne.n	8003840 <HAL_RTC_SetAlarm+0x28>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800383c:	2300      	movs	r3, #0
 800383e:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8003840:	6a2e      	ldr	r6, [r5, #32]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8003842:	7828      	ldrb	r0, [r5, #0]
 8003844:	f7ff feee 	bl	8003624 <RTC_ByteToBcd2>
 8003848:	0407      	lsls	r7, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800384a:	7868      	ldrb	r0, [r5, #1]
 800384c:	f7ff feea 	bl	8003624 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8003850:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003854:	78a8      	ldrb	r0, [r5, #2]
 8003856:	f7ff fee5 	bl	8003624 <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800385a:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800385c:	7b28      	ldrb	r0, [r5, #12]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800385e:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8003862:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 8003866:	f7ff fedd 	bl	8003624 <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800386a:	ea47 6700 	orr.w	r7, r7, r0, lsl #24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800386e:	433e      	orrs	r6, r7
              ((uint32_t)sAlarm->AlarmMask));
 8003870:	69ab      	ldr	r3, [r5, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8003872:	431e      	orrs	r6, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003874:	686f      	ldr	r7, [r5, #4]
 8003876:	69eb      	ldr	r3, [r5, #28]
 8003878:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	22ca      	movs	r2, #202	; 0xca
 800387e:	625a      	str	r2, [r3, #36]	; 0x24
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	2253      	movs	r2, #83	; 0x53
 8003884:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003886:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800388c:	d039      	beq.n	8003902 <HAL_RTC_SetAlarm+0xea>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800388e:	6822      	ldr	r2, [r4, #0]
 8003890:	6893      	ldr	r3, [r2, #8]
 8003892:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003896:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003898:	6822      	ldr	r2, [r4, #0]
 800389a:	6893      	ldr	r3, [r2, #8]
 800389c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038a0:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80038a2:	f7fe f9f9 	bl	8001c98 <HAL_GetTick>
 80038a6:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	f012 0f02 	tst.w	r2, #2
 80038b0:	d150      	bne.n	8003954 <HAL_RTC_SetAlarm+0x13c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80038b2:	f7fe f9f1 	bl	8001c98 <HAL_GetTick>
 80038b6:	1b40      	subs	r0, r0, r5
 80038b8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80038bc:	d9f4      	bls.n	80038a8 <HAL_RTC_SetAlarm+0x90>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	22ff      	movs	r2, #255	; 0xff
 80038c2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038c4:	2003      	movs	r0, #3
 80038c6:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80038c8:	2300      	movs	r3, #0
 80038ca:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 80038cc:	e051      	b.n	8003972 <HAL_RTC_SetAlarm+0x15a>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80038ce:	6803      	ldr	r3, [r0, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80038d6:	d101      	bne.n	80038dc <HAL_RTC_SetAlarm+0xc4>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80038d8:	2300      	movs	r3, #0
 80038da:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80038dc:	6a2e      	ldr	r6, [r5, #32]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80038de:	782a      	ldrb	r2, [r5, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80038e0:	786b      	ldrb	r3, [r5, #1]
 80038e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80038e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80038e8:	78aa      	ldrb	r2, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80038ea:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80038ec:	7b2a      	ldrb	r2, [r5, #12]
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80038ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80038f2:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80038f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80038fa:	431e      	orrs	r6, r3
              ((uint32_t)sAlarm->AlarmMask));
 80038fc:	69ab      	ldr	r3, [r5, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80038fe:	431e      	orrs	r6, r3
 8003900:	e7b8      	b.n	8003874 <HAL_RTC_SetAlarm+0x5c>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003902:	6822      	ldr	r2, [r4, #0]
 8003904:	6893      	ldr	r3, [r2, #8]
 8003906:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800390a:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800390c:	6822      	ldr	r2, [r4, #0]
 800390e:	6893      	ldr	r3, [r2, #8]
 8003910:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003914:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003916:	f7fe f9bf 	bl	8001c98 <HAL_GetTick>
 800391a:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	f012 0f01 	tst.w	r2, #1
 8003924:	d10d      	bne.n	8003942 <HAL_RTC_SetAlarm+0x12a>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003926:	f7fe f9b7 	bl	8001c98 <HAL_GetTick>
 800392a:	1b40      	subs	r0, r0, r5
 800392c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003930:	d9f4      	bls.n	800391c <HAL_RTC_SetAlarm+0x104>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	22ff      	movs	r2, #255	; 0xff
 8003936:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003938:	2003      	movs	r0, #3
 800393a:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800393c:	2300      	movs	r3, #0
 800393e:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8003940:	e017      	b.n	8003972 <HAL_RTC_SetAlarm+0x15a>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003942:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003948:	6822      	ldr	r2, [r4, #0]
 800394a:	6893      	ldr	r3, [r2, #8]
 800394c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003950:	6093      	str	r3, [r2, #8]
 8003952:	e007      	b.n	8003964 <HAL_RTC_SetAlarm+0x14c>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003954:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800395a:	6822      	ldr	r2, [r4, #0]
 800395c:	6893      	ldr	r3, [r2, #8]
 800395e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003962:	6093      	str	r3, [r2, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	22ff      	movs	r2, #255	; 0xff
 8003968:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800396a:	2301      	movs	r3, #1
 800396c:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 800396e:	2000      	movs	r0, #0
 8003970:	7720      	strb	r0, [r4, #28]
}
 8003972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8003974:	2002      	movs	r0, #2
 8003976:	e7fc      	b.n	8003972 <HAL_RTC_SetAlarm+0x15a>

08003978 <HAL_RTCEx_SetTimeStamp>:
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003978:	7f03      	ldrb	r3, [r0, #28]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d02b      	beq.n	80039d6 <HAL_RTCEx_SetTimeStamp+0x5e>
{
 800397e:	b430      	push	{r4, r5}
  __HAL_LOCK(hrtc);
 8003980:	f04f 0c01 	mov.w	ip, #1
 8003984:	f880 c01c 	strb.w	ip, [r0, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003988:	2302      	movs	r3, #2
 800398a:	7743      	strb	r3, [r0, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800398c:	6804      	ldr	r4, [r0, #0]
 800398e:	68a5      	ldr	r5, [r4, #8]
 8003990:	f6a3 030b 	subw	r3, r3, #2059	; 0x80b
 8003994:	402b      	ands	r3, r5

  tmpreg|= TimeStampEdge;
 8003996:	4319      	orrs	r1, r3

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003998:	23ca      	movs	r3, #202	; 0xca
 800399a:	6263      	str	r3, [r4, #36]	; 0x24
 800399c:	6803      	ldr	r3, [r0, #0]
 800399e:	2453      	movs	r4, #83	; 0x53
 80039a0:	625c      	str	r4, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80039a2:	6804      	ldr	r4, [r0, #0]
 80039a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80039a6:	f023 0306 	bic.w	r3, r3, #6
 80039aa:	64e3      	str	r3, [r4, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80039ac:	6804      	ldr	r4, [r0, #0]
 80039ae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80039b0:	431a      	orrs	r2, r3
 80039b2:	64e2      	str	r2, [r4, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80039b4:	6803      	ldr	r3, [r0, #0]
 80039b6:	6099      	str	r1, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80039b8:	6802      	ldr	r2, [r0, #0]
 80039ba:	6893      	ldr	r3, [r2, #8]
 80039bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039c0:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039c2:	6803      	ldr	r3, [r0, #0]
 80039c4:	22ff      	movs	r2, #255	; 0xff
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80039c8:	f880 c01d 	strb.w	ip, [r0, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80039cc:	2300      	movs	r3, #0
 80039ce:	7703      	strb	r3, [r0, #28]

  return HAL_OK;
 80039d0:	4618      	mov	r0, r3
}
 80039d2:	bc30      	pop	{r4, r5}
 80039d4:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80039d6:	2002      	movs	r0, #2
}
 80039d8:	4770      	bx	lr

080039da <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80039da:	b1e0      	cbz	r0, 8003a16 <HAL_SDRAM_Init+0x3c>
{   
 80039dc:	b538      	push	{r3, r4, r5, lr}
 80039de:	460d      	mov	r5, r1
 80039e0:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80039e2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80039e6:	b18b      	cbz	r3, 8003a0c <HAL_SDRAM_Init+0x32>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80039e8:	2302      	movs	r3, #2
 80039ea:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80039ee:	4621      	mov	r1, r4
 80039f0:	f851 0b04 	ldr.w	r0, [r1], #4
 80039f4:	f000 f9e8 	bl	8003dc8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80039f8:	6862      	ldr	r2, [r4, #4]
 80039fa:	4629      	mov	r1, r5
 80039fc:	6820      	ldr	r0, [r4, #0]
 80039fe:	f000 fa1d 	bl	8003e3c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003a02:	2301      	movs	r3, #1
 8003a04:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8003a08:	2000      	movs	r0, #0
}
 8003a0a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8003a0c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8003a10:	f7fe f88c 	bl	8001b2c <HAL_SDRAM_MspInit>
 8003a14:	e7e8      	b.n	80039e8 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8003a16:	2001      	movs	r0, #1
}
 8003a18:	4770      	bx	lr

08003a1a <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a1a:	4770      	bx	lr

08003a1c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a1c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d13a      	bne.n	8003a9c <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a26:	2302      	movs	r3, #2
 8003a28:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a2c:	6802      	ldr	r2, [r0, #0]
 8003a2e:	68d3      	ldr	r3, [r2, #12]
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a36:	6803      	ldr	r3, [r0, #0]
 8003a38:	4a1a      	ldr	r2, [pc, #104]	; (8003aa4 <HAL_TIM_Base_Start_IT+0x88>)
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3e:	bf18      	it	ne
 8003a40:	4293      	cmpne	r3, r2
 8003a42:	d01d      	beq.n	8003a80 <HAL_TIM_Base_Start_IT+0x64>
 8003a44:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d019      	beq.n	8003a80 <HAL_TIM_Base_Start_IT+0x64>
 8003a4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d015      	beq.n	8003a80 <HAL_TIM_Base_Start_IT+0x64>
 8003a54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d011      	beq.n	8003a80 <HAL_TIM_Base_Start_IT+0x64>
 8003a5c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00d      	beq.n	8003a80 <HAL_TIM_Base_Start_IT+0x64>
 8003a64:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d009      	beq.n	8003a80 <HAL_TIM_Base_Start_IT+0x64>
 8003a6c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d005      	beq.n	8003a80 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a80:	6899      	ldr	r1, [r3, #8]
 8003a82:	4a09      	ldr	r2, [pc, #36]	; (8003aa8 <HAL_TIM_Base_Start_IT+0x8c>)
 8003a84:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a86:	2a06      	cmp	r2, #6
 8003a88:	bf18      	it	ne
 8003a8a:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 8003a8e:	d007      	beq.n	8003aa0 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003a98:	2000      	movs	r0, #0
 8003a9a:	4770      	bx	lr
    return HAL_ERROR;
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	4770      	bx	lr
  return HAL_OK;
 8003aa0:	2000      	movs	r0, #0
}
 8003aa2:	4770      	bx	lr
 8003aa4:	40010000 	.word	0x40010000
 8003aa8:	00010007 	.word	0x00010007

08003aac <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003aac:	4770      	bx	lr

08003aae <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aae:	4770      	bx	lr

08003ab0 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ab0:	4770      	bx	lr

08003ab2 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_TIM_IRQHandler>:
{
 8003ab4:	b510      	push	{r4, lr}
 8003ab6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ab8:	6803      	ldr	r3, [r0, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	f012 0f02 	tst.w	r2, #2
 8003ac0:	d011      	beq.n	8003ae6 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	f012 0f02 	tst.w	r2, #2
 8003ac8:	d00d      	beq.n	8003ae6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aca:	f06f 0202 	mvn.w	r2, #2
 8003ace:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ad4:	6803      	ldr	r3, [r0, #0]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	f013 0f03 	tst.w	r3, #3
 8003adc:	d079      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003ade:	f7ff ffe6 	bl	8003aae <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	691a      	ldr	r2, [r3, #16]
 8003aea:	f012 0f04 	tst.w	r2, #4
 8003aee:	d012      	beq.n	8003b16 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	f012 0f04 	tst.w	r2, #4
 8003af6:	d00e      	beq.n	8003b16 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003af8:	f06f 0204 	mvn.w	r2, #4
 8003afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003afe:	2302      	movs	r3, #2
 8003b00:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003b0a:	d068      	beq.n	8003bde <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	f7ff ffce 	bl	8003aae <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b12:	2300      	movs	r3, #0
 8003b14:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	f012 0f08 	tst.w	r2, #8
 8003b1e:	d012      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	f012 0f08 	tst.w	r2, #8
 8003b26:	d00e      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b28:	f06f 0208 	mvn.w	r2, #8
 8003b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b2e:	2304      	movs	r3, #4
 8003b30:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f013 0f03 	tst.w	r3, #3
 8003b3a:	d057      	beq.n	8003bec <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	f7ff ffb6 	bl	8003aae <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b42:	2300      	movs	r3, #0
 8003b44:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	691a      	ldr	r2, [r3, #16]
 8003b4a:	f012 0f10 	tst.w	r2, #16
 8003b4e:	d012      	beq.n	8003b76 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	f012 0f10 	tst.w	r2, #16
 8003b56:	d00e      	beq.n	8003b76 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b58:	f06f 0210 	mvn.w	r2, #16
 8003b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b5e:	2308      	movs	r3, #8
 8003b60:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b62:	6823      	ldr	r3, [r4, #0]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003b6a:	d046      	beq.n	8003bfa <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	f7ff ff9e 	bl	8003aae <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b72:	2300      	movs	r3, #0
 8003b74:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b76:	6823      	ldr	r3, [r4, #0]
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	f012 0f01 	tst.w	r2, #1
 8003b7e:	d003      	beq.n	8003b88 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	f012 0f01 	tst.w	r2, #1
 8003b86:	d13f      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003b90:	d003      	beq.n	8003b9a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003b98:	d13d      	bne.n	8003c16 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	691a      	ldr	r2, [r3, #16]
 8003b9e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003ba2:	d003      	beq.n	8003bac <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003baa:	d13b      	bne.n	8003c24 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bac:	6823      	ldr	r3, [r4, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003bb4:	d003      	beq.n	8003bbe <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003bbc:	d139      	bne.n	8003c32 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bbe:	6823      	ldr	r3, [r4, #0]
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	f012 0f20 	tst.w	r2, #32
 8003bc6:	d003      	beq.n	8003bd0 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	f012 0f20 	tst.w	r2, #32
 8003bce:	d137      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x18c>
}
 8003bd0:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd2:	f7ff ff6b 	bl	8003aac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f7ff ff6a 	bl	8003ab0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003bdc:	e781      	b.n	8003ae2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bde:	4620      	mov	r0, r4
 8003be0:	f7ff ff64 	bl	8003aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be4:	4620      	mov	r0, r4
 8003be6:	f7ff ff63 	bl	8003ab0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003bea:	e792      	b.n	8003b12 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bec:	4620      	mov	r0, r4
 8003bee:	f7ff ff5d 	bl	8003aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f7ff ff5c 	bl	8003ab0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003bf8:	e7a3      	b.n	8003b42 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	f7ff ff56 	bl	8003aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c00:	4620      	mov	r0, r4
 8003c02:	f7ff ff55 	bl	8003ab0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c06:	e7b4      	b.n	8003b72 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c08:	f06f 0201 	mvn.w	r2, #1
 8003c0c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f7fd fc18 	bl	8001444 <HAL_TIM_PeriodElapsedCallback>
 8003c14:	e7b8      	b.n	8003b88 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c1a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	f000 f8d0 	bl	8003dc2 <HAL_TIMEx_BreakCallback>
 8003c22:	e7ba      	b.n	8003b9a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c24:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c28:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f000 f8ca 	bl	8003dc4 <HAL_TIMEx_Break2Callback>
 8003c30:	e7bc      	b.n	8003bac <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c36:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003c38:	4620      	mov	r0, r4
 8003c3a:	f7ff ff3a 	bl	8003ab2 <HAL_TIM_TriggerCallback>
 8003c3e:	e7be      	b.n	8003bbe <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c40:	f06f 0220 	mvn.w	r2, #32
 8003c44:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003c46:	4620      	mov	r0, r4
 8003c48:	f000 f8ba 	bl	8003dc0 <HAL_TIMEx_CommutCallback>
}
 8003c4c:	e7c0      	b.n	8003bd0 <HAL_TIM_IRQHandler+0x11c>
	...

08003c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c50:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c52:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c54:	4a3b      	ldr	r2, [pc, #236]	; (8003d44 <TIM_Base_SetConfig+0xf4>)
 8003c56:	4290      	cmp	r0, r2
 8003c58:	bf14      	ite	ne
 8003c5a:	f04f 0e00 	movne.w	lr, #0
 8003c5e:	f04f 0e01 	moveq.w	lr, #1
 8003c62:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003c66:	bf14      	ite	ne
 8003c68:	4672      	movne	r2, lr
 8003c6a:	f04e 0201 	orreq.w	r2, lr, #1
 8003c6e:	b9aa      	cbnz	r2, 8003c9c <TIM_Base_SetConfig+0x4c>
 8003c70:	4c35      	ldr	r4, [pc, #212]	; (8003d48 <TIM_Base_SetConfig+0xf8>)
 8003c72:	42a0      	cmp	r0, r4
 8003c74:	bf14      	ite	ne
 8003c76:	2400      	movne	r4, #0
 8003c78:	2401      	moveq	r4, #1
 8003c7a:	4d34      	ldr	r5, [pc, #208]	; (8003d4c <TIM_Base_SetConfig+0xfc>)
 8003c7c:	42a8      	cmp	r0, r5
 8003c7e:	d00d      	beq.n	8003c9c <TIM_Base_SetConfig+0x4c>
 8003c80:	b964      	cbnz	r4, 8003c9c <TIM_Base_SetConfig+0x4c>
 8003c82:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8003c86:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 8003c8a:	42a0      	cmp	r0, r4
 8003c8c:	bf14      	ite	ne
 8003c8e:	2400      	movne	r4, #0
 8003c90:	2401      	moveq	r4, #1
 8003c92:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003c96:	42a8      	cmp	r0, r5
 8003c98:	d000      	beq.n	8003c9c <TIM_Base_SetConfig+0x4c>
 8003c9a:	b11c      	cbz	r4, 8003ca4 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003ca0:	684c      	ldr	r4, [r1, #4]
 8003ca2:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ca4:	2a00      	cmp	r2, #0
 8003ca6:	d133      	bne.n	8003d10 <TIM_Base_SetConfig+0xc0>
 8003ca8:	4a27      	ldr	r2, [pc, #156]	; (8003d48 <TIM_Base_SetConfig+0xf8>)
 8003caa:	4290      	cmp	r0, r2
 8003cac:	bf14      	ite	ne
 8003cae:	2200      	movne	r2, #0
 8003cb0:	2201      	moveq	r2, #1
 8003cb2:	4c26      	ldr	r4, [pc, #152]	; (8003d4c <TIM_Base_SetConfig+0xfc>)
 8003cb4:	42a0      	cmp	r0, r4
 8003cb6:	d02b      	beq.n	8003d10 <TIM_Base_SetConfig+0xc0>
 8003cb8:	bb52      	cbnz	r2, 8003d10 <TIM_Base_SetConfig+0xc0>
 8003cba:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003cbe:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8003cc2:	4290      	cmp	r0, r2
 8003cc4:	bf14      	ite	ne
 8003cc6:	2200      	movne	r2, #0
 8003cc8:	2201      	moveq	r2, #1
 8003cca:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003cce:	42a0      	cmp	r0, r4
 8003cd0:	d01e      	beq.n	8003d10 <TIM_Base_SetConfig+0xc0>
 8003cd2:	b9ea      	cbnz	r2, 8003d10 <TIM_Base_SetConfig+0xc0>
 8003cd4:	4a1e      	ldr	r2, [pc, #120]	; (8003d50 <TIM_Base_SetConfig+0x100>)
 8003cd6:	4290      	cmp	r0, r2
 8003cd8:	bf14      	ite	ne
 8003cda:	2200      	movne	r2, #0
 8003cdc:	2201      	moveq	r2, #1
 8003cde:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8003ce2:	42a0      	cmp	r0, r4
 8003ce4:	d014      	beq.n	8003d10 <TIM_Base_SetConfig+0xc0>
 8003ce6:	b99a      	cbnz	r2, 8003d10 <TIM_Base_SetConfig+0xc0>
 8003ce8:	4a1a      	ldr	r2, [pc, #104]	; (8003d54 <TIM_Base_SetConfig+0x104>)
 8003cea:	4290      	cmp	r0, r2
 8003cec:	bf14      	ite	ne
 8003cee:	2200      	movne	r2, #0
 8003cf0:	2201      	moveq	r2, #1
 8003cf2:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003cf6:	42a0      	cmp	r0, r4
 8003cf8:	d00a      	beq.n	8003d10 <TIM_Base_SetConfig+0xc0>
 8003cfa:	b94a      	cbnz	r2, 8003d10 <TIM_Base_SetConfig+0xc0>
 8003cfc:	4a16      	ldr	r2, [pc, #88]	; (8003d58 <TIM_Base_SetConfig+0x108>)
 8003cfe:	4290      	cmp	r0, r2
 8003d00:	bf14      	ite	ne
 8003d02:	2200      	movne	r2, #0
 8003d04:	2201      	moveq	r2, #1
 8003d06:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
 8003d0a:	42a0      	cmp	r0, r4
 8003d0c:	d000      	beq.n	8003d10 <TIM_Base_SetConfig+0xc0>
 8003d0e:	b122      	cbz	r2, 8003d1a <TIM_Base_SetConfig+0xca>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d10:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d14:	68cb      	ldr	r3, [r1, #12]
 8003d16:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d1e:	694a      	ldr	r2, [r1, #20]
 8003d20:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003d22:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d24:	688a      	ldr	r2, [r1, #8]
 8003d26:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d28:	680a      	ldr	r2, [r1, #0]
 8003d2a:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d2c:	4a0b      	ldr	r2, [pc, #44]	; (8003d5c <TIM_Base_SetConfig+0x10c>)
 8003d2e:	4290      	cmp	r0, r2
 8003d30:	bf14      	ite	ne
 8003d32:	4673      	movne	r3, lr
 8003d34:	f04e 0301 	orreq.w	r3, lr, #1
 8003d38:	b10b      	cbz	r3, 8003d3e <TIM_Base_SetConfig+0xee>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d3a:	690b      	ldr	r3, [r1, #16]
 8003d3c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	6143      	str	r3, [r0, #20]
}
 8003d42:	bd30      	pop	{r4, r5, pc}
 8003d44:	40010000 	.word	0x40010000
 8003d48:	40000800 	.word	0x40000800
 8003d4c:	40000400 	.word	0x40000400
 8003d50:	40014400 	.word	0x40014400
 8003d54:	40001800 	.word	0x40001800
 8003d58:	40002000 	.word	0x40002000
 8003d5c:	40010400 	.word	0x40010400

08003d60 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003d60:	b360      	cbz	r0, 8003dbc <HAL_TIM_Base_Init+0x5c>
{
 8003d62:	b510      	push	{r4, lr}
 8003d64:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d66:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d6a:	b313      	cbz	r3, 8003db2 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d72:	4621      	mov	r1, r4
 8003d74:	f851 0b04 	ldr.w	r0, [r1], #4
 8003d78:	f7ff ff6a 	bl	8003c50 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d82:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003d86:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003d8a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003d8e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003d92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003d9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003da2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003da6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003daa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003dae:	2000      	movs	r0, #0
}
 8003db0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003db2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003db6:	f7ff fe30 	bl	8003a1a <HAL_TIM_Base_MspInit>
 8003dba:	e7d7      	b.n	8003d6c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003dbc:	2001      	movs	r0, #1
}
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003dc4:	4770      	bx	lr
	...

08003dc8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003dc8:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8003dca:	680b      	ldr	r3, [r1, #0]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d018      	beq.n	8003e02 <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003dd0:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003dd2:	4a19      	ldr	r2, [pc, #100]	; (8003e38 <FMC_SDRAM_Init+0x70>)
 8003dd4:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003dd6:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 8003dd8:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003dda:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 8003ddc:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 8003dde:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 8003de0:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 8003de2:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 8003de4:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 8003de6:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 8003de8:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 8003dea:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 8003dec:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 8003dee:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 8003df0:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 8003df2:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 8003df4:	6a49      	ldr	r1, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8003df6:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003df8:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003dfa:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	bc30      	pop	{r4, r5}
 8003e00:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003e02:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8003e04:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003e08:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 8003e0a:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003e0c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8003e0e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8003e10:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003e12:	4322      	orrs	r2, r4
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8003e14:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003e16:	4c08      	ldr	r4, [pc, #32]	; (8003e38 <FMC_SDRAM_Init+0x70>)
 8003e18:	401c      	ands	r4, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003e1a:	684b      	ldr	r3, [r1, #4]
 8003e1c:	688d      	ldr	r5, [r1, #8]
 8003e1e:	432b      	orrs	r3, r5
                       Init->RowBitsNumber       |\
 8003e20:	68cd      	ldr	r5, [r1, #12]
 8003e22:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 8003e24:	690d      	ldr	r5, [r1, #16]
 8003e26:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 8003e28:	694d      	ldr	r5, [r1, #20]
 8003e2a:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 8003e2c:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 8003e2e:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003e30:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003e32:	6002      	str	r2, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8003e34:	6043      	str	r3, [r0, #4]
 8003e36:	e7e1      	b.n	8003dfc <FMC_SDRAM_Init+0x34>
 8003e38:	ffff8000 	.word	0xffff8000

08003e3c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003e3c:	b510      	push	{r4, lr}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8003e3e:	2a01      	cmp	r2, #1
 8003e40:	d025      	beq.n	8003e8e <FMC_SDRAM_Timing_Init+0x52>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003e42:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003e44:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003e48:	680b      	ldr	r3, [r1, #0]
 8003e4a:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8003e4c:	684c      	ldr	r4, [r1, #4]
 8003e4e:	f104 3cff 	add.w	ip, r4, #4294967295
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003e52:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8003e56:	688c      	ldr	r4, [r1, #8]
 8003e58:	f104 3cff 	add.w	ip, r4, #4294967295
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8003e5c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8003e60:	68cc      	ldr	r4, [r1, #12]
 8003e62:	f104 3cff 	add.w	ip, r4, #4294967295
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8003e66:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8003e6a:	690c      	ldr	r4, [r1, #16]
 8003e6c:	f104 3cff 	add.w	ip, r4, #4294967295
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8003e70:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 8003e74:	694c      	ldr	r4, [r1, #20]
 8003e76:	f104 3cff 	add.w	ip, r4, #4294967295
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8003e7a:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 8003e7e:	6989      	ldr	r1, [r1, #24]
 8003e80:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003e82:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003e86:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003e88:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	bd10      	pop	{r4, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003e8e:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8003e90:	4c13      	ldr	r4, [pc, #76]	; (8003ee0 <FMC_SDRAM_Timing_Init+0xa4>)
 8003e92:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8003e94:	68ca      	ldr	r2, [r1, #12]
 8003e96:	f102 3cff 	add.w	ip, r2, #4294967295
                        (((Timing->RPDelay)-1) << 20)); 
 8003e9a:	694b      	ldr	r3, [r1, #20]
 8003e9c:	1e5a      	subs	r2, r3, #1
 8003e9e:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8003ea0:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
 8003ea4:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8003ea6:	68c3      	ldr	r3, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003ea8:	f003 4c70 	and.w	ip, r3, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003eac:	680b      	ldr	r3, [r1, #0]
 8003eae:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8003eb0:	684c      	ldr	r4, [r1, #4]
 8003eb2:	f104 3eff 	add.w	lr, r4, #4294967295
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003eb6:	ea43 130e 	orr.w	r3, r3, lr, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8003eba:	688c      	ldr	r4, [r1, #8]
 8003ebc:	f104 3eff 	add.w	lr, r4, #4294967295
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8003ec0:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8003ec4:	690c      	ldr	r4, [r1, #16]
 8003ec6:	f104 3eff 	add.w	lr, r4, #4294967295
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8003eca:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 8003ece:	6989      	ldr	r1, [r1, #24]
 8003ed0:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003ed2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003ed6:	ea43 030c 	orr.w	r3, r3, ip
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003eda:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8003edc:	60c3      	str	r3, [r0, #12]
 8003ede:	e7d4      	b.n	8003e8a <FMC_SDRAM_Timing_Init+0x4e>
 8003ee0:	ff0f0fff 	.word	0xff0f0fff

08003ee4 <__libc_init_array>:
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	4d0d      	ldr	r5, [pc, #52]	; (8003f1c <__libc_init_array+0x38>)
 8003ee8:	4c0d      	ldr	r4, [pc, #52]	; (8003f20 <__libc_init_array+0x3c>)
 8003eea:	1b64      	subs	r4, r4, r5
 8003eec:	10a4      	asrs	r4, r4, #2
 8003eee:	2600      	movs	r6, #0
 8003ef0:	42a6      	cmp	r6, r4
 8003ef2:	d109      	bne.n	8003f08 <__libc_init_array+0x24>
 8003ef4:	4d0b      	ldr	r5, [pc, #44]	; (8003f24 <__libc_init_array+0x40>)
 8003ef6:	4c0c      	ldr	r4, [pc, #48]	; (8003f28 <__libc_init_array+0x44>)
 8003ef8:	f000 f820 	bl	8003f3c <_init>
 8003efc:	1b64      	subs	r4, r4, r5
 8003efe:	10a4      	asrs	r4, r4, #2
 8003f00:	2600      	movs	r6, #0
 8003f02:	42a6      	cmp	r6, r4
 8003f04:	d105      	bne.n	8003f12 <__libc_init_array+0x2e>
 8003f06:	bd70      	pop	{r4, r5, r6, pc}
 8003f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f0c:	4798      	blx	r3
 8003f0e:	3601      	adds	r6, #1
 8003f10:	e7ee      	b.n	8003ef0 <__libc_init_array+0xc>
 8003f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f16:	4798      	blx	r3
 8003f18:	3601      	adds	r6, #1
 8003f1a:	e7f2      	b.n	8003f02 <__libc_init_array+0x1e>
 8003f1c:	08005c60 	.word	0x08005c60
 8003f20:	08005c60 	.word	0x08005c60
 8003f24:	08005c60 	.word	0x08005c60
 8003f28:	08005c64 	.word	0x08005c64

08003f2c <memset>:
 8003f2c:	4402      	add	r2, r0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d100      	bne.n	8003f36 <memset+0xa>
 8003f34:	4770      	bx	lr
 8003f36:	f803 1b01 	strb.w	r1, [r3], #1
 8003f3a:	e7f9      	b.n	8003f30 <memset+0x4>

08003f3c <_init>:
 8003f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3e:	bf00      	nop
 8003f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f42:	bc08      	pop	{r3}
 8003f44:	469e      	mov	lr, r3
 8003f46:	4770      	bx	lr

08003f48 <_fini>:
 8003f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4a:	bf00      	nop
 8003f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4e:	bc08      	pop	{r3}
 8003f50:	469e      	mov	lr, r3
 8003f52:	4770      	bx	lr
