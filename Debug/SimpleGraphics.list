
SimpleGraphics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a2c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003bf4  08003bf4  00013bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c0c  08003c0c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c0c  08003c0c  00013c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c14  08003c14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c14  08003c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c18  08003c18  00013c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003fea4  2000000c  08003c28  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2003feb0  08003c28  0002feb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e6c7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033d1  00000000  00000000  0003e703  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000138b5  00000000  00000000  00041ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001598  00000000  00000000  00055390  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000014a8  00000000  00000000  00056928  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000285d0  00000000  00000000  00057dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00012d5e  00000000  00000000  000803a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000fc353  00000000  00000000  000930fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0018f451  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e78  00000000  00000000  0018f4cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003bdc 	.word	0x08003bdc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08003bdc 	.word	0x08003bdc

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <Init_Graphics_System>:

void Init_Graphics_System(uint32 H, uint32 W, uint32 LCD_RAM_START_ADDRESS, uint8 Layers, uint8 ColorType) //Инициализация драйвера дисплея, графического ускорителя и т.п.
{
	//LTDC_LayerCfgTypeDef pLayerCfg = {0};
	//LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
	Height = H;
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <Init_Graphics_System+0x10>)
 800050a:	6018      	str	r0, [r3, #0]
    Width = W;
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <Init_Graphics_System+0x14>)
 800050e:	6019      	str	r1, [r3, #0]

    LCD_FRAME_BUFFER0 = LCD_RAM_START_ADDRESS;
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <Init_Graphics_System+0x18>)
 8000512:	601a      	str	r2, [r3, #0]
    if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
    {

    } */

}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	20000028 	.word	0x20000028
 800051c:	20000030 	.word	0x20000030
 8000520:	2000002c 	.word	0x2000002c

08000524 <Fill_all>:

void Fill_all(uint32 Color) //Заливка всего дисплея цветом
{
	for(int i=0; i<480*272; i++)
 8000524:	2300      	movs	r3, #0
 8000526:	e005      	b.n	8000534 <Fill_all+0x10>
	{
	  *(__IO uint16*) (LCD_FRAME_BUFFER0 + (i*2)) = Color;
 8000528:	4a04      	ldr	r2, [pc, #16]	; (800053c <Fill_all+0x18>)
 800052a:	6812      	ldr	r2, [r2, #0]
 800052c:	b281      	uxth	r1, r0
 800052e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<480*272; i++)
 8000532:	3301      	adds	r3, #1
 8000534:	f5b3 3fff 	cmp.w	r3, #130560	; 0x1fe00
 8000538:	dbf6      	blt.n	8000528 <Fill_all+0x4>
	}
}
 800053a:	4770      	bx	lr
 800053c:	2000002c 	.word	0x2000002c

08000540 <Fill_rectangle>:

void Fill_rectangle(uint32 Color, int32 StartX, int32 StopX, int32 StartY, int32 StopY) //Заливка прямоугольной формы
{
 8000540:	b4f0      	push	{r4, r5, r6, r7}
 8000542:	f8dd c010 	ldr.w	ip, [sp, #16]
	StartX--;
 8000546:	3901      	subs	r1, #1
	StartY--;
 8000548:	3b01      	subs	r3, #1
    	   //HAL_Delay(5);
    	   HAL_DMA2D_PollForTransfer(&hdma2d, TransferDelay);
       }
    } */

	for(uint32 y = StartY; y < StopY; y++)
 800054a:	e00c      	b.n	8000566 <Fill_rectangle+0x26>
	{
		for(uint32 x = StartX; x < StopX; x++)
		{
			*(__IO uint16*) (LCD_FRAME_BUFFER0 + (2*(y*Width + x))) = Color;
 800054c:	4d09      	ldr	r5, [pc, #36]	; (8000574 <Fill_rectangle+0x34>)
 800054e:	682d      	ldr	r5, [r5, #0]
 8000550:	fb05 4503 	mla	r5, r5, r3, r4
 8000554:	4e08      	ldr	r6, [pc, #32]	; (8000578 <Fill_rectangle+0x38>)
 8000556:	6836      	ldr	r6, [r6, #0]
 8000558:	b287      	uxth	r7, r0
 800055a:	f826 7015 	strh.w	r7, [r6, r5, lsl #1]
		for(uint32 x = StartX; x < StopX; x++)
 800055e:	3401      	adds	r4, #1
 8000560:	42a2      	cmp	r2, r4
 8000562:	d8f3      	bhi.n	800054c <Fill_rectangle+0xc>
	for(uint32 y = StartY; y < StopY; y++)
 8000564:	3301      	adds	r3, #1
 8000566:	459c      	cmp	ip, r3
 8000568:	d901      	bls.n	800056e <Fill_rectangle+0x2e>
		for(uint32 x = StartX; x < StopX; x++)
 800056a:	460c      	mov	r4, r1
 800056c:	e7f8      	b.n	8000560 <Fill_rectangle+0x20>
		}
	}
}
 800056e:	bcf0      	pop	{r4, r5, r6, r7}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000030 	.word	0x20000030
 8000578:	2000002c 	.word	0x2000002c

0800057c <MemPoint>:

void MemPoint(int32 x, int32 y, int32 Color) //Отрисовка одного пикселя
{
	*(__IO uint16*) (LCD_FRAME_BUFFER0 + (2*(y*Width + x))) = Color;
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <MemPoint+0x14>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	fb03 0101 	mla	r1, r3, r1, r0
 8000584:	4b03      	ldr	r3, [pc, #12]	; (8000594 <MemPoint+0x18>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	b292      	uxth	r2, r2
 800058a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 800058e:	4770      	bx	lr
 8000590:	20000030 	.word	0x20000030
 8000594:	2000002c 	.word	0x2000002c

08000598 <Get565Color>:
{
	uint8 FontH = calibri[1];
	return FontH;
}
uint16 Get565Color(uint32 Color) //Возвращает значение цвета в формате пикселя 565(5 бит - красный цвет, 6 - зеленый, 5 - синий)
{
 8000598:	b410      	push	{r4}
   uint8 R, G, B;
   R = (Color >> 16) & 0xff;
   G = (Color >> 8) & 0xff;
   B = Color & 0xff;

   R = 31 * R / 255;
 800059a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800059e:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 80005a2:	4a13      	ldr	r2, [pc, #76]	; (80005f0 <Get565Color+0x58>)
 80005a4:	fb82 4103 	smull	r4, r1, r2, r3
 80005a8:	4419      	add	r1, r3
 80005aa:	17db      	asrs	r3, r3, #31
 80005ac:	ebc3 11e1 	rsb	r1, r3, r1, asr #7
   G = 63 * G / 255;
 80005b0:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80005b4:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 80005b8:	fb82 c403 	smull	ip, r4, r2, r3
 80005bc:	441c      	add	r4, r3
 80005be:	17db      	asrs	r3, r3, #31
 80005c0:	ebc3 13e4 	rsb	r3, r3, r4, asr #7
   B = 31 * B / 255;
 80005c4:	b2c0      	uxtb	r0, r0
 80005c6:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 80005ca:	fb82 4200 	smull	r4, r2, r2, r0
 80005ce:	4402      	add	r2, r0
 80005d0:	17c0      	asrs	r0, r0, #31
 80005d2:	ebc0 10e2 	rsb	r0, r0, r2, asr #7
 80005d6:	b2c2      	uxtb	r2, r0

   RezColor |= B;
   RezColor |= (G << 5);
 80005d8:	0158      	lsls	r0, r3, #5
 80005da:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
 80005de:	4310      	orrs	r0, r2
   RezColor |= (R << 11);
 80005e0:	02c9      	lsls	r1, r1, #11
 80005e2:	f401 21ff 	and.w	r1, r1, #522240	; 0x7f800
 80005e6:	4308      	orrs	r0, r1

   return RezColor;
}
 80005e8:	b280      	uxth	r0, r0
 80005ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	80808081 	.word	0x80808081

080005f4 <Graphics_Init>:
	}
	return Error;
}

void Graphics_Init(DisplayConfig *dcf) //Инициализация самой бибиллиотеки а также инициализация графических устройств(дисплей, графические ускорители, тач-панели)
{
 80005f4:	b510      	push	{r4, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	4602      	mov	r2, r0
	DispHeight = dcf->Display_Height;
 80005fa:	6840      	ldr	r0, [r0, #4]
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <Graphics_Init+0x28>)
 80005fe:	6018      	str	r0, [r3, #0]
	DispWidth = dcf->Display_Width;
 8000600:	6891      	ldr	r1, [r2, #8]
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <Graphics_Init+0x2c>)
 8000604:	6019      	str	r1, [r3, #0]
	ColorType = dcf->Color_Type;
 8000606:	7b14      	ldrb	r4, [r2, #12]
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <Graphics_Init+0x30>)
 800060a:	701c      	strb	r4, [r3, #0]
	Init_Graphics_System(dcf->Display_Height, dcf->Display_Width, dcf->Start_RAM_Address, dcf->Layers, dcf->Color_Type);
 800060c:	7b53      	ldrb	r3, [r2, #13]
 800060e:	6812      	ldr	r2, [r2, #0]
 8000610:	9400      	str	r4, [sp, #0]
 8000612:	f7ff ff79 	bl	8000508 <Init_Graphics_System>
}
 8000616:	b002      	add	sp, #8
 8000618:	bd10      	pop	{r4, pc}
 800061a:	bf00      	nop
 800061c:	20000038 	.word	0x20000038
 8000620:	2000003c 	.word	0x2000003c
 8000624:	20000034 	.word	0x20000034

08000628 <Pixel>:

void Pixel(uint16 x, uint16 y, uint32 Color, uint16 Tolshina)
{
 8000628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800062c:	4691      	mov	r9, r2
  uint16 i, j, tolsx, tolsy;
  x--; y--;
 800062e:	3801      	subs	r0, #1
 8000630:	b287      	uxth	r7, r0
 8000632:	3901      	subs	r1, #1
 8000634:	b28d      	uxth	r5, r1
  tolsy = y+Tolshina;
 8000636:	eb05 0803 	add.w	r8, r5, r3
 800063a:	fa1f f888 	uxth.w	r8, r8
  tolsx = x+Tolshina;
 800063e:	443b      	add	r3, r7
 8000640:	b29e      	uxth	r6, r3
  for(i = y; i<tolsy; i++)
 8000642:	e013      	b.n	800066c <Pixel+0x44>
  {
	  for(j = x; j<tolsx; j++)
 8000644:	3401      	adds	r4, #1
 8000646:	b2a4      	uxth	r4, r4
 8000648:	42b4      	cmp	r4, r6
 800064a:	d20d      	bcs.n	8000668 <Pixel+0x40>
	  {
		  if(i < DispHeight && j < DispWidth)
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <Pixel+0x50>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	429d      	cmp	r5, r3
 8000652:	d2f7      	bcs.n	8000644 <Pixel+0x1c>
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <Pixel+0x54>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	429c      	cmp	r4, r3
 800065a:	d2f3      	bcs.n	8000644 <Pixel+0x1c>
		  {
			  MemPoint(j,i,Color);
 800065c:	464a      	mov	r2, r9
 800065e:	4629      	mov	r1, r5
 8000660:	4620      	mov	r0, r4
 8000662:	f7ff ff8b 	bl	800057c <MemPoint>
 8000666:	e7ed      	b.n	8000644 <Pixel+0x1c>
  for(i = y; i<tolsy; i++)
 8000668:	3501      	adds	r5, #1
 800066a:	b2ad      	uxth	r5, r5
 800066c:	4545      	cmp	r5, r8
 800066e:	d201      	bcs.n	8000674 <Pixel+0x4c>
	  for(j = x; j<tolsx; j++)
 8000670:	463c      	mov	r4, r7
 8000672:	e7e9      	b.n	8000648 <Pixel+0x20>
	      }
	  }
  }
}
 8000674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000678:	20000038 	.word	0x20000038
 800067c:	2000003c 	.word	0x2000003c

08000680 <Fill_Display>:
void Fill_Display(uint32 Color) //Заливает весь дисплей определенным цветом
{
 8000680:	b510      	push	{r4, lr}
 8000682:	4604      	mov	r4, r0

	if(ColorType == Color565)
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <Fill_Display+0x38>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b143      	cbz	r3, 800069c <Fill_Display+0x1c>
	{ Fill_all(Get565Color(Color)); }

	if(ColorType == Color888)
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <Fill_Display+0x38>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d009      	beq.n	80006a6 <Fill_Display+0x26>
	{ Fill_all(Color | 0xFF << 24); }

	if(ColorType == Color_A888)
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <Fill_Display+0x38>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b02      	cmp	r3, #2
 8000698:	d00a      	beq.n	80006b0 <Fill_Display+0x30>
	{ Fill_all(Color); }
}
 800069a:	bd10      	pop	{r4, pc}
	{ Fill_all(Get565Color(Color)); }
 800069c:	f7ff ff7c 	bl	8000598 <Get565Color>
 80006a0:	f7ff ff40 	bl	8000524 <Fill_all>
 80006a4:	e7f1      	b.n	800068a <Fill_Display+0xa>
	{ Fill_all(Color | 0xFF << 24); }
 80006a6:	f044 407f 	orr.w	r0, r4, #4278190080	; 0xff000000
 80006aa:	f7ff ff3b 	bl	8000524 <Fill_all>
 80006ae:	e7f0      	b.n	8000692 <Fill_Display+0x12>
	{ Fill_all(Color); }
 80006b0:	4620      	mov	r0, r4
 80006b2:	f7ff ff37 	bl	8000524 <Fill_all>
}
 80006b6:	e7f0      	b.n	800069a <Fill_Display+0x1a>
 80006b8:	20000034 	.word	0x20000034

080006bc <Fill_Rectangle>:
void Fill_Rectangle(uint32 Color, int32 StartX, int32 StopX, int32 StartY, int32 StopY) //заливает цветом прямоугольную область
{
 80006bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	4680      	mov	r8, r0
 80006c4:	4615      	mov	r5, r2
 80006c6:	461c      	mov	r4, r3
 80006c8:	9f08      	ldr	r7, [sp, #32]
	if(((StartX > 0) && (StartX <= DispWidth)) || ((StopX > 0) && (StopX <= DispWidth)))
 80006ca:	1e0e      	subs	r6, r1, #0
 80006cc:	dd03      	ble.n	80006d6 <Fill_Rectangle+0x1a>
 80006ce:	4b26      	ldr	r3, [pc, #152]	; (8000768 <Fill_Rectangle+0xac>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	429e      	cmp	r6, r3
 80006d4:	d905      	bls.n	80006e2 <Fill_Rectangle+0x26>
 80006d6:	2d00      	cmp	r5, #0
 80006d8:	dd28      	ble.n	800072c <Fill_Rectangle+0x70>
 80006da:	4b23      	ldr	r3, [pc, #140]	; (8000768 <Fill_Rectangle+0xac>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	429d      	cmp	r5, r3
 80006e0:	d824      	bhi.n	800072c <Fill_Rectangle+0x70>
	{
		if(((StartY > 0) && (StartY <= DispHeight)) || ((StopY > 0) && (StopY <= DispHeight)))
 80006e2:	2c00      	cmp	r4, #0
 80006e4:	dd03      	ble.n	80006ee <Fill_Rectangle+0x32>
 80006e6:	4b21      	ldr	r3, [pc, #132]	; (800076c <Fill_Rectangle+0xb0>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	429c      	cmp	r4, r3
 80006ec:	d905      	bls.n	80006fa <Fill_Rectangle+0x3e>
 80006ee:	2f00      	cmp	r7, #0
 80006f0:	dd1c      	ble.n	800072c <Fill_Rectangle+0x70>
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <Fill_Rectangle+0xb0>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	429f      	cmp	r7, r3
 80006f8:	d818      	bhi.n	800072c <Fill_Rectangle+0x70>
		{
			if(StartX <= 0)
 80006fa:	2e00      	cmp	r6, #0
 80006fc:	dd19      	ble.n	8000732 <Fill_Rectangle+0x76>
			{ StartX = 1;}
			if(StopX > DispWidth)
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <Fill_Rectangle+0xac>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	429d      	cmp	r5, r3
 8000704:	d900      	bls.n	8000708 <Fill_Rectangle+0x4c>
			{ StartX = DispWidth;}
 8000706:	461e      	mov	r6, r3

			if(StartY <= 0)
 8000708:	2c00      	cmp	r4, #0
 800070a:	dd14      	ble.n	8000736 <Fill_Rectangle+0x7a>
			{ StartY = 1;}
			if(StopY > DispHeight)
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <Fill_Rectangle+0xb0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	429f      	cmp	r7, r3
 8000712:	d900      	bls.n	8000716 <Fill_Rectangle+0x5a>
			{ StartY = DispHeight;}
 8000714:	461c      	mov	r4, r3

			if(ColorType == Color565)
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <Fill_Rectangle+0xb4>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	b173      	cbz	r3, 800073a <Fill_Rectangle+0x7e>
			{ Fill_rectangle(Get565Color(Color), StartX, StopX, StartY, StopY); }

			if(ColorType == Color888)
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <Fill_Rectangle+0xb4>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d014      	beq.n	800074e <Fill_Rectangle+0x92>
			{ Fill_rectangle(Color | 0xFF << 24, StartX, StopX, StartY, StopY); }

			if(ColorType == Color_A888)
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <Fill_Rectangle+0xb4>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b02      	cmp	r3, #2
 800072a:	d019      	beq.n	8000760 <Fill_Rectangle+0xa4>
			{ Fill_all(Color); }
		}
	}
}
 800072c:	b002      	add	sp, #8
 800072e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			{ StartX = 1;}
 8000732:	2601      	movs	r6, #1
 8000734:	e7e3      	b.n	80006fe <Fill_Rectangle+0x42>
			{ StartY = 1;}
 8000736:	2401      	movs	r4, #1
 8000738:	e7e8      	b.n	800070c <Fill_Rectangle+0x50>
			{ Fill_rectangle(Get565Color(Color), StartX, StopX, StartY, StopY); }
 800073a:	4640      	mov	r0, r8
 800073c:	f7ff ff2c 	bl	8000598 <Get565Color>
 8000740:	9700      	str	r7, [sp, #0]
 8000742:	4623      	mov	r3, r4
 8000744:	462a      	mov	r2, r5
 8000746:	4631      	mov	r1, r6
 8000748:	f7ff fefa 	bl	8000540 <Fill_rectangle>
 800074c:	e7e6      	b.n	800071c <Fill_Rectangle+0x60>
			{ Fill_rectangle(Color | 0xFF << 24, StartX, StopX, StartY, StopY); }
 800074e:	9700      	str	r7, [sp, #0]
 8000750:	4623      	mov	r3, r4
 8000752:	462a      	mov	r2, r5
 8000754:	4631      	mov	r1, r6
 8000756:	f048 407f 	orr.w	r0, r8, #4278190080	; 0xff000000
 800075a:	f7ff fef1 	bl	8000540 <Fill_rectangle>
 800075e:	e7e1      	b.n	8000724 <Fill_Rectangle+0x68>
			{ Fill_all(Color); }
 8000760:	4640      	mov	r0, r8
 8000762:	f7ff fedf 	bl	8000524 <Fill_all>
}
 8000766:	e7e1      	b.n	800072c <Fill_Rectangle+0x70>
 8000768:	2000003c 	.word	0x2000003c
 800076c:	20000038 	.word	0x20000038
 8000770:	20000034 	.word	0x20000034

08000774 <HLine>:
void HLine(uint32 Color, int16 x1, int16 x2, int16 y1, uint8 Tolshina)//
{
 8000774:	b510      	push	{r4, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	f89d 4010 	ldrb.w	r4, [sp, #16]
    if(Tolshina > 0)
 800077c:	b90c      	cbnz	r4, 8000782 <HLine+0xe>
    {
    	Tolshina--;
    	Fill_Rectangle(Color, x1, x2, y1, y1+Tolshina);
    }
}
 800077e:	b002      	add	sp, #8
 8000780:	bd10      	pop	{r4, pc}
    	Tolshina--;
 8000782:	3c01      	subs	r4, #1
    	Fill_Rectangle(Color, x1, x2, y1, y1+Tolshina);
 8000784:	fa53 f484 	uxtab	r4, r3, r4
 8000788:	9400      	str	r4, [sp, #0]
 800078a:	f7ff ff97 	bl	80006bc <Fill_Rectangle>
}
 800078e:	e7f6      	b.n	800077e <HLine+0xa>

08000790 <VLine>:
void VLine(uint32 Color, int16 x1, int16 y1, int16 y2, uint8 Tolshina)
{
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	b083      	sub	sp, #12
 8000794:	f89d 4018 	ldrb.w	r4, [sp, #24]
	if(Tolshina > 0)
 8000798:	b90c      	cbnz	r4, 800079e <VLine+0xe>
	{
		Tolshina--;
		Fill_Rectangle(Color, x1, x1+Tolshina, y1, y2);
	}
}
 800079a:	b003      	add	sp, #12
 800079c:	bd30      	pop	{r4, r5, pc}
 800079e:	461d      	mov	r5, r3
 80007a0:	4613      	mov	r3, r2
		Tolshina--;
 80007a2:	3c01      	subs	r4, #1
		Fill_Rectangle(Color, x1, x1+Tolshina, y1, y2);
 80007a4:	9500      	str	r5, [sp, #0]
 80007a6:	fa51 f284 	uxtab	r2, r1, r4
 80007aa:	f7ff ff87 	bl	80006bc <Fill_Rectangle>
}
 80007ae:	e7f4      	b.n	800079a <VLine+0xa>

080007b0 <FramePanel>:
void FramePanel(uint32 BorderColor, uint32 FloodColor, int16 x1, int16 x2, int16 y1, int16 y2, uint8 Tolshina)
{
 80007b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	4607      	mov	r7, r0
 80007b8:	4608      	mov	r0, r1
 80007ba:	4692      	mov	sl, r2
 80007bc:	461c      	mov	r4, r3
 80007be:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80007c2:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80007c6:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30




	Tolshina --;
 80007ca:	1e75      	subs	r5, r6, #1
 80007cc:	b2ed      	uxtb	r5, r5
	Fill_Rectangle(FloodColor,x1,x2,y1,y2);
 80007ce:	f8cd 9000 	str.w	r9, [sp]
 80007d2:	4643      	mov	r3, r8
 80007d4:	4622      	mov	r2, r4
 80007d6:	4651      	mov	r1, sl
 80007d8:	f7ff ff70 	bl	80006bc <Fill_Rectangle>
    HLine(BorderColor,x1,x2,y1,Tolshina + 1);
 80007dc:	9600      	str	r6, [sp, #0]
 80007de:	4643      	mov	r3, r8
 80007e0:	4622      	mov	r2, r4
 80007e2:	4651      	mov	r1, sl
 80007e4:	4638      	mov	r0, r7
 80007e6:	f7ff ffc5 	bl	8000774 <HLine>
    HLine(BorderColor,x1,x2,y2 - Tolshina,Tolshina +1);
 80007ea:	b2ad      	uxth	r5, r5
 80007ec:	eba9 0305 	sub.w	r3, r9, r5
 80007f0:	9600      	str	r6, [sp, #0]
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	4622      	mov	r2, r4
 80007f6:	4651      	mov	r1, sl
 80007f8:	4638      	mov	r0, r7
 80007fa:	f7ff ffbb 	bl	8000774 <HLine>
    VLine(BorderColor,x1,y1,y2,Tolshina + 1);
 80007fe:	9600      	str	r6, [sp, #0]
 8000800:	464b      	mov	r3, r9
 8000802:	4642      	mov	r2, r8
 8000804:	4651      	mov	r1, sl
 8000806:	4638      	mov	r0, r7
 8000808:	f7ff ffc2 	bl	8000790 <VLine>
    VLine(BorderColor,x2 - Tolshina,y1,y2,Tolshina + 1);
 800080c:	1b61      	subs	r1, r4, r5
 800080e:	9600      	str	r6, [sp, #0]
 8000810:	464b      	mov	r3, r9
 8000812:	4642      	mov	r2, r8
 8000814:	b209      	sxth	r1, r1
 8000816:	4638      	mov	r0, r7
 8000818:	f7ff ffba 	bl	8000790 <VLine>
}
 800081c:	b002      	add	sp, #8
 800081e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000822 <Circle>:
	   }
   }
}

void Circle (int16 x1, int16 y1, int16 r,uint32 Color, uint16 Tolshina)
{
 8000822:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000826:	b087      	sub	sp, #28
 8000828:	9004      	str	r0, [sp, #16]
 800082a:	9105      	str	r1, [sp, #20]
 800082c:	9302      	str	r3, [sp, #8]
 800082e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8000832:	9301      	str	r3, [sp, #4]
    int x = -r, y = 0, err = 2-2*r, e2;
 8000834:	f1c2 0900 	rsb	r9, r2, #0
 8000838:	f1c2 0201 	rsb	r2, r2, #1
 800083c:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8000840:	f04f 0a00 	mov.w	sl, #0
 8000844:	e00c      	b.n	8000860 <Circle+0x3e>
 8000846:	4643      	mov	r3, r8
		e2 = err;
		if (e2 <= y) {
			err += ++y*2+1;
			if (-x == y && e2 <= x) e2 = 0;
		}
		if (e2 > x) err += ++x*2+1;
 8000848:	45c1      	cmp	r9, r8
 800084a:	da45      	bge.n	80008d8 <Circle+0xb6>
 800084c:	f109 0901 	add.w	r9, r9, #1
 8000850:	ea4f 0849 	mov.w	r8, r9, lsl #1
 8000854:	f108 0801 	add.w	r8, r8, #1
 8000858:	4498      	add	r8, r3
	} while (x <= 0);
 800085a:	f1b9 0f00 	cmp.w	r9, #0
 800085e:	dc3d      	bgt.n	80008dc <Circle+0xba>
		Pixel(x1-x, y1+y,Color,Tolshina);
 8000860:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8000864:	fa1f fb89 	uxth.w	fp, r9
 8000868:	eba4 030b 	sub.w	r3, r4, fp
 800086c:	b298      	uxth	r0, r3
 800086e:	fa1f f68a 	uxth.w	r6, sl
 8000872:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8000876:	1977      	adds	r7, r6, r5
 8000878:	b2bf      	uxth	r7, r7
 800087a:	9b01      	ldr	r3, [sp, #4]
 800087c:	9a02      	ldr	r2, [sp, #8]
 800087e:	4639      	mov	r1, r7
 8000880:	9003      	str	r0, [sp, #12]
 8000882:	f7ff fed1 	bl	8000628 <Pixel>
		Pixel(x1+x, y1+y,Color,Tolshina);
 8000886:	445c      	add	r4, fp
 8000888:	b2a4      	uxth	r4, r4
 800088a:	9b01      	ldr	r3, [sp, #4]
 800088c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8000890:	465a      	mov	r2, fp
 8000892:	4639      	mov	r1, r7
 8000894:	4620      	mov	r0, r4
 8000896:	f7ff fec7 	bl	8000628 <Pixel>
		Pixel(x1+x, y1-y,Color,Tolshina);
 800089a:	1bad      	subs	r5, r5, r6
 800089c:	b2ad      	uxth	r5, r5
 800089e:	9e01      	ldr	r6, [sp, #4]
 80008a0:	4633      	mov	r3, r6
 80008a2:	465a      	mov	r2, fp
 80008a4:	4629      	mov	r1, r5
 80008a6:	4620      	mov	r0, r4
 80008a8:	f7ff febe 	bl	8000628 <Pixel>
		Pixel(x1-x, y1-y,Color,Tolshina);
 80008ac:	4633      	mov	r3, r6
 80008ae:	465a      	mov	r2, fp
 80008b0:	4629      	mov	r1, r5
 80008b2:	9803      	ldr	r0, [sp, #12]
 80008b4:	f7ff feb8 	bl	8000628 <Pixel>
		if (e2 <= y) {
 80008b8:	45c2      	cmp	sl, r8
 80008ba:	dbc4      	blt.n	8000846 <Circle+0x24>
			err += ++y*2+1;
 80008bc:	f10a 0a01 	add.w	sl, sl, #1
 80008c0:	ea4f 034a 	mov.w	r3, sl, lsl #1
 80008c4:	3301      	adds	r3, #1
 80008c6:	4443      	add	r3, r8
			if (-x == y && e2 <= x) e2 = 0;
 80008c8:	eb1a 0f09 	cmn.w	sl, r9
 80008cc:	d1bc      	bne.n	8000848 <Circle+0x26>
 80008ce:	45c1      	cmp	r9, r8
 80008d0:	dbba      	blt.n	8000848 <Circle+0x26>
 80008d2:	f04f 0800 	mov.w	r8, #0
 80008d6:	e7b7      	b.n	8000848 <Circle+0x26>
 80008d8:	4698      	mov	r8, r3
 80008da:	e7be      	b.n	800085a <Circle+0x38>
}
 80008dc:	b007      	add	sp, #28
 80008de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080008e2 <FillCircle>:

void FillCircle(uint16 x1, uint16 y1, uint16 r, uint32 Color)//
{
 80008e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008e4:	b083      	sub	sp, #12
 80008e6:	4607      	mov	r7, r0
 80008e8:	460e      	mov	r6, r1
 80008ea:	4614      	mov	r4, r2
 80008ec:	461d      	mov	r5, r3
  uint16 r1 = r;
  while(r1 != 0)
 80008ee:	e009      	b.n	8000904 <FillCircle+0x22>
  {
      Circle(x1,y1,r1,Color,2);
 80008f0:	2302      	movs	r3, #2
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	462b      	mov	r3, r5
 80008f6:	b222      	sxth	r2, r4
 80008f8:	b231      	sxth	r1, r6
 80008fa:	b238      	sxth	r0, r7
 80008fc:	f7ff ff91 	bl	8000822 <Circle>
      r1--;
 8000900:	3c01      	subs	r4, #1
 8000902:	b2a4      	uxth	r4, r4
  while(r1 != 0)
 8000904:	2c00      	cmp	r4, #0
 8000906:	d1f3      	bne.n	80008f0 <FillCircle+0xe>
  }
}
 8000908:	b003      	add	sp, #12
 800090a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800090c <TrackBar>:
		Line(x1+((x2-x1)/2), y2-3, x2-3, y1+3, ChColor, 2);
	}
}

void TrackBar(int16 XStart, int16 XEnd, int16 YStart, int16 YEnd, int16 StartPos, int16 StopPos, int16 CurrPos, int32 BorderColor, uint32 FloodColor, uint32 TrackerColor, uint8 Orient, uint8 Rad)
{
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	b084      	sub	sp, #16
 8000912:	4604      	mov	r4, r0
 8000914:	460d      	mov	r5, r1
 8000916:	4690      	mov	r8, r2
 8000918:	461f      	mov	r7, r3
 800091a:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 800091e:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8000922:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8000926:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800092a:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
	  float STPOS;
	  float POSCOUNT;
	  uint16 XPOS = 0, YPOS = 0;
	  uint16 POSN = CurrPos - StartPos;
 800092e:	fa1f f38e 	uxth.w	r3, lr
 8000932:	fa1f f28c 	uxth.w	r2, ip
 8000936:	1a9b      	subs	r3, r3, r2
 8000938:	b29b      	uxth	r3, r3
 800093a:	ee07 3a90 	vmov	s15, r3

	  if(Orient == Horisontal)
 800093e:	2803      	cmp	r0, #3
 8000940:	d03b      	beq.n	80009ba <TrackBar+0xae>
	         XPOS = (uint16)((POSN * POSCOUNT)+ XStart);
	      }
	  }
	  else
	  {
	      STPOS = StopPos - StartPos;
 8000942:	eba1 030c 	sub.w	r3, r1, ip
 8000946:	ee07 3a10 	vmov	s14, r3
 800094a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	      POSCOUNT = (YEnd - YStart)/STPOS;
 800094e:	eba7 0308 	sub.w	r3, r7, r8
 8000952:	ee06 3a90 	vmov	s13, r3
 8000956:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800095a:	ee86 6a87 	vdiv.f32	s12, s13, s14
	      YPOS = (uint16)(YEnd - (POSN * POSCOUNT));
 800095e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000962:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000966:	ee07 7a10 	vmov	s14, r7
 800096a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800096e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000976:	ee17 3a90 	vmov	r3, s15
 800097a:	fa1f f983 	uxth.w	r9, r3
	  uint16 XPOS = 0, YPOS = 0;
 800097e:	f04f 0a00 	mov.w	sl, #0
	  }

	  if(Orient == Horisontal)
 8000982:	2803      	cmp	r0, #3
 8000984:	f000 808b 	beq.w	8000a9e <TrackBar+0x192>
	      FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,1);
	      FillCircle(XPOS,YStart + (YEnd - YStart) / 2, Rad, TrackerColor);
	  }
	  else
	  {
		  FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,1);
 8000988:	2301      	movs	r3, #1
 800098a:	9302      	str	r3, [sp, #8]
 800098c:	9701      	str	r7, [sp, #4]
 800098e:	f8cd 8000 	str.w	r8, [sp]
 8000992:	462b      	mov	r3, r5
 8000994:	4622      	mov	r2, r4
 8000996:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000998:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800099a:	f7ff ff09 	bl	80007b0 <FramePanel>
		  FillCircle(XStart + ((XEnd - XStart) / 2),YPOS,Rad,TrackerColor);
 800099e:	1b28      	subs	r0, r5, r4
 80009a0:	f100 8096 	bmi.w	8000ad0 <TrackBar+0x1c4>
 80009a4:	eb04 0060 	add.w	r0, r4, r0, asr #1
 80009a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80009aa:	4632      	mov	r2, r6
 80009ac:	4649      	mov	r1, r9
 80009ae:	b280      	uxth	r0, r0
 80009b0:	f7ff ff97 	bl	80008e2 <FillCircle>
	  }
}
 80009b4:	b004      	add	sp, #16
 80009b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	      if(CurrPos == 1)
 80009ba:	f1be 0f01 	cmp.w	lr, #1
 80009be:	d025      	beq.n	8000a0c <TrackBar+0x100>
	  uint16 XPOS = 0, YPOS = 0;
 80009c0:	f04f 0a00 	mov.w	sl, #0
	      if(CurrPos == StartPos)
 80009c4:	45e6      	cmp	lr, ip
 80009c6:	d049      	beq.n	8000a5c <TrackBar+0x150>
	      if(CurrPos > StartPos)
 80009c8:	45e6      	cmp	lr, ip
 80009ca:	dd65      	ble.n	8000a98 <TrackBar+0x18c>
	         STPOS = StopPos - StartPos;
 80009cc:	eba1 010c 	sub.w	r1, r1, ip
 80009d0:	ee07 1a10 	vmov	s14, r1
 80009d4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
	         POSCOUNT = (XEnd - XStart)/STPOS;
 80009d8:	1b2b      	subs	r3, r5, r4
 80009da:	ee06 3a10 	vmov	s12, r3
 80009de:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80009e2:	ee86 7a26 	vdiv.f32	s14, s12, s13
	         XPOS = (uint16)((POSN * POSCOUNT)+ XStart);
 80009e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009ee:	ee07 4a90 	vmov	s15, r4
 80009f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009fe:	ee17 3a90 	vmov	r3, s15
 8000a02:	fa1f fa83 	uxth.w	sl, r3
	  uint16 XPOS = 0, YPOS = 0;
 8000a06:	f04f 0900 	mov.w	r9, #0
 8000a0a:	e7ba      	b.n	8000982 <TrackBar+0x76>
	         STPOS = StopPos - StartPos;
 8000a0c:	eba1 030c 	sub.w	r3, r1, ip
 8000a10:	ee06 3a10 	vmov	s12, r3
 8000a14:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	         POSCOUNT = (XEnd - XStart)/STPOS;
 8000a18:	1b2b      	subs	r3, r5, r4
 8000a1a:	ee05 3a90 	vmov	s11, r3
 8000a1e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8000a22:	ee85 7a86 	vdiv.f32	s14, s11, s12
	         XPOS = (uint16)((POSN - StartPos * POSCOUNT)+ XStart + 1);
 8000a26:	ee06 ca90 	vmov	s13, ip
 8000a2a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000a2e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8000a32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a36:	ee77 6a66 	vsub.f32	s13, s14, s13
 8000a3a:	ee07 4a10 	vmov	s14, r4
 8000a3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000a42:	ee37 7a26 	vadd.f32	s14, s14, s13
 8000a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000a4a:	ee37 7a26 	vadd.f32	s14, s14, s13
 8000a4e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8000a52:	ee17 3a10 	vmov	r3, s14
 8000a56:	fa1f fa83 	uxth.w	sl, r3
 8000a5a:	e7b3      	b.n	80009c4 <TrackBar+0xb8>
	         STPOS = StopPos - StartPos;
 8000a5c:	eba1 030c 	sub.w	r3, r1, ip
 8000a60:	ee06 3a10 	vmov	s12, r3
 8000a64:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	         POSCOUNT = (XEnd - XStart)/STPOS;
 8000a68:	1b2b      	subs	r3, r5, r4
 8000a6a:	ee05 3a90 	vmov	s11, r3
 8000a6e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8000a72:	eec5 6a86 	vdiv.f32	s13, s11, s12
	         XPOS = (uint16)((POSN * POSCOUNT)+ XStart);
 8000a76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a7a:	ee67 6a26 	vmul.f32	s13, s14, s13
 8000a7e:	ee07 4a10 	vmov	s14, r4
 8000a82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000a86:	ee37 7a26 	vadd.f32	s14, s14, s13
 8000a8a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8000a8e:	ee17 3a10 	vmov	r3, s14
 8000a92:	fa1f fa83 	uxth.w	sl, r3
 8000a96:	e797      	b.n	80009c8 <TrackBar+0xbc>
	  uint16 XPOS = 0, YPOS = 0;
 8000a98:	f04f 0900 	mov.w	r9, #0
 8000a9c:	e771      	b.n	8000982 <TrackBar+0x76>
	      FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,1);
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	9302      	str	r3, [sp, #8]
 8000aa2:	9701      	str	r7, [sp, #4]
 8000aa4:	f8cd 8000 	str.w	r8, [sp]
 8000aa8:	462b      	mov	r3, r5
 8000aaa:	4622      	mov	r2, r4
 8000aac:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000aae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8000ab0:	f7ff fe7e 	bl	80007b0 <FramePanel>
	      FillCircle(XPOS,YStart + (YEnd - YStart) / 2, Rad, TrackerColor);
 8000ab4:	ebb7 0708 	subs.w	r7, r7, r8
 8000ab8:	d408      	bmi.n	8000acc <TrackBar+0x1c0>
 8000aba:	eb08 0767 	add.w	r7, r8, r7, asr #1
 8000abe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000ac0:	4632      	mov	r2, r6
 8000ac2:	b2b9      	uxth	r1, r7
 8000ac4:	4650      	mov	r0, sl
 8000ac6:	f7ff ff0c 	bl	80008e2 <FillCircle>
 8000aca:	e773      	b.n	80009b4 <TrackBar+0xa8>
 8000acc:	3701      	adds	r7, #1
 8000ace:	e7f4      	b.n	8000aba <TrackBar+0x1ae>
		  FillCircle(XStart + ((XEnd - XStart) / 2),YPOS,Rad,TrackerColor);
 8000ad0:	3001      	adds	r0, #1
 8000ad2:	e767      	b.n	80009a4 <TrackBar+0x98>

08000ad4 <LCD_TrackBar>:
	}*/
	return NotClicked;
}

uint8 LCD_TrackBar(D_TrackBar *trackBar)
{
 8000ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ad8:	b088      	sub	sp, #32
//	uint8 TouchDet = GetCursorPosition();
//	uint16 Xdif, ValDif;
	TrackBar(trackBar->X1, trackBar->X2, trackBar->Y1, trackBar->Y2, trackBar->StartValue, trackBar->StopValue, trackBar->CurrentValue, trackBar->FrameColor, trackBar->BackColor, trackBar->TrackerColor, trackBar->Orientation, trackBar->Radius);
 8000ada:	6904      	ldr	r4, [r0, #16]
 8000adc:	6945      	ldr	r5, [r0, #20]
 8000ade:	6986      	ldr	r6, [r0, #24]
 8000ae0:	69c3      	ldr	r3, [r0, #28]
 8000ae2:	9303      	str	r3, [sp, #12]
 8000ae4:	f890 c028 	ldrb.w	ip, [r0, #40]	; 0x28
 8000ae8:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8000aec:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8000af0:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8000af4:	f9b0 7000 	ldrsh.w	r7, [r0]
 8000af8:	f890 e02c 	ldrb.w	lr, [r0, #44]	; 0x2c
 8000afc:	f8cd e01c 	str.w	lr, [sp, #28]
 8000b00:	f8cd c018 	str.w	ip, [sp, #24]
 8000b04:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000b06:	9305      	str	r3, [sp, #20]
 8000b08:	6a00      	ldr	r0, [r0, #32]
 8000b0a:	9004      	str	r0, [sp, #16]
 8000b0c:	b236      	sxth	r6, r6
 8000b0e:	9602      	str	r6, [sp, #8]
 8000b10:	b22d      	sxth	r5, r5
 8000b12:	9501      	str	r5, [sp, #4]
 8000b14:	b224      	sxth	r4, r4
 8000b16:	9400      	str	r4, [sp, #0]
 8000b18:	4643      	mov	r3, r8
 8000b1a:	4638      	mov	r0, r7
 8000b1c:	f7ff fef6 	bl	800090c <TrackBar>
//		{
//			return NotClicked;
//		}
//	}
	return NotClicked;
}
 8000b20:	2000      	movs	r0, #0
 8000b22:	b008      	add	sp, #32
 8000b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000b28 <MainFunc>:

extern LTDC_HandleTypeDef hltdc;
DisplayConfig ds;

void MainFunc ()
{
 8000b28:	b530      	push	{r4, r5, lr}
 8000b2a:	b08f      	sub	sp, #60	; 0x3c
	ds.Color_Type = Color565;
 8000b2c:	4c1d      	ldr	r4, [pc, #116]	; (8000ba4 <MainFunc+0x7c>)
 8000b2e:	2500      	movs	r5, #0
 8000b30:	7325      	strb	r5, [r4, #12]
	ds.Display_Height = 272;
 8000b32:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b36:	6063      	str	r3, [r4, #4]
	ds.Display_Width = 480;
 8000b38:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b3c:	60a3      	str	r3, [r4, #8]
	ds.Layers = 1;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	7363      	strb	r3, [r4, #13]
	ds.Start_RAM_Address = (uint32_t)&RGB;
 8000b42:	4919      	ldr	r1, [pc, #100]	; (8000ba8 <MainFunc+0x80>)
 8000b44:	6021      	str	r1, [r4, #0]

	HAL_LTDC_SetAddress(&hltdc,(uint32_t)&RGB,0);  // запускаем модуль LTDC (железный)
 8000b46:	462a      	mov	r2, r5
 8000b48:	4818      	ldr	r0, [pc, #96]	; (8000bac <MainFunc+0x84>)
 8000b4a:	f001 fca1 	bl	8002490 <HAL_LTDC_SetAddress>
	Graphics_Init(&ds); //инит библиотеки (из структуры ds)
 8000b4e:	4620      	mov	r0, r4
 8000b50:	f7ff fd50 	bl	80005f4 <Graphics_Init>

	Fill_Display(green);
 8000b54:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8000b58:	f7ff fd92 	bl	8000680 <Fill_Display>
	HAL_Delay(1000);
 8000b5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b60:	f000 ff26 	bl	80019b0 <HAL_Delay>
	check.FrameColor = blue;
	check.BackColor = white;
	check.CheckColor = black;
	check.Checked = 1;

	tr.X1 = 200;
 8000b64:	23c8      	movs	r3, #200	; 0xc8
 8000b66:	9301      	str	r3, [sp, #4]
	tr.X2 = 400;
 8000b68:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b6c:	9302      	str	r3, [sp, #8]
	tr.Y1 = 100;
 8000b6e:	2364      	movs	r3, #100	; 0x64
 8000b70:	9303      	str	r3, [sp, #12]
	tr.Y2 = 105;
 8000b72:	2369      	movs	r3, #105	; 0x69
 8000b74:	9304      	str	r3, [sp, #16]
	tr.StartValue = 0;
 8000b76:	9505      	str	r5, [sp, #20]
	tr.StopValue = 9;
 8000b78:	2309      	movs	r3, #9
 8000b7a:	9306      	str	r3, [sp, #24]
	tr.FrameColor = blue;
 8000b7c:	23ff      	movs	r3, #255	; 0xff
 8000b7e:	9308      	str	r3, [sp, #32]
	tr.BackColor = white;
 8000b80:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000b84:	9309      	str	r3, [sp, #36]	; 0x24
//	tr.Orientation = Horizontal;
	tr.Radius = 6;
 8000b86:	2306      	movs	r3, #6
 8000b88:	930c      	str	r3, [sp, #48]	; 0x30
	tr.TrackerColor = yellow;
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MainFunc+0x88>)
 8000b8c:	930a      	str	r3, [sp, #40]	; 0x28
//
//		Fill_Display(black);
//		LCD_CheckBox(&check);
//		HAL_Delay(3000);

		Fill_Display(black);
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f7ff fd76 	bl	8000680 <Fill_Display>
		LCD_TrackBar(&tr);
 8000b94:	a801      	add	r0, sp, #4
 8000b96:	f7ff ff9d 	bl	8000ad4 <LCD_TrackBar>
		HAL_Delay(3000);
 8000b9a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b9e:	f000 ff07 	bl	80019b0 <HAL_Delay>
 8000ba2:	e7f4      	b.n	8000b8e <MainFunc+0x66>
 8000ba4:	20000044 	.word	0x20000044
 8000ba8:	20000054 	.word	0x20000054
 8000bac:	2003fd24 	.word	0x2003fd24
 8000bb0:	00ffff00 	.word	0x00ffff00

08000bb4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000bb4:	b510      	push	{r4, lr}
 8000bb6:	b084      	sub	sp, #16
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bb8:	2400      	movs	r4, #0
 8000bba:	9400      	str	r4, [sp, #0]
 8000bbc:	9401      	str	r4, [sp, #4]
 8000bbe:	9402      	str	r4, [sp, #8]
 8000bc0:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000bc2:	f000 ff5b 	bl	8001a7c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	f88d 3000 	strb.w	r3, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bcc:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x20000004;
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <MPU_Config+0x54>)
 8000bd2:	9201      	str	r2, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000bd4:	2211      	movs	r2, #17
 8000bd6:	f88d 2008 	strb.w	r2, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000bda:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bde:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000be2:	2203      	movs	r2, #3
 8000be4:	f88d 200b 	strb.w	r2, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000be8:	f88d 400c 	strb.w	r4, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000bec:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000bf0:	f88d 300e 	strb.w	r3, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bf4:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bf8:	4668      	mov	r0, sp
 8000bfa:	f000 ff61 	bl	8001ac0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bfe:	2004      	movs	r0, #4
 8000c00:	f000 ff4c 	bl	8001a9c <HAL_MPU_Enable>

}
 8000c04:	b004      	add	sp, #16
 8000c06:	bd10      	pop	{r4, pc}
 8000c08:	20000004 	.word	0x20000004

08000c0c <MX_GPIO_Init>:
{
 8000c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c10:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c12:	2400      	movs	r4, #0
 8000c14:	940b      	str	r4, [sp, #44]	; 0x2c
 8000c16:	940c      	str	r4, [sp, #48]	; 0x30
 8000c18:	940d      	str	r4, [sp, #52]	; 0x34
 8000c1a:	940e      	str	r4, [sp, #56]	; 0x38
 8000c1c:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c1e:	4ba9      	ldr	r3, [pc, #676]	; (8000ec4 <MX_GPIO_Init+0x2b8>)
 8000c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c22:	f042 0210 	orr.w	r2, r2, #16
 8000c26:	631a      	str	r2, [r3, #48]	; 0x30
 8000c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c2a:	f002 0210 	and.w	r2, r2, #16
 8000c2e:	9200      	str	r2, [sp, #0]
 8000c30:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c38:	631a      	str	r2, [r3, #48]	; 0x30
 8000c3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c3c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000c40:	9201      	str	r2, [sp, #4]
 8000c42:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c46:	f042 0202 	orr.w	r2, r2, #2
 8000c4a:	631a      	str	r2, [r3, #48]	; 0x30
 8000c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c4e:	f002 0202 	and.w	r2, r2, #2
 8000c52:	9202      	str	r2, [sp, #8]
 8000c54:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c58:	f042 0208 	orr.w	r2, r2, #8
 8000c5c:	631a      	str	r2, [r3, #48]	; 0x30
 8000c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c60:	f002 0208 	and.w	r2, r2, #8
 8000c64:	9203      	str	r2, [sp, #12]
 8000c66:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c6a:	f042 0204 	orr.w	r2, r2, #4
 8000c6e:	631a      	str	r2, [r3, #48]	; 0x30
 8000c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c72:	f002 0204 	and.w	r2, r2, #4
 8000c76:	9204      	str	r2, [sp, #16]
 8000c78:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c7c:	f042 0201 	orr.w	r2, r2, #1
 8000c80:	631a      	str	r2, [r3, #48]	; 0x30
 8000c82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c84:	f002 0201 	and.w	r2, r2, #1
 8000c88:	9205      	str	r2, [sp, #20]
 8000c8a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c92:	631a      	str	r2, [r3, #48]	; 0x30
 8000c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c96:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000c9a:	9206      	str	r2, [sp, #24]
 8000c9c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ca0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ca4:	631a      	str	r2, [r3, #48]	; 0x30
 8000ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ca8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000cac:	9207      	str	r2, [sp, #28]
 8000cae:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000cb6:	631a      	str	r2, [r3, #48]	; 0x30
 8000cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cba:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000cbe:	9208      	str	r2, [sp, #32]
 8000cc0:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cc4:	f042 0220 	orr.w	r2, r2, #32
 8000cc8:	631a      	str	r2, [r3, #48]	; 0x30
 8000cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ccc:	f002 0220 	and.w	r2, r2, #32
 8000cd0:	9209      	str	r2, [sp, #36]	; 0x24
 8000cd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cda:	631a      	str	r2, [r3, #48]	; 0x30
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce2:	930a      	str	r3, [sp, #40]	; 0x28
 8000ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2120      	movs	r1, #32
 8000cea:	4877      	ldr	r0, [pc, #476]	; (8000ec8 <MX_GPIO_Init+0x2bc>)
 8000cec:	f001 f930 	bl	8001f50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8000cf0:	4622      	mov	r2, r4
 8000cf2:	210c      	movs	r1, #12
 8000cf4:	4875      	ldr	r0, [pc, #468]	; (8000ecc <MX_GPIO_Init+0x2c0>)
 8000cf6:	f001 f92b 	bl	8001f50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2108      	movs	r1, #8
 8000cfe:	4874      	ldr	r0, [pc, #464]	; (8000ed0 <MX_GPIO_Init+0x2c4>)
 8000d00:	f001 f926 	bl	8001f50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d0a:	4870      	ldr	r0, [pc, #448]	; (8000ecc <MX_GPIO_Init+0x2c0>)
 8000d0c:	f001 f920 	bl	8001f50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d10:	4622      	mov	r2, r4
 8000d12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d16:	486f      	ldr	r0, [pc, #444]	; (8000ed4 <MX_GPIO_Init+0x2c8>)
 8000d18:	f001 f91a 	bl	8001f50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000d1c:	4622      	mov	r2, r4
 8000d1e:	21c8      	movs	r1, #200	; 0xc8
 8000d20:	486d      	ldr	r0, [pc, #436]	; (8000ed8 <MX_GPIO_Init+0x2cc>)
 8000d22:	f001 f915 	bl	8001f50 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000d26:	f04f 0b08 	mov.w	fp, #8
 8000d2a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d32:	a90b      	add	r1, sp, #44	; 0x2c
 8000d34:	4869      	ldr	r0, [pc, #420]	; (8000edc <MX_GPIO_Init+0x2d0>)
 8000d36:	f001 f81d 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2502      	movs	r5, #2
 8000d40:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2603      	movs	r6, #3
 8000d46:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d48:	2309      	movs	r3, #9
 8000d4a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	a90b      	add	r1, sp, #44	; 0x2c
 8000d4e:	4863      	ldr	r0, [pc, #396]	; (8000edc <MX_GPIO_Init+0x2d0>)
 8000d50:	f001 f810 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000d54:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000d58:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d60:	230b      	movs	r3, #11
 8000d62:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d64:	a90b      	add	r1, sp, #44	; 0x2c
 8000d66:	485c      	ldr	r0, [pc, #368]	; (8000ed8 <MX_GPIO_Init+0x2cc>)
 8000d68:	f001 f804 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000d6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d70:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d72:	2312      	movs	r3, #18
 8000d74:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	a90b      	add	r1, sp, #44	; 0x2c
 8000d80:	4857      	ldr	r0, [pc, #348]	; (8000ee0 <MX_GPIO_Init+0x2d4>)
 8000d82:	f000 fff7 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000d86:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000d8a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d92:	f04f 080a 	mov.w	r8, #10
 8000d96:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9a:	a90b      	add	r1, sp, #44	; 0x2c
 8000d9c:	4850      	ldr	r0, [pc, #320]	; (8000ee0 <MX_GPIO_Init+0x2d4>)
 8000d9e:	f000 ffe9 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000da2:	2310      	movs	r3, #16
 8000da4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dac:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000dae:	a90b      	add	r1, sp, #44	; 0x2c
 8000db0:	484b      	ldr	r0, [pc, #300]	; (8000ee0 <MX_GPIO_Init+0x2d4>)
 8000db2:	f000 ffdf 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000db6:	f04f 0a80 	mov.w	sl, #128	; 0x80
 8000dba:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000dc4:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	a90b      	add	r1, sp, #44	; 0x2c
 8000dca:	483f      	ldr	r0, [pc, #252]	; (8000ec8 <MX_GPIO_Init+0x2bc>)
 8000dcc:	f000 ffd2 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000dd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dd4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ddc:	2701      	movs	r7, #1
 8000dde:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000de0:	a90b      	add	r1, sp, #44	; 0x2c
 8000de2:	4840      	ldr	r0, [pc, #256]	; (8000ee4 <MX_GPIO_Init+0x2d8>)
 8000de4:	f000 ffc6 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000de8:	2360      	movs	r3, #96	; 0x60
 8000dea:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000df2:	f04f 090d 	mov.w	r9, #13
 8000df6:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dfa:	a90b      	add	r1, sp, #44	; 0x2c
 8000dfc:	4837      	ldr	r0, [pc, #220]	; (8000edc <MX_GPIO_Init+0x2d0>)
 8000dfe:	f000 ffb9 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000e02:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000e10:	a90b      	add	r1, sp, #44	; 0x2c
 8000e12:	4833      	ldr	r0, [pc, #204]	; (8000ee0 <MX_GPIO_Init+0x2d4>)
 8000e14:	f000 ffae 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000e18:	2340      	movs	r3, #64	; 0x40
 8000e1a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e22:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000e26:	a90b      	add	r1, sp, #44	; 0x2c
 8000e28:	482d      	ldr	r0, [pc, #180]	; (8000ee0 <MX_GPIO_Init+0x2d4>)
 8000e2a:	f000 ffa3 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e32:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e34:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e38:	a90b      	add	r1, sp, #44	; 0x2c
 8000e3a:	482b      	ldr	r0, [pc, #172]	; (8000ee8 <MX_GPIO_Init+0x2dc>)
 8000e3c:	f000 ff9a 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000e40:	2340      	movs	r3, #64	; 0x40
 8000e42:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e44:	4b29      	ldr	r3, [pc, #164]	; (8000eec <MX_GPIO_Init+0x2e0>)
 8000e46:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	a90b      	add	r1, sp, #44	; 0x2c
 8000e4c:	481e      	ldr	r0, [pc, #120]	; (8000ec8 <MX_GPIO_Init+0x2bc>)
 8000e4e:	f000 ff91 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000e52:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e56:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e5e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	a90b      	add	r1, sp, #44	; 0x2c
 8000e64:	481f      	ldr	r0, [pc, #124]	; (8000ee4 <MX_GPIO_Init+0x2d8>)
 8000e66:	f000 ff85 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000e6a:	23f0      	movs	r3, #240	; 0xf0
 8000e6c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000e74:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e78:	a90b      	add	r1, sp, #44	; 0x2c
 8000e7a:	4814      	ldr	r0, [pc, #80]	; (8000ecc <MX_GPIO_Init+0x2c0>)
 8000e7c:	f000 ff7a 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e84:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000e8c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000e90:	a90b      	add	r1, sp, #44	; 0x2c
 8000e92:	4811      	ldr	r0, [pc, #68]	; (8000ed8 <MX_GPIO_Init+0x2cc>)
 8000e94:	f000 ff6e 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000e98:	2320      	movs	r3, #32
 8000e9a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	a90b      	add	r1, sp, #44	; 0x2c
 8000ea4:	4808      	ldr	r0, [pc, #32]	; (8000ec8 <MX_GPIO_Init+0x2bc>)
 8000ea6:	f000 ff65 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000eaa:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000eb4:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	a90b      	add	r1, sp, #44	; 0x2c
 8000eba:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <MX_GPIO_Init+0x2bc>)
 8000ebc:	f000 ff5a 	bl	8001d74 <HAL_GPIO_Init>
 8000ec0:	e016      	b.n	8000ef0 <MX_GPIO_Init+0x2e4>
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020c00 	.word	0x40020c00
 8000ecc:	40022000 	.word	0x40022000
 8000ed0:	40022800 	.word	0x40022800
 8000ed4:	40021c00 	.word	0x40021c00
 8000ed8:	40021800 	.word	0x40021800
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40020400 	.word	0x40020400
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40022400 	.word	0x40022400
 8000eec:	10120000 	.word	0x10120000
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000ef0:	f241 030c 	movw	r3, #4108	; 0x100c
 8000ef4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000efc:	a90b      	add	r1, sp, #44	; 0x2c
 8000efe:	488d      	ldr	r0, [pc, #564]	; (8001134 <MX_GPIO_Init+0x528>)
 8000f00:	f000 ff38 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000f04:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
 8000f08:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0c:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000f10:	a90b      	add	r1, sp, #44	; 0x2c
 8000f12:	4889      	ldr	r0, [pc, #548]	; (8001138 <MX_GPIO_Init+0x52c>)
 8000f14:	f000 ff2e 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000f18:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000f22:	a90b      	add	r1, sp, #44	; 0x2c
 8000f24:	4885      	ldr	r0, [pc, #532]	; (800113c <MX_GPIO_Init+0x530>)
 8000f26:	f000 ff25 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f2e:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f36:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	a90b      	add	r1, sp, #44	; 0x2c
 8000f3c:	4880      	ldr	r0, [pc, #512]	; (8001140 <MX_GPIO_Init+0x534>)
 8000f3e:	f000 ff19 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000f42:	2210      	movs	r2, #16
 8000f44:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f46:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	a90b      	add	r1, sp, #44	; 0x2c
 8000f4c:	487d      	ldr	r0, [pc, #500]	; (8001144 <MX_GPIO_Init+0x538>)
 8000f4e:	f000 ff11 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000f52:	f248 0304 	movw	r3, #32772	; 0x8004
 8000f56:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f58:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f5c:	a90b      	add	r1, sp, #44	; 0x2c
 8000f5e:	487a      	ldr	r0, [pc, #488]	; (8001148 <MX_GPIO_Init+0x53c>)
 8000f60:	f000 ff08 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000f64:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f6c:	2205      	movs	r2, #5
 8000f6e:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000f70:	a90b      	add	r1, sp, #44	; 0x2c
 8000f72:	4870      	ldr	r0, [pc, #448]	; (8001134 <MX_GPIO_Init+0x528>)
 8000f74:	f000 fefe 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000f78:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f82:	a90b      	add	r1, sp, #44	; 0x2c
 8000f84:	4870      	ldr	r0, [pc, #448]	; (8001148 <MX_GPIO_Init+0x53c>)
 8000f86:	f000 fef5 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000f8a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000f8e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f96:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f9a:	a90b      	add	r1, sp, #44	; 0x2c
 8000f9c:	486a      	ldr	r0, [pc, #424]	; (8001148 <MX_GPIO_Init+0x53c>)
 8000f9e:	f000 fee9 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000fa2:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000faa:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000fac:	a90b      	add	r1, sp, #44	; 0x2c
 8000fae:	4861      	ldr	r0, [pc, #388]	; (8001134 <MX_GPIO_Init+0x528>)
 8000fb0:	f000 fee0 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb8:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	a90b      	add	r1, sp, #44	; 0x2c
 8000fc6:	4861      	ldr	r0, [pc, #388]	; (800114c <MX_GPIO_Init+0x540>)
 8000fc8:	f000 fed4 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000fcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fd8:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000fda:	a90b      	add	r1, sp, #44	; 0x2c
 8000fdc:	485b      	ldr	r0, [pc, #364]	; (800114c <MX_GPIO_Init+0x540>)
 8000fde:	f000 fec9 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000fe2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fe6:	4b5a      	ldr	r3, [pc, #360]	; (8001150 <MX_GPIO_Init+0x544>)
 8000fe8:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000fec:	a90b      	add	r1, sp, #44	; 0x2c
 8000fee:	4851      	ldr	r0, [pc, #324]	; (8001134 <MX_GPIO_Init+0x528>)
 8000ff0:	f000 fec0 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000ff4:	23c0      	movs	r3, #192	; 0xc0
 8000ff6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000ffe:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001002:	a90b      	add	r1, sp, #44	; 0x2c
 8001004:	484c      	ldr	r0, [pc, #304]	; (8001138 <MX_GPIO_Init+0x52c>)
 8001006:	f000 feb5 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800100a:	2310      	movs	r3, #16
 800100c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001014:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001018:	a90b      	add	r1, sp, #44	; 0x2c
 800101a:	484b      	ldr	r0, [pc, #300]	; (8001148 <MX_GPIO_Init+0x53c>)
 800101c:	f000 feaa 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001020:	23c8      	movs	r3, #200	; 0xc8
 8001022:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800102a:	a90b      	add	r1, sp, #44	; 0x2c
 800102c:	4844      	ldr	r0, [pc, #272]	; (8001140 <MX_GPIO_Init+0x534>)
 800102e:	f000 fea1 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001032:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001036:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001038:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800103c:	a90b      	add	r1, sp, #44	; 0x2c
 800103e:	4845      	ldr	r0, [pc, #276]	; (8001154 <MX_GPIO_Init+0x548>)
 8001040:	f000 fe98 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001044:	2305      	movs	r3, #5
 8001046:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800104e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001052:	a90b      	add	r1, sp, #44	; 0x2c
 8001054:	4838      	ldr	r0, [pc, #224]	; (8001138 <MX_GPIO_Init+0x52c>)
 8001056:	f000 fe8d 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800105a:	2332      	movs	r3, #50	; 0x32
 800105c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001064:	230b      	movs	r3, #11
 8001066:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001068:	a90b      	add	r1, sp, #44	; 0x2c
 800106a:	4833      	ldr	r0, [pc, #204]	; (8001138 <MX_GPIO_Init+0x52c>)
 800106c:	f000 fe82 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001070:	2304      	movs	r3, #4
 8001072:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800107a:	2309      	movs	r3, #9
 800107c:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	a90b      	add	r1, sp, #44	; 0x2c
 8001080:	4835      	ldr	r0, [pc, #212]	; (8001158 <MX_GPIO_Init+0x54c>)
 8001082:	f000 fe77 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001086:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800108a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001092:	2309      	movs	r3, #9
 8001094:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001096:	a90b      	add	r1, sp, #44	; 0x2c
 8001098:	482a      	ldr	r0, [pc, #168]	; (8001144 <MX_GPIO_Init+0x538>)
 800109a:	f000 fe6b 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800109e:	2304      	movs	r3, #4
 80010a0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80010a6:	a90b      	add	r1, sp, #44	; 0x2c
 80010a8:	4825      	ldr	r0, [pc, #148]	; (8001140 <MX_GPIO_Init+0x534>)
 80010aa:	f000 fe63 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80010ae:	2386      	movs	r3, #134	; 0x86
 80010b0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b6:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010b8:	230b      	movs	r3, #11
 80010ba:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	a90b      	add	r1, sp, #44	; 0x2c
 80010be:	4823      	ldr	r0, [pc, #140]	; (800114c <MX_GPIO_Init+0x540>)
 80010c0:	f000 fe58 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80010c4:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c6:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80010ca:	a90b      	add	r1, sp, #44	; 0x2c
 80010cc:	481f      	ldr	r0, [pc, #124]	; (800114c <MX_GPIO_Init+0x540>)
 80010ce:	f000 fe51 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80010d2:	2350      	movs	r3, #80	; 0x50
 80010d4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010dc:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	a90b      	add	r1, sp, #44	; 0x2c
 80010e2:	481a      	ldr	r0, [pc, #104]	; (800114c <MX_GPIO_Init+0x540>)
 80010e4:	f000 fe46 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80010e8:	2328      	movs	r3, #40	; 0x28
 80010ea:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f0:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010f2:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	a90b      	add	r1, sp, #44	; 0x2c
 80010f8:	4814      	ldr	r0, [pc, #80]	; (800114c <MX_GPIO_Init+0x540>)
 80010fa:	f000 fe3b 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80010fe:	2340      	movs	r3, #64	; 0x40
 8001100:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001108:	2309      	movs	r3, #9
 800110a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800110c:	a90b      	add	r1, sp, #44	; 0x2c
 800110e:	480e      	ldr	r0, [pc, #56]	; (8001148 <MX_GPIO_Init+0x53c>)
 8001110:	f000 fe30 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001114:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001118:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001120:	2305      	movs	r3, #5
 8001122:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001124:	a90b      	add	r1, sp, #44	; 0x2c
 8001126:	480c      	ldr	r0, [pc, #48]	; (8001158 <MX_GPIO_Init+0x54c>)
 8001128:	f000 fe24 	bl	8001d74 <HAL_GPIO_Init>
}
 800112c:	b011      	add	sp, #68	; 0x44
 800112e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001132:	bf00      	nop
 8001134:	40022000 	.word	0x40022000
 8001138:	40020800 	.word	0x40020800
 800113c:	40022800 	.word	0x40022800
 8001140:	40021800 	.word	0x40021800
 8001144:	40020c00 	.word	0x40020c00
 8001148:	40021c00 	.word	0x40021c00
 800114c:	40020000 	.word	0x40020000
 8001150:	10120000 	.word	0x10120000
 8001154:	40021400 	.word	0x40021400
 8001158:	40020400 	.word	0x40020400

0800115c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800115c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800115e:	6802      	ldr	r2, [r0, #0]
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001162:	429a      	cmp	r2, r3
 8001164:	d000      	beq.n	8001168 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001166:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8001168:	f000 fc10 	bl	800198c <HAL_IncTick>
}
 800116c:	e7fb      	b.n	8001166 <HAL_TIM_PeriodElapsedCallback+0xa>
 800116e:	bf00      	nop
 8001170:	40001000 	.word	0x40001000

08001174 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001174:	b672      	cpsid	i
 8001176:	e7fe      	b.n	8001176 <Error_Handler+0x2>

08001178 <MX_DMA2D_Init>:
{
 8001178:	b508      	push	{r3, lr}
  hdma2d.Instance = DMA2D;
 800117a:	480c      	ldr	r0, [pc, #48]	; (80011ac <MX_DMA2D_Init+0x34>)
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_DMA2D_Init+0x38>)
 800117e:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001180:	2300      	movs	r3, #0
 8001182:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001184:	2202      	movs	r2, #2
 8001186:	6082      	str	r2, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8001188:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800118a:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800118c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800118e:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001190:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001192:	f000 fcbf 	bl	8001b14 <HAL_DMA2D_Init>
 8001196:	b928      	cbnz	r0, 80011a4 <MX_DMA2D_Init+0x2c>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001198:	2101      	movs	r1, #1
 800119a:	4804      	ldr	r0, [pc, #16]	; (80011ac <MX_DMA2D_Init+0x34>)
 800119c:	f000 fd88 	bl	8001cb0 <HAL_DMA2D_ConfigLayer>
 80011a0:	b910      	cbnz	r0, 80011a8 <MX_DMA2D_Init+0x30>
}
 80011a2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80011a4:	f7ff ffe6 	bl	8001174 <Error_Handler>
    Error_Handler();
 80011a8:	f7ff ffe4 	bl	8001174 <Error_Handler>
 80011ac:	2003fdec 	.word	0x2003fdec
 80011b0:	4002b000 	.word	0x4002b000

080011b4 <MX_FMC_Init>:
{
 80011b4:	b500      	push	{lr}
 80011b6:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80011b8:	4814      	ldr	r0, [pc, #80]	; (800120c <MX_FMC_Init+0x58>)
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_FMC_Init+0x5c>)
 80011bc:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80011be:	2300      	movs	r3, #0
 80011c0:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80011c2:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80011c4:	2104      	movs	r1, #4
 80011c6:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80011c8:	2210      	movs	r2, #16
 80011ca:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80011cc:	2240      	movs	r2, #64	; 0x40
 80011ce:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80011d0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80011d4:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80011d6:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80011d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011dc:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80011de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011e2:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80011e4:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80011ea:	2206      	movs	r2, #6
 80011ec:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 80011ee:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
 80011f0:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80011f2:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 2;
 80011f4:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 80011f6:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80011f8:	4469      	add	r1, sp
 80011fa:	f002 fa4b 	bl	8003694 <HAL_SDRAM_Init>
 80011fe:	b910      	cbnz	r0, 8001206 <MX_FMC_Init+0x52>
}
 8001200:	b009      	add	sp, #36	; 0x24
 8001202:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8001206:	f7ff ffb5 	bl	8001174 <Error_Handler>
 800120a:	bf00      	nop
 800120c:	2003fe2c 	.word	0x2003fe2c
 8001210:	a0000140 	.word	0xa0000140

08001214 <MX_I2C3_Init>:
{
 8001214:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 8001216:	4811      	ldr	r0, [pc, #68]	; (800125c <MX_I2C3_Init+0x48>)
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_I2C3_Init+0x4c>)
 800121a:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_I2C3_Init+0x50>)
 800121e:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 224;
 8001220:	23e0      	movs	r3, #224	; 0xe0
 8001222:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001224:	2301      	movs	r3, #1
 8001226:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800122c:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800122e:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001230:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001232:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001234:	f000 fe92 	bl	8001f5c <HAL_I2C_Init>
 8001238:	b950      	cbnz	r0, 8001250 <MX_I2C3_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800123a:	2100      	movs	r1, #0
 800123c:	4807      	ldr	r0, [pc, #28]	; (800125c <MX_I2C3_Init+0x48>)
 800123e:	f000 feeb 	bl	8002018 <HAL_I2CEx_ConfigAnalogFilter>
 8001242:	b938      	cbnz	r0, 8001254 <MX_I2C3_Init+0x40>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001244:	2100      	movs	r1, #0
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_I2C3_Init+0x48>)
 8001248:	f000 ff14 	bl	8002074 <HAL_I2CEx_ConfigDigitalFilter>
 800124c:	b920      	cbnz	r0, 8001258 <MX_I2C3_Init+0x44>
}
 800124e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001250:	f7ff ff90 	bl	8001174 <Error_Handler>
    Error_Handler();
 8001254:	f7ff ff8e 	bl	8001174 <Error_Handler>
    Error_Handler();
 8001258:	f7ff ff8c 	bl	8001174 <Error_Handler>
 800125c:	2003fc54 	.word	0x2003fc54
 8001260:	40005c00 	.word	0x40005c00
 8001264:	00c0eaff 	.word	0x00c0eaff

08001268 <MX_LTDC_Init>:
{
 8001268:	b500      	push	{lr}
 800126a:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800126c:	2234      	movs	r2, #52	; 0x34
 800126e:	2100      	movs	r1, #0
 8001270:	a801      	add	r0, sp, #4
 8001272:	f002 fcab 	bl	8003bcc <memset>
  hltdc.Instance = LTDC;
 8001276:	4826      	ldr	r0, [pc, #152]	; (8001310 <MX_LTDC_Init+0xa8>)
 8001278:	4b26      	ldr	r3, [pc, #152]	; (8001314 <MX_LTDC_Init+0xac>)
 800127a:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800127c:	2300      	movs	r3, #0
 800127e:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001280:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001282:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001284:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 40;
 8001286:	2228      	movs	r2, #40	; 0x28
 8001288:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 9;
 800128a:	2209      	movs	r2, #9
 800128c:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800128e:	2235      	movs	r2, #53	; 0x35
 8001290:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001292:	220b      	movs	r2, #11
 8001294:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001296:	f240 2215 	movw	r2, #533	; 0x215
 800129a:	6242      	str	r2, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800129c:	f240 121b 	movw	r2, #283	; 0x11b
 80012a0:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80012a2:	f240 2235 	movw	r2, #565	; 0x235
 80012a6:	62c2      	str	r2, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80012a8:	f240 121d 	movw	r2, #285	; 0x11d
 80012ac:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80012ae:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80012b2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80012b6:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80012ba:	f000 ffd1 	bl	8002260 <HAL_LTDC_Init>
 80012be:	bb18      	cbnz	r0, 8001308 <MX_LTDC_Init+0xa0>
  pLayerCfg.WindowX0 = 0;
 80012c0:	2200      	movs	r2, #0
 80012c2:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 80012c4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80012c8:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 80012ca:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 80012cc:	f44f 7388 	mov.w	r3, #272	; 0x110
 80012d0:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80012d2:	2002      	movs	r0, #2
 80012d4:	9005      	str	r0, [sp, #20]
  pLayerCfg.Alpha = 255;
 80012d6:	20ff      	movs	r0, #255	; 0xff
 80012d8:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 80012da:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80012dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80012e0:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80012e2:	2005      	movs	r0, #5
 80012e4:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80012e6:	920a      	str	r2, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80012e8:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80012ea:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80012ec:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80012f0:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80012f4:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012f8:	a901      	add	r1, sp, #4
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_LTDC_Init+0xa8>)
 80012fc:	f001 f89a 	bl	8002434 <HAL_LTDC_ConfigLayer>
 8001300:	b920      	cbnz	r0, 800130c <MX_LTDC_Init+0xa4>
}
 8001302:	b00f      	add	sp, #60	; 0x3c
 8001304:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001308:	f7ff ff34 	bl	8001174 <Error_Handler>
    Error_Handler();
 800130c:	f7ff ff32 	bl	8001174 <Error_Handler>
 8001310:	2003fd24 	.word	0x2003fd24
 8001314:	40016800 	.word	0x40016800

08001318 <MX_RTC_Init>:
{
 8001318:	b510      	push	{r4, lr}
 800131a:	b092      	sub	sp, #72	; 0x48
  RTC_TimeTypeDef sTime = {0};
 800131c:	2400      	movs	r4, #0
 800131e:	940c      	str	r4, [sp, #48]	; 0x30
 8001320:	940d      	str	r4, [sp, #52]	; 0x34
 8001322:	940e      	str	r4, [sp, #56]	; 0x38
 8001324:	940f      	str	r4, [sp, #60]	; 0x3c
 8001326:	9410      	str	r4, [sp, #64]	; 0x40
 8001328:	9411      	str	r4, [sp, #68]	; 0x44
  RTC_DateTypeDef sDate = {0};
 800132a:	940b      	str	r4, [sp, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800132c:	222c      	movs	r2, #44	; 0x2c
 800132e:	4621      	mov	r1, r4
 8001330:	4668      	mov	r0, sp
 8001332:	f002 fc4b 	bl	8003bcc <memset>
  hrtc.Instance = RTC;
 8001336:	4831      	ldr	r0, [pc, #196]	; (80013fc <MX_RTC_Init+0xe4>)
 8001338:	4b31      	ldr	r3, [pc, #196]	; (8001400 <MX_RTC_Init+0xe8>)
 800133a:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800133c:	6044      	str	r4, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 800133e:	237f      	movs	r3, #127	; 0x7f
 8001340:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8001342:	23ff      	movs	r3, #255	; 0xff
 8001344:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001346:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001348:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800134a:	6184      	str	r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800134c:	f001 ff68 	bl	8003220 <HAL_RTC_Init>
 8001350:	2800      	cmp	r0, #0
 8001352:	d147      	bne.n	80013e4 <MX_RTC_Init+0xcc>
  sTime.Hours = 0x0;
 8001354:	2300      	movs	r3, #0
 8001356:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  sTime.Minutes = 0x0;
 800135a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  sTime.Seconds = 0x0;
 800135e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001362:	9310      	str	r3, [sp, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001364:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001366:	2201      	movs	r2, #1
 8001368:	a90c      	add	r1, sp, #48	; 0x30
 800136a:	4824      	ldr	r0, [pc, #144]	; (80013fc <MX_RTC_Init+0xe4>)
 800136c:	f001 ffc6 	bl	80032fc <HAL_RTC_SetTime>
 8001370:	2800      	cmp	r0, #0
 8001372:	d139      	bne.n	80013e8 <MX_RTC_Init+0xd0>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001374:	2201      	movs	r2, #1
 8001376:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800137a:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  sDate.Date = 0x1;
 800137e:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
  sDate.Year = 0x0;
 8001382:	2300      	movs	r3, #0
 8001384:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001388:	a90b      	add	r1, sp, #44	; 0x2c
 800138a:	481c      	ldr	r0, [pc, #112]	; (80013fc <MX_RTC_Init+0xe4>)
 800138c:	f002 f836 	bl	80033fc <HAL_RTC_SetDate>
 8001390:	bb60      	cbnz	r0, 80013ec <MX_RTC_Init+0xd4>
  sAlarm.AlarmTime.Hours = 0x0;
 8001392:	2300      	movs	r3, #0
 8001394:	f88d 3000 	strb.w	r3, [sp]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001398:	f88d 3001 	strb.w	r3, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800139c:	f88d 3002 	strb.w	r3, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80013a0:	9301      	str	r3, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013a2:	9304      	str	r3, [sp, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013a4:	9305      	str	r3, [sp, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80013a6:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80013a8:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80013aa:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80013ac:	2201      	movs	r2, #1
 80013ae:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80013b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b6:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80013b8:	4669      	mov	r1, sp
 80013ba:	4810      	ldr	r0, [pc, #64]	; (80013fc <MX_RTC_Init+0xe4>)
 80013bc:	f002 f88c 	bl	80034d8 <HAL_RTC_SetAlarm>
 80013c0:	b9b0      	cbnz	r0, 80013f0 <MX_RTC_Init+0xd8>
  sAlarm.Alarm = RTC_ALARM_B;
 80013c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013c6:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80013c8:	2201      	movs	r2, #1
 80013ca:	4669      	mov	r1, sp
 80013cc:	480b      	ldr	r0, [pc, #44]	; (80013fc <MX_RTC_Init+0xe4>)
 80013ce:	f002 f883 	bl	80034d8 <HAL_RTC_SetAlarm>
 80013d2:	b978      	cbnz	r0, 80013f4 <MX_RTC_Init+0xdc>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80013d4:	2202      	movs	r2, #2
 80013d6:	2100      	movs	r1, #0
 80013d8:	4808      	ldr	r0, [pc, #32]	; (80013fc <MX_RTC_Init+0xe4>)
 80013da:	f002 f92d 	bl	8003638 <HAL_RTCEx_SetTimeStamp>
 80013de:	b958      	cbnz	r0, 80013f8 <MX_RTC_Init+0xe0>
}
 80013e0:	b012      	add	sp, #72	; 0x48
 80013e2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80013e4:	f7ff fec6 	bl	8001174 <Error_Handler>
    Error_Handler();
 80013e8:	f7ff fec4 	bl	8001174 <Error_Handler>
    Error_Handler();
 80013ec:	f7ff fec2 	bl	8001174 <Error_Handler>
    Error_Handler();
 80013f0:	f7ff fec0 	bl	8001174 <Error_Handler>
    Error_Handler();
 80013f4:	f7ff febe 	bl	8001174 <Error_Handler>
    Error_Handler();
 80013f8:	f7ff febc 	bl	8001174 <Error_Handler>
 80013fc:	2003fdcc 	.word	0x2003fdcc
 8001400:	40002800 	.word	0x40002800

08001404 <SystemClock_Config>:
{
 8001404:	b500      	push	{lr}
 8001406:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001408:	2230      	movs	r2, #48	; 0x30
 800140a:	2100      	movs	r1, #0
 800140c:	a828      	add	r0, sp, #160	; 0xa0
 800140e:	f002 fbdd 	bl	8003bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001412:	2100      	movs	r1, #0
 8001414:	9123      	str	r1, [sp, #140]	; 0x8c
 8001416:	9124      	str	r1, [sp, #144]	; 0x90
 8001418:	9125      	str	r1, [sp, #148]	; 0x94
 800141a:	9126      	str	r1, [sp, #152]	; 0x98
 800141c:	9127      	str	r1, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800141e:	2284      	movs	r2, #132	; 0x84
 8001420:	a802      	add	r0, sp, #8
 8001422:	f002 fbd3 	bl	8003bcc <memset>
  HAL_PWR_EnableBkUpAccess();
 8001426:	f001 f855 	bl	80024d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	4b33      	ldr	r3, [pc, #204]	; (80014f8 <SystemClock_Config+0xf4>)
 800142c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800142e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001432:	641a      	str	r2, [r3, #64]	; 0x40
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800143e:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <SystemClock_Config+0xf8>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001452:	2309      	movs	r3, #9
 8001454:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800145a:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800145c:	2301      	movs	r3, #1
 800145e:	932d      	str	r3, [sp, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001460:	2302      	movs	r3, #2
 8001462:	932e      	str	r3, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001464:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001468:	922f      	str	r2, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800146a:	2219      	movs	r2, #25
 800146c:	9230      	str	r2, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800146e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001472:	9231      	str	r2, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001474:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001476:	2308      	movs	r3, #8
 8001478:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147a:	a828      	add	r0, sp, #160	; 0xa0
 800147c:	f001 f870 	bl	8002560 <HAL_RCC_OscConfig>
 8001480:	2800      	cmp	r0, #0
 8001482:	d131      	bne.n	80014e8 <SystemClock_Config+0xe4>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001484:	f001 f82e 	bl	80024e4 <HAL_PWREx_EnableOverDrive>
 8001488:	2800      	cmp	r0, #0
 800148a:	d12f      	bne.n	80014ec <SystemClock_Config+0xe8>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148c:	230f      	movs	r3, #15
 800148e:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001490:	2302      	movs	r3, #2
 8001492:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001498:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800149c:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800149e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a2:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80014a4:	2106      	movs	r1, #6
 80014a6:	a823      	add	r0, sp, #140	; 0x8c
 80014a8:	f001 fac8 	bl	8002a3c <HAL_RCC_ClockConfig>
 80014ac:	bb00      	cbnz	r0, 80014f0 <SystemClock_Config+0xec>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <SystemClock_Config+0xfc>)
 80014b0:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 80014b2:	2364      	movs	r3, #100	; 0x64
 80014b4:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80014b6:	2302      	movs	r3, #2
 80014b8:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80014ba:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80014bc:	2300      	movs	r3, #0
 80014be:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80014c0:	2201      	movs	r2, #1
 80014c2:	920c      	str	r2, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80014c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014c8:	920d      	str	r2, [sp, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ce:	920e      	str	r2, [sp, #56]	; 0x38
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80014d0:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80014d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014d6:	9221      	str	r2, [sp, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80014d8:	9322      	str	r3, [sp, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014da:	a802      	add	r0, sp, #8
 80014dc:	f001 fb96 	bl	8002c0c <HAL_RCCEx_PeriphCLKConfig>
 80014e0:	b940      	cbnz	r0, 80014f4 <SystemClock_Config+0xf0>
}
 80014e2:	b035      	add	sp, #212	; 0xd4
 80014e4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80014e8:	f7ff fe44 	bl	8001174 <Error_Handler>
    Error_Handler();
 80014ec:	f7ff fe42 	bl	8001174 <Error_Handler>
    Error_Handler();
 80014f0:	f7ff fe40 	bl	8001174 <Error_Handler>
    Error_Handler();
 80014f4:	f7ff fe3e 	bl	8001174 <Error_Handler>
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40007000 	.word	0x40007000
 8001500:	00a10028 	.word	0x00a10028

08001504 <main>:
{
 8001504:	b508      	push	{r3, lr}
  MPU_Config();
 8001506:	f7ff fb55 	bl	8000bb4 <MPU_Config>
  HAL_Init();
 800150a:	f000 fa2d 	bl	8001968 <HAL_Init>
  SystemClock_Config();
 800150e:	f7ff ff79 	bl	8001404 <SystemClock_Config>
  HAL_Delay(500);
 8001512:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001516:	f000 fa4b 	bl	80019b0 <HAL_Delay>
  MX_GPIO_Init();
 800151a:	f7ff fb77 	bl	8000c0c <MX_GPIO_Init>
  MX_DMA2D_Init();
 800151e:	f7ff fe2b 	bl	8001178 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001522:	f7ff fe47 	bl	80011b4 <MX_FMC_Init>
  MX_I2C3_Init();
 8001526:	f7ff fe75 	bl	8001214 <MX_I2C3_Init>
  MX_LTDC_Init();
 800152a:	f7ff fe9d 	bl	8001268 <MX_LTDC_Init>
  MX_RTC_Init();
 800152e:	f7ff fef3 	bl	8001318 <MX_RTC_Init>
	  MainFunc ();
 8001532:	f7ff faf9 	bl	8000b28 <MainFunc>
 8001536:	e7fc      	b.n	8001532 <main+0x2e>

08001538 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153a:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800153c:	2300      	movs	r3, #0
 800153e:	9301      	str	r3, [sp, #4]
 8001540:	9302      	str	r3, [sp, #8]
 8001542:	9303      	str	r3, [sp, #12]
 8001544:	9304      	str	r3, [sp, #16]
 8001546:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8001548:	4b2a      	ldr	r3, [pc, #168]	; (80015f4 <HAL_FMC_MspInit+0xbc>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	b10b      	cbz	r3, 8001552 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800154e:	b007      	add	sp, #28
 8001550:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8001552:	4b28      	ldr	r3, [pc, #160]	; (80015f4 <HAL_FMC_MspInit+0xbc>)
 8001554:	2201      	movs	r2, #1
 8001556:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001558:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <HAL_FMC_MspInit+0xc0>)
 800155a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800155c:	f042 0201 	orr.w	r2, r2, #1
 8001560:	639a      	str	r2, [r3, #56]	; 0x38
 8001562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800156c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001570:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2602      	movs	r6, #2
 8001574:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2503      	movs	r5, #3
 8001578:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800157a:	240c      	movs	r4, #12
 800157c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800157e:	a901      	add	r1, sp, #4
 8001580:	481e      	ldr	r0, [pc, #120]	; (80015fc <HAL_FMC_MspInit+0xc4>)
 8001582:	f000 fbf7 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001586:	f248 1333 	movw	r3, #33075	; 0x8133
 800158a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2700      	movs	r7, #0
 8001590:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001592:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001594:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001596:	a901      	add	r1, sp, #4
 8001598:	4819      	ldr	r0, [pc, #100]	; (8001600 <HAL_FMC_MspInit+0xc8>)
 800159a:	f000 fbeb 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800159e:	f24c 7303 	movw	r3, #50947	; 0xc703
 80015a2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015aa:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ac:	a901      	add	r1, sp, #4
 80015ae:	4815      	ldr	r0, [pc, #84]	; (8001604 <HAL_FMC_MspInit+0xcc>)
 80015b0:	f000 fbe0 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80015b4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80015b8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015be:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015c0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015c2:	a901      	add	r1, sp, #4
 80015c4:	4810      	ldr	r0, [pc, #64]	; (8001608 <HAL_FMC_MspInit+0xd0>)
 80015c6:	f000 fbd5 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80015ca:	2328      	movs	r3, #40	; 0x28
 80015cc:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015d4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015d6:	a901      	add	r1, sp, #4
 80015d8:	480c      	ldr	r0, [pc, #48]	; (800160c <HAL_FMC_MspInit+0xd4>)
 80015da:	f000 fbcb 	bl	8001d74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80015de:	2308      	movs	r3, #8
 80015e0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015e8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80015ea:	a901      	add	r1, sp, #4
 80015ec:	4808      	ldr	r0, [pc, #32]	; (8001610 <HAL_FMC_MspInit+0xd8>)
 80015ee:	f000 fbc1 	bl	8001d74 <HAL_GPIO_Init>
 80015f2:	e7ac      	b.n	800154e <HAL_FMC_MspInit+0x16>
 80015f4:	20000040 	.word	0x20000040
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40021000 	.word	0x40021000
 8001600:	40021800 	.word	0x40021800
 8001604:	40020c00 	.word	0x40020c00
 8001608:	40021400 	.word	0x40021400
 800160c:	40021c00 	.word	0x40021c00
 8001610:	40020800 	.word	0x40020800

08001614 <HAL_MspInit>:
{
 8001614:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_MspInit+0x2c>)
 8001618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800161a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800161e:	641a      	str	r2, [r3, #64]	; 0x40
 8001620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001622:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001626:	9200      	str	r2, [sp, #0]
 8001628:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800162c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001630:	645a      	str	r2, [r3, #68]	; 0x44
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	9b01      	ldr	r3, [sp, #4]
}
 800163c:	b002      	add	sp, #8
 800163e:	4770      	bx	lr
 8001640:	40023800 	.word	0x40023800

08001644 <HAL_DMA2D_MspInit>:
  if(hdma2d->Instance==DMA2D)
 8001644:	6802      	ldr	r2, [r0, #0]
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_DMA2D_MspInit+0x3c>)
 8001648:	429a      	cmp	r2, r3
 800164a:	d000      	beq.n	800164e <HAL_DMA2D_MspInit+0xa>
 800164c:	4770      	bx	lr
{
 800164e:	b500      	push	{lr}
 8001650:	b083      	sub	sp, #12
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001652:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 8001656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001658:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800165c:	631a      	str	r2, [r3, #48]	; 0x30
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	4611      	mov	r1, r2
 800166c:	205a      	movs	r0, #90	; 0x5a
 800166e:	f000 f9c5 	bl	80019fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001672:	205a      	movs	r0, #90	; 0x5a
 8001674:	f000 f9f4 	bl	8001a60 <HAL_NVIC_EnableIRQ>
}
 8001678:	b003      	add	sp, #12
 800167a:	f85d fb04 	ldr.w	pc, [sp], #4
 800167e:	bf00      	nop
 8001680:	4002b000 	.word	0x4002b000

08001684 <HAL_I2C_MspInit>:
{
 8001684:	b510      	push	{r4, lr}
 8001686:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	2300      	movs	r3, #0
 800168a:	9303      	str	r3, [sp, #12]
 800168c:	9304      	str	r3, [sp, #16]
 800168e:	9305      	str	r3, [sp, #20]
 8001690:	9306      	str	r3, [sp, #24]
 8001692:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C3)
 8001694:	6802      	ldr	r2, [r0, #0]
 8001696:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <HAL_I2C_MspInit+0x64>)
 8001698:	429a      	cmp	r2, r3
 800169a:	d001      	beq.n	80016a0 <HAL_I2C_MspInit+0x1c>
}
 800169c:	b008      	add	sp, #32
 800169e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80016a0:	4c12      	ldr	r4, [pc, #72]	; (80016ec <HAL_I2C_MspInit+0x68>)
 80016a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80016a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a8:	6323      	str	r3, [r4, #48]	; 0x30
 80016aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80016ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b0:	9301      	str	r3, [sp, #4]
 80016b2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80016b4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ba:	2312      	movs	r3, #18
 80016bc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016be:	2301      	movs	r3, #1
 80016c0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016c6:	2304      	movs	r3, #4
 80016c8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016ca:	a903      	add	r1, sp, #12
 80016cc:	4808      	ldr	r0, [pc, #32]	; (80016f0 <HAL_I2C_MspInit+0x6c>)
 80016ce:	f000 fb51 	bl	8001d74 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80016d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016d8:	6423      	str	r3, [r4, #64]	; 0x40
 80016da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016e0:	9302      	str	r3, [sp, #8]
 80016e2:	9b02      	ldr	r3, [sp, #8]
}
 80016e4:	e7da      	b.n	800169c <HAL_I2C_MspInit+0x18>
 80016e6:	bf00      	nop
 80016e8:	40005c00 	.word	0x40005c00
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40021c00 	.word	0x40021c00

080016f4 <HAL_LTDC_MspInit>:
{
 80016f4:	b570      	push	{r4, r5, r6, lr}
 80016f6:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	2300      	movs	r3, #0
 80016fa:	9307      	str	r3, [sp, #28]
 80016fc:	9308      	str	r3, [sp, #32]
 80016fe:	9309      	str	r3, [sp, #36]	; 0x24
 8001700:	930a      	str	r3, [sp, #40]	; 0x28
 8001702:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hltdc->Instance==LTDC)
 8001704:	6802      	ldr	r2, [r0, #0]
 8001706:	4b3e      	ldr	r3, [pc, #248]	; (8001800 <HAL_LTDC_MspInit+0x10c>)
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_LTDC_MspInit+0x1c>
}
 800170c:	b00c      	add	sp, #48	; 0x30
 800170e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001710:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8001714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001716:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800171a:	645a      	str	r2, [r3, #68]	; 0x44
 800171c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800171e:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001722:	9201      	str	r2, [sp, #4]
 8001724:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001728:	f042 0210 	orr.w	r2, r2, #16
 800172c:	631a      	str	r2, [r3, #48]	; 0x30
 800172e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001730:	f002 0210 	and.w	r2, r2, #16
 8001734:	9202      	str	r2, [sp, #8]
 8001736:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800173a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800173e:	631a      	str	r2, [r3, #48]	; 0x30
 8001740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001742:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001746:	9203      	str	r2, [sp, #12]
 8001748:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800174a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800174c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001750:	631a      	str	r2, [r3, #48]	; 0x30
 8001752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001754:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001758:	9204      	str	r2, [sp, #16]
 800175a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800175c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800175e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001762:	631a      	str	r2, [r3, #48]	; 0x30
 8001764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001766:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800176a:	9205      	str	r2, [sp, #20]
 800176c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800176e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001774:	631a      	str	r2, [r3, #48]	; 0x30
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177c:	9306      	str	r3, [sp, #24]
 800177e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001780:	2310      	movs	r3, #16
 8001782:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2502      	movs	r5, #2
 8001786:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001788:	260e      	movs	r6, #14
 800178a:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800178c:	a907      	add	r1, sp, #28
 800178e:	481d      	ldr	r0, [pc, #116]	; (8001804 <HAL_LTDC_MspInit+0x110>)
 8001790:	f000 faf0 	bl	8001d74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001794:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001798:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2400      	movs	r4, #0
 800179e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017a2:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80017a4:	a907      	add	r1, sp, #28
 80017a6:	4818      	ldr	r0, [pc, #96]	; (8001808 <HAL_LTDC_MspInit+0x114>)
 80017a8:	f000 fae4 	bl	8001d74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80017ac:	23f7      	movs	r3, #247	; 0xf7
 80017ae:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017b6:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80017b8:	a907      	add	r1, sp, #28
 80017ba:	4814      	ldr	r0, [pc, #80]	; (800180c <HAL_LTDC_MspInit+0x118>)
 80017bc:	f000 fada 	bl	8001d74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80017c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80017cc:	2309      	movs	r3, #9
 80017ce:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80017d0:	a907      	add	r1, sp, #28
 80017d2:	480f      	ldr	r0, [pc, #60]	; (8001810 <HAL_LTDC_MspInit+0x11c>)
 80017d4:	f000 face 	bl	8001d74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80017d8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80017dc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017e4:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80017e6:	a907      	add	r1, sp, #28
 80017e8:	480a      	ldr	r0, [pc, #40]	; (8001814 <HAL_LTDC_MspInit+0x120>)
 80017ea:	f000 fac3 	bl	8001d74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80017ee:	4622      	mov	r2, r4
 80017f0:	4621      	mov	r1, r4
 80017f2:	2058      	movs	r0, #88	; 0x58
 80017f4:	f000 f902 	bl	80019fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80017f8:	2058      	movs	r0, #88	; 0x58
 80017fa:	f000 f931 	bl	8001a60 <HAL_NVIC_EnableIRQ>
}
 80017fe:	e785      	b.n	800170c <HAL_LTDC_MspInit+0x18>
 8001800:	40016800 	.word	0x40016800
 8001804:	40021000 	.word	0x40021000
 8001808:	40022400 	.word	0x40022400
 800180c:	40022800 	.word	0x40022800
 8001810:	40021800 	.word	0x40021800
 8001814:	40022000 	.word	0x40022000

08001818 <HAL_RTC_MspInit>:
  if(hrtc->Instance==RTC)
 8001818:	6802      	ldr	r2, [r0, #0]
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_RTC_MspInit+0x18>)
 800181c:	429a      	cmp	r2, r3
 800181e:	d000      	beq.n	8001822 <HAL_RTC_MspInit+0xa>
}
 8001820:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8001822:	4a04      	ldr	r2, [pc, #16]	; (8001834 <HAL_RTC_MspInit+0x1c>)
 8001824:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800182a:	6713      	str	r3, [r2, #112]	; 0x70
}
 800182c:	e7f8      	b.n	8001820 <HAL_RTC_MspInit+0x8>
 800182e:	bf00      	nop
 8001830:	40002800 	.word	0x40002800
 8001834:	40023800 	.word	0x40023800

08001838 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001838:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800183a:	f7ff fe7d 	bl	8001538 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800183e:	bd08      	pop	{r3, pc}

08001840 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001840:	b500      	push	{lr}
 8001842:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001844:	2200      	movs	r2, #0
 8001846:	4601      	mov	r1, r0
 8001848:	2036      	movs	r0, #54	; 0x36
 800184a:	f000 f8d7 	bl	80019fc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800184e:	2036      	movs	r0, #54	; 0x36
 8001850:	f000 f906 	bl	8001a60 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001854:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_InitTick+0x6c>)
 8001856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001858:	f042 0210 	orr.w	r2, r2, #16
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001868:	a902      	add	r1, sp, #8
 800186a:	a803      	add	r0, sp, #12
 800186c:	f001 f9b0 	bl	8002bd0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001870:	f001 f99e 	bl	8002bb0 <HAL_RCC_GetPCLK1Freq>
 8001874:	0043      	lsls	r3, r0, #1
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001876:	480e      	ldr	r0, [pc, #56]	; (80018b0 <HAL_InitTick+0x70>)
 8001878:	fba0 2303 	umull	r2, r3, r0, r3
 800187c:	0c9b      	lsrs	r3, r3, #18
 800187e:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001880:	480c      	ldr	r0, [pc, #48]	; (80018b4 <HAL_InitTick+0x74>)
 8001882:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <HAL_InitTick+0x78>)
 8001884:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001886:	f240 32e7 	movw	r2, #999	; 0x3e7
 800188a:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800188c:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001892:	6083      	str	r3, [r0, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001894:	f002 f8be 	bl	8003a14 <HAL_TIM_Base_Init>
 8001898:	b118      	cbz	r0, 80018a2 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
 800189a:	2001      	movs	r0, #1
}
 800189c:	b009      	add	sp, #36	; 0x24
 800189e:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim6);
 80018a2:	4804      	ldr	r0, [pc, #16]	; (80018b4 <HAL_InitTick+0x74>)
 80018a4:	f001 ff16 	bl	80036d4 <HAL_TIM_Base_Start_IT>
 80018a8:	e7f8      	b.n	800189c <HAL_InitTick+0x5c>
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	431bde83 	.word	0x431bde83
 80018b4:	2003fe60 	.word	0x2003fe60
 80018b8:	40001000 	.word	0x40001000

080018bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018bc:	e7fe      	b.n	80018bc <NMI_Handler>

080018be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018be:	e7fe      	b.n	80018be <HardFault_Handler>

080018c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c0:	e7fe      	b.n	80018c0 <MemManage_Handler>

080018c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c2:	e7fe      	b.n	80018c2 <BusFault_Handler>

080018c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c4:	e7fe      	b.n	80018c4 <UsageFault_Handler>

080018c6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c6:	4770      	bx	lr

080018c8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c8:	4770      	bx	lr

080018ca <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ca:	4770      	bx	lr

080018cc <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018cc:	4770      	bx	lr
	...

080018d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018d2:	4802      	ldr	r0, [pc, #8]	; (80018dc <TIM6_DAC_IRQHandler+0xc>)
 80018d4:	f001 ff4a 	bl	800376c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018d8:	bd08      	pop	{r3, pc}
 80018da:	bf00      	nop
 80018dc:	2003fe60 	.word	0x2003fe60

080018e0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80018e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80018e2:	4802      	ldr	r0, [pc, #8]	; (80018ec <LTDC_IRQHandler+0xc>)
 80018e4:	f000 fd39 	bl	800235a <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80018e8:	bd08      	pop	{r3, pc}
 80018ea:	bf00      	nop
 80018ec:	2003fd24 	.word	0x2003fd24

080018f0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80018f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80018f2:	4802      	ldr	r0, [pc, #8]	; (80018fc <DMA2D_IRQHandler+0xc>)
 80018f4:	f000 f93e 	bl	8001b74 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80018f8:	bd08      	pop	{r3, pc}
 80018fa:	bf00      	nop
 80018fc:	2003fdec 	.word	0x2003fdec

08001900 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001900:	4a03      	ldr	r2, [pc, #12]	; (8001910 <SystemInit+0x10>)
 8001902:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001906:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800190a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800194c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001918:	480d      	ldr	r0, [pc, #52]	; (8001950 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800191a:	490e      	ldr	r1, [pc, #56]	; (8001954 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800191c:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001920:	e002      	b.n	8001928 <LoopCopyDataInit>

08001922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001926:	3304      	adds	r3, #4

08001928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800192c:	d3f9      	bcc.n	8001922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192e:	4a0b      	ldr	r2, [pc, #44]	; (800195c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001930:	4c0b      	ldr	r4, [pc, #44]	; (8001960 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001934:	e001      	b.n	800193a <LoopFillZerobss>

08001936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001938:	3204      	adds	r2, #4

0800193a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800193c:	d3fb      	bcc.n	8001936 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800193e:	f7ff ffdf 	bl	8001900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001942:	f002 f91f 	bl	8003b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001946:	f7ff fddd 	bl	8001504 <main>
  bx  lr    
 800194a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800194c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001954:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001958:	08003c1c 	.word	0x08003c1c
  ldr r2, =_sbss
 800195c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001960:	2003feb0 	.word	0x2003feb0

08001964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC_IRQHandler>
	...

08001968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001968:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 800196a:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_Init+0x20>)
 800196c:	6813      	ldr	r3, [r2, #0]
 800196e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001972:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001974:	2003      	movs	r0, #3
 8001976:	f000 f82f 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197a:	2000      	movs	r0, #0
 800197c:	f7ff ff60 	bl	8001840 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001980:	f7ff fe48 	bl	8001614 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8001984:	2000      	movs	r0, #0
 8001986:	bd08      	pop	{r3, pc}
 8001988:	40023c00 	.word	0x40023c00

0800198c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800198c:	4a03      	ldr	r2, [pc, #12]	; (800199c <HAL_IncTick+0x10>)
 800198e:	6811      	ldr	r1, [r2, #0]
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <HAL_IncTick+0x14>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	440b      	add	r3, r1
 8001996:	6013      	str	r3, [r2, #0]
}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	2003feac 	.word	0x2003feac
 80019a0:	20000004 	.word	0x20000004

080019a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80019a4:	4b01      	ldr	r3, [pc, #4]	; (80019ac <HAL_GetTick+0x8>)
 80019a6:	6818      	ldr	r0, [r3, #0]
}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	2003feac 	.word	0x2003feac

080019b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b0:	b538      	push	{r3, r4, r5, lr}
 80019b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80019b4:	f7ff fff6 	bl	80019a4 <HAL_GetTick>
 80019b8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ba:	f1b4 3fff 	cmp.w	r4, #4294967295
 80019be:	d002      	beq.n	80019c6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <HAL_Delay+0x24>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019c6:	f7ff ffed 	bl	80019a4 <HAL_GetTick>
 80019ca:	1b40      	subs	r0, r0, r5
 80019cc:	42a0      	cmp	r0, r4
 80019ce:	d3fa      	bcc.n	80019c6 <HAL_Delay+0x16>
  {
  }
}
 80019d0:	bd38      	pop	{r3, r4, r5, pc}
 80019d2:	bf00      	nop
 80019d4:	20000004 	.word	0x20000004

080019d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d8:	4906      	ldr	r1, [pc, #24]	; (80019f4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80019da:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019e0:	041b      	lsls	r3, r3, #16
 80019e2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e4:	0200      	lsls	r0, r0, #8
 80019e6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ea:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80019ec:	4a02      	ldr	r2, [pc, #8]	; (80019f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80019ee:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80019f0:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80019f2:	4770      	bx	lr
 80019f4:	e000ed00 	.word	0xe000ed00
 80019f8:	05fa0000 	.word	0x05fa0000

080019fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fc:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <HAL_NVIC_SetPriority+0x58>)
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a06:	f1c3 0407 	rsb	r4, r3, #7
 8001a0a:	2c04      	cmp	r4, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a10:	1d1d      	adds	r5, r3, #4
 8001a12:	2d06      	cmp	r5, #6
 8001a14:	d914      	bls.n	8001a40 <HAL_NVIC_SetPriority+0x44>
 8001a16:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	f04f 35ff 	mov.w	r5, #4294967295
 8001a1c:	fa05 f404 	lsl.w	r4, r5, r4
 8001a20:	ea21 0104 	bic.w	r1, r1, r4
 8001a24:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a26:	fa05 f303 	lsl.w	r3, r5, r3
 8001a2a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001a30:	2800      	cmp	r0, #0
 8001a32:	db07      	blt.n	8001a44 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a34:	0109      	lsls	r1, r1, #4
 8001a36:	b2c9      	uxtb	r1, r1
 8001a38:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <HAL_NVIC_SetPriority+0x5c>)
 8001a3a:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001a3c:	bc30      	pop	{r4, r5}
 8001a3e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a40:	2300      	movs	r3, #0
 8001a42:	e7e9      	b.n	8001a18 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a44:	f000 000f 	and.w	r0, r0, #15
 8001a48:	0109      	lsls	r1, r1, #4
 8001a4a:	b2c9      	uxtb	r1, r1
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_NVIC_SetPriority+0x60>)
 8001a4e:	5419      	strb	r1, [r3, r0]
 8001a50:	e7f4      	b.n	8001a3c <HAL_NVIC_SetPriority+0x40>
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00
 8001a58:	e000e400 	.word	0xe000e400
 8001a5c:	e000ed14 	.word	0xe000ed14

08001a60 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001a60:	2800      	cmp	r0, #0
 8001a62:	db07      	blt.n	8001a74 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a64:	f000 021f 	and.w	r2, r0, #31
 8001a68:	0940      	lsrs	r0, r0, #5
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	4093      	lsls	r3, r2
 8001a6e:	4a02      	ldr	r2, [pc, #8]	; (8001a78 <HAL_NVIC_EnableIRQ+0x18>)
 8001a70:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000e100 	.word	0xe000e100

08001a7c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a7c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001a80:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <HAL_MPU_Disable+0x18>)
 8001a82:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a88:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001a8a:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <HAL_MPU_Disable+0x1c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	605a      	str	r2, [r3, #4]
}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00
 8001a98:	e000ed90 	.word	0xe000ed90

08001a9c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001a9c:	f040 0001 	orr.w	r0, r0, #1
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_MPU_Enable+0x1c>)
 8001aa2:	6058      	str	r0, [r3, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001aa4:	4a05      	ldr	r2, [pc, #20]	; (8001abc <HAL_MPU_Enable+0x20>)
 8001aa6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aac:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001aae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ab2:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed90 	.word	0xe000ed90
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ac0:	7842      	ldrb	r2, [r0, #1]
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <HAL_MPU_ConfigRegion+0x50>)
 8001ac4:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001ac6:	7803      	ldrb	r3, [r0, #0]
 8001ac8:	b923      	cbnz	r3, 8001ad4 <HAL_MPU_ConfigRegion+0x14>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <HAL_MPU_ConfigRegion+0x50>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001ad0:	611a      	str	r2, [r3, #16]
  }
}
 8001ad2:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 8001ad4:	6843      	ldr	r3, [r0, #4]
 8001ad6:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <HAL_MPU_ConfigRegion+0x50>)
 8001ad8:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ada:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001adc:	7ac3      	ldrb	r3, [r0, #11]
 8001ade:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ae0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ae4:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ae6:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001aea:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001aec:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001af0:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001af2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001af6:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001af8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001afc:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001afe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b02:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b04:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001b08:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b0a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b0c:	6113      	str	r3, [r2, #16]
 8001b0e:	4770      	bx	lr
 8001b10:	e000ed90 	.word	0xe000ed90

08001b14 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001b14:	b338      	cbz	r0, 8001b66 <HAL_DMA2D_Init+0x52>
{
 8001b16:	b510      	push	{r4, lr}
 8001b18:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001b1a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001b1e:	b1eb      	cbz	r3, 8001b5c <HAL_DMA2D_Init+0x48>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b20:	2302      	movs	r3, #2
 8001b22:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001b26:	6822      	ldr	r2, [r4, #0]
 8001b28:	6813      	ldr	r3, [r2, #0]
 8001b2a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001b2e:	6861      	ldr	r1, [r4, #4]
 8001b30:	430b      	orrs	r3, r1
 8001b32:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001b34:	6822      	ldr	r2, [r4, #0]
 8001b36:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001b38:	f023 0307 	bic.w	r3, r3, #7
 8001b3c:	68a1      	ldr	r1, [r4, #8]
 8001b3e:	430b      	orrs	r3, r1
 8001b40:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001b42:	6822      	ldr	r2, [r4, #0]
 8001b44:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_DMA2D_Init+0x58>)
 8001b48:	400b      	ands	r3, r1
 8001b4a:	68e1      	ldr	r1, [r4, #12]
 8001b4c:	430b      	orrs	r3, r1
 8001b4e:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001b50:	2000      	movs	r0, #0
 8001b52:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001b54:	2301      	movs	r3, #1
 8001b56:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 8001b5a:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8001b5c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8001b60:	f7ff fd70 	bl	8001644 <HAL_DMA2D_MspInit>
 8001b64:	e7dc      	b.n	8001b20 <HAL_DMA2D_Init+0xc>
    return HAL_ERROR;
 8001b66:	2001      	movs	r0, #1
}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	ffffc000 	.word	0xffffc000

08001b70 <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001b70:	4770      	bx	lr

08001b72 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001b72:	4770      	bx	lr

08001b74 <HAL_DMA2D_IRQHandler>:
{
 8001b74:	b570      	push	{r4, r5, r6, lr}
 8001b76:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001b78:	6803      	ldr	r3, [r0, #0]
 8001b7a:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001b7c:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001b7e:	f015 0f01 	tst.w	r5, #1
 8001b82:	d016      	beq.n	8001bb2 <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001b84:	f416 7f80 	tst.w	r6, #256	; 0x100
 8001b88:	d013      	beq.n	8001bb2 <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b90:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001b92:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	63c3      	str	r3, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001b9a:	6803      	ldr	r3, [r0, #0]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8001bac:	6943      	ldr	r3, [r0, #20]
 8001bae:	b103      	cbz	r3, 8001bb2 <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 8001bb0:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001bb2:	f015 0f20 	tst.w	r5, #32
 8001bb6:	d018      	beq.n	8001bea <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001bb8:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8001bbc:	d015      	beq.n	8001bea <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001bbe:	6822      	ldr	r2, [r4, #0]
 8001bc0:	6813      	ldr	r3, [r2, #0]
 8001bc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001bc6:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001bce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8001be2:	6963      	ldr	r3, [r4, #20]
 8001be4:	b10b      	cbz	r3, 8001bea <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 8001be6:	4620      	mov	r0, r4
 8001be8:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001bea:	f015 0f08 	tst.w	r5, #8
 8001bee:	d018      	beq.n	8001c22 <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001bf0:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8001bf4:	d015      	beq.n	8001c22 <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001bf6:	6822      	ldr	r2, [r4, #0]
 8001bf8:	6813      	ldr	r3, [r2, #0]
 8001bfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001bfe:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001c00:	6823      	ldr	r3, [r4, #0]
 8001c02:	2208      	movs	r2, #8
 8001c04:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001c06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c0e:	2304      	movs	r3, #4
 8001c10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001c14:	2300      	movs	r3, #0
 8001c16:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8001c1a:	6963      	ldr	r3, [r4, #20]
 8001c1c:	b10b      	cbz	r3, 8001c22 <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 8001c1e:	4620      	mov	r0, r4
 8001c20:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001c22:	f015 0f04 	tst.w	r5, #4
 8001c26:	d002      	beq.n	8001c2e <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001c28:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8001c2c:	d120      	bne.n	8001c70 <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001c2e:	f015 0f02 	tst.w	r5, #2
 8001c32:	d016      	beq.n	8001c62 <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001c34:	f416 7f00 	tst.w	r6, #512	; 0x200
 8001c38:	d013      	beq.n	8001c62 <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001c3a:	6822      	ldr	r2, [r4, #0]
 8001c3c:	6813      	ldr	r3, [r2, #0]
 8001c3e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c42:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	2202      	movs	r2, #2
 8001c48:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001c4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c4c:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001c54:	2300      	movs	r3, #0
 8001c56:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8001c5a:	6923      	ldr	r3, [r4, #16]
 8001c5c:	b10b      	cbz	r3, 8001c62 <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 8001c5e:	4620      	mov	r0, r4
 8001c60:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001c62:	f015 0f10 	tst.w	r5, #16
 8001c66:	d002      	beq.n	8001c6e <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001c68:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8001c6c:	d10c      	bne.n	8001c88 <HAL_DMA2D_IRQHandler+0x114>
}
 8001c6e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001c70:	6822      	ldr	r2, [r4, #0]
 8001c72:	6813      	ldr	r3, [r2, #0]
 8001c74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c78:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	2204      	movs	r2, #4
 8001c7e:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001c80:	4620      	mov	r0, r4
 8001c82:	f7ff ff75 	bl	8001b70 <HAL_DMA2D_LineEventCallback>
 8001c86:	e7d2      	b.n	8001c2e <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001c88:	6822      	ldr	r2, [r4, #0]
 8001c8a:	6813      	ldr	r3, [r2, #0]
 8001c8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c90:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	2210      	movs	r2, #16
 8001c96:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001c98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c9a:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001ca8:	4620      	mov	r0, r4
 8001caa:	f7ff ff62 	bl	8001b72 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8001cae:	e7de      	b.n	8001c6e <HAL_DMA2D_IRQHandler+0xfa>

08001cb0 <HAL_DMA2D_ConfigLayer>:
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001cb0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d059      	beq.n	8001d6c <HAL_DMA2D_ConfigLayer+0xbc>
{
 8001cb8:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8001cba:	2301      	movs	r3, #1
 8001cbc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001cc6:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8001cca:	69da      	ldr	r2, [r3, #28]
 8001ccc:	1c8b      	adds	r3, r1, #2
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	58c3      	ldr	r3, [r0, r3]
 8001cd2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001cd6:	3a09      	subs	r2, #9
 8001cd8:	2a01      	cmp	r2, #1
 8001cda:	d91e      	bls.n	8001d1a <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001cdc:	1c8a      	adds	r2, r1, #2
 8001cde:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8001ce2:	6852      	ldr	r2, [r2, #4]
 8001ce4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001ce8:	bb41      	cbnz	r1, 8001d3c <HAL_DMA2D_ConfigLayer+0x8c>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001cea:	6804      	ldr	r4, [r0, #0]
 8001cec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001cee:	4a20      	ldr	r2, [pc, #128]	; (8001d70 <HAL_DMA2D_ConfigLayer+0xc0>)
 8001cf0:	402a      	ands	r2, r5
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001cf6:	6802      	ldr	r2, [r0, #0]
 8001cf8:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8001cfc:	699c      	ldr	r4, [r3, #24]
 8001cfe:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	3b09      	subs	r3, #9
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d910      	bls.n	8001d2a <HAL_DMA2D_ConfigLayer+0x7a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001d14:	4618      	mov	r0, r3
}
 8001d16:	bc30      	pop	{r4, r5}
 8001d18:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001d1a:	1c8a      	adds	r2, r1, #2
 8001d1c:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8001d20:	6852      	ldr	r2, [r2, #4]
 8001d22:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001d26:	4313      	orrs	r3, r2
 8001d28:	e7de      	b.n	8001ce8 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001d2a:	3102      	adds	r1, #2
 8001d2c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8001d30:	684b      	ldr	r3, [r1, #4]
 8001d32:	6802      	ldr	r2, [r0, #0]
 8001d34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001d38:	6293      	str	r3, [r2, #40]	; 0x28
 8001d3a:	e7e5      	b.n	8001d08 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001d3c:	6804      	ldr	r4, [r0, #0]
 8001d3e:	69e5      	ldr	r5, [r4, #28]
 8001d40:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <HAL_DMA2D_ConfigLayer+0xc0>)
 8001d42:	402a      	ands	r2, r5
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001d48:	6802      	ldr	r2, [r0, #0]
 8001d4a:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8001d4e:	699c      	ldr	r4, [r3, #24]
 8001d50:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	3b09      	subs	r3, #9
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d8d6      	bhi.n	8001d08 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001d5a:	3102      	adds	r1, #2
 8001d5c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8001d60:	684b      	ldr	r3, [r1, #4]
 8001d62:	6802      	ldr	r2, [r0, #0]
 8001d64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001d68:	6213      	str	r3, [r2, #32]
 8001d6a:	e7cd      	b.n	8001d08 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 8001d6c:	2002      	movs	r0, #2
}
 8001d6e:	4770      	bx	lr
 8001d70:	00fcfff0 	.word	0x00fcfff0

08001d74 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	2b0f      	cmp	r3, #15
 8001d78:	f200 80e1 	bhi.w	8001f3e <HAL_GPIO_Init+0x1ca>
{
 8001d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	e039      	b.n	8001df6 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d82:	2209      	movs	r2, #9
 8001d84:	e000      	b.n	8001d88 <HAL_GPIO_Init+0x14>
 8001d86:	2200      	movs	r2, #0
 8001d88:	40b2      	lsls	r2, r6
 8001d8a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d8c:	3402      	adds	r4, #2
 8001d8e:	4e6c      	ldr	r6, [pc, #432]	; (8001f40 <HAL_GPIO_Init+0x1cc>)
 8001d90:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d94:	4a6b      	ldr	r2, [pc, #428]	; (8001f44 <HAL_GPIO_Init+0x1d0>)
 8001d96:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001d98:	43ea      	mvns	r2, r5
 8001d9a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d9e:	684f      	ldr	r7, [r1, #4]
 8001da0:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001da4:	d001      	beq.n	8001daa <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8001da6:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8001daa:	4c66      	ldr	r4, [pc, #408]	; (8001f44 <HAL_GPIO_Init+0x1d0>)
 8001dac:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001dae:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001db0:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001db4:	684f      	ldr	r7, [r1, #4]
 8001db6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001dba:	d001      	beq.n	8001dc0 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8001dbc:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8001dc0:	4c60      	ldr	r4, [pc, #384]	; (8001f44 <HAL_GPIO_Init+0x1d0>)
 8001dc2:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001dc6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dca:	684f      	ldr	r7, [r1, #4]
 8001dcc:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001dd0:	d001      	beq.n	8001dd6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8001dd2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8001dd6:	4c5b      	ldr	r4, [pc, #364]	; (8001f44 <HAL_GPIO_Init+0x1d0>)
 8001dd8:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001dda:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001ddc:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dde:	684e      	ldr	r6, [r1, #4]
 8001de0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001de4:	d001      	beq.n	8001dea <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8001de6:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8001dea:	4c56      	ldr	r4, [pc, #344]	; (8001f44 <HAL_GPIO_Init+0x1d0>)
 8001dec:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dee:	3301      	adds	r3, #1
 8001df0:	2b0f      	cmp	r3, #15
 8001df2:	f200 80a2 	bhi.w	8001f3a <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 8001df6:	2201      	movs	r2, #1
 8001df8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dfa:	680c      	ldr	r4, [r1, #0]
 8001dfc:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8001e00:	42aa      	cmp	r2, r5
 8001e02:	d1f4      	bne.n	8001dee <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e04:	684c      	ldr	r4, [r1, #4]
 8001e06:	1e66      	subs	r6, r4, #1
 8001e08:	2c11      	cmp	r4, #17
 8001e0a:	bf18      	it	ne
 8001e0c:	2e01      	cmpne	r6, #1
 8001e0e:	d901      	bls.n	8001e14 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e10:	2c12      	cmp	r4, #18
 8001e12:	d112      	bne.n	8001e3a <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8001e14:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e16:	005f      	lsls	r7, r3, #1
 8001e18:	2403      	movs	r4, #3
 8001e1a:	40bc      	lsls	r4, r7
 8001e1c:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e20:	68cc      	ldr	r4, [r1, #12]
 8001e22:	40bc      	lsls	r4, r7
 8001e24:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001e26:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001e28:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e2a:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001e2e:	684c      	ldr	r4, [r1, #4]
 8001e30:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001e34:	409a      	lsls	r2, r3
 8001e36:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8001e38:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001e3a:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e3c:	005f      	lsls	r7, r3, #1
 8001e3e:	2603      	movs	r6, #3
 8001e40:	40be      	lsls	r6, r7
 8001e42:	43f6      	mvns	r6, r6
 8001e44:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e46:	688c      	ldr	r4, [r1, #8]
 8001e48:	40bc      	lsls	r4, r7
 8001e4a:	4314      	orrs	r4, r2
      GPIOx->PUPDR = temp;
 8001e4c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e4e:	684a      	ldr	r2, [r1, #4]
 8001e50:	2a12      	cmp	r2, #18
 8001e52:	bf18      	it	ne
 8001e54:	2a02      	cmpne	r2, #2
 8001e56:	d113      	bne.n	8001e80 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3];
 8001e58:	08dc      	lsrs	r4, r3, #3
 8001e5a:	3408      	adds	r4, #8
 8001e5c:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e60:	f003 0207 	and.w	r2, r3, #7
 8001e64:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8001e68:	220f      	movs	r2, #15
 8001e6a:	fa02 f20c 	lsl.w	r2, r2, ip
 8001e6e:	ea2e 0e02 	bic.w	lr, lr, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e72:	690a      	ldr	r2, [r1, #16]
 8001e74:	fa02 f20c 	lsl.w	r2, r2, ip
 8001e78:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 8001e7c:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
      temp = GPIOx->MODER;
 8001e80:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e82:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e84:	684a      	ldr	r2, [r1, #4]
 8001e86:	f002 0203 	and.w	r2, r2, #3
 8001e8a:	40ba      	lsls	r2, r7
 8001e8c:	4332      	orrs	r2, r6
      GPIOx->MODER = temp;
 8001e8e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e90:	684a      	ldr	r2, [r1, #4]
 8001e92:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001e96:	d0aa      	beq.n	8001dee <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e98:	4a2b      	ldr	r2, [pc, #172]	; (8001f48 <HAL_GPIO_Init+0x1d4>)
 8001e9a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001e9c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001ea0:	6454      	str	r4, [r2, #68]	; 0x44
 8001ea2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ea4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001ea8:	9201      	str	r2, [sp, #4]
 8001eaa:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001eac:	089c      	lsrs	r4, r3, #2
 8001eae:	1ca6      	adds	r6, r4, #2
 8001eb0:	4a23      	ldr	r2, [pc, #140]	; (8001f40 <HAL_GPIO_Init+0x1cc>)
 8001eb2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001eb6:	f003 0203 	and.w	r2, r3, #3
 8001eba:	0096      	lsls	r6, r2, #2
 8001ebc:	220f      	movs	r2, #15
 8001ebe:	40b2      	lsls	r2, r6
 8001ec0:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ec4:	4a21      	ldr	r2, [pc, #132]	; (8001f4c <HAL_GPIO_Init+0x1d8>)
 8001ec6:	4290      	cmp	r0, r2
 8001ec8:	f43f af5d 	beq.w	8001d86 <HAL_GPIO_Init+0x12>
 8001ecc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ed0:	4290      	cmp	r0, r2
 8001ed2:	d022      	beq.n	8001f1a <HAL_GPIO_Init+0x1a6>
 8001ed4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ed8:	4290      	cmp	r0, r2
 8001eda:	d020      	beq.n	8001f1e <HAL_GPIO_Init+0x1aa>
 8001edc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ee0:	4290      	cmp	r0, r2
 8001ee2:	d01e      	beq.n	8001f22 <HAL_GPIO_Init+0x1ae>
 8001ee4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ee8:	4290      	cmp	r0, r2
 8001eea:	d01c      	beq.n	8001f26 <HAL_GPIO_Init+0x1b2>
 8001eec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ef0:	4290      	cmp	r0, r2
 8001ef2:	d01a      	beq.n	8001f2a <HAL_GPIO_Init+0x1b6>
 8001ef4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ef8:	4290      	cmp	r0, r2
 8001efa:	d018      	beq.n	8001f2e <HAL_GPIO_Init+0x1ba>
 8001efc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f00:	4290      	cmp	r0, r2
 8001f02:	d016      	beq.n	8001f32 <HAL_GPIO_Init+0x1be>
 8001f04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f08:	4290      	cmp	r0, r2
 8001f0a:	d014      	beq.n	8001f36 <HAL_GPIO_Init+0x1c2>
 8001f0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f10:	4290      	cmp	r0, r2
 8001f12:	f43f af36 	beq.w	8001d82 <HAL_GPIO_Init+0xe>
 8001f16:	220a      	movs	r2, #10
 8001f18:	e736      	b.n	8001d88 <HAL_GPIO_Init+0x14>
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	e734      	b.n	8001d88 <HAL_GPIO_Init+0x14>
 8001f1e:	2202      	movs	r2, #2
 8001f20:	e732      	b.n	8001d88 <HAL_GPIO_Init+0x14>
 8001f22:	2203      	movs	r2, #3
 8001f24:	e730      	b.n	8001d88 <HAL_GPIO_Init+0x14>
 8001f26:	2204      	movs	r2, #4
 8001f28:	e72e      	b.n	8001d88 <HAL_GPIO_Init+0x14>
 8001f2a:	2205      	movs	r2, #5
 8001f2c:	e72c      	b.n	8001d88 <HAL_GPIO_Init+0x14>
 8001f2e:	2206      	movs	r2, #6
 8001f30:	e72a      	b.n	8001d88 <HAL_GPIO_Init+0x14>
 8001f32:	2207      	movs	r2, #7
 8001f34:	e728      	b.n	8001d88 <HAL_GPIO_Init+0x14>
 8001f36:	2208      	movs	r2, #8
 8001f38:	e726      	b.n	8001d88 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8001f3a:	b003      	add	sp, #12
 8001f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3e:	4770      	bx	lr
 8001f40:	40013800 	.word	0x40013800
 8001f44:	40013c00 	.word	0x40013c00
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40020000 	.word	0x40020000

08001f50 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f50:	b912      	cbnz	r2, 8001f58 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f52:	0409      	lsls	r1, r1, #16
 8001f54:	6181      	str	r1, [r0, #24]
  }
}
 8001f56:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001f58:	6181      	str	r1, [r0, #24]
 8001f5a:	4770      	bx	lr

08001f5c <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f5c:	2800      	cmp	r0, #0
 8001f5e:	d057      	beq.n	8002010 <HAL_I2C_Init+0xb4>
{
 8001f60:	b510      	push	{r4, lr}
 8001f62:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f64:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d041      	beq.n	8001ff0 <HAL_I2C_Init+0x94>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f6c:	2324      	movs	r3, #36	; 0x24
 8001f6e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f72:	6822      	ldr	r2, [r4, #0]
 8001f74:	6813      	ldr	r3, [r2, #0]
 8001f76:	f023 0301 	bic.w	r3, r3, #1
 8001f7a:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f7c:	6863      	ldr	r3, [r4, #4]
 8001f7e:	6822      	ldr	r2, [r4, #0]
 8001f80:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001f84:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f86:	6822      	ldr	r2, [r4, #0]
 8001f88:	6893      	ldr	r3, [r2, #8]
 8001f8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001f8e:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f90:	68e3      	ldr	r3, [r4, #12]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d031      	beq.n	8001ffa <HAL_I2C_Init+0x9e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f96:	68a3      	ldr	r3, [r4, #8]
 8001f98:	6822      	ldr	r2, [r4, #0]
 8001f9a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001f9e:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fa0:	68e3      	ldr	r3, [r4, #12]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d02f      	beq.n	8002006 <HAL_I2C_Init+0xaa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fa6:	6822      	ldr	r2, [r4, #0]
 8001fa8:	6851      	ldr	r1, [r2, #4]
 8001faa:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <HAL_I2C_Init+0xb8>)
 8001fac:	430b      	orrs	r3, r1
 8001fae:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fb0:	6822      	ldr	r2, [r4, #0]
 8001fb2:	68d3      	ldr	r3, [r2, #12]
 8001fb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001fb8:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001fba:	6923      	ldr	r3, [r4, #16]
 8001fbc:	6962      	ldr	r2, [r4, #20]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	69a1      	ldr	r1, [r4, #24]
 8001fc2:	6822      	ldr	r2, [r4, #0]
 8001fc4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001fc8:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fca:	69e3      	ldr	r3, [r4, #28]
 8001fcc:	6a21      	ldr	r1, [r4, #32]
 8001fce:	6822      	ldr	r2, [r4, #0]
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fd4:	6822      	ldr	r2, [r4, #0]
 8001fd6:	6813      	ldr	r3, [r2, #0]
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fde:	2000      	movs	r0, #0
 8001fe0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fe2:	2320      	movs	r3, #32
 8001fe4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fe8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fea:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 8001fee:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001ff0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001ff4:	f7ff fb46 	bl	8001684 <HAL_I2C_MspInit>
 8001ff8:	e7b8      	b.n	8001f6c <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ffa:	68a3      	ldr	r3, [r4, #8]
 8001ffc:	6822      	ldr	r2, [r4, #0]
 8001ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002002:	6093      	str	r3, [r2, #8]
 8002004:	e7cc      	b.n	8001fa0 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002006:	6823      	ldr	r3, [r4, #0]
 8002008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	e7ca      	b.n	8001fa6 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002010:	2001      	movs	r0, #1
}
 8002012:	4770      	bx	lr
 8002014:	02008000 	.word	0x02008000

08002018 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002018:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b20      	cmp	r3, #32
 8002020:	d124      	bne.n	800206c <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002022:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002026:	2b01      	cmp	r3, #1
 8002028:	d022      	beq.n	8002070 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800202a:	2301      	movs	r3, #1
 800202c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002030:	2324      	movs	r3, #36	; 0x24
 8002032:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002036:	6802      	ldr	r2, [r0, #0]
 8002038:	6813      	ldr	r3, [r2, #0]
 800203a:	f023 0301 	bic.w	r3, r3, #1
 800203e:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002040:	6802      	ldr	r2, [r0, #0]
 8002042:	6813      	ldr	r3, [r2, #0]
 8002044:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002048:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800204a:	6802      	ldr	r2, [r0, #0]
 800204c:	6813      	ldr	r3, [r2, #0]
 800204e:	4319      	orrs	r1, r3
 8002050:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002052:	6802      	ldr	r2, [r0, #0]
 8002054:	6813      	ldr	r3, [r2, #0]
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800205c:	2320      	movs	r3, #32
 800205e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002062:	2300      	movs	r3, #0
 8002064:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002068:	4618      	mov	r0, r3
 800206a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800206c:	2002      	movs	r0, #2
 800206e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002070:	2002      	movs	r0, #2
  }
}
 8002072:	4770      	bx	lr

08002074 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002074:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b20      	cmp	r3, #32
 800207c:	d122      	bne.n	80020c4 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800207e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002082:	2b01      	cmp	r3, #1
 8002084:	d020      	beq.n	80020c8 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002086:	2301      	movs	r3, #1
 8002088:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800208c:	2324      	movs	r3, #36	; 0x24
 800208e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002092:	6802      	ldr	r2, [r0, #0]
 8002094:	6813      	ldr	r3, [r2, #0]
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800209c:	6802      	ldr	r2, [r0, #0]
 800209e:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020a4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020a8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020aa:	6802      	ldr	r2, [r0, #0]
 80020ac:	6813      	ldr	r3, [r2, #0]
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020b4:	2320      	movs	r3, #32
 80020b6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ba:	2300      	movs	r3, #0
 80020bc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80020c0:	4618      	mov	r0, r3
 80020c2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80020c4:	2002      	movs	r0, #2
 80020c6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80020c8:	2002      	movs	r0, #2
  }
}
 80020ca:	4770      	bx	lr

080020cc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80020cc:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80020ce:	684d      	ldr	r5, [r1, #4]
 80020d0:	6804      	ldr	r4, [r0, #0]
 80020d2:	68e3      	ldr	r3, [r4, #12]
 80020d4:	f3c3 430b 	ubfx	r3, r3, #16, #12
 80020d8:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80020da:	01d2      	lsls	r2, r2, #7
 80020dc:	4414      	add	r4, r2
 80020de:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80020e2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80020e6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80020ea:	680b      	ldr	r3, [r1, #0]
 80020ec:	6804      	ldr	r4, [r0, #0]
 80020ee:	68e6      	ldr	r6, [r4, #12]
 80020f0:	f3c6 460b 	ubfx	r6, r6, #16, #12
 80020f4:	4433      	add	r3, r6
 80020f6:	3301      	adds	r3, #1
 80020f8:	4414      	add	r4, r2
 80020fa:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80020fe:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002102:	68cd      	ldr	r5, [r1, #12]
 8002104:	6804      	ldr	r4, [r0, #0]
 8002106:	68e3      	ldr	r3, [r4, #12]
 8002108:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800210c:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800210e:	4414      	add	r4, r2
 8002110:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002114:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002118:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800211c:	688b      	ldr	r3, [r1, #8]
 800211e:	6804      	ldr	r4, [r0, #0]
 8002120:	68e6      	ldr	r6, [r4, #12]
 8002122:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8002126:	4433      	add	r3, r6
 8002128:	3301      	adds	r3, #1
 800212a:	4414      	add	r4, r2
 800212c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002130:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002134:	6803      	ldr	r3, [r0, #0]
 8002136:	4413      	add	r3, r2
 8002138:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 800213c:	f024 0407 	bic.w	r4, r4, #7
 8002140:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002144:	6803      	ldr	r3, [r0, #0]
 8002146:	4413      	add	r3, r2
 8002148:	690c      	ldr	r4, [r1, #16]
 800214a:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800214e:	f891 c031 	ldrb.w	ip, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002152:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002156:	698e      	ldr	r6, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002158:	6805      	ldr	r5, [r0, #0]
 800215a:	4415      	add	r5, r2
 800215c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8002160:	2400      	movs	r4, #0
 8002162:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002166:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800216a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800216e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8002172:	6805      	ldr	r5, [r0, #0]
 8002174:	4415      	add	r5, r2
 8002176:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800217a:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800217e:	6803      	ldr	r3, [r0, #0]
 8002180:	4413      	add	r3, r2
 8002182:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8002186:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800218a:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800218e:	6803      	ldr	r3, [r0, #0]
 8002190:	4413      	add	r3, r2
 8002192:	694d      	ldr	r5, [r1, #20]
 8002194:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002198:	6803      	ldr	r3, [r0, #0]
 800219a:	4413      	add	r3, r2
 800219c:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 80021a0:	4d2d      	ldr	r5, [pc, #180]	; (8002258 <LTDC_SetConfig+0x18c>)
 80021a2:	4035      	ands	r5, r6
 80021a4:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80021a8:	69cd      	ldr	r5, [r1, #28]
 80021aa:	6a0e      	ldr	r6, [r1, #32]
 80021ac:	6803      	ldr	r3, [r0, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	4335      	orrs	r5, r6
 80021b2:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80021b6:	6803      	ldr	r3, [r0, #0]
 80021b8:	4413      	add	r3, r2
 80021ba:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 80021be:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80021c2:	6803      	ldr	r3, [r0, #0]
 80021c4:	4413      	add	r3, r2
 80021c6:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80021c8:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80021cc:	690b      	ldr	r3, [r1, #16]
 80021ce:	b16b      	cbz	r3, 80021ec <LTDC_SetConfig+0x120>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d03a      	beq.n	800224a <LTDC_SetConfig+0x17e>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	bf18      	it	ne
 80021d8:	2b04      	cmpne	r3, #4
 80021da:	d038      	beq.n	800224e <LTDC_SetConfig+0x182>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d038      	beq.n	8002252 <LTDC_SetConfig+0x186>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80021e0:	2b07      	cmp	r3, #7
 80021e2:	d001      	beq.n	80021e8 <LTDC_SetConfig+0x11c>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e002      	b.n	80021ee <LTDC_SetConfig+0x122>
    tmp = 2U;
 80021e8:	2302      	movs	r3, #2
 80021ea:	e000      	b.n	80021ee <LTDC_SetConfig+0x122>
    tmp = 4U;
 80021ec:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80021ee:	6804      	ldr	r4, [r0, #0]
 80021f0:	4414      	add	r4, r2
 80021f2:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 80021f6:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 80021fa:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80021fe:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8002200:	fb03 f504 	mul.w	r5, r3, r4
 8002204:	684c      	ldr	r4, [r1, #4]
 8002206:	680e      	ldr	r6, [r1, #0]
 8002208:	1ba4      	subs	r4, r4, r6
 800220a:	fb03 f304 	mul.w	r3, r3, r4
 800220e:	3303      	adds	r3, #3
 8002210:	6804      	ldr	r4, [r0, #0]
 8002212:	4414      	add	r4, r2
 8002214:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002218:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800221c:	6803      	ldr	r3, [r0, #0]
 800221e:	4413      	add	r3, r2
 8002220:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 8002224:	4c0d      	ldr	r4, [pc, #52]	; (800225c <LTDC_SetConfig+0x190>)
 8002226:	402c      	ands	r4, r5
 8002228:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800222c:	6803      	ldr	r3, [r0, #0]
 800222e:	4413      	add	r3, r2
 8002230:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002232:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002236:	6803      	ldr	r3, [r0, #0]
 8002238:	441a      	add	r2, r3
 800223a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
 8002246:	bcf0      	pop	{r4, r5, r6, r7}
 8002248:	4770      	bx	lr
    tmp = 3U;
 800224a:	2303      	movs	r3, #3
 800224c:	e7cf      	b.n	80021ee <LTDC_SetConfig+0x122>
    tmp = 2U;
 800224e:	2302      	movs	r3, #2
 8002250:	e7cd      	b.n	80021ee <LTDC_SetConfig+0x122>
 8002252:	2302      	movs	r3, #2
 8002254:	e7cb      	b.n	80021ee <LTDC_SetConfig+0x122>
 8002256:	bf00      	nop
 8002258:	fffff8f8 	.word	0xfffff8f8
 800225c:	fffff800 	.word	0xfffff800

08002260 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8002260:	2800      	cmp	r0, #0
 8002262:	d072      	beq.n	800234a <HAL_LTDC_Init+0xea>
{
 8002264:	b538      	push	{r3, r4, r5, lr}
 8002266:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002268:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d067      	beq.n	8002340 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002270:	2302      	movs	r3, #2
 8002272:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002276:	6822      	ldr	r2, [r4, #0]
 8002278:	6993      	ldr	r3, [r2, #24]
 800227a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800227e:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002280:	6821      	ldr	r1, [r4, #0]
 8002282:	698a      	ldr	r2, [r1, #24]
 8002284:	6863      	ldr	r3, [r4, #4]
 8002286:	68a0      	ldr	r0, [r4, #8]
 8002288:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800228a:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800228c:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800228e:	6920      	ldr	r0, [r4, #16]
 8002290:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002292:	4313      	orrs	r3, r2
 8002294:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002296:	6821      	ldr	r1, [r4, #0]
 8002298:	688a      	ldr	r2, [r1, #8]
 800229a:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <HAL_LTDC_Init+0xf0>)
 800229c:	401a      	ands	r2, r3
 800229e:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80022a0:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80022a2:	6820      	ldr	r0, [r4, #0]
 80022a4:	6882      	ldr	r2, [r0, #8]
 80022a6:	69a1      	ldr	r1, [r4, #24]
 80022a8:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80022ac:	430a      	orrs	r2, r1
 80022ae:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80022b0:	6821      	ldr	r1, [r4, #0]
 80022b2:	68ca      	ldr	r2, [r1, #12]
 80022b4:	401a      	ands	r2, r3
 80022b6:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80022b8:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80022ba:	6820      	ldr	r0, [r4, #0]
 80022bc:	68c2      	ldr	r2, [r0, #12]
 80022be:	6a21      	ldr	r1, [r4, #32]
 80022c0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80022c4:	430a      	orrs	r2, r1
 80022c6:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80022c8:	6821      	ldr	r1, [r4, #0]
 80022ca:	690a      	ldr	r2, [r1, #16]
 80022cc:	401a      	ands	r2, r3
 80022ce:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80022d0:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80022d2:	6820      	ldr	r0, [r4, #0]
 80022d4:	6902      	ldr	r2, [r0, #16]
 80022d6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80022d8:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80022dc:	430a      	orrs	r2, r1
 80022de:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80022e0:	6821      	ldr	r1, [r4, #0]
 80022e2:	694a      	ldr	r2, [r1, #20]
 80022e4:	4013      	ands	r3, r2
 80022e6:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80022e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80022ea:	6821      	ldr	r1, [r4, #0]
 80022ec:	694b      	ldr	r3, [r1, #20]
 80022ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80022f0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80022f4:	4313      	orrs	r3, r2
 80022f6:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80022f8:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80022fc:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8002300:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002302:	6821      	ldr	r1, [r4, #0]
 8002304:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002306:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800230a:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800230c:	6821      	ldr	r1, [r4, #0]
 800230e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002310:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002314:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8002318:	4303      	orrs	r3, r0
 800231a:	4313      	orrs	r3, r2
 800231c:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800231e:	6822      	ldr	r2, [r4, #0]
 8002320:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002322:	f043 0306 	orr.w	r3, r3, #6
 8002326:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8002328:	6822      	ldr	r2, [r4, #0]
 800232a:	6993      	ldr	r3, [r2, #24]
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002332:	2000      	movs	r0, #0
 8002334:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8002338:	2301      	movs	r3, #1
 800233a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800233e:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8002340:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8002344:	f7ff f9d6 	bl	80016f4 <HAL_LTDC_MspInit>
 8002348:	e792      	b.n	8002270 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 800234a:	2001      	movs	r0, #1
}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	f000f800 	.word	0xf000f800

08002354 <HAL_LTDC_ErrorCallback>:
}
 8002354:	4770      	bx	lr

08002356 <HAL_LTDC_LineEventCallback>:
}
 8002356:	4770      	bx	lr

08002358 <HAL_LTDC_ReloadEventCallback>:
}
 8002358:	4770      	bx	lr

0800235a <HAL_LTDC_IRQHandler>:
{
 800235a:	b570      	push	{r4, r5, r6, lr}
 800235c:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800235e:	6803      	ldr	r3, [r0, #0]
 8002360:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002362:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002364:	f015 0f04 	tst.w	r5, #4
 8002368:	d002      	beq.n	8002370 <HAL_LTDC_IRQHandler+0x16>
 800236a:	f016 0f04 	tst.w	r6, #4
 800236e:	d112      	bne.n	8002396 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002370:	f015 0f02 	tst.w	r5, #2
 8002374:	d002      	beq.n	800237c <HAL_LTDC_IRQHandler+0x22>
 8002376:	f016 0f02 	tst.w	r6, #2
 800237a:	d121      	bne.n	80023c0 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800237c:	f015 0f01 	tst.w	r5, #1
 8002380:	d002      	beq.n	8002388 <HAL_LTDC_IRQHandler+0x2e>
 8002382:	f016 0f01 	tst.w	r6, #1
 8002386:	d132      	bne.n	80023ee <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002388:	f015 0f08 	tst.w	r5, #8
 800238c:	d002      	beq.n	8002394 <HAL_LTDC_IRQHandler+0x3a>
 800238e:	f016 0f08 	tst.w	r6, #8
 8002392:	d13d      	bne.n	8002410 <HAL_LTDC_IRQHandler+0xb6>
}
 8002394:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002398:	f022 0204 	bic.w	r2, r2, #4
 800239c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800239e:	6803      	ldr	r3, [r0, #0]
 80023a0:	2204      	movs	r2, #4
 80023a2:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80023a4:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80023b0:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80023b4:	2300      	movs	r3, #0
 80023b6:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80023ba:	f7ff ffcb 	bl	8002354 <HAL_LTDC_ErrorCallback>
 80023be:	e7d7      	b.n	8002370 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80023c0:	6822      	ldr	r2, [r4, #0]
 80023c2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80023c4:	f023 0302 	bic.w	r3, r3, #2
 80023c8:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80023ca:	6823      	ldr	r3, [r4, #0]
 80023cc:	2202      	movs	r2, #2
 80023ce:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80023d0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80023da:	2304      	movs	r3, #4
 80023dc:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80023e0:	2300      	movs	r3, #0
 80023e2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80023e6:	4620      	mov	r0, r4
 80023e8:	f7ff ffb4 	bl	8002354 <HAL_LTDC_ErrorCallback>
 80023ec:	e7c6      	b.n	800237c <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80023ee:	6822      	ldr	r2, [r4, #0]
 80023f0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80023f2:	f023 0301 	bic.w	r3, r3, #1
 80023f6:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80023f8:	6822      	ldr	r2, [r4, #0]
 80023fa:	2301      	movs	r3, #1
 80023fc:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80023fe:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002402:	2300      	movs	r3, #0
 8002404:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8002408:	4620      	mov	r0, r4
 800240a:	f7ff ffa4 	bl	8002356 <HAL_LTDC_LineEventCallback>
 800240e:	e7bb      	b.n	8002388 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002410:	6822      	ldr	r2, [r4, #0]
 8002412:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002414:	f023 0308 	bic.w	r3, r3, #8
 8002418:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800241a:	6823      	ldr	r3, [r4, #0]
 800241c:	2208      	movs	r2, #8
 800241e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8002420:	2301      	movs	r3, #1
 8002422:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002426:	2300      	movs	r3, #0
 8002428:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800242c:	4620      	mov	r0, r4
 800242e:	f7ff ff93 	bl	8002358 <HAL_LTDC_ReloadEventCallback>
}
 8002432:	e7af      	b.n	8002394 <HAL_LTDC_IRQHandler+0x3a>

08002434 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8002434:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002438:	2b01      	cmp	r3, #1
 800243a:	d027      	beq.n	800248c <HAL_LTDC_ConfigLayer+0x58>
{
 800243c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002440:	4694      	mov	ip, r2
 8002442:	460f      	mov	r7, r1
 8002444:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 8002446:	f04f 0801 	mov.w	r8, #1
 800244a:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800244e:	2302      	movs	r3, #2
 8002450:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002454:	2434      	movs	r4, #52	; 0x34
 8002456:	fb04 0402 	mla	r4, r4, r2, r0
 800245a:	3438      	adds	r4, #56	; 0x38
 800245c:	460d      	mov	r5, r1
 800245e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002462:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002464:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800246a:	682b      	ldr	r3, [r5, #0]
 800246c:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800246e:	4662      	mov	r2, ip
 8002470:	4639      	mov	r1, r7
 8002472:	4630      	mov	r0, r6
 8002474:	f7ff fe2a 	bl	80020cc <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002478:	6833      	ldr	r3, [r6, #0]
 800247a:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800247e:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002482:	2000      	movs	r0, #0
 8002484:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8002488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 800248c:	2002      	movs	r0, #2
}
 800248e:	4770      	bx	lr

08002490 <HAL_LTDC_SetAddress>:
{
 8002490:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hltdc);
 8002492:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002496:	2b01      	cmp	r3, #1
 8002498:	d019      	beq.n	80024ce <HAL_LTDC_SetAddress+0x3e>
 800249a:	4604      	mov	r4, r0
 800249c:	2501      	movs	r5, #1
 800249e:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80024a2:	2302      	movs	r3, #2
 80024a4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80024a8:	2334      	movs	r3, #52	; 0x34
 80024aa:	fb03 f302 	mul.w	r3, r3, r2
 80024ae:	f103 0038 	add.w	r0, r3, #56	; 0x38
  pLayerCfg->FBStartAdress = Address;
 80024b2:	4423      	add	r3, r4
 80024b4:	65d9      	str	r1, [r3, #92]	; 0x5c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80024b6:	1821      	adds	r1, r4, r0
 80024b8:	4620      	mov	r0, r4
 80024ba:	f7ff fe07 	bl	80020cc <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80024be:	6823      	ldr	r3, [r4, #0]
 80024c0:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80024c2:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80024c6:	2000      	movs	r0, #0
 80024c8:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 80024cc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hltdc);
 80024ce:	2002      	movs	r0, #2
 80024d0:	e7fc      	b.n	80024cc <HAL_LTDC_SetAddress+0x3c>
	...

080024d4 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024d4:	4a02      	ldr	r2, [pc, #8]	; (80024e0 <HAL_PWR_EnableBkUpAccess+0xc>)
 80024d6:	6813      	ldr	r3, [r2, #0]
 80024d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024dc:	6013      	str	r3, [r2, #0]
}
 80024de:	4770      	bx	lr
 80024e0:	40007000 	.word	0x40007000

080024e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024e4:	b510      	push	{r4, lr}
 80024e6:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80024e8:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_PWREx_EnableOverDrive+0x74>)
 80024ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	9301      	str	r3, [sp, #4]
 80024fa:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80024fc:	4a17      	ldr	r2, [pc, #92]	; (800255c <HAL_PWREx_EnableOverDrive+0x78>)
 80024fe:	6813      	ldr	r3, [r2, #0]
 8002500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002504:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002506:	f7ff fa4d 	bl	80019a4 <HAL_GetTick>
 800250a:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800250c:	4b13      	ldr	r3, [pc, #76]	; (800255c <HAL_PWREx_EnableOverDrive+0x78>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002514:	d108      	bne.n	8002528 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002516:	f7ff fa45 	bl	80019a4 <HAL_GetTick>
 800251a:	1b00      	subs	r0, r0, r4
 800251c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002520:	d9f4      	bls.n	800250c <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8002522:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8002524:	b002      	add	sp, #8
 8002526:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002528:	4a0c      	ldr	r2, [pc, #48]	; (800255c <HAL_PWREx_EnableOverDrive+0x78>)
 800252a:	6813      	ldr	r3, [r2, #0]
 800252c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002530:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8002532:	f7ff fa37 	bl	80019a4 <HAL_GetTick>
 8002536:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002538:	4b08      	ldr	r3, [pc, #32]	; (800255c <HAL_PWREx_EnableOverDrive+0x78>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002540:	d107      	bne.n	8002552 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002542:	f7ff fa2f 	bl	80019a4 <HAL_GetTick>
 8002546:	1b00      	subs	r0, r0, r4
 8002548:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800254c:	d9f4      	bls.n	8002538 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 800254e:	2003      	movs	r0, #3
 8002550:	e7e8      	b.n	8002524 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8002552:	2000      	movs	r0, #0
 8002554:	e7e6      	b.n	8002524 <HAL_PWREx_EnableOverDrive+0x40>
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800
 800255c:	40007000 	.word	0x40007000

08002560 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002560:	2800      	cmp	r0, #0
 8002562:	f000 8209 	beq.w	8002978 <HAL_RCC_OscConfig+0x418>
{
 8002566:	b570      	push	{r4, r5, r6, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256c:	6803      	ldr	r3, [r0, #0]
 800256e:	f013 0f01 	tst.w	r3, #1
 8002572:	d029      	beq.n	80025c8 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002574:	4ba2      	ldr	r3, [pc, #648]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 030c 	and.w	r3, r3, #12
 800257c:	2b04      	cmp	r3, #4
 800257e:	d01a      	beq.n	80025b6 <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002580:	4b9f      	ldr	r3, [pc, #636]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b08      	cmp	r3, #8
 800258a:	d00f      	beq.n	80025ac <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800258c:	6863      	ldr	r3, [r4, #4]
 800258e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002592:	d040      	beq.n	8002616 <HAL_RCC_OscConfig+0xb6>
 8002594:	2b00      	cmp	r3, #0
 8002596:	d154      	bne.n	8002642 <HAL_RCC_OscConfig+0xe2>
 8002598:	4b99      	ldr	r3, [pc, #612]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e039      	b.n	8002620 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ac:	4b94      	ldr	r3, [pc, #592]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80025b4:	d0ea      	beq.n	800258c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b6:	4b92      	ldr	r3, [pc, #584]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80025be:	d003      	beq.n	80025c8 <HAL_RCC_OscConfig+0x68>
 80025c0:	6863      	ldr	r3, [r4, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 81da 	beq.w	800297c <HAL_RCC_OscConfig+0x41c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c8:	6823      	ldr	r3, [r4, #0]
 80025ca:	f013 0f02 	tst.w	r3, #2
 80025ce:	d075      	beq.n	80026bc <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025d0:	4b8b      	ldr	r3, [pc, #556]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f013 0f0c 	tst.w	r3, #12
 80025d8:	d05e      	beq.n	8002698 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025da:	4b89      	ldr	r3, [pc, #548]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d053      	beq.n	800268e <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025e6:	68e3      	ldr	r3, [r4, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 808a 	beq.w	8002702 <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ee:	4a84      	ldr	r2, [pc, #528]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 80025f0:	6813      	ldr	r3, [r2, #0]
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7ff f9d4 	bl	80019a4 <HAL_GetTick>
 80025fc:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fe:	4b80      	ldr	r3, [pc, #512]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f013 0f02 	tst.w	r3, #2
 8002606:	d173      	bne.n	80026f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002608:	f7ff f9cc 	bl	80019a4 <HAL_GetTick>
 800260c:	1b40      	subs	r0, r0, r5
 800260e:	2802      	cmp	r0, #2
 8002610:	d9f5      	bls.n	80025fe <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8002612:	2003      	movs	r0, #3
 8002614:	e1b5      	b.n	8002982 <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002616:	4a7a      	ldr	r2, [pc, #488]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 8002618:	6813      	ldr	r3, [r2, #0]
 800261a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261e:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002620:	6863      	ldr	r3, [r4, #4]
 8002622:	b32b      	cbz	r3, 8002670 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8002624:	f7ff f9be 	bl	80019a4 <HAL_GetTick>
 8002628:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	4b75      	ldr	r3, [pc, #468]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002632:	d1c9      	bne.n	80025c8 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002634:	f7ff f9b6 	bl	80019a4 <HAL_GetTick>
 8002638:	1b40      	subs	r0, r0, r5
 800263a:	2864      	cmp	r0, #100	; 0x64
 800263c:	d9f5      	bls.n	800262a <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 800263e:	2003      	movs	r0, #3
 8002640:	e19f      	b.n	8002982 <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002642:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002646:	d009      	beq.n	800265c <HAL_RCC_OscConfig+0xfc>
 8002648:	4b6d      	ldr	r3, [pc, #436]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	e7e1      	b.n	8002620 <HAL_RCC_OscConfig+0xc0>
 800265c:	4b68      	ldr	r3, [pc, #416]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	e7d7      	b.n	8002620 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8002670:	f7ff f998 	bl	80019a4 <HAL_GetTick>
 8002674:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002676:	4b62      	ldr	r3, [pc, #392]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800267e:	d0a3      	beq.n	80025c8 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002680:	f7ff f990 	bl	80019a4 <HAL_GetTick>
 8002684:	1b40      	subs	r0, r0, r5
 8002686:	2864      	cmp	r0, #100	; 0x64
 8002688:	d9f5      	bls.n	8002676 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 800268a:	2003      	movs	r0, #3
 800268c:	e179      	b.n	8002982 <HAL_RCC_OscConfig+0x422>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800268e:	4b5c      	ldr	r3, [pc, #368]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002696:	d1a6      	bne.n	80025e6 <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002698:	4b59      	ldr	r3, [pc, #356]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f013 0f02 	tst.w	r3, #2
 80026a0:	d004      	beq.n	80026ac <HAL_RCC_OscConfig+0x14c>
 80026a2:	68e3      	ldr	r3, [r4, #12]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 80026a8:	2001      	movs	r0, #1
 80026aa:	e16a      	b.n	8002982 <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ac:	4a54      	ldr	r2, [pc, #336]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 80026ae:	6813      	ldr	r3, [r2, #0]
 80026b0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80026b4:	6921      	ldr	r1, [r4, #16]
 80026b6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80026ba:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026bc:	6823      	ldr	r3, [r4, #0]
 80026be:	f013 0f08 	tst.w	r3, #8
 80026c2:	d046      	beq.n	8002752 <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026c4:	6963      	ldr	r3, [r4, #20]
 80026c6:	b383      	cbz	r3, 800272a <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c8:	4a4d      	ldr	r2, [pc, #308]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 80026ca:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d2:	f7ff f967 	bl	80019a4 <HAL_GetTick>
 80026d6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d8:	4b49      	ldr	r3, [pc, #292]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 80026da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026dc:	f013 0f02 	tst.w	r3, #2
 80026e0:	d137      	bne.n	8002752 <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e2:	f7ff f95f 	bl	80019a4 <HAL_GetTick>
 80026e6:	1b40      	subs	r0, r0, r5
 80026e8:	2802      	cmp	r0, #2
 80026ea:	d9f5      	bls.n	80026d8 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 80026ec:	2003      	movs	r0, #3
 80026ee:	e148      	b.n	8002982 <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f0:	4a43      	ldr	r2, [pc, #268]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 80026f2:	6813      	ldr	r3, [r2, #0]
 80026f4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80026f8:	6921      	ldr	r1, [r4, #16]
 80026fa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	e7dc      	b.n	80026bc <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8002702:	4a3f      	ldr	r2, [pc, #252]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 8002704:	6813      	ldr	r3, [r2, #0]
 8002706:	f023 0301 	bic.w	r3, r3, #1
 800270a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800270c:	f7ff f94a 	bl	80019a4 <HAL_GetTick>
 8002710:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002712:	4b3b      	ldr	r3, [pc, #236]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f013 0f02 	tst.w	r3, #2
 800271a:	d0cf      	beq.n	80026bc <HAL_RCC_OscConfig+0x15c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800271c:	f7ff f942 	bl	80019a4 <HAL_GetTick>
 8002720:	1b40      	subs	r0, r0, r5
 8002722:	2802      	cmp	r0, #2
 8002724:	d9f5      	bls.n	8002712 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8002726:	2003      	movs	r0, #3
 8002728:	e12b      	b.n	8002982 <HAL_RCC_OscConfig+0x422>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800272a:	4a35      	ldr	r2, [pc, #212]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 800272c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800272e:	f023 0301 	bic.w	r3, r3, #1
 8002732:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7ff f936 	bl	80019a4 <HAL_GetTick>
 8002738:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273a:	4b31      	ldr	r3, [pc, #196]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 800273c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800273e:	f013 0f02 	tst.w	r3, #2
 8002742:	d006      	beq.n	8002752 <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002744:	f7ff f92e 	bl	80019a4 <HAL_GetTick>
 8002748:	1b40      	subs	r0, r0, r5
 800274a:	2802      	cmp	r0, #2
 800274c:	d9f5      	bls.n	800273a <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 800274e:	2003      	movs	r0, #3
 8002750:	e117      	b.n	8002982 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002752:	6823      	ldr	r3, [r4, #0]
 8002754:	f013 0f04 	tst.w	r3, #4
 8002758:	d07e      	beq.n	8002858 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800275a:	4b29      	ldr	r3, [pc, #164]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002762:	d11e      	bne.n	80027a2 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002764:	4b26      	ldr	r3, [pc, #152]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 8002766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002768:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800276c:	641a      	str	r2, [r3, #64]	; 0x40
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002778:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800277a:	4b22      	ldr	r3, [pc, #136]	; (8002804 <HAL_RCC_OscConfig+0x2a4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002782:	d010      	beq.n	80027a6 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002784:	68a3      	ldr	r3, [r4, #8]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d021      	beq.n	80027ce <HAL_RCC_OscConfig+0x26e>
 800278a:	2b00      	cmp	r3, #0
 800278c:	d13c      	bne.n	8002808 <HAL_RCC_OscConfig+0x2a8>
 800278e:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 8002790:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002792:	f022 0201 	bic.w	r2, r2, #1
 8002796:	671a      	str	r2, [r3, #112]	; 0x70
 8002798:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800279a:	f022 0204 	bic.w	r2, r2, #4
 800279e:	671a      	str	r2, [r3, #112]	; 0x70
 80027a0:	e01a      	b.n	80027d8 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 80027a2:	2500      	movs	r5, #0
 80027a4:	e7e9      	b.n	800277a <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 80027a6:	4a17      	ldr	r2, [pc, #92]	; (8002804 <HAL_RCC_OscConfig+0x2a4>)
 80027a8:	6813      	ldr	r3, [r2, #0]
 80027aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ae:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80027b0:	f7ff f8f8 	bl	80019a4 <HAL_GetTick>
 80027b4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b6:	4b13      	ldr	r3, [pc, #76]	; (8002804 <HAL_RCC_OscConfig+0x2a4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f413 7f80 	tst.w	r3, #256	; 0x100
 80027be:	d1e1      	bne.n	8002784 <HAL_RCC_OscConfig+0x224>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c0:	f7ff f8f0 	bl	80019a4 <HAL_GetTick>
 80027c4:	1b80      	subs	r0, r0, r6
 80027c6:	2864      	cmp	r0, #100	; 0x64
 80027c8:	d9f5      	bls.n	80027b6 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 80027ca:	2003      	movs	r0, #3
 80027cc:	e0d9      	b.n	8002982 <HAL_RCC_OscConfig+0x422>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ce:	4a0c      	ldr	r2, [pc, #48]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 80027d0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027d8:	68a3      	ldr	r3, [r4, #8]
 80027da:	b35b      	cbz	r3, 8002834 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027dc:	f7ff f8e2 	bl	80019a4 <HAL_GetTick>
 80027e0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e2:	4b07      	ldr	r3, [pc, #28]	; (8002800 <HAL_RCC_OscConfig+0x2a0>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e6:	f013 0f02 	tst.w	r3, #2
 80027ea:	d134      	bne.n	8002856 <HAL_RCC_OscConfig+0x2f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ec:	f7ff f8da 	bl	80019a4 <HAL_GetTick>
 80027f0:	1b80      	subs	r0, r0, r6
 80027f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80027f6:	4298      	cmp	r0, r3
 80027f8:	d9f3      	bls.n	80027e2 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 80027fa:	2003      	movs	r0, #3
 80027fc:	e0c1      	b.n	8002982 <HAL_RCC_OscConfig+0x422>
 80027fe:	bf00      	nop
 8002800:	40023800 	.word	0x40023800
 8002804:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002808:	2b05      	cmp	r3, #5
 800280a:	d009      	beq.n	8002820 <HAL_RCC_OscConfig+0x2c0>
 800280c:	4b60      	ldr	r3, [pc, #384]	; (8002990 <HAL_RCC_OscConfig+0x430>)
 800280e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002810:	f022 0201 	bic.w	r2, r2, #1
 8002814:	671a      	str	r2, [r3, #112]	; 0x70
 8002816:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002818:	f022 0204 	bic.w	r2, r2, #4
 800281c:	671a      	str	r2, [r3, #112]	; 0x70
 800281e:	e7db      	b.n	80027d8 <HAL_RCC_OscConfig+0x278>
 8002820:	4b5b      	ldr	r3, [pc, #364]	; (8002990 <HAL_RCC_OscConfig+0x430>)
 8002822:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002824:	f042 0204 	orr.w	r2, r2, #4
 8002828:	671a      	str	r2, [r3, #112]	; 0x70
 800282a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800282c:	f042 0201 	orr.w	r2, r2, #1
 8002830:	671a      	str	r2, [r3, #112]	; 0x70
 8002832:	e7d1      	b.n	80027d8 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002834:	f7ff f8b6 	bl	80019a4 <HAL_GetTick>
 8002838:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283a:	4b55      	ldr	r3, [pc, #340]	; (8002990 <HAL_RCC_OscConfig+0x430>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283e:	f013 0f02 	tst.w	r3, #2
 8002842:	d008      	beq.n	8002856 <HAL_RCC_OscConfig+0x2f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002844:	f7ff f8ae 	bl	80019a4 <HAL_GetTick>
 8002848:	1b80      	subs	r0, r0, r6
 800284a:	f241 3388 	movw	r3, #5000	; 0x1388
 800284e:	4298      	cmp	r0, r3
 8002850:	d9f3      	bls.n	800283a <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 8002852:	2003      	movs	r0, #3
 8002854:	e095      	b.n	8002982 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002856:	b9fd      	cbnz	r5, 8002898 <HAL_RCC_OscConfig+0x338>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002858:	69a3      	ldr	r3, [r4, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 8090 	beq.w	8002980 <HAL_RCC_OscConfig+0x420>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002860:	4a4b      	ldr	r2, [pc, #300]	; (8002990 <HAL_RCC_OscConfig+0x430>)
 8002862:	6892      	ldr	r2, [r2, #8]
 8002864:	f002 020c 	and.w	r2, r2, #12
 8002868:	2a08      	cmp	r2, #8
 800286a:	d058      	beq.n	800291e <HAL_RCC_OscConfig+0x3be>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800286c:	2b02      	cmp	r3, #2
 800286e:	d019      	beq.n	80028a4 <HAL_RCC_OscConfig+0x344>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002870:	4a47      	ldr	r2, [pc, #284]	; (8002990 <HAL_RCC_OscConfig+0x430>)
 8002872:	6813      	ldr	r3, [r2, #0]
 8002874:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287a:	f7ff f893 	bl	80019a4 <HAL_GetTick>
 800287e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002880:	4b43      	ldr	r3, [pc, #268]	; (8002990 <HAL_RCC_OscConfig+0x430>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002888:	d047      	beq.n	800291a <HAL_RCC_OscConfig+0x3ba>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288a:	f7ff f88b 	bl	80019a4 <HAL_GetTick>
 800288e:	1b00      	subs	r0, r0, r4
 8002890:	2802      	cmp	r0, #2
 8002892:	d9f5      	bls.n	8002880 <HAL_RCC_OscConfig+0x320>
          {
            return HAL_TIMEOUT;
 8002894:	2003      	movs	r0, #3
 8002896:	e074      	b.n	8002982 <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002898:	4a3d      	ldr	r2, [pc, #244]	; (8002990 <HAL_RCC_OscConfig+0x430>)
 800289a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800289c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a0:	6413      	str	r3, [r2, #64]	; 0x40
 80028a2:	e7d9      	b.n	8002858 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 80028a4:	4a3a      	ldr	r2, [pc, #232]	; (8002990 <HAL_RCC_OscConfig+0x430>)
 80028a6:	6813      	ldr	r3, [r2, #0]
 80028a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ac:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80028ae:	f7ff f879 	bl	80019a4 <HAL_GetTick>
 80028b2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b4:	4b36      	ldr	r3, [pc, #216]	; (8002990 <HAL_RCC_OscConfig+0x430>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80028bc:	d006      	beq.n	80028cc <HAL_RCC_OscConfig+0x36c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028be:	f7ff f871 	bl	80019a4 <HAL_GetTick>
 80028c2:	1b40      	subs	r0, r0, r5
 80028c4:	2802      	cmp	r0, #2
 80028c6:	d9f5      	bls.n	80028b4 <HAL_RCC_OscConfig+0x354>
            return HAL_TIMEOUT;
 80028c8:	2003      	movs	r0, #3
 80028ca:	e05a      	b.n	8002982 <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028cc:	69e3      	ldr	r3, [r4, #28]
 80028ce:	6a22      	ldr	r2, [r4, #32]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028d4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80028d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80028da:	0852      	lsrs	r2, r2, #1
 80028dc:	3a01      	subs	r2, #1
 80028de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80028e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80028e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80028e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028ec:	4a28      	ldr	r2, [pc, #160]	; (8002990 <HAL_RCC_OscConfig+0x430>)
 80028ee:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80028f0:	6813      	ldr	r3, [r2, #0]
 80028f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028f6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80028f8:	f7ff f854 	bl	80019a4 <HAL_GetTick>
 80028fc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fe:	4b24      	ldr	r3, [pc, #144]	; (8002990 <HAL_RCC_OscConfig+0x430>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002906:	d106      	bne.n	8002916 <HAL_RCC_OscConfig+0x3b6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002908:	f7ff f84c 	bl	80019a4 <HAL_GetTick>
 800290c:	1b00      	subs	r0, r0, r4
 800290e:	2802      	cmp	r0, #2
 8002910:	d9f5      	bls.n	80028fe <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 8002912:	2003      	movs	r0, #3
 8002914:	e035      	b.n	8002982 <HAL_RCC_OscConfig+0x422>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002916:	2000      	movs	r0, #0
 8002918:	e033      	b.n	8002982 <HAL_RCC_OscConfig+0x422>
 800291a:	2000      	movs	r0, #0
 800291c:	e031      	b.n	8002982 <HAL_RCC_OscConfig+0x422>
      pll_config = RCC->PLLCFGR;
 800291e:	4a1c      	ldr	r2, [pc, #112]	; (8002990 <HAL_RCC_OscConfig+0x430>)
 8002920:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002922:	2b01      	cmp	r3, #1
 8002924:	d02f      	beq.n	8002986 <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002926:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800292a:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800292c:	428b      	cmp	r3, r1
 800292e:	d001      	beq.n	8002934 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002930:	2001      	movs	r0, #1
 8002932:	e026      	b.n	8002982 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002934:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8002938:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293a:	428b      	cmp	r3, r1
 800293c:	d001      	beq.n	8002942 <HAL_RCC_OscConfig+0x3e2>
        return HAL_ERROR;
 800293e:	2001      	movs	r0, #1
 8002940:	e01f      	b.n	8002982 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002942:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002944:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002948:	4013      	ands	r3, r2
 800294a:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800294e:	d001      	beq.n	8002954 <HAL_RCC_OscConfig+0x3f4>
        return HAL_ERROR;
 8002950:	2001      	movs	r0, #1
 8002952:	e016      	b.n	8002982 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002954:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8002958:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800295a:	085b      	lsrs	r3, r3, #1
 800295c:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800295e:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8002962:	d001      	beq.n	8002968 <HAL_RCC_OscConfig+0x408>
        return HAL_ERROR;
 8002964:	2001      	movs	r0, #1
 8002966:	e00c      	b.n	8002982 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002968:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800296c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800296e:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 8002972:	d00a      	beq.n	800298a <HAL_RCC_OscConfig+0x42a>
        return HAL_ERROR;
 8002974:	2001      	movs	r0, #1
 8002976:	e004      	b.n	8002982 <HAL_RCC_OscConfig+0x422>
    return HAL_ERROR;
 8002978:	2001      	movs	r0, #1
}
 800297a:	4770      	bx	lr
        return HAL_ERROR;
 800297c:	2001      	movs	r0, #1
 800297e:	e000      	b.n	8002982 <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 8002980:	2000      	movs	r0, #0
}
 8002982:	b002      	add	sp, #8
 8002984:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002986:	2001      	movs	r0, #1
 8002988:	e7fb      	b.n	8002982 <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 800298a:	2000      	movs	r0, #0
 800298c:	e7f9      	b.n	8002982 <HAL_RCC_OscConfig+0x422>
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800

08002994 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002994:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b04      	cmp	r3, #4
 800299e:	d044      	beq.n	8002a2a <HAL_RCC_GetSysClockFreq+0x96>
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029a4:	4823      	ldr	r0, [pc, #140]	; (8002a34 <HAL_RCC_GetSysClockFreq+0xa0>)
 80029a6:	4770      	bx	lr
{
 80029a8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029ac:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80029ba:	d013      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029bc:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029be:	6859      	ldr	r1, [r3, #4]
 80029c0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80029c4:	2300      	movs	r3, #0
 80029c6:	481c      	ldr	r0, [pc, #112]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029c8:	fba1 0100 	umull	r0, r1, r1, r0
 80029cc:	f7fd fc1c 	bl	8000208 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80029d0:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80029d8:	3301      	adds	r3, #1
 80029da:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80029dc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80029e0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e4:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80029ec:	461e      	mov	r6, r3
 80029ee:	2700      	movs	r7, #0
 80029f0:	015c      	lsls	r4, r3, #5
 80029f2:	2500      	movs	r5, #0
 80029f4:	1ae4      	subs	r4, r4, r3
 80029f6:	eb65 0507 	sbc.w	r5, r5, r7
 80029fa:	01a9      	lsls	r1, r5, #6
 80029fc:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002a00:	01a0      	lsls	r0, r4, #6
 8002a02:	1b00      	subs	r0, r0, r4
 8002a04:	eb61 0105 	sbc.w	r1, r1, r5
 8002a08:	00cb      	lsls	r3, r1, #3
 8002a0a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002a0e:	00c4      	lsls	r4, r0, #3
 8002a10:	19a0      	adds	r0, r4, r6
 8002a12:	eb43 0107 	adc.w	r1, r3, r7
 8002a16:	028b      	lsls	r3, r1, #10
 8002a18:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002a1c:	0284      	lsls	r4, r0, #10
 8002a1e:	4620      	mov	r0, r4
 8002a20:	4619      	mov	r1, r3
 8002a22:	2300      	movs	r3, #0
 8002a24:	f7fd fbf0 	bl	8000208 <__aeabi_uldivmod>
 8002a28:	e7d2      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8002a2a:	4803      	ldr	r0, [pc, #12]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800
 8002a34:	00f42400 	.word	0x00f42400
 8002a38:	017d7840 	.word	0x017d7840

08002a3c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002a3c:	2800      	cmp	r0, #0
 8002a3e:	f000 80a3 	beq.w	8002b88 <HAL_RCC_ClockConfig+0x14c>
{
 8002a42:	b570      	push	{r4, r5, r6, lr}
 8002a44:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a46:	4b52      	ldr	r3, [pc, #328]	; (8002b90 <HAL_RCC_ClockConfig+0x154>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	428b      	cmp	r3, r1
 8002a50:	d20c      	bcs.n	8002a6c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4a4f      	ldr	r2, [pc, #316]	; (8002b90 <HAL_RCC_ClockConfig+0x154>)
 8002a54:	6813      	ldr	r3, [r2, #0]
 8002a56:	f023 030f 	bic.w	r3, r3, #15
 8002a5a:	430b      	orrs	r3, r1
 8002a5c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5e:	6813      	ldr	r3, [r2, #0]
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	428b      	cmp	r3, r1
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8002a68:	2001      	movs	r0, #1
}
 8002a6a:	bd70      	pop	{r4, r5, r6, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a6c:	6823      	ldr	r3, [r4, #0]
 8002a6e:	f013 0f02 	tst.w	r3, #2
 8002a72:	d017      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a74:	f013 0f04 	tst.w	r3, #4
 8002a78:	d004      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a7a:	4a46      	ldr	r2, [pc, #280]	; (8002b94 <HAL_RCC_ClockConfig+0x158>)
 8002a7c:	6893      	ldr	r3, [r2, #8]
 8002a7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a82:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a84:	6823      	ldr	r3, [r4, #0]
 8002a86:	f013 0f08 	tst.w	r3, #8
 8002a8a:	d004      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a8c:	4a41      	ldr	r2, [pc, #260]	; (8002b94 <HAL_RCC_ClockConfig+0x158>)
 8002a8e:	6893      	ldr	r3, [r2, #8]
 8002a90:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a94:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a96:	4a3f      	ldr	r2, [pc, #252]	; (8002b94 <HAL_RCC_ClockConfig+0x158>)
 8002a98:	6893      	ldr	r3, [r2, #8]
 8002a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a9e:	68a0      	ldr	r0, [r4, #8]
 8002aa0:	4303      	orrs	r3, r0
 8002aa2:	6093      	str	r3, [r2, #8]
 8002aa4:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa6:	6823      	ldr	r3, [r4, #0]
 8002aa8:	f013 0f01 	tst.w	r3, #1
 8002aac:	d031      	beq.n	8002b12 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aae:	6863      	ldr	r3, [r4, #4]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d020      	beq.n	8002af6 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d025      	beq.n	8002b04 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab8:	4a36      	ldr	r2, [pc, #216]	; (8002b94 <HAL_RCC_ClockConfig+0x158>)
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	f012 0f02 	tst.w	r2, #2
 8002ac0:	d064      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ac2:	4934      	ldr	r1, [pc, #208]	; (8002b94 <HAL_RCC_ClockConfig+0x158>)
 8002ac4:	688a      	ldr	r2, [r1, #8]
 8002ac6:	f022 0203 	bic.w	r2, r2, #3
 8002aca:	4313      	orrs	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002ace:	f7fe ff69 	bl	80019a4 <HAL_GetTick>
 8002ad2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad4:	4b2f      	ldr	r3, [pc, #188]	; (8002b94 <HAL_RCC_ClockConfig+0x158>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 030c 	and.w	r3, r3, #12
 8002adc:	6862      	ldr	r2, [r4, #4]
 8002ade:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002ae2:	d016      	beq.n	8002b12 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae4:	f7fe ff5e 	bl	80019a4 <HAL_GetTick>
 8002ae8:	1b80      	subs	r0, r0, r6
 8002aea:	f241 3388 	movw	r3, #5000	; 0x1388
 8002aee:	4298      	cmp	r0, r3
 8002af0:	d9f0      	bls.n	8002ad4 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8002af2:	2003      	movs	r0, #3
 8002af4:	e7b9      	b.n	8002a6a <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	4a27      	ldr	r2, [pc, #156]	; (8002b94 <HAL_RCC_ClockConfig+0x158>)
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002afe:	d1e0      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002b00:	2001      	movs	r0, #1
 8002b02:	e7b2      	b.n	8002a6a <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b04:	4a23      	ldr	r2, [pc, #140]	; (8002b94 <HAL_RCC_ClockConfig+0x158>)
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002b0c:	d1d9      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002b0e:	2001      	movs	r0, #1
 8002b10:	e7ab      	b.n	8002a6a <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b12:	4b1f      	ldr	r3, [pc, #124]	; (8002b90 <HAL_RCC_ClockConfig+0x154>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	42ab      	cmp	r3, r5
 8002b1c:	d90c      	bls.n	8002b38 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4a1c      	ldr	r2, [pc, #112]	; (8002b90 <HAL_RCC_ClockConfig+0x154>)
 8002b20:	6813      	ldr	r3, [r2, #0]
 8002b22:	f023 030f 	bic.w	r3, r3, #15
 8002b26:	432b      	orrs	r3, r5
 8002b28:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	6813      	ldr	r3, [r2, #0]
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	42ab      	cmp	r3, r5
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8002b34:	2001      	movs	r0, #1
 8002b36:	e798      	b.n	8002a6a <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b38:	6823      	ldr	r3, [r4, #0]
 8002b3a:	f013 0f04 	tst.w	r3, #4
 8002b3e:	d006      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b40:	4a14      	ldr	r2, [pc, #80]	; (8002b94 <HAL_RCC_ClockConfig+0x158>)
 8002b42:	6893      	ldr	r3, [r2, #8]
 8002b44:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002b48:	68e1      	ldr	r1, [r4, #12]
 8002b4a:	430b      	orrs	r3, r1
 8002b4c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	f013 0f08 	tst.w	r3, #8
 8002b54:	d007      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b56:	4a0f      	ldr	r2, [pc, #60]	; (8002b94 <HAL_RCC_ClockConfig+0x158>)
 8002b58:	6893      	ldr	r3, [r2, #8]
 8002b5a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002b5e:	6921      	ldr	r1, [r4, #16]
 8002b60:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002b64:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b66:	f7ff ff15 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 8002b6a:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <HAL_RCC_ClockConfig+0x158>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002b72:	4a09      	ldr	r2, [pc, #36]	; (8002b98 <HAL_RCC_ClockConfig+0x15c>)
 8002b74:	5cd3      	ldrb	r3, [r2, r3]
 8002b76:	40d8      	lsrs	r0, r3
 8002b78:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <HAL_RCC_ClockConfig+0x160>)
 8002b7a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002b7c:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <HAL_RCC_ClockConfig+0x164>)
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	f7fe fe5e 	bl	8001840 <HAL_InitTick>
  return HAL_OK;
 8002b84:	2000      	movs	r0, #0
 8002b86:	e770      	b.n	8002a6a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002b88:	2001      	movs	r0, #1
}
 8002b8a:	4770      	bx	lr
        return HAL_ERROR;
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	e76c      	b.n	8002a6a <HAL_RCC_ClockConfig+0x2e>
 8002b90:	40023c00 	.word	0x40023c00
 8002b94:	40023800 	.word	0x40023800
 8002b98:	08003bf4 	.word	0x08003bf4
 8002b9c:	20000000 	.word	0x20000000
 8002ba0:	20000008 	.word	0x20000008

08002ba4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002ba4:	4b01      	ldr	r3, [pc, #4]	; (8002bac <HAL_RCC_GetHCLKFreq+0x8>)
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	20000000 	.word	0x20000000

08002bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bb2:	f7ff fff7 	bl	8002ba4 <HAL_RCC_GetHCLKFreq>
 8002bb6:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002bbe:	4a03      	ldr	r2, [pc, #12]	; (8002bcc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002bc0:	5cd3      	ldrb	r3, [r2, r3]
}
 8002bc2:	40d8      	lsrs	r0, r3
 8002bc4:	bd08      	pop	{r3, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	08003c04 	.word	0x08003c04

08002bd0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bd0:	230f      	movs	r3, #15
 8002bd2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_RCC_GetClockConfig+0x34>)
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	f002 0203 	and.w	r2, r2, #3
 8002bdc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002be4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002bec:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	08db      	lsrs	r3, r3, #3
 8002bf2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002bf6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bf8:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <HAL_RCC_GetClockConfig+0x38>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	600b      	str	r3, [r1, #0]
}
 8002c02:	4770      	bx	lr
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40023c00 	.word	0x40023c00

08002c0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c12:	6803      	ldr	r3, [r0, #0]
 8002c14:	f013 0f01 	tst.w	r3, #1
 8002c18:	d00c      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c1a:	4bb6      	ldr	r3, [pc, #728]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c2c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002c2e:	b1c3      	cbz	r3, 8002c62 <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 8002c30:	2600      	movs	r6, #0
 8002c32:	e000      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8002c34:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002c3c:	d015      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c3e:	4aad      	ldr	r2, [pc, #692]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c40:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002c44:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002c48:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002c4a:	430b      	orrs	r3, r1
 8002c4c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c56:	d006      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 8129 	beq.w	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
  uint32_t pllsaiused = 0;
 8002c5e:	2500      	movs	r5, #0
 8002c60:	e004      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8002c62:	2601      	movs	r6, #1
 8002c64:	e7e7      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8002c66:	2601      	movs	r6, #1
 8002c68:	e7f6      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 8002c6a:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c6c:	6823      	ldr	r3, [r4, #0]
 8002c6e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002c72:	d00f      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c74:	4a9f      	ldr	r2, [pc, #636]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c76:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002c7a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002c7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002c80:	430b      	orrs	r3, r1
 8002c82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c8c:	f000 8112 	beq.w	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c90:	b903      	cbnz	r3, 8002c94 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 8002c92:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c94:	6823      	ldr	r3, [r4, #0]
 8002c96:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002c9a:	d000      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
      plli2sused = 1;
 8002c9c:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c9e:	f013 0f20 	tst.w	r3, #32
 8002ca2:	f040 8109 	bne.w	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ca6:	6823      	ldr	r3, [r4, #0]
 8002ca8:	f013 0f10 	tst.w	r3, #16
 8002cac:	d00c      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cae:	4b91      	ldr	r3, [pc, #580]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cb0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002cb4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002cb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8002cbc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002cc0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cc8:	6823      	ldr	r3, [r4, #0]
 8002cca:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002cce:	d008      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cd0:	4a88      	ldr	r2, [pc, #544]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cd2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002cd6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002cda:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002ce8:	d008      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cea:	4a82      	ldr	r2, [pc, #520]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002cf0:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002cf4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002cf6:	430b      	orrs	r3, r1
 8002cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cfc:	6823      	ldr	r3, [r4, #0]
 8002cfe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002d02:	d008      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d04:	4a7b      	ldr	r2, [pc, #492]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d06:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002d0a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002d0e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002d10:	430b      	orrs	r3, r1
 8002d12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d16:	6823      	ldr	r3, [r4, #0]
 8002d18:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002d1c:	d008      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d1e:	4a75      	ldr	r2, [pc, #468]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d20:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002d24:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002d28:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002d2a:	430b      	orrs	r3, r1
 8002d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d36:	d008      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d38:	4a6e      	ldr	r2, [pc, #440]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d3a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002d3e:	f023 0303 	bic.w	r3, r3, #3
 8002d42:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002d44:	430b      	orrs	r3, r1
 8002d46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002d50:	d008      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d52:	4a68      	ldr	r2, [pc, #416]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d54:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002d58:	f023 030c 	bic.w	r3, r3, #12
 8002d5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d6a:	d008      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d6c:	4a61      	ldr	r2, [pc, #388]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d6e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002d72:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002d76:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d7e:	6823      	ldr	r3, [r4, #0]
 8002d80:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002d84:	d008      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d86:	4a5b      	ldr	r2, [pc, #364]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d88:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002d8c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d90:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002d92:	430b      	orrs	r3, r1
 8002d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d98:	6823      	ldr	r3, [r4, #0]
 8002d9a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002d9e:	d008      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002da0:	4a54      	ldr	r2, [pc, #336]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002da2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002daa:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002dac:	430b      	orrs	r3, r1
 8002dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002db8:	d008      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002dba:	4a4e      	ldr	r2, [pc, #312]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dbc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002dc0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002dc4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002dc6:	430b      	orrs	r3, r1
 8002dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002dd2:	d008      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002dd4:	4a47      	ldr	r2, [pc, #284]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dd6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002dda:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002dde:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002de0:	430b      	orrs	r3, r1
 8002de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002de6:	6823      	ldr	r3, [r4, #0]
 8002de8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002dec:	d008      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002dee:	4a41      	ldr	r2, [pc, #260]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002df0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002df4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002df8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002dfa:	430b      	orrs	r3, r1
 8002dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002e06:	d008      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e08:	4a3a      	ldr	r2, [pc, #232]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e0a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002e0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e12:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002e14:	430b      	orrs	r3, r1
 8002e16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002e20:	d00d      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e22:	4a34      	ldr	r2, [pc, #208]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e24:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002e28:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002e2c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e34:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002e36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e3a:	f000 80a7 	beq.w	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x380>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e3e:	6823      	ldr	r3, [r4, #0]
 8002e40:	f013 0f08 	tst.w	r3, #8
 8002e44:	d000      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    pllsaiused = 1;
 8002e46:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e48:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002e4c:	d008      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e4e:	4a29      	ldr	r2, [pc, #164]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e50:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002e54:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002e58:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002e5a:	430b      	orrs	r3, r1
 8002e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e60:	6823      	ldr	r3, [r4, #0]
 8002e62:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8002e66:	d009      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e68:	4a22      	ldr	r2, [pc, #136]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e6a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e72:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002e76:	430b      	orrs	r3, r1
 8002e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e7c:	b926      	cbnz	r6, 8002e88 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e84:	f000 8102 	beq.w	800308c <HAL_RCCEx_PeriphCLKConfig+0x480>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e88:	4a1a      	ldr	r2, [pc, #104]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e8a:	6813      	ldr	r3, [r2, #0]
 8002e8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e92:	f7fe fd87 	bl	80019a4 <HAL_GetTick>
 8002e96:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e98:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002ea0:	d076      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x384>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ea2:	f7fe fd7f 	bl	80019a4 <HAL_GetTick>
 8002ea6:	1b80      	subs	r0, r0, r6
 8002ea8:	2864      	cmp	r0, #100	; 0x64
 8002eaa:	d9f5      	bls.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eac:	2003      	movs	r0, #3
 8002eae:	e0ef      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x484>
      pllsaiused = 1;
 8002eb0:	2501      	movs	r5, #1
 8002eb2:	e6db      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8002eb4:	2601      	movs	r6, #1
 8002eb6:	e6eb      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002eb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ebc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002ecc:	4a0a      	ldr	r2, [pc, #40]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002ece:	6813      	ldr	r3, [r2, #0]
 8002ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002ed6:	f7fe fd65 	bl	80019a4 <HAL_GetTick>
 8002eda:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002edc:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ee4:	d10a      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee6:	f7fe fd5d 	bl	80019a4 <HAL_GetTick>
 8002eea:	1bc0      	subs	r0, r0, r7
 8002eec:	2864      	cmp	r0, #100	; 0x64
 8002eee:	d9f5      	bls.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
        return HAL_TIMEOUT;
 8002ef0:	2003      	movs	r0, #3
 8002ef2:	e0cd      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002efc:	4baa      	ldr	r3, [pc, #680]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f00:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002f04:	d015      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8002f06:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002f08:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d010      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x326>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f10:	4ba5      	ldr	r3, [pc, #660]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8002f12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f14:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f18:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002f1a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002f1e:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f20:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002f22:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002f26:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002f28:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2c:	f013 0f01 	tst.w	r3, #1
 8002f30:	d112      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x34c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f34:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002f38:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002f3c:	d01d      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002f3e:	4a9a      	ldr	r2, [pc, #616]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8002f40:	6893      	ldr	r3, [r2, #8]
 8002f42:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f46:	6093      	str	r3, [r2, #8]
 8002f48:	4997      	ldr	r1, [pc, #604]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8002f4a:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8002f4c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002f4e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002f52:	4313      	orrs	r3, r2
 8002f54:	670b      	str	r3, [r1, #112]	; 0x70
 8002f56:	e6a6      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8002f58:	f7fe fd24 	bl	80019a4 <HAL_GetTick>
 8002f5c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5e:	4b92      	ldr	r3, [pc, #584]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	f013 0f02 	tst.w	r3, #2
 8002f66:	d1e4      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x326>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f68:	f7fe fd1c 	bl	80019a4 <HAL_GetTick>
 8002f6c:	1bc0      	subs	r0, r0, r7
 8002f6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f72:	4298      	cmp	r0, r3
 8002f74:	d9f3      	bls.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x352>
            return HAL_TIMEOUT;
 8002f76:	2003      	movs	r0, #3
 8002f78:	e08a      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x484>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f7a:	488b      	ldr	r0, [pc, #556]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8002f7c:	6882      	ldr	r2, [r0, #8]
 8002f7e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002f82:	498a      	ldr	r1, [pc, #552]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002f84:	4019      	ands	r1, r3
 8002f86:	430a      	orrs	r2, r1
 8002f88:	6082      	str	r2, [r0, #8]
 8002f8a:	e7dd      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      pllsaiused = 1;
 8002f8c:	2501      	movs	r5, #1
 8002f8e:	e756      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x232>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f90:	6823      	ldr	r3, [r4, #0]
 8002f92:	f013 0f01 	tst.w	r3, #1
 8002f96:	d013      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8002f98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f9a:	b98b      	cbnz	r3, 8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f9c:	4a82      	ldr	r2, [pc, #520]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8002f9e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fa2:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fa6:	6860      	ldr	r0, [r4, #4]
 8002fa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fac:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002fb0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	68a1      	ldr	r1, [r4, #8]
 8002fb8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002fbc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002fc6:	d003      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8002fc8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002fca:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002fce:	d006      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8002fd0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002fd4:	d01e      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x408>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fdc:	d11a      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x408>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fde:	4a72      	ldr	r2, [pc, #456]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8002fe0:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fe4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002fe8:	6860      	ldr	r0, [r4, #4]
 8002fea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fee:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002ff2:	68e0      	ldr	r0, [r4, #12]
 8002ff4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002ff8:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003002:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003006:	f023 031f 	bic.w	r3, r3, #31
 800300a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800300c:	3901      	subs	r1, #1
 800300e:	430b      	orrs	r3, r1
 8003010:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800301a:	d011      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800301c:	4a62      	ldr	r2, [pc, #392]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800301e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003022:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003026:	6866      	ldr	r6, [r4, #4]
 8003028:	6923      	ldr	r3, [r4, #16]
 800302a:	041b      	lsls	r3, r3, #16
 800302c:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8003030:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8003034:	4303      	orrs	r3, r0
 8003036:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800303a:	430b      	orrs	r3, r1
 800303c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003040:	6823      	ldr	r3, [r4, #0]
 8003042:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003046:	d00d      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x458>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003048:	6862      	ldr	r2, [r4, #4]
 800304a:	6923      	ldr	r3, [r4, #16]
 800304c:	041b      	lsls	r3, r3, #16
 800304e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003052:	68e2      	ldr	r2, [r4, #12]
 8003054:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003058:	68a2      	ldr	r2, [r4, #8]
 800305a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800305e:	4a52      	ldr	r2, [pc, #328]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003060:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003064:	4a50      	ldr	r2, [pc, #320]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003066:	6813      	ldr	r3, [r2, #0]
 8003068:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800306c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800306e:	f7fe fc99 	bl	80019a4 <HAL_GetTick>
 8003072:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003074:	4b4c      	ldr	r3, [pc, #304]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800307c:	d106      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800307e:	f7fe fc91 	bl	80019a4 <HAL_GetTick>
 8003082:	1b80      	subs	r0, r0, r6
 8003084:	2864      	cmp	r0, #100	; 0x64
 8003086:	d9f5      	bls.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x468>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003088:	2003      	movs	r0, #3
 800308a:	e001      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x484>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800308c:	b915      	cbnz	r5, 8003094 <HAL_RCCEx_PeriphCLKConfig+0x488>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800308e:	2000      	movs	r0, #0
}
 8003090:	b003      	add	sp, #12
 8003092:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8003094:	4a44      	ldr	r2, [pc, #272]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003096:	6813      	ldr	r3, [r2, #0]
 8003098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800309c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800309e:	f7fe fc81 	bl	80019a4 <HAL_GetTick>
 80030a2:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030a4:	4b40      	ldr	r3, [pc, #256]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80030ac:	d006      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030ae:	f7fe fc79 	bl	80019a4 <HAL_GetTick>
 80030b2:	1b40      	subs	r0, r0, r5
 80030b4:	2864      	cmp	r0, #100	; 0x64
 80030b6:	d9f5      	bls.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x498>
        return HAL_TIMEOUT;
 80030b8:	2003      	movs	r0, #3
 80030ba:	e7e9      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x484>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030bc:	6823      	ldr	r3, [r4, #0]
 80030be:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80030c2:	d001      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80030c4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80030c6:	b122      	cbz	r2, 80030d2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80030c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80030cc:	d01d      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030d0:	b9db      	cbnz	r3, 800310a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030d2:	4a35      	ldr	r2, [pc, #212]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80030d4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030d8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80030dc:	6960      	ldr	r0, [r4, #20]
 80030de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030e2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80030e6:	69a0      	ldr	r0, [r4, #24]
 80030e8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80030ec:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80030f0:	430b      	orrs	r3, r1
 80030f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80030f6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80030fa:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80030fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003100:	3901      	subs	r1, #1
 8003102:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003106:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003110:	d003      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x50e>
 8003112:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003114:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003118:	d031      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x572>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	f013 0f08 	tst.w	r3, #8
 8003120:	d019      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x54a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003122:	4a21      	ldr	r2, [pc, #132]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003124:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003128:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800312c:	6960      	ldr	r0, [r4, #20]
 800312e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003132:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003136:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800313a:	430b      	orrs	r3, r1
 800313c:	69e1      	ldr	r1, [r4, #28]
 800313e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003142:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003146:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800314a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800314e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003150:	430b      	orrs	r3, r1
 8003152:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8003156:	4a14      	ldr	r2, [pc, #80]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003158:	6813      	ldr	r3, [r2, #0]
 800315a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800315e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003160:	f7fe fc20 	bl	80019a4 <HAL_GetTick>
 8003164:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003166:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800316e:	d119      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x598>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003170:	f7fe fc18 	bl	80019a4 <HAL_GetTick>
 8003174:	1b00      	subs	r0, r0, r4
 8003176:	2864      	cmp	r0, #100	; 0x64
 8003178:	d9f5      	bls.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x55a>
        return HAL_TIMEOUT;
 800317a:	2003      	movs	r0, #3
 800317c:	e788      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x484>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800317e:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003180:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003184:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003188:	6965      	ldr	r5, [r4, #20]
 800318a:	6a23      	ldr	r3, [r4, #32]
 800318c:	041b      	lsls	r3, r3, #16
 800318e:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8003192:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8003196:	4303      	orrs	r3, r0
 8003198:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800319c:	430b      	orrs	r3, r1
 800319e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80031a2:	e7ba      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  return HAL_OK;
 80031a4:	2000      	movs	r0, #0
 80031a6:	e773      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80031a8:	40023800 	.word	0x40023800
 80031ac:	0ffffcff 	.word	0x0ffffcff

080031b0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80031b0:	b538      	push	{r3, r4, r5, lr}
 80031b2:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80031b4:	6802      	ldr	r2, [r0, #0]
 80031b6:	68d3      	ldr	r3, [r2, #12]
 80031b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031bc:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031be:	f7fe fbf1 	bl	80019a4 <HAL_GetTick>
 80031c2:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f013 0f20 	tst.w	r3, #32
 80031cc:	d107      	bne.n	80031de <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80031ce:	f7fe fbe9 	bl	80019a4 <HAL_GetTick>
 80031d2:	1b40      	subs	r0, r0, r5
 80031d4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80031d8:	d9f4      	bls.n	80031c4 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 80031da:	2003      	movs	r0, #3
 80031dc:	e000      	b.n	80031e0 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 80031de:	2000      	movs	r0, #0
}
 80031e0:	bd38      	pop	{r3, r4, r5, pc}

080031e2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80031e2:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80031e4:	6803      	ldr	r3, [r0, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80031ec:	d001      	beq.n	80031f2 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80031ee:	2000      	movs	r0, #0
}
 80031f0:	bd38      	pop	{r3, r4, r5, pc}
 80031f2:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80031f4:	f04f 32ff 	mov.w	r2, #4294967295
 80031f8:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80031fa:	f7fe fbd3 	bl	80019a4 <HAL_GetTick>
 80031fe:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003208:	d107      	bne.n	800321a <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800320a:	f7fe fbcb 	bl	80019a4 <HAL_GetTick>
 800320e:	1b40      	subs	r0, r0, r5
 8003210:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003214:	d9f4      	bls.n	8003200 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8003216:	2003      	movs	r0, #3
 8003218:	e7ea      	b.n	80031f0 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 800321a:	2000      	movs	r0, #0
 800321c:	e7e8      	b.n	80031f0 <RTC_EnterInitMode+0xe>
	...

08003220 <HAL_RTC_Init>:
{
 8003220:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8003222:	2800      	cmp	r0, #0
 8003224:	d05a      	beq.n	80032dc <HAL_RTC_Init+0xbc>
 8003226:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003228:	7f43      	ldrb	r3, [r0, #29]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d03e      	beq.n	80032ac <HAL_RTC_Init+0x8c>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800322e:	2302      	movs	r3, #2
 8003230:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	22ca      	movs	r2, #202	; 0xca
 8003236:	625a      	str	r2, [r3, #36]	; 0x24
 8003238:	6823      	ldr	r3, [r4, #0]
 800323a:	2253      	movs	r2, #83	; 0x53
 800323c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800323e:	4620      	mov	r0, r4
 8003240:	f7ff ffcf 	bl	80031e2 <RTC_EnterInitMode>
 8003244:	4605      	mov	r5, r0
 8003246:	2800      	cmp	r0, #0
 8003248:	d134      	bne.n	80032b4 <HAL_RTC_Init+0x94>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800324a:	6822      	ldr	r2, [r4, #0]
 800324c:	6891      	ldr	r1, [r2, #8]
 800324e:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <HAL_RTC_Init+0xc0>)
 8003250:	400b      	ands	r3, r1
 8003252:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003254:	6821      	ldr	r1, [r4, #0]
 8003256:	688a      	ldr	r2, [r1, #8]
 8003258:	6863      	ldr	r3, [r4, #4]
 800325a:	6920      	ldr	r0, [r4, #16]
 800325c:	4303      	orrs	r3, r0
 800325e:	6960      	ldr	r0, [r4, #20]
 8003260:	4303      	orrs	r3, r0
 8003262:	4313      	orrs	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003266:	6823      	ldr	r3, [r4, #0]
 8003268:	68e2      	ldr	r2, [r4, #12]
 800326a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800326c:	6822      	ldr	r2, [r4, #0]
 800326e:	6913      	ldr	r3, [r2, #16]
 8003270:	68a1      	ldr	r1, [r4, #8]
 8003272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003276:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003278:	6822      	ldr	r2, [r4, #0]
 800327a:	68d3      	ldr	r3, [r2, #12]
 800327c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003280:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f013 0f20 	tst.w	r3, #32
 800328a:	d01b      	beq.n	80032c4 <HAL_RTC_Init+0xa4>
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800328c:	6822      	ldr	r2, [r4, #0]
 800328e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003290:	f023 0308 	bic.w	r3, r3, #8
 8003294:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8003296:	6822      	ldr	r2, [r4, #0]
 8003298:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800329a:	69a1      	ldr	r1, [r4, #24]
 800329c:	430b      	orrs	r3, r1
 800329e:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032a0:	6823      	ldr	r3, [r4, #0]
 80032a2:	22ff      	movs	r2, #255	; 0xff
 80032a4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80032a6:	2301      	movs	r3, #1
 80032a8:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 80032aa:	e009      	b.n	80032c0 <HAL_RTC_Init+0xa0>
    hrtc->Lock = HAL_UNLOCKED;
 80032ac:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80032ae:	f7fe fab3 	bl	8001818 <HAL_RTC_MspInit>
 80032b2:	e7bc      	b.n	800322e <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	22ff      	movs	r2, #255	; 0xff
 80032b8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80032ba:	2304      	movs	r3, #4
 80032bc:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80032be:	2501      	movs	r5, #1
}
 80032c0:	4628      	mov	r0, r5
 80032c2:	bd38      	pop	{r3, r4, r5, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032c4:	4620      	mov	r0, r4
 80032c6:	f7ff ff73 	bl	80031b0 <HAL_RTC_WaitForSynchro>
 80032ca:	2800      	cmp	r0, #0
 80032cc:	d0de      	beq.n	800328c <HAL_RTC_Init+0x6c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032ce:	6823      	ldr	r3, [r4, #0]
 80032d0:	22ff      	movs	r2, #255	; 0xff
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80032d4:	2304      	movs	r3, #4
 80032d6:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 80032d8:	2501      	movs	r5, #1
 80032da:	e7f1      	b.n	80032c0 <HAL_RTC_Init+0xa0>
     return HAL_ERROR;
 80032dc:	2501      	movs	r5, #1
 80032de:	e7ef      	b.n	80032c0 <HAL_RTC_Init+0xa0>
 80032e0:	ff8fffbf 	.word	0xff8fffbf

080032e4 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 80032e4:	2300      	movs	r3, #0

  while(Value >= 10)
 80032e6:	e002      	b.n	80032ee <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80032e8:	3301      	adds	r3, #1
    Value -= 10;
 80032ea:	380a      	subs	r0, #10
 80032ec:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 80032ee:	2809      	cmp	r0, #9
 80032f0:	d8fa      	bhi.n	80032e8 <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	b2db      	uxtb	r3, r3
}
 80032f6:	4318      	orrs	r0, r3
 80032f8:	4770      	bx	lr
	...

080032fc <HAL_RTC_SetTime>:
{
 80032fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80032fe:	7f03      	ldrb	r3, [r0, #28]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d076      	beq.n	80033f2 <HAL_RTC_SetTime+0xf6>
 8003304:	460d      	mov	r5, r1
 8003306:	4604      	mov	r4, r0
 8003308:	2301      	movs	r3, #1
 800330a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800330c:	2302      	movs	r3, #2
 800330e:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8003310:	2a00      	cmp	r2, #0
 8003312:	d144      	bne.n	800339e <HAL_RTC_SetTime+0xa2>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003314:	6803      	ldr	r3, [r0, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f013 0f40 	tst.w	r3, #64	; 0x40
 800331c:	d101      	bne.n	8003322 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 800331e:	2300      	movs	r3, #0
 8003320:	730b      	strb	r3, [r1, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8003322:	7828      	ldrb	r0, [r5, #0]
 8003324:	f7ff ffde 	bl	80032e4 <RTC_ByteToBcd2>
 8003328:	0406      	lsls	r6, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800332a:	7868      	ldrb	r0, [r5, #1]
 800332c:	f7ff ffda 	bl	80032e4 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8003330:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003334:	78a8      	ldrb	r0, [r5, #2]
 8003336:	f7ff ffd5 	bl	80032e4 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800333a:	4306      	orrs	r6, r0
                        (((uint32_t)sTime->TimeFormat) << 16));
 800333c:	7b28      	ldrb	r0, [r5, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800333e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	22ca      	movs	r2, #202	; 0xca
 8003346:	625a      	str	r2, [r3, #36]	; 0x24
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	2253      	movs	r2, #83	; 0x53
 800334c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800334e:	4620      	mov	r0, r4
 8003350:	f7ff ff47 	bl	80031e2 <RTC_EnterInitMode>
 8003354:	4607      	mov	r7, r0
 8003356:	2800      	cmp	r0, #0
 8003358:	d133      	bne.n	80033c2 <HAL_RTC_SetTime+0xc6>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800335a:	6822      	ldr	r2, [r4, #0]
 800335c:	4b26      	ldr	r3, [pc, #152]	; (80033f8 <HAL_RTC_SetTime+0xfc>)
 800335e:	4033      	ands	r3, r6
 8003360:	6013      	str	r3, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003362:	6822      	ldr	r2, [r4, #0]
 8003364:	6893      	ldr	r3, [r2, #8]
 8003366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800336c:	6821      	ldr	r1, [r4, #0]
 800336e:	688b      	ldr	r3, [r1, #8]
 8003370:	692a      	ldr	r2, [r5, #16]
 8003372:	6968      	ldr	r0, [r5, #20]
 8003374:	4302      	orrs	r2, r0
 8003376:	4313      	orrs	r3, r2
 8003378:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800337a:	6822      	ldr	r2, [r4, #0]
 800337c:	68d3      	ldr	r3, [r2, #12]
 800337e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003382:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f013 0f20 	tst.w	r3, #32
 800338c:	d023      	beq.n	80033d6 <HAL_RTC_SetTime+0xda>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800338e:	6823      	ldr	r3, [r4, #0]
 8003390:	22ff      	movs	r2, #255	; 0xff
 8003392:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8003394:	2301      	movs	r3, #1
 8003396:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 8003398:	2300      	movs	r3, #0
 800339a:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 800339c:	e019      	b.n	80033d2 <HAL_RTC_SetTime+0xd6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800339e:	6803      	ldr	r3, [r0, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80033a6:	d101      	bne.n	80033ac <HAL_RTC_SetTime+0xb0>
      sTime->TimeFormat = 0x00;
 80033a8:	2300      	movs	r3, #0
 80033aa:	730b      	strb	r3, [r1, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80033ac:	7828      	ldrb	r0, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80033ae:	786e      	ldrb	r6, [r5, #1]
 80033b0:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80033b2:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
              ((uint32_t)sTime->Seconds) | \
 80033b6:	78a8      	ldrb	r0, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80033b8:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16));
 80033ba:	7b28      	ldrb	r0, [r5, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80033bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80033c0:	e7bf      	b.n	8003342 <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	22ff      	movs	r2, #255	; 0xff
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80033c8:	2304      	movs	r3, #4
 80033ca:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80033cc:	2300      	movs	r3, #0
 80033ce:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80033d0:	2701      	movs	r7, #1
}
 80033d2:	4638      	mov	r0, r7
 80033d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033d6:	4620      	mov	r0, r4
 80033d8:	f7ff feea 	bl	80031b0 <HAL_RTC_WaitForSynchro>
 80033dc:	2800      	cmp	r0, #0
 80033de:	d0d6      	beq.n	800338e <HAL_RTC_SetTime+0x92>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033e0:	6823      	ldr	r3, [r4, #0]
 80033e2:	22ff      	movs	r2, #255	; 0xff
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80033e6:	2304      	movs	r3, #4
 80033e8:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80033ea:	2300      	movs	r3, #0
 80033ec:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80033ee:	2701      	movs	r7, #1
 80033f0:	e7ef      	b.n	80033d2 <HAL_RTC_SetTime+0xd6>
  __HAL_LOCK(hrtc);
 80033f2:	2702      	movs	r7, #2
 80033f4:	e7ed      	b.n	80033d2 <HAL_RTC_SetTime+0xd6>
 80033f6:	bf00      	nop
 80033f8:	007f7f7f 	.word	0x007f7f7f

080033fc <HAL_RTC_SetDate>:
{
 80033fc:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 80033fe:	7f03      	ldrb	r3, [r0, #28]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d064      	beq.n	80034ce <HAL_RTC_SetDate+0xd2>
 8003404:	2301      	movs	r3, #1
 8003406:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003408:	2302      	movs	r3, #2
 800340a:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800340c:	b93a      	cbnz	r2, 800341e <HAL_RTC_SetDate+0x22>
 800340e:	784b      	ldrb	r3, [r1, #1]
 8003410:	f013 0f10 	tst.w	r3, #16
 8003414:	d003      	beq.n	800341e <HAL_RTC_SetDate+0x22>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003416:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800341a:	330a      	adds	r3, #10
 800341c:	704b      	strb	r3, [r1, #1]
 800341e:	460e      	mov	r6, r1
 8003420:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 8003422:	2a00      	cmp	r2, #0
 8003424:	d130      	bne.n	8003488 <HAL_RTC_SetDate+0x8c>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003426:	78c8      	ldrb	r0, [r1, #3]
 8003428:	f7ff ff5c 	bl	80032e4 <RTC_ByteToBcd2>
 800342c:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800342e:	7870      	ldrb	r0, [r6, #1]
 8003430:	f7ff ff58 	bl	80032e4 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003434:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003438:	78b0      	ldrb	r0, [r6, #2]
 800343a:	f7ff ff53 	bl	80032e4 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800343e:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13));
 8003440:	7830      	ldrb	r0, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003442:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003446:	6823      	ldr	r3, [r4, #0]
 8003448:	22ca      	movs	r2, #202	; 0xca
 800344a:	625a      	str	r2, [r3, #36]	; 0x24
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	2253      	movs	r2, #83	; 0x53
 8003450:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003452:	4620      	mov	r0, r4
 8003454:	f7ff fec5 	bl	80031e2 <RTC_EnterInitMode>
 8003458:	4606      	mov	r6, r0
 800345a:	bb00      	cbnz	r0, 800349e <HAL_RTC_SetDate+0xa2>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800345c:	6822      	ldr	r2, [r4, #0]
 800345e:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <HAL_RTC_SetDate+0xd8>)
 8003460:	402b      	ands	r3, r5
 8003462:	6053      	str	r3, [r2, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003464:	6822      	ldr	r2, [r4, #0]
 8003466:	68d3      	ldr	r3, [r2, #12]
 8003468:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800346c:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f013 0f20 	tst.w	r3, #32
 8003476:	d01c      	beq.n	80034b2 <HAL_RTC_SetDate+0xb6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003478:	6823      	ldr	r3, [r4, #0]
 800347a:	22ff      	movs	r2, #255	; 0xff
 800347c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800347e:	2301      	movs	r3, #1
 8003480:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8003482:	2300      	movs	r3, #0
 8003484:	7723      	strb	r3, [r4, #28]
    return HAL_OK;
 8003486:	e012      	b.n	80034ae <HAL_RTC_SetDate+0xb2>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003488:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 800348a:	784d      	ldrb	r5, [r1, #1]
 800348c:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800348e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
                  ((uint32_t)sDate->Date) | \
 8003492:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8003494:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));
 8003496:	7808      	ldrb	r0, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003498:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
 800349c:	e7d3      	b.n	8003446 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	22ff      	movs	r2, #255	; 0xff
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80034a4:	2304      	movs	r3, #4
 80034a6:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80034a8:	2300      	movs	r3, #0
 80034aa:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80034ac:	2601      	movs	r6, #1
}
 80034ae:	4630      	mov	r0, r6
 80034b0:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80034b2:	4620      	mov	r0, r4
 80034b4:	f7ff fe7c 	bl	80031b0 <HAL_RTC_WaitForSynchro>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d0dd      	beq.n	8003478 <HAL_RTC_SetDate+0x7c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034bc:	6823      	ldr	r3, [r4, #0]
 80034be:	22ff      	movs	r2, #255	; 0xff
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80034c2:	2304      	movs	r3, #4
 80034c4:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80034c6:	2300      	movs	r3, #0
 80034c8:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80034ca:	2601      	movs	r6, #1
 80034cc:	e7ef      	b.n	80034ae <HAL_RTC_SetDate+0xb2>
 __HAL_LOCK(hrtc);
 80034ce:	2602      	movs	r6, #2
 80034d0:	e7ed      	b.n	80034ae <HAL_RTC_SetDate+0xb2>
 80034d2:	bf00      	nop
 80034d4:	00ffff3f 	.word	0x00ffff3f

080034d8 <HAL_RTC_SetAlarm>:
{
 80034d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80034da:	7f03      	ldrb	r3, [r0, #28]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	f000 80a9 	beq.w	8003634 <HAL_RTC_SetAlarm+0x15c>
 80034e2:	460d      	mov	r5, r1
 80034e4:	4604      	mov	r4, r0
 80034e6:	2301      	movs	r3, #1
 80034e8:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80034ea:	2302      	movs	r3, #2
 80034ec:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 80034ee:	2a00      	cmp	r2, #0
 80034f0:	d14d      	bne.n	800358e <HAL_RTC_SetAlarm+0xb6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80034f2:	6803      	ldr	r3, [r0, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80034fa:	d101      	bne.n	8003500 <HAL_RTC_SetAlarm+0x28>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80034fc:	2300      	movs	r3, #0
 80034fe:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8003500:	6a2e      	ldr	r6, [r5, #32]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8003502:	7828      	ldrb	r0, [r5, #0]
 8003504:	f7ff feee 	bl	80032e4 <RTC_ByteToBcd2>
 8003508:	0407      	lsls	r7, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800350a:	7868      	ldrb	r0, [r5, #1]
 800350c:	f7ff feea 	bl	80032e4 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8003510:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003514:	78a8      	ldrb	r0, [r5, #2]
 8003516:	f7ff fee5 	bl	80032e4 <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800351a:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800351c:	7b28      	ldrb	r0, [r5, #12]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800351e:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8003522:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 8003526:	f7ff fedd 	bl	80032e4 <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800352a:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800352e:	4306      	orrs	r6, r0
              ((uint32_t)sAlarm->AlarmMask));
 8003530:	69ab      	ldr	r3, [r5, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8003532:	431e      	orrs	r6, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003534:	686f      	ldr	r7, [r5, #4]
 8003536:	69eb      	ldr	r3, [r5, #28]
 8003538:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	22ca      	movs	r2, #202	; 0xca
 800353e:	625a      	str	r2, [r3, #36]	; 0x24
 8003540:	6823      	ldr	r3, [r4, #0]
 8003542:	2253      	movs	r2, #83	; 0x53
 8003544:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003546:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354c:	d039      	beq.n	80035c2 <HAL_RTC_SetAlarm+0xea>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800354e:	6822      	ldr	r2, [r4, #0]
 8003550:	6893      	ldr	r3, [r2, #8]
 8003552:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003556:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003558:	6822      	ldr	r2, [r4, #0]
 800355a:	6893      	ldr	r3, [r2, #8]
 800355c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003560:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003562:	f7fe fa1f 	bl	80019a4 <HAL_GetTick>
 8003566:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8003568:	6823      	ldr	r3, [r4, #0]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	f012 0f02 	tst.w	r2, #2
 8003570:	d150      	bne.n	8003614 <HAL_RTC_SetAlarm+0x13c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003572:	f7fe fa17 	bl	80019a4 <HAL_GetTick>
 8003576:	1b40      	subs	r0, r0, r5
 8003578:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800357c:	d9f4      	bls.n	8003568 <HAL_RTC_SetAlarm+0x90>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	22ff      	movs	r2, #255	; 0xff
 8003582:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003584:	2003      	movs	r0, #3
 8003586:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8003588:	2300      	movs	r3, #0
 800358a:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 800358c:	e051      	b.n	8003632 <HAL_RTC_SetAlarm+0x15a>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800358e:	6803      	ldr	r3, [r0, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003596:	d101      	bne.n	800359c <HAL_RTC_SetAlarm+0xc4>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8003598:	2300      	movs	r3, #0
 800359a:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 800359c:	6a2a      	ldr	r2, [r5, #32]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800359e:	7829      	ldrb	r1, [r5, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80035a0:	786b      	ldrb	r3, [r5, #1]
 80035a2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80035a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80035a8:	78a9      	ldrb	r1, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80035aa:	430b      	orrs	r3, r1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80035ac:	7b29      	ldrb	r1, [r5, #12]
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80035ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80035b2:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80035b6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80035ba:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmMask));
 80035bc:	69ae      	ldr	r6, [r5, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80035be:	431e      	orrs	r6, r3
 80035c0:	e7b8      	b.n	8003534 <HAL_RTC_SetAlarm+0x5c>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80035c2:	6822      	ldr	r2, [r4, #0]
 80035c4:	6893      	ldr	r3, [r2, #8]
 80035c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035ca:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80035cc:	6822      	ldr	r2, [r4, #0]
 80035ce:	6893      	ldr	r3, [r2, #8]
 80035d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035d4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80035d6:	f7fe f9e5 	bl	80019a4 <HAL_GetTick>
 80035da:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	f012 0f01 	tst.w	r2, #1
 80035e4:	d10d      	bne.n	8003602 <HAL_RTC_SetAlarm+0x12a>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80035e6:	f7fe f9dd 	bl	80019a4 <HAL_GetTick>
 80035ea:	1b40      	subs	r0, r0, r5
 80035ec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80035f0:	d9f4      	bls.n	80035dc <HAL_RTC_SetAlarm+0x104>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	22ff      	movs	r2, #255	; 0xff
 80035f6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035f8:	2003      	movs	r0, #3
 80035fa:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80035fc:	2300      	movs	r3, #0
 80035fe:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8003600:	e017      	b.n	8003632 <HAL_RTC_SetAlarm+0x15a>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003602:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003608:	6822      	ldr	r2, [r4, #0]
 800360a:	6893      	ldr	r3, [r2, #8]
 800360c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003610:	6093      	str	r3, [r2, #8]
 8003612:	e007      	b.n	8003624 <HAL_RTC_SetAlarm+0x14c>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003614:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800361a:	6822      	ldr	r2, [r4, #0]
 800361c:	6893      	ldr	r3, [r2, #8]
 800361e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003622:	6093      	str	r3, [r2, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	22ff      	movs	r2, #255	; 0xff
 8003628:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800362a:	2301      	movs	r3, #1
 800362c:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 800362e:	2000      	movs	r0, #0
 8003630:	7720      	strb	r0, [r4, #28]
}
 8003632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8003634:	2002      	movs	r0, #2
 8003636:	e7fc      	b.n	8003632 <HAL_RTC_SetAlarm+0x15a>

08003638 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8003638:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800363a:	7f04      	ldrb	r4, [r0, #28]
 800363c:	2c01      	cmp	r4, #1
 800363e:	d027      	beq.n	8003690 <HAL_RTCEx_SetTimeStamp+0x58>
 8003640:	2401      	movs	r4, #1
 8003642:	7704      	strb	r4, [r0, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003644:	2302      	movs	r3, #2
 8003646:	7743      	strb	r3, [r0, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8003648:	6805      	ldr	r5, [r0, #0]
 800364a:	68ae      	ldr	r6, [r5, #8]
 800364c:	f6a3 030b 	subw	r3, r3, #2059	; 0x80b
 8003650:	4033      	ands	r3, r6

  tmpreg|= TimeStampEdge;
 8003652:	4319      	orrs	r1, r3

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003654:	23ca      	movs	r3, #202	; 0xca
 8003656:	626b      	str	r3, [r5, #36]	; 0x24
 8003658:	6803      	ldr	r3, [r0, #0]
 800365a:	2553      	movs	r5, #83	; 0x53
 800365c:	625d      	str	r5, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800365e:	6805      	ldr	r5, [r0, #0]
 8003660:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003662:	f023 0306 	bic.w	r3, r3, #6
 8003666:	64eb      	str	r3, [r5, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8003668:	6805      	ldr	r5, [r0, #0]
 800366a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800366c:	431a      	orrs	r2, r3
 800366e:	64ea      	str	r2, [r5, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8003670:	6803      	ldr	r3, [r0, #0]
 8003672:	6099      	str	r1, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8003674:	6802      	ldr	r2, [r0, #0]
 8003676:	6893      	ldr	r3, [r2, #8]
 8003678:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800367c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800367e:	6803      	ldr	r3, [r0, #0]
 8003680:	22ff      	movs	r2, #255	; 0xff
 8003682:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003684:	7744      	strb	r4, [r0, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003686:	2300      	movs	r3, #0
 8003688:	7703      	strb	r3, [r0, #28]

  return HAL_OK;
 800368a:	4618      	mov	r0, r3
}
 800368c:	bc70      	pop	{r4, r5, r6}
 800368e:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8003690:	2002      	movs	r0, #2
 8003692:	e7fb      	b.n	800368c <HAL_RTCEx_SetTimeStamp+0x54>

08003694 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003694:	b1d8      	cbz	r0, 80036ce <HAL_SDRAM_Init+0x3a>
{   
 8003696:	b538      	push	{r3, r4, r5, lr}
 8003698:	4604      	mov	r4, r0
 800369a:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800369c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80036a0:	b183      	cbz	r3, 80036c4 <HAL_SDRAM_Init+0x30>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80036a2:	2302      	movs	r3, #2
 80036a4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80036a8:	1d21      	adds	r1, r4, #4
 80036aa:	6820      	ldr	r0, [r4, #0]
 80036ac:	f000 f9e4 	bl	8003a78 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80036b0:	6862      	ldr	r2, [r4, #4]
 80036b2:	4629      	mov	r1, r5
 80036b4:	6820      	ldr	r0, [r4, #0]
 80036b6:	f000 fa19 	bl	8003aec <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80036ba:	2301      	movs	r3, #1
 80036bc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 80036c0:	2000      	movs	r0, #0
}
 80036c2:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 80036c4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80036c8:	f7fe f8b6 	bl	8001838 <HAL_SDRAM_MspInit>
 80036cc:	e7e9      	b.n	80036a2 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 80036ce:	2001      	movs	r0, #1
}
 80036d0:	4770      	bx	lr

080036d2 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036d2:	4770      	bx	lr

080036d4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036d4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d001      	beq.n	80036e2 <HAL_TIM_Base_Start_IT+0xe>
  {
    return HAL_ERROR;
 80036de:	2001      	movs	r0, #1
 80036e0:	4770      	bx	lr
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e2:	2302      	movs	r3, #2
 80036e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036e8:	6802      	ldr	r2, [r0, #0]
 80036ea:	68d3      	ldr	r3, [r2, #12]
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f2:	6803      	ldr	r3, [r0, #0]
 80036f4:	4a19      	ldr	r2, [pc, #100]	; (800375c <HAL_TIM_Base_Start_IT+0x88>)
 80036f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fa:	bf18      	it	ne
 80036fc:	4293      	cmpne	r3, r2
 80036fe:	d01d      	beq.n	800373c <HAL_TIM_Base_Start_IT+0x68>
 8003700:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003704:	4293      	cmp	r3, r2
 8003706:	d019      	beq.n	800373c <HAL_TIM_Base_Start_IT+0x68>
 8003708:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800370c:	4293      	cmp	r3, r2
 800370e:	d015      	beq.n	800373c <HAL_TIM_Base_Start_IT+0x68>
 8003710:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003714:	4293      	cmp	r3, r2
 8003716:	d011      	beq.n	800373c <HAL_TIM_Base_Start_IT+0x68>
 8003718:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800371c:	4293      	cmp	r3, r2
 800371e:	d00d      	beq.n	800373c <HAL_TIM_Base_Start_IT+0x68>
 8003720:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003724:	4293      	cmp	r3, r2
 8003726:	d009      	beq.n	800373c <HAL_TIM_Base_Start_IT+0x68>
 8003728:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800372c:	4293      	cmp	r3, r2
 800372e:	d005      	beq.n	800373c <HAL_TIM_Base_Start_IT+0x68>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003738:	2000      	movs	r0, #0
 800373a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800373c:	6899      	ldr	r1, [r3, #8]
 800373e:	4a08      	ldr	r2, [pc, #32]	; (8003760 <HAL_TIM_Base_Start_IT+0x8c>)
 8003740:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003742:	2a06      	cmp	r2, #6
 8003744:	bf18      	it	ne
 8003746:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800374a:	d005      	beq.n	8003758 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003754:	2000      	movs	r0, #0
 8003756:	4770      	bx	lr
 8003758:	2000      	movs	r0, #0
}
 800375a:	4770      	bx	lr
 800375c:	40010000 	.word	0x40010000
 8003760:	00010007 	.word	0x00010007

08003764 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003764:	4770      	bx	lr

08003766 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003766:	4770      	bx	lr

08003768 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003768:	4770      	bx	lr

0800376a <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800376a:	4770      	bx	lr

0800376c <HAL_TIM_IRQHandler>:
{
 800376c:	b510      	push	{r4, lr}
 800376e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003770:	6803      	ldr	r3, [r0, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	f012 0f02 	tst.w	r2, #2
 8003778:	d011      	beq.n	800379e <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	f012 0f02 	tst.w	r2, #2
 8003780:	d00d      	beq.n	800379e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003782:	f06f 0202 	mvn.w	r2, #2
 8003786:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003788:	2301      	movs	r3, #1
 800378a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800378c:	6803      	ldr	r3, [r0, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f013 0f03 	tst.w	r3, #3
 8003794:	d079      	beq.n	800388a <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003796:	f7ff ffe6 	bl	8003766 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379a:	2300      	movs	r3, #0
 800379c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	f012 0f04 	tst.w	r2, #4
 80037a6:	d012      	beq.n	80037ce <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	f012 0f04 	tst.w	r2, #4
 80037ae:	d00e      	beq.n	80037ce <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037b0:	f06f 0204 	mvn.w	r2, #4
 80037b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037b6:	2302      	movs	r3, #2
 80037b8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	f413 7f40 	tst.w	r3, #768	; 0x300
 80037c2:	d068      	beq.n	8003896 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80037c4:	4620      	mov	r0, r4
 80037c6:	f7ff ffce 	bl	8003766 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ca:	2300      	movs	r3, #0
 80037cc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	f012 0f08 	tst.w	r2, #8
 80037d6:	d012      	beq.n	80037fe <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	f012 0f08 	tst.w	r2, #8
 80037de:	d00e      	beq.n	80037fe <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037e0:	f06f 0208 	mvn.w	r2, #8
 80037e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037e6:	2304      	movs	r3, #4
 80037e8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f013 0f03 	tst.w	r3, #3
 80037f2:	d057      	beq.n	80038a4 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80037f4:	4620      	mov	r0, r4
 80037f6:	f7ff ffb6 	bl	8003766 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fa:	2300      	movs	r3, #0
 80037fc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	f012 0f10 	tst.w	r2, #16
 8003806:	d012      	beq.n	800382e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	f012 0f10 	tst.w	r2, #16
 800380e:	d00e      	beq.n	800382e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003810:	f06f 0210 	mvn.w	r2, #16
 8003814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003816:	2308      	movs	r3, #8
 8003818:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003822:	d046      	beq.n	80038b2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003824:	4620      	mov	r0, r4
 8003826:	f7ff ff9e 	bl	8003766 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382a:	2300      	movs	r3, #0
 800382c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800382e:	6823      	ldr	r3, [r4, #0]
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	f012 0f01 	tst.w	r2, #1
 8003836:	d003      	beq.n	8003840 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	f012 0f01 	tst.w	r2, #1
 800383e:	d13f      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003848:	d003      	beq.n	8003852 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003850:	d13d      	bne.n	80038ce <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	691a      	ldr	r2, [r3, #16]
 8003856:	f412 7f80 	tst.w	r2, #256	; 0x100
 800385a:	d003      	beq.n	8003864 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003862:	d13b      	bne.n	80038dc <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	f012 0f40 	tst.w	r2, #64	; 0x40
 800386c:	d003      	beq.n	8003876 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003874:	d139      	bne.n	80038ea <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	f012 0f20 	tst.w	r2, #32
 800387e:	d003      	beq.n	8003888 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	f012 0f20 	tst.w	r2, #32
 8003886:	d137      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x18c>
}
 8003888:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800388a:	f7ff ff6b 	bl	8003764 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800388e:	4620      	mov	r0, r4
 8003890:	f7ff ff6a 	bl	8003768 <HAL_TIM_PWM_PulseFinishedCallback>
 8003894:	e781      	b.n	800379a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003896:	4620      	mov	r0, r4
 8003898:	f7ff ff64 	bl	8003764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389c:	4620      	mov	r0, r4
 800389e:	f7ff ff63 	bl	8003768 <HAL_TIM_PWM_PulseFinishedCallback>
 80038a2:	e792      	b.n	80037ca <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a4:	4620      	mov	r0, r4
 80038a6:	f7ff ff5d 	bl	8003764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038aa:	4620      	mov	r0, r4
 80038ac:	f7ff ff5c 	bl	8003768 <HAL_TIM_PWM_PulseFinishedCallback>
 80038b0:	e7a3      	b.n	80037fa <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b2:	4620      	mov	r0, r4
 80038b4:	f7ff ff56 	bl	8003764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b8:	4620      	mov	r0, r4
 80038ba:	f7ff ff55 	bl	8003768 <HAL_TIM_PWM_PulseFinishedCallback>
 80038be:	e7b4      	b.n	800382a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038c0:	f06f 0201 	mvn.w	r2, #1
 80038c4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80038c6:	4620      	mov	r0, r4
 80038c8:	f7fd fc48 	bl	800115c <HAL_TIM_PeriodElapsedCallback>
 80038cc:	e7b8      	b.n	8003840 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038d2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80038d4:	4620      	mov	r0, r4
 80038d6:	f000 f8cd 	bl	8003a74 <HAL_TIMEx_BreakCallback>
 80038da:	e7ba      	b.n	8003852 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038dc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038e0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80038e2:	4620      	mov	r0, r4
 80038e4:	f000 f8c7 	bl	8003a76 <HAL_TIMEx_Break2Callback>
 80038e8:	e7bc      	b.n	8003864 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038ee:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80038f0:	4620      	mov	r0, r4
 80038f2:	f7ff ff3a 	bl	800376a <HAL_TIM_TriggerCallback>
 80038f6:	e7be      	b.n	8003876 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038f8:	f06f 0220 	mvn.w	r2, #32
 80038fc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80038fe:	4620      	mov	r0, r4
 8003900:	f000 f8b7 	bl	8003a72 <HAL_TIMEx_CommutCallback>
}
 8003904:	e7c0      	b.n	8003888 <HAL_TIM_IRQHandler+0x11c>
	...

08003908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003908:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800390a:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800390c:	4c3a      	ldr	r4, [pc, #232]	; (80039f8 <TIM_Base_SetConfig+0xf0>)
 800390e:	42a0      	cmp	r0, r4
 8003910:	bf14      	ite	ne
 8003912:	2400      	movne	r4, #0
 8003914:	2401      	moveq	r4, #1
 8003916:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800391a:	bf14      	ite	ne
 800391c:	4622      	movne	r2, r4
 800391e:	f044 0201 	orreq.w	r2, r4, #1
 8003922:	b9aa      	cbnz	r2, 8003950 <TIM_Base_SetConfig+0x48>
 8003924:	4d35      	ldr	r5, [pc, #212]	; (80039fc <TIM_Base_SetConfig+0xf4>)
 8003926:	42a8      	cmp	r0, r5
 8003928:	bf14      	ite	ne
 800392a:	2500      	movne	r5, #0
 800392c:	2501      	moveq	r5, #1
 800392e:	4e34      	ldr	r6, [pc, #208]	; (8003a00 <TIM_Base_SetConfig+0xf8>)
 8003930:	42b0      	cmp	r0, r6
 8003932:	d00d      	beq.n	8003950 <TIM_Base_SetConfig+0x48>
 8003934:	b965      	cbnz	r5, 8003950 <TIM_Base_SetConfig+0x48>
 8003936:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800393a:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 800393e:	42a8      	cmp	r0, r5
 8003940:	bf14      	ite	ne
 8003942:	2500      	movne	r5, #0
 8003944:	2501      	moveq	r5, #1
 8003946:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800394a:	42b0      	cmp	r0, r6
 800394c:	d000      	beq.n	8003950 <TIM_Base_SetConfig+0x48>
 800394e:	b11d      	cbz	r5, 8003958 <TIM_Base_SetConfig+0x50>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003954:	684d      	ldr	r5, [r1, #4]
 8003956:	432b      	orrs	r3, r5
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003958:	2a00      	cmp	r2, #0
 800395a:	d133      	bne.n	80039c4 <TIM_Base_SetConfig+0xbc>
 800395c:	4a27      	ldr	r2, [pc, #156]	; (80039fc <TIM_Base_SetConfig+0xf4>)
 800395e:	4290      	cmp	r0, r2
 8003960:	bf14      	ite	ne
 8003962:	2200      	movne	r2, #0
 8003964:	2201      	moveq	r2, #1
 8003966:	4d26      	ldr	r5, [pc, #152]	; (8003a00 <TIM_Base_SetConfig+0xf8>)
 8003968:	42a8      	cmp	r0, r5
 800396a:	d02b      	beq.n	80039c4 <TIM_Base_SetConfig+0xbc>
 800396c:	bb52      	cbnz	r2, 80039c4 <TIM_Base_SetConfig+0xbc>
 800396e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003972:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8003976:	4290      	cmp	r0, r2
 8003978:	bf14      	ite	ne
 800397a:	2200      	movne	r2, #0
 800397c:	2201      	moveq	r2, #1
 800397e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003982:	42a8      	cmp	r0, r5
 8003984:	d01e      	beq.n	80039c4 <TIM_Base_SetConfig+0xbc>
 8003986:	b9ea      	cbnz	r2, 80039c4 <TIM_Base_SetConfig+0xbc>
 8003988:	4a1e      	ldr	r2, [pc, #120]	; (8003a04 <TIM_Base_SetConfig+0xfc>)
 800398a:	4290      	cmp	r0, r2
 800398c:	bf14      	ite	ne
 800398e:	2200      	movne	r2, #0
 8003990:	2201      	moveq	r2, #1
 8003992:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8003996:	42a8      	cmp	r0, r5
 8003998:	d014      	beq.n	80039c4 <TIM_Base_SetConfig+0xbc>
 800399a:	b99a      	cbnz	r2, 80039c4 <TIM_Base_SetConfig+0xbc>
 800399c:	4a1a      	ldr	r2, [pc, #104]	; (8003a08 <TIM_Base_SetConfig+0x100>)
 800399e:	4290      	cmp	r0, r2
 80039a0:	bf14      	ite	ne
 80039a2:	2200      	movne	r2, #0
 80039a4:	2201      	moveq	r2, #1
 80039a6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80039aa:	42a8      	cmp	r0, r5
 80039ac:	d00a      	beq.n	80039c4 <TIM_Base_SetConfig+0xbc>
 80039ae:	b94a      	cbnz	r2, 80039c4 <TIM_Base_SetConfig+0xbc>
 80039b0:	4a16      	ldr	r2, [pc, #88]	; (8003a0c <TIM_Base_SetConfig+0x104>)
 80039b2:	4290      	cmp	r0, r2
 80039b4:	bf14      	ite	ne
 80039b6:	2200      	movne	r2, #0
 80039b8:	2201      	moveq	r2, #1
 80039ba:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 80039be:	42a8      	cmp	r0, r5
 80039c0:	d000      	beq.n	80039c4 <TIM_Base_SetConfig+0xbc>
 80039c2:	b11a      	cbz	r2, 80039cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039c8:	68ca      	ldr	r2, [r1, #12]
 80039ca:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039d0:	694a      	ldr	r2, [r1, #20]
 80039d2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80039d4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039d6:	688a      	ldr	r2, [r1, #8]
 80039d8:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039da:	680a      	ldr	r2, [r1, #0]
 80039dc:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039de:	4b0c      	ldr	r3, [pc, #48]	; (8003a10 <TIM_Base_SetConfig+0x108>)
 80039e0:	4298      	cmp	r0, r3
 80039e2:	bf14      	ite	ne
 80039e4:	4623      	movne	r3, r4
 80039e6:	f044 0301 	orreq.w	r3, r4, #1
 80039ea:	b10b      	cbz	r3, 80039f0 <TIM_Base_SetConfig+0xe8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039ec:	690b      	ldr	r3, [r1, #16]
 80039ee:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039f0:	2301      	movs	r3, #1
 80039f2:	6143      	str	r3, [r0, #20]
}
 80039f4:	bc70      	pop	{r4, r5, r6}
 80039f6:	4770      	bx	lr
 80039f8:	40010000 	.word	0x40010000
 80039fc:	40000800 	.word	0x40000800
 8003a00:	40000400 	.word	0x40000400
 8003a04:	40014400 	.word	0x40014400
 8003a08:	40001800 	.word	0x40001800
 8003a0c:	40002000 	.word	0x40002000
 8003a10:	40010400 	.word	0x40010400

08003a14 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003a14:	b358      	cbz	r0, 8003a6e <HAL_TIM_Base_Init+0x5a>
{
 8003a16:	b510      	push	{r4, lr}
 8003a18:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003a1a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a1e:	b30b      	cbz	r3, 8003a64 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	2302      	movs	r3, #2
 8003a22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a26:	1d21      	adds	r1, r4, #4
 8003a28:	6820      	ldr	r0, [r4, #0]
 8003a2a:	f7ff ff6d 	bl	8003908 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a34:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003a38:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003a3c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003a40:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003a44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a4c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003a50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a54:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003a58:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003a5c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003a60:	2000      	movs	r0, #0
}
 8003a62:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003a64:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003a68:	f7ff fe33 	bl	80036d2 <HAL_TIM_Base_MspInit>
 8003a6c:	e7d8      	b.n	8003a20 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003a6e:	2001      	movs	r0, #1
}
 8003a70:	4770      	bx	lr

08003a72 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a72:	4770      	bx	lr

08003a74 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a74:	4770      	bx	lr

08003a76 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a76:	4770      	bx	lr

08003a78 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003a78:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8003a7a:	680b      	ldr	r3, [r1, #0]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d018      	beq.n	8003ab2 <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003a80:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003a82:	4a19      	ldr	r2, [pc, #100]	; (8003ae8 <FMC_SDRAM_Init+0x70>)
 8003a84:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003a86:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 8003a88:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003a8a:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 8003a8c:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 8003a8e:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 8003a90:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 8003a92:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 8003a94:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 8003a96:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 8003a98:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 8003a9a:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 8003a9c:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 8003a9e:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 8003aa0:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 8003aa2:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 8003aa4:	6a49      	ldr	r1, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8003aa6:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003aa8:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003aaa:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8003aac:	2000      	movs	r0, #0
 8003aae:	bc30      	pop	{r4, r5}
 8003ab0:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003ab2:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8003ab4:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003ab8:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 8003aba:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003abc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8003abe:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8003ac0:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003ac2:	4322      	orrs	r2, r4
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8003ac4:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003ac6:	4c08      	ldr	r4, [pc, #32]	; (8003ae8 <FMC_SDRAM_Init+0x70>)
 8003ac8:	401c      	ands	r4, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003aca:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber       |\
 8003acc:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003ace:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 8003ad0:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber       |\
 8003ad2:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 8003ad4:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth     |\
 8003ad6:	432b      	orrs	r3, r5
                       Init->CASLatency          |\
 8003ad8:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber  |\
 8003ada:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 8003adc:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 8003ade:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003ae0:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003ae2:	6002      	str	r2, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8003ae4:	6043      	str	r3, [r0, #4]
 8003ae6:	e7e1      	b.n	8003aac <FMC_SDRAM_Init+0x34>
 8003ae8:	ffff8000 	.word	0xffff8000

08003aec <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003aec:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8003aee:	2a01      	cmp	r2, #1
 8003af0:	d021      	beq.n	8003b36 <FMC_SDRAM_Timing_Init+0x4a>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003af2:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003af4:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003af8:	680b      	ldr	r3, [r1, #0]
 8003afa:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8003afc:	684c      	ldr	r4, [r1, #4]
 8003afe:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003b00:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8003b04:	688c      	ldr	r4, [r1, #8]
 8003b06:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8003b08:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8003b0c:	68cc      	ldr	r4, [r1, #12]
 8003b0e:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8003b10:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8003b14:	690c      	ldr	r4, [r1, #16]
 8003b16:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8003b18:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 8003b1c:	694c      	ldr	r4, [r1, #20]
 8003b1e:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8003b20:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 8003b24:	6989      	ldr	r1, [r1, #24]
 8003b26:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003b28:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003b2c:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003b2e:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8003b30:	2000      	movs	r0, #0
 8003b32:	bc30      	pop	{r4, r5}
 8003b34:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003b36:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8003b38:	4c11      	ldr	r4, [pc, #68]	; (8003b80 <FMC_SDRAM_Timing_Init+0x94>)
 8003b3a:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8003b3c:	68ca      	ldr	r2, [r1, #12]
 8003b3e:	1e55      	subs	r5, r2, #1
                        (((Timing->RPDelay)-1) << 20)); 
 8003b40:	694b      	ldr	r3, [r1, #20]
 8003b42:	1e5a      	subs	r2, r3, #1
 8003b44:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8003b46:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 8003b4a:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8003b4c:	68c4      	ldr	r4, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003b4e:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003b52:	680b      	ldr	r3, [r1, #0]
 8003b54:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8003b56:	684d      	ldr	r5, [r1, #4]
 8003b58:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003b5a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8003b5e:	688d      	ldr	r5, [r1, #8]
 8003b60:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8003b62:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8003b66:	690d      	ldr	r5, [r1, #16]
 8003b68:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8003b6a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 8003b6e:	6989      	ldr	r1, [r1, #24]
 8003b70:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003b72:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003b76:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003b78:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8003b7a:	60c3      	str	r3, [r0, #12]
 8003b7c:	e7d8      	b.n	8003b30 <FMC_SDRAM_Timing_Init+0x44>
 8003b7e:	bf00      	nop
 8003b80:	ff0f0fff 	.word	0xff0f0fff

08003b84 <__libc_init_array>:
 8003b84:	b570      	push	{r4, r5, r6, lr}
 8003b86:	4e0d      	ldr	r6, [pc, #52]	; (8003bbc <__libc_init_array+0x38>)
 8003b88:	4c0d      	ldr	r4, [pc, #52]	; (8003bc0 <__libc_init_array+0x3c>)
 8003b8a:	1ba4      	subs	r4, r4, r6
 8003b8c:	10a4      	asrs	r4, r4, #2
 8003b8e:	2500      	movs	r5, #0
 8003b90:	42a5      	cmp	r5, r4
 8003b92:	d109      	bne.n	8003ba8 <__libc_init_array+0x24>
 8003b94:	4e0b      	ldr	r6, [pc, #44]	; (8003bc4 <__libc_init_array+0x40>)
 8003b96:	4c0c      	ldr	r4, [pc, #48]	; (8003bc8 <__libc_init_array+0x44>)
 8003b98:	f000 f820 	bl	8003bdc <_init>
 8003b9c:	1ba4      	subs	r4, r4, r6
 8003b9e:	10a4      	asrs	r4, r4, #2
 8003ba0:	2500      	movs	r5, #0
 8003ba2:	42a5      	cmp	r5, r4
 8003ba4:	d105      	bne.n	8003bb2 <__libc_init_array+0x2e>
 8003ba6:	bd70      	pop	{r4, r5, r6, pc}
 8003ba8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bac:	4798      	blx	r3
 8003bae:	3501      	adds	r5, #1
 8003bb0:	e7ee      	b.n	8003b90 <__libc_init_array+0xc>
 8003bb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bb6:	4798      	blx	r3
 8003bb8:	3501      	adds	r5, #1
 8003bba:	e7f2      	b.n	8003ba2 <__libc_init_array+0x1e>
 8003bbc:	08003c14 	.word	0x08003c14
 8003bc0:	08003c14 	.word	0x08003c14
 8003bc4:	08003c14 	.word	0x08003c14
 8003bc8:	08003c18 	.word	0x08003c18

08003bcc <memset>:
 8003bcc:	4402      	add	r2, r0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d100      	bne.n	8003bd6 <memset+0xa>
 8003bd4:	4770      	bx	lr
 8003bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bda:	e7f9      	b.n	8003bd0 <memset+0x4>

08003bdc <_init>:
 8003bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bde:	bf00      	nop
 8003be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003be2:	bc08      	pop	{r3}
 8003be4:	469e      	mov	lr, r3
 8003be6:	4770      	bx	lr

08003be8 <_fini>:
 8003be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bea:	bf00      	nop
 8003bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bee:	bc08      	pop	{r3}
 8003bf0:	469e      	mov	lr, r3
 8003bf2:	4770      	bx	lr
