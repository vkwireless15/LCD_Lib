
SimpleGraphics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041bc  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004384  08004384  00014384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004410  08004410  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004410  08004410  00014410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004418  08004418  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004418  08004418  00014418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800441c  0800441c  0001441c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003fe1c  2000000c  0800442c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2003fe28  0800442c  0002fe28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024c0a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a60  00000000  00000000  00044c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00018f17  00000000  00000000  000486a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001720  00000000  00000000  000615c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016d0  00000000  00000000  00062ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a017  00000000  00000000  000643b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024269  00000000  00000000  0008e3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100923  00000000  00000000  000b2630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b2f53  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004330  00000000  00000000  001b2fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800436c 	.word	0x0800436c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	0800436c 	.word	0x0800436c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <Init_Graphics_System>:
uint32 LCD_FRAME_BUFFER3 = 0;


void Init_Graphics_System(uint32 LCD_RAM_START_ADDRESS, uint8 Layers, uint8 ColorType) //Инициализация драйвера дисплея, графического ускорителя и т.п.
{
    LCD_FRAME_BUFFER0 = LCD_RAM_START_ADDRESS;
 800050c:	4b01      	ldr	r3, [pc, #4]	; (8000514 <Init_Graphics_System+0x8>)
 800050e:	6018      	str	r0, [r3, #0]
    //Пользовательский кодинициализации дисплея

}
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	20000028 	.word	0x20000028

08000518 <Fill_all>:

void Fill_all(uint32 Color) //Заливка всего дисплея цветом
{
	for(int i=0; i<480*272; i++)
 8000518:	2300      	movs	r3, #0
 800051a:	e005      	b.n	8000528 <Fill_all+0x10>
	{
	  *(__IO uint16*) (LCD_FRAME_BUFFER0 + (i*2)) = Color;
 800051c:	4a04      	ldr	r2, [pc, #16]	; (8000530 <Fill_all+0x18>)
 800051e:	6812      	ldr	r2, [r2, #0]
 8000520:	b281      	uxth	r1, r0
 8000522:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<480*272; i++)
 8000526:	3301      	adds	r3, #1
 8000528:	f5b3 3fff 	cmp.w	r3, #130560	; 0x1fe00
 800052c:	dbf6      	blt.n	800051c <Fill_all+0x4>
	}
}
 800052e:	4770      	bx	lr
 8000530:	20000028 	.word	0x20000028

08000534 <Fill_rectangle>:

void Fill_rectangle(uint32 Color, int32 StartX, int32 StopX, int32 StartY, int32 StopY) //Заливка прямоугольной формы
{
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	4604      	mov	r4, r0
 8000538:	4610      	mov	r0, r2
 800053a:	9e04      	ldr	r6, [sp, #16]
	StartX--;
 800053c:	1e4d      	subs	r5, r1, #1
	StartY--;
 800053e:	f103 3eff 	add.w	lr, r3, #4294967295

	for(uint32 y = StartY; y < StopY; y++)
 8000542:	e00e      	b.n	8000562 <Fill_rectangle+0x2e>
	{
		for(uint32 x = StartX; x < StopX; x++)
		{
			*(__IO uint16*) (LCD_FRAME_BUFFER0 + (2*(y*DispWidth + x))) = Color;
 8000544:	4909      	ldr	r1, [pc, #36]	; (800056c <Fill_rectangle+0x38>)
 8000546:	6809      	ldr	r1, [r1, #0]
 8000548:	fb01 310e 	mla	r1, r1, lr, r3
 800054c:	4a08      	ldr	r2, [pc, #32]	; (8000570 <Fill_rectangle+0x3c>)
 800054e:	6812      	ldr	r2, [r2, #0]
 8000550:	fa1f fc84 	uxth.w	ip, r4
 8000554:	f822 c011 	strh.w	ip, [r2, r1, lsl #1]
		for(uint32 x = StartX; x < StopX; x++)
 8000558:	3301      	adds	r3, #1
 800055a:	4298      	cmp	r0, r3
 800055c:	d8f2      	bhi.n	8000544 <Fill_rectangle+0x10>
	for(uint32 y = StartY; y < StopY; y++)
 800055e:	f10e 0e01 	add.w	lr, lr, #1
 8000562:	4576      	cmp	r6, lr
 8000564:	d901      	bls.n	800056a <Fill_rectangle+0x36>
		for(uint32 x = StartX; x < StopX; x++)
 8000566:	462b      	mov	r3, r5
 8000568:	e7f7      	b.n	800055a <Fill_rectangle+0x26>
		}
	}
}
 800056a:	bd70      	pop	{r4, r5, r6, pc}
 800056c:	20000034 	.word	0x20000034
 8000570:	20000028 	.word	0x20000028

08000574 <Get565Color>:
{
	uint8 FontH = calibri[1];
	return FontH;
}
uint16 Get565Color(uint32 Color) //Возвращает значение цвета в формате пикселя 565(5 бит - красный цвет, 6 - зеленый, 5 - синий)
{
 8000574:	b500      	push	{lr}
   uint8 R, G, B;
   R = (Color >> 16) & 0xff;
   G = (Color >> 8) & 0xff;
   B = Color & 0xff;

   R = 31 * R / 255;
 8000576:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800057a:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 800057e:	4912      	ldr	r1, [pc, #72]	; (80005c8 <Get565Color+0x54>)
 8000580:	fb81 c203 	smull	ip, r2, r1, r3
 8000584:	441a      	add	r2, r3
 8000586:	17db      	asrs	r3, r3, #31
 8000588:	ebc3 12e2 	rsb	r2, r3, r2, asr #7
   G = 63 * G / 255;
 800058c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000590:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8000594:	fb81 ec03 	smull	lr, ip, r1, r3
 8000598:	449c      	add	ip, r3
 800059a:	17db      	asrs	r3, r3, #31
 800059c:	ebc3 13ec 	rsb	r3, r3, ip, asr #7
   B = 31 * B / 255;
 80005a0:	b2c0      	uxtb	r0, r0
 80005a2:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 80005a6:	fb81 c100 	smull	ip, r1, r1, r0
 80005aa:	4401      	add	r1, r0
 80005ac:	17c0      	asrs	r0, r0, #31
 80005ae:	ebc0 10e1 	rsb	r0, r0, r1, asr #7
 80005b2:	b2c0      	uxtb	r0, r0

   RezColor |= B;
   RezColor |= (G << 5);
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   RezColor |= (R << 11);
 80005ba:	b2d2      	uxtb	r2, r2
 80005bc:	ea40 20c2 	orr.w	r0, r0, r2, lsl #11

   return RezColor;
}
 80005c0:	b280      	uxth	r0, r0
 80005c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80005c6:	bf00      	nop
 80005c8:	80808081 	.word	0x80808081

080005cc <Graphics_Init>:
		 }
	 }
}

void Graphics_Init(DisplayConfig *dcf) //Инициализация самой бибиллиотеки а также инициализация графических устройств(дисплей, графические ускорители, тач-панели)
{
 80005cc:	b508      	push	{r3, lr}
	DispHeight = dcf->Display_Height;
 80005ce:	6842      	ldr	r2, [r0, #4]
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <Graphics_Init+0x24>)
 80005d2:	601a      	str	r2, [r3, #0]
	DispWidth = dcf->Display_Width;
 80005d4:	6882      	ldr	r2, [r0, #8]
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <Graphics_Init+0x28>)
 80005d8:	601a      	str	r2, [r3, #0]
	ColorType = dcf->Color_Type;
 80005da:	7b02      	ldrb	r2, [r0, #12]
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <Graphics_Init+0x2c>)
 80005de:	701a      	strb	r2, [r3, #0]
	Init_Graphics_System(dcf->Start_RAM_Address, dcf->Layers, dcf->Color_Type);
 80005e0:	7b41      	ldrb	r1, [r0, #13]
 80005e2:	6800      	ldr	r0, [r0, #0]
 80005e4:	f7ff ff92 	bl	800050c <Init_Graphics_System>
	Touch_Init();
 80005e8:	f000 f94a 	bl	8000880 <Touch_Init>
}
 80005ec:	bd08      	pop	{r3, pc}
 80005ee:	bf00      	nop
 80005f0:	20000030 	.word	0x20000030
 80005f4:	20000034 	.word	0x20000034
 80005f8:	2000002c 	.word	0x2000002c

080005fc <Fill_Rectangle>:

	if(ColorType == Color_A888)
	{ Fill_all(Color); }
}
void Fill_Rectangle(uint32 Color, int32 StartX, int32 StopX, int32 StartY, int32 StopY) //заливает цветом прямоугольную область
{
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fe:	b083      	sub	sp, #12
 8000600:	4607      	mov	r7, r0
 8000602:	4615      	mov	r5, r2
 8000604:	461e      	mov	r6, r3
	if(((StartX > 0) && (StartX <= DispWidth)) || ((StopX > 0) && (StopX <= DispWidth)))
 8000606:	1e0c      	subs	r4, r1, #0
 8000608:	dd03      	ble.n	8000612 <Fill_Rectangle+0x16>
 800060a:	4b28      	ldr	r3, [pc, #160]	; (80006ac <Fill_Rectangle+0xb0>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	429c      	cmp	r4, r3
 8000610:	d905      	bls.n	800061e <Fill_Rectangle+0x22>
 8000612:	2d00      	cmp	r5, #0
 8000614:	dd2b      	ble.n	800066e <Fill_Rectangle+0x72>
 8000616:	4b25      	ldr	r3, [pc, #148]	; (80006ac <Fill_Rectangle+0xb0>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	429d      	cmp	r5, r3
 800061c:	d827      	bhi.n	800066e <Fill_Rectangle+0x72>
	{
		if(((StartY > 0) && (StartY <= DispHeight)) || ((StopY > 0) && (StopY <= DispHeight)))
 800061e:	2e00      	cmp	r6, #0
 8000620:	dd03      	ble.n	800062a <Fill_Rectangle+0x2e>
 8000622:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <Fill_Rectangle+0xb4>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	429e      	cmp	r6, r3
 8000628:	d907      	bls.n	800063a <Fill_Rectangle+0x3e>
 800062a:	9b08      	ldr	r3, [sp, #32]
 800062c:	2b00      	cmp	r3, #0
 800062e:	dd1e      	ble.n	800066e <Fill_Rectangle+0x72>
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <Fill_Rectangle+0xb4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	9a08      	ldr	r2, [sp, #32]
 8000636:	429a      	cmp	r2, r3
 8000638:	d819      	bhi.n	800066e <Fill_Rectangle+0x72>
		{
			if(StartX <= 0)
 800063a:	2c00      	cmp	r4, #0
 800063c:	dd19      	ble.n	8000672 <Fill_Rectangle+0x76>
			{ StartX = 1;}
			if(StopX > DispWidth)
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <Fill_Rectangle+0xb0>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	429d      	cmp	r5, r3
 8000644:	d900      	bls.n	8000648 <Fill_Rectangle+0x4c>
			{ StartX = DispWidth;}
 8000646:	461c      	mov	r4, r3

			if(StartY <= 0)
 8000648:	2e00      	cmp	r6, #0
 800064a:	dd14      	ble.n	8000676 <Fill_Rectangle+0x7a>
			{ StartY = 1;}
			if(StopY > DispHeight)
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <Fill_Rectangle+0xb4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	9a08      	ldr	r2, [sp, #32]
 8000652:	429a      	cmp	r2, r3
 8000654:	d900      	bls.n	8000658 <Fill_Rectangle+0x5c>
			{ StartY = DispHeight;}
 8000656:	461e      	mov	r6, r3

			if(ColorType == Color565)
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <Fill_Rectangle+0xb8>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b16b      	cbz	r3, 800067a <Fill_Rectangle+0x7e>
			{ Fill_rectangle(Get565Color(Color), StartX, StopX, StartY, StopY); }

			if(ColorType == Color888)
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <Fill_Rectangle+0xb8>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d014      	beq.n	8000690 <Fill_Rectangle+0x94>
			{ Fill_rectangle(Color | 0xFF << 24, StartX, StopX, StartY, StopY); }

			if(ColorType == Color_A888)
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <Fill_Rectangle+0xb8>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b02      	cmp	r3, #2
 800066c:	d01a      	beq.n	80006a4 <Fill_Rectangle+0xa8>
			{ Fill_all(Color); }
		}
	}
}
 800066e:	b003      	add	sp, #12
 8000670:	bdf0      	pop	{r4, r5, r6, r7, pc}
			{ StartX = 1;}
 8000672:	2401      	movs	r4, #1
 8000674:	e7e3      	b.n	800063e <Fill_Rectangle+0x42>
			{ StartY = 1;}
 8000676:	2601      	movs	r6, #1
 8000678:	e7e8      	b.n	800064c <Fill_Rectangle+0x50>
			{ Fill_rectangle(Get565Color(Color), StartX, StopX, StartY, StopY); }
 800067a:	4638      	mov	r0, r7
 800067c:	f7ff ff7a 	bl	8000574 <Get565Color>
 8000680:	9b08      	ldr	r3, [sp, #32]
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	4633      	mov	r3, r6
 8000686:	462a      	mov	r2, r5
 8000688:	4621      	mov	r1, r4
 800068a:	f7ff ff53 	bl	8000534 <Fill_rectangle>
 800068e:	e7e6      	b.n	800065e <Fill_Rectangle+0x62>
			{ Fill_rectangle(Color | 0xFF << 24, StartX, StopX, StartY, StopY); }
 8000690:	9b08      	ldr	r3, [sp, #32]
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	4633      	mov	r3, r6
 8000696:	462a      	mov	r2, r5
 8000698:	4621      	mov	r1, r4
 800069a:	f047 407f 	orr.w	r0, r7, #4278190080	; 0xff000000
 800069e:	f7ff ff49 	bl	8000534 <Fill_rectangle>
 80006a2:	e7e0      	b.n	8000666 <Fill_Rectangle+0x6a>
			{ Fill_all(Color); }
 80006a4:	4638      	mov	r0, r7
 80006a6:	f7ff ff37 	bl	8000518 <Fill_all>
}
 80006aa:	e7e0      	b.n	800066e <Fill_Rectangle+0x72>
 80006ac:	20000034 	.word	0x20000034
 80006b0:	20000030 	.word	0x20000030
 80006b4:	2000002c 	.word	0x2000002c

080006b8 <HLine>:
void HLine(uint32 Color, int16 x1, int16 x2, int16 y1, uint8 Tolshina)//
{
 80006b8:	b510      	push	{r4, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	f89d 4010 	ldrb.w	r4, [sp, #16]
    if(Tolshina > 0)
 80006c0:	b90c      	cbnz	r4, 80006c6 <HLine+0xe>
    {
    	Tolshina--;
    	Fill_Rectangle(Color, x1, x2, y1, y1+Tolshina);
    }
}
 80006c2:	b002      	add	sp, #8
 80006c4:	bd10      	pop	{r4, pc}
    	Tolshina--;
 80006c6:	3c01      	subs	r4, #1
    	Fill_Rectangle(Color, x1, x2, y1, y1+Tolshina);
 80006c8:	fa53 f484 	uxtab	r4, r3, r4
 80006cc:	9400      	str	r4, [sp, #0]
 80006ce:	f7ff ff95 	bl	80005fc <Fill_Rectangle>
}
 80006d2:	e7f6      	b.n	80006c2 <HLine+0xa>

080006d4 <VLine>:
void VLine(uint32 Color, int16 x1, int16 y1, int16 y2, uint8 Tolshina)
{
 80006d4:	b510      	push	{r4, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	f89d 4010 	ldrb.w	r4, [sp, #16]
	if(Tolshina > 0)
 80006dc:	b90c      	cbnz	r4, 80006e2 <VLine+0xe>
	{
		Tolshina--;
		Fill_Rectangle(Color, x1, x1+Tolshina, y1, y2);
	}
}
 80006de:	b002      	add	sp, #8
 80006e0:	bd10      	pop	{r4, pc}
		Tolshina--;
 80006e2:	3c01      	subs	r4, #1
		Fill_Rectangle(Color, x1, x1+Tolshina, y1, y2);
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	4613      	mov	r3, r2
 80006e8:	fa51 f284 	uxtab	r2, r1, r4
 80006ec:	f7ff ff86 	bl	80005fc <Fill_Rectangle>
}
 80006f0:	e7f5      	b.n	80006de <VLine+0xa>

080006f2 <FramePanel>:
void FramePanel(uint32 BorderColor, uint32 FloodColor, int16 x1, int16 x2, int16 y1, int16 y2, uint8 Tolshina)
{
 80006f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006f6:	b083      	sub	sp, #12
 80006f8:	4605      	mov	r5, r0
 80006fa:	4608      	mov	r0, r1
 80006fc:	4616      	mov	r6, r2
 80006fe:	461c      	mov	r4, r3
 8000700:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
 8000704:	f9bd a034 	ldrsh.w	sl, [sp, #52]	; 0x34
 8000708:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	Tolshina --;
 800070c:	f108 37ff 	add.w	r7, r8, #4294967295
 8000710:	b2ff      	uxtb	r7, r7
	Fill_Rectangle(FloodColor,x1,x2,y1,y2);
 8000712:	f8cd a000 	str.w	sl, [sp]
 8000716:	464b      	mov	r3, r9
 8000718:	4622      	mov	r2, r4
 800071a:	4631      	mov	r1, r6
 800071c:	f7ff ff6e 	bl	80005fc <Fill_Rectangle>
    HLine(BorderColor,x1,x2,y1,Tolshina + 1);
 8000720:	f8cd 8000 	str.w	r8, [sp]
 8000724:	464b      	mov	r3, r9
 8000726:	4622      	mov	r2, r4
 8000728:	4631      	mov	r1, r6
 800072a:	4628      	mov	r0, r5
 800072c:	f7ff ffc4 	bl	80006b8 <HLine>
    HLine(BorderColor,x1,x2,y2 - Tolshina,Tolshina +1);
 8000730:	fa1f fb87 	uxth.w	fp, r7
 8000734:	ebaa 0307 	sub.w	r3, sl, r7
 8000738:	f8cd 8000 	str.w	r8, [sp]
 800073c:	b21b      	sxth	r3, r3
 800073e:	4622      	mov	r2, r4
 8000740:	4631      	mov	r1, r6
 8000742:	4628      	mov	r0, r5
 8000744:	f7ff ffb8 	bl	80006b8 <HLine>
    VLine(BorderColor,x1,y1,y2,Tolshina + 1);
 8000748:	f8cd 8000 	str.w	r8, [sp]
 800074c:	4653      	mov	r3, sl
 800074e:	464a      	mov	r2, r9
 8000750:	4631      	mov	r1, r6
 8000752:	4628      	mov	r0, r5
 8000754:	f7ff ffbe 	bl	80006d4 <VLine>
    VLine(BorderColor,x2 - Tolshina,y1,y2,Tolshina + 1);
 8000758:	eba4 010b 	sub.w	r1, r4, fp
 800075c:	f8cd 8000 	str.w	r8, [sp]
 8000760:	4653      	mov	r3, sl
 8000762:	464a      	mov	r2, r9
 8000764:	b209      	sxth	r1, r1
 8000766:	4628      	mov	r0, r5
 8000768:	f7ff ffb4 	bl	80006d4 <VLine>
}
 800076c:	b003      	add	sp, #12
 800076e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000772 <RichTextBox>:

	//Line(160, 140, 260, 40, green | 0xff000000, 2);
	//Line(270, 40, 170, 140, green | 0xff000000, 2);
}
void RichTextBox(uint16 x1, uint16 x2, uint16 y1, uint16 y2,uint16 Tolshina, uint32 BColor, uint32 FloodColor, uint32 TextColor, char Text[] )//++
{
 8000772:	b570      	push	{r4, r5, r6, lr}
 8000774:	b084      	sub	sp, #16
 8000776:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    uint16 Sym_count = 0;
 8000778:	2400      	movs	r4, #0
    uint8 ChWt = 0;
    uint8 ChH = 0;

    x = x1 + Tolshina;
    y = y1;
    while(Text[Sym_count]!=0)
 800077a:	e001      	b.n	8000780 <RichTextBox+0xe>
    {
      Sym_count++;
 800077c:	3401      	adds	r4, #1
 800077e:	b2a4      	uxth	r4, r4
    while(Text[Sym_count]!=0)
 8000780:	5d35      	ldrb	r5, [r6, r4]
 8000782:	2d00      	cmp	r5, #0
 8000784:	d1fa      	bne.n	800077c <RichTextBox+0xa>
    }

    FramePanel(BColor,FloodColor,x1,x2,y1,y2,Tolshina);
 8000786:	f89d 5020 	ldrb.w	r5, [sp, #32]
 800078a:	9502      	str	r5, [sp, #8]
 800078c:	b21b      	sxth	r3, r3
 800078e:	9301      	str	r3, [sp, #4]
 8000790:	b212      	sxth	r2, r2
 8000792:	9200      	str	r2, [sp, #0]
 8000794:	b20b      	sxth	r3, r1
 8000796:	b202      	sxth	r2, r0
 8000798:	990a      	ldr	r1, [sp, #40]	; 0x28
 800079a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800079c:	f7ff ffa9 	bl	80006f2 <FramePanel>

    for(int i = 0; i < Sym_count; i++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	e000      	b.n	80007a6 <RichTextBox+0x34>
 80007a4:	3301      	adds	r3, #1
 80007a6:	429c      	cmp	r4, r3
 80007a8:	dcfc      	bgt.n	80007a4 <RichTextBox+0x32>
//        	  SymbolParameters(x, y, &Nx, &Ny, &ChWt, &ChH, Text[i]);
//          }

//       }
    }
}
 80007aa:	b004      	add	sp, #16
 80007ac:	bd70      	pop	{r4, r5, r6, pc}

080007ae <LCD_RichTextBox>:
	{
	   GraphLine(Gr->X1, Gr->X2, Gr->Y1, Gr->Y2, GrL->LineColor, Gr->Thickness, Gr->StepX, Gr->StepY, Gr->XMax, Gr->XMin, Gr->YMax, Gr->YMin, data, GrL->Points_count, GrL->Thickness);
	}
}
uint8 LCD_RichTextBox(D_RichTextBox *richTextBox, char Text[])
{
 80007ae:	b500      	push	{lr}
 80007b0:	b087      	sub	sp, #28
	//uint8 TouchDet = GetCursorPosition();
	RichTextBox(richTextBox->X1, richTextBox->X2, richTextBox->Y1, richTextBox->Y2, richTextBox->Thickness, richTextBox->FrameColor, richTextBox->FillColor, richTextBox->TextColor, Text);
 80007b2:	9104      	str	r1, [sp, #16]
 80007b4:	69c3      	ldr	r3, [r0, #28]
 80007b6:	9303      	str	r3, [sp, #12]
 80007b8:	6983      	ldr	r3, [r0, #24]
 80007ba:	9302      	str	r3, [sp, #8]
 80007bc:	6943      	ldr	r3, [r0, #20]
 80007be:	9301      	str	r3, [sp, #4]
 80007c0:	8a03      	ldrh	r3, [r0, #16]
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	8983      	ldrh	r3, [r0, #12]
 80007c6:	8902      	ldrh	r2, [r0, #8]
 80007c8:	8881      	ldrh	r1, [r0, #4]
 80007ca:	8800      	ldrh	r0, [r0, #0]
 80007cc:	f7ff ffd1 	bl	8000772 <RichTextBox>
//		{
//			return NotClicked;
//		}
//	}
	return NotClicked;
}
 80007d0:	2000      	movs	r0, #0
 80007d2:	b007      	add	sp, #28
 80007d4:	f85d fb04 	ldr.w	pc, [sp], #4

080007d8 <TS_IO_Read>:
extern I2C_HandleTypeDef hi2c3;
static ft5336_handle_TypeDef ft5336_handle = {FT5336_I2C_NOT_INITIALIZED, 0, 0};
static uint8_t tsOrientation;

uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80007d8:	b500      	push	{lr}
 80007da:	b087      	sub	sp, #28
 80007dc:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	f88d 3017 	strb.w	r3, [sp, #23]
  HAL_I2C_Mem_Read(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &read_value, 1, 0x1000);
 80007e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e8:	9302      	str	r3, [sp, #8]
 80007ea:	2301      	movs	r3, #1
 80007ec:	9301      	str	r3, [sp, #4]
 80007ee:	f10d 0117 	add.w	r1, sp, #23
 80007f2:	9100      	str	r1, [sp, #0]
 80007f4:	4601      	mov	r1, r0
 80007f6:	4804      	ldr	r0, [pc, #16]	; (8000808 <TS_IO_Read+0x30>)
 80007f8:	f001 fec4 	bl	8002584 <HAL_I2C_Mem_Read>
  return read_value;
}
 80007fc:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000800:	b007      	add	sp, #28
 8000802:	f85d fb04 	ldr.w	pc, [sp], #4
 8000806:	bf00      	nop
 8000808:	2003fc8c 	.word	0x2003fc8c

0800080c <TS_IO_Write>:
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800080c:	b500      	push	{lr}
 800080e:	b087      	sub	sp, #28
 8000810:	f88d 2017 	strb.w	r2, [sp, #23]
  HAL_StatusTypeDef status = HAL_OK;
  HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x1000);
 8000814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000818:	9302      	str	r3, [sp, #8]
 800081a:	2301      	movs	r3, #1
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	f10d 0217 	add.w	r2, sp, #23
 8000822:	9200      	str	r2, [sp, #0]
 8000824:	460a      	mov	r2, r1
 8000826:	4601      	mov	r1, r0
 8000828:	4802      	ldr	r0, [pc, #8]	; (8000834 <TS_IO_Write+0x28>)
 800082a:	f001 fdd5 	bl	80023d8 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
  {}
}
 800082e:	b007      	add	sp, #28
 8000830:	f85d fb04 	ldr.w	pc, [sp], #4
 8000834:	2003fc8c 	.word	0x2003fc8c

08000838 <Touch_ReadID>:
	ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
	* pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
  }
}
uint16_t Touch_ReadID(uint16_t DeviceAddr)
{
 8000838:	b570      	push	{r4, r5, r6, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	4606      	mov	r6, r0
  volatile uint8_t ucReadId = 0;
 800083e:	2400      	movs	r4, #0
 8000840:	f88d 4007 	strb.w	r4, [sp, #7]
  uint8_t nbReadAttempts = 0;
  int8_t bFoundDevice = 0;
 8000844:	4625      	mov	r5, r4
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000846:	e001      	b.n	800084c <Touch_ReadID+0x14>
 8000848:	3401      	adds	r4, #1
 800084a:	b2e4      	uxtb	r4, r4
 800084c:	f085 0301 	eor.w	r3, r5, #1
 8000850:	2c02      	cmp	r4, #2
 8000852:	bf8c      	ite	hi
 8000854:	2300      	movhi	r3, #0
 8000856:	f003 0301 	andls.w	r3, r3, #1
 800085a:	b163      	cbz	r3, 8000876 <Touch_ReadID+0x3e>
  {
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800085c:	21a8      	movs	r1, #168	; 0xa8
 800085e:	b2f0      	uxtb	r0, r6
 8000860:	f7ff ffba 	bl	80007d8 <TS_IO_Read>
 8000864:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 8000868:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b51      	cmp	r3, #81	; 0x51
 8000870:	d1ea      	bne.n	8000848 <Touch_ReadID+0x10>
    {
      bFoundDevice = 1;
 8000872:	2501      	movs	r5, #1
 8000874:	e7e8      	b.n	8000848 <Touch_ReadID+0x10>
    }
  }
  return (ucReadId);
 8000876:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800087a:	b002      	add	sp, #8
 800087c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000880 <Touch_Init>:
  return (ts_status);
}


void Touch_Init(void)
{
 8000880:	b508      	push	{r3, lr}
  uint8_t regValue = 0;
  HAL_Delay(200);
 8000882:	20c8      	movs	r0, #200	; 0xc8
 8000884:	f001 f8fa 	bl	8001a7c <HAL_Delay>
  if(Touch_ReadID(TS_I2C_ADDRESS) != FT5336_ID_VALUE)
 8000888:	2070      	movs	r0, #112	; 0x70
 800088a:	f7ff ffd5 	bl	8000838 <Touch_ReadID>
  {}
  tsOrientation = TS_SWAP_XY;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <Touch_Init+0x28>)
 8000890:	2208      	movs	r2, #8
 8000892:	701a      	strb	r2, [r3, #0]

  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
  TS_IO_Write(TS_I2C_ADDRESS, FT5336_GMODE_REG, regValue);
 8000894:	2200      	movs	r2, #0
 8000896:	21a4      	movs	r1, #164	; 0xa4
 8000898:	2070      	movs	r0, #112	; 0x70
 800089a:	f7ff ffb7 	bl	800080c <TS_IO_Write>
  ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800089e:	4b03      	ldr	r3, [pc, #12]	; (80008ac <Touch_Init+0x2c>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	701a      	strb	r2, [r3, #0]
}
 80008a4:	bd08      	pop	{r3, pc}
 80008a6:	bf00      	nop
 80008a8:	2000003b 	.word	0x2000003b
 80008ac:	20000038 	.word	0x20000038

080008b0 <MainFunc>:
short unsigned int RGB[272*480]; //Резервируем память для буффера дисплея
DisplayConfig ds;                //Основные параметры библиотеки


void MainFunc ()
{
 80008b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008b4:	f5ad 7d79 	sub.w	sp, sp, #996	; 0x3e4
	ds.Color_Type = Color565; //Бит на пиксель
 80008b8:	4ec4      	ldr	r6, [pc, #784]	; (8000bcc <MainFunc+0x31c>)
 80008ba:	2400      	movs	r4, #0
 80008bc:	7334      	strb	r4, [r6, #12]
	ds.Display_Height = 272;
 80008be:	f44f 7388 	mov.w	r3, #272	; 0x110
 80008c2:	6073      	str	r3, [r6, #4]
	ds.Display_Width = 480;
 80008c4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80008c8:	60b3      	str	r3, [r6, #8]
	ds.Layers = 1;            //Количество слоев
 80008ca:	2501      	movs	r5, #1
 80008cc:	7375      	strb	r5, [r6, #13]
	ds.Start_RAM_Address = (uint32_t)&RGB; //Адрес начала кадрового буффера
 80008ce:	49c0      	ldr	r1, [pc, #768]	; (8000bd0 <MainFunc+0x320>)
 80008d0:	6031      	str	r1, [r6, #0]

	HAL_LTDC_SetAddress(&hltdc,(uint32_t)&RGB,0);  // запускаем модуль LTDC (железный)
 80008d2:	4622      	mov	r2, r4
 80008d4:	48bf      	ldr	r0, [pc, #764]	; (8000bd4 <MainFunc+0x324>)
 80008d6:	f002 f981 	bl	8002bdc <HAL_LTDC_SetAddress>
	Graphics_Init(&ds); //инит библиотеки (из структуры ds)
 80008da:	4630      	mov	r0, r6
 80008dc:	f7ff fe76 	bl	80005cc <Graphics_Init>
    D_Graph gr;
    D_GraphLine grL;
    D_RichTextBox RTB;


	kv.X1 = 200;
 80008e0:	f04f 08c8 	mov.w	r8, #200	; 0xc8
 80008e4:	f8cd 83d0 	str.w	r8, [sp, #976]	; 0x3d0
	kv.X2 = 400;
 80008e8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80008ec:	93f5      	str	r3, [sp, #980]	; 0x3d4
	kv.Y1 = 30;
 80008ee:	201e      	movs	r0, #30
 80008f0:	90f6      	str	r0, [sp, #984]	; 0x3d8
	kv.Y2 = 230;
 80008f2:	23e6      	movs	r3, #230	; 0xe6
 80008f4:	93f7      	str	r3, [sp, #988]	; 0x3dc
	kv.Color = green;
 80008f6:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80008fa:	91f3      	str	r1, [sp, #972]	; 0x3cc

	pan.FrameColor = blue;
 80008fc:	23ff      	movs	r3, #255	; 0xff
 80008fe:	93ec      	str	r3, [sp, #944]	; 0x3b0
	pan.FillColor = yellow;
 8000900:	f8df b2d4 	ldr.w	fp, [pc, #724]	; 8000bd8 <MainFunc+0x328>
 8000904:	f8cd b3b4 	str.w	fp, [sp, #948]	; 0x3b4
	pan.Thickness = 2;
 8000908:	f04f 0c02 	mov.w	ip, #2
 800090c:	f88d c3c8 	strb.w	ip, [sp, #968]	; 0x3c8
	pan.X1 = 1;
 8000910:	95ee      	str	r5, [sp, #952]	; 0x3b8
	pan.X2 = 480;
 8000912:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000916:	92ef      	str	r2, [sp, #956]	; 0x3bc
	pan.Y1 = 1;
 8000918:	95f0      	str	r5, [sp, #960]	; 0x3c0
	pan.Y2 = 272;
 800091a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800091e:	92f1      	str	r2, [sp, #964]	; 0x3c4

	rec.X1 = 50;
 8000920:	2232      	movs	r2, #50	; 0x32
 8000922:	92e8      	str	r2, [sp, #928]	; 0x3a0
	rec.X2 = 480;
 8000924:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000928:	92e9      	str	r2, [sp, #932]	; 0x3a4
	rec.Y1 = 50;
 800092a:	2232      	movs	r2, #50	; 0x32
 800092c:	92ea      	str	r2, [sp, #936]	; 0x3a8
	rec.Y2 = 270;
 800092e:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8000932:	92eb      	str	r2, [sp, #940]	; 0x3ac
	rec.Color = red;
 8000934:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8000938:	92e7      	str	r2, [sp, #924]	; 0x39c

	line.X1 = 100;
 800093a:	2664      	movs	r6, #100	; 0x64
 800093c:	96e3      	str	r6, [sp, #908]	; 0x38c
	line.X2 = 450;
 800093e:	f44f 76e1 	mov.w	r6, #450	; 0x1c2
 8000942:	96e4      	str	r6, [sp, #912]	; 0x390
	line.Y1 = 200;
 8000944:	f8cd 8394 	str.w	r8, [sp, #916]	; 0x394
	line.Color = blue;
 8000948:	93e2      	str	r3, [sp, #904]	; 0x388
	line.Thickness = 5;
 800094a:	f04f 0605 	mov.w	r6, #5
 800094e:	f88d 6398 	strb.w	r6, [sp, #920]	; 0x398

	ball.X1 = 200;
 8000952:	f8cd 8374 	str.w	r8, [sp, #884]	; 0x374
	ball.Y1 = 125;
 8000956:	267d      	movs	r6, #125	; 0x7d
 8000958:	96de      	str	r6, [sp, #888]	; 0x378
	ball.Color = green;
 800095a:	91e0      	str	r1, [sp, #896]	; 0x380
	ball.R = 40;
 800095c:	2628      	movs	r6, #40	; 0x28
 800095e:	96df      	str	r6, [sp, #892]	; 0x37c

	p.X1 = 200;
 8000960:	f8cd 8348 	str.w	r8, [sp, #840]	; 0x348
	p.X2 = 400;
 8000964:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8000968:	96d3      	str	r6, [sp, #844]	; 0x34c
	p.Y1 = 30;
 800096a:	90d4      	str	r0, [sp, #848]	; 0x350
	p.Y2 = 40;
 800096c:	2628      	movs	r6, #40	; 0x28
 800096e:	96d5      	str	r6, [sp, #852]	; 0x354
	p.StartValue = 0;
 8000970:	94d6      	str	r4, [sp, #856]	; 0x358
	p.StopValue = 10;
 8000972:	f04f 0e0a 	mov.w	lr, #10
 8000976:	f8cd e35c 	str.w	lr, [sp, #860]	; 0x35c
	p.CurrentValue = 6;
 800097a:	2606      	movs	r6, #6
 800097c:	96d8      	str	r6, [sp, #864]	; 0x360
	p.Thickness = 3;
 800097e:	2703      	movs	r7, #3
 8000980:	f88d 7370 	strb.w	r7, [sp, #880]	; 0x370
	p.FillColor = black;
 8000984:	94da      	str	r4, [sp, #872]	; 0x368
	p.FrameColor = blue;
 8000986:	93d9      	str	r3, [sp, #868]	; 0x364
	p.BarColor = red;
 8000988:	92db      	str	r2, [sp, #876]	; 0x36c
	p.Orientation = Horisontal;
 800098a:	f88d 7371 	strb.w	r7, [sp, #881]	; 0x371

	pa.X1 = 30;
 800098e:	90c7      	str	r0, [sp, #796]	; 0x31c
	pa.X2 = 50;
 8000990:	2632      	movs	r6, #50	; 0x32
 8000992:	96c8      	str	r6, [sp, #800]	; 0x320
	pa.Y1 = 30;
 8000994:	90c9      	str	r0, [sp, #804]	; 0x324
	pa.Y2 = 262;
 8000996:	f44f 7983 	mov.w	r9, #262	; 0x106
 800099a:	f8cd 9328 	str.w	r9, [sp, #808]	; 0x328
	pa.StartValue = 0;
 800099e:	94cb      	str	r4, [sp, #812]	; 0x32c
	pa.StopValue = 10;
 80009a0:	f8cd e330 	str.w	lr, [sp, #816]	; 0x330
	pa.CurrentValue = 6;
 80009a4:	2006      	movs	r0, #6
 80009a6:	90cd      	str	r0, [sp, #820]	; 0x334
	pa.Thickness = 3;
 80009a8:	f88d 7344 	strb.w	r7, [sp, #836]	; 0x344
	pa.FillColor = black;
 80009ac:	94cf      	str	r4, [sp, #828]	; 0x33c
	pa.FrameColor = blue;
 80009ae:	93ce      	str	r3, [sp, #824]	; 0x338
	pa.BarColor = red;
 80009b0:	92d0      	str	r2, [sp, #832]	; 0x340
	pa.Orientation = Vertical;
 80009b2:	f04f 0a04 	mov.w	sl, #4
 80009b6:	f88d a345 	strb.w	sl, [sp, #837]	; 0x345

	round.X1 = 100;
 80009ba:	2064      	movs	r0, #100	; 0x64
 80009bc:	90c1      	str	r0, [sp, #772]	; 0x304
	round.Y1 = 120;
 80009be:	2078      	movs	r0, #120	; 0x78
 80009c0:	90c2      	str	r0, [sp, #776]	; 0x308
	round.Color = yellow;
 80009c2:	f8cd b310 	str.w	fp, [sp, #784]	; 0x310
	round.Thickness = 3;
 80009c6:	97c5      	str	r7, [sp, #788]	; 0x314
	round.R = 40;
 80009c8:	2028      	movs	r0, #40	; 0x28
 80009ca:	90c3      	str	r0, [sp, #780]	; 0x30c

	check.X1 = 20;
 80009cc:	2014      	movs	r0, #20
 80009ce:	90b7      	str	r0, [sp, #732]	; 0x2dc
	check.X2 = 35;
 80009d0:	2023      	movs	r0, #35	; 0x23
 80009d2:	90b8      	str	r0, [sp, #736]	; 0x2e0
	check.Y1 = 10;
 80009d4:	f8cd e2e4 	str.w	lr, [sp, #740]	; 0x2e4
	check.Y2 = 25;
 80009d8:	2019      	movs	r0, #25
 80009da:	90ba      	str	r0, [sp, #744]	; 0x2e8
	check.FrameColor = blue;
 80009dc:	93bb      	str	r3, [sp, #748]	; 0x2ec
	check.BackColor = white;
 80009de:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80009e2:	90bc      	str	r0, [sp, #752]	; 0x2f0
	check.CheckColor = black;
 80009e4:	94bd      	str	r4, [sp, #756]	; 0x2f4
	check.Checked = 1;
 80009e6:	f88d 52f8 	strb.w	r5, [sp, #760]	; 0x2f8
	check.TextColor = white;
 80009ea:	90bf      	str	r0, [sp, #764]	; 0x2fc

	tr.X1 = 200;
 80009ec:	f8cd 82a8 	str.w	r8, [sp, #680]	; 0x2a8
	tr.X2 = 400;
 80009f0:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80009f4:	96ab      	str	r6, [sp, #684]	; 0x2ac
	tr.Y1 = 45;
 80009f6:	262d      	movs	r6, #45	; 0x2d
 80009f8:	96ac      	str	r6, [sp, #688]	; 0x2b0
	tr.Y2 = 50;
 80009fa:	2632      	movs	r6, #50	; 0x32
 80009fc:	96ad      	str	r6, [sp, #692]	; 0x2b4
	tr.StartValue = 0;
 80009fe:	94ae      	str	r4, [sp, #696]	; 0x2b8
	tr.StopValue = 10;
 8000a00:	f8cd e2bc 	str.w	lr, [sp, #700]	; 0x2bc
	tr.FrameColor = blue;
 8000a04:	93b1      	str	r3, [sp, #708]	; 0x2c4
	tr.BackColor = red;
 8000a06:	92b2      	str	r2, [sp, #712]	; 0x2c8
	tr.Orientation = Horisontal;
 8000a08:	f88d 72d0 	strb.w	r7, [sp, #720]	; 0x2d0
	tr.Radius = 6;
 8000a0c:	2606      	movs	r6, #6
 8000a0e:	96b5      	str	r6, [sp, #724]	; 0x2d4
	tr.TrackerColor = yellow;
 8000a10:	f8cd b2cc 	str.w	fp, [sp, #716]	; 0x2cc

	tra.X1 = 20;
 8000a14:	2614      	movs	r6, #20
 8000a16:	969d      	str	r6, [sp, #628]	; 0x274
	tra.X2 = 25;
 8000a18:	2619      	movs	r6, #25
 8000a1a:	969e      	str	r6, [sp, #632]	; 0x278
	tra.Y1 = 35;
 8000a1c:	2623      	movs	r6, #35	; 0x23
 8000a1e:	969f      	str	r6, [sp, #636]	; 0x27c
	tra.Y2 = 262;
 8000a20:	f8cd 9280 	str.w	r9, [sp, #640]	; 0x280
	tra.StartValue = 0;
 8000a24:	94a1      	str	r4, [sp, #644]	; 0x284
	tra.StopValue = 10;
 8000a26:	f8cd e288 	str.w	lr, [sp, #648]	; 0x288
	tra.FrameColor = blue;
 8000a2a:	93a4      	str	r3, [sp, #656]	; 0x290
	tra.BackColor = red;
 8000a2c:	92a5      	str	r2, [sp, #660]	; 0x294
	tra.Orientation = Vertical;
 8000a2e:	f88d a29c 	strb.w	sl, [sp, #668]	; 0x29c
	tra.Radius = 6;
 8000a32:	2606      	movs	r6, #6
 8000a34:	96a8      	str	r6, [sp, #672]	; 0x2a0
	tra.TrackerColor = yellow;
 8000a36:	f8cd b298 	str.w	fp, [sp, #664]	; 0x298

	vgr.X1 = 240;
 8000a3a:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 8000a3e:	f8cd a258 	str.w	sl, [sp, #600]	; 0x258
	vgr.X2 = 340;
 8000a42:	f44f 7aaa 	mov.w	sl, #340	; 0x154
 8000a46:	f8cd a25c 	str.w	sl, [sp, #604]	; 0x25c
	vgr.Y1 = 190;
 8000a4a:	26be      	movs	r6, #190	; 0xbe
 8000a4c:	9698      	str	r6, [sp, #608]	; 0x260
	vgr.Y2 = 262;
 8000a4e:	f8cd 9264 	str.w	r9, [sp, #612]	; 0x264
	vgr.ColorH = red;
 8000a52:	929a      	str	r2, [sp, #616]	; 0x268
	vgr.ColorL = lightBlue1;
 8000a54:	f8df a184 	ldr.w	sl, [pc, #388]	; 8000bdc <MainFunc+0x32c>
 8000a58:	f8cd a26c 	str.w	sl, [sp, #620]	; 0x26c
	vgr.Unvisible = 0;
 8000a5c:	f88d 4271 	strb.w	r4, [sp, #625]	; 0x271
	vgr.Is_pressed = 0;
 8000a60:	f88d 4270 	strb.w	r4, [sp, #624]	; 0x270

	hgr.X1 = 135;
 8000a64:	f04f 0b87 	mov.w	fp, #135	; 0x87
 8000a68:	f8cd b23c 	str.w	fp, [sp, #572]	; 0x23c
	hgr.X2 = 235;
 8000a6c:	f04f 0beb 	mov.w	fp, #235	; 0xeb
 8000a70:	f8cd b240 	str.w	fp, [sp, #576]	; 0x240
	hgr.Y1 = 190;
 8000a74:	9691      	str	r6, [sp, #580]	; 0x244
	hgr.Y2 = 262;
 8000a76:	f8cd 9248 	str.w	r9, [sp, #584]	; 0x248
	hgr.ColorH = red;
 8000a7a:	9293      	str	r2, [sp, #588]	; 0x24c
	hgr.ColorL = lightBlue1;
 8000a7c:	f8cd a250 	str.w	sl, [sp, #592]	; 0x250
	hgr.Unvisible = 0;
 8000a80:	f88d 4255 	strb.w	r4, [sp, #597]	; 0x255
	hgr.Is_pressed = 0;
 8000a84:	f88d 4254 	strb.w	r4, [sp, #596]	; 0x254

	dhgr.X1 = 345;
 8000a88:	f240 1b59 	movw	fp, #345	; 0x159
 8000a8c:	f8cd b21c 	str.w	fp, [sp, #540]	; 0x21c
	dhgr.X2 = 445;
 8000a90:	f240 1abd 	movw	sl, #445	; 0x1bd
 8000a94:	f8cd a220 	str.w	sl, [sp, #544]	; 0x220
	dhgr.Y1 = 190;
 8000a98:	9689      	str	r6, [sp, #548]	; 0x224
	dhgr.Y2 = 262;
 8000a9a:	f8cd 9228 	str.w	r9, [sp, #552]	; 0x228
	dhgr.ColorH  = red;
 8000a9e:	928b      	str	r2, [sp, #556]	; 0x22c
	dhgr.ColorC = green;
 8000aa0:	918c      	str	r1, [sp, #560]	; 0x230
	dhgr.ColorL = blue;
 8000aa2:	938d      	str	r3, [sp, #564]	; 0x234

	dvgr.X1 = 345;
 8000aa4:	f8cd b1fc 	str.w	fp, [sp, #508]	; 0x1fc
	dvgr.X2 = 445;
 8000aa8:	f8cd a200 	str.w	sl, [sp, #512]	; 0x200
	dvgr.Y1 = 113;
 8000aac:	f04f 0971 	mov.w	r9, #113	; 0x71
 8000ab0:	f8cd 9204 	str.w	r9, [sp, #516]	; 0x204
	dvgr.Y2 = 185;
 8000ab4:	f04f 09b9 	mov.w	r9, #185	; 0xb9
 8000ab8:	f8cd 9208 	str.w	r9, [sp, #520]	; 0x208
	dvgr.ColorH  = red;
 8000abc:	9283      	str	r2, [sp, #524]	; 0x20c
	dvgr.ColorC = green;
 8000abe:	9184      	str	r1, [sp, #528]	; 0x210
	dvgr.ColorL = blue;
 8000ac0:	9385      	str	r3, [sp, #532]	; 0x214

    lb.X = 80;
 8000ac2:	f04f 0950 	mov.w	r9, #80	; 0x50
 8000ac6:	f8cd 91e8 	str.w	r9, [sp, #488]	; 0x1e8
    lb.Y = 90;
 8000aca:	265a      	movs	r6, #90	; 0x5a
 8000acc:	967b      	str	r6, [sp, #492]	; 0x1ec
    lb.Color = white;
 8000ace:	907c      	str	r0, [sp, #496]	; 0x1f0
    lb.ClickedColor = gray;
 8000ad0:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8000be0 <MainFunc+0x330>
 8000ad4:	f8cd 91f4 	str.w	r9, [sp, #500]	; 0x1f4

    fr.X1 = 2;
 8000ad8:	f8cd c1bc 	str.w	ip, [sp, #444]	; 0x1bc
    fr.X2 = 479;
 8000adc:	f240 1adf 	movw	sl, #479	; 0x1df
 8000ae0:	f8cd a1c0 	str.w	sl, [sp, #448]	; 0x1c0
    fr.Y1 = 2;
 8000ae4:	f8cd c1c4 	str.w	ip, [sp, #452]	; 0x1c4
    fr.Y2 = 271;
 8000ae8:	f240 1b0f 	movw	fp, #271	; 0x10f
 8000aec:	f8cd b1c8 	str.w	fp, [sp, #456]	; 0x1c8
    fr.YBar = 25;
 8000af0:	2619      	movs	r6, #25
 8000af2:	9673      	str	r6, [sp, #460]	; 0x1cc
    fr.BarColor = blue;
 8000af4:	9376      	str	r3, [sp, #472]	; 0x1d8
    fr.FrameColor = red;
 8000af6:	9275      	str	r2, [sp, #468]	; 0x1d4
    fr.TextColor = green;
 8000af8:	9178      	str	r1, [sp, #480]	; 0x1e0
    fr.Thickness = 1;
 8000afa:	f88d 51d0 	strb.w	r5, [sp, #464]	; 0x1d0
    fr.WindowColor = white;
 8000afe:	9077      	str	r0, [sp, #476]	; 0x1dc

    bt.FillColor = gray2;
 8000b00:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8000be4 <MainFunc+0x334>
 8000b04:	f8cd 91ac 	str.w	r9, [sp, #428]	; 0x1ac
    bt.FrameColor = black;
 8000b08:	946a      	str	r4, [sp, #424]	; 0x1a8
    bt.PressedColor = white;
 8000b0a:	906c      	str	r0, [sp, #432]	; 0x1b0
    bt.TextColor = black;
 8000b0c:	946d      	str	r4, [sp, #436]	; 0x1b4
    bt.Thickness = 1;
 8000b0e:	f88d 51a4 	strb.w	r5, [sp, #420]	; 0x1a4
    bt.X1 = 230;
 8000b12:	26e6      	movs	r6, #230	; 0xe6
 8000b14:	9665      	str	r6, [sp, #404]	; 0x194
    bt.X2 = 310;
 8000b16:	f44f 799b 	mov.w	r9, #310	; 0x136
 8000b1a:	f8cd 9198 	str.w	r9, [sp, #408]	; 0x198
    bt.Y1 = 100;
 8000b1e:	2664      	movs	r6, #100	; 0x64
 8000b20:	9667      	str	r6, [sp, #412]	; 0x19c
    bt.Y2 = 120;
 8000b22:	2678      	movs	r6, #120	; 0x78
 8000b24:	9668      	str	r6, [sp, #416]	; 0x1a0

    hfr.X1 = 2;
 8000b26:	f8cd c164 	str.w	ip, [sp, #356]	; 0x164
    hfr.X2 = 479;
 8000b2a:	f8cd a168 	str.w	sl, [sp, #360]	; 0x168
    hfr.Y1 = 2;
 8000b2e:	f8cd c16c 	str.w	ip, [sp, #364]	; 0x16c
    hfr.Y2 = 271;
 8000b32:	f8cd b170 	str.w	fp, [sp, #368]	; 0x170
    hfr.YBar = 25;
 8000b36:	2619      	movs	r6, #25
 8000b38:	965d      	str	r6, [sp, #372]	; 0x174
    hfr.BarColorH = blue;
 8000b3a:	9360      	str	r3, [sp, #384]	; 0x180
    hfr.BarColorL = lightBlue3;
 8000b3c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8000be8 <MainFunc+0x338>
 8000b40:	f8cd 9184 	str.w	r9, [sp, #388]	; 0x184
    hfr.FrameColor = red;
 8000b44:	925f      	str	r2, [sp, #380]	; 0x17c
    hfr.TextColor = green;
 8000b46:	9163      	str	r1, [sp, #396]	; 0x18c
    hfr.Thickness = 1;
 8000b48:	f88d 5178 	strb.w	r5, [sp, #376]	; 0x178
    hfr.WindowColor = white;
 8000b4c:	9062      	str	r0, [sp, #392]	; 0x188

    vfr.X1 = 2;
 8000b4e:	f8cd c134 	str.w	ip, [sp, #308]	; 0x134
    vfr.X2 = 479;
 8000b52:	f8cd a138 	str.w	sl, [sp, #312]	; 0x138
    vfr.Y1 = 2;
 8000b56:	f8cd c13c 	str.w	ip, [sp, #316]	; 0x13c
    vfr.Y2 = 271;
 8000b5a:	f8cd b140 	str.w	fp, [sp, #320]	; 0x140
    vfr.YBar = 25;
 8000b5e:	9651      	str	r6, [sp, #324]	; 0x144
    vfr.BarColorL = blue;
 8000b60:	9355      	str	r3, [sp, #340]	; 0x154
    vfr.BarColorH = lightBlue4;
 8000b62:	f509 194c 	add.w	r9, r9, #3342336	; 0x330000
 8000b66:	f509 594c 	add.w	r9, r9, #13056	; 0x3300
 8000b6a:	f8cd 9150 	str.w	r9, [sp, #336]	; 0x150
    vfr.FrameColor = red;
 8000b6e:	9253      	str	r2, [sp, #332]	; 0x14c
    vfr.TextColor = green;
 8000b70:	9157      	str	r1, [sp, #348]	; 0x15c
    vfr.Thickness = 1;
 8000b72:	f88d 5148 	strb.w	r5, [sp, #328]	; 0x148
    vfr.WindowColor = white;
 8000b76:	9056      	str	r0, [sp, #344]	; 0x158


	pvg.X1 = 200;
 8000b78:	f8cd 8104 	str.w	r8, [sp, #260]	; 0x104
	pvg.X2 = 400;
 8000b7c:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8000b80:	9642      	str	r6, [sp, #264]	; 0x108
	pvg.Y1 = 70;
 8000b82:	f04f 0846 	mov.w	r8, #70	; 0x46
 8000b86:	f8cd 810c 	str.w	r8, [sp, #268]	; 0x10c
	pvg.Y2 = 90;
 8000b8a:	265a      	movs	r6, #90	; 0x5a
 8000b8c:	9644      	str	r6, [sp, #272]	; 0x110
	pvg.StartValue = 0;
 8000b8e:	9445      	str	r4, [sp, #276]	; 0x114
	pvg.StopValue = 10;
 8000b90:	f8cd e118 	str.w	lr, [sp, #280]	; 0x118
	pvg.CurrentValue = 6;
 8000b94:	2606      	movs	r6, #6
 8000b96:	9647      	str	r6, [sp, #284]	; 0x11c
	pvg.Thickness = 1;
 8000b98:	f88d 5130 	strb.w	r5, [sp, #304]	; 0x130
	pvg.FillColor = black;
 8000b9c:	9449      	str	r4, [sp, #292]	; 0x124
	pvg.FrameColor = green;
 8000b9e:	9148      	str	r1, [sp, #288]	; 0x120
	pvg.BarColorC = red;
 8000ba0:	924b      	str	r2, [sp, #300]	; 0x12c
	pvg.BarColorH = blue;
 8000ba2:	934a      	str	r3, [sp, #296]	; 0x128
	pvg.Orientation = Horisontal;
 8000ba4:	f88d 7131 	strb.w	r7, [sp, #305]	; 0x131


	rb.BackColor = blue;
 8000ba8:	933e      	str	r3, [sp, #248]	; 0xf8
	rb.Checked = 1;
 8000baa:	f88d 5101 	strb.w	r5, [sp, #257]	; 0x101
	rb.Radius = 5;
 8000bae:	2605      	movs	r6, #5
 8000bb0:	963b      	str	r6, [sp, #236]	; 0xec
	rb.TextColor = white;
 8000bb2:	903f      	str	r0, [sp, #252]	; 0xfc
	rb.X = 25;
 8000bb4:	2619      	movs	r6, #25
 8000bb6:	9639      	str	r6, [sp, #228]	; 0xe4
	rb.Y = 50;
 8000bb8:	2632      	movs	r6, #50	; 0x32
 8000bba:	963a      	str	r6, [sp, #232]	; 0xe8
	rb.Transp_key = 0;
 8000bbc:	f88d 4100 	strb.w	r4, [sp, #256]	; 0x100
	rb.ExCirColor = green;
 8000bc0:	913c      	str	r1, [sp, #240]	; 0xf0
	rb.InCirColor = blue;
 8000bc2:	933d      	str	r3, [sp, #244]	; 0xf4
	rb.Unvisible = 1;
 8000bc4:	f88d 5103 	strb.w	r5, [sp, #259]	; 0x103
 8000bc8:	e010      	b.n	8000bec <MainFunc+0x33c>
 8000bca:	bf00      	nop
 8000bcc:	2003fc3c 	.word	0x2003fc3c
 8000bd0:	2000003c 	.word	0x2000003c
 8000bd4:	2003fcd8 	.word	0x2003fcd8
 8000bd8:	00ffff00 	.word	0x00ffff00
 8000bdc:	003333ff 	.word	0x003333ff
 8000be0:	00808080 	.word	0x00808080
 8000be4:	00c0c0c0 	.word	0x00c0c0c0
 8000be8:	009999ff 	.word	0x009999ff

	gr.FillColor = white;
 8000bec:	902e      	str	r0, [sp, #184]	; 0xb8
	gr.FrameColor = green;
 8000bee:	912f      	str	r1, [sp, #188]	; 0xbc
	gr.LinesColor = red;
 8000bf0:	9231      	str	r2, [sp, #196]	; 0xc4
	gr.StepX = 1;
 8000bf2:	9532      	str	r5, [sp, #200]	; 0xc8
	gr.StepY = 10;
 8000bf4:	f8cd e0cc 	str.w	lr, [sp, #204]	; 0xcc
	gr.X1 = 1;
 8000bf8:	952a      	str	r5, [sp, #168]	; 0xa8
	gr.X2 = 480;
 8000bfa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bfe:	932b      	str	r3, [sp, #172]	; 0xac
	gr.XMax = 10;
 8000c00:	f8cd e0d0 	str.w	lr, [sp, #208]	; 0xd0
	gr.XMin = 0;
 8000c04:	9435      	str	r4, [sp, #212]	; 0xd4
	gr.Y1 = 1;
 8000c06:	952c      	str	r5, [sp, #176]	; 0xb0
	gr.Y2 = 272;
 8000c08:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000c0c:	932d      	str	r3, [sp, #180]	; 0xb4
	gr.YMax = 100;
 8000c0e:	2364      	movs	r3, #100	; 0x64
 8000c10:	9336      	str	r3, [sp, #216]	; 0xd8
	gr.YMin = 0;
 8000c12:	9437      	str	r4, [sp, #220]	; 0xdc
	gr.Unvisible = 0;
 8000c14:	f88d 40e0 	strb.w	r4, [sp, #224]	; 0xe0
	gr.Thickness = 2;
 8000c18:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0

	grL.LineColor = black;
 8000c1c:	9428      	str	r4, [sp, #160]	; 0xa0
	grL.Points_count = 10;
 8000c1e:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
	grL.Thickness = 2;
 8000c22:	f88d c0a4 	strb.w	ip, [sp, #164]	; 0xa4


    RTB.Y1 = 1;
 8000c26:	9520      	str	r5, [sp, #128]	; 0x80
    RTB.Y2 = 40;
 8000c28:	2328      	movs	r3, #40	; 0x28
 8000c2a:	9321      	str	r3, [sp, #132]	; 0x84
    RTB.Thickness = 2;
 8000c2c:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    RTB.FrameColor = white;
 8000c30:	9023      	str	r0, [sp, #140]	; 0x8c
    RTB.FillColor = black;
 8000c32:	9424      	str	r4, [sp, #144]	; 0x90
    RTB.TextColor = green;
 8000c34:	9125      	str	r1, [sp, #148]	; 0x94




     char S[] = {"wwwWWWW\nPrivet Iulia!! Davai pisi diplomnuiu rabotu, a to budesh aiaiai\n123456789\nQWERTYUIOP{}ASDFGHJKL:ZXCVBNM<>?"};
 8000c36:	2273      	movs	r2, #115	; 0x73
 8000c38:	490f      	ldr	r1, [pc, #60]	; (8000c78 <MainFunc+0x3c8>)
 8000c3a:	a801      	add	r0, sp, #4
 8000c3c:	f003 fb80 	bl	8004340 <memcpy>

    uint16 i = 0;
 8000c40:	e011      	b.n	8000c66 <MainFunc+0x3b6>
//		    LCD_HGradient(&hgr);
//		    LCD_DualHGradient(&dhgr);
//		    LCD_DualVGradient(&dvgr);
//		    LCD_Label(&lb, "Hello!");
//		    LCD_Button(&bt, "Butt1");
		    LCD_RichTextBox(&RTB, S);
 8000c42:	a901      	add	r1, sp, #4
 8000c44:	a81e      	add	r0, sp, #120	; 0x78
 8000c46:	f7ff fdb2 	bl	80007ae <LCD_RichTextBox>
		    HAL_Delay(300);
 8000c4a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c4e:	f000 ff15 	bl	8001a7c <HAL_Delay>

		    RTB.X2+=1;
 8000c52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000c54:	3301      	adds	r3, #1
 8000c56:	931f      	str	r3, [sp, #124]	; 0x7c
		    RTB.Y2+=1;
 8000c58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	9321      	str	r3, [sp, #132]	; 0x84
		for(i = 0; i < 220; i++)
 8000c5e:	3401      	adds	r4, #1
 8000c60:	b2a4      	uxth	r4, r4
 8000c62:	2cdb      	cmp	r4, #219	; 0xdb
 8000c64:	d9ed      	bls.n	8000c42 <MainFunc+0x392>
		RTB.X1 = 10;
 8000c66:	230a      	movs	r3, #10
 8000c68:	931e      	str	r3, [sp, #120]	; 0x78
		RTB.X2 = 20;
 8000c6a:	2314      	movs	r3, #20
 8000c6c:	931f      	str	r3, [sp, #124]	; 0x7c
		RTB.Y2 = 40;
 8000c6e:	2328      	movs	r3, #40	; 0x28
 8000c70:	9321      	str	r3, [sp, #132]	; 0x84
		for(i = 0; i < 220; i++)
 8000c72:	2400      	movs	r4, #0
 8000c74:	e7f5      	b.n	8000c62 <MainFunc+0x3b2>
 8000c76:	bf00      	nop
 8000c78:	08004384 	.word	0x08004384

08000c7c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000c7c:	b510      	push	{r4, lr}
 8000c7e:	b084      	sub	sp, #16
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c80:	2400      	movs	r4, #0
 8000c82:	9400      	str	r4, [sp, #0]
 8000c84:	9401      	str	r4, [sp, #4]
 8000c86:	9402      	str	r4, [sp, #8]
 8000c88:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c8a:	f000 ff61 	bl	8001b50 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	f88d 3000 	strb.w	r3, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c94:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x20000004;
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <MPU_Config+0x54>)
 8000c9a:	9201      	str	r2, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000c9c:	2211      	movs	r2, #17
 8000c9e:	f88d 2008 	strb.w	r2, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000ca2:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ca6:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000caa:	2203      	movs	r2, #3
 8000cac:	f88d 200b 	strb.w	r2, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000cb0:	f88d 400c 	strb.w	r4, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000cb4:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000cb8:	f88d 300e 	strb.w	r3, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000cbc:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cc0:	4668      	mov	r0, sp
 8000cc2:	f000 ff63 	bl	8001b8c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000cc6:	2004      	movs	r0, #4
 8000cc8:	f000 ff50 	bl	8001b6c <HAL_MPU_Enable>

}
 8000ccc:	b004      	add	sp, #16
 8000cce:	bd10      	pop	{r4, pc}
 8000cd0:	20000004 	.word	0x20000004

08000cd4 <MX_GPIO_Init>:
{
 8000cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cd8:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	2400      	movs	r4, #0
 8000cdc:	940b      	str	r4, [sp, #44]	; 0x2c
 8000cde:	940c      	str	r4, [sp, #48]	; 0x30
 8000ce0:	940d      	str	r4, [sp, #52]	; 0x34
 8000ce2:	940e      	str	r4, [sp, #56]	; 0x38
 8000ce4:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ce6:	4baa      	ldr	r3, [pc, #680]	; (8000f90 <MX_GPIO_Init+0x2bc>)
 8000ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cea:	f042 0210 	orr.w	r2, r2, #16
 8000cee:	631a      	str	r2, [r3, #48]	; 0x30
 8000cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cf2:	f002 0210 	and.w	r2, r2, #16
 8000cf6:	9200      	str	r2, [sp, #0]
 8000cf8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d00:	631a      	str	r2, [r3, #48]	; 0x30
 8000d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d04:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000d08:	9201      	str	r2, [sp, #4]
 8000d0a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d0e:	f042 0202 	orr.w	r2, r2, #2
 8000d12:	631a      	str	r2, [r3, #48]	; 0x30
 8000d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d16:	f002 0202 	and.w	r2, r2, #2
 8000d1a:	9202      	str	r2, [sp, #8]
 8000d1c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d20:	f042 0208 	orr.w	r2, r2, #8
 8000d24:	631a      	str	r2, [r3, #48]	; 0x30
 8000d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d28:	f002 0208 	and.w	r2, r2, #8
 8000d2c:	9203      	str	r2, [sp, #12]
 8000d2e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d32:	f042 0204 	orr.w	r2, r2, #4
 8000d36:	631a      	str	r2, [r3, #48]	; 0x30
 8000d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d3a:	f002 0204 	and.w	r2, r2, #4
 8000d3e:	9204      	str	r2, [sp, #16]
 8000d40:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d44:	f042 0201 	orr.w	r2, r2, #1
 8000d48:	631a      	str	r2, [r3, #48]	; 0x30
 8000d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d4c:	f002 0201 	and.w	r2, r2, #1
 8000d50:	9205      	str	r2, [sp, #20]
 8000d52:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d5a:	631a      	str	r2, [r3, #48]	; 0x30
 8000d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d5e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000d62:	9206      	str	r2, [sp, #24]
 8000d64:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d6c:	631a      	str	r2, [r3, #48]	; 0x30
 8000d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d70:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000d74:	9207      	str	r2, [sp, #28]
 8000d76:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d7e:	631a      	str	r2, [r3, #48]	; 0x30
 8000d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d82:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000d86:	9208      	str	r2, [sp, #32]
 8000d88:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d8c:	f042 0220 	orr.w	r2, r2, #32
 8000d90:	631a      	str	r2, [r3, #48]	; 0x30
 8000d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d94:	f002 0220 	and.w	r2, r2, #32
 8000d98:	9209      	str	r2, [sp, #36]	; 0x24
 8000d9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000da2:	631a      	str	r2, [r3, #48]	; 0x30
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000daa:	930a      	str	r3, [sp, #40]	; 0x28
 8000dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000dae:	2201      	movs	r2, #1
 8000db0:	2120      	movs	r1, #32
 8000db2:	4878      	ldr	r0, [pc, #480]	; (8000f94 <MX_GPIO_Init+0x2c0>)
 8000db4:	f001 f93c 	bl	8002030 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8000db8:	4622      	mov	r2, r4
 8000dba:	210c      	movs	r1, #12
 8000dbc:	4876      	ldr	r0, [pc, #472]	; (8000f98 <MX_GPIO_Init+0x2c4>)
 8000dbe:	f001 f937 	bl	8002030 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2108      	movs	r1, #8
 8000dc6:	4875      	ldr	r0, [pc, #468]	; (8000f9c <MX_GPIO_Init+0x2c8>)
 8000dc8:	f001 f932 	bl	8002030 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd2:	4871      	ldr	r0, [pc, #452]	; (8000f98 <MX_GPIO_Init+0x2c4>)
 8000dd4:	f001 f92c 	bl	8002030 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000dd8:	4622      	mov	r2, r4
 8000dda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dde:	4870      	ldr	r0, [pc, #448]	; (8000fa0 <MX_GPIO_Init+0x2cc>)
 8000de0:	f001 f926 	bl	8002030 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000de4:	4622      	mov	r2, r4
 8000de6:	21c8      	movs	r1, #200	; 0xc8
 8000de8:	486e      	ldr	r0, [pc, #440]	; (8000fa4 <MX_GPIO_Init+0x2d0>)
 8000dea:	f001 f921 	bl	8002030 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000dee:	2308      	movs	r3, #8
 8000df0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8000fb0 <MX_GPIO_Init+0x2dc>
 8000dfa:	a90b      	add	r1, sp, #44	; 0x2c
 8000dfc:	4648      	mov	r0, r9
 8000dfe:	f001 f825 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000e02:	2304      	movs	r3, #4
 8000e04:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2502      	movs	r5, #2
 8000e08:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	2603      	movs	r6, #3
 8000e0e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e10:	2309      	movs	r3, #9
 8000e12:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000e14:	a90b      	add	r1, sp, #44	; 0x2c
 8000e16:	4648      	mov	r0, r9
 8000e18:	f001 f818 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000e1c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000e20:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e28:	230b      	movs	r3, #11
 8000e2a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e2c:	a90b      	add	r1, sp, #44	; 0x2c
 8000e2e:	485d      	ldr	r0, [pc, #372]	; (8000fa4 <MX_GPIO_Init+0x2d0>)
 8000e30:	f001 f80c 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000e34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e38:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3a:	2312      	movs	r3, #18
 8000e3c:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e42:	2304      	movs	r3, #4
 8000e44:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e46:	f8df b16c 	ldr.w	fp, [pc, #364]	; 8000fb4 <MX_GPIO_Init+0x2e0>
 8000e4a:	a90b      	add	r1, sp, #44	; 0x2c
 8000e4c:	4658      	mov	r0, fp
 8000e4e:	f000 fffd 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000e52:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000e56:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e5e:	f04f 080a 	mov.w	r8, #10
 8000e62:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e66:	a90b      	add	r1, sp, #44	; 0x2c
 8000e68:	4658      	mov	r0, fp
 8000e6a:	f000 ffef 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000e6e:	2310      	movs	r3, #16
 8000e70:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e78:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	a90b      	add	r1, sp, #44	; 0x2c
 8000e7c:	4658      	mov	r0, fp
 8000e7e:	f000 ffe5 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000e8c:	2308      	movs	r3, #8
 8000e8e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000e90:	a90b      	add	r1, sp, #44	; 0x2c
 8000e92:	4840      	ldr	r0, [pc, #256]	; (8000f94 <MX_GPIO_Init+0x2c0>)
 8000e94:	f000 ffda 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000e98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e9c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ea4:	2701      	movs	r7, #1
 8000ea6:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8000fb8 <MX_GPIO_Init+0x2e4>
 8000eac:	a90b      	add	r1, sp, #44	; 0x2c
 8000eae:	4650      	mov	r0, sl
 8000eb0:	f000 ffcc 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000eb4:	2360      	movs	r3, #96	; 0x60
 8000eb6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ebe:	230d      	movs	r3, #13
 8000ec0:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ec2:	a90b      	add	r1, sp, #44	; 0x2c
 8000ec4:	4648      	mov	r0, r9
 8000ec6:	f000 ffc1 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ed4:	2307      	movs	r3, #7
 8000ed6:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	a90b      	add	r1, sp, #44	; 0x2c
 8000eda:	4658      	mov	r0, fp
 8000edc:	f000 ffb6 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000ee0:	2340      	movs	r3, #64	; 0x40
 8000ee2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee8:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000eea:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000eee:	a90b      	add	r1, sp, #44	; 0x2c
 8000ef0:	4658      	mov	r0, fp
 8000ef2:	f000 ffab 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efa:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efc:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f00:	a90b      	add	r1, sp, #44	; 0x2c
 8000f02:	4829      	ldr	r0, [pc, #164]	; (8000fa8 <MX_GPIO_Init+0x2d4>)
 8000f04:	f000 ffa2 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000f08:	2340      	movs	r3, #64	; 0x40
 8000f0a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f0c:	4b27      	ldr	r3, [pc, #156]	; (8000fac <MX_GPIO_Init+0x2d8>)
 8000f0e:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000f12:	a90b      	add	r1, sp, #44	; 0x2c
 8000f14:	481f      	ldr	r0, [pc, #124]	; (8000f94 <MX_GPIO_Init+0x2c0>)
 8000f16:	f000 ff99 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000f1a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f1e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f26:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	a90b      	add	r1, sp, #44	; 0x2c
 8000f2c:	4650      	mov	r0, sl
 8000f2e:	f000 ff8d 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000f32:	23f0      	movs	r3, #240	; 0xf0
 8000f34:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000f3c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f40:	a90b      	add	r1, sp, #44	; 0x2c
 8000f42:	4815      	ldr	r0, [pc, #84]	; (8000f98 <MX_GPIO_Init+0x2c4>)
 8000f44:	f000 ff82 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f4c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000f54:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000f58:	a90b      	add	r1, sp, #44	; 0x2c
 8000f5a:	4812      	ldr	r0, [pc, #72]	; (8000fa4 <MX_GPIO_Init+0x2d0>)
 8000f5c:	f000 ff76 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f60:	2320      	movs	r3, #32
 8000f62:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f64:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	a90b      	add	r1, sp, #44	; 0x2c
 8000f6c:	4809      	ldr	r0, [pc, #36]	; (8000f94 <MX_GPIO_Init+0x2c0>)
 8000f6e:	f000 ff6d 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000f72:	2208      	movs	r2, #8
 8000f74:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f7c:	220d      	movs	r2, #13
 8000f7e:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000f80:	a90b      	add	r1, sp, #44	; 0x2c
 8000f82:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_GPIO_Init+0x2c0>)
 8000f84:	f000 ff62 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000f88:	f241 030c 	movw	r3, #4108	; 0x100c
 8000f8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8000f8e:	e015      	b.n	8000fbc <MX_GPIO_Init+0x2e8>
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020c00 	.word	0x40020c00
 8000f98:	40022000 	.word	0x40022000
 8000f9c:	40022800 	.word	0x40022800
 8000fa0:	40021c00 	.word	0x40021c00
 8000fa4:	40021800 	.word	0x40021800
 8000fa8:	40022400 	.word	0x40022400
 8000fac:	10120000 	.word	0x10120000
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40020400 	.word	0x40020400
 8000fb8:	40020000 	.word	0x40020000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fc2:	a90b      	add	r1, sp, #44	; 0x2c
 8000fc4:	488e      	ldr	r0, [pc, #568]	; (8001200 <MX_GPIO_Init+0x52c>)
 8000fc6:	f000 ff41 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000fca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fce:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd0:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f5a9 6900 	sub.w	r9, r9, #2048	; 0x800
 8000fd8:	a90b      	add	r1, sp, #44	; 0x2c
 8000fda:	4648      	mov	r0, r9
 8000fdc:	f000 ff36 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000fea:	a90b      	add	r1, sp, #44	; 0x2c
 8000fec:	4885      	ldr	r0, [pc, #532]	; (8001204 <MX_GPIO_Init+0x530>)
 8000fee:	f000 ff2d 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff6:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ffe:	220d      	movs	r2, #13
 8001000:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001002:	a90b      	add	r1, sp, #44	; 0x2c
 8001004:	4880      	ldr	r0, [pc, #512]	; (8001208 <MX_GPIO_Init+0x534>)
 8001006:	f000 ff21 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800100a:	2210      	movs	r2, #16
 800100c:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001012:	a90b      	add	r1, sp, #44	; 0x2c
 8001014:	487d      	ldr	r0, [pc, #500]	; (800120c <MX_GPIO_Init+0x538>)
 8001016:	f000 ff19 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800101a:	f248 0304 	movw	r3, #32772	; 0x8004
 800101e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001020:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001024:	a90b      	add	r1, sp, #44	; 0x2c
 8001026:	487a      	ldr	r0, [pc, #488]	; (8001210 <MX_GPIO_Init+0x53c>)
 8001028:	f000 ff10 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800102c:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001034:	2205      	movs	r2, #5
 8001036:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001038:	a90b      	add	r1, sp, #44	; 0x2c
 800103a:	4871      	ldr	r0, [pc, #452]	; (8001200 <MX_GPIO_Init+0x52c>)
 800103c:	f000 ff06 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001040:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001044:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001046:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800104c:	a90b      	add	r1, sp, #44	; 0x2c
 800104e:	4870      	ldr	r0, [pc, #448]	; (8001210 <MX_GPIO_Init+0x53c>)
 8001050:	f000 fefc 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001054:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001058:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001060:	220d      	movs	r2, #13
 8001062:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001064:	a90b      	add	r1, sp, #44	; 0x2c
 8001066:	486a      	ldr	r0, [pc, #424]	; (8001210 <MX_GPIO_Init+0x53c>)
 8001068:	f000 fef0 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800106c:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001074:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001076:	a90b      	add	r1, sp, #44	; 0x2c
 8001078:	4861      	ldr	r0, [pc, #388]	; (8001200 <MX_GPIO_Init+0x52c>)
 800107a:	f000 fee7 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 800107e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001082:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800108a:	2207      	movs	r2, #7
 800108c:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800108e:	a90b      	add	r1, sp, #44	; 0x2c
 8001090:	4650      	mov	r0, sl
 8001092:	f000 fedb 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001096:	f44f 7380 	mov.w	r3, #256	; 0x100
 800109a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010a2:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80010a4:	a90b      	add	r1, sp, #44	; 0x2c
 80010a6:	4650      	mov	r0, sl
 80010a8:	f000 fed0 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80010ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010b0:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010b2:	4b58      	ldr	r3, [pc, #352]	; (8001214 <MX_GPIO_Init+0x540>)
 80010b4:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80010b8:	a90b      	add	r1, sp, #44	; 0x2c
 80010ba:	4851      	ldr	r0, [pc, #324]	; (8001200 <MX_GPIO_Init+0x52c>)
 80010bc:	f000 fec6 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80010c0:	23c0      	movs	r3, #192	; 0xc0
 80010c2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80010ca:	2308      	movs	r3, #8
 80010cc:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ce:	a90b      	add	r1, sp, #44	; 0x2c
 80010d0:	4648      	mov	r0, r9
 80010d2:	f000 febb 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80010d6:	2310      	movs	r3, #16
 80010d8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010e0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80010e4:	a90b      	add	r1, sp, #44	; 0x2c
 80010e6:	484a      	ldr	r0, [pc, #296]	; (8001210 <MX_GPIO_Init+0x53c>)
 80010e8:	f000 feb0 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80010ec:	23c8      	movs	r3, #200	; 0xc8
 80010ee:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010f6:	a90b      	add	r1, sp, #44	; 0x2c
 80010f8:	4843      	ldr	r0, [pc, #268]	; (8001208 <MX_GPIO_Init+0x534>)
 80010fa:	f000 fea7 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80010fe:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001102:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001104:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001108:	a90b      	add	r1, sp, #44	; 0x2c
 800110a:	4843      	ldr	r0, [pc, #268]	; (8001218 <MX_GPIO_Init+0x544>)
 800110c:	f000 fe9e 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001110:	2305      	movs	r3, #5
 8001112:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001118:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800111a:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111e:	a90b      	add	r1, sp, #44	; 0x2c
 8001120:	4648      	mov	r0, r9
 8001122:	f000 fe93 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001126:	2332      	movs	r3, #50	; 0x32
 8001128:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001130:	230b      	movs	r3, #11
 8001132:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001134:	a90b      	add	r1, sp, #44	; 0x2c
 8001136:	4648      	mov	r0, r9
 8001138:	f000 fe88 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800113c:	2304      	movs	r3, #4
 800113e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001146:	2309      	movs	r3, #9
 8001148:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114a:	a90b      	add	r1, sp, #44	; 0x2c
 800114c:	4658      	mov	r0, fp
 800114e:	f000 fe7d 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001152:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001156:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800115e:	2309      	movs	r3, #9
 8001160:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001162:	a90b      	add	r1, sp, #44	; 0x2c
 8001164:	4829      	ldr	r0, [pc, #164]	; (800120c <MX_GPIO_Init+0x538>)
 8001166:	f000 fe71 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800116a:	2304      	movs	r3, #4
 800116c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001172:	a90b      	add	r1, sp, #44	; 0x2c
 8001174:	4824      	ldr	r0, [pc, #144]	; (8001208 <MX_GPIO_Init+0x534>)
 8001176:	f000 fe69 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800117a:	2386      	movs	r3, #134	; 0x86
 800117c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001184:	230b      	movs	r3, #11
 8001186:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	a90b      	add	r1, sp, #44	; 0x2c
 800118a:	4650      	mov	r0, sl
 800118c:	f000 fe5e 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001190:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001192:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001196:	a90b      	add	r1, sp, #44	; 0x2c
 8001198:	4650      	mov	r0, sl
 800119a:	f000 fe57 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800119e:	2350      	movs	r3, #80	; 0x50
 80011a0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011a8:	230d      	movs	r3, #13
 80011aa:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	a90b      	add	r1, sp, #44	; 0x2c
 80011ae:	4650      	mov	r0, sl
 80011b0:	f000 fe4c 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80011b4:	2328      	movs	r3, #40	; 0x28
 80011b6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80011be:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c2:	a90b      	add	r1, sp, #44	; 0x2c
 80011c4:	4650      	mov	r0, sl
 80011c6:	f000 fe41 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80011ca:	2340      	movs	r3, #64	; 0x40
 80011cc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80011d4:	2309      	movs	r3, #9
 80011d6:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80011d8:	a90b      	add	r1, sp, #44	; 0x2c
 80011da:	480d      	ldr	r0, [pc, #52]	; (8001210 <MX_GPIO_Init+0x53c>)
 80011dc:	f000 fe36 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80011e0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80011e4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011ec:	2305      	movs	r3, #5
 80011ee:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	a90b      	add	r1, sp, #44	; 0x2c
 80011f2:	4658      	mov	r0, fp
 80011f4:	f000 fe2a 	bl	8001e4c <HAL_GPIO_Init>
}
 80011f8:	b011      	add	sp, #68	; 0x44
 80011fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011fe:	bf00      	nop
 8001200:	40022000 	.word	0x40022000
 8001204:	40022800 	.word	0x40022800
 8001208:	40021800 	.word	0x40021800
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40021c00 	.word	0x40021c00
 8001214:	10120000 	.word	0x10120000
 8001218:	40021400 	.word	0x40021400

0800121c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800121c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800121e:	6802      	ldr	r2, [r0, #0]
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001222:	429a      	cmp	r2, r3
 8001224:	d000      	beq.n	8001228 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001226:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8001228:	f000 fc16 	bl	8001a58 <HAL_IncTick>
}
 800122c:	e7fb      	b.n	8001226 <HAL_TIM_PeriodElapsedCallback+0xa>
 800122e:	bf00      	nop
 8001230:	40001000 	.word	0x40001000

08001234 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001234:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001236:	e7fe      	b.n	8001236 <Error_Handler+0x2>

08001238 <MX_DMA2D_Init>:
{
 8001238:	b508      	push	{r3, lr}
  hdma2d.Instance = DMA2D;
 800123a:	480c      	ldr	r0, [pc, #48]	; (800126c <MX_DMA2D_Init+0x34>)
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_DMA2D_Init+0x38>)
 800123e:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001240:	2300      	movs	r3, #0
 8001242:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001244:	2202      	movs	r2, #2
 8001246:	6082      	str	r2, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8001248:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800124a:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800124c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800124e:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001250:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001252:	f000 fccb 	bl	8001bec <HAL_DMA2D_Init>
 8001256:	b928      	cbnz	r0, 8001264 <MX_DMA2D_Init+0x2c>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001258:	2101      	movs	r1, #1
 800125a:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_DMA2D_Init+0x34>)
 800125c:	f000 fd94 	bl	8001d88 <HAL_DMA2D_ConfigLayer>
 8001260:	b910      	cbnz	r0, 8001268 <MX_DMA2D_Init+0x30>
}
 8001262:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001264:	f7ff ffe6 	bl	8001234 <Error_Handler>
    Error_Handler();
 8001268:	f7ff ffe4 	bl	8001234 <Error_Handler>
 800126c:	2003fc4c 	.word	0x2003fc4c
 8001270:	4002b000 	.word	0x4002b000

08001274 <MX_FMC_Init>:
{
 8001274:	b500      	push	{lr}
 8001276:	b089      	sub	sp, #36	; 0x24
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001278:	2300      	movs	r3, #0
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	9302      	str	r3, [sp, #8]
 800127e:	9303      	str	r3, [sp, #12]
 8001280:	9304      	str	r3, [sp, #16]
 8001282:	9305      	str	r3, [sp, #20]
 8001284:	9306      	str	r3, [sp, #24]
 8001286:	9307      	str	r3, [sp, #28]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001288:	4813      	ldr	r0, [pc, #76]	; (80012d8 <MX_FMC_Init+0x64>)
 800128a:	4a14      	ldr	r2, [pc, #80]	; (80012dc <MX_FMC_Init+0x68>)
 800128c:	6002      	str	r2, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800128e:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001290:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001292:	2104      	movs	r1, #4
 8001294:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001296:	2210      	movs	r2, #16
 8001298:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800129a:	2240      	movs	r2, #64	; 0x40
 800129c:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800129e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80012a2:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80012a4:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80012a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012aa:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80012ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012b0:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80012b2:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80012b8:	2206      	movs	r2, #6
 80012ba:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 80012bc:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
 80012be:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80012c0:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 2;
 80012c2:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 80012c4:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80012c6:	4469      	add	r1, sp
 80012c8:	f002 fd91 	bl	8003dee <HAL_SDRAM_Init>
 80012cc:	b910      	cbnz	r0, 80012d4 <MX_FMC_Init+0x60>
}
 80012ce:	b009      	add	sp, #36	; 0x24
 80012d0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 80012d4:	f7ff ffae 	bl	8001234 <Error_Handler>
 80012d8:	2003fda0 	.word	0x2003fda0
 80012dc:	a0000140 	.word	0xa0000140

080012e0 <MX_I2C3_Init>:
{
 80012e0:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 80012e2:	4811      	ldr	r0, [pc, #68]	; (8001328 <MX_I2C3_Init+0x48>)
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_I2C3_Init+0x4c>)
 80012e6:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_I2C3_Init+0x50>)
 80012ea:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 224;
 80012ec:	23e0      	movs	r3, #224	; 0xe0
 80012ee:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012f0:	2301      	movs	r3, #1
 80012f2:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80012f8:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012fa:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012fc:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012fe:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001300:	f001 f80c 	bl	800231c <HAL_I2C_Init>
 8001304:	b950      	cbnz	r0, 800131c <MX_I2C3_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001306:	2100      	movs	r1, #0
 8001308:	4807      	ldr	r0, [pc, #28]	; (8001328 <MX_I2C3_Init+0x48>)
 800130a:	f001 fa13 	bl	8002734 <HAL_I2CEx_ConfigAnalogFilter>
 800130e:	b938      	cbnz	r0, 8001320 <MX_I2C3_Init+0x40>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001310:	2100      	movs	r1, #0
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_I2C3_Init+0x48>)
 8001314:	f001 fa3c 	bl	8002790 <HAL_I2CEx_ConfigDigitalFilter>
 8001318:	b920      	cbnz	r0, 8001324 <MX_I2C3_Init+0x44>
}
 800131a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800131c:	f7ff ff8a 	bl	8001234 <Error_Handler>
    Error_Handler();
 8001320:	f7ff ff88 	bl	8001234 <Error_Handler>
    Error_Handler();
 8001324:	f7ff ff86 	bl	8001234 <Error_Handler>
 8001328:	2003fc8c 	.word	0x2003fc8c
 800132c:	40005c00 	.word	0x40005c00
 8001330:	00c0eaff 	.word	0x00c0eaff

08001334 <MX_LTDC_Init>:
{
 8001334:	b500      	push	{lr}
 8001336:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001338:	2234      	movs	r2, #52	; 0x34
 800133a:	2100      	movs	r1, #0
 800133c:	a801      	add	r0, sp, #4
 800133e:	f003 f80d 	bl	800435c <memset>
  hltdc.Instance = LTDC;
 8001342:	4826      	ldr	r0, [pc, #152]	; (80013dc <MX_LTDC_Init+0xa8>)
 8001344:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <MX_LTDC_Init+0xac>)
 8001346:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001348:	2300      	movs	r3, #0
 800134a:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800134c:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800134e:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001350:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 40;
 8001352:	2228      	movs	r2, #40	; 0x28
 8001354:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 9;
 8001356:	2209      	movs	r2, #9
 8001358:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800135a:	2235      	movs	r2, #53	; 0x35
 800135c:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800135e:	220b      	movs	r2, #11
 8001360:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001362:	f240 2215 	movw	r2, #533	; 0x215
 8001366:	6242      	str	r2, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001368:	f240 121b 	movw	r2, #283	; 0x11b
 800136c:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800136e:	f240 2235 	movw	r2, #565	; 0x235
 8001372:	62c2      	str	r2, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001374:	f240 121d 	movw	r2, #285	; 0x11d
 8001378:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800137a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800137e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001382:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001386:	f001 fb0b 	bl	80029a0 <HAL_LTDC_Init>
 800138a:	bb18      	cbnz	r0, 80013d4 <MX_LTDC_Init+0xa0>
  pLayerCfg.WindowX0 = 0;
 800138c:	2200      	movs	r2, #0
 800138e:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 8001390:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001394:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8001396:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 8001398:	f44f 7388 	mov.w	r3, #272	; 0x110
 800139c:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800139e:	2002      	movs	r0, #2
 80013a0:	9005      	str	r0, [sp, #20]
  pLayerCfg.Alpha = 255;
 80013a2:	20ff      	movs	r0, #255	; 0xff
 80013a4:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 80013a6:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80013a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80013ac:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80013ae:	2005      	movs	r0, #5
 80013b0:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80013b2:	920a      	str	r2, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80013b4:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80013b6:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80013b8:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80013bc:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80013c0:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80013c4:	a901      	add	r1, sp, #4
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_LTDC_Init+0xa8>)
 80013c8:	f001 fbd4 	bl	8002b74 <HAL_LTDC_ConfigLayer>
 80013cc:	b920      	cbnz	r0, 80013d8 <MX_LTDC_Init+0xa4>
}
 80013ce:	b00f      	add	sp, #60	; 0x3c
 80013d0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80013d4:	f7ff ff2e 	bl	8001234 <Error_Handler>
    Error_Handler();
 80013d8:	f7ff ff2c 	bl	8001234 <Error_Handler>
 80013dc:	2003fcd8 	.word	0x2003fcd8
 80013e0:	40016800 	.word	0x40016800

080013e4 <MX_RTC_Init>:
{
 80013e4:	b510      	push	{r4, lr}
 80013e6:	b092      	sub	sp, #72	; 0x48
  RTC_TimeTypeDef sTime = {0};
 80013e8:	2400      	movs	r4, #0
 80013ea:	940c      	str	r4, [sp, #48]	; 0x30
 80013ec:	940d      	str	r4, [sp, #52]	; 0x34
 80013ee:	940e      	str	r4, [sp, #56]	; 0x38
 80013f0:	940f      	str	r4, [sp, #60]	; 0x3c
 80013f2:	9410      	str	r4, [sp, #64]	; 0x40
 80013f4:	9411      	str	r4, [sp, #68]	; 0x44
  RTC_DateTypeDef sDate = {0};
 80013f6:	940b      	str	r4, [sp, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80013f8:	222c      	movs	r2, #44	; 0x2c
 80013fa:	4621      	mov	r1, r4
 80013fc:	4668      	mov	r0, sp
 80013fe:	f002 ffad 	bl	800435c <memset>
  hrtc.Instance = RTC;
 8001402:	4831      	ldr	r0, [pc, #196]	; (80014c8 <MX_RTC_Init+0xe4>)
 8001404:	4b31      	ldr	r3, [pc, #196]	; (80014cc <MX_RTC_Init+0xe8>)
 8001406:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001408:	6044      	str	r4, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 800140a:	237f      	movs	r3, #127	; 0x7f
 800140c:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 800140e:	23ff      	movs	r3, #255	; 0xff
 8001410:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001412:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001414:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001416:	6184      	str	r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001418:	f002 faac 	bl	8003974 <HAL_RTC_Init>
 800141c:	2800      	cmp	r0, #0
 800141e:	d147      	bne.n	80014b0 <MX_RTC_Init+0xcc>
  sTime.Hours = 0x0;
 8001420:	2300      	movs	r3, #0
 8001422:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001426:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  sTime.Seconds = 0x0;
 800142a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800142e:	9310      	str	r3, [sp, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001430:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001432:	2201      	movs	r2, #1
 8001434:	a90c      	add	r1, sp, #48	; 0x30
 8001436:	4824      	ldr	r0, [pc, #144]	; (80014c8 <MX_RTC_Init+0xe4>)
 8001438:	f002 fb0a 	bl	8003a50 <HAL_RTC_SetTime>
 800143c:	2800      	cmp	r0, #0
 800143e:	d139      	bne.n	80014b4 <MX_RTC_Init+0xd0>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001440:	2201      	movs	r2, #1
 8001442:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001446:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  sDate.Date = 0x1;
 800144a:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
  sDate.Year = 0x0;
 800144e:	2300      	movs	r3, #0
 8001450:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001454:	a90b      	add	r1, sp, #44	; 0x2c
 8001456:	481c      	ldr	r0, [pc, #112]	; (80014c8 <MX_RTC_Init+0xe4>)
 8001458:	f002 fb7a 	bl	8003b50 <HAL_RTC_SetDate>
 800145c:	bb60      	cbnz	r0, 80014b8 <MX_RTC_Init+0xd4>
  sAlarm.AlarmTime.Hours = 0x0;
 800145e:	2300      	movs	r3, #0
 8001460:	f88d 3000 	strb.w	r3, [sp]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001464:	f88d 3001 	strb.w	r3, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001468:	f88d 3002 	strb.w	r3, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800146c:	9301      	str	r3, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800146e:	9304      	str	r3, [sp, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001470:	9305      	str	r3, [sp, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001472:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001474:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001476:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001478:	2201      	movs	r2, #1
 800147a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800147e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001482:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001484:	4669      	mov	r1, sp
 8001486:	4810      	ldr	r0, [pc, #64]	; (80014c8 <MX_RTC_Init+0xe4>)
 8001488:	f002 fbd0 	bl	8003c2c <HAL_RTC_SetAlarm>
 800148c:	b9b0      	cbnz	r0, 80014bc <MX_RTC_Init+0xd8>
  sAlarm.Alarm = RTC_ALARM_B;
 800148e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001492:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001494:	2201      	movs	r2, #1
 8001496:	4669      	mov	r1, sp
 8001498:	480b      	ldr	r0, [pc, #44]	; (80014c8 <MX_RTC_Init+0xe4>)
 800149a:	f002 fbc7 	bl	8003c2c <HAL_RTC_SetAlarm>
 800149e:	b978      	cbnz	r0, 80014c0 <MX_RTC_Init+0xdc>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80014a0:	2202      	movs	r2, #2
 80014a2:	2100      	movs	r1, #0
 80014a4:	4808      	ldr	r0, [pc, #32]	; (80014c8 <MX_RTC_Init+0xe4>)
 80014a6:	f002 fc71 	bl	8003d8c <HAL_RTCEx_SetTimeStamp>
 80014aa:	b958      	cbnz	r0, 80014c4 <MX_RTC_Init+0xe0>
}
 80014ac:	b012      	add	sp, #72	; 0x48
 80014ae:	bd10      	pop	{r4, pc}
    Error_Handler();
 80014b0:	f7ff fec0 	bl	8001234 <Error_Handler>
    Error_Handler();
 80014b4:	f7ff febe 	bl	8001234 <Error_Handler>
    Error_Handler();
 80014b8:	f7ff febc 	bl	8001234 <Error_Handler>
    Error_Handler();
 80014bc:	f7ff feba 	bl	8001234 <Error_Handler>
    Error_Handler();
 80014c0:	f7ff feb8 	bl	8001234 <Error_Handler>
    Error_Handler();
 80014c4:	f7ff feb6 	bl	8001234 <Error_Handler>
 80014c8:	2003fd80 	.word	0x2003fd80
 80014cc:	40002800 	.word	0x40002800

080014d0 <SystemClock_Config>:
{
 80014d0:	b500      	push	{lr}
 80014d2:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d4:	2230      	movs	r2, #48	; 0x30
 80014d6:	2100      	movs	r1, #0
 80014d8:	a828      	add	r0, sp, #160	; 0xa0
 80014da:	f002 ff3f 	bl	800435c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014de:	2100      	movs	r1, #0
 80014e0:	9123      	str	r1, [sp, #140]	; 0x8c
 80014e2:	9124      	str	r1, [sp, #144]	; 0x90
 80014e4:	9125      	str	r1, [sp, #148]	; 0x94
 80014e6:	9126      	str	r1, [sp, #152]	; 0x98
 80014e8:	9127      	str	r1, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014ea:	2284      	movs	r2, #132	; 0x84
 80014ec:	a802      	add	r0, sp, #8
 80014ee:	f002 ff35 	bl	800435c <memset>
  HAL_PWR_EnableBkUpAccess();
 80014f2:	f001 fb95 	bl	8002c20 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	4b33      	ldr	r3, [pc, #204]	; (80015c4 <SystemClock_Config+0xf4>)
 80014f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800150a:	4b2f      	ldr	r3, [pc, #188]	; (80015c8 <SystemClock_Config+0xf8>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800151a:	9301      	str	r3, [sp, #4]
 800151c:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800151e:	2309      	movs	r3, #9
 8001520:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001522:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001526:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001528:	2301      	movs	r3, #1
 800152a:	932d      	str	r3, [sp, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152c:	2302      	movs	r3, #2
 800152e:	932e      	str	r3, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001530:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001534:	922f      	str	r2, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001536:	2219      	movs	r2, #25
 8001538:	9230      	str	r2, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800153a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800153e:	9231      	str	r2, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001540:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001542:	2308      	movs	r3, #8
 8001544:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001546:	a828      	add	r0, sp, #160	; 0xa0
 8001548:	f001 fbb0 	bl	8002cac <HAL_RCC_OscConfig>
 800154c:	2800      	cmp	r0, #0
 800154e:	d131      	bne.n	80015b4 <SystemClock_Config+0xe4>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001550:	f001 fb6e 	bl	8002c30 <HAL_PWREx_EnableOverDrive>
 8001554:	2800      	cmp	r0, #0
 8001556:	d12f      	bne.n	80015b8 <SystemClock_Config+0xe8>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001558:	230f      	movs	r3, #15
 800155a:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155c:	2302      	movs	r3, #2
 800155e:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001564:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001568:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800156a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156e:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001570:	2106      	movs	r1, #6
 8001572:	a823      	add	r0, sp, #140	; 0x8c
 8001574:	f001 fe06 	bl	8003184 <HAL_RCC_ClockConfig>
 8001578:	bb00      	cbnz	r0, 80015bc <SystemClock_Config+0xec>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <SystemClock_Config+0xfc>)
 800157c:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 800157e:	2364      	movs	r3, #100	; 0x64
 8001580:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001582:	2302      	movs	r3, #2
 8001584:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001586:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001588:	2300      	movs	r3, #0
 800158a:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800158c:	2201      	movs	r2, #1
 800158e:	920c      	str	r2, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001590:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001594:	920d      	str	r2, [sp, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159a:	920e      	str	r2, [sp, #56]	; 0x38
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800159c:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800159e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015a2:	9221      	str	r2, [sp, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80015a4:	9322      	str	r3, [sp, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a6:	a802      	add	r0, sp, #8
 80015a8:	f001 fed6 	bl	8003358 <HAL_RCCEx_PeriphCLKConfig>
 80015ac:	b940      	cbnz	r0, 80015c0 <SystemClock_Config+0xf0>
}
 80015ae:	b035      	add	sp, #212	; 0xd4
 80015b0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80015b4:	f7ff fe3e 	bl	8001234 <Error_Handler>
    Error_Handler();
 80015b8:	f7ff fe3c 	bl	8001234 <Error_Handler>
    Error_Handler();
 80015bc:	f7ff fe3a 	bl	8001234 <Error_Handler>
    Error_Handler();
 80015c0:	f7ff fe38 	bl	8001234 <Error_Handler>
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40007000 	.word	0x40007000
 80015cc:	00a10028 	.word	0x00a10028

080015d0 <main>:
{
 80015d0:	b508      	push	{r3, lr}
  MPU_Config();
 80015d2:	f7ff fb53 	bl	8000c7c <MPU_Config>
  HAL_Init();
 80015d6:	f000 fa2d 	bl	8001a34 <HAL_Init>
  SystemClock_Config();
 80015da:	f7ff ff79 	bl	80014d0 <SystemClock_Config>
  HAL_Delay(500);
 80015de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015e2:	f000 fa4b 	bl	8001a7c <HAL_Delay>
  MX_GPIO_Init();
 80015e6:	f7ff fb75 	bl	8000cd4 <MX_GPIO_Init>
  MX_DMA2D_Init();
 80015ea:	f7ff fe25 	bl	8001238 <MX_DMA2D_Init>
  MX_FMC_Init();
 80015ee:	f7ff fe41 	bl	8001274 <MX_FMC_Init>
  MX_I2C3_Init();
 80015f2:	f7ff fe75 	bl	80012e0 <MX_I2C3_Init>
  MX_LTDC_Init();
 80015f6:	f7ff fe9d 	bl	8001334 <MX_LTDC_Init>
  MX_RTC_Init();
 80015fa:	f7ff fef3 	bl	80013e4 <MX_RTC_Init>
	  MainFunc ();
 80015fe:	f7ff f957 	bl	80008b0 <MainFunc>
  while (1)
 8001602:	e7fc      	b.n	80015fe <main+0x2e>

08001604 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001606:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001608:	2300      	movs	r3, #0
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	9302      	str	r3, [sp, #8]
 800160e:	9303      	str	r3, [sp, #12]
 8001610:	9304      	str	r3, [sp, #16]
 8001612:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8001614:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <HAL_FMC_MspInit+0xbc>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	b10b      	cbz	r3, 800161e <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800161a:	b007      	add	sp, #28
 800161c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 800161e:	4b28      	ldr	r3, [pc, #160]	; (80016c0 <HAL_FMC_MspInit+0xbc>)
 8001620:	2201      	movs	r2, #1
 8001622:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001624:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <HAL_FMC_MspInit+0xc0>)
 8001626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001628:	f042 0201 	orr.w	r2, r2, #1
 800162c:	639a      	str	r2, [r3, #56]	; 0x38
 800162e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001638:	f64f 7383 	movw	r3, #65411	; 0xff83
 800163c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2602      	movs	r6, #2
 8001640:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001642:	2503      	movs	r5, #3
 8001644:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001646:	240c      	movs	r4, #12
 8001648:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800164a:	a901      	add	r1, sp, #4
 800164c:	481e      	ldr	r0, [pc, #120]	; (80016c8 <HAL_FMC_MspInit+0xc4>)
 800164e:	f000 fbfd 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001652:	f248 1333 	movw	r3, #33075	; 0x8133
 8001656:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2700      	movs	r7, #0
 800165c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001660:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001662:	a901      	add	r1, sp, #4
 8001664:	4819      	ldr	r0, [pc, #100]	; (80016cc <HAL_FMC_MspInit+0xc8>)
 8001666:	f000 fbf1 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800166a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800166e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001674:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001676:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001678:	a901      	add	r1, sp, #4
 800167a:	4815      	ldr	r0, [pc, #84]	; (80016d0 <HAL_FMC_MspInit+0xcc>)
 800167c:	f000 fbe6 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001680:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001684:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800168c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800168e:	a901      	add	r1, sp, #4
 8001690:	4810      	ldr	r0, [pc, #64]	; (80016d4 <HAL_FMC_MspInit+0xd0>)
 8001692:	f000 fbdb 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001696:	2328      	movs	r3, #40	; 0x28
 8001698:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016a0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016a2:	a901      	add	r1, sp, #4
 80016a4:	480c      	ldr	r0, [pc, #48]	; (80016d8 <HAL_FMC_MspInit+0xd4>)
 80016a6:	f000 fbd1 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80016aa:	2308      	movs	r3, #8
 80016ac:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016b4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80016b6:	a901      	add	r1, sp, #4
 80016b8:	4808      	ldr	r0, [pc, #32]	; (80016dc <HAL_FMC_MspInit+0xd8>)
 80016ba:	f000 fbc7 	bl	8001e4c <HAL_GPIO_Init>
 80016be:	e7ac      	b.n	800161a <HAL_FMC_MspInit+0x16>
 80016c0:	2003fdd4 	.word	0x2003fdd4
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40021800 	.word	0x40021800
 80016d0:	40020c00 	.word	0x40020c00
 80016d4:	40021400 	.word	0x40021400
 80016d8:	40021c00 	.word	0x40021c00
 80016dc:	40020800 	.word	0x40020800

080016e0 <HAL_MspInit>:
{
 80016e0:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_MspInit+0x2c>)
 80016e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016ea:	641a      	str	r2, [r3, #64]	; 0x40
 80016ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ee:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80016f2:	9200      	str	r2, [sp, #0]
 80016f4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016fc:	645a      	str	r2, [r3, #68]	; 0x44
 80016fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001704:	9301      	str	r3, [sp, #4]
 8001706:	9b01      	ldr	r3, [sp, #4]
}
 8001708:	b002      	add	sp, #8
 800170a:	4770      	bx	lr
 800170c:	40023800 	.word	0x40023800

08001710 <HAL_DMA2D_MspInit>:
  if(hdma2d->Instance==DMA2D)
 8001710:	6802      	ldr	r2, [r0, #0]
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_DMA2D_MspInit+0x3c>)
 8001714:	429a      	cmp	r2, r3
 8001716:	d000      	beq.n	800171a <HAL_DMA2D_MspInit+0xa>
 8001718:	4770      	bx	lr
{
 800171a:	b500      	push	{lr}
 800171c:	b083      	sub	sp, #12
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800171e:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 8001722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001724:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001728:	631a      	str	r2, [r3, #48]	; 0x30
 800172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001730:	9301      	str	r3, [sp, #4]
 8001732:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	4611      	mov	r1, r2
 8001738:	205a      	movs	r0, #90	; 0x5a
 800173a:	f000 f9c5 	bl	8001ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800173e:	205a      	movs	r0, #90	; 0x5a
 8001740:	f000 f9f8 	bl	8001b34 <HAL_NVIC_EnableIRQ>
}
 8001744:	b003      	add	sp, #12
 8001746:	f85d fb04 	ldr.w	pc, [sp], #4
 800174a:	bf00      	nop
 800174c:	4002b000 	.word	0x4002b000

08001750 <HAL_I2C_MspInit>:
{
 8001750:	b510      	push	{r4, lr}
 8001752:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	2300      	movs	r3, #0
 8001756:	9303      	str	r3, [sp, #12]
 8001758:	9304      	str	r3, [sp, #16]
 800175a:	9305      	str	r3, [sp, #20]
 800175c:	9306      	str	r3, [sp, #24]
 800175e:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C3)
 8001760:	6802      	ldr	r2, [r0, #0]
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_I2C_MspInit+0x64>)
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <HAL_I2C_MspInit+0x1c>
}
 8001768:	b008      	add	sp, #32
 800176a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800176c:	4c12      	ldr	r4, [pc, #72]	; (80017b8 <HAL_I2C_MspInit+0x68>)
 800176e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001774:	6323      	str	r3, [r4, #48]	; 0x30
 8001776:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001780:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001784:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001786:	2312      	movs	r3, #18
 8001788:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800178a:	2301      	movs	r3, #1
 800178c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001792:	2304      	movs	r3, #4
 8001794:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001796:	a903      	add	r1, sp, #12
 8001798:	4808      	ldr	r0, [pc, #32]	; (80017bc <HAL_I2C_MspInit+0x6c>)
 800179a:	f000 fb57 	bl	8001e4c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800179e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017a4:	6423      	str	r3, [r4, #64]	; 0x40
 80017a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017ac:	9302      	str	r3, [sp, #8]
 80017ae:	9b02      	ldr	r3, [sp, #8]
}
 80017b0:	e7da      	b.n	8001768 <HAL_I2C_MspInit+0x18>
 80017b2:	bf00      	nop
 80017b4:	40005c00 	.word	0x40005c00
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40021c00 	.word	0x40021c00

080017c0 <HAL_LTDC_MspInit>:
{
 80017c0:	b570      	push	{r4, r5, r6, lr}
 80017c2:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	2300      	movs	r3, #0
 80017c6:	9307      	str	r3, [sp, #28]
 80017c8:	9308      	str	r3, [sp, #32]
 80017ca:	9309      	str	r3, [sp, #36]	; 0x24
 80017cc:	930a      	str	r3, [sp, #40]	; 0x28
 80017ce:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hltdc->Instance==LTDC)
 80017d0:	6802      	ldr	r2, [r0, #0]
 80017d2:	4b3e      	ldr	r3, [pc, #248]	; (80018cc <HAL_LTDC_MspInit+0x10c>)
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d001      	beq.n	80017dc <HAL_LTDC_MspInit+0x1c>
}
 80017d8:	b00c      	add	sp, #48	; 0x30
 80017da:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 80017dc:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 80017e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80017e6:	645a      	str	r2, [r3, #68]	; 0x44
 80017e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017ea:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80017ee:	9201      	str	r2, [sp, #4]
 80017f0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017f4:	f042 0210 	orr.w	r2, r2, #16
 80017f8:	631a      	str	r2, [r3, #48]	; 0x30
 80017fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017fc:	f002 0210 	and.w	r2, r2, #16
 8001800:	9202      	str	r2, [sp, #8]
 8001802:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800180a:	631a      	str	r2, [r3, #48]	; 0x30
 800180c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800180e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001812:	9203      	str	r2, [sp, #12]
 8001814:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001818:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800181c:	631a      	str	r2, [r3, #48]	; 0x30
 800181e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001820:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001824:	9204      	str	r2, [sp, #16]
 8001826:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800182a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800182e:	631a      	str	r2, [r3, #48]	; 0x30
 8001830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001832:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001836:	9205      	str	r2, [sp, #20]
 8001838:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800183a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800183c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001840:	631a      	str	r2, [r3, #48]	; 0x30
 8001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001848:	9306      	str	r3, [sp, #24]
 800184a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800184c:	2310      	movs	r3, #16
 800184e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2502      	movs	r5, #2
 8001852:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001854:	260e      	movs	r6, #14
 8001856:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001858:	a907      	add	r1, sp, #28
 800185a:	481d      	ldr	r0, [pc, #116]	; (80018d0 <HAL_LTDC_MspInit+0x110>)
 800185c:	f000 faf6 	bl	8001e4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001860:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001864:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2400      	movs	r4, #0
 800186a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800186e:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001870:	a907      	add	r1, sp, #28
 8001872:	4818      	ldr	r0, [pc, #96]	; (80018d4 <HAL_LTDC_MspInit+0x114>)
 8001874:	f000 faea 	bl	8001e4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001878:	23f7      	movs	r3, #247	; 0xf7
 800187a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001882:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001884:	a907      	add	r1, sp, #28
 8001886:	4814      	ldr	r0, [pc, #80]	; (80018d8 <HAL_LTDC_MspInit+0x118>)
 8001888:	f000 fae0 	bl	8001e4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800188c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001890:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001898:	2309      	movs	r3, #9
 800189a:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800189c:	a907      	add	r1, sp, #28
 800189e:	480f      	ldr	r0, [pc, #60]	; (80018dc <HAL_LTDC_MspInit+0x11c>)
 80018a0:	f000 fad4 	bl	8001e4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80018a4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80018a8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018b0:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018b2:	a907      	add	r1, sp, #28
 80018b4:	480a      	ldr	r0, [pc, #40]	; (80018e0 <HAL_LTDC_MspInit+0x120>)
 80018b6:	f000 fac9 	bl	8001e4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80018ba:	4622      	mov	r2, r4
 80018bc:	4621      	mov	r1, r4
 80018be:	2058      	movs	r0, #88	; 0x58
 80018c0:	f000 f902 	bl	8001ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80018c4:	2058      	movs	r0, #88	; 0x58
 80018c6:	f000 f935 	bl	8001b34 <HAL_NVIC_EnableIRQ>
}
 80018ca:	e785      	b.n	80017d8 <HAL_LTDC_MspInit+0x18>
 80018cc:	40016800 	.word	0x40016800
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40022400 	.word	0x40022400
 80018d8:	40022800 	.word	0x40022800
 80018dc:	40021800 	.word	0x40021800
 80018e0:	40022000 	.word	0x40022000

080018e4 <HAL_RTC_MspInit>:
  if(hrtc->Instance==RTC)
 80018e4:	6802      	ldr	r2, [r0, #0]
 80018e6:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_RTC_MspInit+0x18>)
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d000      	beq.n	80018ee <HAL_RTC_MspInit+0xa>
}
 80018ec:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 80018ee:	4a04      	ldr	r2, [pc, #16]	; (8001900 <HAL_RTC_MspInit+0x1c>)
 80018f0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80018f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018f6:	6713      	str	r3, [r2, #112]	; 0x70
}
 80018f8:	e7f8      	b.n	80018ec <HAL_RTC_MspInit+0x8>
 80018fa:	bf00      	nop
 80018fc:	40002800 	.word	0x40002800
 8001900:	40023800 	.word	0x40023800

08001904 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001904:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001906:	f7ff fe7d 	bl	8001604 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800190a:	bd08      	pop	{r3, pc}

0800190c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800190c:	b500      	push	{lr}
 800190e:	b089      	sub	sp, #36	; 0x24
 8001910:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001912:	2200      	movs	r2, #0
 8001914:	2036      	movs	r0, #54	; 0x36
 8001916:	f000 f8d7 	bl	8001ac8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800191a:	2036      	movs	r0, #54	; 0x36
 800191c:	f000 f90a 	bl	8001b34 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_InitTick+0x6c>)
 8001922:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001924:	f042 0210 	orr.w	r2, r2, #16
 8001928:	641a      	str	r2, [r3, #64]	; 0x40
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	f003 0310 	and.w	r3, r3, #16
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001934:	a902      	add	r1, sp, #8
 8001936:	a803      	add	r0, sp, #12
 8001938:	f001 fcf0 	bl	800331c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800193c:	f001 fcde 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 8001940:	0043      	lsls	r3, r0, #1
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001942:	480e      	ldr	r0, [pc, #56]	; (800197c <HAL_InitTick+0x70>)
 8001944:	fba0 2303 	umull	r2, r3, r0, r3
 8001948:	0c9b      	lsrs	r3, r3, #18
 800194a:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800194c:	480c      	ldr	r0, [pc, #48]	; (8001980 <HAL_InitTick+0x74>)
 800194e:	4a0d      	ldr	r2, [pc, #52]	; (8001984 <HAL_InitTick+0x78>)
 8001950:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001952:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001956:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001958:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195e:	6083      	str	r3, [r0, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001960:	f002 fc08 	bl	8004174 <HAL_TIM_Base_Init>
 8001964:	b118      	cbz	r0, 800196e <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
 8001966:	2001      	movs	r0, #1
}
 8001968:	b009      	add	sp, #36	; 0x24
 800196a:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim6);
 800196e:	4804      	ldr	r0, [pc, #16]	; (8001980 <HAL_InitTick+0x74>)
 8001970:	f002 fa5e 	bl	8003e30 <HAL_TIM_Base_Start_IT>
 8001974:	e7f8      	b.n	8001968 <HAL_InitTick+0x5c>
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	431bde83 	.word	0x431bde83
 8001980:	2003fdd8 	.word	0x2003fdd8
 8001984:	40001000 	.word	0x40001000

08001988 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <NMI_Handler>

0800198a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <HardFault_Handler>

0800198c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800198c:	e7fe      	b.n	800198c <MemManage_Handler>

0800198e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198e:	e7fe      	b.n	800198e <BusFault_Handler>

08001990 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <UsageFault_Handler>

08001992 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001992:	4770      	bx	lr

08001994 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001994:	4770      	bx	lr

08001996 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001996:	4770      	bx	lr

08001998 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001998:	4770      	bx	lr
	...

0800199c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800199c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800199e:	4802      	ldr	r0, [pc, #8]	; (80019a8 <TIM6_DAC_IRQHandler+0xc>)
 80019a0:	f002 fa92 	bl	8003ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019a4:	bd08      	pop	{r3, pc}
 80019a6:	bf00      	nop
 80019a8:	2003fdd8 	.word	0x2003fdd8

080019ac <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80019ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80019ae:	4802      	ldr	r0, [pc, #8]	; (80019b8 <LTDC_IRQHandler+0xc>)
 80019b0:	f001 f873 	bl	8002a9a <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80019b4:	bd08      	pop	{r3, pc}
 80019b6:	bf00      	nop
 80019b8:	2003fcd8 	.word	0x2003fcd8

080019bc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80019bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80019be:	4802      	ldr	r0, [pc, #8]	; (80019c8 <DMA2D_IRQHandler+0xc>)
 80019c0:	f000 f944 	bl	8001c4c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80019c4:	bd08      	pop	{r3, pc}
 80019c6:	bf00      	nop
 80019c8:	2003fc4c 	.word	0x2003fc4c

080019cc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019cc:	4a03      	ldr	r2, [pc, #12]	; (80019dc <SystemInit+0x10>)
 80019ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80019d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e4:	480d      	ldr	r0, [pc, #52]	; (8001a1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019e6:	490e      	ldr	r1, [pc, #56]	; (8001a20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019e8:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ec:	e002      	b.n	80019f4 <LoopCopyDataInit>

080019ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f2:	3304      	adds	r3, #4

080019f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f8:	d3f9      	bcc.n	80019ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019fc:	4c0b      	ldr	r4, [pc, #44]	; (8001a2c <LoopFillZerobss+0x26>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a00:	e001      	b.n	8001a06 <LoopFillZerobss>

08001a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a04:	3204      	adds	r2, #4

08001a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a08:	d3fb      	bcc.n	8001a02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a0a:	f7ff ffdf 	bl	80019cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a0e:	f002 fc73 	bl	80042f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a12:	f7ff fddd 	bl	80015d0 <main>
  bx  lr    
 8001a16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a18:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a24:	08004420 	.word	0x08004420
  ldr r2, =_sbss
 8001a28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a2c:	2003fe28 	.word	0x2003fe28

08001a30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a30:	e7fe      	b.n	8001a30 <ADC_IRQHandler>
	...

08001a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a34:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001a36:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <HAL_Init+0x20>)
 8001a38:	6813      	ldr	r3, [r2, #0]
 8001a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a3e:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a40:	2003      	movs	r0, #3
 8001a42:	f000 f82f 	bl	8001aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f7ff ff60 	bl	800190c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001a4c:	f7ff fe48 	bl	80016e0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8001a50:	2000      	movs	r0, #0
 8001a52:	bd08      	pop	{r3, pc}
 8001a54:	40023c00 	.word	0x40023c00

08001a58 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001a58:	4a03      	ldr	r2, [pc, #12]	; (8001a68 <HAL_IncTick+0x10>)
 8001a5a:	6811      	ldr	r1, [r2, #0]
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <HAL_IncTick+0x14>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	440b      	add	r3, r1
 8001a62:	6013      	str	r3, [r2, #0]
}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	2003fe24 	.word	0x2003fe24
 8001a6c:	20000004 	.word	0x20000004

08001a70 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a70:	4b01      	ldr	r3, [pc, #4]	; (8001a78 <HAL_GetTick+0x8>)
 8001a72:	6818      	ldr	r0, [r3, #0]
}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	2003fe24 	.word	0x2003fe24

08001a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a7c:	b538      	push	{r3, r4, r5, lr}
 8001a7e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a80:	f7ff fff6 	bl	8001a70 <HAL_GetTick>
 8001a84:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a86:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001a8a:	d002      	beq.n	8001a92 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <HAL_Delay+0x24>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a92:	f7ff ffed 	bl	8001a70 <HAL_GetTick>
 8001a96:	1b40      	subs	r0, r0, r5
 8001a98:	42a0      	cmp	r0, r4
 8001a9a:	d3fa      	bcc.n	8001a92 <HAL_Delay+0x16>
  {
  }
}
 8001a9c:	bd38      	pop	{r3, r4, r5, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000004 	.word	0x20000004

08001aa4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa4:	4906      	ldr	r1, [pc, #24]	; (8001ac0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8001aa6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001aac:	041b      	lsls	r3, r3, #16
 8001aae:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab0:	0200      	lsls	r0, r0, #8
 8001ab2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001ab8:	4a02      	ldr	r2, [pc, #8]	; (8001ac4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001aba:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8001abc:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00
 8001ac4:	05fa0000 	.word	0x05fa0000

08001ac8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aca:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <HAL_NVIC_SetPriority+0x60>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad2:	f1c3 0c07 	rsb	ip, r3, #7
 8001ad6:	f1bc 0f04 	cmp.w	ip, #4
 8001ada:	bf28      	it	cs
 8001adc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae0:	f103 0e04 	add.w	lr, r3, #4
 8001ae4:	f1be 0f06 	cmp.w	lr, #6
 8001ae8:	d914      	bls.n	8001b14 <HAL_NVIC_SetPriority+0x4c>
 8001aea:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	f04f 3eff 	mov.w	lr, #4294967295
 8001af0:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001af4:	ea21 010c 	bic.w	r1, r1, ip
 8001af8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afa:	fa0e f303 	lsl.w	r3, lr, r3
 8001afe:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b02:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001b04:	2800      	cmp	r0, #0
 8001b06:	db07      	blt.n	8001b18 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b08:	0109      	lsls	r1, r1, #4
 8001b0a:	b2c9      	uxtb	r1, r1
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <HAL_NVIC_SetPriority+0x64>)
 8001b0e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001b10:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b14:	2300      	movs	r3, #0
 8001b16:	e7e9      	b.n	8001aec <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b18:	f000 000f 	and.w	r0, r0, #15
 8001b1c:	0109      	lsls	r1, r1, #4
 8001b1e:	b2c9      	uxtb	r1, r1
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_NVIC_SetPriority+0x68>)
 8001b22:	5419      	strb	r1, [r3, r0]
 8001b24:	e7f4      	b.n	8001b10 <HAL_NVIC_SetPriority+0x48>
 8001b26:	bf00      	nop
 8001b28:	e000ed00 	.word	0xe000ed00
 8001b2c:	e000e400 	.word	0xe000e400
 8001b30:	e000ed14 	.word	0xe000ed14

08001b34 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001b34:	2800      	cmp	r0, #0
 8001b36:	db07      	blt.n	8001b48 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b38:	f000 021f 	and.w	r2, r0, #31
 8001b3c:	0940      	lsrs	r0, r0, #5
 8001b3e:	2301      	movs	r3, #1
 8001b40:	4093      	lsls	r3, r2
 8001b42:	4a02      	ldr	r2, [pc, #8]	; (8001b4c <HAL_NVIC_EnableIRQ+0x18>)
 8001b44:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000e100 	.word	0xe000e100

08001b50 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b50:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <HAL_MPU_Disable+0x18>)
 8001b56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b58:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b5c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001b6c:	f040 0001 	orr.w	r0, r0, #1
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_MPU_Enable+0x1c>)
 8001b72:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b78:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001b7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b82:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001b8c:	7842      	ldrb	r2, [r0, #1]
 8001b8e:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <HAL_MPU_ConfigRegion+0x5c>)
 8001b90:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 8001b94:	7803      	ldrb	r3, [r0, #0]
 8001b96:	b1fb      	cbz	r3, 8001bd8 <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001b98:	6843      	ldr	r3, [r0, #4]
 8001b9a:	4a13      	ldr	r2, [pc, #76]	; (8001be8 <HAL_MPU_ConfigRegion+0x5c>)
 8001b9c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ba0:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ba2:	7ac3      	ldrb	r3, [r0, #11]
 8001ba4:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ba6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001baa:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001bac:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001bb0:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001bb2:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001bb6:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001bb8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001bbc:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001bbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bc2:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001bc4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001bc8:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bca:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001bce:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001bd0:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bd2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8001bd6:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <HAL_MPU_ConfigRegion+0x5c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 8001be0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001bec:	b338      	cbz	r0, 8001c3e <HAL_DMA2D_Init+0x52>
{
 8001bee:	b510      	push	{r4, lr}
 8001bf0:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001bf2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001bf6:	b1eb      	cbz	r3, 8001c34 <HAL_DMA2D_Init+0x48>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001bfe:	6822      	ldr	r2, [r4, #0]
 8001c00:	6813      	ldr	r3, [r2, #0]
 8001c02:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001c06:	6861      	ldr	r1, [r4, #4]
 8001c08:	430b      	orrs	r3, r1
 8001c0a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001c0c:	6822      	ldr	r2, [r4, #0]
 8001c0e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001c10:	f023 0307 	bic.w	r3, r3, #7
 8001c14:	68a1      	ldr	r1, [r4, #8]
 8001c16:	430b      	orrs	r3, r1
 8001c18:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001c1a:	6822      	ldr	r2, [r4, #0]
 8001c1c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_DMA2D_Init+0x58>)
 8001c20:	400b      	ands	r3, r1
 8001c22:	68e1      	ldr	r1, [r4, #12]
 8001c24:	430b      	orrs	r3, r1
 8001c26:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001c28:	2000      	movs	r0, #0
 8001c2a:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 8001c32:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8001c34:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8001c38:	f7ff fd6a 	bl	8001710 <HAL_DMA2D_MspInit>
 8001c3c:	e7dc      	b.n	8001bf8 <HAL_DMA2D_Init+0xc>
    return HAL_ERROR;
 8001c3e:	2001      	movs	r0, #1
}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	ffffc000 	.word	0xffffc000

08001c48 <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001c48:	4770      	bx	lr

08001c4a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001c4a:	4770      	bx	lr

08001c4c <HAL_DMA2D_IRQHandler>:
{
 8001c4c:	b570      	push	{r4, r5, r6, lr}
 8001c4e:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001c50:	6803      	ldr	r3, [r0, #0]
 8001c52:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001c54:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001c56:	f015 0f01 	tst.w	r5, #1
 8001c5a:	d016      	beq.n	8001c8a <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001c5c:	f416 7f80 	tst.w	r6, #256	; 0x100
 8001c60:	d013      	beq.n	8001c8a <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c68:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001c6a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	63c3      	str	r3, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001c72:	6803      	ldr	r3, [r0, #0]
 8001c74:	2201      	movs	r2, #1
 8001c76:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c78:	2304      	movs	r3, #4
 8001c7a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8001c84:	6943      	ldr	r3, [r0, #20]
 8001c86:	b103      	cbz	r3, 8001c8a <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 8001c88:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001c8a:	f015 0f20 	tst.w	r5, #32
 8001c8e:	d018      	beq.n	8001cc2 <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001c90:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8001c94:	d015      	beq.n	8001cc2 <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001c96:	6822      	ldr	r2, [r4, #0]
 8001c98:	6813      	ldr	r3, [r2, #0]
 8001c9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c9e:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001ca0:	6823      	ldr	r3, [r4, #0]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001ca6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001cae:	2304      	movs	r3, #4
 8001cb0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8001cba:	6963      	ldr	r3, [r4, #20]
 8001cbc:	b10b      	cbz	r3, 8001cc2 <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001cc2:	f015 0f08 	tst.w	r5, #8
 8001cc6:	d018      	beq.n	8001cfa <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001cc8:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8001ccc:	d015      	beq.n	8001cfa <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001cce:	6822      	ldr	r2, [r4, #0]
 8001cd0:	6813      	ldr	r3, [r2, #0]
 8001cd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001cd6:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001cd8:	6823      	ldr	r3, [r4, #0]
 8001cda:	2208      	movs	r2, #8
 8001cdc:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001cde:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001cec:	2300      	movs	r3, #0
 8001cee:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8001cf2:	6963      	ldr	r3, [r4, #20]
 8001cf4:	b10b      	cbz	r3, 8001cfa <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001cfa:	f015 0f04 	tst.w	r5, #4
 8001cfe:	d002      	beq.n	8001d06 <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001d00:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8001d04:	d120      	bne.n	8001d48 <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001d06:	f015 0f02 	tst.w	r5, #2
 8001d0a:	d016      	beq.n	8001d3a <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001d0c:	f416 7f00 	tst.w	r6, #512	; 0x200
 8001d10:	d013      	beq.n	8001d3a <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001d12:	6822      	ldr	r2, [r4, #0]
 8001d14:	6813      	ldr	r3, [r2, #0]
 8001d16:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d1a:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001d1c:	6823      	ldr	r3, [r4, #0]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001d22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d24:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d26:	2301      	movs	r3, #1
 8001d28:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8001d32:	6923      	ldr	r3, [r4, #16]
 8001d34:	b10b      	cbz	r3, 8001d3a <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 8001d36:	4620      	mov	r0, r4
 8001d38:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001d3a:	f015 0f10 	tst.w	r5, #16
 8001d3e:	d002      	beq.n	8001d46 <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001d40:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8001d44:	d10c      	bne.n	8001d60 <HAL_DMA2D_IRQHandler+0x114>
}
 8001d46:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001d48:	6822      	ldr	r2, [r4, #0]
 8001d4a:	6813      	ldr	r3, [r2, #0]
 8001d4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d50:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001d52:	6823      	ldr	r3, [r4, #0]
 8001d54:	2204      	movs	r2, #4
 8001d56:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001d58:	4620      	mov	r0, r4
 8001d5a:	f7ff ff75 	bl	8001c48 <HAL_DMA2D_LineEventCallback>
 8001d5e:	e7d2      	b.n	8001d06 <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001d60:	6822      	ldr	r2, [r4, #0]
 8001d62:	6813      	ldr	r3, [r2, #0]
 8001d64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d68:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	2210      	movs	r2, #16
 8001d6e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001d70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d72:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d74:	2301      	movs	r3, #1
 8001d76:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001d80:	4620      	mov	r0, r4
 8001d82:	f7ff ff62 	bl	8001c4a <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8001d86:	e7de      	b.n	8001d46 <HAL_DMA2D_IRQHandler+0xfa>

08001d88 <HAL_DMA2D_ConfigLayer>:
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001d88:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d059      	beq.n	8001e44 <HAL_DMA2D_ConfigLayer+0xbc>
{
 8001d90:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8001d92:	2301      	movs	r3, #1
 8001d94:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001d9e:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8001da2:	69da      	ldr	r2, [r3, #28]
 8001da4:	1c8b      	adds	r3, r1, #2
 8001da6:	011b      	lsls	r3, r3, #4
 8001da8:	58c3      	ldr	r3, [r0, r3]
 8001daa:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001dae:	3a09      	subs	r2, #9
 8001db0:	2a01      	cmp	r2, #1
 8001db2:	d91e      	bls.n	8001df2 <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001db4:	1c8a      	adds	r2, r1, #2
 8001db6:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8001dba:	6852      	ldr	r2, [r2, #4]
 8001dbc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001dc0:	bb41      	cbnz	r1, 8001e14 <HAL_DMA2D_ConfigLayer+0x8c>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001dc2:	6804      	ldr	r4, [r0, #0]
 8001dc4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001dc6:	4a20      	ldr	r2, [pc, #128]	; (8001e48 <HAL_DMA2D_ConfigLayer+0xc0>)
 8001dc8:	402a      	ands	r2, r5
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001dce:	6802      	ldr	r2, [r0, #0]
 8001dd0:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8001dd4:	699c      	ldr	r4, [r3, #24]
 8001dd6:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	3b09      	subs	r3, #9
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d910      	bls.n	8001e02 <HAL_DMA2D_ConfigLayer+0x7a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001de6:	2300      	movs	r3, #0
 8001de8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001dec:	4618      	mov	r0, r3
}
 8001dee:	bc30      	pop	{r4, r5}
 8001df0:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001df2:	1c8a      	adds	r2, r1, #2
 8001df4:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8001df8:	6852      	ldr	r2, [r2, #4]
 8001dfa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	e7de      	b.n	8001dc0 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001e02:	3102      	adds	r1, #2
 8001e04:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8001e08:	684b      	ldr	r3, [r1, #4]
 8001e0a:	6802      	ldr	r2, [r0, #0]
 8001e0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001e10:	6293      	str	r3, [r2, #40]	; 0x28
 8001e12:	e7e5      	b.n	8001de0 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001e14:	6804      	ldr	r4, [r0, #0]
 8001e16:	69e5      	ldr	r5, [r4, #28]
 8001e18:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <HAL_DMA2D_ConfigLayer+0xc0>)
 8001e1a:	402a      	ands	r2, r5
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001e20:	6802      	ldr	r2, [r0, #0]
 8001e22:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8001e26:	699c      	ldr	r4, [r3, #24]
 8001e28:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	3b09      	subs	r3, #9
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d8d6      	bhi.n	8001de0 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001e32:	3102      	adds	r1, #2
 8001e34:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8001e38:	684b      	ldr	r3, [r1, #4]
 8001e3a:	6802      	ldr	r2, [r0, #0]
 8001e3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001e40:	6213      	str	r3, [r2, #32]
 8001e42:	e7cd      	b.n	8001de0 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 8001e44:	2002      	movs	r0, #2
}
 8001e46:	4770      	bx	lr
 8001e48:	00fcfff0 	.word	0x00fcfff0

08001e4c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	2b0f      	cmp	r3, #15
 8001e50:	f200 80e4 	bhi.w	800201c <HAL_GPIO_Init+0x1d0>
{
 8001e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e56:	b083      	sub	sp, #12
 8001e58:	e03a      	b.n	8001ed0 <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e5a:	2209      	movs	r2, #9
 8001e5c:	e000      	b.n	8001e60 <HAL_GPIO_Init+0x14>
 8001e5e:	2200      	movs	r2, #0
 8001e60:	40aa      	lsls	r2, r5
 8001e62:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e64:	3402      	adds	r4, #2
 8001e66:	4d6e      	ldr	r5, [pc, #440]	; (8002020 <HAL_GPIO_Init+0x1d4>)
 8001e68:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e6c:	4a6d      	ldr	r2, [pc, #436]	; (8002024 <HAL_GPIO_Init+0x1d8>)
 8001e6e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	ea6f 020c 	mvn.w	r2, ip
 8001e74:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e78:	684e      	ldr	r6, [r1, #4]
 8001e7a:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8001e7e:	d001      	beq.n	8001e84 <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8001e80:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 8001e84:	4c67      	ldr	r4, [pc, #412]	; (8002024 <HAL_GPIO_Init+0x1d8>)
 8001e86:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8001e88:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001e8a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e8e:	684e      	ldr	r6, [r1, #4]
 8001e90:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8001e94:	d001      	beq.n	8001e9a <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 8001e96:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001e9a:	4c62      	ldr	r4, [pc, #392]	; (8002024 <HAL_GPIO_Init+0x1d8>)
 8001e9c:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e9e:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001ea0:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ea4:	684e      	ldr	r6, [r1, #4]
 8001ea6:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8001eaa:	d001      	beq.n	8001eb0 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 8001eac:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001eb0:	4c5c      	ldr	r4, [pc, #368]	; (8002024 <HAL_GPIO_Init+0x1d8>)
 8001eb2:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001eb4:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001eb6:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eb8:	684d      	ldr	r5, [r1, #4]
 8001eba:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8001ebe:	d001      	beq.n	8001ec4 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8001ec0:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 8001ec4:	4c57      	ldr	r4, [pc, #348]	; (8002024 <HAL_GPIO_Init+0x1d8>)
 8001ec6:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ec8:	3301      	adds	r3, #1
 8001eca:	2b0f      	cmp	r3, #15
 8001ecc:	f200 80a4 	bhi.w	8002018 <HAL_GPIO_Init+0x1cc>
    ioposition = ((uint32_t)0x01) << position;
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed4:	680c      	ldr	r4, [r1, #0]
 8001ed6:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001eda:	ea32 0404 	bics.w	r4, r2, r4
 8001ede:	d1f3      	bne.n	8001ec8 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ee0:	684c      	ldr	r4, [r1, #4]
 8001ee2:	1e65      	subs	r5, r4, #1
 8001ee4:	2c11      	cmp	r4, #17
 8001ee6:	bf18      	it	ne
 8001ee8:	2d01      	cmpne	r5, #1
 8001eea:	d901      	bls.n	8001ef0 <HAL_GPIO_Init+0xa4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eec:	2c12      	cmp	r4, #18
 8001eee:	d112      	bne.n	8001f16 <HAL_GPIO_Init+0xca>
        temp = GPIOx->OSPEEDR; 
 8001ef0:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ef2:	005e      	lsls	r6, r3, #1
 8001ef4:	2403      	movs	r4, #3
 8001ef6:	40b4      	lsls	r4, r6
 8001ef8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001efc:	68cc      	ldr	r4, [r1, #12]
 8001efe:	40b4      	lsls	r4, r6
 8001f00:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001f02:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001f04:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f06:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001f0a:	684c      	ldr	r4, [r1, #4]
 8001f0c:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001f10:	409a      	lsls	r2, r3
 8001f12:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8001f14:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001f16:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f18:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001f1c:	2403      	movs	r4, #3
 8001f1e:	fa04 f40e 	lsl.w	r4, r4, lr
 8001f22:	43e2      	mvns	r2, r4
 8001f24:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f28:	688c      	ldr	r4, [r1, #8]
 8001f2a:	fa04 f40e 	lsl.w	r4, r4, lr
 8001f2e:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001f30:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f32:	684c      	ldr	r4, [r1, #4]
 8001f34:	2c12      	cmp	r4, #18
 8001f36:	bf18      	it	ne
 8001f38:	2c02      	cmpne	r4, #2
 8001f3a:	d10f      	bne.n	8001f5c <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3];
 8001f3c:	08dd      	lsrs	r5, r3, #3
 8001f3e:	3508      	adds	r5, #8
 8001f40:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f44:	f003 0407 	and.w	r4, r3, #7
 8001f48:	00a6      	lsls	r6, r4, #2
 8001f4a:	240f      	movs	r4, #15
 8001f4c:	40b4      	lsls	r4, r6
 8001f4e:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f52:	690c      	ldr	r4, [r1, #16]
 8001f54:	40b4      	lsls	r4, r6
 8001f56:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 8001f58:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8001f5c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f5e:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f60:	684a      	ldr	r2, [r1, #4]
 8001f62:	f002 0203 	and.w	r2, r2, #3
 8001f66:	fa02 f20e 	lsl.w	r2, r2, lr
 8001f6a:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001f6c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f6e:	684a      	ldr	r2, [r1, #4]
 8001f70:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001f74:	d0a8      	beq.n	8001ec8 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	4a2c      	ldr	r2, [pc, #176]	; (8002028 <HAL_GPIO_Init+0x1dc>)
 8001f78:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001f7a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001f7e:	6454      	str	r4, [r2, #68]	; 0x44
 8001f80:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f82:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001f86:	9201      	str	r2, [sp, #4]
 8001f88:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001f8a:	089c      	lsrs	r4, r3, #2
 8001f8c:	1ca5      	adds	r5, r4, #2
 8001f8e:	4a24      	ldr	r2, [pc, #144]	; (8002020 <HAL_GPIO_Init+0x1d4>)
 8001f90:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f94:	f003 0203 	and.w	r2, r3, #3
 8001f98:	0095      	lsls	r5, r2, #2
 8001f9a:	220f      	movs	r2, #15
 8001f9c:	40aa      	lsls	r2, r5
 8001f9e:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fa2:	4a22      	ldr	r2, [pc, #136]	; (800202c <HAL_GPIO_Init+0x1e0>)
 8001fa4:	4290      	cmp	r0, r2
 8001fa6:	f43f af5a 	beq.w	8001e5e <HAL_GPIO_Init+0x12>
 8001faa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fae:	4290      	cmp	r0, r2
 8001fb0:	d022      	beq.n	8001ff8 <HAL_GPIO_Init+0x1ac>
 8001fb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fb6:	4290      	cmp	r0, r2
 8001fb8:	d020      	beq.n	8001ffc <HAL_GPIO_Init+0x1b0>
 8001fba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fbe:	4290      	cmp	r0, r2
 8001fc0:	d01e      	beq.n	8002000 <HAL_GPIO_Init+0x1b4>
 8001fc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fc6:	4290      	cmp	r0, r2
 8001fc8:	d01c      	beq.n	8002004 <HAL_GPIO_Init+0x1b8>
 8001fca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fce:	4290      	cmp	r0, r2
 8001fd0:	d01a      	beq.n	8002008 <HAL_GPIO_Init+0x1bc>
 8001fd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fd6:	4290      	cmp	r0, r2
 8001fd8:	d018      	beq.n	800200c <HAL_GPIO_Init+0x1c0>
 8001fda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fde:	4290      	cmp	r0, r2
 8001fe0:	d016      	beq.n	8002010 <HAL_GPIO_Init+0x1c4>
 8001fe2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fe6:	4290      	cmp	r0, r2
 8001fe8:	d014      	beq.n	8002014 <HAL_GPIO_Init+0x1c8>
 8001fea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fee:	4290      	cmp	r0, r2
 8001ff0:	f43f af33 	beq.w	8001e5a <HAL_GPIO_Init+0xe>
 8001ff4:	220a      	movs	r2, #10
 8001ff6:	e733      	b.n	8001e60 <HAL_GPIO_Init+0x14>
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	e731      	b.n	8001e60 <HAL_GPIO_Init+0x14>
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	e72f      	b.n	8001e60 <HAL_GPIO_Init+0x14>
 8002000:	2203      	movs	r2, #3
 8002002:	e72d      	b.n	8001e60 <HAL_GPIO_Init+0x14>
 8002004:	2204      	movs	r2, #4
 8002006:	e72b      	b.n	8001e60 <HAL_GPIO_Init+0x14>
 8002008:	2205      	movs	r2, #5
 800200a:	e729      	b.n	8001e60 <HAL_GPIO_Init+0x14>
 800200c:	2206      	movs	r2, #6
 800200e:	e727      	b.n	8001e60 <HAL_GPIO_Init+0x14>
 8002010:	2207      	movs	r2, #7
 8002012:	e725      	b.n	8001e60 <HAL_GPIO_Init+0x14>
 8002014:	2208      	movs	r2, #8
 8002016:	e723      	b.n	8001e60 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8002018:	b003      	add	sp, #12
 800201a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40013800 	.word	0x40013800
 8002024:	40013c00 	.word	0x40013c00
 8002028:	40023800 	.word	0x40023800
 800202c:	40020000 	.word	0x40020000

08002030 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002030:	b10a      	cbz	r2, 8002036 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002032:	6181      	str	r1, [r0, #24]
 8002034:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002036:	0409      	lsls	r1, r1, #16
 8002038:	6181      	str	r1, [r0, #24]
  }
}
 800203a:	4770      	bx	lr

0800203c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800203c:	6803      	ldr	r3, [r0, #0]
 800203e:	699a      	ldr	r2, [r3, #24]
 8002040:	f012 0f02 	tst.w	r2, #2
 8002044:	d001      	beq.n	800204a <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002046:	2200      	movs	r2, #0
 8002048:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800204a:	6803      	ldr	r3, [r0, #0]
 800204c:	699a      	ldr	r2, [r3, #24]
 800204e:	f012 0f01 	tst.w	r2, #1
 8002052:	d103      	bne.n	800205c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	f042 0201 	orr.w	r2, r2, #1
 800205a:	619a      	str	r2, [r3, #24]
  }
}
 800205c:	4770      	bx	lr

0800205e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800205e:	b430      	push	{r4, r5}
 8002060:	9d02      	ldr	r5, [sp, #8]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002062:	6804      	ldr	r4, [r0, #0]
 8002064:	6860      	ldr	r0, [r4, #4]
 8002066:	ea4f 5c55 	mov.w	ip, r5, lsr #21
 800206a:	f40c 6c80 	and.w	ip, ip, #1024	; 0x400
 800206e:	f04c 7c7f 	orr.w	ip, ip, #66846720	; 0x3fc0000
 8002072:	f44c 3c58 	orr.w	ip, ip, #221184	; 0x36000
 8002076:	f44c 7c7f 	orr.w	ip, ip, #1020	; 0x3fc
 800207a:	f04c 0c03 	orr.w	ip, ip, #3
 800207e:	ea20 000c 	bic.w	r0, r0, ip
 8002082:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002086:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800208a:	4319      	orrs	r1, r3
 800208c:	4329      	orrs	r1, r5
 800208e:	4301      	orrs	r1, r0
 8002090:	6061      	str	r1, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002092:	bc30      	pop	{r4, r5}
 8002094:	4770      	bx	lr

08002096 <I2C_IsAcknowledgeFailed>:
{
 8002096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002098:	4605      	mov	r5, r0
 800209a:	460e      	mov	r6, r1
 800209c:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800209e:	6803      	ldr	r3, [r0, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f013 0f10 	tst.w	r3, #16
 80020a6:	d101      	bne.n	80020ac <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 80020a8:	2000      	movs	r0, #0
}
 80020aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020ac:	682b      	ldr	r3, [r5, #0]
 80020ae:	699c      	ldr	r4, [r3, #24]
 80020b0:	f014 0f20 	tst.w	r4, #32
 80020b4:	d117      	bne.n	80020e6 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 80020b6:	f1b6 3fff 	cmp.w	r6, #4294967295
 80020ba:	d0f7      	beq.n	80020ac <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020bc:	f7ff fcd8 	bl	8001a70 <HAL_GetTick>
 80020c0:	1bc0      	subs	r0, r0, r7
 80020c2:	42b0      	cmp	r0, r6
 80020c4:	d801      	bhi.n	80020ca <I2C_IsAcknowledgeFailed+0x34>
 80020c6:	2e00      	cmp	r6, #0
 80020c8:	d1f0      	bne.n	80020ac <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ca:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80020cc:	f043 0320 	orr.w	r3, r3, #32
 80020d0:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020d2:	2320      	movs	r3, #32
 80020d4:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d8:	2300      	movs	r3, #0
 80020da:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80020de:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 80020e2:	2001      	movs	r0, #1
 80020e4:	e7e1      	b.n	80020aa <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020e6:	2210      	movs	r2, #16
 80020e8:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020ea:	682b      	ldr	r3, [r5, #0]
 80020ec:	2420      	movs	r4, #32
 80020ee:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80020f0:	4628      	mov	r0, r5
 80020f2:	f7ff ffa3 	bl	800203c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80020f6:	682a      	ldr	r2, [r5, #0]
 80020f8:	6853      	ldr	r3, [r2, #4]
 80020fa:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80020fe:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002102:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002106:	f023 0301 	bic.w	r3, r3, #1
 800210a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800210c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800210e:	f043 0304 	orr.w	r3, r3, #4
 8002112:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002114:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002118:	2300      	movs	r3, #0
 800211a:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800211e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8002122:	2001      	movs	r0, #1
 8002124:	e7c1      	b.n	80020aa <I2C_IsAcknowledgeFailed+0x14>

08002126 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002126:	b570      	push	{r4, r5, r6, lr}
 8002128:	4604      	mov	r4, r0
 800212a:	460d      	mov	r5, r1
 800212c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	f013 0f02 	tst.w	r3, #2
 8002136:	d11d      	bne.n	8002174 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002138:	4632      	mov	r2, r6
 800213a:	4629      	mov	r1, r5
 800213c:	4620      	mov	r0, r4
 800213e:	f7ff ffaa 	bl	8002096 <I2C_IsAcknowledgeFailed>
 8002142:	b9c8      	cbnz	r0, 8002178 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8002144:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002148:	d0f1      	beq.n	800212e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800214a:	f7ff fc91 	bl	8001a70 <HAL_GetTick>
 800214e:	1b80      	subs	r0, r0, r6
 8002150:	42a8      	cmp	r0, r5
 8002152:	d801      	bhi.n	8002158 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002154:	2d00      	cmp	r5, #0
 8002156:	d1ea      	bne.n	800212e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002158:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800215a:	f043 0320 	orr.w	r3, r3, #32
 800215e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002160:	2320      	movs	r3, #32
 8002162:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002166:	2300      	movs	r3, #0
 8002168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800216c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002170:	2001      	movs	r0, #1
 8002172:	e000      	b.n	8002176 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8002174:	2000      	movs	r0, #0
}
 8002176:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002178:	2001      	movs	r0, #1
 800217a:	e7fc      	b.n	8002176 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800217c <I2C_WaitOnFlagUntilTimeout>:
{
 800217c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002180:	4606      	mov	r6, r0
 8002182:	4688      	mov	r8, r1
 8002184:	4617      	mov	r7, r2
 8002186:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002188:	6834      	ldr	r4, [r6, #0]
 800218a:	69a4      	ldr	r4, [r4, #24]
 800218c:	ea38 0304 	bics.w	r3, r8, r4
 8002190:	bf0c      	ite	eq
 8002192:	f04f 0c01 	moveq.w	ip, #1
 8002196:	f04f 0c00 	movne.w	ip, #0
 800219a:	45bc      	cmp	ip, r7
 800219c:	d118      	bne.n	80021d0 <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 800219e:	f1b5 3fff 	cmp.w	r5, #4294967295
 80021a2:	d0f1      	beq.n	8002188 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a4:	f7ff fc64 	bl	8001a70 <HAL_GetTick>
 80021a8:	9b06      	ldr	r3, [sp, #24]
 80021aa:	1ac0      	subs	r0, r0, r3
 80021ac:	42a8      	cmp	r0, r5
 80021ae:	d801      	bhi.n	80021b4 <I2C_WaitOnFlagUntilTimeout+0x38>
 80021b0:	2d00      	cmp	r5, #0
 80021b2:	d1e9      	bne.n	8002188 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021b4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80021b6:	f043 0320 	orr.w	r3, r3, #32
 80021ba:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021bc:	2320      	movs	r3, #32
 80021be:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80021c8:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 80021cc:	2001      	movs	r0, #1
 80021ce:	e000      	b.n	80021d2 <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 80021d0:	2000      	movs	r0, #0
}
 80021d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080021d8 <I2C_RequestMemoryWrite>:
{
 80021d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	4604      	mov	r4, r0
 80021e0:	4690      	mov	r8, r2
 80021e2:	461d      	mov	r5, r3
 80021e4:	9e08      	ldr	r6, [sp, #32]
 80021e6:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80021e8:	4b19      	ldr	r3, [pc, #100]	; (8002250 <I2C_RequestMemoryWrite+0x78>)
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021f0:	b2ea      	uxtb	r2, r5
 80021f2:	f7ff ff34 	bl	800205e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021f6:	463a      	mov	r2, r7
 80021f8:	4631      	mov	r1, r6
 80021fa:	4620      	mov	r0, r4
 80021fc:	f7ff ff93 	bl	8002126 <I2C_WaitOnTXISFlagUntilTimeout>
 8002200:	b9f8      	cbnz	r0, 8002242 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002202:	2d01      	cmp	r5, #1
 8002204:	d10e      	bne.n	8002224 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	fa5f f288 	uxtb.w	r2, r8
 800220c:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800220e:	9700      	str	r7, [sp, #0]
 8002210:	4633      	mov	r3, r6
 8002212:	2200      	movs	r2, #0
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	4620      	mov	r0, r4
 8002218:	f7ff ffb0 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 800221c:	b9a8      	cbnz	r0, 800224a <I2C_RequestMemoryWrite+0x72>
}
 800221e:	b002      	add	sp, #8
 8002220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002224:	6823      	ldr	r3, [r4, #0]
 8002226:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800222a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800222c:	463a      	mov	r2, r7
 800222e:	4631      	mov	r1, r6
 8002230:	4620      	mov	r0, r4
 8002232:	f7ff ff78 	bl	8002126 <I2C_WaitOnTXISFlagUntilTimeout>
 8002236:	b930      	cbnz	r0, 8002246 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002238:	6823      	ldr	r3, [r4, #0]
 800223a:	fa5f f288 	uxtb.w	r2, r8
 800223e:	629a      	str	r2, [r3, #40]	; 0x28
 8002240:	e7e5      	b.n	800220e <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8002242:	2001      	movs	r0, #1
 8002244:	e7eb      	b.n	800221e <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8002246:	2001      	movs	r0, #1
 8002248:	e7e9      	b.n	800221e <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 800224a:	2001      	movs	r0, #1
 800224c:	e7e7      	b.n	800221e <I2C_RequestMemoryWrite+0x46>
 800224e:	bf00      	nop
 8002250:	80002000 	.word	0x80002000

08002254 <I2C_RequestMemoryRead>:
{
 8002254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	4604      	mov	r4, r0
 800225c:	4690      	mov	r8, r2
 800225e:	461d      	mov	r5, r3
 8002260:	9e08      	ldr	r6, [sp, #32]
 8002262:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002264:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <I2C_RequestMemoryRead+0x74>)
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	2300      	movs	r3, #0
 800226a:	b2ea      	uxtb	r2, r5
 800226c:	f7ff fef7 	bl	800205e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002270:	463a      	mov	r2, r7
 8002272:	4631      	mov	r1, r6
 8002274:	4620      	mov	r0, r4
 8002276:	f7ff ff56 	bl	8002126 <I2C_WaitOnTXISFlagUntilTimeout>
 800227a:	b9f8      	cbnz	r0, 80022bc <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800227c:	2d01      	cmp	r5, #1
 800227e:	d10e      	bne.n	800229e <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002280:	6823      	ldr	r3, [r4, #0]
 8002282:	fa5f f288 	uxtb.w	r2, r8
 8002286:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002288:	9700      	str	r7, [sp, #0]
 800228a:	4633      	mov	r3, r6
 800228c:	2200      	movs	r2, #0
 800228e:	2140      	movs	r1, #64	; 0x40
 8002290:	4620      	mov	r0, r4
 8002292:	f7ff ff73 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 8002296:	b9a8      	cbnz	r0, 80022c4 <I2C_RequestMemoryRead+0x70>
}
 8002298:	b002      	add	sp, #8
 800229a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800229e:	6823      	ldr	r3, [r4, #0]
 80022a0:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80022a4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a6:	463a      	mov	r2, r7
 80022a8:	4631      	mov	r1, r6
 80022aa:	4620      	mov	r0, r4
 80022ac:	f7ff ff3b 	bl	8002126 <I2C_WaitOnTXISFlagUntilTimeout>
 80022b0:	b930      	cbnz	r0, 80022c0 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022b2:	6823      	ldr	r3, [r4, #0]
 80022b4:	fa5f f288 	uxtb.w	r2, r8
 80022b8:	629a      	str	r2, [r3, #40]	; 0x28
 80022ba:	e7e5      	b.n	8002288 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 80022bc:	2001      	movs	r0, #1
 80022be:	e7eb      	b.n	8002298 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 80022c0:	2001      	movs	r0, #1
 80022c2:	e7e9      	b.n	8002298 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 80022c4:	2001      	movs	r0, #1
 80022c6:	e7e7      	b.n	8002298 <I2C_RequestMemoryRead+0x44>
 80022c8:	80002000 	.word	0x80002000

080022cc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80022cc:	b570      	push	{r4, r5, r6, lr}
 80022ce:	4605      	mov	r5, r0
 80022d0:	460c      	mov	r4, r1
 80022d2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022d4:	682b      	ldr	r3, [r5, #0]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f013 0f20 	tst.w	r3, #32
 80022dc:	d11a      	bne.n	8002314 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022de:	4632      	mov	r2, r6
 80022e0:	4621      	mov	r1, r4
 80022e2:	4628      	mov	r0, r5
 80022e4:	f7ff fed7 	bl	8002096 <I2C_IsAcknowledgeFailed>
 80022e8:	b9b0      	cbnz	r0, 8002318 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ea:	f7ff fbc1 	bl	8001a70 <HAL_GetTick>
 80022ee:	1b80      	subs	r0, r0, r6
 80022f0:	42a0      	cmp	r0, r4
 80022f2:	d801      	bhi.n	80022f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80022f4:	2c00      	cmp	r4, #0
 80022f6:	d1ed      	bne.n	80022d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022f8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80022fa:	f043 0320 	orr.w	r3, r3, #32
 80022fe:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002300:	2320      	movs	r3, #32
 8002302:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002306:	2300      	movs	r3, #0
 8002308:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800230c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8002310:	2001      	movs	r0, #1
}
 8002312:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002314:	2000      	movs	r0, #0
 8002316:	e7fc      	b.n	8002312 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8002318:	2001      	movs	r0, #1
 800231a:	e7fa      	b.n	8002312 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

0800231c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800231c:	2800      	cmp	r0, #0
 800231e:	d057      	beq.n	80023d0 <HAL_I2C_Init+0xb4>
{
 8002320:	b510      	push	{r4, lr}
 8002322:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002324:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002328:	2b00      	cmp	r3, #0
 800232a:	d041      	beq.n	80023b0 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800232c:	2324      	movs	r3, #36	; 0x24
 800232e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002332:	6822      	ldr	r2, [r4, #0]
 8002334:	6813      	ldr	r3, [r2, #0]
 8002336:	f023 0301 	bic.w	r3, r3, #1
 800233a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800233c:	6863      	ldr	r3, [r4, #4]
 800233e:	6822      	ldr	r2, [r4, #0]
 8002340:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002344:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002346:	6822      	ldr	r2, [r4, #0]
 8002348:	6893      	ldr	r3, [r2, #8]
 800234a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800234e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002350:	68e3      	ldr	r3, [r4, #12]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d031      	beq.n	80023ba <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002356:	68a3      	ldr	r3, [r4, #8]
 8002358:	6822      	ldr	r2, [r4, #0]
 800235a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800235e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002360:	68e3      	ldr	r3, [r4, #12]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d02f      	beq.n	80023c6 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002366:	6822      	ldr	r2, [r4, #0]
 8002368:	6851      	ldr	r1, [r2, #4]
 800236a:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <HAL_I2C_Init+0xb8>)
 800236c:	430b      	orrs	r3, r1
 800236e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002370:	6822      	ldr	r2, [r4, #0]
 8002372:	68d3      	ldr	r3, [r2, #12]
 8002374:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002378:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800237a:	6923      	ldr	r3, [r4, #16]
 800237c:	6962      	ldr	r2, [r4, #20]
 800237e:	4313      	orrs	r3, r2
 8002380:	69a1      	ldr	r1, [r4, #24]
 8002382:	6822      	ldr	r2, [r4, #0]
 8002384:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002388:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800238a:	69e3      	ldr	r3, [r4, #28]
 800238c:	6a21      	ldr	r1, [r4, #32]
 800238e:	6822      	ldr	r2, [r4, #0]
 8002390:	430b      	orrs	r3, r1
 8002392:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002394:	6822      	ldr	r2, [r4, #0]
 8002396:	6813      	ldr	r3, [r2, #0]
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800239e:	2000      	movs	r0, #0
 80023a0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023a2:	2320      	movs	r3, #32
 80023a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023a8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023aa:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80023ae:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80023b0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80023b4:	f7ff f9cc 	bl	8001750 <HAL_I2C_MspInit>
 80023b8:	e7b8      	b.n	800232c <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023ba:	68a3      	ldr	r3, [r4, #8]
 80023bc:	6822      	ldr	r2, [r4, #0]
 80023be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023c2:	6093      	str	r3, [r2, #8]
 80023c4:	e7cc      	b.n	8002360 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80023c6:	6823      	ldr	r3, [r4, #0]
 80023c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	e7ca      	b.n	8002366 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80023d0:	2001      	movs	r0, #1
}
 80023d2:	4770      	bx	lr
 80023d4:	02008000 	.word	0x02008000

080023d8 <HAL_I2C_Mem_Write>:
{
 80023d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023dc:	b083      	sub	sp, #12
 80023de:	460d      	mov	r5, r1
 80023e0:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80023e4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80023e6:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80023ea:	b2c9      	uxtb	r1, r1
 80023ec:	2920      	cmp	r1, #32
 80023ee:	f040 80bc 	bne.w	800256a <HAL_I2C_Mem_Write+0x192>
 80023f2:	4604      	mov	r4, r0
 80023f4:	4690      	mov	r8, r2
 80023f6:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80023f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80023fa:	f1ba 0f00 	cmp.w	sl, #0
 80023fe:	bf18      	it	ne
 8002400:	2b00      	cmpne	r3, #0
 8002402:	d016      	beq.n	8002432 <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 8002404:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002408:	2b01      	cmp	r3, #1
 800240a:	f000 80b2 	beq.w	8002572 <HAL_I2C_Mem_Write+0x19a>
 800240e:	f04f 0b01 	mov.w	fp, #1
 8002412:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002416:	f7ff fb2b 	bl	8001a70 <HAL_GetTick>
 800241a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800241c:	9000      	str	r0, [sp, #0]
 800241e:	2319      	movs	r3, #25
 8002420:	465a      	mov	r2, fp
 8002422:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002426:	4620      	mov	r0, r4
 8002428:	f7ff fea8 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 800242c:	b130      	cbz	r0, 800243c <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 800242e:	2001      	movs	r0, #1
 8002430:	e09c      	b.n	800256c <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002436:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8002438:	2001      	movs	r0, #1
 800243a:	e097      	b.n	800256c <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800243c:	2321      	movs	r3, #33	; 0x21
 800243e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002442:	2340      	movs	r3, #64	; 0x40
 8002444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002448:	2300      	movs	r3, #0
 800244a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800244c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800244e:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002450:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002454:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002456:	9601      	str	r6, [sp, #4]
 8002458:	9700      	str	r7, [sp, #0]
 800245a:	464b      	mov	r3, r9
 800245c:	4642      	mov	r2, r8
 800245e:	4629      	mov	r1, r5
 8002460:	4620      	mov	r0, r4
 8002462:	f7ff feb9 	bl	80021d8 <I2C_RequestMemoryWrite>
 8002466:	b970      	cbnz	r0, 8002486 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002468:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800246a:	b29b      	uxth	r3, r3
 800246c:	2bff      	cmp	r3, #255	; 0xff
 800246e:	d90f      	bls.n	8002490 <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002470:	22ff      	movs	r2, #255	; 0xff
 8002472:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002474:	2300      	movs	r3, #0
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800247c:	4629      	mov	r1, r5
 800247e:	4620      	mov	r0, r4
 8002480:	f7ff fded 	bl	800205e <I2C_TransferConfig>
 8002484:	e021      	b.n	80024ca <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8002486:	2300      	movs	r3, #0
 8002488:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800248c:	4658      	mov	r0, fp
 800248e:	e06d      	b.n	800256c <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8002490:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002492:	b292      	uxth	r2, r2
 8002494:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002496:	2300      	movs	r3, #0
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	4629      	mov	r1, r5
 80024a2:	4620      	mov	r0, r4
 80024a4:	f7ff fddb 	bl	800205e <I2C_TransferConfig>
 80024a8:	e00f      	b.n	80024ca <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 80024aa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80024ac:	b292      	uxth	r2, r2
 80024ae:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024b0:	2300      	movs	r3, #0
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	4629      	mov	r1, r5
 80024bc:	4620      	mov	r0, r4
 80024be:	f7ff fdce 	bl	800205e <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80024c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d033      	beq.n	8002532 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ca:	4632      	mov	r2, r6
 80024cc:	4639      	mov	r1, r7
 80024ce:	4620      	mov	r0, r4
 80024d0:	f7ff fe29 	bl	8002126 <I2C_WaitOnTXISFlagUntilTimeout>
 80024d4:	2800      	cmp	r0, #0
 80024d6:	d14e      	bne.n	8002576 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	7812      	ldrb	r2, [r2, #0]
 80024de:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80024e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024e2:	3301      	adds	r3, #1
 80024e4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80024e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80024f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024f8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80024fa:	b292      	uxth	r2, r2
 80024fc:	2a00      	cmp	r2, #0
 80024fe:	d0e0      	beq.n	80024c2 <HAL_I2C_Mem_Write+0xea>
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1de      	bne.n	80024c2 <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002504:	9600      	str	r6, [sp, #0]
 8002506:	463b      	mov	r3, r7
 8002508:	2200      	movs	r2, #0
 800250a:	2180      	movs	r1, #128	; 0x80
 800250c:	4620      	mov	r0, r4
 800250e:	f7ff fe35 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 8002512:	bb90      	cbnz	r0, 800257a <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002514:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002516:	b29b      	uxth	r3, r3
 8002518:	2bff      	cmp	r3, #255	; 0xff
 800251a:	d9c6      	bls.n	80024aa <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800251c:	22ff      	movs	r2, #255	; 0xff
 800251e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002520:	2300      	movs	r3, #0
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002528:	4629      	mov	r1, r5
 800252a:	4620      	mov	r0, r4
 800252c:	f7ff fd97 	bl	800205e <I2C_TransferConfig>
 8002530:	e7c7      	b.n	80024c2 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002532:	4632      	mov	r2, r6
 8002534:	4639      	mov	r1, r7
 8002536:	4620      	mov	r0, r4
 8002538:	f7ff fec8 	bl	80022cc <I2C_WaitOnSTOPFlagUntilTimeout>
 800253c:	b9f8      	cbnz	r0, 800257e <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	2220      	movs	r2, #32
 8002542:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002544:	6821      	ldr	r1, [r4, #0]
 8002546:	684b      	ldr	r3, [r1, #4]
 8002548:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800254c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002550:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800255a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800255e:	2300      	movs	r3, #0
 8002560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002564:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8002568:	e000      	b.n	800256c <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 800256a:	2002      	movs	r0, #2
}
 800256c:	b003      	add	sp, #12
 800256e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002572:	2002      	movs	r0, #2
 8002574:	e7fa      	b.n	800256c <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 8002576:	2001      	movs	r0, #1
 8002578:	e7f8      	b.n	800256c <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 800257a:	2001      	movs	r0, #1
 800257c:	e7f6      	b.n	800256c <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 800257e:	2001      	movs	r0, #1
 8002580:	e7f4      	b.n	800256c <HAL_I2C_Mem_Write+0x194>
	...

08002584 <HAL_I2C_Mem_Read>:
{
 8002584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002588:	b083      	sub	sp, #12
 800258a:	460d      	mov	r5, r1
 800258c:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8002590:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002592:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8002596:	b2c9      	uxtb	r1, r1
 8002598:	2920      	cmp	r1, #32
 800259a:	f040 80bd 	bne.w	8002718 <HAL_I2C_Mem_Read+0x194>
 800259e:	4604      	mov	r4, r0
 80025a0:	4690      	mov	r8, r2
 80025a2:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80025a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80025a6:	f1ba 0f00 	cmp.w	sl, #0
 80025aa:	bf18      	it	ne
 80025ac:	2b00      	cmpne	r3, #0
 80025ae:	d016      	beq.n	80025de <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 80025b0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	f000 80b3 	beq.w	8002720 <HAL_I2C_Mem_Read+0x19c>
 80025ba:	f04f 0b01 	mov.w	fp, #1
 80025be:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80025c2:	f7ff fa55 	bl	8001a70 <HAL_GetTick>
 80025c6:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025c8:	9000      	str	r0, [sp, #0]
 80025ca:	2319      	movs	r3, #25
 80025cc:	465a      	mov	r2, fp
 80025ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025d2:	4620      	mov	r0, r4
 80025d4:	f7ff fdd2 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 80025d8:	b130      	cbz	r0, 80025e8 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 80025da:	2001      	movs	r0, #1
 80025dc:	e09d      	b.n	800271a <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025e2:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80025e4:	2001      	movs	r0, #1
 80025e6:	e098      	b.n	800271a <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025e8:	2322      	movs	r3, #34	; 0x22
 80025ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025ee:	2340      	movs	r3, #64	; 0x40
 80025f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80025f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80025fa:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80025fc:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002600:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002602:	9601      	str	r6, [sp, #4]
 8002604:	9700      	str	r7, [sp, #0]
 8002606:	464b      	mov	r3, r9
 8002608:	4642      	mov	r2, r8
 800260a:	4629      	mov	r1, r5
 800260c:	4620      	mov	r0, r4
 800260e:	f7ff fe21 	bl	8002254 <I2C_RequestMemoryRead>
 8002612:	b970      	cbnz	r0, 8002632 <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002614:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	2bff      	cmp	r3, #255	; 0xff
 800261a:	d90f      	bls.n	800263c <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800261c:	22ff      	movs	r2, #255	; 0xff
 800261e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002620:	4b43      	ldr	r3, [pc, #268]	; (8002730 <HAL_I2C_Mem_Read+0x1ac>)
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002628:	4629      	mov	r1, r5
 800262a:	4620      	mov	r0, r4
 800262c:	f7ff fd17 	bl	800205e <I2C_TransferConfig>
 8002630:	e021      	b.n	8002676 <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 8002632:	2300      	movs	r3, #0
 8002634:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002638:	4658      	mov	r0, fp
 800263a:	e06e      	b.n	800271a <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 800263c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800263e:	b292      	uxth	r2, r2
 8002640:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002642:	4b3b      	ldr	r3, [pc, #236]	; (8002730 <HAL_I2C_Mem_Read+0x1ac>)
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	4629      	mov	r1, r5
 800264e:	4620      	mov	r0, r4
 8002650:	f7ff fd05 	bl	800205e <I2C_TransferConfig>
 8002654:	e00f      	b.n	8002676 <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8002656:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002658:	b292      	uxth	r2, r2
 800265a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800265c:	2300      	movs	r3, #0
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	4629      	mov	r1, r5
 8002668:	4620      	mov	r0, r4
 800266a:	f7ff fcf8 	bl	800205e <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800266e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d034      	beq.n	80026e0 <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002676:	9600      	str	r6, [sp, #0]
 8002678:	463b      	mov	r3, r7
 800267a:	2200      	movs	r2, #0
 800267c:	2104      	movs	r1, #4
 800267e:	4620      	mov	r0, r4
 8002680:	f7ff fd7c 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 8002684:	2800      	cmp	r0, #0
 8002686:	d14d      	bne.n	8002724 <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002688:	6823      	ldr	r3, [r4, #0]
 800268a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800268c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800268e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002692:	3301      	adds	r3, #1
 8002694:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002696:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002698:	3a01      	subs	r2, #1
 800269a:	b292      	uxth	r2, r2
 800269c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800269e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0de      	beq.n	800266e <HAL_I2C_Mem_Read+0xea>
 80026b0:	2a00      	cmp	r2, #0
 80026b2:	d1dc      	bne.n	800266e <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026b4:	9600      	str	r6, [sp, #0]
 80026b6:	463b      	mov	r3, r7
 80026b8:	2180      	movs	r1, #128	; 0x80
 80026ba:	4620      	mov	r0, r4
 80026bc:	f7ff fd5e 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 80026c0:	bb90      	cbnz	r0, 8002728 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2bff      	cmp	r3, #255	; 0xff
 80026c8:	d9c5      	bls.n	8002656 <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ca:	22ff      	movs	r2, #255	; 0xff
 80026cc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026ce:	2300      	movs	r3, #0
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026d6:	4629      	mov	r1, r5
 80026d8:	4620      	mov	r0, r4
 80026da:	f7ff fcc0 	bl	800205e <I2C_TransferConfig>
 80026de:	e7c6      	b.n	800266e <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e0:	4632      	mov	r2, r6
 80026e2:	4639      	mov	r1, r7
 80026e4:	4620      	mov	r0, r4
 80026e6:	f7ff fdf1 	bl	80022cc <I2C_WaitOnSTOPFlagUntilTimeout>
 80026ea:	b9f8      	cbnz	r0, 800272c <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ec:	6823      	ldr	r3, [r4, #0]
 80026ee:	2220      	movs	r2, #32
 80026f0:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80026f2:	6821      	ldr	r1, [r4, #0]
 80026f4:	684b      	ldr	r3, [r1, #4]
 80026f6:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80026fa:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80026fe:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002708:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800270c:	2300      	movs	r3, #0
 800270e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002712:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8002716:	e000      	b.n	800271a <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 8002718:	2002      	movs	r0, #2
}
 800271a:	b003      	add	sp, #12
 800271c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002720:	2002      	movs	r0, #2
 8002722:	e7fa      	b.n	800271a <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 8002724:	2001      	movs	r0, #1
 8002726:	e7f8      	b.n	800271a <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 8002728:	2001      	movs	r0, #1
 800272a:	e7f6      	b.n	800271a <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 800272c:	2001      	movs	r0, #1
 800272e:	e7f4      	b.n	800271a <HAL_I2C_Mem_Read+0x196>
 8002730:	80002400 	.word	0x80002400

08002734 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002734:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b20      	cmp	r3, #32
 800273c:	d124      	bne.n	8002788 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800273e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002742:	2b01      	cmp	r3, #1
 8002744:	d022      	beq.n	800278c <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002746:	2301      	movs	r3, #1
 8002748:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800274c:	2324      	movs	r3, #36	; 0x24
 800274e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002752:	6802      	ldr	r2, [r0, #0]
 8002754:	6813      	ldr	r3, [r2, #0]
 8002756:	f023 0301 	bic.w	r3, r3, #1
 800275a:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800275c:	6802      	ldr	r2, [r0, #0]
 800275e:	6813      	ldr	r3, [r2, #0]
 8002760:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002764:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002766:	6802      	ldr	r2, [r0, #0]
 8002768:	6813      	ldr	r3, [r2, #0]
 800276a:	4319      	orrs	r1, r3
 800276c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800276e:	6802      	ldr	r2, [r0, #0]
 8002770:	6813      	ldr	r3, [r2, #0]
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002778:	2320      	movs	r3, #32
 800277a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800277e:	2300      	movs	r3, #0
 8002780:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002784:	4618      	mov	r0, r3
 8002786:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002788:	2002      	movs	r0, #2
 800278a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800278c:	2002      	movs	r0, #2
  }
}
 800278e:	4770      	bx	lr

08002790 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002790:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b20      	cmp	r3, #32
 8002798:	d122      	bne.n	80027e0 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800279a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d020      	beq.n	80027e4 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80027a2:	2301      	movs	r3, #1
 80027a4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027a8:	2324      	movs	r3, #36	; 0x24
 80027aa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027ae:	6802      	ldr	r2, [r0, #0]
 80027b0:	6813      	ldr	r3, [r2, #0]
 80027b2:	f023 0301 	bic.w	r3, r3, #1
 80027b6:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027b8:	6802      	ldr	r2, [r0, #0]
 80027ba:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027c0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027c4:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027c6:	6802      	ldr	r2, [r0, #0]
 80027c8:	6813      	ldr	r3, [r2, #0]
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d0:	2320      	movs	r3, #32
 80027d2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d6:	2300      	movs	r3, #0
 80027d8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80027dc:	4618      	mov	r0, r3
 80027de:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80027e0:	2002      	movs	r0, #2
 80027e2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80027e4:	2002      	movs	r0, #2
  }
}
 80027e6:	4770      	bx	lr

080027e8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80027e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80027ea:	684d      	ldr	r5, [r1, #4]
 80027ec:	6804      	ldr	r4, [r0, #0]
 80027ee:	68e3      	ldr	r3, [r4, #12]
 80027f0:	f3c3 430b 	ubfx	r3, r3, #16, #12
 80027f4:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80027f6:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 80027fa:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 80027fe:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002802:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002806:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800280a:	680b      	ldr	r3, [r1, #0]
 800280c:	6804      	ldr	r4, [r0, #0]
 800280e:	68e6      	ldr	r6, [r4, #12]
 8002810:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8002814:	4433      	add	r3, r6
 8002816:	3301      	adds	r3, #1
 8002818:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800281c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002820:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002824:	68cd      	ldr	r5, [r1, #12]
 8002826:	6804      	ldr	r4, [r0, #0]
 8002828:	68e3      	ldr	r3, [r4, #12]
 800282a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800282e:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002830:	eb04 1ec2 	add.w	lr, r4, r2, lsl #7
 8002834:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8002838:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800283c:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002840:	688b      	ldr	r3, [r1, #8]
 8002842:	6804      	ldr	r4, [r0, #0]
 8002844:	68e6      	ldr	r6, [r4, #12]
 8002846:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 800284a:	4473      	add	r3, lr
 800284c:	3301      	adds	r3, #1
 800284e:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8002852:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002856:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800285a:	6803      	ldr	r3, [r0, #0]
 800285c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8002860:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8002864:	f024 0407 	bic.w	r4, r4, #7
 8002868:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800286c:	6803      	ldr	r3, [r0, #0]
 800286e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8002872:	690c      	ldr	r4, [r1, #16]
 8002874:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002878:	f891 7031 	ldrb.w	r7, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800287c:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002880:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002882:	6804      	ldr	r4, [r0, #0]
 8002884:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8002888:	f104 0e84 	add.w	lr, r4, #132	; 0x84
 800288c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8002890:	2400      	movs	r4, #0
 8002892:	f8ce 4018 	str.w	r4, [lr, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002896:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800289a:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800289e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80028a2:	6806      	ldr	r6, [r0, #0]
 80028a4:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 80028a8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80028ac:	f8ce 309c 	str.w	r3, [lr, #156]	; 0x9c
 80028b0:	f10e 0e84 	add.w	lr, lr, #132	; 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80028b4:	6803      	ldr	r3, [r0, #0]
 80028b6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80028ba:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 80028be:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80028c2:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80028c6:	6803      	ldr	r3, [r0, #0]
 80028c8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80028cc:	694d      	ldr	r5, [r1, #20]
 80028ce:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80028d2:	6803      	ldr	r3, [r0, #0]
 80028d4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80028d8:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 80028dc:	4d2e      	ldr	r5, [pc, #184]	; (8002998 <LTDC_SetConfig+0x1b0>)
 80028de:	4035      	ands	r5, r6
 80028e0:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80028e4:	6a0d      	ldr	r5, [r1, #32]
 80028e6:	6803      	ldr	r3, [r0, #0]
 80028e8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80028ec:	69ce      	ldr	r6, [r1, #28]
 80028ee:	4335      	orrs	r5, r6
 80028f0:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80028f4:	6803      	ldr	r3, [r0, #0]
 80028f6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80028fa:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 80028fe:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002902:	6803      	ldr	r3, [r0, #0]
 8002904:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 8002908:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800290a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800290e:	690b      	ldr	r3, [r1, #16]
 8002910:	b16b      	cbz	r3, 800292e <LTDC_SetConfig+0x146>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002912:	2b01      	cmp	r3, #1
 8002914:	d039      	beq.n	800298a <LTDC_SetConfig+0x1a2>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002916:	2b02      	cmp	r3, #2
 8002918:	bf18      	it	ne
 800291a:	2b04      	cmpne	r3, #4
 800291c:	d037      	beq.n	800298e <LTDC_SetConfig+0x1a6>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800291e:	2b03      	cmp	r3, #3
 8002920:	d037      	beq.n	8002992 <LTDC_SetConfig+0x1aa>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002922:	2b07      	cmp	r3, #7
 8002924:	d001      	beq.n	800292a <LTDC_SetConfig+0x142>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8002926:	2501      	movs	r5, #1
 8002928:	e002      	b.n	8002930 <LTDC_SetConfig+0x148>
    tmp = 2U;
 800292a:	2502      	movs	r5, #2
 800292c:	e000      	b.n	8002930 <LTDC_SetConfig+0x148>
    tmp = 4U;
 800292e:	2504      	movs	r5, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002930:	6802      	ldr	r2, [r0, #0]
 8002932:	4462      	add	r2, ip
 8002934:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8002938:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 800293c:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002940:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8002942:	fb05 f402 	mul.w	r4, r5, r2
 8002946:	684b      	ldr	r3, [r1, #4]
 8002948:	680a      	ldr	r2, [r1, #0]
 800294a:	1a9b      	subs	r3, r3, r2
 800294c:	fb05 f303 	mul.w	r3, r5, r3
 8002950:	3303      	adds	r3, #3
 8002952:	6802      	ldr	r2, [r0, #0]
 8002954:	4462      	add	r2, ip
 8002956:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800295a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800295e:	6803      	ldr	r3, [r0, #0]
 8002960:	4463      	add	r3, ip
 8002962:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8002966:	4a0d      	ldr	r2, [pc, #52]	; (800299c <LTDC_SetConfig+0x1b4>)
 8002968:	4022      	ands	r2, r4
 800296a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800296e:	6803      	ldr	r3, [r0, #0]
 8002970:	4463      	add	r3, ip
 8002972:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002974:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002978:	6803      	ldr	r3, [r0, #0]
 800297a:	449c      	add	ip, r3
 800297c:	f8dc 3084 	ldr.w	r3, [ip, #132]	; 0x84
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
}
 8002988:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 800298a:	2503      	movs	r5, #3
 800298c:	e7d0      	b.n	8002930 <LTDC_SetConfig+0x148>
    tmp = 2U;
 800298e:	2502      	movs	r5, #2
 8002990:	e7ce      	b.n	8002930 <LTDC_SetConfig+0x148>
 8002992:	2502      	movs	r5, #2
 8002994:	e7cc      	b.n	8002930 <LTDC_SetConfig+0x148>
 8002996:	bf00      	nop
 8002998:	fffff8f8 	.word	0xfffff8f8
 800299c:	fffff800 	.word	0xfffff800

080029a0 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 80029a0:	2800      	cmp	r0, #0
 80029a2:	d072      	beq.n	8002a8a <HAL_LTDC_Init+0xea>
{
 80029a4:	b538      	push	{r3, r4, r5, lr}
 80029a6:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80029a8:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d067      	beq.n	8002a80 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80029b0:	2302      	movs	r3, #2
 80029b2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80029b6:	6822      	ldr	r2, [r4, #0]
 80029b8:	6993      	ldr	r3, [r2, #24]
 80029ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80029be:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80029c0:	6821      	ldr	r1, [r4, #0]
 80029c2:	698a      	ldr	r2, [r1, #24]
 80029c4:	6863      	ldr	r3, [r4, #4]
 80029c6:	68a0      	ldr	r0, [r4, #8]
 80029c8:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80029ca:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80029cc:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80029ce:	6920      	ldr	r0, [r4, #16]
 80029d0:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80029d2:	4313      	orrs	r3, r2
 80029d4:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80029d6:	6821      	ldr	r1, [r4, #0]
 80029d8:	688a      	ldr	r2, [r1, #8]
 80029da:	4b2d      	ldr	r3, [pc, #180]	; (8002a90 <HAL_LTDC_Init+0xf0>)
 80029dc:	401a      	ands	r2, r3
 80029de:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80029e0:	6820      	ldr	r0, [r4, #0]
 80029e2:	6882      	ldr	r2, [r0, #8]
 80029e4:	69a1      	ldr	r1, [r4, #24]
 80029e6:	6965      	ldr	r5, [r4, #20]
 80029e8:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80029ec:	430a      	orrs	r2, r1
 80029ee:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80029f0:	6821      	ldr	r1, [r4, #0]
 80029f2:	68ca      	ldr	r2, [r1, #12]
 80029f4:	401a      	ands	r2, r3
 80029f6:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80029f8:	6820      	ldr	r0, [r4, #0]
 80029fa:	68c2      	ldr	r2, [r0, #12]
 80029fc:	6a21      	ldr	r1, [r4, #32]
 80029fe:	69e5      	ldr	r5, [r4, #28]
 8002a00:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002a04:	430a      	orrs	r2, r1
 8002a06:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002a08:	6821      	ldr	r1, [r4, #0]
 8002a0a:	690a      	ldr	r2, [r1, #16]
 8002a0c:	401a      	ands	r2, r3
 8002a0e:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002a10:	6820      	ldr	r0, [r4, #0]
 8002a12:	6902      	ldr	r2, [r0, #16]
 8002a14:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002a16:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002a18:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002a20:	6821      	ldr	r1, [r4, #0]
 8002a22:	694a      	ldr	r2, [r1, #20]
 8002a24:	4013      	ands	r3, r2
 8002a26:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002a28:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002a2a:	6821      	ldr	r1, [r4, #0]
 8002a2c:	694b      	ldr	r3, [r1, #20]
 8002a2e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002a30:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002a34:	4313      	orrs	r3, r2
 8002a36:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002a38:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002a3c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8002a40:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002a42:	6821      	ldr	r1, [r4, #0]
 8002a44:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002a46:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002a4a:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002a4c:	6821      	ldr	r1, [r4, #0]
 8002a4e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002a50:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002a54:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8002a58:	4303      	orrs	r3, r0
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002a5e:	6822      	ldr	r2, [r4, #0]
 8002a60:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002a62:	f043 0306 	orr.w	r3, r3, #6
 8002a66:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8002a68:	6822      	ldr	r2, [r4, #0]
 8002a6a:	6993      	ldr	r3, [r2, #24]
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002a72:	2000      	movs	r0, #0
 8002a74:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8002a7e:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8002a80:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8002a84:	f7fe fe9c 	bl	80017c0 <HAL_LTDC_MspInit>
 8002a88:	e792      	b.n	80029b0 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8002a8a:	2001      	movs	r0, #1
}
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	f000f800 	.word	0xf000f800

08002a94 <HAL_LTDC_ErrorCallback>:
}
 8002a94:	4770      	bx	lr

08002a96 <HAL_LTDC_LineEventCallback>:
}
 8002a96:	4770      	bx	lr

08002a98 <HAL_LTDC_ReloadEventCallback>:
}
 8002a98:	4770      	bx	lr

08002a9a <HAL_LTDC_IRQHandler>:
{
 8002a9a:	b570      	push	{r4, r5, r6, lr}
 8002a9c:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8002a9e:	6803      	ldr	r3, [r0, #0]
 8002aa0:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002aa2:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002aa4:	f015 0f04 	tst.w	r5, #4
 8002aa8:	d002      	beq.n	8002ab0 <HAL_LTDC_IRQHandler+0x16>
 8002aaa:	f016 0f04 	tst.w	r6, #4
 8002aae:	d112      	bne.n	8002ad6 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002ab0:	f015 0f02 	tst.w	r5, #2
 8002ab4:	d002      	beq.n	8002abc <HAL_LTDC_IRQHandler+0x22>
 8002ab6:	f016 0f02 	tst.w	r6, #2
 8002aba:	d121      	bne.n	8002b00 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002abc:	f015 0f01 	tst.w	r5, #1
 8002ac0:	d002      	beq.n	8002ac8 <HAL_LTDC_IRQHandler+0x2e>
 8002ac2:	f016 0f01 	tst.w	r6, #1
 8002ac6:	d132      	bne.n	8002b2e <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002ac8:	f015 0f08 	tst.w	r5, #8
 8002acc:	d002      	beq.n	8002ad4 <HAL_LTDC_IRQHandler+0x3a>
 8002ace:	f016 0f08 	tst.w	r6, #8
 8002ad2:	d13d      	bne.n	8002b50 <HAL_LTDC_IRQHandler+0xb6>
}
 8002ad4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ad8:	f022 0204 	bic.w	r2, r2, #4
 8002adc:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002ade:	6803      	ldr	r3, [r0, #0]
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002ae4:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002af0:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002af4:	2300      	movs	r3, #0
 8002af6:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8002afa:	f7ff ffcb 	bl	8002a94 <HAL_LTDC_ErrorCallback>
 8002afe:	e7d7      	b.n	8002ab0 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002b00:	6822      	ldr	r2, [r4, #0]
 8002b02:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002b04:	f023 0302 	bic.w	r3, r3, #2
 8002b08:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002b0a:	6823      	ldr	r3, [r4, #0]
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002b10:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002b1a:	2304      	movs	r3, #4
 8002b1c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002b20:	2300      	movs	r3, #0
 8002b22:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8002b26:	4620      	mov	r0, r4
 8002b28:	f7ff ffb4 	bl	8002a94 <HAL_LTDC_ErrorCallback>
 8002b2c:	e7c6      	b.n	8002abc <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002b2e:	6822      	ldr	r2, [r4, #0]
 8002b30:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002b32:	f023 0301 	bic.w	r3, r3, #1
 8002b36:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002b38:	6822      	ldr	r2, [r4, #0]
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8002b3e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002b42:	2300      	movs	r3, #0
 8002b44:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8002b48:	4620      	mov	r0, r4
 8002b4a:	f7ff ffa4 	bl	8002a96 <HAL_LTDC_LineEventCallback>
 8002b4e:	e7bb      	b.n	8002ac8 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002b50:	6822      	ldr	r2, [r4, #0]
 8002b52:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002b54:	f023 0308 	bic.w	r3, r3, #8
 8002b58:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002b5a:	6823      	ldr	r3, [r4, #0]
 8002b5c:	2208      	movs	r2, #8
 8002b5e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8002b60:	2301      	movs	r3, #1
 8002b62:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002b66:	2300      	movs	r3, #0
 8002b68:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f7ff ff93 	bl	8002a98 <HAL_LTDC_ReloadEventCallback>
}
 8002b72:	e7af      	b.n	8002ad4 <HAL_LTDC_IRQHandler+0x3a>

08002b74 <HAL_LTDC_ConfigLayer>:
{
 8002b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8002b76:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d02c      	beq.n	8002bd8 <HAL_LTDC_ConfigLayer+0x64>
 8002b7e:	4604      	mov	r4, r0
 8002b80:	460d      	mov	r5, r1
 8002b82:	4616      	mov	r6, r2
 8002b84:	2701      	movs	r7, #1
 8002b86:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002b90:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8002b94:	fb0c 0c02 	mla	ip, ip, r2, r0
 8002b98:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8002b9c:	468e      	mov	lr, r1
 8002b9e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002ba2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002ba6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002baa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002bae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002bb2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002bb6:	f8de 3000 	ldr.w	r3, [lr]
 8002bba:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002bbe:	4632      	mov	r2, r6
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	f7ff fe10 	bl	80027e8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002bc8:	6823      	ldr	r3, [r4, #0]
 8002bca:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002bcc:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8002bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 8002bd8:	2002      	movs	r0, #2
 8002bda:	e7fc      	b.n	8002bd6 <HAL_LTDC_ConfigLayer+0x62>

08002bdc <HAL_LTDC_SetAddress>:
{
 8002bdc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hltdc);
 8002bde:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d019      	beq.n	8002c1a <HAL_LTDC_SetAddress+0x3e>
 8002be6:	4604      	mov	r4, r0
 8002be8:	2501      	movs	r5, #1
 8002bea:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002bf4:	2334      	movs	r3, #52	; 0x34
 8002bf6:	fb02 f303 	mul.w	r3, r2, r3
 8002bfa:	f103 0038 	add.w	r0, r3, #56	; 0x38
  pLayerCfg->FBStartAdress = Address;
 8002bfe:	4423      	add	r3, r4
 8002c00:	65d9      	str	r1, [r3, #92]	; 0x5c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002c02:	1821      	adds	r1, r4, r0
 8002c04:	4620      	mov	r0, r4
 8002c06:	f7ff fdef 	bl	80027e8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002c0a:	6823      	ldr	r3, [r4, #0]
 8002c0c:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8002c0e:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002c12:	2000      	movs	r0, #0
 8002c14:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8002c18:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hltdc);
 8002c1a:	2002      	movs	r0, #2
 8002c1c:	e7fc      	b.n	8002c18 <HAL_LTDC_SetAddress+0x3c>
	...

08002c20 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c20:	4a02      	ldr	r2, [pc, #8]	; (8002c2c <HAL_PWR_EnableBkUpAccess+0xc>)
 8002c22:	6813      	ldr	r3, [r2, #0]
 8002c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c28:	6013      	str	r3, [r2, #0]
}
 8002c2a:	4770      	bx	lr
 8002c2c:	40007000 	.word	0x40007000

08002c30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c30:	b510      	push	{r4, lr}
 8002c32:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c34:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <HAL_PWREx_EnableOverDrive+0x74>)
 8002c36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c38:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c3c:	641a      	str	r2, [r3, #64]	; 0x40
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c44:	9301      	str	r3, [sp, #4]
 8002c46:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c48:	4a17      	ldr	r2, [pc, #92]	; (8002ca8 <HAL_PWREx_EnableOverDrive+0x78>)
 8002c4a:	6813      	ldr	r3, [r2, #0]
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c50:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c52:	f7fe ff0d 	bl	8001a70 <HAL_GetTick>
 8002c56:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c58:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <HAL_PWREx_EnableOverDrive+0x78>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002c60:	d108      	bne.n	8002c74 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c62:	f7fe ff05 	bl	8001a70 <HAL_GetTick>
 8002c66:	1b00      	subs	r0, r0, r4
 8002c68:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002c6c:	d9f4      	bls.n	8002c58 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8002c6e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8002c70:	b002      	add	sp, #8
 8002c72:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c74:	4a0c      	ldr	r2, [pc, #48]	; (8002ca8 <HAL_PWREx_EnableOverDrive+0x78>)
 8002c76:	6813      	ldr	r3, [r2, #0]
 8002c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c7c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8002c7e:	f7fe fef7 	bl	8001a70 <HAL_GetTick>
 8002c82:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c84:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <HAL_PWREx_EnableOverDrive+0x78>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c8c:	d107      	bne.n	8002c9e <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c8e:	f7fe feef 	bl	8001a70 <HAL_GetTick>
 8002c92:	1b00      	subs	r0, r0, r4
 8002c94:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002c98:	d9f4      	bls.n	8002c84 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8002c9a:	2003      	movs	r0, #3
 8002c9c:	e7e8      	b.n	8002c70 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	e7e6      	b.n	8002c70 <HAL_PWREx_EnableOverDrive+0x40>
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40007000 	.word	0x40007000

08002cac <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cac:	2800      	cmp	r0, #0
 8002cae:	f000 81ff 	beq.w	80030b0 <HAL_RCC_OscConfig+0x404>
{
 8002cb2:	b570      	push	{r4, r5, r6, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb8:	6803      	ldr	r3, [r0, #0]
 8002cba:	f013 0f01 	tst.w	r3, #1
 8002cbe:	d029      	beq.n	8002d14 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cc0:	4b95      	ldr	r3, [pc, #596]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 030c 	and.w	r3, r3, #12
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d01a      	beq.n	8002d02 <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ccc:	4b92      	ldr	r3, [pc, #584]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d00f      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cd8:	6863      	ldr	r3, [r4, #4]
 8002cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cde:	d040      	beq.n	8002d62 <HAL_RCC_OscConfig+0xb6>
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d154      	bne.n	8002d8e <HAL_RCC_OscConfig+0xe2>
 8002ce4:	4b8c      	ldr	r3, [pc, #560]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	e039      	b.n	8002d6c <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cf8:	4b87      	ldr	r3, [pc, #540]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002d00:	d0ea      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d02:	4b85      	ldr	r3, [pc, #532]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002d0a:	d003      	beq.n	8002d14 <HAL_RCC_OscConfig+0x68>
 8002d0c:	6863      	ldr	r3, [r4, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 81d0 	beq.w	80030b4 <HAL_RCC_OscConfig+0x408>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	f013 0f02 	tst.w	r3, #2
 8002d1a:	d074      	beq.n	8002e06 <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d1c:	4b7e      	ldr	r3, [pc, #504]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f013 0f0c 	tst.w	r3, #12
 8002d24:	d05e      	beq.n	8002de4 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d26:	4b7c      	ldr	r3, [pc, #496]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d053      	beq.n	8002dda <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d32:	68e3      	ldr	r3, [r4, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 8089 	beq.w	8002e4c <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d3a:	4a77      	ldr	r2, [pc, #476]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	6813      	ldr	r3, [r2, #0]
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fe fe94 	bl	8001a70 <HAL_GetTick>
 8002d48:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4a:	4b73      	ldr	r3, [pc, #460]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f013 0f02 	tst.w	r3, #2
 8002d52:	d172      	bne.n	8002e3a <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d54:	f7fe fe8c 	bl	8001a70 <HAL_GetTick>
 8002d58:	1b40      	subs	r0, r0, r5
 8002d5a:	2802      	cmp	r0, #2
 8002d5c:	d9f5      	bls.n	8002d4a <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8002d5e:	2003      	movs	r0, #3
 8002d60:	e1ad      	b.n	80030be <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d62:	4a6d      	ldr	r2, [pc, #436]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	6813      	ldr	r3, [r2, #0]
 8002d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6a:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d6c:	6863      	ldr	r3, [r4, #4]
 8002d6e:	b32b      	cbz	r3, 8002dbc <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8002d70:	f7fe fe7e 	bl	8001a70 <HAL_GetTick>
 8002d74:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d76:	4b68      	ldr	r3, [pc, #416]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002d7e:	d1c9      	bne.n	8002d14 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d80:	f7fe fe76 	bl	8001a70 <HAL_GetTick>
 8002d84:	1b40      	subs	r0, r0, r5
 8002d86:	2864      	cmp	r0, #100	; 0x64
 8002d88:	d9f5      	bls.n	8002d76 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8002d8a:	2003      	movs	r0, #3
 8002d8c:	e197      	b.n	80030be <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d92:	d009      	beq.n	8002da8 <HAL_RCC_OscConfig+0xfc>
 8002d94:	4b60      	ldr	r3, [pc, #384]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	e7e1      	b.n	8002d6c <HAL_RCC_OscConfig+0xc0>
 8002da8:	4b5b      	ldr	r3, [pc, #364]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	e7d7      	b.n	8002d6c <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8002dbc:	f7fe fe58 	bl	8001a70 <HAL_GetTick>
 8002dc0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc2:	4b55      	ldr	r3, [pc, #340]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002dca:	d0a3      	beq.n	8002d14 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dcc:	f7fe fe50 	bl	8001a70 <HAL_GetTick>
 8002dd0:	1b40      	subs	r0, r0, r5
 8002dd2:	2864      	cmp	r0, #100	; 0x64
 8002dd4:	d9f5      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8002dd6:	2003      	movs	r0, #3
 8002dd8:	e171      	b.n	80030be <HAL_RCC_OscConfig+0x412>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dda:	4b4f      	ldr	r3, [pc, #316]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002de2:	d1a6      	bne.n	8002d32 <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de4:	4b4c      	ldr	r3, [pc, #304]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f013 0f02 	tst.w	r3, #2
 8002dec:	d003      	beq.n	8002df6 <HAL_RCC_OscConfig+0x14a>
 8002dee:	68e3      	ldr	r3, [r4, #12]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	f040 8161 	bne.w	80030b8 <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df6:	4a48      	ldr	r2, [pc, #288]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002df8:	6813      	ldr	r3, [r2, #0]
 8002dfa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002dfe:	6921      	ldr	r1, [r4, #16]
 8002e00:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e04:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e06:	6823      	ldr	r3, [r4, #0]
 8002e08:	f013 0f08 	tst.w	r3, #8
 8002e0c:	d046      	beq.n	8002e9c <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e0e:	6963      	ldr	r3, [r4, #20]
 8002e10:	b383      	cbz	r3, 8002e74 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e12:	4a41      	ldr	r2, [pc, #260]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1c:	f7fe fe28 	bl	8001a70 <HAL_GetTick>
 8002e20:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e22:	4b3d      	ldr	r3, [pc, #244]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e26:	f013 0f02 	tst.w	r3, #2
 8002e2a:	d137      	bne.n	8002e9c <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2c:	f7fe fe20 	bl	8001a70 <HAL_GetTick>
 8002e30:	1b40      	subs	r0, r0, r5
 8002e32:	2802      	cmp	r0, #2
 8002e34:	d9f5      	bls.n	8002e22 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8002e36:	2003      	movs	r0, #3
 8002e38:	e141      	b.n	80030be <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3a:	4a37      	ldr	r2, [pc, #220]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	6813      	ldr	r3, [r2, #0]
 8002e3e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002e42:	6921      	ldr	r1, [r4, #16]
 8002e44:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	e7dc      	b.n	8002e06 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8002e4c:	4a32      	ldr	r2, [pc, #200]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002e4e:	6813      	ldr	r3, [r2, #0]
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002e56:	f7fe fe0b 	bl	8001a70 <HAL_GetTick>
 8002e5a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5c:	4b2e      	ldr	r3, [pc, #184]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f013 0f02 	tst.w	r3, #2
 8002e64:	d0cf      	beq.n	8002e06 <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e66:	f7fe fe03 	bl	8001a70 <HAL_GetTick>
 8002e6a:	1b40      	subs	r0, r0, r5
 8002e6c:	2802      	cmp	r0, #2
 8002e6e:	d9f5      	bls.n	8002e5c <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8002e70:	2003      	movs	r0, #3
 8002e72:	e124      	b.n	80030be <HAL_RCC_OscConfig+0x412>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e74:	4a28      	ldr	r2, [pc, #160]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002e76:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7e:	f7fe fdf7 	bl	8001a70 <HAL_GetTick>
 8002e82:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e84:	4b24      	ldr	r3, [pc, #144]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e88:	f013 0f02 	tst.w	r3, #2
 8002e8c:	d006      	beq.n	8002e9c <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e8e:	f7fe fdef 	bl	8001a70 <HAL_GetTick>
 8002e92:	1b40      	subs	r0, r0, r5
 8002e94:	2802      	cmp	r0, #2
 8002e96:	d9f5      	bls.n	8002e84 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8002e98:	2003      	movs	r0, #3
 8002e9a:	e110      	b.n	80030be <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	f013 0f04 	tst.w	r3, #4
 8002ea2:	d07d      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea4:	4b1c      	ldr	r3, [pc, #112]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002eac:	d11e      	bne.n	8002eec <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eae:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eb2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	9301      	str	r3, [sp, #4]
 8002ec0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002ec2:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec4:	4b15      	ldr	r3, [pc, #84]	; (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ecc:	d010      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ece:	68a3      	ldr	r3, [r4, #8]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d025      	beq.n	8002f20 <HAL_RCC_OscConfig+0x274>
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d13b      	bne.n	8002f50 <HAL_RCC_OscConfig+0x2a4>
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002eda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002edc:	f022 0201 	bic.w	r2, r2, #1
 8002ee0:	671a      	str	r2, [r3, #112]	; 0x70
 8002ee2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ee4:	f022 0204 	bic.w	r2, r2, #4
 8002ee8:	671a      	str	r2, [r3, #112]	; 0x70
 8002eea:	e01e      	b.n	8002f2a <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 8002eec:	2500      	movs	r5, #0
 8002eee:	e7e9      	b.n	8002ec4 <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 8002ef0:	4a0a      	ldr	r2, [pc, #40]	; (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002ef2:	6813      	ldr	r3, [r2, #0]
 8002ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002efa:	f7fe fdb9 	bl	8001a70 <HAL_GetTick>
 8002efe:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f08:	d1e1      	bne.n	8002ece <HAL_RCC_OscConfig+0x222>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f0a:	f7fe fdb1 	bl	8001a70 <HAL_GetTick>
 8002f0e:	1b80      	subs	r0, r0, r6
 8002f10:	2864      	cmp	r0, #100	; 0x64
 8002f12:	d9f5      	bls.n	8002f00 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8002f14:	2003      	movs	r0, #3
 8002f16:	e0d2      	b.n	80030be <HAL_RCC_OscConfig+0x412>
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f20:	4a6e      	ldr	r2, [pc, #440]	; (80030dc <HAL_RCC_OscConfig+0x430>)
 8002f22:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f2a:	68a3      	ldr	r3, [r4, #8]
 8002f2c:	b333      	cbz	r3, 8002f7c <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2e:	f7fe fd9f 	bl	8001a70 <HAL_GetTick>
 8002f32:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f34:	4b69      	ldr	r3, [pc, #420]	; (80030dc <HAL_RCC_OscConfig+0x430>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f38:	f013 0f02 	tst.w	r3, #2
 8002f3c:	d12f      	bne.n	8002f9e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3e:	f7fe fd97 	bl	8001a70 <HAL_GetTick>
 8002f42:	1b80      	subs	r0, r0, r6
 8002f44:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f48:	4298      	cmp	r0, r3
 8002f4a:	d9f3      	bls.n	8002f34 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002f4c:	2003      	movs	r0, #3
 8002f4e:	e0b6      	b.n	80030be <HAL_RCC_OscConfig+0x412>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f50:	2b05      	cmp	r3, #5
 8002f52:	d009      	beq.n	8002f68 <HAL_RCC_OscConfig+0x2bc>
 8002f54:	4b61      	ldr	r3, [pc, #388]	; (80030dc <HAL_RCC_OscConfig+0x430>)
 8002f56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f58:	f022 0201 	bic.w	r2, r2, #1
 8002f5c:	671a      	str	r2, [r3, #112]	; 0x70
 8002f5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f60:	f022 0204 	bic.w	r2, r2, #4
 8002f64:	671a      	str	r2, [r3, #112]	; 0x70
 8002f66:	e7e0      	b.n	8002f2a <HAL_RCC_OscConfig+0x27e>
 8002f68:	4b5c      	ldr	r3, [pc, #368]	; (80030dc <HAL_RCC_OscConfig+0x430>)
 8002f6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f6c:	f042 0204 	orr.w	r2, r2, #4
 8002f70:	671a      	str	r2, [r3, #112]	; 0x70
 8002f72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f74:	f042 0201 	orr.w	r2, r2, #1
 8002f78:	671a      	str	r2, [r3, #112]	; 0x70
 8002f7a:	e7d6      	b.n	8002f2a <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7c:	f7fe fd78 	bl	8001a70 <HAL_GetTick>
 8002f80:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f82:	4b56      	ldr	r3, [pc, #344]	; (80030dc <HAL_RCC_OscConfig+0x430>)
 8002f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f86:	f013 0f02 	tst.w	r3, #2
 8002f8a:	d008      	beq.n	8002f9e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8c:	f7fe fd70 	bl	8001a70 <HAL_GetTick>
 8002f90:	1b80      	subs	r0, r0, r6
 8002f92:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f96:	4298      	cmp	r0, r3
 8002f98:	d9f3      	bls.n	8002f82 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8002f9a:	2003      	movs	r0, #3
 8002f9c:	e08f      	b.n	80030be <HAL_RCC_OscConfig+0x412>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f9e:	b9fd      	cbnz	r5, 8002fe0 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fa0:	69a3      	ldr	r3, [r4, #24]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 808a 	beq.w	80030bc <HAL_RCC_OscConfig+0x410>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fa8:	4a4c      	ldr	r2, [pc, #304]	; (80030dc <HAL_RCC_OscConfig+0x430>)
 8002faa:	6892      	ldr	r2, [r2, #8]
 8002fac:	f002 020c 	and.w	r2, r2, #12
 8002fb0:	2a08      	cmp	r2, #8
 8002fb2:	d058      	beq.n	8003066 <HAL_RCC_OscConfig+0x3ba>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d019      	beq.n	8002fec <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb8:	4a48      	ldr	r2, [pc, #288]	; (80030dc <HAL_RCC_OscConfig+0x430>)
 8002fba:	6813      	ldr	r3, [r2, #0]
 8002fbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc2:	f7fe fd55 	bl	8001a70 <HAL_GetTick>
 8002fc6:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc8:	4b44      	ldr	r3, [pc, #272]	; (80030dc <HAL_RCC_OscConfig+0x430>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002fd0:	d047      	beq.n	8003062 <HAL_RCC_OscConfig+0x3b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd2:	f7fe fd4d 	bl	8001a70 <HAL_GetTick>
 8002fd6:	1b00      	subs	r0, r0, r4
 8002fd8:	2802      	cmp	r0, #2
 8002fda:	d9f5      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002fdc:	2003      	movs	r0, #3
 8002fde:	e06e      	b.n	80030be <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe0:	4a3e      	ldr	r2, [pc, #248]	; (80030dc <HAL_RCC_OscConfig+0x430>)
 8002fe2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fea:	e7d9      	b.n	8002fa0 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8002fec:	4a3b      	ldr	r2, [pc, #236]	; (80030dc <HAL_RCC_OscConfig+0x430>)
 8002fee:	6813      	ldr	r3, [r2, #0]
 8002ff0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ff4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002ff6:	f7fe fd3b 	bl	8001a70 <HAL_GetTick>
 8002ffa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffc:	4b37      	ldr	r3, [pc, #220]	; (80030dc <HAL_RCC_OscConfig+0x430>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003004:	d006      	beq.n	8003014 <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003006:	f7fe fd33 	bl	8001a70 <HAL_GetTick>
 800300a:	1b40      	subs	r0, r0, r5
 800300c:	2802      	cmp	r0, #2
 800300e:	d9f5      	bls.n	8002ffc <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8003010:	2003      	movs	r0, #3
 8003012:	e054      	b.n	80030be <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003014:	69e3      	ldr	r3, [r4, #28]
 8003016:	6a22      	ldr	r2, [r4, #32]
 8003018:	4313      	orrs	r3, r2
 800301a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800301c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003020:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003022:	0852      	lsrs	r2, r2, #1
 8003024:	3a01      	subs	r2, #1
 8003026:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800302a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800302c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003030:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003034:	4a29      	ldr	r2, [pc, #164]	; (80030dc <HAL_RCC_OscConfig+0x430>)
 8003036:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8003038:	6813      	ldr	r3, [r2, #0]
 800303a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800303e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003040:	f7fe fd16 	bl	8001a70 <HAL_GetTick>
 8003044:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003046:	4b25      	ldr	r3, [pc, #148]	; (80030dc <HAL_RCC_OscConfig+0x430>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800304e:	d106      	bne.n	800305e <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003050:	f7fe fd0e 	bl	8001a70 <HAL_GetTick>
 8003054:	1b00      	subs	r0, r0, r4
 8003056:	2802      	cmp	r0, #2
 8003058:	d9f5      	bls.n	8003046 <HAL_RCC_OscConfig+0x39a>
            return HAL_TIMEOUT;
 800305a:	2003      	movs	r0, #3
 800305c:	e02f      	b.n	80030be <HAL_RCC_OscConfig+0x412>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800305e:	2000      	movs	r0, #0
 8003060:	e02d      	b.n	80030be <HAL_RCC_OscConfig+0x412>
 8003062:	2000      	movs	r0, #0
 8003064:	e02b      	b.n	80030be <HAL_RCC_OscConfig+0x412>
      pll_config = RCC->PLLCFGR;
 8003066:	4a1d      	ldr	r2, [pc, #116]	; (80030dc <HAL_RCC_OscConfig+0x430>)
 8003068:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306a:	2b01      	cmp	r3, #1
 800306c:	d029      	beq.n	80030c2 <HAL_RCC_OscConfig+0x416>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306e:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003072:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003074:	428b      	cmp	r3, r1
 8003076:	d126      	bne.n	80030c6 <HAL_RCC_OscConfig+0x41a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003078:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 800307c:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307e:	428b      	cmp	r3, r1
 8003080:	d123      	bne.n	80030ca <HAL_RCC_OscConfig+0x41e>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003082:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003084:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003088:	4013      	ands	r3, r2
 800308a:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800308e:	d11e      	bne.n	80030ce <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003090:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8003094:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003096:	085b      	lsrs	r3, r3, #1
 8003098:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800309a:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800309e:	d118      	bne.n	80030d2 <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030a0:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80030a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030a6:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 80030aa:	d114      	bne.n	80030d6 <HAL_RCC_OscConfig+0x42a>
  return HAL_OK;
 80030ac:	2000      	movs	r0, #0
 80030ae:	e006      	b.n	80030be <HAL_RCC_OscConfig+0x412>
    return HAL_ERROR;
 80030b0:	2001      	movs	r0, #1
}
 80030b2:	4770      	bx	lr
        return HAL_ERROR;
 80030b4:	2001      	movs	r0, #1
 80030b6:	e002      	b.n	80030be <HAL_RCC_OscConfig+0x412>
        return HAL_ERROR;
 80030b8:	2001      	movs	r0, #1
 80030ba:	e000      	b.n	80030be <HAL_RCC_OscConfig+0x412>
  return HAL_OK;
 80030bc:	2000      	movs	r0, #0
}
 80030be:	b002      	add	sp, #8
 80030c0:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80030c2:	2001      	movs	r0, #1
 80030c4:	e7fb      	b.n	80030be <HAL_RCC_OscConfig+0x412>
 80030c6:	2001      	movs	r0, #1
 80030c8:	e7f9      	b.n	80030be <HAL_RCC_OscConfig+0x412>
 80030ca:	2001      	movs	r0, #1
 80030cc:	e7f7      	b.n	80030be <HAL_RCC_OscConfig+0x412>
 80030ce:	2001      	movs	r0, #1
 80030d0:	e7f5      	b.n	80030be <HAL_RCC_OscConfig+0x412>
 80030d2:	2001      	movs	r0, #1
 80030d4:	e7f3      	b.n	80030be <HAL_RCC_OscConfig+0x412>
 80030d6:	2001      	movs	r0, #1
 80030d8:	e7f1      	b.n	80030be <HAL_RCC_OscConfig+0x412>
 80030da:	bf00      	nop
 80030dc:	40023800 	.word	0x40023800

080030e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e0:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030e2:	4b25      	ldr	r3, [pc, #148]	; (8003178 <HAL_RCC_GetSysClockFreq+0x98>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 030c 	and.w	r3, r3, #12
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d03f      	beq.n	800316e <HAL_RCC_GetSysClockFreq+0x8e>
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d13f      	bne.n	8003172 <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030f2:	4b21      	ldr	r3, [pc, #132]	; (8003178 <HAL_RCC_GetSysClockFreq+0x98>)
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003100:	d012      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003102:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <HAL_RCC_GetSysClockFreq+0x98>)
 8003104:	6859      	ldr	r1, [r3, #4]
 8003106:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800310a:	481c      	ldr	r0, [pc, #112]	; (800317c <HAL_RCC_GetSysClockFreq+0x9c>)
 800310c:	2300      	movs	r3, #0
 800310e:	fba1 0100 	umull	r0, r1, r1, r0
 8003112:	f7fd f879 	bl	8000208 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003116:	4b18      	ldr	r3, [pc, #96]	; (8003178 <HAL_RCC_GetSysClockFreq+0x98>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800311e:	3301      	adds	r3, #1
 8003120:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8003122:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003126:	e025      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003128:	4b13      	ldr	r3, [pc, #76]	; (8003178 <HAL_RCC_GetSysClockFreq+0x98>)
 800312a:	6859      	ldr	r1, [r3, #4]
 800312c:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8003130:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8003134:	ebb1 000c 	subs.w	r0, r1, ip
 8003138:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800313c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003140:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003144:	0181      	lsls	r1, r0, #6
 8003146:	1a09      	subs	r1, r1, r0
 8003148:	eb63 030e 	sbc.w	r3, r3, lr
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003152:	00c9      	lsls	r1, r1, #3
 8003154:	eb11 0c0c 	adds.w	ip, r1, ip
 8003158:	f143 0300 	adc.w	r3, r3, #0
 800315c:	0299      	lsls	r1, r3, #10
 800315e:	2300      	movs	r3, #0
 8003160:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003164:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003168:	f7fd f84e 	bl	8000208 <__aeabi_uldivmod>
 800316c:	e7d3      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 800316e:	4803      	ldr	r0, [pc, #12]	; (800317c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003170:	e000      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003172:	4803      	ldr	r0, [pc, #12]	; (8003180 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003174:	bd08      	pop	{r3, pc}
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800
 800317c:	017d7840 	.word	0x017d7840
 8003180:	00f42400 	.word	0x00f42400

08003184 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003184:	2800      	cmp	r0, #0
 8003186:	f000 80a0 	beq.w	80032ca <HAL_RCC_ClockConfig+0x146>
{
 800318a:	b570      	push	{r4, r5, r6, lr}
 800318c:	460d      	mov	r5, r1
 800318e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003190:	4b52      	ldr	r3, [pc, #328]	; (80032dc <HAL_RCC_ClockConfig+0x158>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	428b      	cmp	r3, r1
 800319a:	d20b      	bcs.n	80031b4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319c:	4a4f      	ldr	r2, [pc, #316]	; (80032dc <HAL_RCC_ClockConfig+0x158>)
 800319e:	6813      	ldr	r3, [r2, #0]
 80031a0:	f023 030f 	bic.w	r3, r3, #15
 80031a4:	430b      	orrs	r3, r1
 80031a6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a8:	6813      	ldr	r3, [r2, #0]
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	428b      	cmp	r3, r1
 80031b0:	f040 808d 	bne.w	80032ce <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b4:	6823      	ldr	r3, [r4, #0]
 80031b6:	f013 0f02 	tst.w	r3, #2
 80031ba:	d017      	beq.n	80031ec <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031bc:	f013 0f04 	tst.w	r3, #4
 80031c0:	d004      	beq.n	80031cc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031c2:	4a47      	ldr	r2, [pc, #284]	; (80032e0 <HAL_RCC_ClockConfig+0x15c>)
 80031c4:	6893      	ldr	r3, [r2, #8]
 80031c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ca:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	f013 0f08 	tst.w	r3, #8
 80031d2:	d004      	beq.n	80031de <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031d4:	4a42      	ldr	r2, [pc, #264]	; (80032e0 <HAL_RCC_ClockConfig+0x15c>)
 80031d6:	6893      	ldr	r3, [r2, #8]
 80031d8:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031dc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031de:	4a40      	ldr	r2, [pc, #256]	; (80032e0 <HAL_RCC_ClockConfig+0x15c>)
 80031e0:	6893      	ldr	r3, [r2, #8]
 80031e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031e6:	68a1      	ldr	r1, [r4, #8]
 80031e8:	430b      	orrs	r3, r1
 80031ea:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ec:	6823      	ldr	r3, [r4, #0]
 80031ee:	f013 0f01 	tst.w	r3, #1
 80031f2:	d031      	beq.n	8003258 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f4:	6863      	ldr	r3, [r4, #4]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d020      	beq.n	800323c <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d025      	beq.n	800324a <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fe:	4a38      	ldr	r2, [pc, #224]	; (80032e0 <HAL_RCC_ClockConfig+0x15c>)
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	f012 0f02 	tst.w	r2, #2
 8003206:	d064      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003208:	4935      	ldr	r1, [pc, #212]	; (80032e0 <HAL_RCC_ClockConfig+0x15c>)
 800320a:	688a      	ldr	r2, [r1, #8]
 800320c:	f022 0203 	bic.w	r2, r2, #3
 8003210:	4313      	orrs	r3, r2
 8003212:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003214:	f7fe fc2c 	bl	8001a70 <HAL_GetTick>
 8003218:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321a:	4b31      	ldr	r3, [pc, #196]	; (80032e0 <HAL_RCC_ClockConfig+0x15c>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	6862      	ldr	r2, [r4, #4]
 8003224:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003228:	d016      	beq.n	8003258 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800322a:	f7fe fc21 	bl	8001a70 <HAL_GetTick>
 800322e:	1b80      	subs	r0, r0, r6
 8003230:	f241 3388 	movw	r3, #5000	; 0x1388
 8003234:	4298      	cmp	r0, r3
 8003236:	d9f0      	bls.n	800321a <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8003238:	2003      	movs	r0, #3
 800323a:	e045      	b.n	80032c8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323c:	4a28      	ldr	r2, [pc, #160]	; (80032e0 <HAL_RCC_ClockConfig+0x15c>)
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003244:	d1e0      	bne.n	8003208 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8003246:	2001      	movs	r0, #1
 8003248:	e03e      	b.n	80032c8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324a:	4a25      	ldr	r2, [pc, #148]	; (80032e0 <HAL_RCC_ClockConfig+0x15c>)
 800324c:	6812      	ldr	r2, [r2, #0]
 800324e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003252:	d1d9      	bne.n	8003208 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8003254:	2001      	movs	r0, #1
 8003256:	e037      	b.n	80032c8 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003258:	4b20      	ldr	r3, [pc, #128]	; (80032dc <HAL_RCC_ClockConfig+0x158>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	42ab      	cmp	r3, r5
 8003262:	d90a      	bls.n	800327a <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003264:	4a1d      	ldr	r2, [pc, #116]	; (80032dc <HAL_RCC_ClockConfig+0x158>)
 8003266:	6813      	ldr	r3, [r2, #0]
 8003268:	f023 030f 	bic.w	r3, r3, #15
 800326c:	432b      	orrs	r3, r5
 800326e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003270:	6813      	ldr	r3, [r2, #0]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	42ab      	cmp	r3, r5
 8003278:	d12d      	bne.n	80032d6 <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	f013 0f04 	tst.w	r3, #4
 8003280:	d006      	beq.n	8003290 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003282:	4a17      	ldr	r2, [pc, #92]	; (80032e0 <HAL_RCC_ClockConfig+0x15c>)
 8003284:	6893      	ldr	r3, [r2, #8]
 8003286:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800328a:	68e1      	ldr	r1, [r4, #12]
 800328c:	430b      	orrs	r3, r1
 800328e:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	f013 0f08 	tst.w	r3, #8
 8003296:	d007      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003298:	4a11      	ldr	r2, [pc, #68]	; (80032e0 <HAL_RCC_ClockConfig+0x15c>)
 800329a:	6893      	ldr	r3, [r2, #8]
 800329c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80032a0:	6921      	ldr	r1, [r4, #16]
 80032a2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80032a6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032a8:	f7ff ff1a 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 80032ac:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <HAL_RCC_ClockConfig+0x15c>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80032b4:	4a0b      	ldr	r2, [pc, #44]	; (80032e4 <HAL_RCC_ClockConfig+0x160>)
 80032b6:	5cd3      	ldrb	r3, [r2, r3]
 80032b8:	40d8      	lsrs	r0, r3
 80032ba:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_RCC_ClockConfig+0x164>)
 80032bc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80032be:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <HAL_RCC_ClockConfig+0x168>)
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	f7fe fb23 	bl	800190c <HAL_InitTick>
  return HAL_OK;
 80032c6:	2000      	movs	r0, #0
}
 80032c8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80032ca:	2001      	movs	r0, #1
}
 80032cc:	4770      	bx	lr
      return HAL_ERROR;
 80032ce:	2001      	movs	r0, #1
 80032d0:	e7fa      	b.n	80032c8 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 80032d2:	2001      	movs	r0, #1
 80032d4:	e7f8      	b.n	80032c8 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 80032d6:	2001      	movs	r0, #1
 80032d8:	e7f6      	b.n	80032c8 <HAL_RCC_ClockConfig+0x144>
 80032da:	bf00      	nop
 80032dc:	40023c00 	.word	0x40023c00
 80032e0:	40023800 	.word	0x40023800
 80032e4:	080043f8 	.word	0x080043f8
 80032e8:	20000000 	.word	0x20000000
 80032ec:	20000008 	.word	0x20000008

080032f0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80032f0:	4b01      	ldr	r3, [pc, #4]	; (80032f8 <HAL_RCC_GetHCLKFreq+0x8>)
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20000000 	.word	0x20000000

080032fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032fc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032fe:	f7ff fff7 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 8003302:	4b04      	ldr	r3, [pc, #16]	; (8003314 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800330a:	4a03      	ldr	r2, [pc, #12]	; (8003318 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800330c:	5cd3      	ldrb	r3, [r2, r3]
}
 800330e:	40d8      	lsrs	r0, r3
 8003310:	bd08      	pop	{r3, pc}
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800
 8003318:	08004408 	.word	0x08004408

0800331c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800331c:	230f      	movs	r3, #15
 800331e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_RCC_GetClockConfig+0x34>)
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	f002 0203 	and.w	r2, r2, #3
 8003328:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003330:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8003338:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	08db      	lsrs	r3, r3, #3
 800333e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003342:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003344:	4b03      	ldr	r3, [pc, #12]	; (8003354 <HAL_RCC_GetClockConfig+0x38>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	600b      	str	r3, [r1, #0]
}
 800334e:	4770      	bx	lr
 8003350:	40023800 	.word	0x40023800
 8003354:	40023c00 	.word	0x40023c00

08003358 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800335a:	b083      	sub	sp, #12
 800335c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800335e:	6806      	ldr	r6, [r0, #0]
 8003360:	f016 0601 	ands.w	r6, r6, #1
 8003364:	d00d      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003366:	4ba7      	ldr	r3, [pc, #668]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003374:	430a      	orrs	r2, r1
 8003376:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003378:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 8139 	beq.w	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  uint32_t plli2sused = 0;
 8003380:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003382:	6825      	ldr	r5, [r4, #0]
 8003384:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 8003388:	d011      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800338a:	4a9e      	ldr	r2, [pc, #632]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800338c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003390:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003394:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003396:	430b      	orrs	r3, r1
 8003398:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800339c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800339e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033a2:	f000 8128 	beq.w	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 8127 	beq.w	80035fa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  uint32_t pllsaiused = 0;
 80033ac:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80033b4:	d00f      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033b6:	4a93      	ldr	r2, [pc, #588]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80033b8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80033bc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80033c0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80033c2:	430b      	orrs	r3, r1
 80033c4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ce:	f000 8116 	beq.w	80035fe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033d2:	b903      	cbnz	r3, 80033d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 80033d4:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033d6:	6823      	ldr	r3, [r4, #0]
 80033d8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80033dc:	d000      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 80033de:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033e0:	f013 0f20 	tst.w	r3, #32
 80033e4:	f040 8110 	bne.w	8003608 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	f013 0f10 	tst.w	r3, #16
 80033ee:	d00c      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033f0:	4b84      	ldr	r3, [pc, #528]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80033f2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80033f6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80033fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80033fe:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003402:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003404:	430a      	orrs	r2, r1
 8003406:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800340a:	6823      	ldr	r3, [r4, #0]
 800340c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003410:	d008      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003412:	4a7c      	ldr	r2, [pc, #496]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003414:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003418:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800341c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800341e:	430b      	orrs	r3, r1
 8003420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800342a:	d008      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800342c:	4a75      	ldr	r2, [pc, #468]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800342e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003432:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003436:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003438:	430b      	orrs	r3, r1
 800343a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003444:	d008      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003446:	4a6f      	ldr	r2, [pc, #444]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003448:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800344c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003450:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003452:	430b      	orrs	r3, r1
 8003454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800345e:	d008      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003460:	4a68      	ldr	r2, [pc, #416]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003462:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003466:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800346a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800346c:	430b      	orrs	r3, r1
 800346e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003478:	d008      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800347a:	4a62      	ldr	r2, [pc, #392]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800347c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003480:	f023 0303 	bic.w	r3, r3, #3
 8003484:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003486:	430b      	orrs	r3, r1
 8003488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003492:	d008      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003494:	4a5b      	ldr	r2, [pc, #364]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003496:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800349a:	f023 030c 	bic.w	r3, r3, #12
 800349e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80034a0:	430b      	orrs	r3, r1
 80034a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80034ac:	d008      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034ae:	4a55      	ldr	r2, [pc, #340]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80034b0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80034b4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80034b8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80034ba:	430b      	orrs	r3, r1
 80034bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034c0:	6823      	ldr	r3, [r4, #0]
 80034c2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80034c6:	d008      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034c8:	4a4e      	ldr	r2, [pc, #312]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80034ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80034ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80034d2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80034d4:	430b      	orrs	r3, r1
 80034d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80034e0:	d008      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034e2:	4a48      	ldr	r2, [pc, #288]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80034e4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80034e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ec:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80034ee:	430b      	orrs	r3, r1
 80034f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80034f4:	6823      	ldr	r3, [r4, #0]
 80034f6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80034fa:	d008      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80034fc:	4a41      	ldr	r2, [pc, #260]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80034fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003502:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003506:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003508:	430b      	orrs	r3, r1
 800350a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800350e:	6823      	ldr	r3, [r4, #0]
 8003510:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003514:	d008      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003516:	4a3b      	ldr	r2, [pc, #236]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003518:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800351c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003520:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003522:	430b      	orrs	r3, r1
 8003524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800352e:	d008      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003530:	4a34      	ldr	r2, [pc, #208]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003532:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003536:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800353a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800353c:	430b      	orrs	r3, r1
 800353e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003548:	d008      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800354a:	4a2e      	ldr	r2, [pc, #184]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800354c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003550:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003554:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003556:	430b      	orrs	r3, r1
 8003558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003562:	d00d      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003564:	4a27      	ldr	r2, [pc, #156]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003566:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800356a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800356e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003570:	430b      	orrs	r3, r1
 8003572:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003576:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003578:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800357c:	f000 80aa 	beq.w	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	f013 0f08 	tst.w	r3, #8
 8003586:	d000      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 8003588:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800358a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800358e:	d008      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003590:	4a1c      	ldr	r2, [pc, #112]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003592:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003596:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800359a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800359c:	430b      	orrs	r3, r1
 800359e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80035a8:	d009      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035aa:	4a16      	ldr	r2, [pc, #88]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80035ac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80035b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80035b8:	430b      	orrs	r3, r1
 80035ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80035be:	b926      	cbnz	r6, 80035ca <HAL_RCCEx_PeriphCLKConfig+0x272>
 80035c0:	6823      	ldr	r3, [r4, #0]
 80035c2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80035c6:	f000 8105 	beq.w	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035ca:	4a0e      	ldr	r2, [pc, #56]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80035cc:	6813      	ldr	r3, [r2, #0]
 80035ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d4:	f7fe fa4c 	bl	8001a70 <HAL_GetTick>
 80035d8:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035da:	4b0a      	ldr	r3, [pc, #40]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80035e2:	d079      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035e4:	f7fe fa44 	bl	8001a70 <HAL_GetTick>
 80035e8:	1b80      	subs	r0, r0, r6
 80035ea:	2864      	cmp	r0, #100	; 0x64
 80035ec:	d9f5      	bls.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x282>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035ee:	2003      	movs	r0, #3
 80035f0:	e0f3      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x482>
      plli2sused = 1;
 80035f2:	2601      	movs	r6, #1
 80035f4:	e6c5      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 80035f6:	2601      	movs	r6, #1
 80035f8:	e6d5      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 80035fa:	2501      	movs	r5, #1
 80035fc:	e6d7      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 80035fe:	2601      	movs	r6, #1
 8003600:	e6e7      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003602:	bf00      	nop
 8003604:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 8003608:	4b7f      	ldr	r3, [pc, #508]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800360a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800360c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003618:	9301      	str	r3, [sp, #4]
 800361a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800361c:	4a7b      	ldr	r2, [pc, #492]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 800361e:	6813      	ldr	r3, [r2, #0]
 8003620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003624:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003626:	f7fe fa23 	bl	8001a70 <HAL_GetTick>
 800362a:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800362c:	4b77      	ldr	r3, [pc, #476]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003634:	d106      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003636:	f7fe fa1b 	bl	8001a70 <HAL_GetTick>
 800363a:	1bc0      	subs	r0, r0, r7
 800363c:	2864      	cmp	r0, #100	; 0x64
 800363e:	d9f5      	bls.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        return HAL_TIMEOUT;
 8003640:	2003      	movs	r0, #3
 8003642:	e0ca      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x482>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003644:	4b70      	ldr	r3, [pc, #448]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003648:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800364c:	d015      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x322>
 800364e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003650:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003654:	429a      	cmp	r2, r3
 8003656:	d010      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x322>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003658:	4b6b      	ldr	r3, [pc, #428]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800365a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800365c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003660:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003662:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003666:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003668:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800366a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800366e:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8003670:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003674:	f013 0f01 	tst.w	r3, #1
 8003678:	d112      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x348>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800367a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800367c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003680:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003684:	d01d      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003686:	4a60      	ldr	r2, [pc, #384]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003688:	6893      	ldr	r3, [r2, #8]
 800368a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800368e:	6093      	str	r3, [r2, #8]
 8003690:	495d      	ldr	r1, [pc, #372]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003692:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8003694:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003696:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800369a:	4313      	orrs	r3, r2
 800369c:	670b      	str	r3, [r1, #112]	; 0x70
 800369e:	e6a3      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 80036a0:	f7fe f9e6 	bl	8001a70 <HAL_GetTick>
 80036a4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a6:	4b58      	ldr	r3, [pc, #352]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	f013 0f02 	tst.w	r3, #2
 80036ae:	d1e4      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x322>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b0:	f7fe f9de 	bl	8001a70 <HAL_GetTick>
 80036b4:	1bc0      	subs	r0, r0, r7
 80036b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80036ba:	4298      	cmp	r0, r3
 80036bc:	d9f3      	bls.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
            return HAL_TIMEOUT;
 80036be:	2003      	movs	r0, #3
 80036c0:	e08b      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x482>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036c2:	4851      	ldr	r0, [pc, #324]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80036c4:	6882      	ldr	r2, [r0, #8]
 80036c6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80036ca:	4951      	ldr	r1, [pc, #324]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 80036cc:	4019      	ands	r1, r3
 80036ce:	430a      	orrs	r2, r1
 80036d0:	6082      	str	r2, [r0, #8]
 80036d2:	e7dd      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x338>
      pllsaiused = 1;
 80036d4:	2501      	movs	r5, #1
 80036d6:	e753      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x228>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	f013 0f01 	tst.w	r3, #1
 80036de:	d013      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80036e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036e2:	b98b      	cbnz	r3, 8003708 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036e4:	4a48      	ldr	r2, [pc, #288]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80036e6:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036ea:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80036ee:	6860      	ldr	r0, [r4, #4]
 80036f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036f4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80036f8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80036fc:	430b      	orrs	r3, r1
 80036fe:	68a1      	ldr	r1, [r4, #8]
 8003700:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003704:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800370e:	d003      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003710:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003712:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003716:	d006      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003718:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800371c:	d01e      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x404>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800371e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003724:	d11a      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x404>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003726:	4a38      	ldr	r2, [pc, #224]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003728:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800372c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003730:	6860      	ldr	r0, [r4, #4]
 8003732:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003736:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800373a:	68e0      	ldr	r0, [r4, #12]
 800373c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003740:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003744:	430b      	orrs	r3, r1
 8003746:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800374a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800374e:	f023 031f 	bic.w	r3, r3, #31
 8003752:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003754:	3901      	subs	r1, #1
 8003756:	430b      	orrs	r3, r1
 8003758:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003762:	d011      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003764:	4a28      	ldr	r2, [pc, #160]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003766:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800376a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800376e:	6866      	ldr	r6, [r4, #4]
 8003770:	6923      	ldr	r3, [r4, #16]
 8003772:	041b      	lsls	r3, r3, #16
 8003774:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8003778:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 800377c:	4303      	orrs	r3, r0
 800377e:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003782:	430b      	orrs	r3, r1
 8003784:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003788:	6823      	ldr	r3, [r4, #0]
 800378a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800378e:	d00d      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x454>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003790:	6862      	ldr	r2, [r4, #4]
 8003792:	6923      	ldr	r3, [r4, #16]
 8003794:	041b      	lsls	r3, r3, #16
 8003796:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800379a:	68e2      	ldr	r2, [r4, #12]
 800379c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80037a0:	68a2      	ldr	r2, [r4, #8]
 80037a2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80037a6:	4a18      	ldr	r2, [pc, #96]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80037a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037ac:	4a16      	ldr	r2, [pc, #88]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80037ae:	6813      	ldr	r3, [r2, #0]
 80037b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b6:	f7fe f95b 	bl	8001a70 <HAL_GetTick>
 80037ba:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037bc:	4b12      	ldr	r3, [pc, #72]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80037c4:	d106      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037c6:	f7fe f953 	bl	8001a70 <HAL_GetTick>
 80037ca:	1b80      	subs	r0, r0, r6
 80037cc:	2864      	cmp	r0, #100	; 0x64
 80037ce:	d9f5      	bls.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x464>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037d0:	2003      	movs	r0, #3
 80037d2:	e002      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x482>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80037d4:	2d01      	cmp	r5, #1
 80037d6:	d002      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x486>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80037d8:	2000      	movs	r0, #0
}
 80037da:	b003      	add	sp, #12
 80037dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 80037de:	4a0a      	ldr	r2, [pc, #40]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80037e0:	6813      	ldr	r3, [r2, #0]
 80037e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80037e8:	f7fe f942 	bl	8001a70 <HAL_GetTick>
 80037ec:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80037f6:	d00d      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037f8:	f7fe f93a 	bl	8001a70 <HAL_GetTick>
 80037fc:	1b40      	subs	r0, r0, r5
 80037fe:	2864      	cmp	r0, #100	; 0x64
 8003800:	d9f5      	bls.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x496>
        return HAL_TIMEOUT;
 8003802:	2003      	movs	r0, #3
 8003804:	e7e9      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003806:	bf00      	nop
 8003808:	40023800 	.word	0x40023800
 800380c:	40007000 	.word	0x40007000
 8003810:	0ffffcff 	.word	0x0ffffcff
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800381a:	d001      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 800381c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800381e:	b122      	cbz	r2, 800382a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003820:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003824:	d01d      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x50a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003826:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003828:	b9db      	cbnz	r3, 8003862 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800382a:	4a35      	ldr	r2, [pc, #212]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 800382c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003830:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003834:	6960      	ldr	r0, [r4, #20]
 8003836:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800383a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800383e:	69a0      	ldr	r0, [r4, #24]
 8003840:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003844:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003848:	430b      	orrs	r3, r1
 800384a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800384e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003852:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003856:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003858:	3901      	subs	r1, #1
 800385a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800385e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003868:	d003      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800386a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800386c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003870:	d031      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	f013 0f08 	tst.w	r3, #8
 8003878:	d019      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x556>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800387a:	4a21      	ldr	r2, [pc, #132]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 800387c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003880:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003884:	6960      	ldr	r0, [r4, #20]
 8003886:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800388a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800388e:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003892:	430b      	orrs	r3, r1
 8003894:	69e1      	ldr	r1, [r4, #28]
 8003896:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800389a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800389e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80038a2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80038a6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80038a8:	430b      	orrs	r3, r1
 80038aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 80038ae:	4a14      	ldr	r2, [pc, #80]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 80038b0:	6813      	ldr	r3, [r2, #0]
 80038b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80038b8:	f7fe f8da 	bl	8001a70 <HAL_GetTick>
 80038bc:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038be:	4b10      	ldr	r3, [pc, #64]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80038c6:	d119      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038c8:	f7fe f8d2 	bl	8001a70 <HAL_GetTick>
 80038cc:	1b00      	subs	r0, r0, r4
 80038ce:	2864      	cmp	r0, #100	; 0x64
 80038d0:	d9f5      	bls.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x566>
        return HAL_TIMEOUT;
 80038d2:	2003      	movs	r0, #3
 80038d4:	e781      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x482>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038d6:	4a0a      	ldr	r2, [pc, #40]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 80038d8:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038dc:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80038e0:	6965      	ldr	r5, [r4, #20]
 80038e2:	6a23      	ldr	r3, [r4, #32]
 80038e4:	041b      	lsls	r3, r3, #16
 80038e6:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80038ea:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80038ee:	4303      	orrs	r3, r0
 80038f0:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80038f4:	430b      	orrs	r3, r1
 80038f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80038fa:	e7ba      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x51a>
  return HAL_OK;
 80038fc:	2000      	movs	r0, #0
 80038fe:	e76c      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003900:	40023800 	.word	0x40023800

08003904 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003904:	b538      	push	{r3, r4, r5, lr}
 8003906:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003908:	6802      	ldr	r2, [r0, #0]
 800390a:	68d3      	ldr	r3, [r2, #12]
 800390c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003910:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003912:	f7fe f8ad 	bl	8001a70 <HAL_GetTick>
 8003916:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f013 0f20 	tst.w	r3, #32
 8003920:	d107      	bne.n	8003932 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003922:	f7fe f8a5 	bl	8001a70 <HAL_GetTick>
 8003926:	1b40      	subs	r0, r0, r5
 8003928:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800392c:	d9f4      	bls.n	8003918 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 800392e:	2003      	movs	r0, #3
 8003930:	e000      	b.n	8003934 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8003932:	2000      	movs	r0, #0
}
 8003934:	bd38      	pop	{r3, r4, r5, pc}

08003936 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003936:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003938:	6803      	ldr	r3, [r0, #0]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003940:	d001      	beq.n	8003946 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003942:	2000      	movs	r0, #0
}
 8003944:	bd38      	pop	{r3, r4, r5, pc}
 8003946:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003948:	f04f 32ff 	mov.w	r2, #4294967295
 800394c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800394e:	f7fe f88f 	bl	8001a70 <HAL_GetTick>
 8003952:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f013 0f40 	tst.w	r3, #64	; 0x40
 800395c:	d107      	bne.n	800396e <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800395e:	f7fe f887 	bl	8001a70 <HAL_GetTick>
 8003962:	1b43      	subs	r3, r0, r5
 8003964:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003968:	d9f4      	bls.n	8003954 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 800396a:	2003      	movs	r0, #3
 800396c:	e7ea      	b.n	8003944 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 800396e:	2000      	movs	r0, #0
 8003970:	e7e8      	b.n	8003944 <RTC_EnterInitMode+0xe>
	...

08003974 <HAL_RTC_Init>:
{
 8003974:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8003976:	2800      	cmp	r0, #0
 8003978:	d05a      	beq.n	8003a30 <HAL_RTC_Init+0xbc>
 800397a:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800397c:	7f43      	ldrb	r3, [r0, #29]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d03f      	beq.n	8003a02 <HAL_RTC_Init+0x8e>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003982:	2302      	movs	r3, #2
 8003984:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003986:	6823      	ldr	r3, [r4, #0]
 8003988:	22ca      	movs	r2, #202	; 0xca
 800398a:	625a      	str	r2, [r3, #36]	; 0x24
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	2253      	movs	r2, #83	; 0x53
 8003990:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003992:	4620      	mov	r0, r4
 8003994:	f7ff ffcf 	bl	8003936 <RTC_EnterInitMode>
 8003998:	4605      	mov	r5, r0
 800399a:	2800      	cmp	r0, #0
 800399c:	d135      	bne.n	8003a0a <HAL_RTC_Init+0x96>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800399e:	6822      	ldr	r2, [r4, #0]
 80039a0:	6891      	ldr	r1, [r2, #8]
 80039a2:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <HAL_RTC_Init+0xc0>)
 80039a4:	400b      	ands	r3, r1
 80039a6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80039a8:	6821      	ldr	r1, [r4, #0]
 80039aa:	688a      	ldr	r2, [r1, #8]
 80039ac:	6863      	ldr	r3, [r4, #4]
 80039ae:	6920      	ldr	r0, [r4, #16]
 80039b0:	4303      	orrs	r3, r0
 80039b2:	6960      	ldr	r0, [r4, #20]
 80039b4:	4303      	orrs	r3, r0
 80039b6:	4313      	orrs	r3, r2
 80039b8:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	68e2      	ldr	r2, [r4, #12]
 80039be:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80039c0:	6822      	ldr	r2, [r4, #0]
 80039c2:	6913      	ldr	r3, [r2, #16]
 80039c4:	68a1      	ldr	r1, [r4, #8]
 80039c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80039ca:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80039cc:	6822      	ldr	r2, [r4, #0]
 80039ce:	68d3      	ldr	r3, [r2, #12]
 80039d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039d4:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f013 0f20 	tst.w	r3, #32
 80039de:	d01b      	beq.n	8003a18 <HAL_RTC_Init+0xa4>
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80039e0:	6822      	ldr	r2, [r4, #0]
 80039e2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80039e4:	f023 0308 	bic.w	r3, r3, #8
 80039e8:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80039ea:	6822      	ldr	r2, [r4, #0]
 80039ec:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80039ee:	69a1      	ldr	r1, [r4, #24]
 80039f0:	430b      	orrs	r3, r1
 80039f2:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	22ff      	movs	r2, #255	; 0xff
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80039fa:	2301      	movs	r3, #1
 80039fc:	7763      	strb	r3, [r4, #29]
}
 80039fe:	4628      	mov	r0, r5
 8003a00:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8003a02:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8003a04:	f7fd ff6e 	bl	80018e4 <HAL_RTC_MspInit>
 8003a08:	e7bb      	b.n	8003982 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a0a:	6823      	ldr	r3, [r4, #0]
 8003a0c:	22ff      	movs	r2, #255	; 0xff
 8003a0e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a10:	2304      	movs	r3, #4
 8003a12:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8003a14:	2501      	movs	r5, #1
 8003a16:	e7f2      	b.n	80039fe <HAL_RTC_Init+0x8a>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a18:	4620      	mov	r0, r4
 8003a1a:	f7ff ff73 	bl	8003904 <HAL_RTC_WaitForSynchro>
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	d0de      	beq.n	80039e0 <HAL_RTC_Init+0x6c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	22ff      	movs	r2, #255	; 0xff
 8003a26:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a28:	2304      	movs	r3, #4
 8003a2a:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8003a2c:	2501      	movs	r5, #1
 8003a2e:	e7e6      	b.n	80039fe <HAL_RTC_Init+0x8a>
     return HAL_ERROR;
 8003a30:	2501      	movs	r5, #1
 8003a32:	e7e4      	b.n	80039fe <HAL_RTC_Init+0x8a>
 8003a34:	ff8fffbf 	.word	0xff8fffbf

08003a38 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8003a38:	2300      	movs	r3, #0

  while(Value >= 10)
 8003a3a:	e002      	b.n	8003a42 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8003a3c:	3301      	adds	r3, #1
    Value -= 10;
 8003a3e:	380a      	subs	r0, #10
 8003a40:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8003a42:	2809      	cmp	r0, #9
 8003a44:	d8fa      	bhi.n	8003a3c <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	b2db      	uxtb	r3, r3
}
 8003a4a:	4318      	orrs	r0, r3
 8003a4c:	4770      	bx	lr
	...

08003a50 <HAL_RTC_SetTime>:
{
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8003a52:	7f03      	ldrb	r3, [r0, #28]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d076      	beq.n	8003b46 <HAL_RTC_SetTime+0xf6>
 8003a58:	4604      	mov	r4, r0
 8003a5a:	460e      	mov	r6, r1
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a60:	2302      	movs	r3, #2
 8003a62:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8003a64:	2a00      	cmp	r2, #0
 8003a66:	d145      	bne.n	8003af4 <HAL_RTC_SetTime+0xa4>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003a68:	6803      	ldr	r3, [r0, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003a70:	d101      	bne.n	8003a76 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 8003a72:	2300      	movs	r3, #0
 8003a74:	730b      	strb	r3, [r1, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8003a76:	7830      	ldrb	r0, [r6, #0]
 8003a78:	f7ff ffde 	bl	8003a38 <RTC_ByteToBcd2>
 8003a7c:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8003a7e:	7870      	ldrb	r0, [r6, #1]
 8003a80:	f7ff ffda 	bl	8003a38 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8003a84:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003a88:	78b0      	ldrb	r0, [r6, #2]
 8003a8a:	f7ff ffd5 	bl	8003a38 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8003a8e:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16));
 8003a90:	7b30      	ldrb	r0, [r6, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8003a92:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a96:	6823      	ldr	r3, [r4, #0]
 8003a98:	22ca      	movs	r2, #202	; 0xca
 8003a9a:	625a      	str	r2, [r3, #36]	; 0x24
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	2253      	movs	r2, #83	; 0x53
 8003aa0:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	f7ff ff47 	bl	8003936 <RTC_EnterInitMode>
 8003aa8:	4607      	mov	r7, r0
 8003aaa:	2800      	cmp	r0, #0
 8003aac:	d134      	bne.n	8003b18 <HAL_RTC_SetTime+0xc8>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003aae:	6822      	ldr	r2, [r4, #0]
 8003ab0:	4b26      	ldr	r3, [pc, #152]	; (8003b4c <HAL_RTC_SetTime+0xfc>)
 8003ab2:	402b      	ands	r3, r5
 8003ab4:	6013      	str	r3, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003ab6:	6822      	ldr	r2, [r4, #0]
 8003ab8:	6893      	ldr	r3, [r2, #8]
 8003aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003abe:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003ac0:	6821      	ldr	r1, [r4, #0]
 8003ac2:	688b      	ldr	r3, [r1, #8]
 8003ac4:	6932      	ldr	r2, [r6, #16]
 8003ac6:	6970      	ldr	r0, [r6, #20]
 8003ac8:	4302      	orrs	r2, r0
 8003aca:	4313      	orrs	r3, r2
 8003acc:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003ace:	6822      	ldr	r2, [r4, #0]
 8003ad0:	68d3      	ldr	r3, [r2, #12]
 8003ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ad6:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003ad8:	6823      	ldr	r3, [r4, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f013 0f20 	tst.w	r3, #32
 8003ae0:	d023      	beq.n	8003b2a <HAL_RTC_SetTime+0xda>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	22ff      	movs	r2, #255	; 0xff
 8003ae6:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 8003aec:	2300      	movs	r3, #0
 8003aee:	7723      	strb	r3, [r4, #28]
}
 8003af0:	4638      	mov	r0, r7
 8003af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003af4:	6803      	ldr	r3, [r0, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003afc:	d101      	bne.n	8003b02 <HAL_RTC_SetTime+0xb2>
      sTime->TimeFormat = 0x00;
 8003afe:	2300      	movs	r3, #0
 8003b00:	730b      	strb	r3, [r1, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8003b02:	7833      	ldrb	r3, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8003b04:	7875      	ldrb	r5, [r6, #1]
 8003b06:	022d      	lsls	r5, r5, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8003b08:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8003b0c:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8003b0e:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));
 8003b10:	7b30      	ldrb	r0, [r6, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8003b12:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8003b16:	e7be      	b.n	8003a96 <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	22ff      	movs	r2, #255	; 0xff
 8003b1c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b1e:	2304      	movs	r3, #4
 8003b20:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8003b22:	2300      	movs	r3, #0
 8003b24:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8003b26:	2701      	movs	r7, #1
 8003b28:	e7e2      	b.n	8003af0 <HAL_RTC_SetTime+0xa0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f7ff feea 	bl	8003904 <HAL_RTC_WaitForSynchro>
 8003b30:	2800      	cmp	r0, #0
 8003b32:	d0d6      	beq.n	8003ae2 <HAL_RTC_SetTime+0x92>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b34:	6823      	ldr	r3, [r4, #0]
 8003b36:	22ff      	movs	r2, #255	; 0xff
 8003b38:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003b3a:	2304      	movs	r3, #4
 8003b3c:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8003b3e:	2300      	movs	r3, #0
 8003b40:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8003b42:	2701      	movs	r7, #1
 8003b44:	e7d4      	b.n	8003af0 <HAL_RTC_SetTime+0xa0>
  __HAL_LOCK(hrtc);
 8003b46:	2702      	movs	r7, #2
 8003b48:	e7d2      	b.n	8003af0 <HAL_RTC_SetTime+0xa0>
 8003b4a:	bf00      	nop
 8003b4c:	007f7f7f 	.word	0x007f7f7f

08003b50 <HAL_RTC_SetDate>:
{
 8003b50:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8003b52:	7f03      	ldrb	r3, [r0, #28]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d064      	beq.n	8003c22 <HAL_RTC_SetDate+0xd2>
 8003b58:	4604      	mov	r4, r0
 8003b5a:	460e      	mov	r6, r1
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b60:	2302      	movs	r3, #2
 8003b62:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003b64:	b93a      	cbnz	r2, 8003b76 <HAL_RTC_SetDate+0x26>
 8003b66:	784b      	ldrb	r3, [r1, #1]
 8003b68:	f013 0f10 	tst.w	r3, #16
 8003b6c:	d003      	beq.n	8003b76 <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003b6e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8003b72:	330a      	adds	r3, #10
 8003b74:	704b      	strb	r3, [r1, #1]
  if(Format == RTC_FORMAT_BIN)
 8003b76:	2a00      	cmp	r2, #0
 8003b78:	d131      	bne.n	8003bde <HAL_RTC_SetDate+0x8e>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003b7a:	78f0      	ldrb	r0, [r6, #3]
 8003b7c:	f7ff ff5c 	bl	8003a38 <RTC_ByteToBcd2>
 8003b80:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8003b82:	7870      	ldrb	r0, [r6, #1]
 8003b84:	f7ff ff58 	bl	8003a38 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003b88:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003b8c:	78b0      	ldrb	r0, [r6, #2]
 8003b8e:	f7ff ff53 	bl	8003a38 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8003b92:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13));
 8003b94:	7830      	ldrb	r0, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003b96:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	22ca      	movs	r2, #202	; 0xca
 8003b9e:	625a      	str	r2, [r3, #36]	; 0x24
 8003ba0:	6823      	ldr	r3, [r4, #0]
 8003ba2:	2253      	movs	r2, #83	; 0x53
 8003ba4:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f7ff fec5 	bl	8003936 <RTC_EnterInitMode>
 8003bac:	4606      	mov	r6, r0
 8003bae:	bb08      	cbnz	r0, 8003bf4 <HAL_RTC_SetDate+0xa4>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003bb0:	6822      	ldr	r2, [r4, #0]
 8003bb2:	4b1d      	ldr	r3, [pc, #116]	; (8003c28 <HAL_RTC_SetDate+0xd8>)
 8003bb4:	402b      	ands	r3, r5
 8003bb6:	6053      	str	r3, [r2, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003bb8:	6822      	ldr	r2, [r4, #0]
 8003bba:	68d3      	ldr	r3, [r2, #12]
 8003bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bc0:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f013 0f20 	tst.w	r3, #32
 8003bca:	d01c      	beq.n	8003c06 <HAL_RTC_SetDate+0xb6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bcc:	6823      	ldr	r3, [r4, #0]
 8003bce:	22ff      	movs	r2, #255	; 0xff
 8003bd0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	7723      	strb	r3, [r4, #28]
}
 8003bda:	4630      	mov	r0, r6
 8003bdc:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003bde:	78f3      	ldrb	r3, [r6, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 8003be0:	7875      	ldrb	r5, [r6, #1]
 8003be2:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003be4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  ((uint32_t)sDate->Date) | \
 8003be8:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8003bea:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));
 8003bec:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003bee:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
 8003bf2:	e7d2      	b.n	8003b9a <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	22ff      	movs	r2, #255	; 0xff
 8003bf8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003bfa:	2304      	movs	r3, #4
 8003bfc:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8003bfe:	2300      	movs	r3, #0
 8003c00:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8003c02:	2601      	movs	r6, #1
 8003c04:	e7e9      	b.n	8003bda <HAL_RTC_SetDate+0x8a>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c06:	4620      	mov	r0, r4
 8003c08:	f7ff fe7c 	bl	8003904 <HAL_RTC_WaitForSynchro>
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	d0dd      	beq.n	8003bcc <HAL_RTC_SetDate+0x7c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	22ff      	movs	r2, #255	; 0xff
 8003c14:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003c16:	2304      	movs	r3, #4
 8003c18:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8003c1e:	2601      	movs	r6, #1
 8003c20:	e7db      	b.n	8003bda <HAL_RTC_SetDate+0x8a>
 __HAL_LOCK(hrtc);
 8003c22:	2602      	movs	r6, #2
 8003c24:	e7d9      	b.n	8003bda <HAL_RTC_SetDate+0x8a>
 8003c26:	bf00      	nop
 8003c28:	00ffff3f 	.word	0x00ffff3f

08003c2c <HAL_RTC_SetAlarm>:
{
 8003c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8003c2e:	7f03      	ldrb	r3, [r0, #28]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	f000 80a9 	beq.w	8003d88 <HAL_RTC_SetAlarm+0x15c>
 8003c36:	4604      	mov	r4, r0
 8003c38:	460d      	mov	r5, r1
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c3e:	2302      	movs	r3, #2
 8003c40:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8003c42:	2a00      	cmp	r2, #0
 8003c44:	d14d      	bne.n	8003ce2 <HAL_RTC_SetAlarm+0xb6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003c46:	6803      	ldr	r3, [r0, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003c4e:	d101      	bne.n	8003c54 <HAL_RTC_SetAlarm+0x28>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8003c50:	2300      	movs	r3, #0
 8003c52:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8003c54:	6a2e      	ldr	r6, [r5, #32]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8003c56:	7828      	ldrb	r0, [r5, #0]
 8003c58:	f7ff feee 	bl	8003a38 <RTC_ByteToBcd2>
 8003c5c:	0407      	lsls	r7, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8003c5e:	7868      	ldrb	r0, [r5, #1]
 8003c60:	f7ff feea 	bl	8003a38 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8003c64:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003c68:	78a8      	ldrb	r0, [r5, #2]
 8003c6a:	f7ff fee5 	bl	8003a38 <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8003c6e:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8003c70:	7b28      	ldrb	r0, [r5, #12]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003c72:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8003c76:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 8003c7a:	f7ff fedd 	bl	8003a38 <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8003c7e:	ea47 6700 	orr.w	r7, r7, r0, lsl #24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8003c82:	433e      	orrs	r6, r7
              ((uint32_t)sAlarm->AlarmMask));
 8003c84:	69ab      	ldr	r3, [r5, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8003c86:	431e      	orrs	r6, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003c88:	686f      	ldr	r7, [r5, #4]
 8003c8a:	69eb      	ldr	r3, [r5, #28]
 8003c8c:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	22ca      	movs	r2, #202	; 0xca
 8003c92:	625a      	str	r2, [r3, #36]	; 0x24
 8003c94:	6823      	ldr	r3, [r4, #0]
 8003c96:	2253      	movs	r2, #83	; 0x53
 8003c98:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003c9a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca0:	d039      	beq.n	8003d16 <HAL_RTC_SetAlarm+0xea>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003ca2:	6822      	ldr	r2, [r4, #0]
 8003ca4:	6893      	ldr	r3, [r2, #8]
 8003ca6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003caa:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003cac:	6822      	ldr	r2, [r4, #0]
 8003cae:	6893      	ldr	r3, [r2, #8]
 8003cb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cb4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003cb6:	f7fd fedb 	bl	8001a70 <HAL_GetTick>
 8003cba:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	f012 0f02 	tst.w	r2, #2
 8003cc4:	d150      	bne.n	8003d68 <HAL_RTC_SetAlarm+0x13c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003cc6:	f7fd fed3 	bl	8001a70 <HAL_GetTick>
 8003cca:	1b40      	subs	r0, r0, r5
 8003ccc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003cd0:	d9f4      	bls.n	8003cbc <HAL_RTC_SetAlarm+0x90>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	22ff      	movs	r2, #255	; 0xff
 8003cd6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003cd8:	2003      	movs	r0, #3
 8003cda:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8003cdc:	2300      	movs	r3, #0
 8003cde:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8003ce0:	e051      	b.n	8003d86 <HAL_RTC_SetAlarm+0x15a>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003ce2:	6803      	ldr	r3, [r0, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003cea:	d101      	bne.n	8003cf0 <HAL_RTC_SetAlarm+0xc4>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8003cec:	2300      	movs	r3, #0
 8003cee:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8003cf0:	6a2e      	ldr	r6, [r5, #32]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8003cf2:	782a      	ldrb	r2, [r5, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8003cf4:	786b      	ldrb	r3, [r5, #1]
 8003cf6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8003cf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003cfc:	78aa      	ldrb	r2, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8003cfe:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8003d00:	7b2a      	ldrb	r2, [r5, #12]
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003d02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8003d06:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8003d0a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8003d0e:	431e      	orrs	r6, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003d10:	69ab      	ldr	r3, [r5, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8003d12:	431e      	orrs	r6, r3
 8003d14:	e7b8      	b.n	8003c88 <HAL_RTC_SetAlarm+0x5c>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003d16:	6822      	ldr	r2, [r4, #0]
 8003d18:	6893      	ldr	r3, [r2, #8]
 8003d1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d1e:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003d20:	6822      	ldr	r2, [r4, #0]
 8003d22:	6893      	ldr	r3, [r2, #8]
 8003d24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d28:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003d2a:	f7fd fea1 	bl	8001a70 <HAL_GetTick>
 8003d2e:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	f012 0f01 	tst.w	r2, #1
 8003d38:	d10d      	bne.n	8003d56 <HAL_RTC_SetAlarm+0x12a>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003d3a:	f7fd fe99 	bl	8001a70 <HAL_GetTick>
 8003d3e:	1b40      	subs	r0, r0, r5
 8003d40:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003d44:	d9f4      	bls.n	8003d30 <HAL_RTC_SetAlarm+0x104>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	22ff      	movs	r2, #255	; 0xff
 8003d4a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d4c:	2003      	movs	r0, #3
 8003d4e:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8003d50:	2300      	movs	r3, #0
 8003d52:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8003d54:	e017      	b.n	8003d86 <HAL_RTC_SetAlarm+0x15a>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003d56:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003d58:	6823      	ldr	r3, [r4, #0]
 8003d5a:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003d5c:	6822      	ldr	r2, [r4, #0]
 8003d5e:	6893      	ldr	r3, [r2, #8]
 8003d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d64:	6093      	str	r3, [r2, #8]
 8003d66:	e007      	b.n	8003d78 <HAL_RTC_SetAlarm+0x14c>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003d68:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003d6e:	6822      	ldr	r2, [r4, #0]
 8003d70:	6893      	ldr	r3, [r2, #8]
 8003d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d76:	6093      	str	r3, [r2, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	22ff      	movs	r2, #255	; 0xff
 8003d7c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 8003d82:	2000      	movs	r0, #0
 8003d84:	7720      	strb	r0, [r4, #28]
}
 8003d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8003d88:	2002      	movs	r0, #2
 8003d8a:	e7fc      	b.n	8003d86 <HAL_RTC_SetAlarm+0x15a>

08003d8c <HAL_RTCEx_SetTimeStamp>:
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d8c:	7f03      	ldrb	r3, [r0, #28]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d02b      	beq.n	8003dea <HAL_RTCEx_SetTimeStamp+0x5e>
{
 8003d92:	b430      	push	{r4, r5}
  __HAL_LOCK(hrtc);
 8003d94:	f04f 0c01 	mov.w	ip, #1
 8003d98:	f880 c01c 	strb.w	ip, [r0, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	7743      	strb	r3, [r0, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8003da0:	6804      	ldr	r4, [r0, #0]
 8003da2:	68a5      	ldr	r5, [r4, #8]
 8003da4:	f6a3 030b 	subw	r3, r3, #2059	; 0x80b
 8003da8:	402b      	ands	r3, r5

  tmpreg|= TimeStampEdge;
 8003daa:	4319      	orrs	r1, r3

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003dac:	23ca      	movs	r3, #202	; 0xca
 8003dae:	6263      	str	r3, [r4, #36]	; 0x24
 8003db0:	6803      	ldr	r3, [r0, #0]
 8003db2:	2453      	movs	r4, #83	; 0x53
 8003db4:	625c      	str	r4, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8003db6:	6804      	ldr	r4, [r0, #0]
 8003db8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003dba:	f023 0306 	bic.w	r3, r3, #6
 8003dbe:	64e3      	str	r3, [r4, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8003dc0:	6804      	ldr	r4, [r0, #0]
 8003dc2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	64e2      	str	r2, [r4, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8003dc8:	6803      	ldr	r3, [r0, #0]
 8003dca:	6099      	str	r1, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8003dcc:	6802      	ldr	r2, [r0, #0]
 8003dce:	6893      	ldr	r3, [r2, #8]
 8003dd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003dd4:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dd6:	6803      	ldr	r3, [r0, #0]
 8003dd8:	22ff      	movs	r2, #255	; 0xff
 8003dda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003ddc:	f880 c01d 	strb.w	ip, [r0, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003de0:	2300      	movs	r3, #0
 8003de2:	7703      	strb	r3, [r0, #28]

  return HAL_OK;
 8003de4:	4618      	mov	r0, r3
}
 8003de6:	bc30      	pop	{r4, r5}
 8003de8:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8003dea:	2002      	movs	r0, #2
}
 8003dec:	4770      	bx	lr

08003dee <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003dee:	b1e0      	cbz	r0, 8003e2a <HAL_SDRAM_Init+0x3c>
{   
 8003df0:	b538      	push	{r3, r4, r5, lr}
 8003df2:	460d      	mov	r5, r1
 8003df4:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003df6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003dfa:	b18b      	cbz	r3, 8003e20 <HAL_SDRAM_Init+0x32>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003e02:	4621      	mov	r1, r4
 8003e04:	f851 0b04 	ldr.w	r0, [r1], #4
 8003e08:	f000 f9e8 	bl	80041dc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003e0c:	6862      	ldr	r2, [r4, #4]
 8003e0e:	4629      	mov	r1, r5
 8003e10:	6820      	ldr	r0, [r4, #0]
 8003e12:	f000 fa1d 	bl	8004250 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8003e1c:	2000      	movs	r0, #0
}
 8003e1e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8003e20:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8003e24:	f7fd fd6e 	bl	8001904 <HAL_SDRAM_MspInit>
 8003e28:	e7e8      	b.n	8003dfc <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8003e2a:	2001      	movs	r0, #1
}
 8003e2c:	4770      	bx	lr

08003e2e <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e30:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d13a      	bne.n	8003eb0 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e40:	6802      	ldr	r2, [r0, #0]
 8003e42:	68d3      	ldr	r3, [r2, #12]
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e4a:	6803      	ldr	r3, [r0, #0]
 8003e4c:	4a1a      	ldr	r2, [pc, #104]	; (8003eb8 <HAL_TIM_Base_Start_IT+0x88>)
 8003e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e52:	bf18      	it	ne
 8003e54:	4293      	cmpne	r3, r2
 8003e56:	d01d      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x64>
 8003e58:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d019      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x64>
 8003e60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d015      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x64>
 8003e68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d011      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x64>
 8003e70:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00d      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x64>
 8003e78:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d009      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x64>
 8003e80:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d005      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e90:	2000      	movs	r0, #0
 8003e92:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e94:	6899      	ldr	r1, [r3, #8]
 8003e96:	4a09      	ldr	r2, [pc, #36]	; (8003ebc <HAL_TIM_Base_Start_IT+0x8c>)
 8003e98:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e9a:	2a06      	cmp	r2, #6
 8003e9c:	bf18      	it	ne
 8003e9e:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 8003ea2:	d007      	beq.n	8003eb4 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	f042 0201 	orr.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003eac:	2000      	movs	r0, #0
 8003eae:	4770      	bx	lr
    return HAL_ERROR;
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	4770      	bx	lr
  return HAL_OK;
 8003eb4:	2000      	movs	r0, #0
}
 8003eb6:	4770      	bx	lr
 8003eb8:	40010000 	.word	0x40010000
 8003ebc:	00010007 	.word	0x00010007

08003ec0 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_TIM_IRQHandler>:
{
 8003ec8:	b510      	push	{r4, lr}
 8003eca:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ecc:	6803      	ldr	r3, [r0, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	f012 0f02 	tst.w	r2, #2
 8003ed4:	d011      	beq.n	8003efa <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	f012 0f02 	tst.w	r2, #2
 8003edc:	d00d      	beq.n	8003efa <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ede:	f06f 0202 	mvn.w	r2, #2
 8003ee2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ee8:	6803      	ldr	r3, [r0, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f013 0f03 	tst.w	r3, #3
 8003ef0:	d079      	beq.n	8003fe6 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003ef2:	f7ff ffe6 	bl	8003ec2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	f012 0f04 	tst.w	r2, #4
 8003f02:	d012      	beq.n	8003f2a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	f012 0f04 	tst.w	r2, #4
 8003f0a:	d00e      	beq.n	8003f2a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f0c:	f06f 0204 	mvn.w	r2, #4
 8003f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f12:	2302      	movs	r3, #2
 8003f14:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003f1e:	d068      	beq.n	8003ff2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f20:	4620      	mov	r0, r4
 8003f22:	f7ff ffce 	bl	8003ec2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f26:	2300      	movs	r3, #0
 8003f28:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	f012 0f08 	tst.w	r2, #8
 8003f32:	d012      	beq.n	8003f5a <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	f012 0f08 	tst.w	r2, #8
 8003f3a:	d00e      	beq.n	8003f5a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f3c:	f06f 0208 	mvn.w	r2, #8
 8003f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f42:	2304      	movs	r3, #4
 8003f44:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	f013 0f03 	tst.w	r3, #3
 8003f4e:	d057      	beq.n	8004000 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f50:	4620      	mov	r0, r4
 8003f52:	f7ff ffb6 	bl	8003ec2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f56:	2300      	movs	r3, #0
 8003f58:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	f012 0f10 	tst.w	r2, #16
 8003f62:	d012      	beq.n	8003f8a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	f012 0f10 	tst.w	r2, #16
 8003f6a:	d00e      	beq.n	8003f8a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f6c:	f06f 0210 	mvn.w	r2, #16
 8003f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f72:	2308      	movs	r3, #8
 8003f74:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003f7e:	d046      	beq.n	800400e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f80:	4620      	mov	r0, r4
 8003f82:	f7ff ff9e 	bl	8003ec2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f86:	2300      	movs	r3, #0
 8003f88:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f8a:	6823      	ldr	r3, [r4, #0]
 8003f8c:	691a      	ldr	r2, [r3, #16]
 8003f8e:	f012 0f01 	tst.w	r2, #1
 8003f92:	d003      	beq.n	8003f9c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	f012 0f01 	tst.w	r2, #1
 8003f9a:	d13f      	bne.n	800401c <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f9c:	6823      	ldr	r3, [r4, #0]
 8003f9e:	691a      	ldr	r2, [r3, #16]
 8003fa0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003fa4:	d003      	beq.n	8003fae <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003fac:	d13d      	bne.n	800402a <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	691a      	ldr	r2, [r3, #16]
 8003fb2:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003fb6:	d003      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003fbe:	d13b      	bne.n	8004038 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003fc8:	d003      	beq.n	8003fd2 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003fd0:	d139      	bne.n	8004046 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	691a      	ldr	r2, [r3, #16]
 8003fd6:	f012 0f20 	tst.w	r2, #32
 8003fda:	d003      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	f012 0f20 	tst.w	r2, #32
 8003fe2:	d137      	bne.n	8004054 <HAL_TIM_IRQHandler+0x18c>
}
 8003fe4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe6:	f7ff ff6b 	bl	8003ec0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fea:	4620      	mov	r0, r4
 8003fec:	f7ff ff6a 	bl	8003ec4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003ff0:	e781      	b.n	8003ef6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	f7ff ff64 	bl	8003ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	f7ff ff63 	bl	8003ec4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003ffe:	e792      	b.n	8003f26 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004000:	4620      	mov	r0, r4
 8004002:	f7ff ff5d 	bl	8003ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004006:	4620      	mov	r0, r4
 8004008:	f7ff ff5c 	bl	8003ec4 <HAL_TIM_PWM_PulseFinishedCallback>
 800400c:	e7a3      	b.n	8003f56 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800400e:	4620      	mov	r0, r4
 8004010:	f7ff ff56 	bl	8003ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004014:	4620      	mov	r0, r4
 8004016:	f7ff ff55 	bl	8003ec4 <HAL_TIM_PWM_PulseFinishedCallback>
 800401a:	e7b4      	b.n	8003f86 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800401c:	f06f 0201 	mvn.w	r2, #1
 8004020:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004022:	4620      	mov	r0, r4
 8004024:	f7fd f8fa 	bl	800121c <HAL_TIM_PeriodElapsedCallback>
 8004028:	e7b8      	b.n	8003f9c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800402a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800402e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004030:	4620      	mov	r0, r4
 8004032:	f000 f8d0 	bl	80041d6 <HAL_TIMEx_BreakCallback>
 8004036:	e7ba      	b.n	8003fae <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004038:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800403c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800403e:	4620      	mov	r0, r4
 8004040:	f000 f8ca 	bl	80041d8 <HAL_TIMEx_Break2Callback>
 8004044:	e7bc      	b.n	8003fc0 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004046:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800404a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800404c:	4620      	mov	r0, r4
 800404e:	f7ff ff3a 	bl	8003ec6 <HAL_TIM_TriggerCallback>
 8004052:	e7be      	b.n	8003fd2 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004054:	f06f 0220 	mvn.w	r2, #32
 8004058:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800405a:	4620      	mov	r0, r4
 800405c:	f000 f8ba 	bl	80041d4 <HAL_TIMEx_CommutCallback>
}
 8004060:	e7c0      	b.n	8003fe4 <HAL_TIM_IRQHandler+0x11c>
	...

08004064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004064:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004066:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004068:	4a3b      	ldr	r2, [pc, #236]	; (8004158 <TIM_Base_SetConfig+0xf4>)
 800406a:	4290      	cmp	r0, r2
 800406c:	bf14      	ite	ne
 800406e:	f04f 0e00 	movne.w	lr, #0
 8004072:	f04f 0e01 	moveq.w	lr, #1
 8004076:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800407a:	bf14      	ite	ne
 800407c:	4672      	movne	r2, lr
 800407e:	f04e 0201 	orreq.w	r2, lr, #1
 8004082:	b9aa      	cbnz	r2, 80040b0 <TIM_Base_SetConfig+0x4c>
 8004084:	4c35      	ldr	r4, [pc, #212]	; (800415c <TIM_Base_SetConfig+0xf8>)
 8004086:	42a0      	cmp	r0, r4
 8004088:	bf14      	ite	ne
 800408a:	2400      	movne	r4, #0
 800408c:	2401      	moveq	r4, #1
 800408e:	4d34      	ldr	r5, [pc, #208]	; (8004160 <TIM_Base_SetConfig+0xfc>)
 8004090:	42a8      	cmp	r0, r5
 8004092:	d00d      	beq.n	80040b0 <TIM_Base_SetConfig+0x4c>
 8004094:	b964      	cbnz	r4, 80040b0 <TIM_Base_SetConfig+0x4c>
 8004096:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800409a:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 800409e:	42a0      	cmp	r0, r4
 80040a0:	bf14      	ite	ne
 80040a2:	2400      	movne	r4, #0
 80040a4:	2401      	moveq	r4, #1
 80040a6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80040aa:	42a8      	cmp	r0, r5
 80040ac:	d000      	beq.n	80040b0 <TIM_Base_SetConfig+0x4c>
 80040ae:	b11c      	cbz	r4, 80040b8 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80040b4:	684c      	ldr	r4, [r1, #4]
 80040b6:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040b8:	2a00      	cmp	r2, #0
 80040ba:	d133      	bne.n	8004124 <TIM_Base_SetConfig+0xc0>
 80040bc:	4a27      	ldr	r2, [pc, #156]	; (800415c <TIM_Base_SetConfig+0xf8>)
 80040be:	4290      	cmp	r0, r2
 80040c0:	bf14      	ite	ne
 80040c2:	2200      	movne	r2, #0
 80040c4:	2201      	moveq	r2, #1
 80040c6:	4c26      	ldr	r4, [pc, #152]	; (8004160 <TIM_Base_SetConfig+0xfc>)
 80040c8:	42a0      	cmp	r0, r4
 80040ca:	d02b      	beq.n	8004124 <TIM_Base_SetConfig+0xc0>
 80040cc:	bb52      	cbnz	r2, 8004124 <TIM_Base_SetConfig+0xc0>
 80040ce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80040d2:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 80040d6:	4290      	cmp	r0, r2
 80040d8:	bf14      	ite	ne
 80040da:	2200      	movne	r2, #0
 80040dc:	2201      	moveq	r2, #1
 80040de:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80040e2:	42a0      	cmp	r0, r4
 80040e4:	d01e      	beq.n	8004124 <TIM_Base_SetConfig+0xc0>
 80040e6:	b9ea      	cbnz	r2, 8004124 <TIM_Base_SetConfig+0xc0>
 80040e8:	4a1e      	ldr	r2, [pc, #120]	; (8004164 <TIM_Base_SetConfig+0x100>)
 80040ea:	4290      	cmp	r0, r2
 80040ec:	bf14      	ite	ne
 80040ee:	2200      	movne	r2, #0
 80040f0:	2201      	moveq	r2, #1
 80040f2:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 80040f6:	42a0      	cmp	r0, r4
 80040f8:	d014      	beq.n	8004124 <TIM_Base_SetConfig+0xc0>
 80040fa:	b99a      	cbnz	r2, 8004124 <TIM_Base_SetConfig+0xc0>
 80040fc:	4a1a      	ldr	r2, [pc, #104]	; (8004168 <TIM_Base_SetConfig+0x104>)
 80040fe:	4290      	cmp	r0, r2
 8004100:	bf14      	ite	ne
 8004102:	2200      	movne	r2, #0
 8004104:	2201      	moveq	r2, #1
 8004106:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800410a:	42a0      	cmp	r0, r4
 800410c:	d00a      	beq.n	8004124 <TIM_Base_SetConfig+0xc0>
 800410e:	b94a      	cbnz	r2, 8004124 <TIM_Base_SetConfig+0xc0>
 8004110:	4a16      	ldr	r2, [pc, #88]	; (800416c <TIM_Base_SetConfig+0x108>)
 8004112:	4290      	cmp	r0, r2
 8004114:	bf14      	ite	ne
 8004116:	2200      	movne	r2, #0
 8004118:	2201      	moveq	r2, #1
 800411a:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
 800411e:	42a0      	cmp	r0, r4
 8004120:	d000      	beq.n	8004124 <TIM_Base_SetConfig+0xc0>
 8004122:	b122      	cbz	r2, 800412e <TIM_Base_SetConfig+0xca>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004124:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004128:	68cb      	ldr	r3, [r1, #12]
 800412a:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800412e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004132:	694a      	ldr	r2, [r1, #20]
 8004134:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004136:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004138:	688a      	ldr	r2, [r1, #8]
 800413a:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800413c:	680a      	ldr	r2, [r1, #0]
 800413e:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004140:	4a0b      	ldr	r2, [pc, #44]	; (8004170 <TIM_Base_SetConfig+0x10c>)
 8004142:	4290      	cmp	r0, r2
 8004144:	bf14      	ite	ne
 8004146:	4673      	movne	r3, lr
 8004148:	f04e 0301 	orreq.w	r3, lr, #1
 800414c:	b10b      	cbz	r3, 8004152 <TIM_Base_SetConfig+0xee>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800414e:	690b      	ldr	r3, [r1, #16]
 8004150:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004152:	2301      	movs	r3, #1
 8004154:	6143      	str	r3, [r0, #20]
}
 8004156:	bd30      	pop	{r4, r5, pc}
 8004158:	40010000 	.word	0x40010000
 800415c:	40000800 	.word	0x40000800
 8004160:	40000400 	.word	0x40000400
 8004164:	40014400 	.word	0x40014400
 8004168:	40001800 	.word	0x40001800
 800416c:	40002000 	.word	0x40002000
 8004170:	40010400 	.word	0x40010400

08004174 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004174:	b360      	cbz	r0, 80041d0 <HAL_TIM_Base_Init+0x5c>
{
 8004176:	b510      	push	{r4, lr}
 8004178:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800417a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800417e:	b313      	cbz	r3, 80041c6 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8004180:	2302      	movs	r3, #2
 8004182:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004186:	4621      	mov	r1, r4
 8004188:	f851 0b04 	ldr.w	r0, [r1], #4
 800418c:	f7ff ff6a 	bl	8004064 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004190:	2301      	movs	r3, #1
 8004192:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004196:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800419a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800419e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80041a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80041a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80041b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041b6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80041ba:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80041be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80041c2:	2000      	movs	r0, #0
}
 80041c4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80041c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80041ca:	f7ff fe30 	bl	8003e2e <HAL_TIM_Base_MspInit>
 80041ce:	e7d7      	b.n	8004180 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80041d0:	2001      	movs	r0, #1
}
 80041d2:	4770      	bx	lr

080041d4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041d4:	4770      	bx	lr

080041d6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041d6:	4770      	bx	lr

080041d8 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041d8:	4770      	bx	lr
	...

080041dc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80041dc:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80041de:	680b      	ldr	r3, [r1, #0]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d018      	beq.n	8004216 <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80041e4:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80041e6:	4a19      	ldr	r2, [pc, #100]	; (800424c <FMC_SDRAM_Init+0x70>)
 80041e8:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80041ea:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 80041ec:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80041ee:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 80041f0:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 80041f2:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 80041f4:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 80041f6:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 80041f8:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 80041fa:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 80041fc:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 80041fe:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 8004200:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 8004202:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 8004204:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 8004206:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 8004208:	6a49      	ldr	r1, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 800420a:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800420c:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800420e:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8004210:	2000      	movs	r0, #0
 8004212:	bc30      	pop	{r4, r5}
 8004214:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004216:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004218:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800421c:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 800421e:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004220:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8004222:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8004224:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004226:	4322      	orrs	r2, r4
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8004228:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800422a:	4c08      	ldr	r4, [pc, #32]	; (800424c <FMC_SDRAM_Init+0x70>)
 800422c:	401c      	ands	r4, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800422e:	684b      	ldr	r3, [r1, #4]
 8004230:	688d      	ldr	r5, [r1, #8]
 8004232:	432b      	orrs	r3, r5
                       Init->RowBitsNumber       |\
 8004234:	68cd      	ldr	r5, [r1, #12]
 8004236:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 8004238:	690d      	ldr	r5, [r1, #16]
 800423a:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 800423c:	694d      	ldr	r5, [r1, #20]
 800423e:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 8004240:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 8004242:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004244:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004246:	6002      	str	r2, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8004248:	6043      	str	r3, [r0, #4]
 800424a:	e7e1      	b.n	8004210 <FMC_SDRAM_Init+0x34>
 800424c:	ffff8000 	.word	0xffff8000

08004250 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004250:	b510      	push	{r4, lr}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8004252:	2a01      	cmp	r2, #1
 8004254:	d025      	beq.n	80042a2 <FMC_SDRAM_Timing_Init+0x52>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004256:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004258:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800425c:	680b      	ldr	r3, [r1, #0]
 800425e:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8004260:	684c      	ldr	r4, [r1, #4]
 8004262:	f104 3cff 	add.w	ip, r4, #4294967295
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004266:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800426a:	688c      	ldr	r4, [r1, #8]
 800426c:	f104 3cff 	add.w	ip, r4, #4294967295
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8004270:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8004274:	68cc      	ldr	r4, [r1, #12]
 8004276:	f104 3cff 	add.w	ip, r4, #4294967295
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800427a:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800427e:	690c      	ldr	r4, [r1, #16]
 8004280:	f104 3cff 	add.w	ip, r4, #4294967295
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8004284:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 8004288:	694c      	ldr	r4, [r1, #20]
 800428a:	f104 3cff 	add.w	ip, r4, #4294967295
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800428e:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 8004292:	6989      	ldr	r1, [r1, #24]
 8004294:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004296:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800429a:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800429c:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800429e:	2000      	movs	r0, #0
 80042a0:	bd10      	pop	{r4, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80042a2:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80042a4:	4c13      	ldr	r4, [pc, #76]	; (80042f4 <FMC_SDRAM_Timing_Init+0xa4>)
 80042a6:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80042a8:	68ca      	ldr	r2, [r1, #12]
 80042aa:	f102 3cff 	add.w	ip, r2, #4294967295
                        (((Timing->RPDelay)-1) << 20)); 
 80042ae:	694b      	ldr	r3, [r1, #20]
 80042b0:	1e5a      	subs	r2, r3, #1
 80042b2:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80042b4:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
 80042b8:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80042ba:	68c3      	ldr	r3, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80042bc:	f003 4c70 	and.w	ip, r3, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80042c0:	680b      	ldr	r3, [r1, #0]
 80042c2:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80042c4:	684c      	ldr	r4, [r1, #4]
 80042c6:	f104 3eff 	add.w	lr, r4, #4294967295
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80042ca:	ea43 130e 	orr.w	r3, r3, lr, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80042ce:	688c      	ldr	r4, [r1, #8]
 80042d0:	f104 3eff 	add.w	lr, r4, #4294967295
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80042d4:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80042d8:	690c      	ldr	r4, [r1, #16]
 80042da:	f104 3eff 	add.w	lr, r4, #4294967295
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80042de:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 80042e2:	6989      	ldr	r1, [r1, #24]
 80042e4:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80042e6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80042ea:	ea43 030c 	orr.w	r3, r3, ip
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80042ee:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80042f0:	60c3      	str	r3, [r0, #12]
 80042f2:	e7d4      	b.n	800429e <FMC_SDRAM_Timing_Init+0x4e>
 80042f4:	ff0f0fff 	.word	0xff0f0fff

080042f8 <__libc_init_array>:
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	4d0d      	ldr	r5, [pc, #52]	; (8004330 <__libc_init_array+0x38>)
 80042fc:	4c0d      	ldr	r4, [pc, #52]	; (8004334 <__libc_init_array+0x3c>)
 80042fe:	1b64      	subs	r4, r4, r5
 8004300:	10a4      	asrs	r4, r4, #2
 8004302:	2600      	movs	r6, #0
 8004304:	42a6      	cmp	r6, r4
 8004306:	d109      	bne.n	800431c <__libc_init_array+0x24>
 8004308:	4d0b      	ldr	r5, [pc, #44]	; (8004338 <__libc_init_array+0x40>)
 800430a:	4c0c      	ldr	r4, [pc, #48]	; (800433c <__libc_init_array+0x44>)
 800430c:	f000 f82e 	bl	800436c <_init>
 8004310:	1b64      	subs	r4, r4, r5
 8004312:	10a4      	asrs	r4, r4, #2
 8004314:	2600      	movs	r6, #0
 8004316:	42a6      	cmp	r6, r4
 8004318:	d105      	bne.n	8004326 <__libc_init_array+0x2e>
 800431a:	bd70      	pop	{r4, r5, r6, pc}
 800431c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004320:	4798      	blx	r3
 8004322:	3601      	adds	r6, #1
 8004324:	e7ee      	b.n	8004304 <__libc_init_array+0xc>
 8004326:	f855 3b04 	ldr.w	r3, [r5], #4
 800432a:	4798      	blx	r3
 800432c:	3601      	adds	r6, #1
 800432e:	e7f2      	b.n	8004316 <__libc_init_array+0x1e>
 8004330:	08004418 	.word	0x08004418
 8004334:	08004418 	.word	0x08004418
 8004338:	08004418 	.word	0x08004418
 800433c:	0800441c 	.word	0x0800441c

08004340 <memcpy>:
 8004340:	440a      	add	r2, r1
 8004342:	4291      	cmp	r1, r2
 8004344:	f100 33ff 	add.w	r3, r0, #4294967295
 8004348:	d100      	bne.n	800434c <memcpy+0xc>
 800434a:	4770      	bx	lr
 800434c:	b510      	push	{r4, lr}
 800434e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004352:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004356:	4291      	cmp	r1, r2
 8004358:	d1f9      	bne.n	800434e <memcpy+0xe>
 800435a:	bd10      	pop	{r4, pc}

0800435c <memset>:
 800435c:	4402      	add	r2, r0
 800435e:	4603      	mov	r3, r0
 8004360:	4293      	cmp	r3, r2
 8004362:	d100      	bne.n	8004366 <memset+0xa>
 8004364:	4770      	bx	lr
 8004366:	f803 1b01 	strb.w	r1, [r3], #1
 800436a:	e7f9      	b.n	8004360 <memset+0x4>

0800436c <_init>:
 800436c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436e:	bf00      	nop
 8004370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004372:	bc08      	pop	{r3}
 8004374:	469e      	mov	lr, r3
 8004376:	4770      	bx	lr

08004378 <_fini>:
 8004378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437a:	bf00      	nop
 800437c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800437e:	bc08      	pop	{r3}
 8004380:	469e      	mov	lr, r3
 8004382:	4770      	bx	lr
