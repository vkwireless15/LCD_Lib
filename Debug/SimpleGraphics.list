
SimpleGraphics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004838  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004a00  08004a00  00014a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a18  08004a18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a18  08004a18  00014a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a20  08004a20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a20  08004a20  00014a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a24  08004a24  00014a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000000c  08004a34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08004a34  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002123f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003811  00000000  00000000  0004127b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00015140  00000000  00000000  00044a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001818  00000000  00000000  00059bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000016e8  00000000  00000000  0005b3e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00028c60  00000000  00000000  0005cad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00014f0d  00000000  00000000  00085730  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000fcc86  00000000  00000000  0009a63d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001972c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000458c  00000000  00000000  00197340  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080049e8 	.word	0x080049e8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080049e8 	.word	0x080049e8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <swap>:
unsigned int Height = 0, Width = 0, LCD_FRAME_BUFFER0 = 0, LCD_FRAME_BUFFER1 = 0, LCD_FRAME_BUFFER2 = 0;

//Пользовательские функции и др.
void swap (unsigned int *d1, unsigned int *d2)
{
	unsigned int t = *d1;
 8000508:	6803      	ldr	r3, [r0, #0]
	*d2 = *d1;
 800050a:	600b      	str	r3, [r1, #0]
	*d1 = t;
 800050c:	6003      	str	r3, [r0, #0]
}
 800050e:	4770      	bx	lr

08000510 <Init_Graphics_System>:
//------------------------

void Init_Graphics_System(unsigned int H, unsigned int W, unsigned int LCD_RAM_START_ADDRESS, char Layers) //Инициализация драйвера дисплея, графического ускорителя и т.п.
{
 8000510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000514:	b09d      	sub	sp, #116	; 0x74
 8000516:	4680      	mov	r8, r0
 8000518:	460c      	mov	r4, r1
 800051a:	4615      	mov	r5, r2
 800051c:	9301      	str	r3, [sp, #4]
	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800051e:	2634      	movs	r6, #52	; 0x34
 8000520:	4632      	mov	r2, r6
 8000522:	2100      	movs	r1, #0
 8000524:	a80f      	add	r0, sp, #60	; 0x3c
 8000526:	f004 fa57 	bl	80049d8 <memset>
	LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800052a:	4632      	mov	r2, r6
 800052c:	2100      	movs	r1, #0
 800052e:	a802      	add	r0, sp, #8
 8000530:	f004 fa52 	bl	80049d8 <memset>
	Height = H;
 8000534:	4e51      	ldr	r6, [pc, #324]	; (800067c <Init_Graphics_System+0x16c>)
 8000536:	f8c6 8000 	str.w	r8, [r6]
    Width = W;
 800053a:	4f51      	ldr	r7, [pc, #324]	; (8000680 <Init_Graphics_System+0x170>)
 800053c:	603c      	str	r4, [r7, #0]

    LCD_FRAME_BUFFER0 = LCD_RAM_START_ADDRESS;
 800053e:	f8df b150 	ldr.w	fp, [pc, #336]	; 8000690 <Init_Graphics_System+0x180>
 8000542:	f8cb 5000 	str.w	r5, [fp]
    LCD_FRAME_BUFFER1 = LCD_FRAME_BUFFER0 + (Height * Width * 4);
 8000546:	fb04 f408 	mul.w	r4, r4, r8
 800054a:	00a4      	lsls	r4, r4, #2
 800054c:	4425      	add	r5, r4
 800054e:	4b4d      	ldr	r3, [pc, #308]	; (8000684 <Init_Graphics_System+0x174>)
 8000550:	601d      	str	r5, [r3, #0]
    LCD_FRAME_BUFFER2 = LCD_FRAME_BUFFER1 + (Height * Width * 4);
 8000552:	442c      	add	r4, r5
 8000554:	f8df 8144 	ldr.w	r8, [pc, #324]	; 800069c <Init_Graphics_System+0x18c>
 8000558:	f8c8 4000 	str.w	r4, [r8]

    hltdc.Instance = LTDC;
 800055c:	4d4a      	ldr	r5, [pc, #296]	; (8000688 <Init_Graphics_System+0x178>)
 800055e:	4b4b      	ldr	r3, [pc, #300]	; (800068c <Init_Graphics_System+0x17c>)
 8000560:	602b      	str	r3, [r5, #0]
    hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000562:	2400      	movs	r4, #0
 8000564:	606c      	str	r4, [r5, #4]
    hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000566:	60ac      	str	r4, [r5, #8]
    hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000568:	60ec      	str	r4, [r5, #12]
    hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800056a:	612c      	str	r4, [r5, #16]
    hltdc.Init.HorizontalSync = 40;
 800056c:	2328      	movs	r3, #40	; 0x28
 800056e:	616b      	str	r3, [r5, #20]
    hltdc.Init.VerticalSync = 9;
 8000570:	2309      	movs	r3, #9
 8000572:	61ab      	str	r3, [r5, #24]
    hltdc.Init.AccumulatedHBP = 53;
 8000574:	2335      	movs	r3, #53	; 0x35
 8000576:	61eb      	str	r3, [r5, #28]
    hltdc.Init.AccumulatedVBP = 11;
 8000578:	230b      	movs	r3, #11
 800057a:	622b      	str	r3, [r5, #32]
    hltdc.Init.AccumulatedActiveW = 533;
 800057c:	f240 2315 	movw	r3, #533	; 0x215
 8000580:	626b      	str	r3, [r5, #36]	; 0x24
    hltdc.Init.AccumulatedActiveH = 283;
 8000582:	f240 131b 	movw	r3, #283	; 0x11b
 8000586:	62ab      	str	r3, [r5, #40]	; 0x28
    //hltdc.Init.TotalWidth = 565;
    //hltdc.Init.TotalHeigh = 285;

    hltdc.Init.TotalWidth = 565;
 8000588:	f240 2335 	movw	r3, #565	; 0x235
 800058c:	62eb      	str	r3, [r5, #44]	; 0x2c
    hltdc.Init.TotalHeigh = 285;
 800058e:	f240 131d 	movw	r3, #285	; 0x11d
 8000592:	632b      	str	r3, [r5, #48]	; 0x30

    hltdc.Init.Backcolor.Blue = 0;
 8000594:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
    hltdc.Init.Backcolor.Green = 0;
 8000598:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
    hltdc.Init.Backcolor.Red = 0;
 800059c:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
    if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80005a0:	4628      	mov	r0, r5
 80005a2:	f001 feab 	bl	80022fc <HAL_LTDC_Init>
    {

    }
    pLayerCfg.WindowX0 = 0;
 80005a6:	940f      	str	r4, [sp, #60]	; 0x3c
    pLayerCfg.WindowX1 = Width;
 80005a8:	683a      	ldr	r2, [r7, #0]
 80005aa:	9210      	str	r2, [sp, #64]	; 0x40
    pLayerCfg.WindowY0 = 0;
 80005ac:	9411      	str	r4, [sp, #68]	; 0x44
    pLayerCfg.WindowY1 = Height;
 80005ae:	6833      	ldr	r3, [r6, #0]
 80005b0:	9312      	str	r3, [sp, #72]	; 0x48
    pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80005b2:	9413      	str	r4, [sp, #76]	; 0x4c
    pLayerCfg.Alpha = 255;
 80005b4:	f04f 0aff 	mov.w	sl, #255	; 0xff
 80005b8:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
    pLayerCfg.Alpha0 = 0;
 80005bc:	9415      	str	r4, [sp, #84]	; 0x54
    pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80005be:	f44f 69c0 	mov.w	r9, #1536	; 0x600
 80005c2:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
    pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80005c6:	2107      	movs	r1, #7
 80005c8:	9117      	str	r1, [sp, #92]	; 0x5c
    pLayerCfg.FBStartAdress = LCD_FRAME_BUFFER0;
 80005ca:	f8db 1000 	ldr.w	r1, [fp]
 80005ce:	9118      	str	r1, [sp, #96]	; 0x60
    pLayerCfg.ImageWidth = Width;
 80005d0:	9219      	str	r2, [sp, #100]	; 0x64
    pLayerCfg.ImageHeight = Height;
 80005d2:	931a      	str	r3, [sp, #104]	; 0x68
    pLayerCfg.Backcolor.Blue = 0;
 80005d4:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    pLayerCfg.Backcolor.Green = 0;
 80005d8:	f88d 406d 	strb.w	r4, [sp, #109]	; 0x6d
    pLayerCfg.Backcolor.Red = 0;
 80005dc:	f88d 406e 	strb.w	r4, [sp, #110]	; 0x6e
    if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80005e0:	4622      	mov	r2, r4
 80005e2:	a90f      	add	r1, sp, #60	; 0x3c
 80005e4:	4628      	mov	r0, r5
 80005e6:	f001 ff73 	bl	80024d0 <HAL_LTDC_ConfigLayer>
    {
      //Error_Handler();
    }

    pLayerCfg1.WindowX0 = 0;
 80005ea:	9402      	str	r4, [sp, #8]
    pLayerCfg1.WindowX1 = Width;
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	9203      	str	r2, [sp, #12]
    pLayerCfg1.WindowY0 = 0;
 80005f0:	9404      	str	r4, [sp, #16]
    pLayerCfg1.WindowY1 = Height;
 80005f2:	6833      	ldr	r3, [r6, #0]
 80005f4:	9305      	str	r3, [sp, #20]
    pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80005f6:	9406      	str	r4, [sp, #24]
    pLayerCfg1.Alpha = 255;
 80005f8:	f8cd a01c 	str.w	sl, [sp, #28]
    pLayerCfg1.Alpha0 = 0;
 80005fc:	9408      	str	r4, [sp, #32]
    pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80005fe:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000602:	2107      	movs	r1, #7
 8000604:	910a      	str	r1, [sp, #40]	; 0x28
    pLayerCfg1.FBStartAdress = LCD_FRAME_BUFFER2;
 8000606:	f8d8 1000 	ldr.w	r1, [r8]
 800060a:	910b      	str	r1, [sp, #44]	; 0x2c
    pLayerCfg1.ImageWidth = Width;
 800060c:	920c      	str	r2, [sp, #48]	; 0x30
    pLayerCfg1.ImageHeight = Height;
 800060e:	930d      	str	r3, [sp, #52]	; 0x34
    pLayerCfg1.Backcolor.Blue = 0;
 8000610:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
    pLayerCfg1.Backcolor.Green = 0;
 8000614:	f88d 4039 	strb.w	r4, [sp, #57]	; 0x39
    pLayerCfg1.Backcolor.Red = 0;
 8000618:	f88d 403a 	strb.w	r4, [sp, #58]	; 0x3a
    if(Layers == 2)
 800061c:	9b01      	ldr	r3, [sp, #4]
 800061e:	2b02      	cmp	r3, #2
 8000620:	d025      	beq.n	800066e <Init_Graphics_System+0x15e>
        if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
        {

        }
    }
    HAL_LTDC_SetAddress(&hltdc,LCD_FRAME_BUFFER0,0);
 8000622:	2200      	movs	r2, #0
 8000624:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <Init_Graphics_System+0x180>)
 8000626:	6819      	ldr	r1, [r3, #0]
 8000628:	4817      	ldr	r0, [pc, #92]	; (8000688 <Init_Graphics_System+0x178>)
 800062a:	f001 ff7f 	bl	800252c <HAL_LTDC_SetAddress>

    hdma2d.Instance = DMA2D;
 800062e:	4c19      	ldr	r4, [pc, #100]	; (8000694 <Init_Graphics_System+0x184>)
 8000630:	4b19      	ldr	r3, [pc, #100]	; (8000698 <Init_Graphics_System+0x188>)
 8000632:	6023      	str	r3, [r4, #0]
    hdma2d.Init.Mode = DMA2D_M2M_BLEND;
 8000634:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000638:	6063      	str	r3, [r4, #4]
    hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800063a:	2500      	movs	r5, #0
 800063c:	60a5      	str	r5, [r4, #8]
    hdma2d.Init.OutputOffset = 0;
 800063e:	60e5      	str	r5, [r4, #12]
    hdma2d.LayerCfg[1].InputOffset = 0;
 8000640:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000642:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8000644:	2601      	movs	r6, #1
 8000646:	6326      	str	r6, [r4, #48]	; 0x30
    hdma2d.LayerCfg[1].InputAlpha = 0;
 8000648:	6365      	str	r5, [r4, #52]	; 0x34
    hdma2d.LayerCfg[0].InputOffset = 0;
 800064a:	61a5      	str	r5, [r4, #24]
    hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_ARGB8888;
 800064c:	61e5      	str	r5, [r4, #28]
    hdma2d.LayerCfg[0].AlphaMode = DMA2D_REPLACE_ALPHA;
 800064e:	6226      	str	r6, [r4, #32]
    hdma2d.LayerCfg[0].InputAlpha = 0;
 8000650:	6265      	str	r5, [r4, #36]	; 0x24
    //hdma2d.LayerCfg[0].AlphaInverted = DMA2D_REGULAR_ALPHA;
    //hdma2d.LayerCfg[0].RedBlueSwap = DMA2D_RB_REGULAR;
    if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000652:	4620      	mov	r0, r4
 8000654:	f001 f9f0 	bl	8001a38 <HAL_DMA2D_Init>
    {

    }
    if (HAL_DMA2D_ConfigLayer(&hdma2d, 0) != HAL_OK)
 8000658:	4629      	mov	r1, r5
 800065a:	4620      	mov	r0, r4
 800065c:	f001 fb76 	bl	8001d4c <HAL_DMA2D_ConfigLayer>
    {

    }
    if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000660:	4631      	mov	r1, r6
 8000662:	4620      	mov	r0, r4
 8000664:	f001 fb72 	bl	8001d4c <HAL_DMA2D_ConfigLayer>
    {

    }

}
 8000668:	b01d      	add	sp, #116	; 0x74
 800066a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800066e:	2201      	movs	r2, #1
 8000670:	a902      	add	r1, sp, #8
 8000672:	4628      	mov	r0, r5
 8000674:	f001 ff2c 	bl	80024d0 <HAL_LTDC_ConfigLayer>
 8000678:	e7d3      	b.n	8000622 <Init_Graphics_System+0x112>
 800067a:	bf00      	nop
 800067c:	20000028 	.word	0x20000028
 8000680:	20000038 	.word	0x20000038
 8000684:	20000030 	.word	0x20000030
 8000688:	20000124 	.word	0x20000124
 800068c:	40016800 	.word	0x40016800
 8000690:	2000002c 	.word	0x2000002c
 8000694:	200001ec 	.word	0x200001ec
 8000698:	4002b000 	.word	0x4002b000
 800069c:	20000034 	.word	0x20000034

080006a0 <Fill_all>:

void Fill_all(unsigned int Color) //Заливка всего дисплея цветом
{
 80006a0:	b510      	push	{r4, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	4604      	mov	r4, r0
	hdma2d.Init.Mode = DMA2D_R2M;
 80006a6:	480e      	ldr	r0, [pc, #56]	; (80006e0 <Fill_all+0x40>)
 80006a8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80006ac:	6043      	str	r3, [r0, #4]
	hdma2d.Init.OutputOffset = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60c3      	str	r3, [r0, #12]

    if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 80006b2:	f001 f9c1 	bl	8001a38 <HAL_DMA2D_Init>
 80006b6:	b108      	cbz	r0, 80006bc <Fill_all+0x1c>
	   if (HAL_DMA2D_Start(&hdma2d, Color, LCD_FRAME_BUFFER1, Width, Height) == HAL_OK)
	   {
		   HAL_DMA2D_PollForTransfer(&hdma2d, TransferDelay);
	   }
	}
}
 80006b8:	b002      	add	sp, #8
 80006ba:	bd10      	pop	{r4, pc}
	   if (HAL_DMA2D_Start(&hdma2d, Color, LCD_FRAME_BUFFER1, Width, Height) == HAL_OK)
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <Fill_all+0x44>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a09      	ldr	r2, [pc, #36]	; (80006e8 <Fill_all+0x48>)
 80006c2:	6812      	ldr	r2, [r2, #0]
 80006c4:	4909      	ldr	r1, [pc, #36]	; (80006ec <Fill_all+0x4c>)
 80006c6:	6809      	ldr	r1, [r1, #0]
 80006c8:	9100      	str	r1, [sp, #0]
 80006ca:	4621      	mov	r1, r4
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <Fill_all+0x40>)
 80006ce:	f001 f9e1 	bl	8001a94 <HAL_DMA2D_Start>
 80006d2:	2800      	cmp	r0, #0
 80006d4:	d1f0      	bne.n	80006b8 <Fill_all+0x18>
		   HAL_DMA2D_PollForTransfer(&hdma2d, TransferDelay);
 80006d6:	2164      	movs	r1, #100	; 0x64
 80006d8:	4801      	ldr	r0, [pc, #4]	; (80006e0 <Fill_all+0x40>)
 80006da:	f001 f9f7 	bl	8001acc <HAL_DMA2D_PollForTransfer>
}
 80006de:	e7eb      	b.n	80006b8 <Fill_all+0x18>
 80006e0:	200001ec 	.word	0x200001ec
 80006e4:	20000038 	.word	0x20000038
 80006e8:	20000030 	.word	0x20000030
 80006ec:	20000028 	.word	0x20000028

080006f0 <Fill_rectangle>:

void Fill_rectangle(unsigned int Color, unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY) //Заливка прямоугольной формы
{
 80006f0:	b530      	push	{r4, r5, lr}
 80006f2:	b087      	sub	sp, #28
 80006f4:	4604      	mov	r4, r0
 80006f6:	9204      	str	r2, [sp, #16]
	StartX--;
 80006f8:	3901      	subs	r1, #1
 80006fa:	9105      	str	r1, [sp, #20]
	StartY--;
 80006fc:	3b01      	subs	r3, #1
 80006fe:	9303      	str	r3, [sp, #12]
	if(StartX > StopX) swap(&StartX,&StopX);
 8000700:	4291      	cmp	r1, r2
 8000702:	d81a      	bhi.n	800073a <Fill_rectangle+0x4a>
	if(StartY>StopY) swap(&StartY,&StopY);
 8000704:	9a03      	ldr	r2, [sp, #12]
 8000706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000708:	429a      	cmp	r2, r3
 800070a:	d81b      	bhi.n	8000744 <Fill_rectangle+0x54>
	unsigned int addr = (LCD_FRAME_BUFFER1) + 4*(StartY * Width + StartX);
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <Fill_rectangle+0xa8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	9a05      	ldr	r2, [sp, #20]
 8000712:	9903      	ldr	r1, [sp, #12]
 8000714:	fb01 2103 	mla	r1, r1, r3, r2
 8000718:	4820      	ldr	r0, [pc, #128]	; (800079c <Fill_rectangle+0xac>)
 800071a:	6805      	ldr	r5, [r0, #0]
 800071c:	eb05 0581 	add.w	r5, r5, r1, lsl #2
	hdma2d.Init.Mode = DMA2D_R2M;
 8000720:	481f      	ldr	r0, [pc, #124]	; (80007a0 <Fill_rectangle+0xb0>)
 8000722:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8000726:	6041      	str	r1, [r0, #4]
    hdma2d.Init.OutputOffset = Width-(StopX-StartX);
 8000728:	9904      	ldr	r1, [sp, #16]
 800072a:	1a52      	subs	r2, r2, r1
 800072c:	4413      	add	r3, r2
 800072e:	60c3      	str	r3, [r0, #12]

    //HAL_Delay(5);
    if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8000730:	f001 f982 	bl	8001a38 <HAL_DMA2D_Init>
 8000734:	b158      	cbz	r0, 800074e <Fill_rectangle+0x5e>
       }
    }

	for(int i = 180; i < 220; i++)
	{
		for(int j = 180; j < 220; j++)
 8000736:	20b4      	movs	r0, #180	; 0xb4
 8000738:	e028      	b.n	800078c <Fill_rectangle+0x9c>
	if(StartX > StopX) swap(&StartX,&StopX);
 800073a:	a904      	add	r1, sp, #16
 800073c:	a805      	add	r0, sp, #20
 800073e:	f7ff fee3 	bl	8000508 <swap>
 8000742:	e7df      	b.n	8000704 <Fill_rectangle+0x14>
	if(StartY>StopY) swap(&StartY,&StopY);
 8000744:	a90a      	add	r1, sp, #40	; 0x28
 8000746:	a803      	add	r0, sp, #12
 8000748:	f7ff fede 	bl	8000508 <swap>
 800074c:	e7de      	b.n	800070c <Fill_rectangle+0x1c>
       if (HAL_DMA2D_Start(&hdma2d, Color, addr, StopX-StartX, StopY-StartY) == HAL_OK)
 800074e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000750:	9a03      	ldr	r2, [sp, #12]
 8000752:	1a9b      	subs	r3, r3, r2
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	9a04      	ldr	r2, [sp, #16]
 8000758:	9b05      	ldr	r3, [sp, #20]
 800075a:	1ad3      	subs	r3, r2, r3
 800075c:	462a      	mov	r2, r5
 800075e:	4621      	mov	r1, r4
 8000760:	480f      	ldr	r0, [pc, #60]	; (80007a0 <Fill_rectangle+0xb0>)
 8000762:	f001 f997 	bl	8001a94 <HAL_DMA2D_Start>
 8000766:	2800      	cmp	r0, #0
 8000768:	d1e5      	bne.n	8000736 <Fill_rectangle+0x46>
    	   HAL_DMA2D_PollForTransfer(&hdma2d, TransferDelay);
 800076a:	2164      	movs	r1, #100	; 0x64
 800076c:	480c      	ldr	r0, [pc, #48]	; (80007a0 <Fill_rectangle+0xb0>)
 800076e:	f001 f9ad 	bl	8001acc <HAL_DMA2D_PollForTransfer>
 8000772:	e7e0      	b.n	8000736 <Fill_rectangle+0x46>
		{
			*(__IO uint32_t*) (LCD_FRAME_BUFFER1 + (4*(i*Width + j))) = Color;
 8000774:	4a08      	ldr	r2, [pc, #32]	; (8000798 <Fill_rectangle+0xa8>)
 8000776:	6812      	ldr	r2, [r2, #0]
 8000778:	fb02 3200 	mla	r2, r2, r0, r3
 800077c:	4907      	ldr	r1, [pc, #28]	; (800079c <Fill_rectangle+0xac>)
 800077e:	6809      	ldr	r1, [r1, #0]
 8000780:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
		for(int j = 180; j < 220; j++)
 8000784:	3301      	adds	r3, #1
 8000786:	2bdb      	cmp	r3, #219	; 0xdb
 8000788:	ddf4      	ble.n	8000774 <Fill_rectangle+0x84>
	for(int i = 180; i < 220; i++)
 800078a:	3001      	adds	r0, #1
 800078c:	28db      	cmp	r0, #219	; 0xdb
 800078e:	dc01      	bgt.n	8000794 <Fill_rectangle+0xa4>
		for(int j = 180; j < 220; j++)
 8000790:	23b4      	movs	r3, #180	; 0xb4
 8000792:	e7f8      	b.n	8000786 <Fill_rectangle+0x96>
		}
	}
}
 8000794:	b007      	add	sp, #28
 8000796:	bd30      	pop	{r4, r5, pc}
 8000798:	20000038 	.word	0x20000038
 800079c:	20000030 	.word	0x20000030
 80007a0:	200001ec 	.word	0x200001ec

080007a4 <Show>:
{
	*(__IO unsigned int*) (Address + (4*(y*Width + x))) = Color;
}

void Show(char Layer) // Отобразить содержимое на выбранный слой экрана
{
 80007a4:	b510      	push	{r4, lr}
 80007a6:	b082      	sub	sp, #8
	unsigned int RAddr = 0;
	if(Layer == 0)
 80007a8:	b990      	cbnz	r0, 80007d0 <Show+0x2c>
	{
		RAddr = LCD_FRAME_BUFFER0;
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <Show+0x64>)
 80007ac:	681c      	ldr	r4, [r3, #0]
	}
	else
	{
		RAddr = LCD_FRAME_BUFFER2;
	}
	hdma2d.Init.Mode = DMA2D_M2M_PFC;
 80007ae:	4817      	ldr	r0, [pc, #92]	; (800080c <Show+0x68>)
 80007b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b4:	6043      	str	r3, [r0, #4]
    hdma2d.Init.ColorMode = DMA2D_ARGB8888;
 80007b6:	2300      	movs	r3, #0
 80007b8:	6083      	str	r3, [r0, #8]
	hdma2d.Init.OutputOffset = 0;
 80007ba:	60c3      	str	r3, [r0, #12]
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007bc:	6303      	str	r3, [r0, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 80007be:	22ff      	movs	r2, #255	; 0xff
 80007c0:	6342      	str	r2, [r0, #52]	; 0x34
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80007c2:	62c3      	str	r3, [r0, #44]	; 0x2c
	hdma2d.LayerCfg[1].InputOffset = 0;
 80007c4:	6283      	str	r3, [r0, #40]	; 0x28
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 80007c6:	f001 f937 	bl	8001a38 <HAL_DMA2D_Init>
 80007ca:	b120      	cbz	r0, 80007d6 <Show+0x32>
	    {
	      HAL_DMA2D_PollForTransfer(&hdma2d, TransferDelay);
	    }
	  }
	}
}
 80007cc:	b002      	add	sp, #8
 80007ce:	bd10      	pop	{r4, pc}
		RAddr = LCD_FRAME_BUFFER2;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <Show+0x6c>)
 80007d2:	681c      	ldr	r4, [r3, #0]
 80007d4:	e7eb      	b.n	80007ae <Show+0xa>
	  if(HAL_DMA2D_ConfigLayer(&hdma2d, 1) == HAL_OK)
 80007d6:	2101      	movs	r1, #1
 80007d8:	480c      	ldr	r0, [pc, #48]	; (800080c <Show+0x68>)
 80007da:	f001 fab7 	bl	8001d4c <HAL_DMA2D_ConfigLayer>
 80007de:	2800      	cmp	r0, #0
 80007e0:	d1f4      	bne.n	80007cc <Show+0x28>
	    if (HAL_DMA2D_Start(&hdma2d, LCD_FRAME_BUFFER1, RAddr, Width, Height) == HAL_OK)
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <Show+0x70>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a0c      	ldr	r2, [pc, #48]	; (8000818 <Show+0x74>)
 80007e8:	6811      	ldr	r1, [r2, #0]
 80007ea:	4a0c      	ldr	r2, [pc, #48]	; (800081c <Show+0x78>)
 80007ec:	6812      	ldr	r2, [r2, #0]
 80007ee:	9200      	str	r2, [sp, #0]
 80007f0:	4622      	mov	r2, r4
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <Show+0x68>)
 80007f4:	f001 f94e 	bl	8001a94 <HAL_DMA2D_Start>
 80007f8:	2800      	cmp	r0, #0
 80007fa:	d1e7      	bne.n	80007cc <Show+0x28>
	      HAL_DMA2D_PollForTransfer(&hdma2d, TransferDelay);
 80007fc:	2164      	movs	r1, #100	; 0x64
 80007fe:	4803      	ldr	r0, [pc, #12]	; (800080c <Show+0x68>)
 8000800:	f001 f964 	bl	8001acc <HAL_DMA2D_PollForTransfer>
}
 8000804:	e7e2      	b.n	80007cc <Show+0x28>
 8000806:	bf00      	nop
 8000808:	2000002c 	.word	0x2000002c
 800080c:	200001ec 	.word	0x200001ec
 8000810:	20000034 	.word	0x20000034
 8000814:	20000038 	.word	0x20000038
 8000818:	20000030 	.word	0x20000030
 800081c:	20000028 	.word	0x20000028

08000820 <Backlight>:

void Backlight(unsigned int Brightness, char State) //Управление подсветкой
{
 8000820:	b508      	push	{r3, lr}
	if(State == LOW)
 8000822:	b129      	cbz	r1, 8000830 <Backlight+0x10>
	{
		HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, RESET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, SET);
 8000824:	2201      	movs	r2, #1
 8000826:	2108      	movs	r1, #8
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <Backlight+0x1c>)
 800082a:	f001 fbdf 	bl	8001fec <HAL_GPIO_WritePin>
	}
}
 800082e:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	2108      	movs	r1, #8
 8000834:	4801      	ldr	r0, [pc, #4]	; (800083c <Backlight+0x1c>)
 8000836:	f001 fbd9 	bl	8001fec <HAL_GPIO_WritePin>
 800083a:	e7f8      	b.n	800082e <Backlight+0xe>
 800083c:	40022800 	.word	0x40022800

08000840 <Graphics_Init>:
#include "Coordinates.h"
#include "Font.h"


void Graphics_Init(DisplayConfig *dcf)
{
 8000840:	b508      	push	{r3, lr}
	Init_Graphics_System(dcf->Display_Height, dcf->Display_Width, dcf->Start_RAM_Address, dcf->Layers_count);
 8000842:	7b03      	ldrb	r3, [r0, #12]
 8000844:	6802      	ldr	r2, [r0, #0]
 8000846:	6881      	ldr	r1, [r0, #8]
 8000848:	6840      	ldr	r0, [r0, #4]
 800084a:	f7ff fe61 	bl	8000510 <Init_Graphics_System>
}
 800084e:	bd08      	pop	{r3, pc}

08000850 <Set_Backlight>:
void Set_Backlight(char State, unsigned int Brightness)
{
 8000850:	b508      	push	{r3, lr}
 8000852:	460b      	mov	r3, r1
	Backlight(Brightness, State);
 8000854:	4601      	mov	r1, r0
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ffe2 	bl	8000820 <Backlight>
}
 800085c:	bd08      	pop	{r3, pc}

0800085e <Color_888_>:
   return 0;
}
unsigned int Color_888_(unsigned int Color)
{
	return Color | 0xff000000;
}
 800085e:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8000862:	4770      	bx	lr

08000864 <Fill_Display>:
	char FontH = calibri[1];
	return FontH;
}

void Fill_Display(unsigned int Color)
{
 8000864:	b508      	push	{r3, lr}
	Fill_all(Color);
 8000866:	f7ff ff1b 	bl	80006a0 <Fill_all>
}
 800086a:	bd08      	pop	{r3, pc}

0800086c <Fill_Rectangle>:
void Fill_Rectangle(unsigned int Color, unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY)
{
 800086c:	b510      	push	{r4, lr}
 800086e:	b082      	sub	sp, #8
	Fill_rectangle(Color, StartX, StopX, StartY, StopY);
 8000870:	9c04      	ldr	r4, [sp, #16]
 8000872:	9400      	str	r4, [sp, #0]
 8000874:	f7ff ff3c 	bl	80006f0 <Fill_rectangle>
}
 8000878:	b002      	add	sp, #8
 800087a:	bd10      	pop	{r4, pc}

0800087c <Show_to_layer>:


void Show_to_layer(char Layer)
{
 800087c:	b508      	push	{r3, lr}
	Show(Layer);
 800087e:	f7ff ff91 	bl	80007a4 <Show>
}
 8000882:	bd08      	pop	{r3, pc}

08000884 <MainFunc>:
#include "Code.h"
#include "SDRAM.h"
#include "SimpleGraphics.h"

void MainFunc ()
{
 8000884:	b500      	push	{lr}
 8000886:	b087      	sub	sp, #28

	DisplayConfig dc;
	dc.Display_Height = 272;
 8000888:	f44f 7388 	mov.w	r3, #272	; 0x110
 800088c:	9303      	str	r3, [sp, #12]
	dc.Display_Width = 480;
 800088e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000892:	9304      	str	r3, [sp, #16]
	dc.Layers_count = 1;
 8000894:	2501      	movs	r5, #1
 8000896:	f88d 5014 	strb.w	r5, [sp, #20]
	dc.Start_RAM_Address = 0xC0000000;
 800089a:	ac06      	add	r4, sp, #24
 800089c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80008a0:	f844 3d10 	str.w	r3, [r4, #-16]!

	SDRAM_Init();
 80008a4:	f000 f822 	bl	80008ec <SDRAM_Init>
	Set_Backlight(1, 1);
 80008a8:	4629      	mov	r1, r5
 80008aa:	4628      	mov	r0, r5
 80008ac:	f7ff ffd0 	bl	8000850 <Set_Backlight>
	HAL_Delay(1000);
 80008b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b4:	f000 fff2 	bl	800189c <HAL_Delay>
	Graphics_Init(&dc);
 80008b8:	4620      	mov	r0, r4
 80008ba:	f7ff ffc1 	bl	8000840 <Graphics_Init>
	HAL_Delay(500);
 80008be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008c2:	f000 ffeb 	bl	800189c <HAL_Delay>
    Fill_Display(Color_888_(blue));
 80008c6:	20ff      	movs	r0, #255	; 0xff
 80008c8:	f7ff ffc9 	bl	800085e <Color_888_>
 80008cc:	f7ff ffca 	bl	8000864 <Fill_Display>
    Fill_Rectangle(Color_888_(red), 100, 150, 100, 150);
 80008d0:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 80008d4:	f7ff ffc3 	bl	800085e <Color_888_>
 80008d8:	2296      	movs	r2, #150	; 0x96
 80008da:	9200      	str	r2, [sp, #0]
 80008dc:	2364      	movs	r3, #100	; 0x64
 80008de:	4619      	mov	r1, r3
 80008e0:	f7ff ffc4 	bl	800086c <Fill_Rectangle>
    Show_to_layer(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ffc9 	bl	800087c <Show_to_layer>
 80008ea:	e7fe      	b.n	80008ea <MainFunc+0x66>

080008ec <SDRAM_Init>:
HAL_StatusTypeDef hal_stat;



void SDRAM_Init()
{
 80008ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    unsigned int tmpmrd = 0;
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80008f0:	4c25      	ldr	r4, [pc, #148]	; (8000988 <SDRAM_Init+0x9c>)
 80008f2:	2701      	movs	r7, #1
 80008f4:	6027      	str	r7, [r4, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80008f6:	f04f 0810 	mov.w	r8, #16
 80008fa:	f8c4 8004 	str.w	r8, [r4, #4]
	command.AutoRefreshNumber = 1;
 80008fe:	60a7      	str	r7, [r4, #8]
	command.ModeRegisterDefinition = 0;
 8000900:	f04f 0900 	mov.w	r9, #0
 8000904:	f8c4 900c 	str.w	r9, [r4, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8000908:	4d20      	ldr	r5, [pc, #128]	; (800098c <SDRAM_Init+0xa0>)
 800090a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800090e:	4621      	mov	r1, r4
 8000910:	4628      	mov	r0, r5
 8000912:	f003 fa9a 	bl	8003e4a <HAL_SDRAM_SendCommand>
 8000916:	4e1e      	ldr	r6, [pc, #120]	; (8000990 <SDRAM_Init+0xa4>)
 8000918:	7030      	strb	r0, [r6, #0]
	HAL_Delay(50);
 800091a:	2032      	movs	r0, #50	; 0x32
 800091c:	f000 ffbe 	bl	800189c <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 8000920:	2302      	movs	r3, #2
 8000922:	6023      	str	r3, [r4, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000924:	f8c4 8004 	str.w	r8, [r4, #4]
	command.AutoRefreshNumber = 1;
 8000928:	60a7      	str	r7, [r4, #8]
	command.ModeRegisterDefinition = 0;
 800092a:	f8c4 900c 	str.w	r9, [r4, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 800092e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000932:	4621      	mov	r1, r4
 8000934:	4628      	mov	r0, r5
 8000936:	f003 fa88 	bl	8003e4a <HAL_SDRAM_SendCommand>
 800093a:	7030      	strb	r0, [r6, #0]

	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800093c:	2303      	movs	r3, #3
 800093e:	6023      	str	r3, [r4, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000940:	f8c4 8004 	str.w	r8, [r4, #4]
	command.AutoRefreshNumber = 8;
 8000944:	2308      	movs	r3, #8
 8000946:	60a3      	str	r3, [r4, #8]
	command.ModeRegisterDefinition = 0;
 8000948:	f8c4 900c 	str.w	r9, [r4, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 800094c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000950:	4621      	mov	r1, r4
 8000952:	4628      	mov	r0, r5
 8000954:	f003 fa79 	bl	8003e4a <HAL_SDRAM_SendCommand>
 8000958:	7030      	strb	r0, [r6, #0]

	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2 | SDRAM_MODEREG_OPERATING_MODE_STANDARD | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800095a:	2304      	movs	r3, #4
 800095c:	6023      	str	r3, [r4, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800095e:	f8c4 8004 	str.w	r8, [r4, #4]
	command.AutoRefreshNumber = 1;
 8000962:	60a7      	str	r7, [r4, #8]
	command.ModeRegisterDefinition = tmpmrd;
 8000964:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000968:	60e3      	str	r3, [r4, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 800096a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800096e:	4621      	mov	r1, r4
 8000970:	4628      	mov	r0, r5
 8000972:	f003 fa6a 	bl	8003e4a <HAL_SDRAM_SendCommand>
 8000976:	7030      	strb	r0, [r6, #0]

	HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8000978:	f240 6103 	movw	r1, #1539	; 0x603
 800097c:	4628      	mov	r0, r5
 800097e:	f003 fa81 	bl	8003e84 <HAL_SDRAM_ProgramRefreshRate>
}
 8000982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000986:	bf00      	nop
 8000988:	20000040 	.word	0x20000040
 800098c:	2000022c 	.word	0x2000022c
 8000990:	20000050 	.word	0x20000050

08000994 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000994:	b508      	push	{r3, lr}

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000996:	f000 ffe7 	bl	8001968 <HAL_MPU_Disable>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800099a:	2004      	movs	r0, #4
 800099c:	f000 fff4 	bl	8001988 <HAL_MPU_Enable>

}
 80009a0:	bd08      	pop	{r3, pc}
	...

080009a4 <MX_GPIO_Init>:
{
 80009a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009a8:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	2400      	movs	r4, #0
 80009ac:	940b      	str	r4, [sp, #44]	; 0x2c
 80009ae:	940c      	str	r4, [sp, #48]	; 0x30
 80009b0:	940d      	str	r4, [sp, #52]	; 0x34
 80009b2:	940e      	str	r4, [sp, #56]	; 0x38
 80009b4:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009b6:	4ba9      	ldr	r3, [pc, #676]	; (8000c5c <MX_GPIO_Init+0x2b8>)
 80009b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009ba:	f042 0210 	orr.w	r2, r2, #16
 80009be:	631a      	str	r2, [r3, #48]	; 0x30
 80009c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009c2:	f002 0210 	and.w	r2, r2, #16
 80009c6:	9200      	str	r2, [sp, #0]
 80009c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009d0:	631a      	str	r2, [r3, #48]	; 0x30
 80009d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009d4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80009d8:	9201      	str	r2, [sp, #4]
 80009da:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009de:	f042 0202 	orr.w	r2, r2, #2
 80009e2:	631a      	str	r2, [r3, #48]	; 0x30
 80009e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009e6:	f002 0202 	and.w	r2, r2, #2
 80009ea:	9202      	str	r2, [sp, #8]
 80009ec:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009f0:	f042 0208 	orr.w	r2, r2, #8
 80009f4:	631a      	str	r2, [r3, #48]	; 0x30
 80009f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009f8:	f002 0208 	and.w	r2, r2, #8
 80009fc:	9203      	str	r2, [sp, #12]
 80009fe:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a02:	f042 0204 	orr.w	r2, r2, #4
 8000a06:	631a      	str	r2, [r3, #48]	; 0x30
 8000a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a0a:	f002 0204 	and.w	r2, r2, #4
 8000a0e:	9204      	str	r2, [sp, #16]
 8000a10:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a14:	f042 0201 	orr.w	r2, r2, #1
 8000a18:	631a      	str	r2, [r3, #48]	; 0x30
 8000a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a1c:	f002 0201 	and.w	r2, r2, #1
 8000a20:	9205      	str	r2, [sp, #20]
 8000a22:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a2a:	631a      	str	r2, [r3, #48]	; 0x30
 8000a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a2e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000a32:	9206      	str	r2, [sp, #24]
 8000a34:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a3c:	631a      	str	r2, [r3, #48]	; 0x30
 8000a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a40:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000a44:	9207      	str	r2, [sp, #28]
 8000a46:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a4e:	631a      	str	r2, [r3, #48]	; 0x30
 8000a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a52:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000a56:	9208      	str	r2, [sp, #32]
 8000a58:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a5c:	f042 0220 	orr.w	r2, r2, #32
 8000a60:	631a      	str	r2, [r3, #48]	; 0x30
 8000a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a64:	f002 0220 	and.w	r2, r2, #32
 8000a68:	9209      	str	r2, [sp, #36]	; 0x24
 8000a6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a72:	631a      	str	r2, [r3, #48]	; 0x30
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7a:	930a      	str	r3, [sp, #40]	; 0x28
 8000a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2120      	movs	r1, #32
 8000a82:	4877      	ldr	r0, [pc, #476]	; (8000c60 <MX_GPIO_Init+0x2bc>)
 8000a84:	f001 fab2 	bl	8001fec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8000a88:	4622      	mov	r2, r4
 8000a8a:	210c      	movs	r1, #12
 8000a8c:	4875      	ldr	r0, [pc, #468]	; (8000c64 <MX_GPIO_Init+0x2c0>)
 8000a8e:	f001 faad 	bl	8001fec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2108      	movs	r1, #8
 8000a96:	4874      	ldr	r0, [pc, #464]	; (8000c68 <MX_GPIO_Init+0x2c4>)
 8000a98:	f001 faa8 	bl	8001fec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa2:	4870      	ldr	r0, [pc, #448]	; (8000c64 <MX_GPIO_Init+0x2c0>)
 8000aa4:	f001 faa2 	bl	8001fec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000aa8:	4622      	mov	r2, r4
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	486f      	ldr	r0, [pc, #444]	; (8000c6c <MX_GPIO_Init+0x2c8>)
 8000ab0:	f001 fa9c 	bl	8001fec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000ab4:	4622      	mov	r2, r4
 8000ab6:	21c8      	movs	r1, #200	; 0xc8
 8000ab8:	486d      	ldr	r0, [pc, #436]	; (8000c70 <MX_GPIO_Init+0x2cc>)
 8000aba:	f001 fa97 	bl	8001fec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000abe:	f04f 0b08 	mov.w	fp, #8
 8000ac2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac6:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aca:	a90b      	add	r1, sp, #44	; 0x2c
 8000acc:	4869      	ldr	r0, [pc, #420]	; (8000c74 <MX_GPIO_Init+0x2d0>)
 8000ace:	f001 f99f 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2502      	movs	r5, #2
 8000ad8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2603      	movs	r6, #3
 8000ade:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ae0:	2309      	movs	r3, #9
 8000ae2:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	a90b      	add	r1, sp, #44	; 0x2c
 8000ae6:	4863      	ldr	r0, [pc, #396]	; (8000c74 <MX_GPIO_Init+0x2d0>)
 8000ae8:	f001 f992 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000aec:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000af0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af8:	230b      	movs	r3, #11
 8000afa:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000afc:	a90b      	add	r1, sp, #44	; 0x2c
 8000afe:	485c      	ldr	r0, [pc, #368]	; (8000c70 <MX_GPIO_Init+0x2cc>)
 8000b00:	f001 f986 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000b04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b08:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b0a:	2312      	movs	r3, #18
 8000b0c:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0e:	2701      	movs	r7, #1
 8000b10:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b14:	2304      	movs	r3, #4
 8000b16:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b18:	a90b      	add	r1, sp, #44	; 0x2c
 8000b1a:	4857      	ldr	r0, [pc, #348]	; (8000c78 <MX_GPIO_Init+0x2d4>)
 8000b1c:	f001 f978 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000b20:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000b24:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000b2c:	f04f 080a 	mov.w	r8, #10
 8000b30:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b34:	a90b      	add	r1, sp, #44	; 0x2c
 8000b36:	4850      	ldr	r0, [pc, #320]	; (8000c78 <MX_GPIO_Init+0x2d4>)
 8000b38:	f001 f96a 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000b3c:	2310      	movs	r3, #16
 8000b3e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b46:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000b48:	a90b      	add	r1, sp, #44	; 0x2c
 8000b4a:	484b      	ldr	r0, [pc, #300]	; (8000c78 <MX_GPIO_Init+0x2d4>)
 8000b4c:	f001 f960 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000b50:	f04f 0a80 	mov.w	sl, #128	; 0x80
 8000b54:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000b5e:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000b62:	a90b      	add	r1, sp, #44	; 0x2c
 8000b64:	483e      	ldr	r0, [pc, #248]	; (8000c60 <MX_GPIO_Init+0x2bc>)
 8000b66:	f001 f953 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b6e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b76:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000b78:	a90b      	add	r1, sp, #44	; 0x2c
 8000b7a:	4840      	ldr	r0, [pc, #256]	; (8000c7c <MX_GPIO_Init+0x2d8>)
 8000b7c:	f001 f948 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000b80:	2360      	movs	r3, #96	; 0x60
 8000b82:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b8a:	f04f 090d 	mov.w	r9, #13
 8000b8e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b92:	a90b      	add	r1, sp, #44	; 0x2c
 8000b94:	4837      	ldr	r0, [pc, #220]	; (8000c74 <MX_GPIO_Init+0x2d0>)
 8000b96:	f001 f93b 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b9a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ba4:	2307      	movs	r3, #7
 8000ba6:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	a90b      	add	r1, sp, #44	; 0x2c
 8000baa:	4833      	ldr	r0, [pc, #204]	; (8000c78 <MX_GPIO_Init+0x2d4>)
 8000bac:	f001 f930 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000bb0:	2340      	movs	r3, #64	; 0x40
 8000bb2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000bba:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	a90b      	add	r1, sp, #44	; 0x2c
 8000bc0:	482d      	ldr	r0, [pc, #180]	; (8000c78 <MX_GPIO_Init+0x2d4>)
 8000bc2:	f001 f925 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bca:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bcc:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	a90b      	add	r1, sp, #44	; 0x2c
 8000bd2:	482b      	ldr	r0, [pc, #172]	; (8000c80 <MX_GPIO_Init+0x2dc>)
 8000bd4:	f001 f91c 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000bd8:	2340      	movs	r3, #64	; 0x40
 8000bda:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bdc:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 8000bde:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000be2:	a90b      	add	r1, sp, #44	; 0x2c
 8000be4:	481e      	ldr	r0, [pc, #120]	; (8000c60 <MX_GPIO_Init+0x2bc>)
 8000be6:	f001 f913 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000bea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000bee:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bf6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	a90b      	add	r1, sp, #44	; 0x2c
 8000bfc:	481f      	ldr	r0, [pc, #124]	; (8000c7c <MX_GPIO_Init+0x2d8>)
 8000bfe:	f001 f907 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000c02:	23f0      	movs	r3, #240	; 0xf0
 8000c04:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000c0c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c10:	a90b      	add	r1, sp, #44	; 0x2c
 8000c12:	4814      	ldr	r0, [pc, #80]	; (8000c64 <MX_GPIO_Init+0x2c0>)
 8000c14:	f001 f8fc 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c1c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000c24:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000c28:	a90b      	add	r1, sp, #44	; 0x2c
 8000c2a:	4811      	ldr	r0, [pc, #68]	; (8000c70 <MX_GPIO_Init+0x2cc>)
 8000c2c:	f001 f8f0 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c30:	2320      	movs	r3, #32
 8000c32:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	a90b      	add	r1, sp, #44	; 0x2c
 8000c3c:	4808      	ldr	r0, [pc, #32]	; (8000c60 <MX_GPIO_Init+0x2bc>)
 8000c3e:	f001 f8e7 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000c42:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c4c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000c50:	a90b      	add	r1, sp, #44	; 0x2c
 8000c52:	4803      	ldr	r0, [pc, #12]	; (8000c60 <MX_GPIO_Init+0x2bc>)
 8000c54:	f001 f8dc 	bl	8001e10 <HAL_GPIO_Init>
 8000c58:	e016      	b.n	8000c88 <MX_GPIO_Init+0x2e4>
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020c00 	.word	0x40020c00
 8000c64:	40022000 	.word	0x40022000
 8000c68:	40022800 	.word	0x40022800
 8000c6c:	40021c00 	.word	0x40021c00
 8000c70:	40021800 	.word	0x40021800
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40020400 	.word	0x40020400
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	40022400 	.word	0x40022400
 8000c84:	10120000 	.word	0x10120000
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000c88:	f241 030c 	movw	r3, #4108	; 0x100c
 8000c8c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c94:	a90b      	add	r1, sp, #44	; 0x2c
 8000c96:	488d      	ldr	r0, [pc, #564]	; (8000ecc <MX_GPIO_Init+0x528>)
 8000c98:	f001 f8ba 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000c9c:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
 8000ca0:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca4:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	a90b      	add	r1, sp, #44	; 0x2c
 8000caa:	4889      	ldr	r0, [pc, #548]	; (8000ed0 <MX_GPIO_Init+0x52c>)
 8000cac:	f001 f8b0 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000cb0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb4:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000cba:	a90b      	add	r1, sp, #44	; 0x2c
 8000cbc:	4885      	ldr	r0, [pc, #532]	; (8000ed4 <MX_GPIO_Init+0x530>)
 8000cbe:	f001 f8a7 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc6:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000cce:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	a90b      	add	r1, sp, #44	; 0x2c
 8000cd4:	4880      	ldr	r0, [pc, #512]	; (8000ed8 <MX_GPIO_Init+0x534>)
 8000cd6:	f001 f89b 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000cda:	2210      	movs	r2, #16
 8000cdc:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cde:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	a90b      	add	r1, sp, #44	; 0x2c
 8000ce4:	487d      	ldr	r0, [pc, #500]	; (8000edc <MX_GPIO_Init+0x538>)
 8000ce6:	f001 f893 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000cea:	f248 0304 	movw	r3, #32772	; 0x8004
 8000cee:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf0:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cf4:	a90b      	add	r1, sp, #44	; 0x2c
 8000cf6:	487a      	ldr	r0, [pc, #488]	; (8000ee0 <MX_GPIO_Init+0x53c>)
 8000cf8:	f001 f88a 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000cfc:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d04:	2205      	movs	r2, #5
 8000d06:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000d08:	a90b      	add	r1, sp, #44	; 0x2c
 8000d0a:	4870      	ldr	r0, [pc, #448]	; (8000ecc <MX_GPIO_Init+0x528>)
 8000d0c:	f001 f880 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000d10:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	a90b      	add	r1, sp, #44	; 0x2c
 8000d1c:	4870      	ldr	r0, [pc, #448]	; (8000ee0 <MX_GPIO_Init+0x53c>)
 8000d1e:	f001 f877 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000d22:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000d26:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d2e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d32:	a90b      	add	r1, sp, #44	; 0x2c
 8000d34:	486a      	ldr	r0, [pc, #424]	; (8000ee0 <MX_GPIO_Init+0x53c>)
 8000d36:	f001 f86b 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000d3a:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000d42:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000d44:	a90b      	add	r1, sp, #44	; 0x2c
 8000d46:	4861      	ldr	r0, [pc, #388]	; (8000ecc <MX_GPIO_Init+0x528>)
 8000d48:	f001 f862 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d50:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d58:	2207      	movs	r2, #7
 8000d5a:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	a90b      	add	r1, sp, #44	; 0x2c
 8000d5e:	4861      	ldr	r0, [pc, #388]	; (8000ee4 <MX_GPIO_Init+0x540>)
 8000d60:	f001 f856 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d68:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d70:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000d72:	a90b      	add	r1, sp, #44	; 0x2c
 8000d74:	485b      	ldr	r0, [pc, #364]	; (8000ee4 <MX_GPIO_Init+0x540>)
 8000d76:	f001 f84b 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000d7a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d7e:	4b5a      	ldr	r3, [pc, #360]	; (8000ee8 <MX_GPIO_Init+0x544>)
 8000d80:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000d84:	a90b      	add	r1, sp, #44	; 0x2c
 8000d86:	4851      	ldr	r0, [pc, #324]	; (8000ecc <MX_GPIO_Init+0x528>)
 8000d88:	f001 f842 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000d8c:	23c0      	movs	r3, #192	; 0xc0
 8000d8e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d96:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9a:	a90b      	add	r1, sp, #44	; 0x2c
 8000d9c:	484c      	ldr	r0, [pc, #304]	; (8000ed0 <MX_GPIO_Init+0x52c>)
 8000d9e:	f001 f837 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000da2:	2310      	movs	r3, #16
 8000da4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000dac:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000db0:	a90b      	add	r1, sp, #44	; 0x2c
 8000db2:	484b      	ldr	r0, [pc, #300]	; (8000ee0 <MX_GPIO_Init+0x53c>)
 8000db4:	f001 f82c 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000db8:	23c8      	movs	r3, #200	; 0xc8
 8000dba:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc2:	a90b      	add	r1, sp, #44	; 0x2c
 8000dc4:	4844      	ldr	r0, [pc, #272]	; (8000ed8 <MX_GPIO_Init+0x534>)
 8000dc6:	f001 f823 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000dca:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000dce:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd0:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dd4:	a90b      	add	r1, sp, #44	; 0x2c
 8000dd6:	4845      	ldr	r0, [pc, #276]	; (8000eec <MX_GPIO_Init+0x548>)
 8000dd8:	f001 f81a 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000ddc:	2305      	movs	r3, #5
 8000dde:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000de6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dea:	a90b      	add	r1, sp, #44	; 0x2c
 8000dec:	4838      	ldr	r0, [pc, #224]	; (8000ed0 <MX_GPIO_Init+0x52c>)
 8000dee:	f001 f80f 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000df2:	2332      	movs	r3, #50	; 0x32
 8000df4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dfc:	230b      	movs	r3, #11
 8000dfe:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e00:	a90b      	add	r1, sp, #44	; 0x2c
 8000e02:	4833      	ldr	r0, [pc, #204]	; (8000ed0 <MX_GPIO_Init+0x52c>)
 8000e04:	f001 f804 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e08:	2304      	movs	r3, #4
 8000e0a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e12:	2309      	movs	r3, #9
 8000e14:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e16:	a90b      	add	r1, sp, #44	; 0x2c
 8000e18:	4835      	ldr	r0, [pc, #212]	; (8000ef0 <MX_GPIO_Init+0x54c>)
 8000e1a:	f000 fff9 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000e1e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e22:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e2a:	2309      	movs	r3, #9
 8000e2c:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e2e:	a90b      	add	r1, sp, #44	; 0x2c
 8000e30:	482a      	ldr	r0, [pc, #168]	; (8000edc <MX_GPIO_Init+0x538>)
 8000e32:	f000 ffed 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000e36:	2304      	movs	r3, #4
 8000e38:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	a90b      	add	r1, sp, #44	; 0x2c
 8000e40:	4825      	ldr	r0, [pc, #148]	; (8000ed8 <MX_GPIO_Init+0x534>)
 8000e42:	f000 ffe5 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e46:	2386      	movs	r3, #134	; 0x86
 8000e48:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e50:	230b      	movs	r3, #11
 8000e52:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	a90b      	add	r1, sp, #44	; 0x2c
 8000e56:	4823      	ldr	r0, [pc, #140]	; (8000ee4 <MX_GPIO_Init+0x540>)
 8000e58:	f000 ffda 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000e5c:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5e:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000e62:	a90b      	add	r1, sp, #44	; 0x2c
 8000e64:	481f      	ldr	r0, [pc, #124]	; (8000ee4 <MX_GPIO_Init+0x540>)
 8000e66:	f000 ffd3 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000e6a:	2350      	movs	r3, #80	; 0x50
 8000e6c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e74:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	a90b      	add	r1, sp, #44	; 0x2c
 8000e7a:	481a      	ldr	r0, [pc, #104]	; (8000ee4 <MX_GPIO_Init+0x540>)
 8000e7c:	f000 ffc8 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000e80:	2328      	movs	r3, #40	; 0x28
 8000e82:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e8a:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	a90b      	add	r1, sp, #44	; 0x2c
 8000e90:	4814      	ldr	r0, [pc, #80]	; (8000ee4 <MX_GPIO_Init+0x540>)
 8000e92:	f000 ffbd 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000e96:	2340      	movs	r3, #64	; 0x40
 8000e98:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000ea0:	2309      	movs	r3, #9
 8000ea2:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	a90b      	add	r1, sp, #44	; 0x2c
 8000ea6:	480e      	ldr	r0, [pc, #56]	; (8000ee0 <MX_GPIO_Init+0x53c>)
 8000ea8:	f000 ffb2 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000eac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000eb0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eb8:	2305      	movs	r3, #5
 8000eba:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	a90b      	add	r1, sp, #44	; 0x2c
 8000ebe:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <MX_GPIO_Init+0x54c>)
 8000ec0:	f000 ffa6 	bl	8001e10 <HAL_GPIO_Init>
}
 8000ec4:	b011      	add	sp, #68	; 0x44
 8000ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000eca:	bf00      	nop
 8000ecc:	40022000 	.word	0x40022000
 8000ed0:	40020800 	.word	0x40020800
 8000ed4:	40022800 	.word	0x40022800
 8000ed8:	40021800 	.word	0x40021800
 8000edc:	40020c00 	.word	0x40020c00
 8000ee0:	40021c00 	.word	0x40021c00
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	10120000 	.word	0x10120000
 8000eec:	40021400 	.word	0x40021400
 8000ef0:	40020400 	.word	0x40020400

08000ef4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ef6:	6802      	ldr	r2, [r0, #0]
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d000      	beq.n	8000f00 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000efe:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000f00:	f000 fcba 	bl	8001878 <HAL_IncTick>
}
 8000f04:	e7fb      	b.n	8000efe <HAL_TIM_PeriodElapsedCallback+0xa>
 8000f06:	bf00      	nop
 8000f08:	40001000 	.word	0x40001000

08000f0c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0c:	b672      	cpsid	i
 8000f0e:	e7fe      	b.n	8000f0e <Error_Handler+0x2>

08000f10 <MX_DMA2D_Init>:
{
 8000f10:	b508      	push	{r3, lr}
  hdma2d.Instance = DMA2D;
 8000f12:	480c      	ldr	r0, [pc, #48]	; (8000f44 <MX_DMA2D_Init+0x34>)
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <MX_DMA2D_Init+0x38>)
 8000f16:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000f1c:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8000f1e:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000f20:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000f22:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000f24:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000f26:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000f28:	f000 fd86 	bl	8001a38 <HAL_DMA2D_Init>
 8000f2c:	b928      	cbnz	r0, 8000f3a <MX_DMA2D_Init+0x2a>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000f2e:	2101      	movs	r1, #1
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <MX_DMA2D_Init+0x34>)
 8000f32:	f000 ff0b 	bl	8001d4c <HAL_DMA2D_ConfigLayer>
 8000f36:	b910      	cbnz	r0, 8000f3e <MX_DMA2D_Init+0x2e>
}
 8000f38:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000f3a:	f7ff ffe7 	bl	8000f0c <Error_Handler>
    Error_Handler();
 8000f3e:	f7ff ffe5 	bl	8000f0c <Error_Handler>
 8000f42:	bf00      	nop
 8000f44:	200001ec 	.word	0x200001ec
 8000f48:	4002b000 	.word	0x4002b000

08000f4c <MX_FMC_Init>:
{
 8000f4c:	b500      	push	{lr}
 8000f4e:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f50:	4814      	ldr	r0, [pc, #80]	; (8000fa4 <MX_FMC_Init+0x58>)
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <MX_FMC_Init+0x5c>)
 8000f54:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000f5a:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000f60:	2210      	movs	r2, #16
 8000f62:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f64:	2240      	movs	r2, #64	; 0x40
 8000f66:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000f68:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000f6c:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f6e:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000f70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f74:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000f76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f7a:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f7c:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000f82:	2206      	movs	r2, #6
 8000f84:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000f86:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
 8000f88:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8000f8a:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 2;
 8000f8c:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8000f8e:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f90:	4469      	add	r1, sp
 8000f92:	f002 ff3b 	bl	8003e0c <HAL_SDRAM_Init>
 8000f96:	b910      	cbnz	r0, 8000f9e <MX_FMC_Init+0x52>
}
 8000f98:	b009      	add	sp, #36	; 0x24
 8000f9a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8000f9e:	f7ff ffb5 	bl	8000f0c <Error_Handler>
 8000fa2:	bf00      	nop
 8000fa4:	2000022c 	.word	0x2000022c
 8000fa8:	a0000140 	.word	0xa0000140

08000fac <MX_I2C3_Init>:
{
 8000fac:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 8000fae:	4811      	ldr	r0, [pc, #68]	; (8000ff4 <MX_I2C3_Init+0x48>)
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_I2C3_Init+0x4c>)
 8000fb2:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x20404768;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_I2C3_Init+0x50>)
 8000fb6:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 224;
 8000fb8:	23e0      	movs	r3, #224	; 0xe0
 8000fba:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000fc4:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc6:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc8:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fca:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000fcc:	f001 f814 	bl	8001ff8 <HAL_I2C_Init>
 8000fd0:	b950      	cbnz	r0, 8000fe8 <MX_I2C3_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <MX_I2C3_Init+0x48>)
 8000fd6:	f001 f86d 	bl	80020b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000fda:	b938      	cbnz	r0, 8000fec <MX_I2C3_Init+0x40>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_I2C3_Init+0x48>)
 8000fe0:	f001 f896 	bl	8002110 <HAL_I2CEx_ConfigDigitalFilter>
 8000fe4:	b920      	cbnz	r0, 8000ff0 <MX_I2C3_Init+0x44>
}
 8000fe6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000fe8:	f7ff ff90 	bl	8000f0c <Error_Handler>
    Error_Handler();
 8000fec:	f7ff ff8e 	bl	8000f0c <Error_Handler>
    Error_Handler();
 8000ff0:	f7ff ff8c 	bl	8000f0c <Error_Handler>
 8000ff4:	20000054 	.word	0x20000054
 8000ff8:	40005c00 	.word	0x40005c00
 8000ffc:	20404768 	.word	0x20404768

08001000 <MX_LTDC_Init>:
{
 8001000:	b500      	push	{lr}
 8001002:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001004:	2234      	movs	r2, #52	; 0x34
 8001006:	2100      	movs	r1, #0
 8001008:	a801      	add	r0, sp, #4
 800100a:	f003 fce5 	bl	80049d8 <memset>
  hltdc.Instance = LTDC;
 800100e:	4827      	ldr	r0, [pc, #156]	; (80010ac <MX_LTDC_Init+0xac>)
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <MX_LTDC_Init+0xb0>)
 8001012:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001014:	2300      	movs	r3, #0
 8001016:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001018:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800101a:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800101c:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 40;
 800101e:	2228      	movs	r2, #40	; 0x28
 8001020:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 9;
 8001022:	2209      	movs	r2, #9
 8001024:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001026:	2235      	movs	r2, #53	; 0x35
 8001028:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800102a:	220b      	movs	r2, #11
 800102c:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800102e:	f240 2215 	movw	r2, #533	; 0x215
 8001032:	6242      	str	r2, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001034:	f240 121b 	movw	r2, #283	; 0x11b
 8001038:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800103a:	f240 2235 	movw	r2, #565	; 0x235
 800103e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001040:	f240 121d 	movw	r2, #285	; 0x11d
 8001044:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001046:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800104a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800104e:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001052:	f001 f953 	bl	80022fc <HAL_LTDC_Init>
 8001056:	bb28      	cbnz	r0, 80010a4 <MX_LTDC_Init+0xa4>
  pLayerCfg.WindowX0 = 0;
 8001058:	2200      	movs	r2, #0
 800105a:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 800105c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001060:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8001062:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 8001064:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001068:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800106a:	2002      	movs	r0, #2
 800106c:	9005      	str	r0, [sp, #20]
  pLayerCfg.Alpha = 255;
 800106e:	20ff      	movs	r0, #255	; 0xff
 8001070:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 8001072:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001074:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8001078:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800107a:	2007      	movs	r0, #7
 800107c:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800107e:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 8001082:	900a      	str	r0, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001084:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001086:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001088:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800108c:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001090:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001094:	a901      	add	r1, sp, #4
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_LTDC_Init+0xac>)
 8001098:	f001 fa1a 	bl	80024d0 <HAL_LTDC_ConfigLayer>
 800109c:	b920      	cbnz	r0, 80010a8 <MX_LTDC_Init+0xa8>
}
 800109e:	b00f      	add	sp, #60	; 0x3c
 80010a0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80010a4:	f7ff ff32 	bl	8000f0c <Error_Handler>
    Error_Handler();
 80010a8:	f7ff ff30 	bl	8000f0c <Error_Handler>
 80010ac:	20000124 	.word	0x20000124
 80010b0:	40016800 	.word	0x40016800

080010b4 <MX_RTC_Init>:
{
 80010b4:	b510      	push	{r4, lr}
 80010b6:	b092      	sub	sp, #72	; 0x48
  RTC_TimeTypeDef sTime = {0};
 80010b8:	2400      	movs	r4, #0
 80010ba:	940c      	str	r4, [sp, #48]	; 0x30
 80010bc:	940d      	str	r4, [sp, #52]	; 0x34
 80010be:	940e      	str	r4, [sp, #56]	; 0x38
 80010c0:	940f      	str	r4, [sp, #60]	; 0x3c
 80010c2:	9410      	str	r4, [sp, #64]	; 0x40
 80010c4:	9411      	str	r4, [sp, #68]	; 0x44
  RTC_DateTypeDef sDate = {0};
 80010c6:	940b      	str	r4, [sp, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80010c8:	222c      	movs	r2, #44	; 0x2c
 80010ca:	4621      	mov	r1, r4
 80010cc:	4668      	mov	r0, sp
 80010ce:	f003 fc83 	bl	80049d8 <memset>
  hrtc.Instance = RTC;
 80010d2:	4831      	ldr	r0, [pc, #196]	; (8001198 <MX_RTC_Init+0xe4>)
 80010d4:	4b31      	ldr	r3, [pc, #196]	; (800119c <MX_RTC_Init+0xe8>)
 80010d6:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010d8:	6044      	str	r4, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010da:	237f      	movs	r3, #127	; 0x7f
 80010dc:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80010de:	23ff      	movs	r3, #255	; 0xff
 80010e0:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010e2:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010e4:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010e6:	6184      	str	r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010e8:	f002 f8e8 	bl	80032bc <HAL_RTC_Init>
 80010ec:	2800      	cmp	r0, #0
 80010ee:	d147      	bne.n	8001180 <MX_RTC_Init+0xcc>
  sTime.Hours = 0x0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  sTime.Minutes = 0x0;
 80010f6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  sTime.Seconds = 0x0;
 80010fa:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010fe:	9310      	str	r3, [sp, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001100:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001102:	2201      	movs	r2, #1
 8001104:	a90c      	add	r1, sp, #48	; 0x30
 8001106:	4824      	ldr	r0, [pc, #144]	; (8001198 <MX_RTC_Init+0xe4>)
 8001108:	f002 f946 	bl	8003398 <HAL_RTC_SetTime>
 800110c:	2800      	cmp	r0, #0
 800110e:	d139      	bne.n	8001184 <MX_RTC_Init+0xd0>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001110:	2201      	movs	r2, #1
 8001112:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001116:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  sDate.Date = 0x1;
 800111a:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
  sDate.Year = 0x0;
 800111e:	2300      	movs	r3, #0
 8001120:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001124:	a90b      	add	r1, sp, #44	; 0x2c
 8001126:	481c      	ldr	r0, [pc, #112]	; (8001198 <MX_RTC_Init+0xe4>)
 8001128:	f002 f9b6 	bl	8003498 <HAL_RTC_SetDate>
 800112c:	bb60      	cbnz	r0, 8001188 <MX_RTC_Init+0xd4>
  sAlarm.AlarmTime.Hours = 0x0;
 800112e:	2300      	movs	r3, #0
 8001130:	f88d 3000 	strb.w	r3, [sp]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001134:	f88d 3001 	strb.w	r3, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001138:	f88d 3002 	strb.w	r3, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800113c:	9301      	str	r3, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800113e:	9304      	str	r3, [sp, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001140:	9305      	str	r3, [sp, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001142:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001144:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001146:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001148:	2201      	movs	r2, #1
 800114a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800114e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001152:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001154:	4669      	mov	r1, sp
 8001156:	4810      	ldr	r0, [pc, #64]	; (8001198 <MX_RTC_Init+0xe4>)
 8001158:	f002 fa0c 	bl	8003574 <HAL_RTC_SetAlarm>
 800115c:	b9b0      	cbnz	r0, 800118c <MX_RTC_Init+0xd8>
  sAlarm.Alarm = RTC_ALARM_B;
 800115e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001162:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001164:	2201      	movs	r2, #1
 8001166:	4669      	mov	r1, sp
 8001168:	480b      	ldr	r0, [pc, #44]	; (8001198 <MX_RTC_Init+0xe4>)
 800116a:	f002 fa03 	bl	8003574 <HAL_RTC_SetAlarm>
 800116e:	b978      	cbnz	r0, 8001190 <MX_RTC_Init+0xdc>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001170:	2202      	movs	r2, #2
 8001172:	2100      	movs	r1, #0
 8001174:	4808      	ldr	r0, [pc, #32]	; (8001198 <MX_RTC_Init+0xe4>)
 8001176:	f002 faad 	bl	80036d4 <HAL_RTCEx_SetTimeStamp>
 800117a:	b958      	cbnz	r0, 8001194 <MX_RTC_Init+0xe0>
}
 800117c:	b012      	add	sp, #72	; 0x48
 800117e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001180:	f7ff fec4 	bl	8000f0c <Error_Handler>
    Error_Handler();
 8001184:	f7ff fec2 	bl	8000f0c <Error_Handler>
    Error_Handler();
 8001188:	f7ff fec0 	bl	8000f0c <Error_Handler>
    Error_Handler();
 800118c:	f7ff febe 	bl	8000f0c <Error_Handler>
    Error_Handler();
 8001190:	f7ff febc 	bl	8000f0c <Error_Handler>
    Error_Handler();
 8001194:	f7ff feba 	bl	8000f0c <Error_Handler>
 8001198:	200001cc 	.word	0x200001cc
 800119c:	40002800 	.word	0x40002800

080011a0 <MX_SDMMC1_SD_Init>:
{
 80011a0:	b508      	push	{r3, lr}
  hsd1.Instance = SDMMC1;
 80011a2:	480c      	ldr	r0, [pc, #48]	; (80011d4 <MX_SDMMC1_SD_Init+0x34>)
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_SDMMC1_SD_Init+0x38>)
 80011a6:	6003      	str	r3, [r0, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80011a8:	2300      	movs	r3, #0
 80011aa:	6043      	str	r3, [r0, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80011ac:	6083      	str	r3, [r0, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80011ae:	60c3      	str	r3, [r0, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80011b0:	6103      	str	r3, [r0, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80011b2:	6143      	str	r3, [r0, #20]
  hsd1.Init.ClockDiv = 5;
 80011b4:	2305      	movs	r3, #5
 80011b6:	6183      	str	r3, [r0, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80011b8:	f002 fda8 	bl	8003d0c <HAL_SD_Init>
 80011bc:	b930      	cbnz	r0, 80011cc <MX_SDMMC1_SD_Init+0x2c>
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80011be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011c2:	4804      	ldr	r0, [pc, #16]	; (80011d4 <MX_SDMMC1_SD_Init+0x34>)
 80011c4:	f002 fdc2 	bl	8003d4c <HAL_SD_ConfigWideBusOperation>
 80011c8:	b910      	cbnz	r0, 80011d0 <MX_SDMMC1_SD_Init+0x30>
}
 80011ca:	bd08      	pop	{r3, pc}
    Error_Handler();
 80011cc:	f7ff fe9e 	bl	8000f0c <Error_Handler>
    Error_Handler();
 80011d0:	f7ff fe9c 	bl	8000f0c <Error_Handler>
 80011d4:	200000a0 	.word	0x200000a0
 80011d8:	40012c00 	.word	0x40012c00

080011dc <SystemClock_Config>:
{
 80011dc:	b500      	push	{lr}
 80011de:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e0:	2230      	movs	r2, #48	; 0x30
 80011e2:	2100      	movs	r1, #0
 80011e4:	a828      	add	r0, sp, #160	; 0xa0
 80011e6:	f003 fbf7 	bl	80049d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ea:	2100      	movs	r1, #0
 80011ec:	9123      	str	r1, [sp, #140]	; 0x8c
 80011ee:	9124      	str	r1, [sp, #144]	; 0x90
 80011f0:	9125      	str	r1, [sp, #148]	; 0x94
 80011f2:	9126      	str	r1, [sp, #152]	; 0x98
 80011f4:	9127      	str	r1, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f6:	2284      	movs	r2, #132	; 0x84
 80011f8:	a802      	add	r0, sp, #8
 80011fa:	f003 fbed 	bl	80049d8 <memset>
  HAL_PWR_EnableBkUpAccess();
 80011fe:	f001 f9b7 	bl	8002570 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	4b33      	ldr	r3, [pc, #204]	; (80012d0 <SystemClock_Config+0xf4>)
 8001204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001206:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800120a:	641a      	str	r2, [r3, #64]	; 0x40
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001216:	4b2f      	ldr	r3, [pc, #188]	; (80012d4 <SystemClock_Config+0xf8>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800122a:	2309      	movs	r3, #9
 800122c:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800122e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001232:	9229      	str	r2, [sp, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001234:	2201      	movs	r2, #1
 8001236:	922d      	str	r2, [sp, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001238:	2202      	movs	r2, #2
 800123a:	922e      	str	r2, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800123c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001240:	912f      	str	r1, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001242:	2119      	movs	r1, #25
 8001244:	9130      	str	r1, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001246:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800124a:	9131      	str	r1, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800124c:	9232      	str	r2, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800124e:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001250:	a828      	add	r0, sp, #160	; 0xa0
 8001252:	f001 f9d3 	bl	80025fc <HAL_RCC_OscConfig>
 8001256:	2800      	cmp	r0, #0
 8001258:	d131      	bne.n	80012be <SystemClock_Config+0xe2>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800125a:	f001 f991 	bl	8002580 <HAL_PWREx_EnableOverDrive>
 800125e:	2800      	cmp	r0, #0
 8001260:	d12f      	bne.n	80012c2 <SystemClock_Config+0xe6>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001262:	230f      	movs	r3, #15
 8001264:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001266:	2302      	movs	r3, #2
 8001268:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800126e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001272:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001278:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800127a:	2107      	movs	r1, #7
 800127c:	a823      	add	r0, sp, #140	; 0x8c
 800127e:	f001 fc2b 	bl	8002ad8 <HAL_RCC_ClockConfig>
 8001282:	bb00      	cbnz	r0, 80012c6 <SystemClock_Config+0xea>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <SystemClock_Config+0xfc>)
 8001286:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8001288:	2364      	movs	r3, #100	; 0x64
 800128a:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800128c:	2302      	movs	r3, #2
 800128e:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001290:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001292:	2300      	movs	r3, #0
 8001294:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001296:	2201      	movs	r2, #1
 8001298:	920c      	str	r2, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800129a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800129e:	920d      	str	r2, [sp, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a4:	920e      	str	r2, [sp, #56]	; 0x38
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80012a6:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80012a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ac:	9221      	str	r2, [sp, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80012ae:	9322      	str	r3, [sp, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b0:	a802      	add	r0, sp, #8
 80012b2:	f001 fcf9 	bl	8002ca8 <HAL_RCCEx_PeriphCLKConfig>
 80012b6:	b940      	cbnz	r0, 80012ca <SystemClock_Config+0xee>
}
 80012b8:	b035      	add	sp, #212	; 0xd4
 80012ba:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80012be:	f7ff fe25 	bl	8000f0c <Error_Handler>
    Error_Handler();
 80012c2:	f7ff fe23 	bl	8000f0c <Error_Handler>
    Error_Handler();
 80012c6:	f7ff fe21 	bl	8000f0c <Error_Handler>
    Error_Handler();
 80012ca:	f7ff fe1f 	bl	8000f0c <Error_Handler>
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40007000 	.word	0x40007000
 80012d8:	00a10028 	.word	0x00a10028

080012dc <main>:
{
 80012dc:	b508      	push	{r3, lr}
  MPU_Config();
 80012de:	f7ff fb59 	bl	8000994 <MPU_Config>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80012e6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012ea:	4b27      	ldr	r3, [pc, #156]	; (8001388 <main+0xac>)
 80012ec:	2100      	movs	r1, #0
 80012ee:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80012f6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012fa:	695a      	ldr	r2, [r3, #20]
 80012fc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001300:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001302:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001306:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800130a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001312:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001316:	f3c4 314e 	ubfx	r1, r4, #13, #15
 800131a:	e00f      	b.n	800133c <main+0x60>
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800131c:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800131e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001322:	ea03 1341 	and.w	r3, r3, r1, lsl #5
 8001326:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800132a:	4817      	ldr	r0, [pc, #92]	; (8001388 <main+0xac>)
 800132c:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8001330:	1e53      	subs	r3, r2, #1
 8001332:	2a00      	cmp	r2, #0
 8001334:	d1f2      	bne.n	800131c <main+0x40>
    } while(sets-- != 0U);
 8001336:	1e4b      	subs	r3, r1, #1
 8001338:	b119      	cbz	r1, 8001342 <main+0x66>
 800133a:	4619      	mov	r1, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800133c:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 8001340:	e7ed      	b.n	800131e <main+0x42>
 8001342:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001346:	6943      	ldr	r3, [r0, #20]
 8001348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134c:	6143      	str	r3, [r0, #20]
 800134e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001352:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001356:	f000 fa7d 	bl	8001854 <HAL_Init>
  SystemClock_Config();
 800135a:	f7ff ff3f 	bl	80011dc <SystemClock_Config>
  HAL_Delay(500);
 800135e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001362:	f000 fa9b 	bl	800189c <HAL_Delay>
  MX_GPIO_Init();
 8001366:	f7ff fb1d 	bl	80009a4 <MX_GPIO_Init>
  MX_DMA2D_Init();
 800136a:	f7ff fdd1 	bl	8000f10 <MX_DMA2D_Init>
  MX_FMC_Init();
 800136e:	f7ff fded 	bl	8000f4c <MX_FMC_Init>
  MX_I2C3_Init();
 8001372:	f7ff fe1b 	bl	8000fac <MX_I2C3_Init>
  MX_LTDC_Init();
 8001376:	f7ff fe43 	bl	8001000 <MX_LTDC_Init>
  MX_RTC_Init();
 800137a:	f7ff fe9b 	bl	80010b4 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 800137e:	f7ff ff0f 	bl	80011a0 <MX_SDMMC1_SD_Init>
	  MainFunc ();
 8001382:	f7ff fa7f 	bl	8000884 <MainFunc>
 8001386:	e7fc      	b.n	8001382 <main+0xa6>
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800138c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138e:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001390:	2300      	movs	r3, #0
 8001392:	9301      	str	r3, [sp, #4]
 8001394:	9302      	str	r3, [sp, #8]
 8001396:	9303      	str	r3, [sp, #12]
 8001398:	9304      	str	r3, [sp, #16]
 800139a:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 800139c:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <HAL_FMC_MspInit+0xbc>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	b10b      	cbz	r3, 80013a6 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80013a2:	b007      	add	sp, #28
 80013a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 80013a6:	4b28      	ldr	r3, [pc, #160]	; (8001448 <HAL_FMC_MspInit+0xbc>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 80013ac:	4b27      	ldr	r3, [pc, #156]	; (800144c <HAL_FMC_MspInit+0xc0>)
 80013ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013b0:	f042 0201 	orr.w	r2, r2, #1
 80013b4:	639a      	str	r2, [r3, #56]	; 0x38
 80013b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80013c0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80013c4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2602      	movs	r6, #2
 80013c8:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	2503      	movs	r5, #3
 80013cc:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013ce:	240c      	movs	r4, #12
 80013d0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d2:	a901      	add	r1, sp, #4
 80013d4:	481e      	ldr	r0, [pc, #120]	; (8001450 <HAL_FMC_MspInit+0xc4>)
 80013d6:	f000 fd1b 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80013da:	f248 1333 	movw	r3, #33075	; 0x8133
 80013de:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2700      	movs	r7, #0
 80013e4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013e8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ea:	a901      	add	r1, sp, #4
 80013ec:	4819      	ldr	r0, [pc, #100]	; (8001454 <HAL_FMC_MspInit+0xc8>)
 80013ee:	f000 fd0f 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80013f2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80013f6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fc:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013fe:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001400:	a901      	add	r1, sp, #4
 8001402:	4815      	ldr	r0, [pc, #84]	; (8001458 <HAL_FMC_MspInit+0xcc>)
 8001404:	f000 fd04 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001408:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800140c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001414:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001416:	a901      	add	r1, sp, #4
 8001418:	4810      	ldr	r0, [pc, #64]	; (800145c <HAL_FMC_MspInit+0xd0>)
 800141a:	f000 fcf9 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800141e:	2328      	movs	r3, #40	; 0x28
 8001420:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001428:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800142a:	a901      	add	r1, sp, #4
 800142c:	480c      	ldr	r0, [pc, #48]	; (8001460 <HAL_FMC_MspInit+0xd4>)
 800142e:	f000 fcef 	bl	8001e10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001432:	2308      	movs	r3, #8
 8001434:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800143c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800143e:	a901      	add	r1, sp, #4
 8001440:	4808      	ldr	r0, [pc, #32]	; (8001464 <HAL_FMC_MspInit+0xd8>)
 8001442:	f000 fce5 	bl	8001e10 <HAL_GPIO_Init>
 8001446:	e7ac      	b.n	80013a2 <HAL_FMC_MspInit+0x16>
 8001448:	2000003c 	.word	0x2000003c
 800144c:	40023800 	.word	0x40023800
 8001450:	40021000 	.word	0x40021000
 8001454:	40021800 	.word	0x40021800
 8001458:	40020c00 	.word	0x40020c00
 800145c:	40021400 	.word	0x40021400
 8001460:	40021c00 	.word	0x40021c00
 8001464:	40020800 	.word	0x40020800

08001468 <HAL_MspInit>:
{
 8001468:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <HAL_MspInit+0x2c>)
 800146c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800146e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001472:	641a      	str	r2, [r3, #64]	; 0x40
 8001474:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001476:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800147a:	9200      	str	r2, [sp, #0]
 800147c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001480:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001484:	645a      	str	r2, [r3, #68]	; 0x44
 8001486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	9b01      	ldr	r3, [sp, #4]
}
 8001490:	b002      	add	sp, #8
 8001492:	4770      	bx	lr
 8001494:	40023800 	.word	0x40023800

08001498 <HAL_DMA2D_MspInit>:
  if(hdma2d->Instance==DMA2D)
 8001498:	6802      	ldr	r2, [r0, #0]
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <HAL_DMA2D_MspInit+0x3c>)
 800149c:	429a      	cmp	r2, r3
 800149e:	d000      	beq.n	80014a2 <HAL_DMA2D_MspInit+0xa>
 80014a0:	4770      	bx	lr
{
 80014a2:	b500      	push	{lr}
 80014a4:	b083      	sub	sp, #12
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80014a6:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 80014aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80014b0:	631a      	str	r2, [r3, #48]	; 0x30
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014b8:	9301      	str	r3, [sp, #4]
 80014ba:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	4611      	mov	r1, r2
 80014c0:	205a      	movs	r0, #90	; 0x5a
 80014c2:	f000 fa11 	bl	80018e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80014c6:	205a      	movs	r0, #90	; 0x5a
 80014c8:	f000 fa40 	bl	800194c <HAL_NVIC_EnableIRQ>
}
 80014cc:	b003      	add	sp, #12
 80014ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80014d2:	bf00      	nop
 80014d4:	4002b000 	.word	0x4002b000

080014d8 <HAL_I2C_MspInit>:
{
 80014d8:	b510      	push	{r4, lr}
 80014da:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	2300      	movs	r3, #0
 80014de:	9303      	str	r3, [sp, #12]
 80014e0:	9304      	str	r3, [sp, #16]
 80014e2:	9305      	str	r3, [sp, #20]
 80014e4:	9306      	str	r3, [sp, #24]
 80014e6:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C3)
 80014e8:	6802      	ldr	r2, [r0, #0]
 80014ea:	4b14      	ldr	r3, [pc, #80]	; (800153c <HAL_I2C_MspInit+0x64>)
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d001      	beq.n	80014f4 <HAL_I2C_MspInit+0x1c>
}
 80014f0:	b008      	add	sp, #32
 80014f2:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80014f4:	4c12      	ldr	r4, [pc, #72]	; (8001540 <HAL_I2C_MspInit+0x68>)
 80014f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fc:	6323      	str	r3, [r4, #48]	; 0x30
 80014fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001504:	9301      	str	r3, [sp, #4]
 8001506:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001508:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800150c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800150e:	2312      	movs	r3, #18
 8001510:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001512:	2301      	movs	r3, #1
 8001514:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800151a:	2304      	movs	r3, #4
 800151c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800151e:	a903      	add	r1, sp, #12
 8001520:	4808      	ldr	r0, [pc, #32]	; (8001544 <HAL_I2C_MspInit+0x6c>)
 8001522:	f000 fc75 	bl	8001e10 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001526:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001528:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800152c:	6423      	str	r3, [r4, #64]	; 0x40
 800152e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001530:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001534:	9302      	str	r3, [sp, #8]
 8001536:	9b02      	ldr	r3, [sp, #8]
}
 8001538:	e7da      	b.n	80014f0 <HAL_I2C_MspInit+0x18>
 800153a:	bf00      	nop
 800153c:	40005c00 	.word	0x40005c00
 8001540:	40023800 	.word	0x40023800
 8001544:	40021c00 	.word	0x40021c00

08001548 <HAL_LTDC_MspInit>:
{
 8001548:	b570      	push	{r4, r5, r6, lr}
 800154a:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	2300      	movs	r3, #0
 800154e:	9307      	str	r3, [sp, #28]
 8001550:	9308      	str	r3, [sp, #32]
 8001552:	9309      	str	r3, [sp, #36]	; 0x24
 8001554:	930a      	str	r3, [sp, #40]	; 0x28
 8001556:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hltdc->Instance==LTDC)
 8001558:	6802      	ldr	r2, [r0, #0]
 800155a:	4b3e      	ldr	r3, [pc, #248]	; (8001654 <HAL_LTDC_MspInit+0x10c>)
 800155c:	429a      	cmp	r2, r3
 800155e:	d001      	beq.n	8001564 <HAL_LTDC_MspInit+0x1c>
}
 8001560:	b00c      	add	sp, #48	; 0x30
 8001562:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001564:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8001568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800156a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800156e:	645a      	str	r2, [r3, #68]	; 0x44
 8001570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001572:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001576:	9201      	str	r2, [sp, #4]
 8001578:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800157a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800157c:	f042 0210 	orr.w	r2, r2, #16
 8001580:	631a      	str	r2, [r3, #48]	; 0x30
 8001582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001584:	f002 0210 	and.w	r2, r2, #16
 8001588:	9202      	str	r2, [sp, #8]
 800158a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800158c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800158e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001592:	631a      	str	r2, [r3, #48]	; 0x30
 8001594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001596:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800159a:	9203      	str	r2, [sp, #12]
 800159c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800159e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015a4:	631a      	str	r2, [r3, #48]	; 0x30
 80015a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a8:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80015ac:	9204      	str	r2, [sp, #16]
 80015ae:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015b6:	631a      	str	r2, [r3, #48]	; 0x30
 80015b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ba:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80015be:	9205      	str	r2, [sp, #20]
 80015c0:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80015c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015c8:	631a      	str	r2, [r3, #48]	; 0x30
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d0:	9306      	str	r3, [sp, #24]
 80015d2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80015d4:	2310      	movs	r3, #16
 80015d6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2502      	movs	r5, #2
 80015da:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015dc:	260e      	movs	r6, #14
 80015de:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80015e0:	a907      	add	r1, sp, #28
 80015e2:	481d      	ldr	r0, [pc, #116]	; (8001658 <HAL_LTDC_MspInit+0x110>)
 80015e4:	f000 fc14 	bl	8001e10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80015e8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80015ec:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2400      	movs	r4, #0
 80015f2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015f6:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80015f8:	a907      	add	r1, sp, #28
 80015fa:	4818      	ldr	r0, [pc, #96]	; (800165c <HAL_LTDC_MspInit+0x114>)
 80015fc:	f000 fc08 	bl	8001e10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001600:	23f7      	movs	r3, #247	; 0xf7
 8001602:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800160a:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800160c:	a907      	add	r1, sp, #28
 800160e:	4814      	ldr	r0, [pc, #80]	; (8001660 <HAL_LTDC_MspInit+0x118>)
 8001610:	f000 fbfe 	bl	8001e10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001618:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001620:	2309      	movs	r3, #9
 8001622:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001624:	a907      	add	r1, sp, #28
 8001626:	480f      	ldr	r0, [pc, #60]	; (8001664 <HAL_LTDC_MspInit+0x11c>)
 8001628:	f000 fbf2 	bl	8001e10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800162c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001630:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001638:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800163a:	a907      	add	r1, sp, #28
 800163c:	480a      	ldr	r0, [pc, #40]	; (8001668 <HAL_LTDC_MspInit+0x120>)
 800163e:	f000 fbe7 	bl	8001e10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001642:	4622      	mov	r2, r4
 8001644:	4621      	mov	r1, r4
 8001646:	2058      	movs	r0, #88	; 0x58
 8001648:	f000 f94e 	bl	80018e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800164c:	2058      	movs	r0, #88	; 0x58
 800164e:	f000 f97d 	bl	800194c <HAL_NVIC_EnableIRQ>
}
 8001652:	e785      	b.n	8001560 <HAL_LTDC_MspInit+0x18>
 8001654:	40016800 	.word	0x40016800
 8001658:	40021000 	.word	0x40021000
 800165c:	40022400 	.word	0x40022400
 8001660:	40022800 	.word	0x40022800
 8001664:	40021800 	.word	0x40021800
 8001668:	40022000 	.word	0x40022000

0800166c <HAL_RTC_MspInit>:
  if(hrtc->Instance==RTC)
 800166c:	6802      	ldr	r2, [r0, #0]
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_RTC_MspInit+0x18>)
 8001670:	429a      	cmp	r2, r3
 8001672:	d000      	beq.n	8001676 <HAL_RTC_MspInit+0xa>
}
 8001674:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8001676:	4a04      	ldr	r2, [pc, #16]	; (8001688 <HAL_RTC_MspInit+0x1c>)
 8001678:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800167a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800167e:	6713      	str	r3, [r2, #112]	; 0x70
}
 8001680:	e7f8      	b.n	8001674 <HAL_RTC_MspInit+0x8>
 8001682:	bf00      	nop
 8001684:	40002800 	.word	0x40002800
 8001688:	40023800 	.word	0x40023800

0800168c <HAL_SD_MspInit>:
{
 800168c:	b570      	push	{r4, r5, r6, lr}
 800168e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	2300      	movs	r3, #0
 8001692:	9303      	str	r3, [sp, #12]
 8001694:	9304      	str	r3, [sp, #16]
 8001696:	9305      	str	r3, [sp, #20]
 8001698:	9306      	str	r3, [sp, #24]
 800169a:	9307      	str	r3, [sp, #28]
  if(hsd->Instance==SDMMC1)
 800169c:	6802      	ldr	r2, [r0, #0]
 800169e:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <HAL_SD_MspInit+0x8c>)
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_SD_MspInit+0x1c>
}
 80016a4:	b008      	add	sp, #32
 80016a6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80016a8:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80016ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016b2:	645a      	str	r2, [r3, #68]	; 0x44
 80016b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016b6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80016ba:	9200      	str	r2, [sp, #0]
 80016bc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016c0:	f042 0204 	orr.w	r2, r2, #4
 80016c4:	631a      	str	r2, [r3, #48]	; 0x30
 80016c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016c8:	f002 0204 	and.w	r2, r2, #4
 80016cc:	9201      	str	r2, [sp, #4]
 80016ce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016d2:	f042 0208 	orr.w	r2, r2, #8
 80016d6:	631a      	str	r2, [r3, #48]	; 0x30
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80016e2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80016e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2602      	movs	r6, #2
 80016ea:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ec:	2503      	movs	r5, #3
 80016ee:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80016f0:	240c      	movs	r4, #12
 80016f2:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f4:	eb0d 0104 	add.w	r1, sp, r4
 80016f8:	4808      	ldr	r0, [pc, #32]	; (800171c <HAL_SD_MspInit+0x90>)
 80016fa:	f000 fb89 	bl	8001e10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80016fe:	2304      	movs	r3, #4
 8001700:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800170a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800170c:	eb0d 0104 	add.w	r1, sp, r4
 8001710:	4803      	ldr	r0, [pc, #12]	; (8001720 <HAL_SD_MspInit+0x94>)
 8001712:	f000 fb7d 	bl	8001e10 <HAL_GPIO_Init>
}
 8001716:	e7c5      	b.n	80016a4 <HAL_SD_MspInit+0x18>
 8001718:	40012c00 	.word	0x40012c00
 800171c:	40020800 	.word	0x40020800
 8001720:	40020c00 	.word	0x40020c00

08001724 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001724:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001726:	f7ff fe31 	bl	800138c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800172a:	bd08      	pop	{r3, pc}

0800172c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800172c:	b500      	push	{lr}
 800172e:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001730:	2200      	movs	r2, #0
 8001732:	4601      	mov	r1, r0
 8001734:	2036      	movs	r0, #54	; 0x36
 8001736:	f000 f8d7 	bl	80018e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800173a:	2036      	movs	r0, #54	; 0x36
 800173c:	f000 f906 	bl	800194c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001740:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_InitTick+0x6c>)
 8001742:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001744:	f042 0210 	orr.w	r2, r2, #16
 8001748:	641a      	str	r2, [r3, #64]	; 0x40
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f003 0310 	and.w	r3, r3, #16
 8001750:	9301      	str	r3, [sp, #4]
 8001752:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001754:	a902      	add	r1, sp, #8
 8001756:	a803      	add	r0, sp, #12
 8001758:	f001 fa88 	bl	8002c6c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800175c:	f001 fa76 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 8001760:	0043      	lsls	r3, r0, #1
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001762:	480e      	ldr	r0, [pc, #56]	; (800179c <HAL_InitTick+0x70>)
 8001764:	fba0 2303 	umull	r2, r3, r0, r3
 8001768:	0c9b      	lsrs	r3, r3, #18
 800176a:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800176c:	480c      	ldr	r0, [pc, #48]	; (80017a0 <HAL_InitTick+0x74>)
 800176e:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <HAL_InitTick+0x78>)
 8001770:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001772:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001776:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001778:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177e:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001780:	f002 fd36 	bl	80041f0 <HAL_TIM_Base_Init>
 8001784:	b118      	cbz	r0, 800178e <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
 8001786:	2001      	movs	r0, #1
}
 8001788:	b009      	add	sp, #36	; 0x24
 800178a:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim6);
 800178e:	4804      	ldr	r0, [pc, #16]	; (80017a0 <HAL_InitTick+0x74>)
 8001790:	f002 fb8e 	bl	8003eb0 <HAL_TIM_Base_Start_IT>
 8001794:	e7f8      	b.n	8001788 <HAL_InitTick+0x5c>
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	431bde83 	.word	0x431bde83
 80017a0:	20000260 	.word	0x20000260
 80017a4:	40001000 	.word	0x40001000

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	e7fe      	b.n	80017a8 <NMI_Handler>

080017aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017aa:	e7fe      	b.n	80017aa <HardFault_Handler>

080017ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ac:	e7fe      	b.n	80017ac <MemManage_Handler>

080017ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ae:	e7fe      	b.n	80017ae <BusFault_Handler>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	e7fe      	b.n	80017b0 <UsageFault_Handler>

080017b2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b2:	4770      	bx	lr

080017b4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b4:	4770      	bx	lr

080017b6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b6:	4770      	bx	lr

080017b8 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b8:	4770      	bx	lr
	...

080017bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017be:	4802      	ldr	r0, [pc, #8]	; (80017c8 <TIM6_DAC_IRQHandler+0xc>)
 80017c0:	f002 fbc2 	bl	8003f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017c4:	bd08      	pop	{r3, pc}
 80017c6:	bf00      	nop
 80017c8:	20000260 	.word	0x20000260

080017cc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80017cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80017ce:	4802      	ldr	r0, [pc, #8]	; (80017d8 <LTDC_IRQHandler+0xc>)
 80017d0:	f000 fe11 	bl	80023f6 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80017d4:	bd08      	pop	{r3, pc}
 80017d6:	bf00      	nop
 80017d8:	20000124 	.word	0x20000124

080017dc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80017dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80017de:	4802      	ldr	r0, [pc, #8]	; (80017e8 <DMA2D_IRQHandler+0xc>)
 80017e0:	f000 fa15 	bl	8001c0e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80017e4:	bd08      	pop	{r3, pc}
 80017e6:	bf00      	nop
 80017e8:	200001ec 	.word	0x200001ec

080017ec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017ec:	4a03      	ldr	r2, [pc, #12]	; (80017fc <SystemInit+0x10>)
 80017ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80017f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001838 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001804:	480d      	ldr	r0, [pc, #52]	; (800183c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001806:	490e      	ldr	r1, [pc, #56]	; (8001840 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001808:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800180c:	e002      	b.n	8001814 <LoopCopyDataInit>

0800180e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001812:	3304      	adds	r3, #4

08001814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001818:	d3f9      	bcc.n	800180e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181a:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800181c:	4c0b      	ldr	r4, [pc, #44]	; (800184c <LoopFillZerobss+0x26>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001820:	e001      	b.n	8001826 <LoopFillZerobss>

08001822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001824:	3204      	adds	r2, #4

08001826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001828:	d3fb      	bcc.n	8001822 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800182a:	f7ff ffdf 	bl	80017ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800182e:	f003 f8af 	bl	8004990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001832:	f7ff fd53 	bl	80012dc <main>
  bx  lr    
 8001836:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001838:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800183c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001840:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001844:	08004a28 	.word	0x08004a28
  ldr r2, =_sbss
 8001848:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800184c:	200002b0 	.word	0x200002b0

08001850 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001850:	e7fe      	b.n	8001850 <ADC_IRQHandler>
	...

08001854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001854:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001856:	4a07      	ldr	r2, [pc, #28]	; (8001874 <HAL_Init+0x20>)
 8001858:	6813      	ldr	r3, [r2, #0]
 800185a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800185e:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001860:	2003      	movs	r0, #3
 8001862:	f000 f82f 	bl	80018c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001866:	2000      	movs	r0, #0
 8001868:	f7ff ff60 	bl	800172c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800186c:	f7ff fdfc 	bl	8001468 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8001870:	2000      	movs	r0, #0
 8001872:	bd08      	pop	{r3, pc}
 8001874:	40023c00 	.word	0x40023c00

08001878 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001878:	4a03      	ldr	r2, [pc, #12]	; (8001888 <HAL_IncTick+0x10>)
 800187a:	6811      	ldr	r1, [r2, #0]
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <HAL_IncTick+0x14>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	440b      	add	r3, r1
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	200002ac 	.word	0x200002ac
 800188c:	20000004 	.word	0x20000004

08001890 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001890:	4b01      	ldr	r3, [pc, #4]	; (8001898 <HAL_GetTick+0x8>)
 8001892:	6818      	ldr	r0, [r3, #0]
}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	200002ac 	.word	0x200002ac

0800189c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800189c:	b538      	push	{r3, r4, r5, lr}
 800189e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80018a0:	f7ff fff6 	bl	8001890 <HAL_GetTick>
 80018a4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018a6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80018aa:	d002      	beq.n	80018b2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <HAL_Delay+0x24>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018b2:	f7ff ffed 	bl	8001890 <HAL_GetTick>
 80018b6:	1b40      	subs	r0, r0, r5
 80018b8:	42a0      	cmp	r0, r4
 80018ba:	d3fa      	bcc.n	80018b2 <HAL_Delay+0x16>
  {
  }
}
 80018bc:	bd38      	pop	{r3, r4, r5, pc}
 80018be:	bf00      	nop
 80018c0:	20000004 	.word	0x20000004

080018c4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c4:	4906      	ldr	r1, [pc, #24]	; (80018e0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80018c6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018cc:	041b      	lsls	r3, r3, #16
 80018ce:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d0:	0200      	lsls	r0, r0, #8
 80018d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80018d8:	4a02      	ldr	r2, [pc, #8]	; (80018e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80018da:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80018dc:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00
 80018e4:	05fa0000 	.word	0x05fa0000

080018e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e8:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_NVIC_SetPriority+0x58>)
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f2:	f1c3 0407 	rsb	r4, r3, #7
 80018f6:	2c04      	cmp	r4, #4
 80018f8:	bf28      	it	cs
 80018fa:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fc:	1d1d      	adds	r5, r3, #4
 80018fe:	2d06      	cmp	r5, #6
 8001900:	d914      	bls.n	800192c <HAL_NVIC_SetPriority+0x44>
 8001902:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	f04f 35ff 	mov.w	r5, #4294967295
 8001908:	fa05 f404 	lsl.w	r4, r5, r4
 800190c:	ea21 0104 	bic.w	r1, r1, r4
 8001910:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001912:	fa05 f303 	lsl.w	r3, r5, r3
 8001916:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800191c:	2800      	cmp	r0, #0
 800191e:	db07      	blt.n	8001930 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001920:	0109      	lsls	r1, r1, #4
 8001922:	b2c9      	uxtb	r1, r1
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <HAL_NVIC_SetPriority+0x5c>)
 8001926:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001928:	bc30      	pop	{r4, r5}
 800192a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192c:	2300      	movs	r3, #0
 800192e:	e7e9      	b.n	8001904 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001930:	f000 000f 	and.w	r0, r0, #15
 8001934:	0109      	lsls	r1, r1, #4
 8001936:	b2c9      	uxtb	r1, r1
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_NVIC_SetPriority+0x60>)
 800193a:	5419      	strb	r1, [r3, r0]
 800193c:	e7f4      	b.n	8001928 <HAL_NVIC_SetPriority+0x40>
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00
 8001944:	e000e400 	.word	0xe000e400
 8001948:	e000ed14 	.word	0xe000ed14

0800194c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800194c:	2800      	cmp	r0, #0
 800194e:	db07      	blt.n	8001960 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001950:	f000 021f 	and.w	r2, r0, #31
 8001954:	0940      	lsrs	r0, r0, #5
 8001956:	2301      	movs	r3, #1
 8001958:	4093      	lsls	r3, r2
 800195a:	4a02      	ldr	r2, [pc, #8]	; (8001964 <HAL_NVIC_EnableIRQ+0x18>)
 800195c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000e100 	.word	0xe000e100

08001968 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001968:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800196c:	4a04      	ldr	r2, [pc, #16]	; (8001980 <HAL_MPU_Disable+0x18>)
 800196e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001974:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001976:	4b03      	ldr	r3, [pc, #12]	; (8001984 <HAL_MPU_Disable+0x1c>)
 8001978:	2200      	movs	r2, #0
 800197a:	605a      	str	r2, [r3, #4]
}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00
 8001984:	e000ed90 	.word	0xe000ed90

08001988 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001988:	f040 0001 	orr.w	r0, r0, #1
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_MPU_Enable+0x1c>)
 800198e:	6058      	str	r0, [r3, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001990:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <HAL_MPU_Enable+0x20>)
 8001992:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001998:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800199a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800199e:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80019a2:	4770      	bx	lr
 80019a4:	e000ed90 	.word	0xe000ed90
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80019ac:	b470      	push	{r4, r5, r6}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80019ae:	6806      	ldr	r6, [r0, #0]
 80019b0:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80019b2:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 80019b6:	9d03      	ldr	r5, [sp, #12]
 80019b8:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80019bc:	431c      	orrs	r4, r3
 80019be:	6474      	str	r4, [r6, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80019c0:	6803      	ldr	r3, [r0, #0]
 80019c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80019c4:	6843      	ldr	r3, [r0, #4]
 80019c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80019ca:	d003      	beq.n	80019d4 <DMA2D_SetConfig+0x28>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80019cc:	6803      	ldr	r3, [r0, #0]
 80019ce:	60d9      	str	r1, [r3, #12]
  }
}
 80019d0:	bc70      	pop	{r4, r5, r6}
 80019d2:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80019d4:	f001 467f 	and.w	r6, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80019d8:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80019dc:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80019e0:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80019e2:	6884      	ldr	r4, [r0, #8]
 80019e4:	b194      	cbz	r4, 8001a0c <DMA2D_SetConfig+0x60>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80019e6:	2c01      	cmp	r4, #1
 80019e8:	d00e      	beq.n	8001a08 <DMA2D_SetConfig+0x5c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80019ea:	2c02      	cmp	r4, #2
 80019ec:	d011      	beq.n	8001a12 <DMA2D_SetConfig+0x66>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80019ee:	2c03      	cmp	r4, #3
 80019f0:	d017      	beq.n	8001a22 <DMA2D_SetConfig+0x76>
      tmp1 = (tmp1 >> 28U);
 80019f2:	0f36      	lsrs	r6, r6, #28
      tmp2 = (tmp2 >> 20U);
 80019f4:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 80019f6:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80019f8:	0219      	lsls	r1, r3, #8
 80019fa:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 80019fe:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
 8001a02:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 8001a06:	e001      	b.n	8001a0c <DMA2D_SetConfig+0x60>
      tmp = (tmp3 | tmp2 | tmp4);
 8001a08:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001a0c:	6803      	ldr	r3, [r0, #0]
 8001a0e:	6399      	str	r1, [r3, #56]	; 0x38
 8001a10:	e7de      	b.n	80019d0 <DMA2D_SetConfig+0x24>
      tmp2 = (tmp2 >> 19U);
 8001a12:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8001a14:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001a16:	02d9      	lsls	r1, r3, #11
 8001a18:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8001a1c:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8001a20:	e7f4      	b.n	8001a0c <DMA2D_SetConfig+0x60>
      tmp1 = (tmp1 >> 31U);
 8001a22:	0ff6      	lsrs	r6, r6, #31
      tmp2 = (tmp2 >> 19U);
 8001a24:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8001a26:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001a28:	0299      	lsls	r1, r3, #10
 8001a2a:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8001a2e:	ea41 31c6 	orr.w	r1, r1, r6, lsl #15
 8001a32:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8001a36:	e7e9      	b.n	8001a0c <DMA2D_SetConfig+0x60>

08001a38 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 8001a38:	b338      	cbz	r0, 8001a8a <HAL_DMA2D_Init+0x52>
{
 8001a3a:	b510      	push	{r4, lr}
 8001a3c:	4604      	mov	r4, r0
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001a3e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001a42:	b1eb      	cbz	r3, 8001a80 <HAL_DMA2D_Init+0x48>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001a44:	2302      	movs	r3, #2
 8001a46:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001a4a:	6822      	ldr	r2, [r4, #0]
 8001a4c:	6813      	ldr	r3, [r2, #0]
 8001a4e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001a52:	6861      	ldr	r1, [r4, #4]
 8001a54:	430b      	orrs	r3, r1
 8001a56:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001a58:	6822      	ldr	r2, [r4, #0]
 8001a5a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001a5c:	f023 0307 	bic.w	r3, r3, #7
 8001a60:	68a1      	ldr	r1, [r4, #8]
 8001a62:	430b      	orrs	r3, r1
 8001a64:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001a66:	6822      	ldr	r2, [r4, #0]
 8001a68:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_DMA2D_Init+0x58>)
 8001a6c:	400b      	ands	r3, r1
 8001a6e:	68e1      	ldr	r1, [r4, #12]
 8001a70:	430b      	orrs	r3, r1
 8001a72:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001a74:	2000      	movs	r0, #0
 8001a76:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8001a7e:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8001a80:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8001a84:	f7ff fd08 	bl	8001498 <HAL_DMA2D_MspInit>
 8001a88:	e7dc      	b.n	8001a44 <HAL_DMA2D_Init+0xc>
    return HAL_ERROR;
 8001a8a:	2001      	movs	r0, #1
}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	ffffc000 	.word	0xffffc000

08001a94 <HAL_DMA2D_Start>:
{
 8001a94:	b510      	push	{r4, lr}
 8001a96:	b082      	sub	sp, #8
  __HAL_LOCK(hdma2d);
 8001a98:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8001a9c:	2c01      	cmp	r4, #1
 8001a9e:	d013      	beq.n	8001ac8 <HAL_DMA2D_Start+0x34>
 8001aa0:	4604      	mov	r4, r0
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001aa8:	2002      	movs	r0, #2
 8001aaa:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001aae:	9804      	ldr	r0, [sp, #16]
 8001ab0:	9000      	str	r0, [sp, #0]
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	f7ff ff7a 	bl	80019ac <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8001ab8:	6822      	ldr	r2, [r4, #0]
 8001aba:	6813      	ldr	r3, [r2, #0]
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001ac2:	2000      	movs	r0, #0
}
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma2d);
 8001ac8:	2002      	movs	r0, #2
 8001aca:	e7fb      	b.n	8001ac4 <HAL_DMA2D_Start+0x30>

08001acc <HAL_DMA2D_PollForTransfer>:
{
 8001acc:	b570      	push	{r4, r5, r6, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	4604      	mov	r4, r0
 8001ad2:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001ad8:	6803      	ldr	r3, [r0, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f013 0f01 	tst.w	r3, #1
 8001ae0:	d111      	bne.n	8001b06 <HAL_DMA2D_PollForTransfer+0x3a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001ae2:	6822      	ldr	r2, [r4, #0]
 8001ae4:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001ae6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ae8:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8001aea:	f013 0f20 	tst.w	r3, #32
 8001aee:	d147      	bne.n	8001b80 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	2212      	movs	r2, #18
 8001af4:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001af6:	2301      	movs	r3, #1
 8001af8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8001afc:	2000      	movs	r0, #0
 8001afe:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001b02:	b002      	add	sp, #8
 8001b04:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8001b06:	f7ff fec3 	bl	8001890 <HAL_GetTick>
 8001b0a:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001b0c:	6823      	ldr	r3, [r4, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	f012 0f02 	tst.w	r2, #2
 8001b14:	d1e5      	bne.n	8001ae2 <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001b1a:	9a01      	ldr	r2, [sp, #4]
 8001b1c:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001b20:	d114      	bne.n	8001b4c <HAL_DMA2D_PollForTransfer+0x80>
      if (Timeout != HAL_MAX_DELAY)
 8001b22:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001b26:	d0f1      	beq.n	8001b0c <HAL_DMA2D_PollForTransfer+0x40>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b28:	f7ff feb2 	bl	8001890 <HAL_GetTick>
 8001b2c:	1b80      	subs	r0, r0, r6
 8001b2e:	42a8      	cmp	r0, r5
 8001b30:	d801      	bhi.n	8001b36 <HAL_DMA2D_PollForTransfer+0x6a>
 8001b32:	2d00      	cmp	r5, #0
 8001b34:	d1ea      	bne.n	8001b0c <HAL_DMA2D_PollForTransfer+0x40>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001b36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b38:	f043 0320 	orr.w	r3, r3, #32
 8001b3c:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001b3e:	2003      	movs	r0, #3
 8001b40:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8001b44:	2300      	movs	r3, #0
 8001b46:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8001b4a:	e7da      	b.n	8001b02 <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001b4c:	9a01      	ldr	r2, [sp, #4]
 8001b4e:	f012 0f20 	tst.w	r2, #32
 8001b52:	d003      	beq.n	8001b5c <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001b54:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001b56:	f042 0202 	orr.w	r2, r2, #2
 8001b5a:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001b5c:	9a01      	ldr	r2, [sp, #4]
 8001b5e:	f012 0f01 	tst.w	r2, #1
 8001b62:	d003      	beq.n	8001b6c <HAL_DMA2D_PollForTransfer+0xa0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001b64:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001b66:	f042 0201 	orr.w	r2, r2, #1
 8001b6a:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001b6c:	2221      	movs	r2, #33	; 0x21
 8001b6e:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001b70:	2304      	movs	r3, #4
 8001b72:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8001b76:	2300      	movs	r3, #0
 8001b78:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	e7c0      	b.n	8001b02 <HAL_DMA2D_PollForTransfer+0x36>
    tickstart = HAL_GetTick();
 8001b80:	f7ff fe86 	bl	8001890 <HAL_GetTick>
 8001b84:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001b86:	6823      	ldr	r3, [r4, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	f012 0f10 	tst.w	r2, #16
 8001b8e:	d1af      	bne.n	8001af0 <HAL_DMA2D_PollForTransfer+0x24>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001b94:	9a01      	ldr	r2, [sp, #4]
 8001b96:	f012 0f29 	tst.w	r2, #41	; 0x29
 8001b9a:	d114      	bne.n	8001bc6 <HAL_DMA2D_PollForTransfer+0xfa>
      if (Timeout != HAL_MAX_DELAY)
 8001b9c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001ba0:	d0f1      	beq.n	8001b86 <HAL_DMA2D_PollForTransfer+0xba>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ba2:	f7ff fe75 	bl	8001890 <HAL_GetTick>
 8001ba6:	1b80      	subs	r0, r0, r6
 8001ba8:	42a8      	cmp	r0, r5
 8001baa:	d801      	bhi.n	8001bb0 <HAL_DMA2D_PollForTransfer+0xe4>
 8001bac:	2d00      	cmp	r5, #0
 8001bae:	d1ea      	bne.n	8001b86 <HAL_DMA2D_PollForTransfer+0xba>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001bb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001bb2:	f043 0320 	orr.w	r3, r3, #32
 8001bb6:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001bb8:	2003      	movs	r0, #3
 8001bba:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8001bc4:	e79d      	b.n	8001b02 <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001bc6:	9a01      	ldr	r2, [sp, #4]
 8001bc8:	f012 0f08 	tst.w	r2, #8
 8001bcc:	d003      	beq.n	8001bd6 <HAL_DMA2D_PollForTransfer+0x10a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001bce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001bd0:	f042 0204 	orr.w	r2, r2, #4
 8001bd4:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001bd6:	9a01      	ldr	r2, [sp, #4]
 8001bd8:	f012 0f20 	tst.w	r2, #32
 8001bdc:	d003      	beq.n	8001be6 <HAL_DMA2D_PollForTransfer+0x11a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001bde:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001be0:	f042 0202 	orr.w	r2, r2, #2
 8001be4:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001be6:	9a01      	ldr	r2, [sp, #4]
 8001be8:	f012 0f01 	tst.w	r2, #1
 8001bec:	d003      	beq.n	8001bf6 <HAL_DMA2D_PollForTransfer+0x12a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001bee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001bf0:	f042 0201 	orr.w	r2, r2, #1
 8001bf4:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001bf6:	2229      	movs	r2, #41	; 0x29
 8001bf8:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8001c00:	2300      	movs	r3, #0
 8001c02:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8001c06:	2001      	movs	r0, #1
 8001c08:	e77b      	b.n	8001b02 <HAL_DMA2D_PollForTransfer+0x36>

08001c0a <HAL_DMA2D_LineEventCallback>:
}
 8001c0a:	4770      	bx	lr

08001c0c <HAL_DMA2D_CLUTLoadingCpltCallback>:
}
 8001c0c:	4770      	bx	lr

08001c0e <HAL_DMA2D_IRQHandler>:
{
 8001c0e:	b570      	push	{r4, r5, r6, lr}
 8001c10:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001c12:	6803      	ldr	r3, [r0, #0]
 8001c14:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001c16:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001c18:	f015 0f01 	tst.w	r5, #1
 8001c1c:	d016      	beq.n	8001c4c <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001c1e:	f416 7f80 	tst.w	r6, #256	; 0x100
 8001c22:	d013      	beq.n	8001c4c <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c2a:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001c2c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	63c3      	str	r3, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001c34:	6803      	ldr	r3, [r0, #0]
 8001c36:	2201      	movs	r2, #1
 8001c38:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001c40:	2300      	movs	r3, #0
 8001c42:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8001c46:	6943      	ldr	r3, [r0, #20]
 8001c48:	b103      	cbz	r3, 8001c4c <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 8001c4a:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001c4c:	f015 0f20 	tst.w	r5, #32
 8001c50:	d018      	beq.n	8001c84 <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001c52:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8001c56:	d015      	beq.n	8001c84 <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001c58:	6822      	ldr	r2, [r4, #0]
 8001c5a:	6813      	ldr	r3, [r2, #0]
 8001c5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c60:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001c62:	6823      	ldr	r3, [r4, #0]
 8001c64:	2220      	movs	r2, #32
 8001c66:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001c68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c6a:	f043 0302 	orr.w	r3, r3, #2
 8001c6e:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c70:	2304      	movs	r3, #4
 8001c72:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001c76:	2300      	movs	r3, #0
 8001c78:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8001c7c:	6963      	ldr	r3, [r4, #20]
 8001c7e:	b10b      	cbz	r3, 8001c84 <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 8001c80:	4620      	mov	r0, r4
 8001c82:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001c84:	f015 0f08 	tst.w	r5, #8
 8001c88:	d018      	beq.n	8001cbc <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001c8a:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8001c8e:	d015      	beq.n	8001cbc <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001c90:	6822      	ldr	r2, [r4, #0]
 8001c92:	6813      	ldr	r3, [r2, #0]
 8001c94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c98:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001ca0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ca2:	f043 0304 	orr.w	r3, r3, #4
 8001ca6:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ca8:	2304      	movs	r3, #4
 8001caa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8001cb4:	6963      	ldr	r3, [r4, #20]
 8001cb6:	b10b      	cbz	r3, 8001cbc <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 8001cb8:	4620      	mov	r0, r4
 8001cba:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001cbc:	f015 0f04 	tst.w	r5, #4
 8001cc0:	d002      	beq.n	8001cc8 <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001cc2:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8001cc6:	d120      	bne.n	8001d0a <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001cc8:	f015 0f02 	tst.w	r5, #2
 8001ccc:	d016      	beq.n	8001cfc <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001cce:	f416 7f00 	tst.w	r6, #512	; 0x200
 8001cd2:	d013      	beq.n	8001cfc <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001cd4:	6822      	ldr	r2, [r4, #0]
 8001cd6:	6813      	ldr	r3, [r2, #0]
 8001cd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001cdc:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001ce4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ce6:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8001cf4:	6923      	ldr	r3, [r4, #16]
 8001cf6:	b10b      	cbz	r3, 8001cfc <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001cfc:	f015 0f10 	tst.w	r5, #16
 8001d00:	d002      	beq.n	8001d08 <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001d02:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8001d06:	d10c      	bne.n	8001d22 <HAL_DMA2D_IRQHandler+0x114>
}
 8001d08:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001d0a:	6822      	ldr	r2, [r4, #0]
 8001d0c:	6813      	ldr	r3, [r2, #0]
 8001d0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d12:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001d14:	6823      	ldr	r3, [r4, #0]
 8001d16:	2204      	movs	r2, #4
 8001d18:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f7ff ff75 	bl	8001c0a <HAL_DMA2D_LineEventCallback>
 8001d20:	e7d2      	b.n	8001cc8 <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001d22:	6822      	ldr	r2, [r4, #0]
 8001d24:	6813      	ldr	r3, [r2, #0]
 8001d26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d2a:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001d2c:	6823      	ldr	r3, [r4, #0]
 8001d2e:	2210      	movs	r2, #16
 8001d30:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001d32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d34:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d36:	2301      	movs	r3, #1
 8001d38:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001d42:	4620      	mov	r0, r4
 8001d44:	f7ff ff62 	bl	8001c0c <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8001d48:	e7de      	b.n	8001d08 <HAL_DMA2D_IRQHandler+0xfa>
	...

08001d4c <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8001d4c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d059      	beq.n	8001e08 <HAL_DMA2D_ConfigLayer+0xbc>
{
 8001d54:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8001d56:	2301      	movs	r3, #1
 8001d58:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001d62:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8001d66:	69da      	ldr	r2, [r3, #28]
 8001d68:	1c8b      	adds	r3, r1, #2
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	58c3      	ldr	r3, [r0, r3]
 8001d6e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d72:	3a09      	subs	r2, #9
 8001d74:	2a01      	cmp	r2, #1
 8001d76:	d91e      	bls.n	8001db6 <HAL_DMA2D_ConfigLayer+0x6a>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001d78:	1c8a      	adds	r2, r1, #2
 8001d7a:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8001d7e:	6852      	ldr	r2, [r2, #4]
 8001d80:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001d84:	bb41      	cbnz	r1, 8001dd8 <HAL_DMA2D_ConfigLayer+0x8c>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001d86:	6804      	ldr	r4, [r0, #0]
 8001d88:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001d8a:	4a20      	ldr	r2, [pc, #128]	; (8001e0c <HAL_DMA2D_ConfigLayer+0xc0>)
 8001d8c:	402a      	ands	r2, r5
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	6263      	str	r3, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001d92:	6802      	ldr	r2, [r0, #0]
 8001d94:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8001d98:	699c      	ldr	r4, [r3, #24]
 8001d9a:	6194      	str	r4, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	3b09      	subs	r3, #9
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d910      	bls.n	8001dc6 <HAL_DMA2D_ConfigLayer+0x7a>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001da4:	2301      	movs	r3, #1
 8001da6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8001daa:	2300      	movs	r3, #0
 8001dac:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 8001db0:	4618      	mov	r0, r3
}
 8001db2:	bc30      	pop	{r4, r5}
 8001db4:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001db6:	1c8a      	adds	r2, r1, #2
 8001db8:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8001dbc:	6852      	ldr	r2, [r2, #4]
 8001dbe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	e7de      	b.n	8001d84 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001dc6:	3102      	adds	r1, #2
 8001dc8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8001dcc:	684b      	ldr	r3, [r1, #4]
 8001dce:	6802      	ldr	r2, [r0, #0]
 8001dd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001dd4:	6293      	str	r3, [r2, #40]	; 0x28
 8001dd6:	e7e5      	b.n	8001da4 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001dd8:	6804      	ldr	r4, [r0, #0]
 8001dda:	69e5      	ldr	r5, [r4, #28]
 8001ddc:	4a0b      	ldr	r2, [pc, #44]	; (8001e0c <HAL_DMA2D_ConfigLayer+0xc0>)
 8001dde:	402a      	ands	r2, r5
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001de4:	6802      	ldr	r2, [r0, #0]
 8001de6:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8001dea:	699c      	ldr	r4, [r3, #24]
 8001dec:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	3b09      	subs	r3, #9
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d8d6      	bhi.n	8001da4 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001df6:	3102      	adds	r1, #2
 8001df8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8001dfc:	684b      	ldr	r3, [r1, #4]
 8001dfe:	6802      	ldr	r2, [r0, #0]
 8001e00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001e04:	6213      	str	r3, [r2, #32]
 8001e06:	e7cd      	b.n	8001da4 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 8001e08:	2002      	movs	r0, #2
}
 8001e0a:	4770      	bx	lr
 8001e0c:	00fcfff0 	.word	0x00fcfff0

08001e10 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e10:	2300      	movs	r3, #0
 8001e12:	2b0f      	cmp	r3, #15
 8001e14:	f200 80e1 	bhi.w	8001fda <HAL_GPIO_Init+0x1ca>
{
 8001e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	e039      	b.n	8001e92 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e1e:	2209      	movs	r2, #9
 8001e20:	e000      	b.n	8001e24 <HAL_GPIO_Init+0x14>
 8001e22:	2200      	movs	r2, #0
 8001e24:	40b2      	lsls	r2, r6
 8001e26:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e28:	3402      	adds	r4, #2
 8001e2a:	4e6c      	ldr	r6, [pc, #432]	; (8001fdc <HAL_GPIO_Init+0x1cc>)
 8001e2c:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e30:	4a6b      	ldr	r2, [pc, #428]	; (8001fe0 <HAL_GPIO_Init+0x1d0>)
 8001e32:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001e34:	43ea      	mvns	r2, r5
 8001e36:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e3a:	684f      	ldr	r7, [r1, #4]
 8001e3c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001e40:	d001      	beq.n	8001e46 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8001e42:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8001e46:	4c66      	ldr	r4, [pc, #408]	; (8001fe0 <HAL_GPIO_Init+0x1d0>)
 8001e48:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001e4a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001e4c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e50:	684f      	ldr	r7, [r1, #4]
 8001e52:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001e56:	d001      	beq.n	8001e5c <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8001e58:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8001e5c:	4c60      	ldr	r4, [pc, #384]	; (8001fe0 <HAL_GPIO_Init+0x1d0>)
 8001e5e:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e60:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001e62:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e66:	684f      	ldr	r7, [r1, #4]
 8001e68:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001e6c:	d001      	beq.n	8001e72 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8001e6e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8001e72:	4c5b      	ldr	r4, [pc, #364]	; (8001fe0 <HAL_GPIO_Init+0x1d0>)
 8001e74:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001e76:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001e78:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e7a:	684e      	ldr	r6, [r1, #4]
 8001e7c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001e80:	d001      	beq.n	8001e86 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8001e82:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8001e86:	4c56      	ldr	r4, [pc, #344]	; (8001fe0 <HAL_GPIO_Init+0x1d0>)
 8001e88:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	2b0f      	cmp	r3, #15
 8001e8e:	f200 80a2 	bhi.w	8001fd6 <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 8001e92:	2201      	movs	r2, #1
 8001e94:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e96:	680c      	ldr	r4, [r1, #0]
 8001e98:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8001e9c:	42aa      	cmp	r2, r5
 8001e9e:	d1f4      	bne.n	8001e8a <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ea0:	684c      	ldr	r4, [r1, #4]
 8001ea2:	1e66      	subs	r6, r4, #1
 8001ea4:	2c11      	cmp	r4, #17
 8001ea6:	bf18      	it	ne
 8001ea8:	2e01      	cmpne	r6, #1
 8001eaa:	d901      	bls.n	8001eb0 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eac:	2c12      	cmp	r4, #18
 8001eae:	d112      	bne.n	8001ed6 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8001eb0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001eb2:	005f      	lsls	r7, r3, #1
 8001eb4:	2403      	movs	r4, #3
 8001eb6:	40bc      	lsls	r4, r7
 8001eb8:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ebc:	68cc      	ldr	r4, [r1, #12]
 8001ebe:	40bc      	lsls	r4, r7
 8001ec0:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001ec2:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001ec4:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec6:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001eca:	684c      	ldr	r4, [r1, #4]
 8001ecc:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001ed0:	409a      	lsls	r2, r3
 8001ed2:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8001ed4:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001ed6:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ed8:	005f      	lsls	r7, r3, #1
 8001eda:	2603      	movs	r6, #3
 8001edc:	40be      	lsls	r6, r7
 8001ede:	43f6      	mvns	r6, r6
 8001ee0:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ee2:	688c      	ldr	r4, [r1, #8]
 8001ee4:	40bc      	lsls	r4, r7
 8001ee6:	4314      	orrs	r4, r2
      GPIOx->PUPDR = temp;
 8001ee8:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eea:	684a      	ldr	r2, [r1, #4]
 8001eec:	2a12      	cmp	r2, #18
 8001eee:	bf18      	it	ne
 8001ef0:	2a02      	cmpne	r2, #2
 8001ef2:	d113      	bne.n	8001f1c <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3];
 8001ef4:	08dc      	lsrs	r4, r3, #3
 8001ef6:	3408      	adds	r4, #8
 8001ef8:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001efc:	f003 0207 	and.w	r2, r3, #7
 8001f00:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8001f04:	220f      	movs	r2, #15
 8001f06:	fa02 f20c 	lsl.w	r2, r2, ip
 8001f0a:	ea2e 0e02 	bic.w	lr, lr, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f0e:	690a      	ldr	r2, [r1, #16]
 8001f10:	fa02 f20c 	lsl.w	r2, r2, ip
 8001f14:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 8001f18:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
      temp = GPIOx->MODER;
 8001f1c:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f1e:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f20:	684a      	ldr	r2, [r1, #4]
 8001f22:	f002 0203 	and.w	r2, r2, #3
 8001f26:	40ba      	lsls	r2, r7
 8001f28:	4332      	orrs	r2, r6
      GPIOx->MODER = temp;
 8001f2a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f2c:	684a      	ldr	r2, [r1, #4]
 8001f2e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001f32:	d0aa      	beq.n	8001e8a <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f34:	4a2b      	ldr	r2, [pc, #172]	; (8001fe4 <HAL_GPIO_Init+0x1d4>)
 8001f36:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001f38:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001f3c:	6454      	str	r4, [r2, #68]	; 0x44
 8001f3e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f40:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001f44:	9201      	str	r2, [sp, #4]
 8001f46:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001f48:	089c      	lsrs	r4, r3, #2
 8001f4a:	1ca6      	adds	r6, r4, #2
 8001f4c:	4a23      	ldr	r2, [pc, #140]	; (8001fdc <HAL_GPIO_Init+0x1cc>)
 8001f4e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f52:	f003 0203 	and.w	r2, r3, #3
 8001f56:	0096      	lsls	r6, r2, #2
 8001f58:	220f      	movs	r2, #15
 8001f5a:	40b2      	lsls	r2, r6
 8001f5c:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f60:	4a21      	ldr	r2, [pc, #132]	; (8001fe8 <HAL_GPIO_Init+0x1d8>)
 8001f62:	4290      	cmp	r0, r2
 8001f64:	f43f af5d 	beq.w	8001e22 <HAL_GPIO_Init+0x12>
 8001f68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f6c:	4290      	cmp	r0, r2
 8001f6e:	d022      	beq.n	8001fb6 <HAL_GPIO_Init+0x1a6>
 8001f70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f74:	4290      	cmp	r0, r2
 8001f76:	d020      	beq.n	8001fba <HAL_GPIO_Init+0x1aa>
 8001f78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f7c:	4290      	cmp	r0, r2
 8001f7e:	d01e      	beq.n	8001fbe <HAL_GPIO_Init+0x1ae>
 8001f80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f84:	4290      	cmp	r0, r2
 8001f86:	d01c      	beq.n	8001fc2 <HAL_GPIO_Init+0x1b2>
 8001f88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f8c:	4290      	cmp	r0, r2
 8001f8e:	d01a      	beq.n	8001fc6 <HAL_GPIO_Init+0x1b6>
 8001f90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f94:	4290      	cmp	r0, r2
 8001f96:	d018      	beq.n	8001fca <HAL_GPIO_Init+0x1ba>
 8001f98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f9c:	4290      	cmp	r0, r2
 8001f9e:	d016      	beq.n	8001fce <HAL_GPIO_Init+0x1be>
 8001fa0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fa4:	4290      	cmp	r0, r2
 8001fa6:	d014      	beq.n	8001fd2 <HAL_GPIO_Init+0x1c2>
 8001fa8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fac:	4290      	cmp	r0, r2
 8001fae:	f43f af36 	beq.w	8001e1e <HAL_GPIO_Init+0xe>
 8001fb2:	220a      	movs	r2, #10
 8001fb4:	e736      	b.n	8001e24 <HAL_GPIO_Init+0x14>
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	e734      	b.n	8001e24 <HAL_GPIO_Init+0x14>
 8001fba:	2202      	movs	r2, #2
 8001fbc:	e732      	b.n	8001e24 <HAL_GPIO_Init+0x14>
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	e730      	b.n	8001e24 <HAL_GPIO_Init+0x14>
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	e72e      	b.n	8001e24 <HAL_GPIO_Init+0x14>
 8001fc6:	2205      	movs	r2, #5
 8001fc8:	e72c      	b.n	8001e24 <HAL_GPIO_Init+0x14>
 8001fca:	2206      	movs	r2, #6
 8001fcc:	e72a      	b.n	8001e24 <HAL_GPIO_Init+0x14>
 8001fce:	2207      	movs	r2, #7
 8001fd0:	e728      	b.n	8001e24 <HAL_GPIO_Init+0x14>
 8001fd2:	2208      	movs	r2, #8
 8001fd4:	e726      	b.n	8001e24 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8001fd6:	b003      	add	sp, #12
 8001fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fda:	4770      	bx	lr
 8001fdc:	40013800 	.word	0x40013800
 8001fe0:	40013c00 	.word	0x40013c00
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40020000 	.word	0x40020000

08001fec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fec:	b912      	cbnz	r2, 8001ff4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001fee:	0409      	lsls	r1, r1, #16
 8001ff0:	6181      	str	r1, [r0, #24]
  }
}
 8001ff2:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001ff4:	6181      	str	r1, [r0, #24]
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ff8:	2800      	cmp	r0, #0
 8001ffa:	d057      	beq.n	80020ac <HAL_I2C_Init+0xb4>
{
 8001ffc:	b510      	push	{r4, lr}
 8001ffe:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002000:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002004:	2b00      	cmp	r3, #0
 8002006:	d041      	beq.n	800208c <HAL_I2C_Init+0x94>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002008:	2324      	movs	r3, #36	; 0x24
 800200a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800200e:	6822      	ldr	r2, [r4, #0]
 8002010:	6813      	ldr	r3, [r2, #0]
 8002012:	f023 0301 	bic.w	r3, r3, #1
 8002016:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002018:	6863      	ldr	r3, [r4, #4]
 800201a:	6822      	ldr	r2, [r4, #0]
 800201c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002020:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002022:	6822      	ldr	r2, [r4, #0]
 8002024:	6893      	ldr	r3, [r2, #8]
 8002026:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800202a:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800202c:	68e3      	ldr	r3, [r4, #12]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d031      	beq.n	8002096 <HAL_I2C_Init+0x9e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002032:	68a3      	ldr	r3, [r4, #8]
 8002034:	6822      	ldr	r2, [r4, #0]
 8002036:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800203a:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800203c:	68e3      	ldr	r3, [r4, #12]
 800203e:	2b02      	cmp	r3, #2
 8002040:	d02f      	beq.n	80020a2 <HAL_I2C_Init+0xaa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002042:	6822      	ldr	r2, [r4, #0]
 8002044:	6851      	ldr	r1, [r2, #4]
 8002046:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <HAL_I2C_Init+0xb8>)
 8002048:	430b      	orrs	r3, r1
 800204a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800204c:	6822      	ldr	r2, [r4, #0]
 800204e:	68d3      	ldr	r3, [r2, #12]
 8002050:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002054:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002056:	6923      	ldr	r3, [r4, #16]
 8002058:	6962      	ldr	r2, [r4, #20]
 800205a:	4313      	orrs	r3, r2
 800205c:	69a1      	ldr	r1, [r4, #24]
 800205e:	6822      	ldr	r2, [r4, #0]
 8002060:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002064:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002066:	69e3      	ldr	r3, [r4, #28]
 8002068:	6a21      	ldr	r1, [r4, #32]
 800206a:	6822      	ldr	r2, [r4, #0]
 800206c:	430b      	orrs	r3, r1
 800206e:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002070:	6822      	ldr	r2, [r4, #0]
 8002072:	6813      	ldr	r3, [r2, #0]
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800207a:	2000      	movs	r0, #0
 800207c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800207e:	2320      	movs	r3, #32
 8002080:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002084:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002086:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 800208a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800208c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002090:	f7ff fa22 	bl	80014d8 <HAL_I2C_MspInit>
 8002094:	e7b8      	b.n	8002008 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002096:	68a3      	ldr	r3, [r4, #8]
 8002098:	6822      	ldr	r2, [r4, #0]
 800209a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800209e:	6093      	str	r3, [r2, #8]
 80020a0:	e7cc      	b.n	800203c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020a2:	6823      	ldr	r3, [r4, #0]
 80020a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	e7ca      	b.n	8002042 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80020ac:	2001      	movs	r0, #1
}
 80020ae:	4770      	bx	lr
 80020b0:	02008000 	.word	0x02008000

080020b4 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020b4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b20      	cmp	r3, #32
 80020bc:	d124      	bne.n	8002108 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020be:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d022      	beq.n	800210c <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80020c6:	2301      	movs	r3, #1
 80020c8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020cc:	2324      	movs	r3, #36	; 0x24
 80020ce:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020d2:	6802      	ldr	r2, [r0, #0]
 80020d4:	6813      	ldr	r3, [r2, #0]
 80020d6:	f023 0301 	bic.w	r3, r3, #1
 80020da:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020dc:	6802      	ldr	r2, [r0, #0]
 80020de:	6813      	ldr	r3, [r2, #0]
 80020e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020e4:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020e6:	6802      	ldr	r2, [r0, #0]
 80020e8:	6813      	ldr	r3, [r2, #0]
 80020ea:	4319      	orrs	r1, r3
 80020ec:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020ee:	6802      	ldr	r2, [r0, #0]
 80020f0:	6813      	ldr	r3, [r2, #0]
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f8:	2320      	movs	r3, #32
 80020fa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020fe:	2300      	movs	r3, #0
 8002100:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002104:	4618      	mov	r0, r3
 8002106:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002108:	2002      	movs	r0, #2
 800210a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800210c:	2002      	movs	r0, #2
  }
}
 800210e:	4770      	bx	lr

08002110 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002110:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b20      	cmp	r3, #32
 8002118:	d122      	bne.n	8002160 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800211a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800211e:	2b01      	cmp	r3, #1
 8002120:	d020      	beq.n	8002164 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002122:	2301      	movs	r3, #1
 8002124:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002128:	2324      	movs	r3, #36	; 0x24
 800212a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800212e:	6802      	ldr	r2, [r0, #0]
 8002130:	6813      	ldr	r3, [r2, #0]
 8002132:	f023 0301 	bic.w	r3, r3, #1
 8002136:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002138:	6802      	ldr	r2, [r0, #0]
 800213a:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800213c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002140:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002144:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002146:	6802      	ldr	r2, [r0, #0]
 8002148:	6813      	ldr	r3, [r2, #0]
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002150:	2320      	movs	r3, #32
 8002152:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002156:	2300      	movs	r3, #0
 8002158:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800215c:	4618      	mov	r0, r3
 800215e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002160:	2002      	movs	r0, #2
 8002162:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002164:	2002      	movs	r0, #2
  }
}
 8002166:	4770      	bx	lr

08002168 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002168:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800216a:	684d      	ldr	r5, [r1, #4]
 800216c:	6804      	ldr	r4, [r0, #0]
 800216e:	68e3      	ldr	r3, [r4, #12]
 8002170:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8002174:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002176:	01d2      	lsls	r2, r2, #7
 8002178:	4414      	add	r4, r2
 800217a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800217e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002182:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002186:	680b      	ldr	r3, [r1, #0]
 8002188:	6804      	ldr	r4, [r0, #0]
 800218a:	68e6      	ldr	r6, [r4, #12]
 800218c:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8002190:	4433      	add	r3, r6
 8002192:	3301      	adds	r3, #1
 8002194:	4414      	add	r4, r2
 8002196:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800219a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800219e:	68cd      	ldr	r5, [r1, #12]
 80021a0:	6804      	ldr	r4, [r0, #0]
 80021a2:	68e3      	ldr	r3, [r4, #12]
 80021a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021a8:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80021aa:	4414      	add	r4, r2
 80021ac:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80021b0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80021b4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80021b8:	688b      	ldr	r3, [r1, #8]
 80021ba:	6804      	ldr	r4, [r0, #0]
 80021bc:	68e6      	ldr	r6, [r4, #12]
 80021be:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80021c2:	4433      	add	r3, r6
 80021c4:	3301      	adds	r3, #1
 80021c6:	4414      	add	r4, r2
 80021c8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80021cc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80021d0:	6803      	ldr	r3, [r0, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 80021d8:	f024 0407 	bic.w	r4, r4, #7
 80021dc:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80021e0:	6803      	ldr	r3, [r0, #0]
 80021e2:	4413      	add	r3, r2
 80021e4:	690c      	ldr	r4, [r1, #16]
 80021e6:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80021ea:	f891 c031 	ldrb.w	ip, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80021ee:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80021f2:	698e      	ldr	r6, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80021f4:	6805      	ldr	r5, [r0, #0]
 80021f6:	4415      	add	r5, r2
 80021f8:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 80021fc:	2400      	movs	r4, #0
 80021fe:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002202:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8002206:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800220a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800220e:	6805      	ldr	r5, [r0, #0]
 8002210:	4415      	add	r5, r2
 8002212:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8002216:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800221a:	6803      	ldr	r3, [r0, #0]
 800221c:	4413      	add	r3, r2
 800221e:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8002222:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8002226:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800222a:	6803      	ldr	r3, [r0, #0]
 800222c:	4413      	add	r3, r2
 800222e:	694d      	ldr	r5, [r1, #20]
 8002230:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002234:	6803      	ldr	r3, [r0, #0]
 8002236:	4413      	add	r3, r2
 8002238:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 800223c:	4d2d      	ldr	r5, [pc, #180]	; (80022f4 <LTDC_SetConfig+0x18c>)
 800223e:	4035      	ands	r5, r6
 8002240:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002244:	69cd      	ldr	r5, [r1, #28]
 8002246:	6a0e      	ldr	r6, [r1, #32]
 8002248:	6803      	ldr	r3, [r0, #0]
 800224a:	4413      	add	r3, r2
 800224c:	4335      	orrs	r5, r6
 800224e:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002252:	6803      	ldr	r3, [r0, #0]
 8002254:	4413      	add	r3, r2
 8002256:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 800225a:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800225e:	6803      	ldr	r3, [r0, #0]
 8002260:	4413      	add	r3, r2
 8002262:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002264:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002268:	690b      	ldr	r3, [r1, #16]
 800226a:	b16b      	cbz	r3, 8002288 <LTDC_SetConfig+0x120>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800226c:	2b01      	cmp	r3, #1
 800226e:	d03a      	beq.n	80022e6 <LTDC_SetConfig+0x17e>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002270:	2b02      	cmp	r3, #2
 8002272:	bf18      	it	ne
 8002274:	2b04      	cmpne	r3, #4
 8002276:	d038      	beq.n	80022ea <LTDC_SetConfig+0x182>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002278:	2b03      	cmp	r3, #3
 800227a:	d038      	beq.n	80022ee <LTDC_SetConfig+0x186>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800227c:	2b07      	cmp	r3, #7
 800227e:	d001      	beq.n	8002284 <LTDC_SetConfig+0x11c>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8002280:	2301      	movs	r3, #1
 8002282:	e002      	b.n	800228a <LTDC_SetConfig+0x122>
    tmp = 2U;
 8002284:	2302      	movs	r3, #2
 8002286:	e000      	b.n	800228a <LTDC_SetConfig+0x122>
    tmp = 4U;
 8002288:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800228a:	6804      	ldr	r4, [r0, #0]
 800228c:	4414      	add	r4, r2
 800228e:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 8002292:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8002296:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800229a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800229c:	fb03 f504 	mul.w	r5, r3, r4
 80022a0:	684c      	ldr	r4, [r1, #4]
 80022a2:	680e      	ldr	r6, [r1, #0]
 80022a4:	1ba4      	subs	r4, r4, r6
 80022a6:	fb03 f304 	mul.w	r3, r3, r4
 80022aa:	3303      	adds	r3, #3
 80022ac:	6804      	ldr	r4, [r0, #0]
 80022ae:	4414      	add	r4, r2
 80022b0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80022b4:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80022b8:	6803      	ldr	r3, [r0, #0]
 80022ba:	4413      	add	r3, r2
 80022bc:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 80022c0:	4c0d      	ldr	r4, [pc, #52]	; (80022f8 <LTDC_SetConfig+0x190>)
 80022c2:	402c      	ands	r4, r5
 80022c4:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80022c8:	6803      	ldr	r3, [r0, #0]
 80022ca:	4413      	add	r3, r2
 80022cc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80022ce:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80022d2:	6803      	ldr	r3, [r0, #0]
 80022d4:	441a      	add	r2, r3
 80022d6:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
 80022e2:	bcf0      	pop	{r4, r5, r6, r7}
 80022e4:	4770      	bx	lr
    tmp = 3U;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e7cf      	b.n	800228a <LTDC_SetConfig+0x122>
    tmp = 2U;
 80022ea:	2302      	movs	r3, #2
 80022ec:	e7cd      	b.n	800228a <LTDC_SetConfig+0x122>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e7cb      	b.n	800228a <LTDC_SetConfig+0x122>
 80022f2:	bf00      	nop
 80022f4:	fffff8f8 	.word	0xfffff8f8
 80022f8:	fffff800 	.word	0xfffff800

080022fc <HAL_LTDC_Init>:
  if (hltdc == NULL)
 80022fc:	2800      	cmp	r0, #0
 80022fe:	d072      	beq.n	80023e6 <HAL_LTDC_Init+0xea>
{
 8002300:	b538      	push	{r3, r4, r5, lr}
 8002302:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002304:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d067      	beq.n	80023dc <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800230c:	2302      	movs	r3, #2
 800230e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002312:	6822      	ldr	r2, [r4, #0]
 8002314:	6993      	ldr	r3, [r2, #24]
 8002316:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800231a:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800231c:	6821      	ldr	r1, [r4, #0]
 800231e:	698a      	ldr	r2, [r1, #24]
 8002320:	6863      	ldr	r3, [r4, #4]
 8002322:	68a0      	ldr	r0, [r4, #8]
 8002324:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002326:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002328:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800232a:	6920      	ldr	r0, [r4, #16]
 800232c:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800232e:	4313      	orrs	r3, r2
 8002330:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002332:	6821      	ldr	r1, [r4, #0]
 8002334:	688a      	ldr	r2, [r1, #8]
 8002336:	4b2d      	ldr	r3, [pc, #180]	; (80023ec <HAL_LTDC_Init+0xf0>)
 8002338:	401a      	ands	r2, r3
 800233a:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800233c:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800233e:	6820      	ldr	r0, [r4, #0]
 8002340:	6882      	ldr	r2, [r0, #8]
 8002342:	69a1      	ldr	r1, [r4, #24]
 8002344:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002348:	430a      	orrs	r2, r1
 800234a:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800234c:	6821      	ldr	r1, [r4, #0]
 800234e:	68ca      	ldr	r2, [r1, #12]
 8002350:	401a      	ands	r2, r3
 8002352:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002354:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002356:	6820      	ldr	r0, [r4, #0]
 8002358:	68c2      	ldr	r2, [r0, #12]
 800235a:	6a21      	ldr	r1, [r4, #32]
 800235c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002360:	430a      	orrs	r2, r1
 8002362:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002364:	6821      	ldr	r1, [r4, #0]
 8002366:	690a      	ldr	r2, [r1, #16]
 8002368:	401a      	ands	r2, r3
 800236a:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800236c:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800236e:	6820      	ldr	r0, [r4, #0]
 8002370:	6902      	ldr	r2, [r0, #16]
 8002372:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002374:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002378:	430a      	orrs	r2, r1
 800237a:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800237c:	6821      	ldr	r1, [r4, #0]
 800237e:	694a      	ldr	r2, [r1, #20]
 8002380:	4013      	ands	r3, r2
 8002382:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002384:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002386:	6821      	ldr	r1, [r4, #0]
 8002388:	694b      	ldr	r3, [r1, #20]
 800238a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800238c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002390:	4313      	orrs	r3, r2
 8002392:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002394:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002398:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800239c:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800239e:	6821      	ldr	r1, [r4, #0]
 80023a0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80023a2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80023a6:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80023a8:	6821      	ldr	r1, [r4, #0]
 80023aa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80023ac:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80023b0:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80023b4:	4303      	orrs	r3, r0
 80023b6:	4313      	orrs	r3, r2
 80023b8:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80023ba:	6822      	ldr	r2, [r4, #0]
 80023bc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80023be:	f043 0306 	orr.w	r3, r3, #6
 80023c2:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80023c4:	6822      	ldr	r2, [r4, #0]
 80023c6:	6993      	ldr	r3, [r2, #24]
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80023ce:	2000      	movs	r0, #0
 80023d0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80023d4:	2301      	movs	r3, #1
 80023d6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80023da:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 80023dc:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80023e0:	f7ff f8b2 	bl	8001548 <HAL_LTDC_MspInit>
 80023e4:	e792      	b.n	800230c <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 80023e6:	2001      	movs	r0, #1
}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	f000f800 	.word	0xf000f800

080023f0 <HAL_LTDC_ErrorCallback>:
}
 80023f0:	4770      	bx	lr

080023f2 <HAL_LTDC_LineEventCallback>:
}
 80023f2:	4770      	bx	lr

080023f4 <HAL_LTDC_ReloadEventCallback>:
}
 80023f4:	4770      	bx	lr

080023f6 <HAL_LTDC_IRQHandler>:
{
 80023f6:	b570      	push	{r4, r5, r6, lr}
 80023f8:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80023fa:	6803      	ldr	r3, [r0, #0]
 80023fc:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80023fe:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002400:	f015 0f04 	tst.w	r5, #4
 8002404:	d002      	beq.n	800240c <HAL_LTDC_IRQHandler+0x16>
 8002406:	f016 0f04 	tst.w	r6, #4
 800240a:	d112      	bne.n	8002432 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800240c:	f015 0f02 	tst.w	r5, #2
 8002410:	d002      	beq.n	8002418 <HAL_LTDC_IRQHandler+0x22>
 8002412:	f016 0f02 	tst.w	r6, #2
 8002416:	d121      	bne.n	800245c <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002418:	f015 0f01 	tst.w	r5, #1
 800241c:	d002      	beq.n	8002424 <HAL_LTDC_IRQHandler+0x2e>
 800241e:	f016 0f01 	tst.w	r6, #1
 8002422:	d132      	bne.n	800248a <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002424:	f015 0f08 	tst.w	r5, #8
 8002428:	d002      	beq.n	8002430 <HAL_LTDC_IRQHandler+0x3a>
 800242a:	f016 0f08 	tst.w	r6, #8
 800242e:	d13d      	bne.n	80024ac <HAL_LTDC_IRQHandler+0xb6>
}
 8002430:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002434:	f022 0204 	bic.w	r2, r2, #4
 8002438:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800243a:	6803      	ldr	r3, [r0, #0]
 800243c:	2204      	movs	r2, #4
 800243e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002440:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800244c:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002450:	2300      	movs	r3, #0
 8002452:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8002456:	f7ff ffcb 	bl	80023f0 <HAL_LTDC_ErrorCallback>
 800245a:	e7d7      	b.n	800240c <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800245c:	6822      	ldr	r2, [r4, #0]
 800245e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002460:	f023 0302 	bic.w	r3, r3, #2
 8002464:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002466:	6823      	ldr	r3, [r4, #0]
 8002468:	2202      	movs	r2, #2
 800246a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800246c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002476:	2304      	movs	r3, #4
 8002478:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800247c:	2300      	movs	r3, #0
 800247e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8002482:	4620      	mov	r0, r4
 8002484:	f7ff ffb4 	bl	80023f0 <HAL_LTDC_ErrorCallback>
 8002488:	e7c6      	b.n	8002418 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800248a:	6822      	ldr	r2, [r4, #0]
 800248c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002494:	6822      	ldr	r2, [r4, #0]
 8002496:	2301      	movs	r3, #1
 8002498:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800249a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800249e:	2300      	movs	r3, #0
 80024a0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80024a4:	4620      	mov	r0, r4
 80024a6:	f7ff ffa4 	bl	80023f2 <HAL_LTDC_LineEventCallback>
 80024aa:	e7bb      	b.n	8002424 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80024ac:	6822      	ldr	r2, [r4, #0]
 80024ae:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80024b0:	f023 0308 	bic.w	r3, r3, #8
 80024b4:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80024b6:	6823      	ldr	r3, [r4, #0]
 80024b8:	2208      	movs	r2, #8
 80024ba:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80024bc:	2301      	movs	r3, #1
 80024be:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80024c2:	2300      	movs	r3, #0
 80024c4:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80024c8:	4620      	mov	r0, r4
 80024ca:	f7ff ff93 	bl	80023f4 <HAL_LTDC_ReloadEventCallback>
}
 80024ce:	e7af      	b.n	8002430 <HAL_LTDC_IRQHandler+0x3a>

080024d0 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 80024d0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d027      	beq.n	8002528 <HAL_LTDC_ConfigLayer+0x58>
{
 80024d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024dc:	4694      	mov	ip, r2
 80024de:	460f      	mov	r7, r1
 80024e0:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 80024e2:	f04f 0801 	mov.w	r8, #1
 80024e6:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80024ea:	2302      	movs	r3, #2
 80024ec:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80024f0:	2434      	movs	r4, #52	; 0x34
 80024f2:	fb04 0402 	mla	r4, r4, r2, r0
 80024f6:	3438      	adds	r4, #56	; 0x38
 80024f8:	460d      	mov	r5, r1
 80024fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002506:	682b      	ldr	r3, [r5, #0]
 8002508:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800250a:	4662      	mov	r2, ip
 800250c:	4639      	mov	r1, r7
 800250e:	4630      	mov	r0, r6
 8002510:	f7ff fe2a 	bl	8002168 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002514:	6833      	ldr	r3, [r6, #0]
 8002516:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800251a:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800251e:	2000      	movs	r0, #0
 8002520:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8002524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8002528:	2002      	movs	r0, #2
}
 800252a:	4770      	bx	lr

0800252c <HAL_LTDC_SetAddress>:
{
 800252c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hltdc);
 800252e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002532:	2b01      	cmp	r3, #1
 8002534:	d019      	beq.n	800256a <HAL_LTDC_SetAddress+0x3e>
 8002536:	4604      	mov	r4, r0
 8002538:	2501      	movs	r5, #1
 800253a:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800253e:	2302      	movs	r3, #2
 8002540:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002544:	2334      	movs	r3, #52	; 0x34
 8002546:	fb03 f302 	mul.w	r3, r3, r2
 800254a:	f103 0038 	add.w	r0, r3, #56	; 0x38
  pLayerCfg->FBStartAdress = Address;
 800254e:	4423      	add	r3, r4
 8002550:	65d9      	str	r1, [r3, #92]	; 0x5c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002552:	1821      	adds	r1, r4, r0
 8002554:	4620      	mov	r0, r4
 8002556:	f7ff fe07 	bl	8002168 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800255a:	6823      	ldr	r3, [r4, #0]
 800255c:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800255e:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002562:	2000      	movs	r0, #0
 8002564:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8002568:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hltdc);
 800256a:	2002      	movs	r0, #2
 800256c:	e7fc      	b.n	8002568 <HAL_LTDC_SetAddress+0x3c>
	...

08002570 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002570:	4a02      	ldr	r2, [pc, #8]	; (800257c <HAL_PWR_EnableBkUpAccess+0xc>)
 8002572:	6813      	ldr	r3, [r2, #0]
 8002574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002578:	6013      	str	r3, [r2, #0]
}
 800257a:	4770      	bx	lr
 800257c:	40007000 	.word	0x40007000

08002580 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002580:	b510      	push	{r4, lr}
 8002582:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_PWREx_EnableOverDrive+0x74>)
 8002586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002588:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800258c:	641a      	str	r2, [r3, #64]	; 0x40
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002598:	4a17      	ldr	r2, [pc, #92]	; (80025f8 <HAL_PWREx_EnableOverDrive+0x78>)
 800259a:	6813      	ldr	r3, [r2, #0]
 800259c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025a2:	f7ff f975 	bl	8001890 <HAL_GetTick>
 80025a6:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025a8:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <HAL_PWREx_EnableOverDrive+0x78>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80025b0:	d108      	bne.n	80025c4 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025b2:	f7ff f96d 	bl	8001890 <HAL_GetTick>
 80025b6:	1b00      	subs	r0, r0, r4
 80025b8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80025bc:	d9f4      	bls.n	80025a8 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 80025be:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 80025c0:	b002      	add	sp, #8
 80025c2:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80025c4:	4a0c      	ldr	r2, [pc, #48]	; (80025f8 <HAL_PWREx_EnableOverDrive+0x78>)
 80025c6:	6813      	ldr	r3, [r2, #0]
 80025c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025cc:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80025ce:	f7ff f95f 	bl	8001890 <HAL_GetTick>
 80025d2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_PWREx_EnableOverDrive+0x78>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80025dc:	d107      	bne.n	80025ee <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025de:	f7ff f957 	bl	8001890 <HAL_GetTick>
 80025e2:	1b00      	subs	r0, r0, r4
 80025e4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80025e8:	d9f4      	bls.n	80025d4 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 80025ea:	2003      	movs	r0, #3
 80025ec:	e7e8      	b.n	80025c0 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 80025ee:	2000      	movs	r0, #0
 80025f0:	e7e6      	b.n	80025c0 <HAL_PWREx_EnableOverDrive+0x40>
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40007000 	.word	0x40007000

080025fc <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025fc:	2800      	cmp	r0, #0
 80025fe:	f000 8209 	beq.w	8002a14 <HAL_RCC_OscConfig+0x418>
{
 8002602:	b570      	push	{r4, r5, r6, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002608:	6803      	ldr	r3, [r0, #0]
 800260a:	f013 0f01 	tst.w	r3, #1
 800260e:	d029      	beq.n	8002664 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002610:	4ba2      	ldr	r3, [pc, #648]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b04      	cmp	r3, #4
 800261a:	d01a      	beq.n	8002652 <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800261c:	4b9f      	ldr	r3, [pc, #636]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 030c 	and.w	r3, r3, #12
 8002624:	2b08      	cmp	r3, #8
 8002626:	d00f      	beq.n	8002648 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002628:	6863      	ldr	r3, [r4, #4]
 800262a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800262e:	d040      	beq.n	80026b2 <HAL_RCC_OscConfig+0xb6>
 8002630:	2b00      	cmp	r3, #0
 8002632:	d154      	bne.n	80026de <HAL_RCC_OscConfig+0xe2>
 8002634:	4b99      	ldr	r3, [pc, #612]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	e039      	b.n	80026bc <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002648:	4b94      	ldr	r3, [pc, #592]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002650:	d0ea      	beq.n	8002628 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002652:	4b92      	ldr	r3, [pc, #584]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800265a:	d003      	beq.n	8002664 <HAL_RCC_OscConfig+0x68>
 800265c:	6863      	ldr	r3, [r4, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 81da 	beq.w	8002a18 <HAL_RCC_OscConfig+0x41c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	f013 0f02 	tst.w	r3, #2
 800266a:	d075      	beq.n	8002758 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800266c:	4b8b      	ldr	r3, [pc, #556]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f013 0f0c 	tst.w	r3, #12
 8002674:	d05e      	beq.n	8002734 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002676:	4b89      	ldr	r3, [pc, #548]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b08      	cmp	r3, #8
 8002680:	d053      	beq.n	800272a <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002682:	68e3      	ldr	r3, [r4, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 808a 	beq.w	800279e <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800268a:	4a84      	ldr	r2, [pc, #528]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 800268c:	6813      	ldr	r3, [r2, #0]
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7ff f8fc 	bl	8001890 <HAL_GetTick>
 8002698:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269a:	4b80      	ldr	r3, [pc, #512]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f013 0f02 	tst.w	r3, #2
 80026a2:	d173      	bne.n	800278c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a4:	f7ff f8f4 	bl	8001890 <HAL_GetTick>
 80026a8:	1b40      	subs	r0, r0, r5
 80026aa:	2802      	cmp	r0, #2
 80026ac:	d9f5      	bls.n	800269a <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80026ae:	2003      	movs	r0, #3
 80026b0:	e1b5      	b.n	8002a1e <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b2:	4a7a      	ldr	r2, [pc, #488]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 80026b4:	6813      	ldr	r3, [r2, #0]
 80026b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026bc:	6863      	ldr	r3, [r4, #4]
 80026be:	b32b      	cbz	r3, 800270c <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80026c0:	f7ff f8e6 	bl	8001890 <HAL_GetTick>
 80026c4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c6:	4b75      	ldr	r3, [pc, #468]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80026ce:	d1c9      	bne.n	8002664 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d0:	f7ff f8de 	bl	8001890 <HAL_GetTick>
 80026d4:	1b40      	subs	r0, r0, r5
 80026d6:	2864      	cmp	r0, #100	; 0x64
 80026d8:	d9f5      	bls.n	80026c6 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80026da:	2003      	movs	r0, #3
 80026dc:	e19f      	b.n	8002a1e <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e2:	d009      	beq.n	80026f8 <HAL_RCC_OscConfig+0xfc>
 80026e4:	4b6d      	ldr	r3, [pc, #436]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e7e1      	b.n	80026bc <HAL_RCC_OscConfig+0xc0>
 80026f8:	4b68      	ldr	r3, [pc, #416]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	e7d7      	b.n	80026bc <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 800270c:	f7ff f8c0 	bl	8001890 <HAL_GetTick>
 8002710:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002712:	4b62      	ldr	r3, [pc, #392]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800271a:	d0a3      	beq.n	8002664 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800271c:	f7ff f8b8 	bl	8001890 <HAL_GetTick>
 8002720:	1b40      	subs	r0, r0, r5
 8002722:	2864      	cmp	r0, #100	; 0x64
 8002724:	d9f5      	bls.n	8002712 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8002726:	2003      	movs	r0, #3
 8002728:	e179      	b.n	8002a1e <HAL_RCC_OscConfig+0x422>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272a:	4b5c      	ldr	r3, [pc, #368]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002732:	d1a6      	bne.n	8002682 <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002734:	4b59      	ldr	r3, [pc, #356]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f013 0f02 	tst.w	r3, #2
 800273c:	d004      	beq.n	8002748 <HAL_RCC_OscConfig+0x14c>
 800273e:	68e3      	ldr	r3, [r4, #12]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d001      	beq.n	8002748 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8002744:	2001      	movs	r0, #1
 8002746:	e16a      	b.n	8002a1e <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002748:	4a54      	ldr	r2, [pc, #336]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 800274a:	6813      	ldr	r3, [r2, #0]
 800274c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002750:	6921      	ldr	r1, [r4, #16]
 8002752:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002756:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002758:	6823      	ldr	r3, [r4, #0]
 800275a:	f013 0f08 	tst.w	r3, #8
 800275e:	d046      	beq.n	80027ee <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002760:	6963      	ldr	r3, [r4, #20]
 8002762:	b383      	cbz	r3, 80027c6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002764:	4a4d      	ldr	r2, [pc, #308]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 8002766:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276e:	f7ff f88f 	bl	8001890 <HAL_GetTick>
 8002772:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002774:	4b49      	ldr	r3, [pc, #292]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 8002776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002778:	f013 0f02 	tst.w	r3, #2
 800277c:	d137      	bne.n	80027ee <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277e:	f7ff f887 	bl	8001890 <HAL_GetTick>
 8002782:	1b40      	subs	r0, r0, r5
 8002784:	2802      	cmp	r0, #2
 8002786:	d9f5      	bls.n	8002774 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8002788:	2003      	movs	r0, #3
 800278a:	e148      	b.n	8002a1e <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278c:	4a43      	ldr	r2, [pc, #268]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 800278e:	6813      	ldr	r3, [r2, #0]
 8002790:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002794:	6921      	ldr	r1, [r4, #16]
 8002796:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	e7dc      	b.n	8002758 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 800279e:	4a3f      	ldr	r2, [pc, #252]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 80027a0:	6813      	ldr	r3, [r2, #0]
 80027a2:	f023 0301 	bic.w	r3, r3, #1
 80027a6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80027a8:	f7ff f872 	bl	8001890 <HAL_GetTick>
 80027ac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ae:	4b3b      	ldr	r3, [pc, #236]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f013 0f02 	tst.w	r3, #2
 80027b6:	d0cf      	beq.n	8002758 <HAL_RCC_OscConfig+0x15c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b8:	f7ff f86a 	bl	8001890 <HAL_GetTick>
 80027bc:	1b40      	subs	r0, r0, r5
 80027be:	2802      	cmp	r0, #2
 80027c0:	d9f5      	bls.n	80027ae <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 80027c2:	2003      	movs	r0, #3
 80027c4:	e12b      	b.n	8002a1e <HAL_RCC_OscConfig+0x422>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c6:	4a35      	ldr	r2, [pc, #212]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 80027c8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80027ca:	f023 0301 	bic.w	r3, r3, #1
 80027ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7ff f85e 	bl	8001890 <HAL_GetTick>
 80027d4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d6:	4b31      	ldr	r3, [pc, #196]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 80027d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027da:	f013 0f02 	tst.w	r3, #2
 80027de:	d006      	beq.n	80027ee <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e0:	f7ff f856 	bl	8001890 <HAL_GetTick>
 80027e4:	1b40      	subs	r0, r0, r5
 80027e6:	2802      	cmp	r0, #2
 80027e8:	d9f5      	bls.n	80027d6 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 80027ea:	2003      	movs	r0, #3
 80027ec:	e117      	b.n	8002a1e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	f013 0f04 	tst.w	r3, #4
 80027f4:	d07e      	beq.n	80028f4 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f6:	4b29      	ldr	r3, [pc, #164]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80027fe:	d11e      	bne.n	800283e <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002800:	4b26      	ldr	r3, [pc, #152]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 8002802:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002804:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002808:	641a      	str	r2, [r3, #64]	; 0x40
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002814:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002816:	4b22      	ldr	r3, [pc, #136]	; (80028a0 <HAL_RCC_OscConfig+0x2a4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800281e:	d010      	beq.n	8002842 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002820:	68a3      	ldr	r3, [r4, #8]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d021      	beq.n	800286a <HAL_RCC_OscConfig+0x26e>
 8002826:	2b00      	cmp	r3, #0
 8002828:	d13c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x2a8>
 800282a:	4b1c      	ldr	r3, [pc, #112]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 800282c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800282e:	f022 0201 	bic.w	r2, r2, #1
 8002832:	671a      	str	r2, [r3, #112]	; 0x70
 8002834:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002836:	f022 0204 	bic.w	r2, r2, #4
 800283a:	671a      	str	r2, [r3, #112]	; 0x70
 800283c:	e01a      	b.n	8002874 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 800283e:	2500      	movs	r5, #0
 8002840:	e7e9      	b.n	8002816 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 8002842:	4a17      	ldr	r2, [pc, #92]	; (80028a0 <HAL_RCC_OscConfig+0x2a4>)
 8002844:	6813      	ldr	r3, [r2, #0]
 8002846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800284c:	f7ff f820 	bl	8001890 <HAL_GetTick>
 8002850:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002852:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <HAL_RCC_OscConfig+0x2a4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f413 7f80 	tst.w	r3, #256	; 0x100
 800285a:	d1e1      	bne.n	8002820 <HAL_RCC_OscConfig+0x224>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285c:	f7ff f818 	bl	8001890 <HAL_GetTick>
 8002860:	1b80      	subs	r0, r0, r6
 8002862:	2864      	cmp	r0, #100	; 0x64
 8002864:	d9f5      	bls.n	8002852 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8002866:	2003      	movs	r0, #3
 8002868:	e0d9      	b.n	8002a1e <HAL_RCC_OscConfig+0x422>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800286a:	4a0c      	ldr	r2, [pc, #48]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 800286c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002874:	68a3      	ldr	r3, [r4, #8]
 8002876:	b35b      	cbz	r3, 80028d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002878:	f7ff f80a 	bl	8001890 <HAL_GetTick>
 800287c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287e:	4b07      	ldr	r3, [pc, #28]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002882:	f013 0f02 	tst.w	r3, #2
 8002886:	d134      	bne.n	80028f2 <HAL_RCC_OscConfig+0x2f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002888:	f7ff f802 	bl	8001890 <HAL_GetTick>
 800288c:	1b80      	subs	r0, r0, r6
 800288e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002892:	4298      	cmp	r0, r3
 8002894:	d9f3      	bls.n	800287e <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8002896:	2003      	movs	r0, #3
 8002898:	e0c1      	b.n	8002a1e <HAL_RCC_OscConfig+0x422>
 800289a:	bf00      	nop
 800289c:	40023800 	.word	0x40023800
 80028a0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a4:	2b05      	cmp	r3, #5
 80028a6:	d009      	beq.n	80028bc <HAL_RCC_OscConfig+0x2c0>
 80028a8:	4b60      	ldr	r3, [pc, #384]	; (8002a2c <HAL_RCC_OscConfig+0x430>)
 80028aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028ac:	f022 0201 	bic.w	r2, r2, #1
 80028b0:	671a      	str	r2, [r3, #112]	; 0x70
 80028b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028b4:	f022 0204 	bic.w	r2, r2, #4
 80028b8:	671a      	str	r2, [r3, #112]	; 0x70
 80028ba:	e7db      	b.n	8002874 <HAL_RCC_OscConfig+0x278>
 80028bc:	4b5b      	ldr	r3, [pc, #364]	; (8002a2c <HAL_RCC_OscConfig+0x430>)
 80028be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028c0:	f042 0204 	orr.w	r2, r2, #4
 80028c4:	671a      	str	r2, [r3, #112]	; 0x70
 80028c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028c8:	f042 0201 	orr.w	r2, r2, #1
 80028cc:	671a      	str	r2, [r3, #112]	; 0x70
 80028ce:	e7d1      	b.n	8002874 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d0:	f7fe ffde 	bl	8001890 <HAL_GetTick>
 80028d4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d6:	4b55      	ldr	r3, [pc, #340]	; (8002a2c <HAL_RCC_OscConfig+0x430>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	f013 0f02 	tst.w	r3, #2
 80028de:	d008      	beq.n	80028f2 <HAL_RCC_OscConfig+0x2f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e0:	f7fe ffd6 	bl	8001890 <HAL_GetTick>
 80028e4:	1b80      	subs	r0, r0, r6
 80028e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80028ea:	4298      	cmp	r0, r3
 80028ec:	d9f3      	bls.n	80028d6 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 80028ee:	2003      	movs	r0, #3
 80028f0:	e095      	b.n	8002a1e <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028f2:	b9fd      	cbnz	r5, 8002934 <HAL_RCC_OscConfig+0x338>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f4:	69a3      	ldr	r3, [r4, #24]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 8090 	beq.w	8002a1c <HAL_RCC_OscConfig+0x420>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028fc:	4a4b      	ldr	r2, [pc, #300]	; (8002a2c <HAL_RCC_OscConfig+0x430>)
 80028fe:	6892      	ldr	r2, [r2, #8]
 8002900:	f002 020c 	and.w	r2, r2, #12
 8002904:	2a08      	cmp	r2, #8
 8002906:	d058      	beq.n	80029ba <HAL_RCC_OscConfig+0x3be>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002908:	2b02      	cmp	r3, #2
 800290a:	d019      	beq.n	8002940 <HAL_RCC_OscConfig+0x344>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290c:	4a47      	ldr	r2, [pc, #284]	; (8002a2c <HAL_RCC_OscConfig+0x430>)
 800290e:	6813      	ldr	r3, [r2, #0]
 8002910:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002916:	f7fe ffbb 	bl	8001890 <HAL_GetTick>
 800291a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291c:	4b43      	ldr	r3, [pc, #268]	; (8002a2c <HAL_RCC_OscConfig+0x430>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002924:	d047      	beq.n	80029b6 <HAL_RCC_OscConfig+0x3ba>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002926:	f7fe ffb3 	bl	8001890 <HAL_GetTick>
 800292a:	1b00      	subs	r0, r0, r4
 800292c:	2802      	cmp	r0, #2
 800292e:	d9f5      	bls.n	800291c <HAL_RCC_OscConfig+0x320>
          {
            return HAL_TIMEOUT;
 8002930:	2003      	movs	r0, #3
 8002932:	e074      	b.n	8002a1e <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002934:	4a3d      	ldr	r2, [pc, #244]	; (8002a2c <HAL_RCC_OscConfig+0x430>)
 8002936:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800293c:	6413      	str	r3, [r2, #64]	; 0x40
 800293e:	e7d9      	b.n	80028f4 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8002940:	4a3a      	ldr	r2, [pc, #232]	; (8002a2c <HAL_RCC_OscConfig+0x430>)
 8002942:	6813      	ldr	r3, [r2, #0]
 8002944:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002948:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800294a:	f7fe ffa1 	bl	8001890 <HAL_GetTick>
 800294e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002950:	4b36      	ldr	r3, [pc, #216]	; (8002a2c <HAL_RCC_OscConfig+0x430>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002958:	d006      	beq.n	8002968 <HAL_RCC_OscConfig+0x36c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295a:	f7fe ff99 	bl	8001890 <HAL_GetTick>
 800295e:	1b40      	subs	r0, r0, r5
 8002960:	2802      	cmp	r0, #2
 8002962:	d9f5      	bls.n	8002950 <HAL_RCC_OscConfig+0x354>
            return HAL_TIMEOUT;
 8002964:	2003      	movs	r0, #3
 8002966:	e05a      	b.n	8002a1e <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002968:	69e3      	ldr	r3, [r4, #28]
 800296a:	6a22      	ldr	r2, [r4, #32]
 800296c:	4313      	orrs	r3, r2
 800296e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002970:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002974:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002976:	0852      	lsrs	r2, r2, #1
 8002978:	3a01      	subs	r2, #1
 800297a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800297e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002980:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002984:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002988:	4a28      	ldr	r2, [pc, #160]	; (8002a2c <HAL_RCC_OscConfig+0x430>)
 800298a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800298c:	6813      	ldr	r3, [r2, #0]
 800298e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002992:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002994:	f7fe ff7c 	bl	8001890 <HAL_GetTick>
 8002998:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299a:	4b24      	ldr	r3, [pc, #144]	; (8002a2c <HAL_RCC_OscConfig+0x430>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80029a2:	d106      	bne.n	80029b2 <HAL_RCC_OscConfig+0x3b6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a4:	f7fe ff74 	bl	8001890 <HAL_GetTick>
 80029a8:	1b00      	subs	r0, r0, r4
 80029aa:	2802      	cmp	r0, #2
 80029ac:	d9f5      	bls.n	800299a <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 80029ae:	2003      	movs	r0, #3
 80029b0:	e035      	b.n	8002a1e <HAL_RCC_OscConfig+0x422>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80029b2:	2000      	movs	r0, #0
 80029b4:	e033      	b.n	8002a1e <HAL_RCC_OscConfig+0x422>
 80029b6:	2000      	movs	r0, #0
 80029b8:	e031      	b.n	8002a1e <HAL_RCC_OscConfig+0x422>
      pll_config = RCC->PLLCFGR;
 80029ba:	4a1c      	ldr	r2, [pc, #112]	; (8002a2c <HAL_RCC_OscConfig+0x430>)
 80029bc:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d02f      	beq.n	8002a22 <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c2:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80029c6:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c8:	428b      	cmp	r3, r1
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80029cc:	2001      	movs	r0, #1
 80029ce:	e026      	b.n	8002a1e <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029d0:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 80029d4:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d6:	428b      	cmp	r3, r1
 80029d8:	d001      	beq.n	80029de <HAL_RCC_OscConfig+0x3e2>
        return HAL_ERROR;
 80029da:	2001      	movs	r0, #1
 80029dc:	e01f      	b.n	8002a1e <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029de:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029e4:	4013      	ands	r3, r2
 80029e6:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80029ea:	d001      	beq.n	80029f0 <HAL_RCC_OscConfig+0x3f4>
        return HAL_ERROR;
 80029ec:	2001      	movs	r0, #1
 80029ee:	e016      	b.n	8002a1e <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029f0:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 80029f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80029f6:	085b      	lsrs	r3, r3, #1
 80029f8:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029fa:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 80029fe:	d001      	beq.n	8002a04 <HAL_RCC_OscConfig+0x408>
        return HAL_ERROR;
 8002a00:	2001      	movs	r0, #1
 8002a02:	e00c      	b.n	8002a1e <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a04:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8002a08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a0a:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 8002a0e:	d00a      	beq.n	8002a26 <HAL_RCC_OscConfig+0x42a>
        return HAL_ERROR;
 8002a10:	2001      	movs	r0, #1
 8002a12:	e004      	b.n	8002a1e <HAL_RCC_OscConfig+0x422>
    return HAL_ERROR;
 8002a14:	2001      	movs	r0, #1
}
 8002a16:	4770      	bx	lr
        return HAL_ERROR;
 8002a18:	2001      	movs	r0, #1
 8002a1a:	e000      	b.n	8002a1e <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 8002a1c:	2000      	movs	r0, #0
}
 8002a1e:	b002      	add	sp, #8
 8002a20:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002a22:	2001      	movs	r0, #1
 8002a24:	e7fb      	b.n	8002a1e <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 8002a26:	2000      	movs	r0, #0
 8002a28:	e7f9      	b.n	8002a1e <HAL_RCC_OscConfig+0x422>
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800

08002a30 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a30:	4b26      	ldr	r3, [pc, #152]	; (8002acc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 030c 	and.w	r3, r3, #12
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d044      	beq.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x96>
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a40:	4823      	ldr	r0, [pc, #140]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a42:	4770      	bx	lr
{
 8002a44:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a48:	4b20      	ldr	r3, [pc, #128]	; (8002acc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002a56:	d013      	beq.n	8002a80 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a58:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a5a:	6859      	ldr	r1, [r3, #4]
 8002a5c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002a60:	2300      	movs	r3, #0
 8002a62:	481c      	ldr	r0, [pc, #112]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a64:	fba1 0100 	umull	r0, r1, r1, r0
 8002a68:	f7fd fbce 	bl	8000208 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a6c:	4b17      	ldr	r3, [pc, #92]	; (8002acc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002a74:	3301      	adds	r3, #1
 8002a76:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002a78:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002a7c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a80:	4b12      	ldr	r3, [pc, #72]	; (8002acc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002a88:	461e      	mov	r6, r3
 8002a8a:	2700      	movs	r7, #0
 8002a8c:	015c      	lsls	r4, r3, #5
 8002a8e:	2500      	movs	r5, #0
 8002a90:	1ae4      	subs	r4, r4, r3
 8002a92:	eb65 0507 	sbc.w	r5, r5, r7
 8002a96:	01a9      	lsls	r1, r5, #6
 8002a98:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002a9c:	01a0      	lsls	r0, r4, #6
 8002a9e:	1b00      	subs	r0, r0, r4
 8002aa0:	eb61 0105 	sbc.w	r1, r1, r5
 8002aa4:	00cb      	lsls	r3, r1, #3
 8002aa6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002aaa:	00c4      	lsls	r4, r0, #3
 8002aac:	19a0      	adds	r0, r4, r6
 8002aae:	eb43 0107 	adc.w	r1, r3, r7
 8002ab2:	028b      	lsls	r3, r1, #10
 8002ab4:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002ab8:	0284      	lsls	r4, r0, #10
 8002aba:	4620      	mov	r0, r4
 8002abc:	4619      	mov	r1, r3
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f7fd fba2 	bl	8000208 <__aeabi_uldivmod>
 8002ac4:	e7d2      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8002ac6:	4803      	ldr	r0, [pc, #12]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	00f42400 	.word	0x00f42400
 8002ad4:	017d7840 	.word	0x017d7840

08002ad8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	f000 80a3 	beq.w	8002c24 <HAL_RCC_ClockConfig+0x14c>
{
 8002ade:	b570      	push	{r4, r5, r6, lr}
 8002ae0:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae2:	4b52      	ldr	r3, [pc, #328]	; (8002c2c <HAL_RCC_ClockConfig+0x154>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	428b      	cmp	r3, r1
 8002aec:	d20c      	bcs.n	8002b08 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4a4f      	ldr	r2, [pc, #316]	; (8002c2c <HAL_RCC_ClockConfig+0x154>)
 8002af0:	6813      	ldr	r3, [r2, #0]
 8002af2:	f023 030f 	bic.w	r3, r3, #15
 8002af6:	430b      	orrs	r3, r1
 8002af8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	6813      	ldr	r3, [r2, #0]
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	428b      	cmp	r3, r1
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8002b04:	2001      	movs	r0, #1
}
 8002b06:	bd70      	pop	{r4, r5, r6, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	6823      	ldr	r3, [r4, #0]
 8002b0a:	f013 0f02 	tst.w	r3, #2
 8002b0e:	d017      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b10:	f013 0f04 	tst.w	r3, #4
 8002b14:	d004      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b16:	4a46      	ldr	r2, [pc, #280]	; (8002c30 <HAL_RCC_ClockConfig+0x158>)
 8002b18:	6893      	ldr	r3, [r2, #8]
 8002b1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b1e:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b20:	6823      	ldr	r3, [r4, #0]
 8002b22:	f013 0f08 	tst.w	r3, #8
 8002b26:	d004      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b28:	4a41      	ldr	r2, [pc, #260]	; (8002c30 <HAL_RCC_ClockConfig+0x158>)
 8002b2a:	6893      	ldr	r3, [r2, #8]
 8002b2c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b30:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b32:	4a3f      	ldr	r2, [pc, #252]	; (8002c30 <HAL_RCC_ClockConfig+0x158>)
 8002b34:	6893      	ldr	r3, [r2, #8]
 8002b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b3a:	68a0      	ldr	r0, [r4, #8]
 8002b3c:	4303      	orrs	r3, r0
 8002b3e:	6093      	str	r3, [r2, #8]
 8002b40:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b42:	6823      	ldr	r3, [r4, #0]
 8002b44:	f013 0f01 	tst.w	r3, #1
 8002b48:	d031      	beq.n	8002bae <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4a:	6863      	ldr	r3, [r4, #4]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d020      	beq.n	8002b92 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d025      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b54:	4a36      	ldr	r2, [pc, #216]	; (8002c30 <HAL_RCC_ClockConfig+0x158>)
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	f012 0f02 	tst.w	r2, #2
 8002b5c:	d064      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b5e:	4934      	ldr	r1, [pc, #208]	; (8002c30 <HAL_RCC_ClockConfig+0x158>)
 8002b60:	688a      	ldr	r2, [r1, #8]
 8002b62:	f022 0203 	bic.w	r2, r2, #3
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002b6a:	f7fe fe91 	bl	8001890 <HAL_GetTick>
 8002b6e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b70:	4b2f      	ldr	r3, [pc, #188]	; (8002c30 <HAL_RCC_ClockConfig+0x158>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 030c 	and.w	r3, r3, #12
 8002b78:	6862      	ldr	r2, [r4, #4]
 8002b7a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002b7e:	d016      	beq.n	8002bae <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b80:	f7fe fe86 	bl	8001890 <HAL_GetTick>
 8002b84:	1b80      	subs	r0, r0, r6
 8002b86:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b8a:	4298      	cmp	r0, r3
 8002b8c:	d9f0      	bls.n	8002b70 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8002b8e:	2003      	movs	r0, #3
 8002b90:	e7b9      	b.n	8002b06 <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	4a27      	ldr	r2, [pc, #156]	; (8002c30 <HAL_RCC_ClockConfig+0x158>)
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002b9a:	d1e0      	bne.n	8002b5e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	e7b2      	b.n	8002b06 <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba0:	4a23      	ldr	r2, [pc, #140]	; (8002c30 <HAL_RCC_ClockConfig+0x158>)
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002ba8:	d1d9      	bne.n	8002b5e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002baa:	2001      	movs	r0, #1
 8002bac:	e7ab      	b.n	8002b06 <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bae:	4b1f      	ldr	r3, [pc, #124]	; (8002c2c <HAL_RCC_ClockConfig+0x154>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	42ab      	cmp	r3, r5
 8002bb8:	d90c      	bls.n	8002bd4 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4a1c      	ldr	r2, [pc, #112]	; (8002c2c <HAL_RCC_ClockConfig+0x154>)
 8002bbc:	6813      	ldr	r3, [r2, #0]
 8002bbe:	f023 030f 	bic.w	r3, r3, #15
 8002bc2:	432b      	orrs	r3, r5
 8002bc4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	6813      	ldr	r3, [r2, #0]
 8002bc8:	f003 030f 	and.w	r3, r3, #15
 8002bcc:	42ab      	cmp	r3, r5
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	e798      	b.n	8002b06 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd4:	6823      	ldr	r3, [r4, #0]
 8002bd6:	f013 0f04 	tst.w	r3, #4
 8002bda:	d006      	beq.n	8002bea <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bdc:	4a14      	ldr	r2, [pc, #80]	; (8002c30 <HAL_RCC_ClockConfig+0x158>)
 8002bde:	6893      	ldr	r3, [r2, #8]
 8002be0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002be4:	68e1      	ldr	r1, [r4, #12]
 8002be6:	430b      	orrs	r3, r1
 8002be8:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bea:	6823      	ldr	r3, [r4, #0]
 8002bec:	f013 0f08 	tst.w	r3, #8
 8002bf0:	d007      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bf2:	4a0f      	ldr	r2, [pc, #60]	; (8002c30 <HAL_RCC_ClockConfig+0x158>)
 8002bf4:	6893      	ldr	r3, [r2, #8]
 8002bf6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002bfa:	6921      	ldr	r1, [r4, #16]
 8002bfc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002c00:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c02:	f7ff ff15 	bl	8002a30 <HAL_RCC_GetSysClockFreq>
 8002c06:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <HAL_RCC_ClockConfig+0x158>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002c0e:	4a09      	ldr	r2, [pc, #36]	; (8002c34 <HAL_RCC_ClockConfig+0x15c>)
 8002c10:	5cd3      	ldrb	r3, [r2, r3]
 8002c12:	40d8      	lsrs	r0, r3
 8002c14:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <HAL_RCC_ClockConfig+0x160>)
 8002c16:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002c18:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <HAL_RCC_ClockConfig+0x164>)
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	f7fe fd86 	bl	800172c <HAL_InitTick>
  return HAL_OK;
 8002c20:	2000      	movs	r0, #0
 8002c22:	e770      	b.n	8002b06 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002c24:	2001      	movs	r0, #1
}
 8002c26:	4770      	bx	lr
        return HAL_ERROR;
 8002c28:	2001      	movs	r0, #1
 8002c2a:	e76c      	b.n	8002b06 <HAL_RCC_ClockConfig+0x2e>
 8002c2c:	40023c00 	.word	0x40023c00
 8002c30:	40023800 	.word	0x40023800
 8002c34:	08004a00 	.word	0x08004a00
 8002c38:	20000000 	.word	0x20000000
 8002c3c:	20000008 	.word	0x20000008

08002c40 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002c40:	4b01      	ldr	r3, [pc, #4]	; (8002c48 <HAL_RCC_GetHCLKFreq+0x8>)
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	20000000 	.word	0x20000000

08002c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c4c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c4e:	f7ff fff7 	bl	8002c40 <HAL_RCC_GetHCLKFreq>
 8002c52:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002c5a:	4a03      	ldr	r2, [pc, #12]	; (8002c68 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002c5c:	5cd3      	ldrb	r3, [r2, r3]
}
 8002c5e:	40d8      	lsrs	r0, r3
 8002c60:	bd08      	pop	{r3, pc}
 8002c62:	bf00      	nop
 8002c64:	40023800 	.word	0x40023800
 8002c68:	08004a10 	.word	0x08004a10

08002c6c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c6c:	230f      	movs	r3, #15
 8002c6e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c70:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <HAL_RCC_GetClockConfig+0x34>)
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	f002 0203 	and.w	r2, r2, #3
 8002c78:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002c80:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002c88:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	08db      	lsrs	r3, r3, #3
 8002c8e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002c92:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <HAL_RCC_GetClockConfig+0x38>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	600b      	str	r3, [r1, #0]
}
 8002c9e:	4770      	bx	lr
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40023c00 	.word	0x40023c00

08002ca8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002caa:	b083      	sub	sp, #12
 8002cac:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002cae:	6803      	ldr	r3, [r0, #0]
 8002cb0:	f013 0f01 	tst.w	r3, #1
 8002cb4:	d00c      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002cb6:	4bb6      	ldr	r3, [pc, #728]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002cc8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002cca:	b1c3      	cbz	r3, 8002cfe <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 8002ccc:	2600      	movs	r6, #0
 8002cce:	e000      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8002cd0:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002cd8:	d015      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cda:	4aad      	ldr	r2, [pc, #692]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cdc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002ce0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002ce4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002ce6:	430b      	orrs	r3, r1
 8002ce8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002cec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cf2:	d006      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 8129 	beq.w	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
  uint32_t pllsaiused = 0;
 8002cfa:	2500      	movs	r5, #0
 8002cfc:	e004      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8002cfe:	2601      	movs	r6, #1
 8002d00:	e7e7      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8002d02:	2601      	movs	r6, #1
 8002d04:	e7f6      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 8002d06:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002d0e:	d00f      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d10:	4a9f      	ldr	r2, [pc, #636]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d12:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002d16:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002d1a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d28:	f000 8112 	beq.w	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d2c:	b903      	cbnz	r3, 8002d30 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 8002d2e:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002d36:	d000      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
      plli2sused = 1;
 8002d38:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d3a:	f013 0f20 	tst.w	r3, #32
 8002d3e:	f040 8109 	bne.w	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	f013 0f10 	tst.w	r3, #16
 8002d48:	d00c      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d4a:	4b91      	ldr	r3, [pc, #580]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d50:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002d54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8002d58:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d5c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002d6a:	d008      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d6c:	4a88      	ldr	r2, [pc, #544]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d6e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002d72:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002d76:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d7e:	6823      	ldr	r3, [r4, #0]
 8002d80:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002d84:	d008      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d86:	4a82      	ldr	r2, [pc, #520]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d88:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002d8c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002d90:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002d92:	430b      	orrs	r3, r1
 8002d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d98:	6823      	ldr	r3, [r4, #0]
 8002d9a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002d9e:	d008      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002da0:	4a7b      	ldr	r2, [pc, #492]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002da2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002da6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002daa:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002dac:	430b      	orrs	r3, r1
 8002dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002db8:	d008      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002dba:	4a75      	ldr	r2, [pc, #468]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dbc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002dc0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002dc4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002dc6:	430b      	orrs	r3, r1
 8002dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002dd2:	d008      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dd4:	4a6e      	ldr	r2, [pc, #440]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dd6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002dda:	f023 0303 	bic.w	r3, r3, #3
 8002dde:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002de0:	430b      	orrs	r3, r1
 8002de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002de6:	6823      	ldr	r3, [r4, #0]
 8002de8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002dec:	d008      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dee:	4a68      	ldr	r2, [pc, #416]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002df0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002df4:	f023 030c 	bic.w	r3, r3, #12
 8002df8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002dfa:	430b      	orrs	r3, r1
 8002dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002e06:	d008      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e08:	4a61      	ldr	r2, [pc, #388]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e0a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002e0e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002e12:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002e14:	430b      	orrs	r3, r1
 8002e16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002e20:	d008      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e22:	4a5b      	ldr	r2, [pc, #364]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e24:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002e28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002e2c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e34:	6823      	ldr	r3, [r4, #0]
 8002e36:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002e3a:	d008      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e3c:	4a54      	ldr	r2, [pc, #336]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e3e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e46:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002e54:	d008      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e56:	4a4e      	ldr	r2, [pc, #312]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e58:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002e5c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002e60:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002e62:	430b      	orrs	r3, r1
 8002e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002e6e:	d008      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e70:	4a47      	ldr	r2, [pc, #284]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e72:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002e76:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e7a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e82:	6823      	ldr	r3, [r4, #0]
 8002e84:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002e88:	d008      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e8a:	4a41      	ldr	r2, [pc, #260]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e8c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002e90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e94:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002e96:	430b      	orrs	r3, r1
 8002e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002ea2:	d008      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ea4:	4a3a      	ldr	r2, [pc, #232]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ea6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002eaa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002eae:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002eb6:	6823      	ldr	r3, [r4, #0]
 8002eb8:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002ebc:	d00d      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ebe:	4a34      	ldr	r2, [pc, #208]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ec0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002ec4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002ec8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002eca:	430b      	orrs	r3, r1
 8002ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ed0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ed6:	f000 80a7 	beq.w	8003028 <HAL_RCCEx_PeriphCLKConfig+0x380>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	f013 0f08 	tst.w	r3, #8
 8002ee0:	d000      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    pllsaiused = 1;
 8002ee2:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ee4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002ee8:	d008      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eea:	4a29      	ldr	r2, [pc, #164]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002eec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002ef0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002ef4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002ef6:	430b      	orrs	r3, r1
 8002ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8002f02:	d009      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f04:	4a22      	ldr	r2, [pc, #136]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f06:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002f0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002f12:	430b      	orrs	r3, r1
 8002f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f18:	b926      	cbnz	r6, 8002f24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f20:	f000 8102 	beq.w	8003128 <HAL_RCCEx_PeriphCLKConfig+0x480>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f24:	4a1a      	ldr	r2, [pc, #104]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f26:	6813      	ldr	r3, [r2, #0]
 8002f28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f2e:	f7fe fcaf 	bl	8001890 <HAL_GetTick>
 8002f32:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f34:	4b16      	ldr	r3, [pc, #88]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002f3c:	d076      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x384>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f3e:	f7fe fca7 	bl	8001890 <HAL_GetTick>
 8002f42:	1b80      	subs	r0, r0, r6
 8002f44:	2864      	cmp	r0, #100	; 0x64
 8002f46:	d9f5      	bls.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f48:	2003      	movs	r0, #3
 8002f4a:	e0ef      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x484>
      pllsaiused = 1;
 8002f4c:	2501      	movs	r5, #1
 8002f4e:	e6db      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8002f50:	2601      	movs	r6, #1
 8002f52:	e6eb      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f54:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f58:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f64:	9301      	str	r3, [sp, #4]
 8002f66:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002f68:	4a0a      	ldr	r2, [pc, #40]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002f6a:	6813      	ldr	r3, [r2, #0]
 8002f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f70:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002f72:	f7fe fc8d 	bl	8001890 <HAL_GetTick>
 8002f76:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f80:	d10a      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f82:	f7fe fc85 	bl	8001890 <HAL_GetTick>
 8002f86:	1bc0      	subs	r0, r0, r7
 8002f88:	2864      	cmp	r0, #100	; 0x64
 8002f8a:	d9f5      	bls.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
        return HAL_TIMEOUT;
 8002f8c:	2003      	movs	r0, #3
 8002f8e:	e0cd      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002f90:	40023800 	.word	0x40023800
 8002f94:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f98:	4baa      	ldr	r3, [pc, #680]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f9c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002fa0:	d015      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x326>
 8002fa2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002fa4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d010      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x326>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fac:	4ba5      	ldr	r3, [pc, #660]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8002fae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fb0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fb4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002fb6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002fba:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fbc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002fbe:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002fc2:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002fc4:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc8:	f013 0f01 	tst.w	r3, #1
 8002fcc:	d112      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002fd0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002fd4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002fd8:	d01d      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002fda:	4a9a      	ldr	r2, [pc, #616]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8002fdc:	6893      	ldr	r3, [r2, #8]
 8002fde:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002fe2:	6093      	str	r3, [r2, #8]
 8002fe4:	4997      	ldr	r1, [pc, #604]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8002fe6:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8002fe8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002fea:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	670b      	str	r3, [r1, #112]	; 0x70
 8002ff2:	e6a6      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8002ff4:	f7fe fc4c 	bl	8001890 <HAL_GetTick>
 8002ff8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffa:	4b92      	ldr	r3, [pc, #584]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffe:	f013 0f02 	tst.w	r3, #2
 8003002:	d1e4      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x326>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003004:	f7fe fc44 	bl	8001890 <HAL_GetTick>
 8003008:	1bc0      	subs	r0, r0, r7
 800300a:	f241 3388 	movw	r3, #5000	; 0x1388
 800300e:	4298      	cmp	r0, r3
 8003010:	d9f3      	bls.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x352>
            return HAL_TIMEOUT;
 8003012:	2003      	movs	r0, #3
 8003014:	e08a      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x484>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003016:	488b      	ldr	r0, [pc, #556]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003018:	6882      	ldr	r2, [r0, #8]
 800301a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800301e:	498a      	ldr	r1, [pc, #552]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8003020:	4019      	ands	r1, r3
 8003022:	430a      	orrs	r2, r1
 8003024:	6082      	str	r2, [r0, #8]
 8003026:	e7dd      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      pllsaiused = 1;
 8003028:	2501      	movs	r5, #1
 800302a:	e756      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x232>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	f013 0f01 	tst.w	r3, #1
 8003032:	d013      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8003034:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003036:	b98b      	cbnz	r3, 800305c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003038:	4a82      	ldr	r2, [pc, #520]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800303a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800303e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003042:	6860      	ldr	r0, [r4, #4]
 8003044:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003048:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800304c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003050:	430b      	orrs	r3, r1
 8003052:	68a1      	ldr	r1, [r4, #8]
 8003054:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003058:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800305c:	6823      	ldr	r3, [r4, #0]
 800305e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003062:	d003      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003064:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003066:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800306a:	d006      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800306c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003070:	d01e      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003072:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003074:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003078:	d11a      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800307a:	4a72      	ldr	r2, [pc, #456]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800307c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003080:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003084:	6860      	ldr	r0, [r4, #4]
 8003086:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800308a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800308e:	68e0      	ldr	r0, [r4, #12]
 8003090:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003094:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003098:	430b      	orrs	r3, r1
 800309a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800309e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80030a2:	f023 031f 	bic.w	r3, r3, #31
 80030a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80030a8:	3901      	subs	r1, #1
 80030aa:	430b      	orrs	r3, r1
 80030ac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80030b6:	d011      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030b8:	4a62      	ldr	r2, [pc, #392]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80030ba:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030be:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030c2:	6866      	ldr	r6, [r4, #4]
 80030c4:	6923      	ldr	r3, [r4, #16]
 80030c6:	041b      	lsls	r3, r3, #16
 80030c8:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 80030cc:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80030d0:	4303      	orrs	r3, r0
 80030d2:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80030d6:	430b      	orrs	r3, r1
 80030d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80030e2:	d00d      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x458>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030e4:	6862      	ldr	r2, [r4, #4]
 80030e6:	6923      	ldr	r3, [r4, #16]
 80030e8:	041b      	lsls	r3, r3, #16
 80030ea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80030ee:	68e2      	ldr	r2, [r4, #12]
 80030f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80030f4:	68a2      	ldr	r2, [r4, #8]
 80030f6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80030fa:	4a52      	ldr	r2, [pc, #328]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80030fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003100:	4a50      	ldr	r2, [pc, #320]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003102:	6813      	ldr	r3, [r2, #0]
 8003104:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003108:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800310a:	f7fe fbc1 	bl	8001890 <HAL_GetTick>
 800310e:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003110:	4b4c      	ldr	r3, [pc, #304]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003118:	d106      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800311a:	f7fe fbb9 	bl	8001890 <HAL_GetTick>
 800311e:	1b80      	subs	r0, r0, r6
 8003120:	2864      	cmp	r0, #100	; 0x64
 8003122:	d9f5      	bls.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x468>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003124:	2003      	movs	r0, #3
 8003126:	e001      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x484>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003128:	b915      	cbnz	r5, 8003130 <HAL_RCCEx_PeriphCLKConfig+0x488>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800312a:	2000      	movs	r0, #0
}
 800312c:	b003      	add	sp, #12
 800312e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8003130:	4a44      	ldr	r2, [pc, #272]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003132:	6813      	ldr	r3, [r2, #0]
 8003134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003138:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800313a:	f7fe fba9 	bl	8001890 <HAL_GetTick>
 800313e:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003140:	4b40      	ldr	r3, [pc, #256]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003148:	d006      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800314a:	f7fe fba1 	bl	8001890 <HAL_GetTick>
 800314e:	1b40      	subs	r0, r0, r5
 8003150:	2864      	cmp	r0, #100	; 0x64
 8003152:	d9f5      	bls.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x498>
        return HAL_TIMEOUT;
 8003154:	2003      	movs	r0, #3
 8003156:	e7e9      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x484>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800315e:	d001      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003160:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003162:	b122      	cbz	r2, 800316e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003164:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003168:	d01d      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800316a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800316c:	b9db      	cbnz	r3, 80031a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800316e:	4a35      	ldr	r2, [pc, #212]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003170:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003174:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003178:	6960      	ldr	r0, [r4, #20]
 800317a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800317e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003182:	69a0      	ldr	r0, [r4, #24]
 8003184:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003188:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800318c:	430b      	orrs	r3, r1
 800318e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003192:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003196:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800319a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800319c:	3901      	subs	r1, #1
 800319e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80031a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80031ac:	d003      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 80031ae:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80031b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031b4:	d031      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x572>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	f013 0f08 	tst.w	r3, #8
 80031bc:	d019      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031be:	4a21      	ldr	r2, [pc, #132]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80031c0:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031c4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80031c8:	6960      	ldr	r0, [r4, #20]
 80031ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031ce:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80031d2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80031d6:	430b      	orrs	r3, r1
 80031d8:	69e1      	ldr	r1, [r4, #28]
 80031da:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80031de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80031e2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80031e6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80031ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80031ec:	430b      	orrs	r3, r1
 80031ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 80031f2:	4a14      	ldr	r2, [pc, #80]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80031f4:	6813      	ldr	r3, [r2, #0]
 80031f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fa:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80031fc:	f7fe fb48 	bl	8001890 <HAL_GetTick>
 8003200:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003202:	4b10      	ldr	r3, [pc, #64]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800320a:	d119      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x598>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800320c:	f7fe fb40 	bl	8001890 <HAL_GetTick>
 8003210:	1b00      	subs	r0, r0, r4
 8003212:	2864      	cmp	r0, #100	; 0x64
 8003214:	d9f5      	bls.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x55a>
        return HAL_TIMEOUT;
 8003216:	2003      	movs	r0, #3
 8003218:	e788      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x484>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800321a:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800321c:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003220:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003224:	6965      	ldr	r5, [r4, #20]
 8003226:	6a23      	ldr	r3, [r4, #32]
 8003228:	041b      	lsls	r3, r3, #16
 800322a:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800322e:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8003232:	4303      	orrs	r3, r0
 8003234:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003238:	430b      	orrs	r3, r1
 800323a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800323e:	e7ba      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  return HAL_OK;
 8003240:	2000      	movs	r0, #0
 8003242:	e773      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003244:	40023800 	.word	0x40023800
 8003248:	0ffffcff 	.word	0x0ffffcff

0800324c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800324c:	b538      	push	{r3, r4, r5, lr}
 800324e:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003250:	6802      	ldr	r2, [r0, #0]
 8003252:	68d3      	ldr	r3, [r2, #12]
 8003254:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003258:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800325a:	f7fe fb19 	bl	8001890 <HAL_GetTick>
 800325e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f013 0f20 	tst.w	r3, #32
 8003268:	d107      	bne.n	800327a <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800326a:	f7fe fb11 	bl	8001890 <HAL_GetTick>
 800326e:	1b40      	subs	r0, r0, r5
 8003270:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003274:	d9f4      	bls.n	8003260 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8003276:	2003      	movs	r0, #3
 8003278:	e000      	b.n	800327c <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 800327a:	2000      	movs	r0, #0
}
 800327c:	bd38      	pop	{r3, r4, r5, pc}

0800327e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800327e:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003280:	6803      	ldr	r3, [r0, #0]
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003288:	d001      	beq.n	800328e <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800328a:	2000      	movs	r0, #0
}
 800328c:	bd38      	pop	{r3, r4, r5, pc}
 800328e:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003290:	f04f 32ff 	mov.w	r2, #4294967295
 8003294:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003296:	f7fe fafb 	bl	8001890 <HAL_GetTick>
 800329a:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80032a4:	d107      	bne.n	80032b6 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80032a6:	f7fe faf3 	bl	8001890 <HAL_GetTick>
 80032aa:	1b40      	subs	r0, r0, r5
 80032ac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80032b0:	d9f4      	bls.n	800329c <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 80032b2:	2003      	movs	r0, #3
 80032b4:	e7ea      	b.n	800328c <RTC_EnterInitMode+0xe>
  return HAL_OK;
 80032b6:	2000      	movs	r0, #0
 80032b8:	e7e8      	b.n	800328c <RTC_EnterInitMode+0xe>
	...

080032bc <HAL_RTC_Init>:
{
 80032bc:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80032be:	2800      	cmp	r0, #0
 80032c0:	d05a      	beq.n	8003378 <HAL_RTC_Init+0xbc>
 80032c2:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80032c4:	7f43      	ldrb	r3, [r0, #29]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d03e      	beq.n	8003348 <HAL_RTC_Init+0x8c>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80032ca:	2302      	movs	r3, #2
 80032cc:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032ce:	6823      	ldr	r3, [r4, #0]
 80032d0:	22ca      	movs	r2, #202	; 0xca
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	2253      	movs	r2, #83	; 0x53
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80032da:	4620      	mov	r0, r4
 80032dc:	f7ff ffcf 	bl	800327e <RTC_EnterInitMode>
 80032e0:	4605      	mov	r5, r0
 80032e2:	2800      	cmp	r0, #0
 80032e4:	d134      	bne.n	8003350 <HAL_RTC_Init+0x94>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80032e6:	6822      	ldr	r2, [r4, #0]
 80032e8:	6891      	ldr	r1, [r2, #8]
 80032ea:	4b24      	ldr	r3, [pc, #144]	; (800337c <HAL_RTC_Init+0xc0>)
 80032ec:	400b      	ands	r3, r1
 80032ee:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80032f0:	6821      	ldr	r1, [r4, #0]
 80032f2:	688a      	ldr	r2, [r1, #8]
 80032f4:	6863      	ldr	r3, [r4, #4]
 80032f6:	6920      	ldr	r0, [r4, #16]
 80032f8:	4303      	orrs	r3, r0
 80032fa:	6960      	ldr	r0, [r4, #20]
 80032fc:	4303      	orrs	r3, r0
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	68e2      	ldr	r2, [r4, #12]
 8003306:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8003308:	6822      	ldr	r2, [r4, #0]
 800330a:	6913      	ldr	r3, [r2, #16]
 800330c:	68a1      	ldr	r1, [r4, #8]
 800330e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003312:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003314:	6822      	ldr	r2, [r4, #0]
 8003316:	68d3      	ldr	r3, [r2, #12]
 8003318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800331c:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f013 0f20 	tst.w	r3, #32
 8003326:	d01b      	beq.n	8003360 <HAL_RTC_Init+0xa4>
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8003328:	6822      	ldr	r2, [r4, #0]
 800332a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800332c:	f023 0308 	bic.w	r3, r3, #8
 8003330:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8003332:	6822      	ldr	r2, [r4, #0]
 8003334:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003336:	69a1      	ldr	r1, [r4, #24]
 8003338:	430b      	orrs	r3, r1
 800333a:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	22ff      	movs	r2, #255	; 0xff
 8003340:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8003342:	2301      	movs	r3, #1
 8003344:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8003346:	e009      	b.n	800335c <HAL_RTC_Init+0xa0>
    hrtc->Lock = HAL_UNLOCKED;
 8003348:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 800334a:	f7fe f98f 	bl	800166c <HAL_RTC_MspInit>
 800334e:	e7bc      	b.n	80032ca <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003350:	6823      	ldr	r3, [r4, #0]
 8003352:	22ff      	movs	r2, #255	; 0xff
 8003354:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003356:	2304      	movs	r3, #4
 8003358:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 800335a:	2501      	movs	r5, #1
}
 800335c:	4628      	mov	r0, r5
 800335e:	bd38      	pop	{r3, r4, r5, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003360:	4620      	mov	r0, r4
 8003362:	f7ff ff73 	bl	800324c <HAL_RTC_WaitForSynchro>
 8003366:	2800      	cmp	r0, #0
 8003368:	d0de      	beq.n	8003328 <HAL_RTC_Init+0x6c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	22ff      	movs	r2, #255	; 0xff
 800336e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003370:	2304      	movs	r3, #4
 8003372:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8003374:	2501      	movs	r5, #1
 8003376:	e7f1      	b.n	800335c <HAL_RTC_Init+0xa0>
     return HAL_ERROR;
 8003378:	2501      	movs	r5, #1
 800337a:	e7ef      	b.n	800335c <HAL_RTC_Init+0xa0>
 800337c:	ff8fffbf 	.word	0xff8fffbf

08003380 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8003380:	2300      	movs	r3, #0

  while(Value >= 10)
 8003382:	e002      	b.n	800338a <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8003384:	3301      	adds	r3, #1
    Value -= 10;
 8003386:	380a      	subs	r0, #10
 8003388:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 800338a:	2809      	cmp	r0, #9
 800338c:	d8fa      	bhi.n	8003384 <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	b2db      	uxtb	r3, r3
}
 8003392:	4318      	orrs	r0, r3
 8003394:	4770      	bx	lr
	...

08003398 <HAL_RTC_SetTime>:
{
 8003398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800339a:	7f03      	ldrb	r3, [r0, #28]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d076      	beq.n	800348e <HAL_RTC_SetTime+0xf6>
 80033a0:	460d      	mov	r5, r1
 80033a2:	4604      	mov	r4, r0
 80033a4:	2301      	movs	r3, #1
 80033a6:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80033a8:	2302      	movs	r3, #2
 80033aa:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 80033ac:	2a00      	cmp	r2, #0
 80033ae:	d144      	bne.n	800343a <HAL_RTC_SetTime+0xa2>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80033b0:	6803      	ldr	r3, [r0, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80033b8:	d101      	bne.n	80033be <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 80033ba:	2300      	movs	r3, #0
 80033bc:	730b      	strb	r3, [r1, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80033be:	7828      	ldrb	r0, [r5, #0]
 80033c0:	f7ff ffde 	bl	8003380 <RTC_ByteToBcd2>
 80033c4:	0406      	lsls	r6, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80033c6:	7868      	ldrb	r0, [r5, #1]
 80033c8:	f7ff ffda 	bl	8003380 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80033cc:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80033d0:	78a8      	ldrb	r0, [r5, #2]
 80033d2:	f7ff ffd5 	bl	8003380 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80033d6:	4306      	orrs	r6, r0
                        (((uint32_t)sTime->TimeFormat) << 16));
 80033d8:	7b28      	ldrb	r0, [r5, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80033da:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	22ca      	movs	r2, #202	; 0xca
 80033e2:	625a      	str	r2, [r3, #36]	; 0x24
 80033e4:	6823      	ldr	r3, [r4, #0]
 80033e6:	2253      	movs	r2, #83	; 0x53
 80033e8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80033ea:	4620      	mov	r0, r4
 80033ec:	f7ff ff47 	bl	800327e <RTC_EnterInitMode>
 80033f0:	4607      	mov	r7, r0
 80033f2:	2800      	cmp	r0, #0
 80033f4:	d133      	bne.n	800345e <HAL_RTC_SetTime+0xc6>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80033f6:	6822      	ldr	r2, [r4, #0]
 80033f8:	4b26      	ldr	r3, [pc, #152]	; (8003494 <HAL_RTC_SetTime+0xfc>)
 80033fa:	4033      	ands	r3, r6
 80033fc:	6013      	str	r3, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80033fe:	6822      	ldr	r2, [r4, #0]
 8003400:	6893      	ldr	r3, [r2, #8]
 8003402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003406:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003408:	6821      	ldr	r1, [r4, #0]
 800340a:	688b      	ldr	r3, [r1, #8]
 800340c:	692a      	ldr	r2, [r5, #16]
 800340e:	6968      	ldr	r0, [r5, #20]
 8003410:	4302      	orrs	r2, r0
 8003412:	4313      	orrs	r3, r2
 8003414:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003416:	6822      	ldr	r2, [r4, #0]
 8003418:	68d3      	ldr	r3, [r2, #12]
 800341a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800341e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f013 0f20 	tst.w	r3, #32
 8003428:	d023      	beq.n	8003472 <HAL_RTC_SetTime+0xda>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800342a:	6823      	ldr	r3, [r4, #0]
 800342c:	22ff      	movs	r2, #255	; 0xff
 800342e:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8003430:	2301      	movs	r3, #1
 8003432:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 8003434:	2300      	movs	r3, #0
 8003436:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8003438:	e019      	b.n	800346e <HAL_RTC_SetTime+0xd6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800343a:	6803      	ldr	r3, [r0, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003442:	d101      	bne.n	8003448 <HAL_RTC_SetTime+0xb0>
      sTime->TimeFormat = 0x00;
 8003444:	2300      	movs	r3, #0
 8003446:	730b      	strb	r3, [r1, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8003448:	7828      	ldrb	r0, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800344a:	786e      	ldrb	r6, [r5, #1]
 800344c:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800344e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8003452:	78a8      	ldrb	r0, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8003454:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16));
 8003456:	7b28      	ldrb	r0, [r5, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8003458:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800345c:	e7bf      	b.n	80033de <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800345e:	6823      	ldr	r3, [r4, #0]
 8003460:	22ff      	movs	r2, #255	; 0xff
 8003462:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003464:	2304      	movs	r3, #4
 8003466:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8003468:	2300      	movs	r3, #0
 800346a:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 800346c:	2701      	movs	r7, #1
}
 800346e:	4638      	mov	r0, r7
 8003470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003472:	4620      	mov	r0, r4
 8003474:	f7ff feea 	bl	800324c <HAL_RTC_WaitForSynchro>
 8003478:	2800      	cmp	r0, #0
 800347a:	d0d6      	beq.n	800342a <HAL_RTC_SetTime+0x92>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800347c:	6823      	ldr	r3, [r4, #0]
 800347e:	22ff      	movs	r2, #255	; 0xff
 8003480:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003482:	2304      	movs	r3, #4
 8003484:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8003486:	2300      	movs	r3, #0
 8003488:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 800348a:	2701      	movs	r7, #1
 800348c:	e7ef      	b.n	800346e <HAL_RTC_SetTime+0xd6>
  __HAL_LOCK(hrtc);
 800348e:	2702      	movs	r7, #2
 8003490:	e7ed      	b.n	800346e <HAL_RTC_SetTime+0xd6>
 8003492:	bf00      	nop
 8003494:	007f7f7f 	.word	0x007f7f7f

08003498 <HAL_RTC_SetDate>:
{
 8003498:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 800349a:	7f03      	ldrb	r3, [r0, #28]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d064      	beq.n	800356a <HAL_RTC_SetDate+0xd2>
 80034a0:	2301      	movs	r3, #1
 80034a2:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80034a4:	2302      	movs	r3, #2
 80034a6:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80034a8:	b93a      	cbnz	r2, 80034ba <HAL_RTC_SetDate+0x22>
 80034aa:	784b      	ldrb	r3, [r1, #1]
 80034ac:	f013 0f10 	tst.w	r3, #16
 80034b0:	d003      	beq.n	80034ba <HAL_RTC_SetDate+0x22>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80034b2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80034b6:	330a      	adds	r3, #10
 80034b8:	704b      	strb	r3, [r1, #1]
 80034ba:	460e      	mov	r6, r1
 80034bc:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 80034be:	2a00      	cmp	r2, #0
 80034c0:	d130      	bne.n	8003524 <HAL_RTC_SetDate+0x8c>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80034c2:	78c8      	ldrb	r0, [r1, #3]
 80034c4:	f7ff ff5c 	bl	8003380 <RTC_ByteToBcd2>
 80034c8:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80034ca:	7870      	ldrb	r0, [r6, #1]
 80034cc:	f7ff ff58 	bl	8003380 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80034d0:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80034d4:	78b0      	ldrb	r0, [r6, #2]
 80034d6:	f7ff ff53 	bl	8003380 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80034da:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13));
 80034dc:	7830      	ldrb	r0, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80034de:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	22ca      	movs	r2, #202	; 0xca
 80034e6:	625a      	str	r2, [r3, #36]	; 0x24
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	2253      	movs	r2, #83	; 0x53
 80034ec:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80034ee:	4620      	mov	r0, r4
 80034f0:	f7ff fec5 	bl	800327e <RTC_EnterInitMode>
 80034f4:	4606      	mov	r6, r0
 80034f6:	bb00      	cbnz	r0, 800353a <HAL_RTC_SetDate+0xa2>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80034f8:	6822      	ldr	r2, [r4, #0]
 80034fa:	4b1d      	ldr	r3, [pc, #116]	; (8003570 <HAL_RTC_SetDate+0xd8>)
 80034fc:	402b      	ands	r3, r5
 80034fe:	6053      	str	r3, [r2, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003500:	6822      	ldr	r2, [r4, #0]
 8003502:	68d3      	ldr	r3, [r2, #12]
 8003504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003508:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f013 0f20 	tst.w	r3, #32
 8003512:	d01c      	beq.n	800354e <HAL_RTC_SetDate+0xb6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003514:	6823      	ldr	r3, [r4, #0]
 8003516:	22ff      	movs	r2, #255	; 0xff
 8003518:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800351a:	2301      	movs	r3, #1
 800351c:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800351e:	2300      	movs	r3, #0
 8003520:	7723      	strb	r3, [r4, #28]
    return HAL_OK;
 8003522:	e012      	b.n	800354a <HAL_RTC_SetDate+0xb2>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003524:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 8003526:	784d      	ldrb	r5, [r1, #1]
 8003528:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800352a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
                  ((uint32_t)sDate->Date) | \
 800352e:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8003530:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));
 8003532:	7808      	ldrb	r0, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003534:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
 8003538:	e7d3      	b.n	80034e2 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	22ff      	movs	r2, #255	; 0xff
 800353e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003540:	2304      	movs	r3, #4
 8003542:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8003544:	2300      	movs	r3, #0
 8003546:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8003548:	2601      	movs	r6, #1
}
 800354a:	4630      	mov	r0, r6
 800354c:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800354e:	4620      	mov	r0, r4
 8003550:	f7ff fe7c 	bl	800324c <HAL_RTC_WaitForSynchro>
 8003554:	2800      	cmp	r0, #0
 8003556:	d0dd      	beq.n	8003514 <HAL_RTC_SetDate+0x7c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	22ff      	movs	r2, #255	; 0xff
 800355c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800355e:	2304      	movs	r3, #4
 8003560:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8003562:	2300      	movs	r3, #0
 8003564:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8003566:	2601      	movs	r6, #1
 8003568:	e7ef      	b.n	800354a <HAL_RTC_SetDate+0xb2>
 __HAL_LOCK(hrtc);
 800356a:	2602      	movs	r6, #2
 800356c:	e7ed      	b.n	800354a <HAL_RTC_SetDate+0xb2>
 800356e:	bf00      	nop
 8003570:	00ffff3f 	.word	0x00ffff3f

08003574 <HAL_RTC_SetAlarm>:
{
 8003574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8003576:	7f03      	ldrb	r3, [r0, #28]
 8003578:	2b01      	cmp	r3, #1
 800357a:	f000 80a9 	beq.w	80036d0 <HAL_RTC_SetAlarm+0x15c>
 800357e:	460d      	mov	r5, r1
 8003580:	4604      	mov	r4, r0
 8003582:	2301      	movs	r3, #1
 8003584:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003586:	2302      	movs	r3, #2
 8003588:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 800358a:	2a00      	cmp	r2, #0
 800358c:	d14d      	bne.n	800362a <HAL_RTC_SetAlarm+0xb6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800358e:	6803      	ldr	r3, [r0, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003596:	d101      	bne.n	800359c <HAL_RTC_SetAlarm+0x28>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8003598:	2300      	movs	r3, #0
 800359a:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 800359c:	6a2e      	ldr	r6, [r5, #32]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800359e:	7828      	ldrb	r0, [r5, #0]
 80035a0:	f7ff feee 	bl	8003380 <RTC_ByteToBcd2>
 80035a4:	0407      	lsls	r7, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80035a6:	7868      	ldrb	r0, [r5, #1]
 80035a8:	f7ff feea 	bl	8003380 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80035ac:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80035b0:	78a8      	ldrb	r0, [r5, #2]
 80035b2:	f7ff fee5 	bl	8003380 <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80035b6:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80035b8:	7b28      	ldrb	r0, [r5, #12]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80035ba:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80035be:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 80035c2:	f7ff fedd 	bl	8003380 <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80035c6:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80035ca:	4306      	orrs	r6, r0
              ((uint32_t)sAlarm->AlarmMask));
 80035cc:	69ab      	ldr	r3, [r5, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80035ce:	431e      	orrs	r6, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80035d0:	686f      	ldr	r7, [r5, #4]
 80035d2:	69eb      	ldr	r3, [r5, #28]
 80035d4:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	22ca      	movs	r2, #202	; 0xca
 80035da:	625a      	str	r2, [r3, #36]	; 0x24
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	2253      	movs	r2, #83	; 0x53
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 80035e2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80035e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e8:	d039      	beq.n	800365e <HAL_RTC_SetAlarm+0xea>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80035ea:	6822      	ldr	r2, [r4, #0]
 80035ec:	6893      	ldr	r3, [r2, #8]
 80035ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035f2:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80035f4:	6822      	ldr	r2, [r4, #0]
 80035f6:	6893      	ldr	r3, [r2, #8]
 80035f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035fc:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80035fe:	f7fe f947 	bl	8001890 <HAL_GetTick>
 8003602:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	f012 0f02 	tst.w	r2, #2
 800360c:	d150      	bne.n	80036b0 <HAL_RTC_SetAlarm+0x13c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800360e:	f7fe f93f 	bl	8001890 <HAL_GetTick>
 8003612:	1b40      	subs	r0, r0, r5
 8003614:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003618:	d9f4      	bls.n	8003604 <HAL_RTC_SetAlarm+0x90>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	22ff      	movs	r2, #255	; 0xff
 800361e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003620:	2003      	movs	r0, #3
 8003622:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8003624:	2300      	movs	r3, #0
 8003626:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8003628:	e051      	b.n	80036ce <HAL_RTC_SetAlarm+0x15a>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800362a:	6803      	ldr	r3, [r0, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003632:	d101      	bne.n	8003638 <HAL_RTC_SetAlarm+0xc4>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8003634:	2300      	movs	r3, #0
 8003636:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8003638:	6a2a      	ldr	r2, [r5, #32]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800363a:	7829      	ldrb	r1, [r5, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800363c:	786b      	ldrb	r3, [r5, #1]
 800363e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8003640:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003644:	78a9      	ldrb	r1, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8003646:	430b      	orrs	r3, r1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8003648:	7b29      	ldrb	r1, [r5, #12]
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800364a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800364e:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8003652:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8003656:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmMask));
 8003658:	69ae      	ldr	r6, [r5, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800365a:	431e      	orrs	r6, r3
 800365c:	e7b8      	b.n	80035d0 <HAL_RTC_SetAlarm+0x5c>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800365e:	6822      	ldr	r2, [r4, #0]
 8003660:	6893      	ldr	r3, [r2, #8]
 8003662:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003666:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003668:	6822      	ldr	r2, [r4, #0]
 800366a:	6893      	ldr	r3, [r2, #8]
 800366c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003670:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003672:	f7fe f90d 	bl	8001890 <HAL_GetTick>
 8003676:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	f012 0f01 	tst.w	r2, #1
 8003680:	d10d      	bne.n	800369e <HAL_RTC_SetAlarm+0x12a>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003682:	f7fe f905 	bl	8001890 <HAL_GetTick>
 8003686:	1b40      	subs	r0, r0, r5
 8003688:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800368c:	d9f4      	bls.n	8003678 <HAL_RTC_SetAlarm+0x104>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	22ff      	movs	r2, #255	; 0xff
 8003692:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003694:	2003      	movs	r0, #3
 8003696:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8003698:	2300      	movs	r3, #0
 800369a:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 800369c:	e017      	b.n	80036ce <HAL_RTC_SetAlarm+0x15a>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800369e:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80036a4:	6822      	ldr	r2, [r4, #0]
 80036a6:	6893      	ldr	r3, [r2, #8]
 80036a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ac:	6093      	str	r3, [r2, #8]
 80036ae:	e007      	b.n	80036c0 <HAL_RTC_SetAlarm+0x14c>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80036b0:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80036b6:	6822      	ldr	r2, [r4, #0]
 80036b8:	6893      	ldr	r3, [r2, #8]
 80036ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036be:	6093      	str	r3, [r2, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036c0:	6823      	ldr	r3, [r4, #0]
 80036c2:	22ff      	movs	r2, #255	; 0xff
 80036c4:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80036c6:	2301      	movs	r3, #1
 80036c8:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 80036ca:	2000      	movs	r0, #0
 80036cc:	7720      	strb	r0, [r4, #28]
}
 80036ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 80036d0:	2002      	movs	r0, #2
 80036d2:	e7fc      	b.n	80036ce <HAL_RTC_SetAlarm+0x15a>

080036d4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80036d4:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036d6:	7f04      	ldrb	r4, [r0, #28]
 80036d8:	2c01      	cmp	r4, #1
 80036da:	d027      	beq.n	800372c <HAL_RTCEx_SetTimeStamp+0x58>
 80036dc:	2401      	movs	r4, #1
 80036de:	7704      	strb	r4, [r0, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036e0:	2302      	movs	r3, #2
 80036e2:	7743      	strb	r3, [r0, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80036e4:	6805      	ldr	r5, [r0, #0]
 80036e6:	68ae      	ldr	r6, [r5, #8]
 80036e8:	f6a3 030b 	subw	r3, r3, #2059	; 0x80b
 80036ec:	4033      	ands	r3, r6

  tmpreg|= TimeStampEdge;
 80036ee:	4319      	orrs	r1, r3

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036f0:	23ca      	movs	r3, #202	; 0xca
 80036f2:	626b      	str	r3, [r5, #36]	; 0x24
 80036f4:	6803      	ldr	r3, [r0, #0]
 80036f6:	2553      	movs	r5, #83	; 0x53
 80036f8:	625d      	str	r5, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80036fa:	6805      	ldr	r5, [r0, #0]
 80036fc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80036fe:	f023 0306 	bic.w	r3, r3, #6
 8003702:	64eb      	str	r3, [r5, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8003704:	6805      	ldr	r5, [r0, #0]
 8003706:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003708:	431a      	orrs	r2, r3
 800370a:	64ea      	str	r2, [r5, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800370c:	6803      	ldr	r3, [r0, #0]
 800370e:	6099      	str	r1, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8003710:	6802      	ldr	r2, [r0, #0]
 8003712:	6893      	ldr	r3, [r2, #8]
 8003714:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003718:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800371a:	6803      	ldr	r3, [r0, #0]
 800371c:	22ff      	movs	r2, #255	; 0xff
 800371e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003720:	7744      	strb	r4, [r0, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003722:	2300      	movs	r3, #0
 8003724:	7703      	strb	r3, [r0, #28]

  return HAL_OK;
 8003726:	4618      	mov	r0, r3
}
 8003728:	bc70      	pop	{r4, r5, r6}
 800372a:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800372c:	2002      	movs	r0, #2
 800372e:	e7fb      	b.n	8003728 <HAL_RTCEx_SetTimeStamp+0x54>

08003730 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800373a:	6800      	ldr	r0, [r0, #0]
 800373c:	f001 f85a 	bl	80047f4 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003740:	4606      	mov	r6, r0
 8003742:	b110      	cbz	r0, 800374a <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 8003744:	4630      	mov	r0, r6
 8003746:	b002      	add	sp, #8
 8003748:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800374a:	6820      	ldr	r0, [r4, #0]
 800374c:	f001 f865 	bl	800481a <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003750:	b938      	cbnz	r0, 8003762 <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003752:	2301      	movs	r3, #1
 8003754:	64a3      	str	r3, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003756:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003758:	2b01      	cmp	r3, #1
 800375a:	d00b      	beq.n	8003774 <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800375c:	4635      	mov	r5, r6
 800375e:	4630      	mov	r0, r6
 8003760:	e014      	b.n	800378c <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003762:	2300      	movs	r3, #0
 8003764:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003766:	6820      	ldr	r0, [r4, #0]
 8003768:	f001 f844 	bl	80047f4 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800376c:	2800      	cmp	r0, #0
 800376e:	d0f2      	beq.n	8003756 <SD_PowerON+0x26>
      return errorstate;
 8003770:	4606      	mov	r6, r0
 8003772:	e7e7      	b.n	8003744 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003774:	2100      	movs	r1, #0
 8003776:	6820      	ldr	r0, [r4, #0]
 8003778:	f001 f866 	bl	8004848 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800377c:	2800      	cmp	r0, #0
 800377e:	d0ed      	beq.n	800375c <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003780:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8003784:	e7de      	b.n	8003744 <SD_PowerON+0x14>
    count++;
 8003786:	9b01      	ldr	r3, [sp, #4]
 8003788:	3301      	adds	r3, #1
 800378a:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800378c:	9a01      	ldr	r2, [sp, #4]
 800378e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003792:	429a      	cmp	r2, r3
 8003794:	d813      	bhi.n	80037be <SD_PowerON+0x8e>
 8003796:	b995      	cbnz	r5, 80037be <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003798:	2100      	movs	r1, #0
 800379a:	6820      	ldr	r0, [r4, #0]
 800379c:	f001 f854 	bl	8004848 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80037a0:	b9d8      	cbnz	r0, 80037da <SD_PowerON+0xaa>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80037a2:	4912      	ldr	r1, [pc, #72]	; (80037ec <SD_PowerON+0xbc>)
 80037a4:	6820      	ldr	r0, [r4, #0]
 80037a6:	f001 f867 	bl	8004878 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80037aa:	4605      	mov	r5, r0
 80037ac:	b9b8      	cbnz	r0, 80037de <SD_PowerON+0xae>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80037ae:	2100      	movs	r1, #0
 80037b0:	6820      	ldr	r0, [r4, #0]
 80037b2:	f000 fedc 	bl	800456e <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80037b6:	0fc3      	lsrs	r3, r0, #31
 80037b8:	d0e5      	beq.n	8003786 <SD_PowerON+0x56>
 80037ba:	461d      	mov	r5, r3
 80037bc:	e7e3      	b.n	8003786 <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80037be:	9a01      	ldr	r2, [sp, #4]
 80037c0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d80d      	bhi.n	80037e4 <SD_PowerON+0xb4>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80037c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80037cc:	d102      	bne.n	80037d4 <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDSC;
 80037ce:	2300      	movs	r3, #0
 80037d0:	6463      	str	r3, [r4, #68]	; 0x44
 80037d2:	e7b7      	b.n	8003744 <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80037d4:	2301      	movs	r3, #1
 80037d6:	6463      	str	r3, [r4, #68]	; 0x44
 80037d8:	e7b4      	b.n	8003744 <SD_PowerON+0x14>
      return errorstate;
 80037da:	4606      	mov	r6, r0
 80037dc:	e7b2      	b.n	8003744 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037de:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80037e2:	e7af      	b.n	8003744 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80037e4:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 80037e8:	e7ac      	b.n	8003744 <SD_PowerON+0x14>
 80037ea:	bf00      	nop
 80037ec:	c1100000 	.word	0xc1100000

080037f0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80037f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037f4:	b088      	sub	sp, #32
 80037f6:	4604      	mov	r4, r0
 80037f8:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80037fa:	f7fe f849 	bl	8001890 <HAL_GetTick>
 80037fe:	4606      	mov	r6, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8003800:	2300      	movs	r3, #0
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003806:	2108      	movs	r1, #8
 8003808:	6820      	ldr	r0, [r4, #0]
 800380a:	f000 ffc3 	bl	8004794 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800380e:	4605      	mov	r5, r0
 8003810:	b118      	cbz	r0, 800381a <SD_FindSCR+0x2a>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8003812:	4628      	mov	r0, r5
 8003814:	b008      	add	sp, #32
 8003816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800381a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800381c:	0409      	lsls	r1, r1, #16
 800381e:	6820      	ldr	r0, [r4, #0]
 8003820:	f001 f812 	bl	8004848 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003824:	4605      	mov	r5, r0
 8003826:	2800      	cmp	r0, #0
 8003828:	d1f3      	bne.n	8003812 <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800382a:	f04f 33ff 	mov.w	r3, #4294967295
 800382e:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8003830:	2308      	movs	r3, #8
 8003832:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8003834:	2330      	movs	r3, #48	; 0x30
 8003836:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003838:	2302      	movs	r3, #2
 800383a:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800383c:	2300      	movs	r3, #0
 800383e:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8003840:	2301      	movs	r3, #1
 8003842:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003844:	a902      	add	r1, sp, #8
 8003846:	6820      	ldr	r0, [r4, #0]
 8003848:	f000 ff92 	bl	8004770 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800384c:	6820      	ldr	r0, [r4, #0]
 800384e:	f001 f845 	bl	80048dc <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003852:	4605      	mov	r5, r0
 8003854:	2800      	cmp	r0, #0
 8003856:	d1dc      	bne.n	8003812 <SD_FindSCR+0x22>
  uint32_t index = 0U;
 8003858:	4680      	mov	r8, r0
 800385a:	e00b      	b.n	8003874 <SD_FindSCR+0x84>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800385c:	f000 fe62 	bl	8004524 <SDMMC_ReadFIFO>
 8003860:	f84d 0028 	str.w	r0, [sp, r8, lsl #2]
      index++;
 8003864:	f108 0801 	add.w	r8, r8, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003868:	f7fe f812 	bl	8001890 <HAL_GetTick>
 800386c:	1b80      	subs	r0, r0, r6
 800386e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003872:	d03f      	beq.n	80038f4 <SD_FindSCR+0x104>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8003874:	6820      	ldr	r0, [r4, #0]
 8003876:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003878:	f013 0f2a 	tst.w	r3, #42	; 0x2a
 800387c:	d107      	bne.n	800388e <SD_FindSCR+0x9e>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800387e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003880:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003884:	d1ea      	bne.n	800385c <SD_FindSCR+0x6c>
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8003886:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003888:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800388c:	d1ec      	bne.n	8003868 <SD_FindSCR+0x78>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800388e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003890:	f013 0f08 	tst.w	r3, #8
 8003894:	d125      	bne.n	80038e2 <SD_FindSCR+0xf2>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003896:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003898:	f013 0f02 	tst.w	r3, #2
 800389c:	d124      	bne.n	80038e8 <SD_FindSCR+0xf8>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800389e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80038a0:	f013 0f20 	tst.w	r3, #32
 80038a4:	d123      	bne.n	80038ee <SD_FindSCR+0xfe>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80038a6:	f240 533a 	movw	r3, #1338	; 0x53a
 80038aa:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80038ac:	9a01      	ldr	r2, [sp, #4]
 80038ae:	0213      	lsls	r3, r2, #8
 80038b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80038b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80038b8:	0a11      	lsrs	r1, r2, #8
 80038ba:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80038be:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80038c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80038c4:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80038c6:	9a00      	ldr	r2, [sp, #0]
 80038c8:	0213      	lsls	r3, r2, #8
 80038ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80038ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80038d2:	0a11      	lsrs	r1, r2, #8
 80038d4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80038d8:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80038da:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80038de:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 80038e0:	e797      	b.n	8003812 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80038e2:	2508      	movs	r5, #8
 80038e4:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80038e6:	e794      	b.n	8003812 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80038e8:	2502      	movs	r5, #2
 80038ea:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80038ec:	e791      	b.n	8003812 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80038ee:	2520      	movs	r5, #32
 80038f0:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 80038f2:	e78e      	b.n	8003812 <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 80038f4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80038f8:	e78b      	b.n	8003812 <SD_FindSCR+0x22>

080038fa <SD_WideBus_Enable>:
{
 80038fa:	b510      	push	{r4, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8003900:	2100      	movs	r1, #0
 8003902:	9100      	str	r1, [sp, #0]
 8003904:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003906:	6800      	ldr	r0, [r0, #0]
 8003908:	f000 fe31 	bl	800456e <SDMMC_GetResponse>
 800390c:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8003910:	d116      	bne.n	8003940 <SD_WideBus_Enable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8003912:	4669      	mov	r1, sp
 8003914:	4620      	mov	r0, r4
 8003916:	f7ff ff6b 	bl	80037f0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800391a:	4603      	mov	r3, r0
 800391c:	b990      	cbnz	r0, 8003944 <SD_WideBus_Enable+0x4a>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800391e:	9b01      	ldr	r3, [sp, #4]
 8003920:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003924:	d011      	beq.n	800394a <SD_WideBus_Enable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003926:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003928:	0409      	lsls	r1, r1, #16
 800392a:	6820      	ldr	r0, [r4, #0]
 800392c:	f000 ff8c 	bl	8004848 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003930:	4603      	mov	r3, r0
 8003932:	b938      	cbnz	r0, 8003944 <SD_WideBus_Enable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003934:	2102      	movs	r1, #2
 8003936:	6820      	ldr	r0, [r4, #0]
 8003938:	f000 ffb8 	bl	80048ac <SDMMC_CmdBusWidth>
 800393c:	4603      	mov	r3, r0
 800393e:	e001      	b.n	8003944 <SD_WideBus_Enable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003940:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8003944:	4618      	mov	r0, r3
 8003946:	b002      	add	sp, #8
 8003948:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800394a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800394e:	e7f9      	b.n	8003944 <SD_WideBus_Enable+0x4a>

08003950 <SD_WideBus_Disable>:
{
 8003950:	b510      	push	{r4, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8003956:	2100      	movs	r1, #0
 8003958:	9100      	str	r1, [sp, #0]
 800395a:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800395c:	6800      	ldr	r0, [r0, #0]
 800395e:	f000 fe06 	bl	800456e <SDMMC_GetResponse>
 8003962:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8003966:	d116      	bne.n	8003996 <SD_WideBus_Disable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8003968:	4669      	mov	r1, sp
 800396a:	4620      	mov	r0, r4
 800396c:	f7ff ff40 	bl	80037f0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003970:	4603      	mov	r3, r0
 8003972:	b990      	cbnz	r0, 800399a <SD_WideBus_Disable+0x4a>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003974:	9b01      	ldr	r3, [sp, #4]
 8003976:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800397a:	d011      	beq.n	80039a0 <SD_WideBus_Disable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800397c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800397e:	0409      	lsls	r1, r1, #16
 8003980:	6820      	ldr	r0, [r4, #0]
 8003982:	f000 ff61 	bl	8004848 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003986:	4603      	mov	r3, r0
 8003988:	b938      	cbnz	r0, 800399a <SD_WideBus_Disable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800398a:	2100      	movs	r1, #0
 800398c:	6820      	ldr	r0, [r4, #0]
 800398e:	f000 ff8d 	bl	80048ac <SDMMC_CmdBusWidth>
 8003992:	4603      	mov	r3, r0
 8003994:	e001      	b.n	800399a <SD_WideBus_Disable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003996:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 800399a:	4618      	mov	r0, r3
 800399c:	b002      	add	sp, #8
 800399e:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80039a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80039a4:	e7f9      	b.n	800399a <SD_WideBus_Disable+0x4a>
	...

080039a8 <HAL_SD_GetCardCSD>:
{
 80039a8:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80039aa:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80039ac:	0f9b      	lsrs	r3, r3, #30
 80039ae:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80039b0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80039b2:	f3c3 6383 	ubfx	r3, r3, #26, #4
 80039b6:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80039b8:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80039c2:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 80039c6:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80039c8:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 80039cc:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80039ce:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 80039d2:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80039d4:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80039d6:	0d1b      	lsrs	r3, r3, #20
 80039d8:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80039da:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80039e4:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80039e6:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80039ea:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80039ec:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80039ee:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80039f2:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80039f4:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80039f6:	f3c3 3340 	ubfx	r3, r3, #13, #1
 80039fa:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80039fc:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80039fe:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8003a02:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003a04:	2300      	movs	r3, #0
 8003a06:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8003a08:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f040 8088 	bne.w	8003b20 <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003a10:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8003a12:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a16:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 8003a1a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8003a1c:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8003a20:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003a22:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003a24:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 8003a28:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003a2a:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003a34:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003a36:	f3c3 5342 	ubfx	r3, r3, #21, #3
 8003a3a:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003a3c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003a3e:	f3c3 4382 	ubfx	r3, r3, #18, #3
 8003a42:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003a44:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003a46:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 8003a4a:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003a4c:	690b      	ldr	r3, [r1, #16]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003a52:	7e0a      	ldrb	r2, [r1, #24]
 8003a54:	f002 0207 	and.w	r2, r2, #7
 8003a58:	3202      	adds	r2, #2
 8003a5a:	fa03 f202 	lsl.w	r2, r3, r2
 8003a5e:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003a60:	7a0b      	ldrb	r3, [r1, #8]
 8003a62:	f003 040f 	and.w	r4, r3, #15
 8003a66:	2301      	movs	r3, #1
 8003a68:	40a3      	lsls	r3, r4
 8003a6a:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003a6c:	0a5b      	lsrs	r3, r3, #9
 8003a6e:	fb03 f302 	mul.w	r3, r3, r2
 8003a72:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a78:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003a7a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003a7c:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8003a80:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003a82:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003a84:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8003a88:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003a8a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a90:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003a92:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003a94:	0fdb      	lsrs	r3, r3, #31
 8003a96:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003a98:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003a9a:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8003a9e:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003aa0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003aa2:	f3c3 6382 	ubfx	r3, r3, #26, #3
 8003aa6:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003aa8:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003aaa:	f3c3 5383 	ubfx	r3, r3, #22, #4
 8003aae:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003ab0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003ab2:	f3c3 5340 	ubfx	r3, r3, #21, #1
 8003ab6:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 8003aba:	2300      	movs	r3, #0
 8003abc:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003ac0:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
 8003ac4:	f002 0201 	and.w	r2, r2, #1
 8003ac8:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003acc:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003ace:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8003ad2:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003ad6:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003ad8:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8003adc:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003ae0:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003ae2:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8003ae6:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003aea:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003aec:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8003af0:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003af4:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003af6:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8003afa:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003afe:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003b00:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8003b04:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003b08:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003b0a:	f3c2 0246 	ubfx	r2, r2, #1, #7
 8003b0e:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8003b12:	2201      	movs	r2, #1
 8003b14:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 8003b18:	4618      	mov	r0, r3
}
 8003b1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b1e:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d00b      	beq.n	8003b3c <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b24:	6803      	ldr	r3, [r0, #0]
 8003b26:	4a0e      	ldr	r2, [pc, #56]	; (8003b60 <HAL_SD_GetCardCSD+0x1b8>)
 8003b28:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b2a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b30:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003b32:	2301      	movs	r3, #1
 8003b34:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8003b38:	4618      	mov	r0, r3
 8003b3a:	e7ee      	b.n	8003b1a <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003b3c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003b3e:	041b      	lsls	r3, r3, #16
 8003b40:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003b44:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003b4c:	690b      	ldr	r3, [r1, #16]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	029b      	lsls	r3, r3, #10
 8003b52:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003b54:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003b56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b5a:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003b5c:	6603      	str	r3, [r0, #96]	; 0x60
 8003b5e:	e78c      	b.n	8003a7a <HAL_SD_GetCardCSD+0xd2>
 8003b60:	004005ff 	.word	0x004005ff

08003b64 <SD_InitCard>:
{
 8003b64:	b570      	push	{r4, r5, r6, lr}
 8003b66:	b090      	sub	sp, #64	; 0x40
 8003b68:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003b70:	6800      	ldr	r0, [r0, #0]
 8003b72:	f000 fce2 	bl	800453a <SDMMC_GetPowerState>
 8003b76:	2800      	cmp	r0, #0
 8003b78:	d06c      	beq.n	8003c54 <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d145      	bne.n	8003c0c <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d15d      	bne.n	8003c42 <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d01d      	beq.n	8003bc8 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 8003b8c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8003b90:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003b92:	0409      	lsls	r1, r1, #16
 8003b94:	6820      	ldr	r0, [r4, #0]
 8003b96:	f000 fece 	bl	8004936 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b9a:	4605      	mov	r5, r0
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	d15b      	bne.n	8003c58 <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	6820      	ldr	r0, [r4, #0]
 8003ba4:	f000 fce3 	bl	800456e <SDMMC_GetResponse>
 8003ba8:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003baa:	2104      	movs	r1, #4
 8003bac:	6820      	ldr	r0, [r4, #0]
 8003bae:	f000 fcde 	bl	800456e <SDMMC_GetResponse>
 8003bb2:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003bb4:	2108      	movs	r1, #8
 8003bb6:	6820      	ldr	r0, [r4, #0]
 8003bb8:	f000 fcd9 	bl	800456e <SDMMC_GetResponse>
 8003bbc:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003bbe:	210c      	movs	r1, #12
 8003bc0:	6820      	ldr	r0, [r4, #0]
 8003bc2:	f000 fcd4 	bl	800456e <SDMMC_GetResponse>
 8003bc6:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003bc8:	2104      	movs	r1, #4
 8003bca:	6820      	ldr	r0, [r4, #0]
 8003bcc:	f000 fccf 	bl	800456e <SDMMC_GetResponse>
 8003bd0:	0d00      	lsrs	r0, r0, #20
 8003bd2:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003bd4:	a905      	add	r1, sp, #20
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f7ff fee6 	bl	80039a8 <HAL_SD_GetCardCSD>
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	d13e      	bne.n	8003c5e <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003be0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003be2:	0412      	lsls	r2, r2, #16
 8003be4:	2300      	movs	r3, #0
 8003be6:	6820      	ldr	r0, [r4, #0]
 8003be8:	f000 fdec 	bl	80047c4 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bec:	4605      	mov	r5, r0
 8003bee:	bb98      	cbnz	r0, 8003c58 <SD_InitCard+0xf4>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8003bf0:	4623      	mov	r3, r4
 8003bf2:	f853 6b10 	ldr.w	r6, [r3], #16
 8003bf6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003bfa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003bfe:	3404      	adds	r4, #4
 8003c00:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003c04:	4630      	mov	r0, r6
 8003c06:	f000 fc71 	bl	80044ec <SDMMC_Init>
  return HAL_SD_ERROR_NONE;
 8003c0a:	e025      	b.n	8003c58 <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003c0c:	6820      	ldr	r0, [r4, #0]
 8003c0e:	f000 fe7d 	bl	800490c <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c12:	4605      	mov	r5, r0
 8003c14:	bb00      	cbnz	r0, 8003c58 <SD_InitCard+0xf4>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003c16:	2100      	movs	r1, #0
 8003c18:	6820      	ldr	r0, [r4, #0]
 8003c1a:	f000 fca8 	bl	800456e <SDMMC_GetResponse>
 8003c1e:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003c20:	2104      	movs	r1, #4
 8003c22:	6820      	ldr	r0, [r4, #0]
 8003c24:	f000 fca3 	bl	800456e <SDMMC_GetResponse>
 8003c28:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003c2a:	2108      	movs	r1, #8
 8003c2c:	6820      	ldr	r0, [r4, #0]
 8003c2e:	f000 fc9e 	bl	800456e <SDMMC_GetResponse>
 8003c32:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003c34:	210c      	movs	r1, #12
 8003c36:	6820      	ldr	r0, [r4, #0]
 8003c38:	f000 fc99 	bl	800456e <SDMMC_GetResponse>
 8003c3c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 8003c40:	e79e      	b.n	8003b80 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003c42:	f10d 0112 	add.w	r1, sp, #18
 8003c46:	6820      	ldr	r0, [r4, #0]
 8003c48:	f000 fe8a 	bl	8004960 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c4c:	4605      	mov	r5, r0
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	d099      	beq.n	8003b86 <SD_InitCard+0x22>
 8003c52:	e001      	b.n	8003c58 <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003c54:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8003c58:	4628      	mov	r0, r5
 8003c5a:	b010      	add	sp, #64	; 0x40
 8003c5c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c5e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003c62:	e7f9      	b.n	8003c58 <SD_InitCard+0xf4>

08003c64 <HAL_SD_InitCard>:
{
 8003c64:	b530      	push	{r4, r5, lr}
 8003c66:	b08b      	sub	sp, #44	; 0x2c
 8003c68:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003c6e:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003c70:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003c72:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003c74:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003c76:	2376      	movs	r3, #118	; 0x76
 8003c78:	9309      	str	r3, [sp, #36]	; 0x24
  status = SDMMC_Init(hsd->Instance, Init);
 8003c7a:	ab0a      	add	r3, sp, #40	; 0x28
 8003c7c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003c80:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003c84:	ab04      	add	r3, sp, #16
 8003c86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c88:	6820      	ldr	r0, [r4, #0]
 8003c8a:	f000 fc2f 	bl	80044ec <SDMMC_Init>
  if(status != HAL_OK)
 8003c8e:	b118      	cbz	r0, 8003c98 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 8003c90:	2501      	movs	r5, #1
}
 8003c92:	4628      	mov	r0, r5
 8003c94:	b00b      	add	sp, #44	; 0x2c
 8003c96:	bd30      	pop	{r4, r5, pc}
 8003c98:	4605      	mov	r5, r0
  __HAL_SD_DISABLE(hsd);
 8003c9a:	6822      	ldr	r2, [r4, #0]
 8003c9c:	6853      	ldr	r3, [r2, #4]
 8003c9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca2:	6053      	str	r3, [r2, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003ca4:	6820      	ldr	r0, [r4, #0]
 8003ca6:	f000 fc40 	bl	800452a <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8003caa:	6822      	ldr	r2, [r4, #0]
 8003cac:	6853      	ldr	r3, [r2, #4]
 8003cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb2:	6053      	str	r3, [r2, #4]
  errorstate = SD_PowerON(hsd);
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	f7ff fd3b 	bl	8003730 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cba:	4603      	mov	r3, r0
 8003cbc:	b130      	cbz	r0, 8003ccc <HAL_SD_InitCard+0x68>
    hsd->State = HAL_SD_STATE_READY;
 8003cbe:	2501      	movs	r5, #1
 8003cc0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003cc4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003cc6:	4318      	orrs	r0, r3
 8003cc8:	63a0      	str	r0, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003cca:	e7e2      	b.n	8003c92 <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 8003ccc:	4620      	mov	r0, r4
 8003cce:	f7ff ff49 	bl	8003b64 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	b130      	cbz	r0, 8003ce4 <HAL_SD_InitCard+0x80>
    hsd->State = HAL_SD_STATE_READY;
 8003cd6:	2501      	movs	r5, #1
 8003cd8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003cdc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003cde:	4318      	orrs	r0, r3
 8003ce0:	63a0      	str	r0, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003ce2:	e7d6      	b.n	8003c92 <HAL_SD_InitCard+0x2e>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003ce4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ce8:	6820      	ldr	r0, [r4, #0]
 8003cea:	f000 fd53 	bl	8004794 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cee:	2800      	cmp	r0, #0
 8003cf0:	d0cf      	beq.n	8003c92 <HAL_SD_InitCard+0x2e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	4904      	ldr	r1, [pc, #16]	; (8003d08 <HAL_SD_InitCard+0xa4>)
 8003cf6:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003cf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003cfa:	4303      	orrs	r3, r0
 8003cfc:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003cfe:	2501      	movs	r5, #1
 8003d00:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 8003d04:	e7c5      	b.n	8003c92 <HAL_SD_InitCard+0x2e>
 8003d06:	bf00      	nop
 8003d08:	004005ff 	.word	0x004005ff

08003d0c <HAL_SD_Init>:
  if(hsd == NULL)
 8003d0c:	b1c0      	cbz	r0, 8003d40 <HAL_SD_Init+0x34>
{
 8003d0e:	b510      	push	{r4, lr}
 8003d10:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 8003d12:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8003d16:	b17b      	cbz	r3, 8003d38 <HAL_SD_Init+0x2c>
  hsd->State = HAL_SD_STATE_BUSY;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f7ff ffa0 	bl	8003c64 <HAL_SD_InitCard>
 8003d24:	4603      	mov	r3, r0
 8003d26:	b970      	cbnz	r0, 8003d46 <HAL_SD_Init+0x3a>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d28:	2200      	movs	r2, #0
 8003d2a:	63a2      	str	r2, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8003d2c:	6322      	str	r2, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8003d38:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 8003d3a:	f7fd fca7 	bl	800168c <HAL_SD_MspInit>
 8003d3e:	e7eb      	b.n	8003d18 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	4770      	bx	lr
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e7f4      	b.n	8003d34 <HAL_SD_Init+0x28>
	...

08003d4c <HAL_SD_ConfigWideBusOperation>:
{
 8003d4c:	b530      	push	{r4, r5, lr}
 8003d4e:	b08b      	sub	sp, #44	; 0x2c
 8003d50:	4604      	mov	r4, r0
 8003d52:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8003d54:	2303      	movs	r3, #3
 8003d56:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d5a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d01c      	beq.n	8003d9a <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003d60:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003d64:	d008      	beq.n	8003d78 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8003d66:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8003d6a:	d00a      	beq.n	8003d82 <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8003d6c:	b179      	cbz	r1, 8003d8e <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003d6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003d70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d74:	6383      	str	r3, [r0, #56]	; 0x38
 8003d76:	e014      	b.n	8003da2 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d78:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7e:	6383      	str	r3, [r0, #56]	; 0x38
 8003d80:	e00f      	b.n	8003da2 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8003d82:	f7ff fdba 	bl	80038fa <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8003d86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d88:	4318      	orrs	r0, r3
 8003d8a:	63a0      	str	r0, [r4, #56]	; 0x38
 8003d8c:	e009      	b.n	8003da2 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 8003d8e:	f7ff fddf 	bl	8003950 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8003d92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d94:	4318      	orrs	r0, r3
 8003d96:	63a0      	str	r0, [r4, #56]	; 0x38
 8003d98:	e003      	b.n	8003da2 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da0:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003da2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003da4:	b1cb      	cbz	r3, 8003dda <HAL_SD_ConfigWideBusOperation+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	4a17      	ldr	r2, [pc, #92]	; (8003e08 <HAL_SD_ConfigWideBusOperation+0xbc>)
 8003daa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003dac:	2501      	movs	r5, #1
 8003dae:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003db2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003db6:	6820      	ldr	r0, [r4, #0]
 8003db8:	f000 fcec 	bl	8004794 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	b130      	cbz	r0, 8003dce <HAL_SD_ConfigWideBusOperation+0x82>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003dc0:	6822      	ldr	r2, [r4, #0]
 8003dc2:	4911      	ldr	r1, [pc, #68]	; (8003e08 <HAL_SD_ConfigWideBusOperation+0xbc>)
 8003dc4:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003dc6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003dc8:	4318      	orrs	r0, r3
 8003dca:	63a0      	str	r0, [r4, #56]	; 0x38
    status = HAL_ERROR;
 8003dcc:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	b00b      	add	sp, #44	; 0x2c
 8003dd8:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003dda:	6863      	ldr	r3, [r4, #4]
 8003ddc:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003dde:	68a3      	ldr	r3, [r4, #8]
 8003de0:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003de2:	68e3      	ldr	r3, [r4, #12]
 8003de4:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8003de6:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003de8:	6963      	ldr	r3, [r4, #20]
 8003dea:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003dec:	69a3      	ldr	r3, [r4, #24]
 8003dee:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDMMC_Init(hsd->Instance, Init);
 8003df0:	ab0a      	add	r3, sp, #40	; 0x28
 8003df2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003df6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003dfa:	ab04      	add	r3, sp, #16
 8003dfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dfe:	6820      	ldr	r0, [r4, #0]
 8003e00:	f000 fb74 	bl	80044ec <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 8003e04:	2500      	movs	r5, #0
 8003e06:	e7d4      	b.n	8003db2 <HAL_SD_ConfigWideBusOperation+0x66>
 8003e08:	004005ff 	.word	0x004005ff

08003e0c <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003e0c:	b1d8      	cbz	r0, 8003e46 <HAL_SDRAM_Init+0x3a>
{   
 8003e0e:	b538      	push	{r3, r4, r5, lr}
 8003e10:	4604      	mov	r4, r0
 8003e12:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003e14:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003e18:	b183      	cbz	r3, 8003e3c <HAL_SDRAM_Init+0x30>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003e20:	1d21      	adds	r1, r4, #4
 8003e22:	6820      	ldr	r0, [r4, #0]
 8003e24:	f000 fa16 	bl	8004254 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003e28:	6862      	ldr	r2, [r4, #4]
 8003e2a:	4629      	mov	r1, r5
 8003e2c:	6820      	ldr	r0, [r4, #0]
 8003e2e:	f000 fa4b 	bl	80042c8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003e32:	2301      	movs	r3, #1
 8003e34:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8003e38:	2000      	movs	r0, #0
}
 8003e3a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8003e3c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8003e40:	f7fd fc70 	bl	8001724 <HAL_SDRAM_MspInit>
 8003e44:	e7e9      	b.n	8003e1a <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8003e46:	2001      	movs	r0, #1
}
 8003e48:	4770      	bx	lr

08003e4a <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003e4a:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003e4c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d014      	beq.n	8003e80 <HAL_SDRAM_SendCommand+0x36>
 8003e56:	460d      	mov	r5, r1
 8003e58:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003e60:	6800      	ldr	r0, [r0, #0]
 8003e62:	f000 fa7d 	bl	8004360 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003e66:	682b      	ldr	r3, [r5, #0]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d004      	beq.n	8003e76 <HAL_SDRAM_SendCommand+0x2c>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8003e72:	2000      	movs	r0, #0
}
 8003e74:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003e76:	2305      	movs	r3, #5
 8003e78:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;  
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	e7f9      	b.n	8003e74 <HAL_SDRAM_SendCommand+0x2a>
    return HAL_BUSY;
 8003e80:	2002      	movs	r0, #2
 8003e82:	e7f7      	b.n	8003e74 <HAL_SDRAM_SendCommand+0x2a>

08003e84 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003e84:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d00c      	beq.n	8003ea8 <HAL_SDRAM_ProgramRefreshRate+0x24>
{
 8003e8e:	b510      	push	{r4, lr}
 8003e90:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003e92:	2302      	movs	r3, #2
 8003e94:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003e98:	6800      	ldr	r0, [r0, #0]
 8003e9a:	f000 fa77 	bl	800438c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 8003ea4:	2000      	movs	r0, #0
}
 8003ea6:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8003ea8:	2002      	movs	r0, #2
}
 8003eaa:	4770      	bx	lr

08003eac <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003eac:	4770      	bx	lr
	...

08003eb0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003eb0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d001      	beq.n	8003ebe <HAL_TIM_Base_Start_IT+0xe>
  {
    return HAL_ERROR;
 8003eba:	2001      	movs	r0, #1
 8003ebc:	4770      	bx	lr
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ec4:	6802      	ldr	r2, [r0, #0]
 8003ec6:	68d3      	ldr	r3, [r2, #12]
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ece:	6803      	ldr	r3, [r0, #0]
 8003ed0:	4a19      	ldr	r2, [pc, #100]	; (8003f38 <HAL_TIM_Base_Start_IT+0x88>)
 8003ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed6:	bf18      	it	ne
 8003ed8:	4293      	cmpne	r3, r2
 8003eda:	d01d      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x68>
 8003edc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d019      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x68>
 8003ee4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d015      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x68>
 8003eec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d011      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x68>
 8003ef4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00d      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x68>
 8003efc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d009      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x68>
 8003f04:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d005      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x68>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	f042 0201 	orr.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f14:	2000      	movs	r0, #0
 8003f16:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f18:	6899      	ldr	r1, [r3, #8]
 8003f1a:	4a08      	ldr	r2, [pc, #32]	; (8003f3c <HAL_TIM_Base_Start_IT+0x8c>)
 8003f1c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1e:	2a06      	cmp	r2, #6
 8003f20:	bf18      	it	ne
 8003f22:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 8003f26:	d005      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003f30:	2000      	movs	r0, #0
 8003f32:	4770      	bx	lr
 8003f34:	2000      	movs	r0, #0
}
 8003f36:	4770      	bx	lr
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	00010007 	.word	0x00010007

08003f40 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f40:	4770      	bx	lr

08003f42 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f42:	4770      	bx	lr

08003f44 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f44:	4770      	bx	lr

08003f46 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f46:	4770      	bx	lr

08003f48 <HAL_TIM_IRQHandler>:
{
 8003f48:	b510      	push	{r4, lr}
 8003f4a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f4c:	6803      	ldr	r3, [r0, #0]
 8003f4e:	691a      	ldr	r2, [r3, #16]
 8003f50:	f012 0f02 	tst.w	r2, #2
 8003f54:	d011      	beq.n	8003f7a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	f012 0f02 	tst.w	r2, #2
 8003f5c:	d00d      	beq.n	8003f7a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f5e:	f06f 0202 	mvn.w	r2, #2
 8003f62:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f64:	2301      	movs	r3, #1
 8003f66:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f68:	6803      	ldr	r3, [r0, #0]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	f013 0f03 	tst.w	r3, #3
 8003f70:	d079      	beq.n	8004066 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003f72:	f7ff ffe6 	bl	8003f42 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f76:	2300      	movs	r3, #0
 8003f78:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	691a      	ldr	r2, [r3, #16]
 8003f7e:	f012 0f04 	tst.w	r2, #4
 8003f82:	d012      	beq.n	8003faa <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	f012 0f04 	tst.w	r2, #4
 8003f8a:	d00e      	beq.n	8003faa <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f8c:	f06f 0204 	mvn.w	r2, #4
 8003f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f92:	2302      	movs	r3, #2
 8003f94:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003f9e:	d068      	beq.n	8004072 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	f7ff ffce 	bl	8003f42 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	f012 0f08 	tst.w	r2, #8
 8003fb2:	d012      	beq.n	8003fda <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	f012 0f08 	tst.w	r2, #8
 8003fba:	d00e      	beq.n	8003fda <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fbc:	f06f 0208 	mvn.w	r2, #8
 8003fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fc2:	2304      	movs	r3, #4
 8003fc4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	f013 0f03 	tst.w	r3, #3
 8003fce:	d057      	beq.n	8004080 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	f7ff ffb6 	bl	8003f42 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	691a      	ldr	r2, [r3, #16]
 8003fde:	f012 0f10 	tst.w	r2, #16
 8003fe2:	d012      	beq.n	800400a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	f012 0f10 	tst.w	r2, #16
 8003fea:	d00e      	beq.n	800400a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fec:	f06f 0210 	mvn.w	r2, #16
 8003ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ff2:	2308      	movs	r3, #8
 8003ff4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003ffe:	d046      	beq.n	800408e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004000:	4620      	mov	r0, r4
 8004002:	f7ff ff9e 	bl	8003f42 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004006:	2300      	movs	r3, #0
 8004008:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	691a      	ldr	r2, [r3, #16]
 800400e:	f012 0f01 	tst.w	r2, #1
 8004012:	d003      	beq.n	800401c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	f012 0f01 	tst.w	r2, #1
 800401a:	d13f      	bne.n	800409c <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004024:	d003      	beq.n	800402e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	f012 0f80 	tst.w	r2, #128	; 0x80
 800402c:	d13d      	bne.n	80040aa <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004036:	d003      	beq.n	8004040 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800403e:	d13b      	bne.n	80040b8 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	691a      	ldr	r2, [r3, #16]
 8004044:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004048:	d003      	beq.n	8004052 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004050:	d139      	bne.n	80040c6 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	f012 0f20 	tst.w	r2, #32
 800405a:	d003      	beq.n	8004064 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	f012 0f20 	tst.w	r2, #32
 8004062:	d137      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x18c>
}
 8004064:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004066:	f7ff ff6b 	bl	8003f40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800406a:	4620      	mov	r0, r4
 800406c:	f7ff ff6a 	bl	8003f44 <HAL_TIM_PWM_PulseFinishedCallback>
 8004070:	e781      	b.n	8003f76 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004072:	4620      	mov	r0, r4
 8004074:	f7ff ff64 	bl	8003f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004078:	4620      	mov	r0, r4
 800407a:	f7ff ff63 	bl	8003f44 <HAL_TIM_PWM_PulseFinishedCallback>
 800407e:	e792      	b.n	8003fa6 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004080:	4620      	mov	r0, r4
 8004082:	f7ff ff5d 	bl	8003f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004086:	4620      	mov	r0, r4
 8004088:	f7ff ff5c 	bl	8003f44 <HAL_TIM_PWM_PulseFinishedCallback>
 800408c:	e7a3      	b.n	8003fd6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408e:	4620      	mov	r0, r4
 8004090:	f7ff ff56 	bl	8003f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004094:	4620      	mov	r0, r4
 8004096:	f7ff ff55 	bl	8003f44 <HAL_TIM_PWM_PulseFinishedCallback>
 800409a:	e7b4      	b.n	8004006 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800409c:	f06f 0201 	mvn.w	r2, #1
 80040a0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80040a2:	4620      	mov	r0, r4
 80040a4:	f7fc ff26 	bl	8000ef4 <HAL_TIM_PeriodElapsedCallback>
 80040a8:	e7b8      	b.n	800401c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040ae:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80040b0:	4620      	mov	r0, r4
 80040b2:	f000 f8cd 	bl	8004250 <HAL_TIMEx_BreakCallback>
 80040b6:	e7ba      	b.n	800402e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040b8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80040bc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80040be:	4620      	mov	r0, r4
 80040c0:	f000 f8c7 	bl	8004252 <HAL_TIMEx_Break2Callback>
 80040c4:	e7bc      	b.n	8004040 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040ca:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80040cc:	4620      	mov	r0, r4
 80040ce:	f7ff ff3a 	bl	8003f46 <HAL_TIM_TriggerCallback>
 80040d2:	e7be      	b.n	8004052 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040d4:	f06f 0220 	mvn.w	r2, #32
 80040d8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80040da:	4620      	mov	r0, r4
 80040dc:	f000 f8b7 	bl	800424e <HAL_TIMEx_CommutCallback>
}
 80040e0:	e7c0      	b.n	8004064 <HAL_TIM_IRQHandler+0x11c>
	...

080040e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040e4:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040e6:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040e8:	4c3a      	ldr	r4, [pc, #232]	; (80041d4 <TIM_Base_SetConfig+0xf0>)
 80040ea:	42a0      	cmp	r0, r4
 80040ec:	bf14      	ite	ne
 80040ee:	2400      	movne	r4, #0
 80040f0:	2401      	moveq	r4, #1
 80040f2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80040f6:	bf14      	ite	ne
 80040f8:	4622      	movne	r2, r4
 80040fa:	f044 0201 	orreq.w	r2, r4, #1
 80040fe:	b9aa      	cbnz	r2, 800412c <TIM_Base_SetConfig+0x48>
 8004100:	4d35      	ldr	r5, [pc, #212]	; (80041d8 <TIM_Base_SetConfig+0xf4>)
 8004102:	42a8      	cmp	r0, r5
 8004104:	bf14      	ite	ne
 8004106:	2500      	movne	r5, #0
 8004108:	2501      	moveq	r5, #1
 800410a:	4e34      	ldr	r6, [pc, #208]	; (80041dc <TIM_Base_SetConfig+0xf8>)
 800410c:	42b0      	cmp	r0, r6
 800410e:	d00d      	beq.n	800412c <TIM_Base_SetConfig+0x48>
 8004110:	b965      	cbnz	r5, 800412c <TIM_Base_SetConfig+0x48>
 8004112:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8004116:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 800411a:	42a8      	cmp	r0, r5
 800411c:	bf14      	ite	ne
 800411e:	2500      	movne	r5, #0
 8004120:	2501      	moveq	r5, #1
 8004122:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004126:	42b0      	cmp	r0, r6
 8004128:	d000      	beq.n	800412c <TIM_Base_SetConfig+0x48>
 800412a:	b11d      	cbz	r5, 8004134 <TIM_Base_SetConfig+0x50>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800412c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004130:	684d      	ldr	r5, [r1, #4]
 8004132:	432b      	orrs	r3, r5
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004134:	2a00      	cmp	r2, #0
 8004136:	d133      	bne.n	80041a0 <TIM_Base_SetConfig+0xbc>
 8004138:	4a27      	ldr	r2, [pc, #156]	; (80041d8 <TIM_Base_SetConfig+0xf4>)
 800413a:	4290      	cmp	r0, r2
 800413c:	bf14      	ite	ne
 800413e:	2200      	movne	r2, #0
 8004140:	2201      	moveq	r2, #1
 8004142:	4d26      	ldr	r5, [pc, #152]	; (80041dc <TIM_Base_SetConfig+0xf8>)
 8004144:	42a8      	cmp	r0, r5
 8004146:	d02b      	beq.n	80041a0 <TIM_Base_SetConfig+0xbc>
 8004148:	bb52      	cbnz	r2, 80041a0 <TIM_Base_SetConfig+0xbc>
 800414a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800414e:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8004152:	4290      	cmp	r0, r2
 8004154:	bf14      	ite	ne
 8004156:	2200      	movne	r2, #0
 8004158:	2201      	moveq	r2, #1
 800415a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800415e:	42a8      	cmp	r0, r5
 8004160:	d01e      	beq.n	80041a0 <TIM_Base_SetConfig+0xbc>
 8004162:	b9ea      	cbnz	r2, 80041a0 <TIM_Base_SetConfig+0xbc>
 8004164:	4a1e      	ldr	r2, [pc, #120]	; (80041e0 <TIM_Base_SetConfig+0xfc>)
 8004166:	4290      	cmp	r0, r2
 8004168:	bf14      	ite	ne
 800416a:	2200      	movne	r2, #0
 800416c:	2201      	moveq	r2, #1
 800416e:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8004172:	42a8      	cmp	r0, r5
 8004174:	d014      	beq.n	80041a0 <TIM_Base_SetConfig+0xbc>
 8004176:	b99a      	cbnz	r2, 80041a0 <TIM_Base_SetConfig+0xbc>
 8004178:	4a1a      	ldr	r2, [pc, #104]	; (80041e4 <TIM_Base_SetConfig+0x100>)
 800417a:	4290      	cmp	r0, r2
 800417c:	bf14      	ite	ne
 800417e:	2200      	movne	r2, #0
 8004180:	2201      	moveq	r2, #1
 8004182:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004186:	42a8      	cmp	r0, r5
 8004188:	d00a      	beq.n	80041a0 <TIM_Base_SetConfig+0xbc>
 800418a:	b94a      	cbnz	r2, 80041a0 <TIM_Base_SetConfig+0xbc>
 800418c:	4a16      	ldr	r2, [pc, #88]	; (80041e8 <TIM_Base_SetConfig+0x104>)
 800418e:	4290      	cmp	r0, r2
 8004190:	bf14      	ite	ne
 8004192:	2200      	movne	r2, #0
 8004194:	2201      	moveq	r2, #1
 8004196:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 800419a:	42a8      	cmp	r0, r5
 800419c:	d000      	beq.n	80041a0 <TIM_Base_SetConfig+0xbc>
 800419e:	b11a      	cbz	r2, 80041a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041a4:	68ca      	ldr	r2, [r1, #12]
 80041a6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ac:	694a      	ldr	r2, [r1, #20]
 80041ae:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80041b0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b2:	688a      	ldr	r2, [r1, #8]
 80041b4:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041b6:	680a      	ldr	r2, [r1, #0]
 80041b8:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041ba:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <TIM_Base_SetConfig+0x108>)
 80041bc:	4298      	cmp	r0, r3
 80041be:	bf14      	ite	ne
 80041c0:	4623      	movne	r3, r4
 80041c2:	f044 0301 	orreq.w	r3, r4, #1
 80041c6:	b10b      	cbz	r3, 80041cc <TIM_Base_SetConfig+0xe8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041c8:	690b      	ldr	r3, [r1, #16]
 80041ca:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041cc:	2301      	movs	r3, #1
 80041ce:	6143      	str	r3, [r0, #20]
}
 80041d0:	bc70      	pop	{r4, r5, r6}
 80041d2:	4770      	bx	lr
 80041d4:	40010000 	.word	0x40010000
 80041d8:	40000800 	.word	0x40000800
 80041dc:	40000400 	.word	0x40000400
 80041e0:	40014400 	.word	0x40014400
 80041e4:	40001800 	.word	0x40001800
 80041e8:	40002000 	.word	0x40002000
 80041ec:	40010400 	.word	0x40010400

080041f0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80041f0:	b358      	cbz	r0, 800424a <HAL_TIM_Base_Init+0x5a>
{
 80041f2:	b510      	push	{r4, lr}
 80041f4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80041f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80041fa:	b30b      	cbz	r3, 8004240 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80041fc:	2302      	movs	r3, #2
 80041fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004202:	1d21      	adds	r1, r4, #4
 8004204:	6820      	ldr	r0, [r4, #0]
 8004206:	f7ff ff6d 	bl	80040e4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800420a:	2301      	movs	r3, #1
 800420c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004210:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004214:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004218:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800421c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004228:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800422c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004230:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004234:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004238:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800423c:	2000      	movs	r0, #0
}
 800423e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004240:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004244:	f7ff fe32 	bl	8003eac <HAL_TIM_Base_MspInit>
 8004248:	e7d8      	b.n	80041fc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800424a:	2001      	movs	r0, #1
}
 800424c:	4770      	bx	lr

0800424e <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800424e:	4770      	bx	lr

08004250 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004250:	4770      	bx	lr

08004252 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004252:	4770      	bx	lr

08004254 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004254:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8004256:	680b      	ldr	r3, [r1, #0]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d018      	beq.n	800428e <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800425c:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800425e:	4a19      	ldr	r2, [pc, #100]	; (80042c4 <FMC_SDRAM_Init+0x70>)
 8004260:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004262:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 8004264:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004266:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 8004268:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 800426a:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 800426c:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 800426e:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 8004270:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 8004272:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 8004274:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 8004276:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 8004278:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 800427a:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 800427c:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 800427e:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 8004280:	6a49      	ldr	r1, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8004282:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004284:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004286:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8004288:	2000      	movs	r0, #0
 800428a:	bc30      	pop	{r4, r5}
 800428c:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800428e:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004290:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004294:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 8004296:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004298:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800429a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 800429c:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800429e:	4322      	orrs	r2, r4
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80042a0:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80042a2:	4c08      	ldr	r4, [pc, #32]	; (80042c4 <FMC_SDRAM_Init+0x70>)
 80042a4:	401c      	ands	r4, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80042a6:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber       |\
 80042a8:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80042aa:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 80042ac:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber       |\
 80042ae:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 80042b0:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth     |\
 80042b2:	432b      	orrs	r3, r5
                       Init->CASLatency          |\
 80042b4:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber  |\
 80042b6:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 80042b8:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 80042ba:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80042bc:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80042be:	6002      	str	r2, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80042c0:	6043      	str	r3, [r0, #4]
 80042c2:	e7e1      	b.n	8004288 <FMC_SDRAM_Init+0x34>
 80042c4:	ffff8000 	.word	0xffff8000

080042c8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80042c8:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80042ca:	2a01      	cmp	r2, #1
 80042cc:	d021      	beq.n	8004312 <FMC_SDRAM_Timing_Init+0x4a>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80042ce:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80042d0:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80042d4:	680b      	ldr	r3, [r1, #0]
 80042d6:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80042d8:	684c      	ldr	r4, [r1, #4]
 80042da:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80042dc:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80042e0:	688c      	ldr	r4, [r1, #8]
 80042e2:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80042e4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80042e8:	68cc      	ldr	r4, [r1, #12]
 80042ea:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80042ec:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80042f0:	690c      	ldr	r4, [r1, #16]
 80042f2:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80042f4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 80042f8:	694c      	ldr	r4, [r1, #20]
 80042fa:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80042fc:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 8004300:	6989      	ldr	r1, [r1, #24]
 8004302:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004304:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004308:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800430a:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800430c:	2000      	movs	r0, #0
 800430e:	bc30      	pop	{r4, r5}
 8004310:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004312:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8004314:	4c11      	ldr	r4, [pc, #68]	; (800435c <FMC_SDRAM_Timing_Init+0x94>)
 8004316:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8004318:	68ca      	ldr	r2, [r1, #12]
 800431a:	1e55      	subs	r5, r2, #1
                        (((Timing->RPDelay)-1) << 20)); 
 800431c:	694b      	ldr	r3, [r1, #20]
 800431e:	1e5a      	subs	r2, r3, #1
 8004320:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8004322:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 8004326:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004328:	68c4      	ldr	r4, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800432a:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800432e:	680b      	ldr	r3, [r1, #0]
 8004330:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8004332:	684d      	ldr	r5, [r1, #4]
 8004334:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004336:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800433a:	688d      	ldr	r5, [r1, #8]
 800433c:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800433e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8004342:	690d      	ldr	r5, [r1, #16]
 8004344:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8004346:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 800434a:	6989      	ldr	r1, [r1, #24]
 800434c:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800434e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004352:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004354:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004356:	60c3      	str	r3, [r0, #12]
 8004358:	e7d8      	b.n	800430c <FMC_SDRAM_Timing_Init+0x44>
 800435a:	bf00      	nop
 800435c:	ff0f0fff 	.word	0xff0f0fff

08004360 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8004360:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8004362:	6903      	ldr	r3, [r0, #16]
 8004364:	4a08      	ldr	r2, [pc, #32]	; (8004388 <FMC_SDRAM_SendCommand+0x28>)
 8004366:	401a      	ands	r2, r3
 8004368:	680b      	ldr	r3, [r1, #0]
 800436a:	684c      	ldr	r4, [r1, #4]
 800436c:	4323      	orrs	r3, r4
 800436e:	688c      	ldr	r4, [r1, #8]
 8004370:	3c01      	subs	r4, #1
 8004372:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 8004376:	68c9      	ldr	r1, [r1, #12]
 8004378:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800437c:	4313      	orrs	r3, r2
 800437e:	6103      	str	r3, [r0, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
}
 8004380:	2000      	movs	r0, #0
 8004382:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	ffc00000 	.word	0xffc00000

0800438c <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800438c:	6943      	ldr	r3, [r0, #20]
 800438e:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8004392:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 8004394:	2000      	movs	r0, #0
 8004396:	4770      	bx	lr

08004398 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004398:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <SDMMC_GetCmdError+0x30>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a0b      	ldr	r2, [pc, #44]	; (80043cc <SDMMC_GetCmdError+0x34>)
 800439e:	fba2 2303 	umull	r2, r3, r2, r3
 80043a2:	0a5a      	lsrs	r2, r3, #9
 80043a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80043a8:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 80043ac:	1e5a      	subs	r2, r3, #1
 80043ae:	b143      	cbz	r3, 80043c2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80043b0:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 80043b2:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80043b4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80043b8:	d0f8      	beq.n	80043ac <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80043ba:	23c5      	movs	r3, #197	; 0xc5
 80043bc:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80043be:	2000      	movs	r0, #0
 80043c0:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80043c2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80043c6:	4770      	bx	lr
 80043c8:	20000000 	.word	0x20000000
 80043cc:	10624dd3 	.word	0x10624dd3

080043d0 <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80043d0:	4b15      	ldr	r3, [pc, #84]	; (8004428 <SDMMC_GetCmdResp2+0x58>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a15      	ldr	r2, [pc, #84]	; (800442c <SDMMC_GetCmdResp2+0x5c>)
 80043d6:	fba2 2303 	umull	r2, r3, r2, r3
 80043da:	0a5a      	lsrs	r2, r3, #9
 80043dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80043e0:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 80043e4:	1e5a      	subs	r2, r3, #1
 80043e6:	b1db      	cbz	r3, 8004420 <SDMMC_GetCmdResp2+0x50>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 80043e8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80043ea:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80043ec:	f011 0f45 	tst.w	r1, #69	; 0x45
 80043f0:	d0f8      	beq.n	80043e4 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80043f2:	f411 6f00 	tst.w	r1, #2048	; 0x800
 80043f6:	d1f5      	bne.n	80043e4 <SDMMC_GetCmdResp2+0x14>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80043f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80043fa:	f013 0f04 	tst.w	r3, #4
 80043fe:	d107      	bne.n	8004410 <SDMMC_GetCmdResp2+0x40>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004400:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004402:	f013 0f01 	tst.w	r3, #1
 8004406:	d107      	bne.n	8004418 <SDMMC_GetCmdResp2+0x48>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004408:	23c5      	movs	r3, #197	; 0xc5
 800440a:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800440c:	2000      	movs	r0, #0
 800440e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004410:	2304      	movs	r3, #4
 8004412:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004414:	4618      	mov	r0, r3
 8004416:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004418:	2301      	movs	r3, #1
 800441a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800441c:	4618      	mov	r0, r3
 800441e:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004420:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	20000000 	.word	0x20000000
 800442c:	10624dd3 	.word	0x10624dd3

08004430 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004430:	4b11      	ldr	r3, [pc, #68]	; (8004478 <SDMMC_GetCmdResp3+0x48>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a11      	ldr	r2, [pc, #68]	; (800447c <SDMMC_GetCmdResp3+0x4c>)
 8004436:	fba2 2303 	umull	r2, r3, r2, r3
 800443a:	0a5a      	lsrs	r2, r3, #9
 800443c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004440:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8004444:	1e5a      	subs	r2, r3, #1
 8004446:	b19b      	cbz	r3, 8004470 <SDMMC_GetCmdResp3+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8004448:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800444a:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800444c:	f011 0f45 	tst.w	r1, #69	; 0x45
 8004450:	d0f8      	beq.n	8004444 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004452:	f411 6f00 	tst.w	r1, #2048	; 0x800
 8004456:	d1f5      	bne.n	8004444 <SDMMC_GetCmdResp3+0x14>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004458:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800445a:	f013 0f04 	tst.w	r3, #4
 800445e:	d103      	bne.n	8004468 <SDMMC_GetCmdResp3+0x38>
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004460:	23c5      	movs	r3, #197	; 0xc5
 8004462:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004464:	2000      	movs	r0, #0
 8004466:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004468:	2304      	movs	r3, #4
 800446a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800446c:	4618      	mov	r0, r3
 800446e:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004470:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000000 	.word	0x20000000
 800447c:	10624dd3 	.word	0x10624dd3

08004480 <SDMMC_GetCmdResp7>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004480:	4b18      	ldr	r3, [pc, #96]	; (80044e4 <SDMMC_GetCmdResp7+0x64>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a18      	ldr	r2, [pc, #96]	; (80044e8 <SDMMC_GetCmdResp7+0x68>)
 8004486:	fba2 2303 	umull	r2, r3, r2, r3
 800448a:	0a5a      	lsrs	r2, r3, #9
 800448c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004490:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8004494:	1e5a      	subs	r2, r3, #1
 8004496:	b1fb      	cbz	r3, 80044d8 <SDMMC_GetCmdResp7+0x58>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8004498:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800449a:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800449c:	f011 0f45 	tst.w	r1, #69	; 0x45
 80044a0:	d0f8      	beq.n	8004494 <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80044a2:	f411 6f00 	tst.w	r1, #2048	; 0x800
 80044a6:	d1f5      	bne.n	8004494 <SDMMC_GetCmdResp7+0x14>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80044a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80044aa:	f013 0f04 	tst.w	r3, #4
 80044ae:	d10b      	bne.n	80044c8 <SDMMC_GetCmdResp7+0x48>
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80044b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80044b2:	f013 0f01 	tst.w	r3, #1
 80044b6:	d10b      	bne.n	80044d0 <SDMMC_GetCmdResp7+0x50>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80044b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80044ba:	f013 0f40 	tst.w	r3, #64	; 0x40
 80044be:	d00e      	beq.n	80044de <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80044c0:	2340      	movs	r3, #64	; 0x40
 80044c2:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80044c4:	2000      	movs	r0, #0
 80044c6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80044c8:	2304      	movs	r3, #4
 80044ca:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80044cc:	4618      	mov	r0, r3
 80044ce:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80044d0:	2301      	movs	r3, #1
 80044d2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80044d4:	4618      	mov	r0, r3
 80044d6:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80044d8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80044dc:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 80044de:	2000      	movs	r0, #0
  
}
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	20000000 	.word	0x20000000
 80044e8:	10624dd3 	.word	0x10624dd3

080044ec <SDMMC_Init>:
{
 80044ec:	b084      	sub	sp, #16
 80044ee:	b410      	push	{r4}
 80044f0:	ac02      	add	r4, sp, #8
 80044f2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 80044f6:	460b      	mov	r3, r1
 80044f8:	9a03      	ldr	r2, [sp, #12]
 80044fa:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 80044fc:	9a04      	ldr	r2, [sp, #16]
             Init.ClockBypass         |\
 80044fe:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8004500:	9a05      	ldr	r2, [sp, #20]
             Init.ClockPowerSave      |\
 8004502:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8004504:	9a06      	ldr	r2, [sp, #24]
             Init.BusWide             |\
 8004506:	4313      	orrs	r3, r2
             Init.ClockDiv
 8004508:	9a07      	ldr	r2, [sp, #28]
             Init.HardwareFlowControl |\
 800450a:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800450c:	6841      	ldr	r1, [r0, #4]
 800450e:	4a04      	ldr	r2, [pc, #16]	; (8004520 <SDMMC_Init+0x34>)
 8004510:	400a      	ands	r2, r1
 8004512:	4313      	orrs	r3, r2
 8004514:	6043      	str	r3, [r0, #4]
}
 8004516:	2000      	movs	r0, #0
 8004518:	f85d 4b04 	ldr.w	r4, [sp], #4
 800451c:	b004      	add	sp, #16
 800451e:	4770      	bx	lr
 8004520:	ffff8100 	.word	0xffff8100

08004524 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8004524:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8004528:	4770      	bx	lr

0800452a <SDMMC_PowerState_ON>:
{  
 800452a:	b508      	push	{r3, lr}
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800452c:	2303      	movs	r3, #3
 800452e:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 8004530:	2002      	movs	r0, #2
 8004532:	f7fd f9b3 	bl	800189c <HAL_Delay>
}
 8004536:	2000      	movs	r0, #0
 8004538:	bd08      	pop	{r3, pc}

0800453a <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800453a:	6800      	ldr	r0, [r0, #0]
}
 800453c:	f000 0003 	and.w	r0, r0, #3
 8004540:	4770      	bx	lr
	...

08004544 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8004544:	680b      	ldr	r3, [r1, #0]
 8004546:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004548:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 800454a:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800454c:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 800454e:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 8004550:	4313      	orrs	r3, r2
                       Command->CPSM);
 8004552:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 8004554:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004556:	68c1      	ldr	r1, [r0, #12]
 8004558:	4a02      	ldr	r2, [pc, #8]	; (8004564 <SDMMC_SendCommand+0x20>)
 800455a:	400a      	ands	r2, r1
 800455c:	4313      	orrs	r3, r2
 800455e:	60c3      	str	r3, [r0, #12]
}
 8004560:	2000      	movs	r0, #0
 8004562:	4770      	bx	lr
 8004564:	fffff000 	.word	0xfffff000

08004568 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 8004568:	6900      	ldr	r0, [r0, #16]
}
 800456a:	b2c0      	uxtb	r0, r0
 800456c:	4770      	bx	lr

0800456e <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800456e:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8004570:	5840      	ldr	r0, [r0, r1]
}  
 8004572:	4770      	bx	lr

08004574 <SDMMC_GetCmdResp1>:
{
 8004574:	b538      	push	{r3, r4, r5, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004576:	4b52      	ldr	r3, [pc, #328]	; (80046c0 <SDMMC_GetCmdResp1+0x14c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4c52      	ldr	r4, [pc, #328]	; (80046c4 <SDMMC_GetCmdResp1+0x150>)
 800457c:	fba4 4303 	umull	r4, r3, r4, r3
 8004580:	0a5b      	lsrs	r3, r3, #9
 8004582:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 8004586:	1e53      	subs	r3, r2, #1
 8004588:	2a00      	cmp	r2, #0
 800458a:	d060      	beq.n	800464e <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDMMCx->STA;
 800458c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800458e:	461a      	mov	r2, r3
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004590:	f014 0f45 	tst.w	r4, #69	; 0x45
 8004594:	d0f7      	beq.n	8004586 <SDMMC_GetCmdResp1+0x12>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004596:	f414 6f00 	tst.w	r4, #2048	; 0x800
 800459a:	d1f4      	bne.n	8004586 <SDMMC_GetCmdResp1+0x12>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800459c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800459e:	f013 0f04 	tst.w	r3, #4
 80045a2:	d107      	bne.n	80045b4 <SDMMC_GetCmdResp1+0x40>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80045a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80045a6:	f013 0f01 	tst.w	r3, #1
 80045aa:	d007      	beq.n	80045bc <SDMMC_GetCmdResp1+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80045ac:	2301      	movs	r3, #1
 80045ae:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80045b0:	4618      	mov	r0, r3
 80045b2:	e04e      	b.n	8004652 <SDMMC_GetCmdResp1+0xde>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80045b4:	2304      	movs	r3, #4
 80045b6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80045b8:	4618      	mov	r0, r3
 80045ba:	e04a      	b.n	8004652 <SDMMC_GetCmdResp1+0xde>
 80045bc:	460d      	mov	r5, r1
 80045be:	4604      	mov	r4, r0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80045c0:	23c5      	movs	r3, #197	; 0xc5
 80045c2:	6383      	str	r3, [r0, #56]	; 0x38
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80045c4:	f7ff ffd0 	bl	8004568 <SDMMC_GetCommandResponse>
 80045c8:	42a8      	cmp	r0, r5
 80045ca:	d001      	beq.n	80045d0 <SDMMC_GetCmdResp1+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80045cc:	2001      	movs	r0, #1
 80045ce:	e040      	b.n	8004652 <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80045d0:	2100      	movs	r1, #0
 80045d2:	4620      	mov	r0, r4
 80045d4:	f7ff ffcb 	bl	800456e <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80045d8:	4b3b      	ldr	r3, [pc, #236]	; (80046c8 <SDMMC_GetCmdResp1+0x154>)
 80045da:	4003      	ands	r3, r0
 80045dc:	b3d3      	cbz	r3, 8004654 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80045de:	2800      	cmp	r0, #0
 80045e0:	db3a      	blt.n	8004658 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80045e2:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80045e6:	d13a      	bne.n	800465e <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80045e8:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 80045ec:	d139      	bne.n	8004662 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80045ee:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 80045f2:	d138      	bne.n	8004666 <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80045f4:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 80045f8:	d138      	bne.n	800466c <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80045fa:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80045fe:	d138      	bne.n	8004672 <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004600:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8004604:	d138      	bne.n	8004678 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004606:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800460a:	d138      	bne.n	800467e <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800460c:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8004610:	d138      	bne.n	8004684 <SDMMC_GetCmdResp1+0x110>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004612:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8004616:	d138      	bne.n	800468a <SDMMC_GetCmdResp1+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004618:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800461c:	d138      	bne.n	8004690 <SDMMC_GetCmdResp1+0x11c>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800461e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8004622:	d138      	bne.n	8004696 <SDMMC_GetCmdResp1+0x122>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004624:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8004628:	d138      	bne.n	800469c <SDMMC_GetCmdResp1+0x128>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800462a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 800462e:	d138      	bne.n	80046a2 <SDMMC_GetCmdResp1+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004630:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8004634:	d138      	bne.n	80046a8 <SDMMC_GetCmdResp1+0x134>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004636:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800463a:	d138      	bne.n	80046ae <SDMMC_GetCmdResp1+0x13a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800463c:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8004640:	d138      	bne.n	80046b4 <SDMMC_GetCmdResp1+0x140>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004642:	f010 0f08 	tst.w	r0, #8
 8004646:	d038      	beq.n	80046ba <SDMMC_GetCmdResp1+0x146>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004648:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800464c:	e001      	b.n	8004652 <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 800464e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004652:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_NONE;
 8004654:	2000      	movs	r0, #0
 8004656:	e7fc      	b.n	8004652 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004658:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800465c:	e7f9      	b.n	8004652 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800465e:	2040      	movs	r0, #64	; 0x40
 8004660:	e7f7      	b.n	8004652 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004662:	2080      	movs	r0, #128	; 0x80
 8004664:	e7f5      	b.n	8004652 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004666:	f44f 7080 	mov.w	r0, #256	; 0x100
 800466a:	e7f2      	b.n	8004652 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800466c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004670:	e7ef      	b.n	8004652 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004672:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004676:	e7ec      	b.n	8004652 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004678:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800467c:	e7e9      	b.n	8004652 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800467e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004682:	e7e6      	b.n	8004652 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004684:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004688:	e7e3      	b.n	8004652 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800468a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800468e:	e7e0      	b.n	8004652 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 8004690:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004694:	e7dd      	b.n	8004652 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004696:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800469a:	e7da      	b.n	8004652 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800469c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80046a0:	e7d7      	b.n	8004652 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80046a2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80046a6:	e7d4      	b.n	8004652 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80046a8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80046ac:	e7d1      	b.n	8004652 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80046ae:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80046b2:	e7ce      	b.n	8004652 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 80046b4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80046b8:	e7cb      	b.n	8004652 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80046ba:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80046be:	e7c8      	b.n	8004652 <SDMMC_GetCmdResp1+0xde>
 80046c0:	20000000 	.word	0x20000000
 80046c4:	10624dd3 	.word	0x10624dd3
 80046c8:	fdffe008 	.word	0xfdffe008

080046cc <SDMMC_GetCmdResp6>:
{
 80046cc:	b570      	push	{r4, r5, r6, lr}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80046ce:	4b26      	ldr	r3, [pc, #152]	; (8004768 <SDMMC_GetCmdResp6+0x9c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4c26      	ldr	r4, [pc, #152]	; (800476c <SDMMC_GetCmdResp6+0xa0>)
 80046d4:	fba4 4303 	umull	r4, r3, r4, r3
 80046d8:	0a5c      	lsrs	r4, r3, #9
 80046da:	f241 3388 	movw	r3, #5000	; 0x1388
 80046de:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0U)
 80046e2:	1e5c      	subs	r4, r3, #1
 80046e4:	b3b3      	cbz	r3, 8004754 <SDMMC_GetCmdResp6+0x88>
    sta_reg = SDMMCx->STA;
 80046e6:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80046e8:	4623      	mov	r3, r4
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80046ea:	f015 0f45 	tst.w	r5, #69	; 0x45
 80046ee:	d0f8      	beq.n	80046e2 <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80046f0:	f415 6f00 	tst.w	r5, #2048	; 0x800
 80046f4:	d1f5      	bne.n	80046e2 <SDMMC_GetCmdResp6+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80046f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80046f8:	f013 0f04 	tst.w	r3, #4
 80046fc:	d107      	bne.n	800470e <SDMMC_GetCmdResp6+0x42>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80046fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004700:	f013 0f01 	tst.w	r3, #1
 8004704:	d007      	beq.n	8004716 <SDMMC_GetCmdResp6+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004706:	2301      	movs	r3, #1
 8004708:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800470a:	4618      	mov	r0, r3
 800470c:	e024      	b.n	8004758 <SDMMC_GetCmdResp6+0x8c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800470e:	2304      	movs	r3, #4
 8004710:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004712:	4618      	mov	r0, r3
 8004714:	e020      	b.n	8004758 <SDMMC_GetCmdResp6+0x8c>
 8004716:	4616      	mov	r6, r2
 8004718:	460d      	mov	r5, r1
 800471a:	4604      	mov	r4, r0
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800471c:	f7ff ff24 	bl	8004568 <SDMMC_GetCommandResponse>
 8004720:	42a8      	cmp	r0, r5
 8004722:	d001      	beq.n	8004728 <SDMMC_GetCmdResp6+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004724:	2001      	movs	r0, #1
 8004726:	e017      	b.n	8004758 <SDMMC_GetCmdResp6+0x8c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004728:	23c5      	movs	r3, #197	; 0xc5
 800472a:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800472c:	2100      	movs	r1, #0
 800472e:	4620      	mov	r0, r4
 8004730:	f7ff ff1d 	bl	800456e <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004734:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8004738:	d008      	beq.n	800474c <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800473a:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800473e:	d10c      	bne.n	800475a <SDMMC_GetCmdResp6+0x8e>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004740:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8004744:	d00c      	beq.n	8004760 <SDMMC_GetCmdResp6+0x94>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004746:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800474a:	e005      	b.n	8004758 <SDMMC_GetCmdResp6+0x8c>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800474c:	0c00      	lsrs	r0, r0, #16
 800474e:	8030      	strh	r0, [r6, #0]
    return SDMMC_ERROR_NONE;
 8004750:	2000      	movs	r0, #0
 8004752:	e001      	b.n	8004758 <SDMMC_GetCmdResp6+0x8c>
      return SDMMC_ERROR_TIMEOUT;
 8004754:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004758:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 800475a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800475e:	e7fb      	b.n	8004758 <SDMMC_GetCmdResp6+0x8c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004760:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004764:	e7f8      	b.n	8004758 <SDMMC_GetCmdResp6+0x8c>
 8004766:	bf00      	nop
 8004768:	20000000 	.word	0x20000000
 800476c:	10624dd3 	.word	0x10624dd3

08004770 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004770:	680b      	ldr	r3, [r1, #0]
 8004772:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8004774:	684b      	ldr	r3, [r1, #4]
 8004776:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004778:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 800477a:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800477c:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 800477e:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8004780:	4313      	orrs	r3, r2
                       Data->DPSM);
 8004782:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8004784:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004786:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8004788:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 800478c:	4313      	orrs	r3, r2
 800478e:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8004790:	2000      	movs	r0, #0
 8004792:	4770      	bx	lr

08004794 <SDMMC_CmdBlockLength>:
{
 8004794:	b530      	push	{r4, r5, lr}
 8004796:	b087      	sub	sp, #28
 8004798:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800479a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800479c:	2410      	movs	r4, #16
 800479e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80047a0:	2340      	movs	r3, #64	; 0x40
 80047a2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80047a4:	2300      	movs	r3, #0
 80047a6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80047a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047ac:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80047ae:	a901      	add	r1, sp, #4
 80047b0:	f7ff fec8 	bl	8004544 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80047b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b8:	4621      	mov	r1, r4
 80047ba:	4628      	mov	r0, r5
 80047bc:	f7ff feda 	bl	8004574 <SDMMC_GetCmdResp1>
}
 80047c0:	b007      	add	sp, #28
 80047c2:	bd30      	pop	{r4, r5, pc}

080047c4 <SDMMC_CmdSelDesel>:
{
 80047c4:	b530      	push	{r4, r5, lr}
 80047c6:	b087      	sub	sp, #28
 80047c8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80047ca:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80047cc:	2407      	movs	r4, #7
 80047ce:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80047d0:	2340      	movs	r3, #64	; 0x40
 80047d2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80047d4:	2300      	movs	r3, #0
 80047d6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80047d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047dc:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80047de:	a901      	add	r1, sp, #4
 80047e0:	f7ff feb0 	bl	8004544 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80047e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e8:	4621      	mov	r1, r4
 80047ea:	4628      	mov	r0, r5
 80047ec:	f7ff fec2 	bl	8004574 <SDMMC_GetCmdResp1>
}
 80047f0:	b007      	add	sp, #28
 80047f2:	bd30      	pop	{r4, r5, pc}

080047f4 <SDMMC_CmdGoIdleState>:
{
 80047f4:	b510      	push	{r4, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80047fe:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8004800:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004802:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004808:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800480a:	a901      	add	r1, sp, #4
 800480c:	f7ff fe9a 	bl	8004544 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8004810:	4620      	mov	r0, r4
 8004812:	f7ff fdc1 	bl	8004398 <SDMMC_GetCmdError>
}
 8004816:	b006      	add	sp, #24
 8004818:	bd10      	pop	{r4, pc}

0800481a <SDMMC_CmdOperCond>:
{
 800481a:	b510      	push	{r4, lr}
 800481c:	b086      	sub	sp, #24
 800481e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004820:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004824:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004826:	2308      	movs	r3, #8
 8004828:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800482a:	2340      	movs	r3, #64	; 0x40
 800482c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800482e:	2300      	movs	r3, #0
 8004830:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004836:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004838:	a901      	add	r1, sp, #4
 800483a:	f7ff fe83 	bl	8004544 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800483e:	4620      	mov	r0, r4
 8004840:	f7ff fe1e 	bl	8004480 <SDMMC_GetCmdResp7>
}
 8004844:	b006      	add	sp, #24
 8004846:	bd10      	pop	{r4, pc}

08004848 <SDMMC_CmdAppCommand>:
{
 8004848:	b530      	push	{r4, r5, lr}
 800484a:	b087      	sub	sp, #28
 800484c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800484e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004850:	2437      	movs	r4, #55	; 0x37
 8004852:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004854:	2340      	movs	r3, #64	; 0x40
 8004856:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004858:	2300      	movs	r3, #0
 800485a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800485c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004860:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004862:	a901      	add	r1, sp, #4
 8004864:	f7ff fe6e 	bl	8004544 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8004868:	f241 3288 	movw	r2, #5000	; 0x1388
 800486c:	4621      	mov	r1, r4
 800486e:	4628      	mov	r0, r5
 8004870:	f7ff fe80 	bl	8004574 <SDMMC_GetCmdResp1>
}
 8004874:	b007      	add	sp, #28
 8004876:	bd30      	pop	{r4, r5, pc}

08004878 <SDMMC_CmdAppOperCommand>:
{
 8004878:	b510      	push	{r4, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800487e:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <SDMMC_CmdAppOperCommand+0x30>)
 8004880:	430b      	orrs	r3, r1
 8004882:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004884:	2329      	movs	r3, #41	; 0x29
 8004886:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004888:	2340      	movs	r3, #64	; 0x40
 800488a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800488c:	2300      	movs	r3, #0
 800488e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004894:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004896:	a901      	add	r1, sp, #4
 8004898:	f7ff fe54 	bl	8004544 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800489c:	4620      	mov	r0, r4
 800489e:	f7ff fdc7 	bl	8004430 <SDMMC_GetCmdResp3>
}
 80048a2:	b006      	add	sp, #24
 80048a4:	bd10      	pop	{r4, pc}
 80048a6:	bf00      	nop
 80048a8:	80100000 	.word	0x80100000

080048ac <SDMMC_CmdBusWidth>:
{
 80048ac:	b530      	push	{r4, r5, lr}
 80048ae:	b087      	sub	sp, #28
 80048b0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80048b2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80048b4:	2406      	movs	r4, #6
 80048b6:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80048b8:	2340      	movs	r3, #64	; 0x40
 80048ba:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80048bc:	2300      	movs	r3, #0
 80048be:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80048c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048c4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80048c6:	a901      	add	r1, sp, #4
 80048c8:	f7ff fe3c 	bl	8004544 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80048cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d0:	4621      	mov	r1, r4
 80048d2:	4628      	mov	r0, r5
 80048d4:	f7ff fe4e 	bl	8004574 <SDMMC_GetCmdResp1>
}
 80048d8:	b007      	add	sp, #28
 80048da:	bd30      	pop	{r4, r5, pc}

080048dc <SDMMC_CmdSendSCR>:
{
 80048dc:	b530      	push	{r4, r5, lr}
 80048de:	b087      	sub	sp, #28
 80048e0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80048e6:	2433      	movs	r4, #51	; 0x33
 80048e8:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80048ea:	2240      	movs	r2, #64	; 0x40
 80048ec:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80048ee:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80048f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048f4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80048f6:	a901      	add	r1, sp, #4
 80048f8:	f7ff fe24 	bl	8004544 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80048fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004900:	4621      	mov	r1, r4
 8004902:	4628      	mov	r0, r5
 8004904:	f7ff fe36 	bl	8004574 <SDMMC_GetCmdResp1>
}
 8004908:	b007      	add	sp, #28
 800490a:	bd30      	pop	{r4, r5, pc}

0800490c <SDMMC_CmdSendCID>:
{
 800490c:	b510      	push	{r4, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004916:	2202      	movs	r2, #2
 8004918:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800491a:	22c0      	movs	r2, #192	; 0xc0
 800491c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800491e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004924:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004926:	a901      	add	r1, sp, #4
 8004928:	f7ff fe0c 	bl	8004544 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800492c:	4620      	mov	r0, r4
 800492e:	f7ff fd4f 	bl	80043d0 <SDMMC_GetCmdResp2>
}
 8004932:	b006      	add	sp, #24
 8004934:	bd10      	pop	{r4, pc}

08004936 <SDMMC_CmdSendCSD>:
{
 8004936:	b510      	push	{r4, lr}
 8004938:	b086      	sub	sp, #24
 800493a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800493c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800493e:	2309      	movs	r3, #9
 8004940:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004942:	23c0      	movs	r3, #192	; 0xc0
 8004944:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004946:	2300      	movs	r3, #0
 8004948:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800494a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800494e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004950:	a901      	add	r1, sp, #4
 8004952:	f7ff fdf7 	bl	8004544 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004956:	4620      	mov	r0, r4
 8004958:	f7ff fd3a 	bl	80043d0 <SDMMC_GetCmdResp2>
}
 800495c:	b006      	add	sp, #24
 800495e:	bd10      	pop	{r4, pc}

08004960 <SDMMC_CmdSetRelAdd>:
{
 8004960:	b570      	push	{r4, r5, r6, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	4605      	mov	r5, r0
 8004966:	460e      	mov	r6, r1
  sdmmc_cmdinit.Argument         = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800496c:	2403      	movs	r4, #3
 800496e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004970:	2240      	movs	r2, #64	; 0x40
 8004972:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004974:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800497a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800497c:	a901      	add	r1, sp, #4
 800497e:	f7ff fde1 	bl	8004544 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004982:	4632      	mov	r2, r6
 8004984:	4621      	mov	r1, r4
 8004986:	4628      	mov	r0, r5
 8004988:	f7ff fea0 	bl	80046cc <SDMMC_GetCmdResp6>
}
 800498c:	b006      	add	sp, #24
 800498e:	bd70      	pop	{r4, r5, r6, pc}

08004990 <__libc_init_array>:
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	4e0d      	ldr	r6, [pc, #52]	; (80049c8 <__libc_init_array+0x38>)
 8004994:	4c0d      	ldr	r4, [pc, #52]	; (80049cc <__libc_init_array+0x3c>)
 8004996:	1ba4      	subs	r4, r4, r6
 8004998:	10a4      	asrs	r4, r4, #2
 800499a:	2500      	movs	r5, #0
 800499c:	42a5      	cmp	r5, r4
 800499e:	d109      	bne.n	80049b4 <__libc_init_array+0x24>
 80049a0:	4e0b      	ldr	r6, [pc, #44]	; (80049d0 <__libc_init_array+0x40>)
 80049a2:	4c0c      	ldr	r4, [pc, #48]	; (80049d4 <__libc_init_array+0x44>)
 80049a4:	f000 f820 	bl	80049e8 <_init>
 80049a8:	1ba4      	subs	r4, r4, r6
 80049aa:	10a4      	asrs	r4, r4, #2
 80049ac:	2500      	movs	r5, #0
 80049ae:	42a5      	cmp	r5, r4
 80049b0:	d105      	bne.n	80049be <__libc_init_array+0x2e>
 80049b2:	bd70      	pop	{r4, r5, r6, pc}
 80049b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049b8:	4798      	blx	r3
 80049ba:	3501      	adds	r5, #1
 80049bc:	e7ee      	b.n	800499c <__libc_init_array+0xc>
 80049be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049c2:	4798      	blx	r3
 80049c4:	3501      	adds	r5, #1
 80049c6:	e7f2      	b.n	80049ae <__libc_init_array+0x1e>
 80049c8:	08004a20 	.word	0x08004a20
 80049cc:	08004a20 	.word	0x08004a20
 80049d0:	08004a20 	.word	0x08004a20
 80049d4:	08004a24 	.word	0x08004a24

080049d8 <memset>:
 80049d8:	4402      	add	r2, r0
 80049da:	4603      	mov	r3, r0
 80049dc:	4293      	cmp	r3, r2
 80049de:	d100      	bne.n	80049e2 <memset+0xa>
 80049e0:	4770      	bx	lr
 80049e2:	f803 1b01 	strb.w	r1, [r3], #1
 80049e6:	e7f9      	b.n	80049dc <memset+0x4>

080049e8 <_init>:
 80049e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ea:	bf00      	nop
 80049ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ee:	bc08      	pop	{r3}
 80049f0:	469e      	mov	lr, r3
 80049f2:	4770      	bx	lr

080049f4 <_fini>:
 80049f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f6:	bf00      	nop
 80049f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049fa:	bc08      	pop	{r3}
 80049fc:	469e      	mov	lr, r3
 80049fe:	4770      	bx	lr
