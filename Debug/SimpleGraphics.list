
SimpleGraphics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004828  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080049f0  080049f0  000149f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a08  08004a08  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004a08  08004a08  00014a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a10  08004a10  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a10  08004a10  00014a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a14  08004a14  00014a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004a18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003ff10  20000014  08004a2c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2003ff24  08004a2c  0002ff24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000232fe  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a4d  00000000  00000000  00043342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000191f8  00000000  00000000  00046d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c0  00000000  00000000  0005ff88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016a0  00000000  00000000  00061648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029d03  00000000  00000000  00062ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023669  00000000  00000000  0008c9eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001009dd  00000000  00000000  000b0054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b0a31  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041a0  00000000  00000000  001b0a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000014 	.word	0x20000014
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080049d8 	.word	0x080049d8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000018 	.word	0x20000018
 8000204:	080049d8 	.word	0x080049d8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <Init_Graphics_System>:
uint32 LCD_FRAME_BUFFER1 = 0;
uint32 LCD_FRAME_BUFFER2 = 0;


void Init_Graphics_System(uint32 LCD_RAM_START_ADDRESS, uint8 Layers, uint8 ColorType) //Инициализация драйвера дисплея, графического ускорителя и т.п.
{
 800050c:	b508      	push	{r3, lr}
    LCD_FRAME_BUFFER0 = LCD_RAM_START_ADDRESS;
 800050e:	4b02      	ldr	r3, [pc, #8]	; (8000518 <Init_Graphics_System+0xc>)
 8000510:	6018      	str	r0, [r3, #0]

    Touch_Init();
 8000512:	f000 fdeb 	bl	80010ec <Touch_Init>

}
 8000516:	bd08      	pop	{r3, pc}
 8000518:	20000030 	.word	0x20000030

0800051c <Fill_all>:

void Fill_all(uint32 Color) //Заливка всего дисплея цветом
{
	for(int i=0; i<480*272; i++)
 800051c:	2300      	movs	r3, #0
 800051e:	e005      	b.n	800052c <Fill_all+0x10>
	{
	  *(__IO uint16*) (LCD_FRAME_BUFFER0 + (i*2)) = Color;
 8000520:	4a04      	ldr	r2, [pc, #16]	; (8000534 <Fill_all+0x18>)
 8000522:	6812      	ldr	r2, [r2, #0]
 8000524:	b281      	uxth	r1, r0
 8000526:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<480*272; i++)
 800052a:	3301      	adds	r3, #1
 800052c:	f5b3 3fff 	cmp.w	r3, #130560	; 0x1fe00
 8000530:	dbf6      	blt.n	8000520 <Fill_all+0x4>
	}
}
 8000532:	4770      	bx	lr
 8000534:	20000030 	.word	0x20000030

08000538 <MemPoint>:
	}
}

void MemPoint(int32 x, int32 y, uint32 Color) //Отрисовка одного пикселя
{
	*(__IO uint16*) (LCD_FRAME_BUFFER0 + (2*(y*DispWidth + x))) = Color;
 8000538:	4b04      	ldr	r3, [pc, #16]	; (800054c <MemPoint+0x14>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	fb03 0001 	mla	r0, r3, r1, r0
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <MemPoint+0x18>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	b292      	uxth	r2, r2
 8000546:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
}
 800054a:	4770      	bx	lr
 800054c:	20000004 	.word	0x20000004
 8000550:	20000030 	.word	0x20000030

08000554 <GetCursor>:
		HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, SET);
	}
}

void GetCursor()
{
 8000554:	b510      	push	{r4, lr}
    TS_GetState(&TS_State);
 8000556:	4c2b      	ldr	r4, [pc, #172]	; (8000604 <GetCursor+0xb0>)
 8000558:	4620      	mov	r0, r4
 800055a:	f000 fd07 	bl	8000f6c <TS_GetState>
    if(TS_State.touchDetected)
 800055e:	7823      	ldrb	r3, [r4, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d02b      	beq.n	80005bc <GetCursor+0x68>
    {
    	CrPosX1 = TS_State.touchX[0];
 8000564:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8000568:	4a27      	ldr	r2, [pc, #156]	; (8000608 <GetCursor+0xb4>)
 800056a:	8011      	strh	r1, [r2, #0]
		CrPosY1 = TS_State.touchY[0];
 800056c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8000570:	4a26      	ldr	r2, [pc, #152]	; (800060c <GetCursor+0xb8>)
 8000572:	8011      	strh	r1, [r2, #0]

		CrPosX2 = TS_State.touchX[1];
 8000574:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8000578:	4a25      	ldr	r2, [pc, #148]	; (8000610 <GetCursor+0xbc>)
 800057a:	8011      	strh	r1, [r2, #0]
		CrPosY2 = TS_State.touchY[1];
 800057c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000580:	4a24      	ldr	r2, [pc, #144]	; (8000614 <GetCursor+0xc0>)
 8000582:	8011      	strh	r1, [r2, #0]

		CrPosX3 = TS_State.touchX[2];
 8000584:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8000588:	4a23      	ldr	r2, [pc, #140]	; (8000618 <GetCursor+0xc4>)
 800058a:	8011      	strh	r1, [r2, #0]
		CrPosY3 = TS_State.touchY[2];
 800058c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8000590:	4a22      	ldr	r2, [pc, #136]	; (800061c <GetCursor+0xc8>)
 8000592:	8011      	strh	r1, [r2, #0]

		CrPosX4 = TS_State.touchX[3];
 8000594:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8000598:	4a21      	ldr	r2, [pc, #132]	; (8000620 <GetCursor+0xcc>)
 800059a:	8011      	strh	r1, [r2, #0]
		CrPosY4 = TS_State.touchY[3];
 800059c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 80005a0:	4a20      	ldr	r2, [pc, #128]	; (8000624 <GetCursor+0xd0>)
 80005a2:	8011      	strh	r1, [r2, #0]

		CrPosX5 = TS_State.touchX[4];
 80005a4:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80005a8:	4a1f      	ldr	r2, [pc, #124]	; (8000628 <GetCursor+0xd4>)
 80005aa:	8011      	strh	r1, [r2, #0]
		CrPosY5 = TS_State.touchY[4];
 80005ac:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80005b0:	4b1e      	ldr	r3, [pc, #120]	; (800062c <GetCursor+0xd8>)
 80005b2:	801a      	strh	r2, [r3, #0]

		CrStatus = Clicked;
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <GetCursor+0xdc>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	701a      	strb	r2, [r3, #0]
    	TS_State.touchX[4] = 0;
		TS_State.touchY[4] = 0;

		CrStatus = NotClicked;
    }
}
 80005ba:	bd10      	pop	{r4, pc}
    	CrPosX1 = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	4a12      	ldr	r2, [pc, #72]	; (8000608 <GetCursor+0xb4>)
 80005c0:	8013      	strh	r3, [r2, #0]
		CrPosY1 = 0;
 80005c2:	4a12      	ldr	r2, [pc, #72]	; (800060c <GetCursor+0xb8>)
 80005c4:	8013      	strh	r3, [r2, #0]
		CrPosX2 = 0;
 80005c6:	4a12      	ldr	r2, [pc, #72]	; (8000610 <GetCursor+0xbc>)
 80005c8:	8013      	strh	r3, [r2, #0]
		CrPosY2 = 0;
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <GetCursor+0xc0>)
 80005cc:	8013      	strh	r3, [r2, #0]
		CrPosX3 = 0;
 80005ce:	4a12      	ldr	r2, [pc, #72]	; (8000618 <GetCursor+0xc4>)
 80005d0:	8013      	strh	r3, [r2, #0]
		CrPosY3 = 0;
 80005d2:	4a12      	ldr	r2, [pc, #72]	; (800061c <GetCursor+0xc8>)
 80005d4:	8013      	strh	r3, [r2, #0]
		CrPosX4 = 0;
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <GetCursor+0xcc>)
 80005d8:	8013      	strh	r3, [r2, #0]
		CrPosY4 = 0;
 80005da:	4a12      	ldr	r2, [pc, #72]	; (8000624 <GetCursor+0xd0>)
 80005dc:	8013      	strh	r3, [r2, #0]
		CrPosX5 = 0;
 80005de:	4a12      	ldr	r2, [pc, #72]	; (8000628 <GetCursor+0xd4>)
 80005e0:	8013      	strh	r3, [r2, #0]
		CrPosY5 = 0;
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <GetCursor+0xd8>)
 80005e4:	8013      	strh	r3, [r2, #0]
    	TS_State.touchX[0] = 0;
 80005e6:	4a07      	ldr	r2, [pc, #28]	; (8000604 <GetCursor+0xb0>)
 80005e8:	8053      	strh	r3, [r2, #2]
		TS_State.touchY[0] = 0;
 80005ea:	8193      	strh	r3, [r2, #12]
    	TS_State.touchX[1] = 0;
 80005ec:	8093      	strh	r3, [r2, #4]
		TS_State.touchY[1] = 0;
 80005ee:	81d3      	strh	r3, [r2, #14]
    	TS_State.touchX[2] = 0;
 80005f0:	80d3      	strh	r3, [r2, #6]
		TS_State.touchY[2] = 0;
 80005f2:	8213      	strh	r3, [r2, #16]
    	TS_State.touchX[3] = 0;
 80005f4:	8113      	strh	r3, [r2, #8]
		TS_State.touchY[3] = 0;
 80005f6:	8253      	strh	r3, [r2, #18]
    	TS_State.touchX[4] = 0;
 80005f8:	8153      	strh	r3, [r2, #10]
		TS_State.touchY[4] = 0;
 80005fa:	8293      	strh	r3, [r2, #20]
		CrStatus = NotClicked;
 80005fc:	4a0c      	ldr	r2, [pc, #48]	; (8000630 <GetCursor+0xdc>)
 80005fe:	7013      	strb	r3, [r2, #0]
}
 8000600:	e7db      	b.n	80005ba <GetCursor+0x66>
 8000602:	bf00      	nop
 8000604:	20000034 	.word	0x20000034
 8000608:	2000007e 	.word	0x2000007e
 800060c:	20000088 	.word	0x20000088
 8000610:	20000080 	.word	0x20000080
 8000614:	2000008a 	.word	0x2000008a
 8000618:	20000082 	.word	0x20000082
 800061c:	2000008c 	.word	0x2000008c
 8000620:	20000084 	.word	0x20000084
 8000624:	2000008e 	.word	0x2000008e
 8000628:	20000086 	.word	0x20000086
 800062c:	20000090 	.word	0x20000090
 8000630:	20000093 	.word	0x20000093

08000634 <Get565Color>:
uint32 Color_A888_(uint32 Color, uint8 Alpha) //преобразует отдельные значения цвета  и прозрачности в формат А888(альфа канал + 24 бита цвета)
{
	return Color | Alpha << 24;
}
uint16 Get565Color(uint32 Color) //Возвращает значение цвета в формате пикселя 565(5 бит - красный цвет, 6 - зеленый, 5 - синий)
{
 8000634:	b500      	push	{lr}
   uint8 R, G, B;
   R = (Color >> 16) & 0xff;
   G = (Color >> 8) & 0xff;
   B = Color & 0xff;

   R = 31 * R / 255;
 8000636:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800063a:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 800063e:	4912      	ldr	r1, [pc, #72]	; (8000688 <Get565Color+0x54>)
 8000640:	fb81 c203 	smull	ip, r2, r1, r3
 8000644:	441a      	add	r2, r3
 8000646:	17db      	asrs	r3, r3, #31
 8000648:	ebc3 12e2 	rsb	r2, r3, r2, asr #7
   G = 63 * G / 255;
 800064c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000650:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8000654:	fb81 ec03 	smull	lr, ip, r1, r3
 8000658:	449c      	add	ip, r3
 800065a:	17db      	asrs	r3, r3, #31
 800065c:	ebc3 13ec 	rsb	r3, r3, ip, asr #7
   B = 31 * B / 255;
 8000660:	b2c0      	uxtb	r0, r0
 8000662:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8000666:	fb81 c100 	smull	ip, r1, r1, r0
 800066a:	4401      	add	r1, r0
 800066c:	17c0      	asrs	r0, r0, #31
 800066e:	ebc0 10e1 	rsb	r0, r0, r1, asr #7
 8000672:	b2c0      	uxtb	r0, r0

   RezColor |= B;
   RezColor |= (G << 5);
 8000674:	b2db      	uxtb	r3, r3
 8000676:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   RezColor |= (R << 11);
 800067a:	b2d2      	uxtb	r2, r2
 800067c:	ea40 20c2 	orr.w	r0, r0, r2, lsl #11

   return RezColor;
}
 8000680:	b280      	uxth	r0, r0
 8000682:	f85d fb04 	ldr.w	pc, [sp], #4
 8000686:	bf00      	nop
 8000688:	80808081 	.word	0x80808081

0800068c <TouchCnt>:

uint8 TouchCnt()
{
	uint8 TC = 0;

	if(CrPosX1>0 && CrPosY1>0)
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <TouchCnt+0x80>)
 800068e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000692:	2b00      	cmp	r3, #0
 8000694:	dd08      	ble.n	80006a8 <TouchCnt+0x1c>
 8000696:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <TouchCnt+0x84>)
 8000698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069c:	2b00      	cmp	r3, #0
 800069e:	dd01      	ble.n	80006a4 <TouchCnt+0x18>
		TC++;
 80006a0:	2001      	movs	r0, #1
 80006a2:	e002      	b.n	80006aa <TouchCnt+0x1e>
	uint8 TC = 0;
 80006a4:	2000      	movs	r0, #0
 80006a6:	e000      	b.n	80006aa <TouchCnt+0x1e>
 80006a8:	2000      	movs	r0, #0

	if(CrPosX2>0 && CrPosY2>0)
 80006aa:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <TouchCnt+0x88>)
 80006ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	dd06      	ble.n	80006c2 <TouchCnt+0x36>
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <TouchCnt+0x8c>)
 80006b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	dd01      	ble.n	80006c2 <TouchCnt+0x36>
			TC++;
 80006be:	3001      	adds	r0, #1
 80006c0:	b2c0      	uxtb	r0, r0

	if(CrPosX3>0 && CrPosY3>0)
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <TouchCnt+0x90>)
 80006c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	dd06      	ble.n	80006da <TouchCnt+0x4e>
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <TouchCnt+0x94>)
 80006ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	dd01      	ble.n	80006da <TouchCnt+0x4e>
			TC++;
 80006d6:	3001      	adds	r0, #1
 80006d8:	b2c0      	uxtb	r0, r0

	if(CrPosX4>0 && CrPosY4>0)
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <TouchCnt+0x98>)
 80006dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	dd06      	ble.n	80006f2 <TouchCnt+0x66>
 80006e4:	4b10      	ldr	r3, [pc, #64]	; (8000728 <TouchCnt+0x9c>)
 80006e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	dd01      	ble.n	80006f2 <TouchCnt+0x66>
			TC++;
 80006ee:	3001      	adds	r0, #1
 80006f0:	b2c0      	uxtb	r0, r0

	if(CrPosX5>0 && CrPosY5>0)
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <TouchCnt+0xa0>)
 80006f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	dd06      	ble.n	800070a <TouchCnt+0x7e>
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <TouchCnt+0xa4>)
 80006fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000702:	2b00      	cmp	r3, #0
 8000704:	dd01      	ble.n	800070a <TouchCnt+0x7e>
			TC++;
 8000706:	3001      	adds	r0, #1
 8000708:	b2c0      	uxtb	r0, r0

	return TC;
}
 800070a:	4770      	bx	lr
 800070c:	2000007e 	.word	0x2000007e
 8000710:	20000088 	.word	0x20000088
 8000714:	20000080 	.word	0x20000080
 8000718:	2000008a 	.word	0x2000008a
 800071c:	20000082 	.word	0x20000082
 8000720:	2000008c 	.word	0x2000008c
 8000724:	20000084 	.word	0x20000084
 8000728:	2000008e 	.word	0x2000008e
 800072c:	20000086 	.word	0x20000086
 8000730:	20000090 	.word	0x20000090

08000734 <isTouch>:
uint8 isTouch()
{
 8000734:	b570      	push	{r4, r5, r6, lr}
	static int16 Dist;

	uint8 RetSt = NotClicked;
	int16 X1_move = 0, Y1_move = 0;

	GetCursor();
 8000736:	f7ff ff0d 	bl	8000554 <GetCursor>
	if(CrStatus == Clicked)
 800073a:	4b71      	ldr	r3, [pc, #452]	; (8000900 <isTouch+0x1cc>)
 800073c:	781d      	ldrb	r5, [r3, #0]
 800073e:	2d01      	cmp	r5, #1
 8000740:	d010      	beq.n	8000764 <isTouch+0x30>

		}
	}
	else
	{
		x1 = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	4a6f      	ldr	r2, [pc, #444]	; (8000904 <isTouch+0x1d0>)
 8000746:	8013      	strh	r3, [r2, #0]
	    y1 = 0;
 8000748:	4a6f      	ldr	r2, [pc, #444]	; (8000908 <isTouch+0x1d4>)
 800074a:	8013      	strh	r3, [r2, #0]

	    Dist = 0;
 800074c:	4a6f      	ldr	r2, [pc, #444]	; (800090c <isTouch+0x1d8>)
 800074e:	8013      	strh	r3, [r2, #0]
	    CrStep = 0;
 8000750:	4a6f      	ldr	r2, [pc, #444]	; (8000910 <isTouch+0x1dc>)
 8000752:	8013      	strh	r3, [r2, #0]

		if(CrSt == Clicked)
 8000754:	4b6f      	ldr	r3, [pc, #444]	; (8000914 <isTouch+0x1e0>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b01      	cmp	r3, #1
 800075a:	f000 80cb 	beq.w	80008f4 <isTouch+0x1c0>
			CrSt = NotClicked;
			RetSt = Unclicked;
		}
		else
		{
			RetSt = NotClicked;
 800075e:	2400      	movs	r4, #0
		}
	}

	return RetSt;

}
 8000760:	4620      	mov	r0, r4
 8000762:	bd70      	pop	{r4, r5, r6, pc}
		CrSt = Clicked;
 8000764:	4b6b      	ldr	r3, [pc, #428]	; (8000914 <isTouch+0x1e0>)
 8000766:	2201      	movs	r2, #1
 8000768:	701a      	strb	r2, [r3, #0]
		if(TouchCnt() == 1)
 800076a:	f7ff ff8f 	bl	800068c <TouchCnt>
 800076e:	4604      	mov	r4, r0
 8000770:	2801      	cmp	r0, #1
 8000772:	d026      	beq.n	80007c2 <isTouch+0x8e>
		RetSt = Clicked;
 8000774:	462c      	mov	r4, r5
		if(TouchCnt() == 2)
 8000776:	f7ff ff89 	bl	800068c <TouchCnt>
 800077a:	2802      	cmp	r0, #2
 800077c:	d1f0      	bne.n	8000760 <isTouch+0x2c>
			if(Dist != 0 && Dist > 0)
 800077e:	4b63      	ldr	r3, [pc, #396]	; (800090c <isTouch+0x1d8>)
 8000780:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dd7b      	ble.n	8000880 <isTouch+0x14c>
				if((CrPosX2 - CrPosX1) + (CrPosY2 - CrPosY1) > Dist)
 8000788:	4a63      	ldr	r2, [pc, #396]	; (8000918 <isTouch+0x1e4>)
 800078a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800078e:	4963      	ldr	r1, [pc, #396]	; (800091c <isTouch+0x1e8>)
 8000790:	f9b1 0000 	ldrsh.w	r0, [r1]
 8000794:	1a14      	subs	r4, r2, r0
 8000796:	4962      	ldr	r1, [pc, #392]	; (8000920 <isTouch+0x1ec>)
 8000798:	f9b1 1000 	ldrsh.w	r1, [r1]
 800079c:	4d61      	ldr	r5, [pc, #388]	; (8000924 <isTouch+0x1f0>)
 800079e:	f9b5 5000 	ldrsh.w	r5, [r5]
 80007a2:	eba1 0c05 	sub.w	ip, r1, r5
 80007a6:	4464      	add	r4, ip
 80007a8:	429c      	cmp	r4, r3
 80007aa:	dd5f      	ble.n	800086c <isTouch+0x138>
					CrStep = (CrPosX2 - CrPosX1) + (CrPosY2 - CrPosY1) - Dist;
 80007ac:	1a12      	subs	r2, r2, r0
 80007ae:	fa1f f18c 	uxth.w	r1, ip
 80007b2:	fa11 f282 	uxtah	r2, r1, r2
 80007b6:	b292      	uxth	r2, r2
 80007b8:	1ad2      	subs	r2, r2, r3
 80007ba:	4955      	ldr	r1, [pc, #340]	; (8000910 <isTouch+0x1dc>)
 80007bc:	800a      	strh	r2, [r1, #0]
					RetSt = ZoomOut;
 80007be:	2408      	movs	r4, #8
 80007c0:	e05f      	b.n	8000882 <isTouch+0x14e>
            if(x1 != 0)
 80007c2:	4b50      	ldr	r3, [pc, #320]	; (8000904 <isTouch+0x1d0>)
 80007c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d038      	beq.n	800083e <isTouch+0x10a>
            	X1_move = CrPosX1 - x1;
 80007cc:	4a53      	ldr	r2, [pc, #332]	; (800091c <isTouch+0x1e8>)
 80007ce:	f8b2 c000 	ldrh.w	ip, [r2]
 80007d2:	fa1f fe83 	uxth.w	lr, r3
 80007d6:	ebac 020e 	sub.w	r2, ip, lr
 80007da:	b213      	sxth	r3, r2
                Y1_move = CrPosY1 - y1;
 80007dc:	4a51      	ldr	r2, [pc, #324]	; (8000924 <isTouch+0x1f0>)
 80007de:	8816      	ldrh	r6, [r2, #0]
 80007e0:	4a49      	ldr	r2, [pc, #292]	; (8000908 <isTouch+0x1d4>)
 80007e2:	8811      	ldrh	r1, [r2, #0]
 80007e4:	1a72      	subs	r2, r6, r1
 80007e6:	b212      	sxth	r2, r2
                if(X1_move > 3)
 80007e8:	2b03      	cmp	r3, #3
 80007ea:	dd06      	ble.n	80007fa <isTouch+0xc6>
                	if(Y1_move < 0)
 80007ec:	2a00      	cmp	r2, #0
 80007ee:	db2f      	blt.n	8000850 <isTouch+0x11c>
                	if(X1_move > Y1_move)
 80007f0:	429a      	cmp	r2, r3
 80007f2:	da02      	bge.n	80007fa <isTouch+0xc6>
                	{ RetSt = RightSwap; CrStep = X1_move;}
 80007f4:	4846      	ldr	r0, [pc, #280]	; (8000910 <isTouch+0x1dc>)
 80007f6:	8003      	strh	r3, [r0, #0]
 80007f8:	2406      	movs	r4, #6
                if(X1_move < -3)
 80007fa:	f113 0f03 	cmn.w	r3, #3
 80007fe:	da09      	bge.n	8000814 <isTouch+0xe0>
                	if(Y1_move < 0)
 8000800:	2a00      	cmp	r2, #0
 8000802:	db28      	blt.n	8000856 <isTouch+0x122>
                	X1_move = x1 - CrPosX1;
 8000804:	ebae 000c 	sub.w	r0, lr, ip
 8000808:	b203      	sxth	r3, r0
                	if(X1_move > Y1_move)
 800080a:	429a      	cmp	r2, r3
 800080c:	da02      	bge.n	8000814 <isTouch+0xe0>
                	{ RetSt = LeftSwap; CrStep = X1_move;}
 800080e:	4840      	ldr	r0, [pc, #256]	; (8000910 <isTouch+0x1dc>)
 8000810:	8003      	strh	r3, [r0, #0]
 8000812:	2405      	movs	r4, #5
                if(Y1_move > 3)
 8000814:	2a03      	cmp	r2, #3
 8000816:	dd06      	ble.n	8000826 <isTouch+0xf2>
                	if(X1_move < 0)
 8000818:	2b00      	cmp	r3, #0
 800081a:	db1f      	blt.n	800085c <isTouch+0x128>
                	if(Y1_move > X1_move)
 800081c:	4293      	cmp	r3, r2
 800081e:	da02      	bge.n	8000826 <isTouch+0xf2>
                	{ RetSt = DownSwap; CrStep = Y1_move; }
 8000820:	483b      	ldr	r0, [pc, #236]	; (8000910 <isTouch+0x1dc>)
 8000822:	8002      	strh	r2, [r0, #0]
 8000824:	2404      	movs	r4, #4
                if(Y1_move < -3)
 8000826:	f112 0f03 	cmn.w	r2, #3
 800082a:	da08      	bge.n	800083e <isTouch+0x10a>
                	if(X1_move < 0)
 800082c:	2b00      	cmp	r3, #0
 800082e:	db19      	blt.n	8000864 <isTouch+0x130>
                	Y1_move = y1 - CrPosY1;
 8000830:	1b89      	subs	r1, r1, r6
 8000832:	b209      	sxth	r1, r1
                	if(Y1_move > X1_move)
 8000834:	428b      	cmp	r3, r1
 8000836:	da02      	bge.n	800083e <isTouch+0x10a>
                	{ RetSt = UpSwap; CrStep = Y1_move;}
 8000838:	4b35      	ldr	r3, [pc, #212]	; (8000910 <isTouch+0x1dc>)
 800083a:	8019      	strh	r1, [r3, #0]
 800083c:	2403      	movs	r4, #3
            x1 = CrPosX1;
 800083e:	4b37      	ldr	r3, [pc, #220]	; (800091c <isTouch+0x1e8>)
 8000840:	881a      	ldrh	r2, [r3, #0]
 8000842:	4b30      	ldr	r3, [pc, #192]	; (8000904 <isTouch+0x1d0>)
 8000844:	801a      	strh	r2, [r3, #0]
            y1 = CrPosY1;
 8000846:	4b37      	ldr	r3, [pc, #220]	; (8000924 <isTouch+0x1f0>)
 8000848:	881a      	ldrh	r2, [r3, #0]
 800084a:	4b2f      	ldr	r3, [pc, #188]	; (8000908 <isTouch+0x1d4>)
 800084c:	801a      	strh	r2, [r3, #0]
 800084e:	e792      	b.n	8000776 <isTouch+0x42>
                	{ Y1_move = y1 - CrPosY1; }
 8000850:	1b8a      	subs	r2, r1, r6
 8000852:	b212      	sxth	r2, r2
 8000854:	e7cc      	b.n	80007f0 <isTouch+0xbc>
                	{ Y1_move = y1 - CrPosY1; }
 8000856:	1b8a      	subs	r2, r1, r6
 8000858:	b212      	sxth	r2, r2
 800085a:	e7d3      	b.n	8000804 <isTouch+0xd0>
                	{ X1_move = x1 - CrPosX1; }
 800085c:	ebae 030c 	sub.w	r3, lr, ip
 8000860:	b21b      	sxth	r3, r3
 8000862:	e7db      	b.n	800081c <isTouch+0xe8>
                	{ X1_move = x1 - CrPosX1; }
 8000864:	ebae 030c 	sub.w	r3, lr, ip
 8000868:	b21b      	sxth	r3, r3
 800086a:	e7e1      	b.n	8000830 <isTouch+0xfc>
					CrStep = Dist - (CrPosX2 - CrPosX1) + (CrPosY2 - CrPosY1);
 800086c:	1a82      	subs	r2, r0, r2
 800086e:	441a      	add	r2, r3
 8000870:	1b49      	subs	r1, r1, r5
 8000872:	b289      	uxth	r1, r1
 8000874:	fa11 f182 	uxtah	r1, r1, r2
 8000878:	4a25      	ldr	r2, [pc, #148]	; (8000910 <isTouch+0x1dc>)
 800087a:	8011      	strh	r1, [r2, #0]
					RetSt = ZoomOut;
 800087c:	2408      	movs	r4, #8
 800087e:	e000      	b.n	8000882 <isTouch+0x14e>
			RetSt = Clicked;
 8000880:	462c      	mov	r4, r5
			if(Dist != 0 && Dist < 0)
 8000882:	2b00      	cmp	r3, #0
 8000884:	db0f      	blt.n	80008a6 <isTouch+0x172>
			Dist = (CrPosX2 - CrPosX1) + (CrPosY2 - CrPosY1);
 8000886:	4b24      	ldr	r3, [pc, #144]	; (8000918 <isTouch+0x1e4>)
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	4a24      	ldr	r2, [pc, #144]	; (800091c <isTouch+0x1e8>)
 800088c:	8812      	ldrh	r2, [r2, #0]
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	4a23      	ldr	r2, [pc, #140]	; (8000920 <isTouch+0x1ec>)
 8000892:	8812      	ldrh	r2, [r2, #0]
 8000894:	4923      	ldr	r1, [pc, #140]	; (8000924 <isTouch+0x1f0>)
 8000896:	8809      	ldrh	r1, [r1, #0]
 8000898:	1a52      	subs	r2, r2, r1
 800089a:	b292      	uxth	r2, r2
 800089c:	fa12 f383 	uxtah	r3, r2, r3
 80008a0:	4a1a      	ldr	r2, [pc, #104]	; (800090c <isTouch+0x1d8>)
 80008a2:	8013      	strh	r3, [r2, #0]
 80008a4:	e75c      	b.n	8000760 <isTouch+0x2c>
				if((CrPosX2 - CrPosX1) + (CrPosY2 - CrPosY1) < Dist)
 80008a6:	4a1c      	ldr	r2, [pc, #112]	; (8000918 <isTouch+0x1e4>)
 80008a8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80008ac:	491b      	ldr	r1, [pc, #108]	; (800091c <isTouch+0x1e8>)
 80008ae:	f9b1 0000 	ldrsh.w	r0, [r1]
 80008b2:	1a14      	subs	r4, r2, r0
 80008b4:	491a      	ldr	r1, [pc, #104]	; (8000920 <isTouch+0x1ec>)
 80008b6:	f9b1 1000 	ldrsh.w	r1, [r1]
 80008ba:	4d1a      	ldr	r5, [pc, #104]	; (8000924 <isTouch+0x1f0>)
 80008bc:	f9b5 5000 	ldrsh.w	r5, [r5]
 80008c0:	eba1 0c05 	sub.w	ip, r1, r5
 80008c4:	4464      	add	r4, ip
 80008c6:	429c      	cmp	r4, r3
 80008c8:	da09      	bge.n	80008de <isTouch+0x1aa>
					CrStep = Dist - (CrPosX2 - CrPosX1) + (CrPosY2 - CrPosY1);
 80008ca:	1a82      	subs	r2, r0, r2
 80008cc:	4413      	add	r3, r2
 80008ce:	fa1f f18c 	uxth.w	r1, ip
 80008d2:	fa11 f183 	uxtah	r1, r1, r3
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <isTouch+0x1dc>)
 80008d8:	8019      	strh	r1, [r3, #0]
					RetSt = ZoomIn;
 80008da:	2407      	movs	r4, #7
 80008dc:	e7d3      	b.n	8000886 <isTouch+0x152>
					CrStep = (CrPosX2 - CrPosX1) + (CrPosY2 - CrPosY1) - Dist;
 80008de:	1a12      	subs	r2, r2, r0
 80008e0:	1b49      	subs	r1, r1, r5
 80008e2:	b289      	uxth	r1, r1
 80008e4:	fa11 f282 	uxtah	r2, r1, r2
 80008e8:	b292      	uxth	r2, r2
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	4a08      	ldr	r2, [pc, #32]	; (8000910 <isTouch+0x1dc>)
 80008ee:	8013      	strh	r3, [r2, #0]
					RetSt = ZoomOut;
 80008f0:	2408      	movs	r4, #8
 80008f2:	e7c8      	b.n	8000886 <isTouch+0x152>
			CrSt = NotClicked;
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <isTouch+0x1e0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
			RetSt = Unclicked;
 80008fa:	2402      	movs	r4, #2
 80008fc:	e730      	b.n	8000760 <isTouch+0x2c>
 80008fe:	bf00      	nop
 8000900:	20000093 	.word	0x20000093
 8000904:	200000c0 	.word	0x200000c0
 8000908:	200000c2 	.word	0x200000c2
 800090c:	20000096 	.word	0x20000096
 8000910:	20000094 	.word	0x20000094
 8000914:	20000092 	.word	0x20000092
 8000918:	20000080 	.word	0x20000080
 800091c:	2000007e 	.word	0x2000007e
 8000920:	2000008a 	.word	0x2000008a
 8000924:	20000088 	.word	0x20000088

08000928 <TransitionValue>:
int16 TransitionValue()
{
	return CrStep;
}
 8000928:	4b01      	ldr	r3, [pc, #4]	; (8000930 <TransitionValue+0x8>)
 800092a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800092e:	4770      	bx	lr
 8000930:	20000094 	.word	0x20000094

08000934 <Graphics_Init>:


void Graphics_Init(DisplayConfig *dcf) //Инициализация самой бибиллиотеки а также инициализация графических устройств(дисплей, графические ускорители, тач-панели)
{
 8000934:	b508      	push	{r3, lr}
	DispHeight = dcf->Display_Height;
 8000936:	6842      	ldr	r2, [r0, #4]
 8000938:	4b20      	ldr	r3, [pc, #128]	; (80009bc <Graphics_Init+0x88>)
 800093a:	601a      	str	r2, [r3, #0]
	DispWidth = dcf->Display_Width;
 800093c:	6882      	ldr	r2, [r0, #8]
 800093e:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <Graphics_Init+0x8c>)
 8000940:	601a      	str	r2, [r3, #0]
	ColorType = dcf->Color_Type;
 8000942:	7b02      	ldrb	r2, [r0, #12]
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <Graphics_Init+0x90>)
 8000946:	701a      	strb	r2, [r3, #0]

	WindowFrameColor = dcf->Window_Frame_Color;
 8000948:	6901      	ldr	r1, [r0, #16]
 800094a:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <Graphics_Init+0x94>)
 800094c:	6019      	str	r1, [r3, #0]
    WindowBarColor = dcf->Window_Bar_Color;
 800094e:	6941      	ldr	r1, [r0, #20]
 8000950:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <Graphics_Init+0x98>)
 8000952:	6019      	str	r1, [r3, #0]
    WindowBarHColor = dcf->Window_Bar_H_Color;
 8000954:	6981      	ldr	r1, [r0, #24]
 8000956:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <Graphics_Init+0x9c>)
 8000958:	6019      	str	r1, [r3, #0]
    WindowBarLColor = dcf->Window_Bar_L_Color;
 800095a:	69c1      	ldr	r1, [r0, #28]
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <Graphics_Init+0xa0>)
 800095e:	6019      	str	r1, [r3, #0]
    WindowColor = dcf->Window_Color;
 8000960:	6a01      	ldr	r1, [r0, #32]
 8000962:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <Graphics_Init+0xa4>)
 8000964:	6019      	str	r1, [r3, #0]
    WindowTextColor = dcf->Window_Text_Color;
 8000966:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8000968:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <Graphics_Init+0xa8>)
 800096a:	6019      	str	r1, [r3, #0]
    WindowFrameThickness = dcf->Window_Frame_Thickness;
 800096c:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <Graphics_Init+0xac>)
 8000972:	7019      	strb	r1, [r3, #0]

    ButtonFrameColor = dcf->Button_Frame_Color;
 8000974:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8000976:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <Graphics_Init+0xb0>)
 8000978:	6019      	str	r1, [r3, #0]
    ButtonColor = dcf->Button_Color;
 800097a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800097c:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <Graphics_Init+0xb4>)
 800097e:	6019      	str	r1, [r3, #0]
    ButtonSelectedColor = dcf->Button_Selected_Color;
 8000980:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <Graphics_Init+0xb8>)
 8000984:	6019      	str	r1, [r3, #0]
    ButtonTextColor = dcf->Button_Text_Color;
 8000986:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <Graphics_Init+0xbc>)
 800098a:	6019      	str	r1, [r3, #0]

    LabelColor = dcf->Label_Color;
 800098c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <Graphics_Init+0xc0>)
 8000990:	6019      	str	r1, [r3, #0]
    LabelSelectedColor = dcf->Label_Selected_Color;
 8000992:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <Graphics_Init+0xc4>)
 8000996:	6019      	str	r1, [r3, #0]
    LabelBackgroundColor = dcf->Label_Background_Color;
 8000998:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <Graphics_Init+0xc8>)
 800099c:	6019      	str	r1, [r3, #0]

	BarColor = dcf-> Bar_Color;
 800099e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <Graphics_Init+0xcc>)
 80009a2:	6019      	str	r1, [r3, #0]
    BarColor2 = dcf-> Bar_Color2;
 80009a4:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <Graphics_Init+0xd0>)
 80009a8:	6019      	str	r1, [r3, #0]
    BarColor3 = dcf-> Bar_Color3;
 80009aa:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80009ac:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <Graphics_Init+0xd4>)
 80009ae:	6019      	str	r1, [r3, #0]

	Init_Graphics_System(dcf->Start_RAM_Address, dcf->Layers, dcf->Color_Type);
 80009b0:	7b41      	ldrb	r1, [r0, #13]
 80009b2:	6800      	ldr	r0, [r0, #0]
 80009b4:	f7ff fdaa 	bl	800050c <Init_Graphics_System>
}
 80009b8:	bd08      	pop	{r3, pc}
 80009ba:	bf00      	nop
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000004 	.word	0x20000004
 80009c4:	2000007c 	.word	0x2000007c
 80009c8:	200000b4 	.word	0x200000b4
 80009cc:	200000a4 	.word	0x200000a4
 80009d0:	200000a8 	.word	0x200000a8
 80009d4:	200000ac 	.word	0x200000ac
 80009d8:	200000b0 	.word	0x200000b0
 80009dc:	200000bc 	.word	0x200000bc
 80009e0:	200000b8 	.word	0x200000b8
 80009e4:	20000070 	.word	0x20000070
 80009e8:	2000006c 	.word	0x2000006c
 80009ec:	20000074 	.word	0x20000074
 80009f0:	20000078 	.word	0x20000078
 80009f4:	2000009c 	.word	0x2000009c
 80009f8:	200000a0 	.word	0x200000a0
 80009fc:	20000098 	.word	0x20000098
 8000a00:	20000060 	.word	0x20000060
 8000a04:	20000064 	.word	0x20000064
 8000a08:	20000068 	.word	0x20000068

08000a0c <Fill_Display>:
void Fill_Display(uint32 Color) //Заливает весь дисплей определенным цветом
{
 8000a0c:	b510      	push	{r4, lr}
 8000a0e:	4604      	mov	r4, r0

	if(ColorType == Color565)
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <Fill_Display+0x38>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b143      	cbz	r3, 8000a28 <Fill_Display+0x1c>
	{ Fill_all(Get565Color(Color)); }

	if(ColorType == Color888)
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <Fill_Display+0x38>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d009      	beq.n	8000a32 <Fill_Display+0x26>
	{ Fill_all(Color | 0xFF << 24); }

	if(ColorType == Color_A888)
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <Fill_Display+0x38>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d00a      	beq.n	8000a3c <Fill_Display+0x30>
	{ Fill_all(Color); }
}
 8000a26:	bd10      	pop	{r4, pc}
	{ Fill_all(Get565Color(Color)); }
 8000a28:	f7ff fe04 	bl	8000634 <Get565Color>
 8000a2c:	f7ff fd76 	bl	800051c <Fill_all>
 8000a30:	e7f1      	b.n	8000a16 <Fill_Display+0xa>
	{ Fill_all(Color | 0xFF << 24); }
 8000a32:	f044 407f 	orr.w	r0, r4, #4278190080	; 0xff000000
 8000a36:	f7ff fd71 	bl	800051c <Fill_all>
 8000a3a:	e7f0      	b.n	8000a1e <Fill_Display+0x12>
	{ Fill_all(Color); }
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	f7ff fd6d 	bl	800051c <Fill_all>
}
 8000a42:	e7f0      	b.n	8000a26 <Fill_Display+0x1a>
 8000a44:	2000007c 	.word	0x2000007c

08000a48 <Pixel>:
void Pixel(uint16 x, uint16 y, uint32 Color, uint16 Thickness)
{
 8000a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a4c:	4617      	mov	r7, r2
  uint16 i, j, tolsx, tolsy;
  x--; y--;
 8000a4e:	3801      	subs	r0, #1
 8000a50:	fa1f f880 	uxth.w	r8, r0
 8000a54:	3901      	subs	r1, #1
 8000a56:	b28d      	uxth	r5, r1
  tolsy = y+Thickness;
 8000a58:	eb05 0903 	add.w	r9, r5, r3
 8000a5c:	fa1f f989 	uxth.w	r9, r9
  tolsx = x+Thickness;
 8000a60:	4443      	add	r3, r8
 8000a62:	b29e      	uxth	r6, r3
  for(i = y; i<tolsy; i++)
 8000a64:	e02f      	b.n	8000ac6 <Pixel+0x7e>
		  if(i < DispHeight && j < DispWidth)
		  {
			  if(ColorType == Color565)
			  { MemPoint(j,i,Get565Color(Color)); }

			  if(ColorType == Color888)
 8000a66:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <Pixel+0x8c>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d01c      	beq.n	8000aa8 <Pixel+0x60>
			  { MemPoint(j,i,Color | 0xFF << 24); }

			  if(ColorType == Color_A888)
 8000a6e:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <Pixel+0x8c>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d01f      	beq.n	8000ab6 <Pixel+0x6e>
	  for(j = x; j<tolsx; j++)
 8000a76:	3401      	adds	r4, #1
 8000a78:	b2a4      	uxth	r4, r4
 8000a7a:	42b4      	cmp	r4, r6
 8000a7c:	d221      	bcs.n	8000ac2 <Pixel+0x7a>
		  if(i < DispHeight && j < DispWidth)
 8000a7e:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <Pixel+0x90>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	429d      	cmp	r5, r3
 8000a84:	d2f7      	bcs.n	8000a76 <Pixel+0x2e>
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <Pixel+0x94>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	429c      	cmp	r4, r3
 8000a8c:	d2f3      	bcs.n	8000a76 <Pixel+0x2e>
			  if(ColorType == Color565)
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <Pixel+0x8c>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d1e7      	bne.n	8000a66 <Pixel+0x1e>
			  { MemPoint(j,i,Get565Color(Color)); }
 8000a96:	4638      	mov	r0, r7
 8000a98:	f7ff fdcc 	bl	8000634 <Get565Color>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	4629      	mov	r1, r5
 8000aa0:	4620      	mov	r0, r4
 8000aa2:	f7ff fd49 	bl	8000538 <MemPoint>
 8000aa6:	e7de      	b.n	8000a66 <Pixel+0x1e>
			  { MemPoint(j,i,Color | 0xFF << 24); }
 8000aa8:	f047 427f 	orr.w	r2, r7, #4278190080	; 0xff000000
 8000aac:	4629      	mov	r1, r5
 8000aae:	4620      	mov	r0, r4
 8000ab0:	f7ff fd42 	bl	8000538 <MemPoint>
 8000ab4:	e7db      	b.n	8000a6e <Pixel+0x26>
			  { MemPoint(j,i,Color); }
 8000ab6:	463a      	mov	r2, r7
 8000ab8:	4629      	mov	r1, r5
 8000aba:	4620      	mov	r0, r4
 8000abc:	f7ff fd3c 	bl	8000538 <MemPoint>
 8000ac0:	e7d9      	b.n	8000a76 <Pixel+0x2e>
  for(i = y; i<tolsy; i++)
 8000ac2:	3501      	adds	r5, #1
 8000ac4:	b2ad      	uxth	r5, r5
 8000ac6:	454d      	cmp	r5, r9
 8000ac8:	d201      	bcs.n	8000ace <Pixel+0x86>
	  for(j = x; j<tolsx; j++)
 8000aca:	4644      	mov	r4, r8
 8000acc:	e7d5      	b.n	8000a7a <Pixel+0x32>
	      }
	  }
  }
}
 8000ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000007c 	.word	0x2000007c
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	20000004 	.word	0x20000004

08000ae0 <Circle>:
		   }
	   }
   }
}
void Circle (int16 x1, int16 y1, int16 r,uint32 Color, uint16 Thickness)
{
 8000ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ae4:	b087      	sub	sp, #28
 8000ae6:	9004      	str	r0, [sp, #16]
 8000ae8:	9105      	str	r1, [sp, #20]
 8000aea:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
    int x = -r, y = 0, err = 2-2*r, e2;
 8000aee:	4257      	negs	r7, r2
 8000af0:	f1c2 0201 	rsb	r2, r2, #1
 8000af4:	0056      	lsls	r6, r2, #1
 8000af6:	2200      	movs	r2, #0
 8000af8:	9201      	str	r2, [sp, #4]
 8000afa:	4699      	mov	r9, r3
 8000afc:	e008      	b.n	8000b10 <Circle+0x30>
 8000afe:	4633      	mov	r3, r6
		e2 = err;
		if (e2 <= y) {
			err += ++y*2+1;
			if (-x == y && e2 <= x) e2 = 0;
		}
		if (e2 > x) err += ++x*2+1;
 8000b00:	42b7      	cmp	r7, r6
 8000b02:	da43      	bge.n	8000b8c <Circle+0xac>
 8000b04:	3701      	adds	r7, #1
 8000b06:	007e      	lsls	r6, r7, #1
 8000b08:	3601      	adds	r6, #1
 8000b0a:	441e      	add	r6, r3
	} while (x <= 0);
 8000b0c:	2f00      	cmp	r7, #0
 8000b0e:	dc3f      	bgt.n	8000b90 <Circle+0xb0>
		Pixel(x1-x, y1+y,Color,Thickness);
 8000b10:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8000b14:	fa1f fa87 	uxth.w	sl, r7
 8000b18:	9302      	str	r3, [sp, #8]
 8000b1a:	eba3 050a 	sub.w	r5, r3, sl
 8000b1e:	b2ad      	uxth	r5, r5
 8000b20:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8000b24:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8000b28:	9303      	str	r3, [sp, #12]
 8000b2a:	eb03 0804 	add.w	r8, r3, r4
 8000b2e:	fa1f f888 	uxth.w	r8, r8
 8000b32:	465b      	mov	r3, fp
 8000b34:	464a      	mov	r2, r9
 8000b36:	4641      	mov	r1, r8
 8000b38:	4628      	mov	r0, r5
 8000b3a:	f7ff ff85 	bl	8000a48 <Pixel>
		Pixel(x1+x, y1+y,Color,Thickness);
 8000b3e:	9b02      	ldr	r3, [sp, #8]
 8000b40:	449a      	add	sl, r3
 8000b42:	fa1f fa8a 	uxth.w	sl, sl
 8000b46:	465b      	mov	r3, fp
 8000b48:	464a      	mov	r2, r9
 8000b4a:	4641      	mov	r1, r8
 8000b4c:	4650      	mov	r0, sl
 8000b4e:	f7ff ff7b 	bl	8000a48 <Pixel>
		Pixel(x1+x, y1-y,Color,Thickness);
 8000b52:	9903      	ldr	r1, [sp, #12]
 8000b54:	1a64      	subs	r4, r4, r1
 8000b56:	b2a4      	uxth	r4, r4
 8000b58:	465b      	mov	r3, fp
 8000b5a:	464a      	mov	r2, r9
 8000b5c:	4621      	mov	r1, r4
 8000b5e:	4650      	mov	r0, sl
 8000b60:	f7ff ff72 	bl	8000a48 <Pixel>
		Pixel(x1-x, y1-y,Color,Thickness);
 8000b64:	465b      	mov	r3, fp
 8000b66:	464a      	mov	r2, r9
 8000b68:	4621      	mov	r1, r4
 8000b6a:	4628      	mov	r0, r5
 8000b6c:	f7ff ff6c 	bl	8000a48 <Pixel>
		if (e2 <= y) {
 8000b70:	9a01      	ldr	r2, [sp, #4]
 8000b72:	42b2      	cmp	r2, r6
 8000b74:	dbc3      	blt.n	8000afe <Circle+0x1e>
			err += ++y*2+1;
 8000b76:	3201      	adds	r2, #1
 8000b78:	9201      	str	r2, [sp, #4]
 8000b7a:	0053      	lsls	r3, r2, #1
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	4433      	add	r3, r6
			if (-x == y && e2 <= x) e2 = 0;
 8000b80:	42fa      	cmn	r2, r7
 8000b82:	d1bd      	bne.n	8000b00 <Circle+0x20>
 8000b84:	42b7      	cmp	r7, r6
 8000b86:	dbbb      	blt.n	8000b00 <Circle+0x20>
 8000b88:	2600      	movs	r6, #0
 8000b8a:	e7b9      	b.n	8000b00 <Circle+0x20>
 8000b8c:	461e      	mov	r6, r3
 8000b8e:	e7bd      	b.n	8000b0c <Circle+0x2c>
}
 8000b90:	b007      	add	sp, #28
 8000b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000b98 <TS_IO_Read>:
extern I2C_HandleTypeDef hi2c3;
static ft5336_handle_TypeDef ft5336_handle = {FT5336_I2C_NOT_INITIALIZED, 0, 0};
static uint8_t tsOrientation;

uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000b98:	b500      	push	{lr}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f88d 3017 	strb.w	r3, [sp, #23]
  HAL_I2C_Mem_Read(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &read_value, 1, 0x1000);
 8000ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba8:	9302      	str	r3, [sp, #8]
 8000baa:	2301      	movs	r3, #1
 8000bac:	9301      	str	r3, [sp, #4]
 8000bae:	f10d 0117 	add.w	r1, sp, #23
 8000bb2:	9100      	str	r1, [sp, #0]
 8000bb4:	4601      	mov	r1, r0
 8000bb6:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <TS_IO_Read+0x30>)
 8000bb8:	f002 f828 	bl	8002c0c <HAL_I2C_Mem_Read>
  return read_value;
}
 8000bbc:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000bc0:	b007      	add	sp, #28
 8000bc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bc6:	bf00      	nop
 8000bc8:	2003fd88 	.word	0x2003fd88

08000bcc <TS_IO_Write>:
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000bcc:	b500      	push	{lr}
 8000bce:	b087      	sub	sp, #28
 8000bd0:	f88d 2017 	strb.w	r2, [sp, #23]
  HAL_StatusTypeDef status = HAL_OK;
  HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x1000);
 8000bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd8:	9302      	str	r3, [sp, #8]
 8000bda:	2301      	movs	r3, #1
 8000bdc:	9301      	str	r3, [sp, #4]
 8000bde:	f10d 0217 	add.w	r2, sp, #23
 8000be2:	9200      	str	r2, [sp, #0]
 8000be4:	460a      	mov	r2, r1
 8000be6:	4601      	mov	r1, r0
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <TS_IO_Write+0x28>)
 8000bea:	f001 ff39 	bl	8002a60 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
  {}
}
 8000bee:	b007      	add	sp, #28
 8000bf0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bf4:	2003fd88 	.word	0x2003fd88

08000bf8 <ft5336_TS_GetGestureID>:
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8000bf8:	b510      	push	{r4, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	460c      	mov	r4, r1
  volatile uint8_t ucReadData = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8000c04:	2101      	movs	r1, #1
 8000c06:	b2c0      	uxtb	r0, r0
 8000c08:	f7ff ffc6 	bl	8000b98 <TS_IO_Read>
 8000c0c:	f88d 0007 	strb.w	r0, [sp, #7]
  *pGestureId = ucReadData;
 8000c10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000c14:	6023      	str	r3, [r4, #0]

}
 8000c16:	b002      	add	sp, #8
 8000c18:	bd10      	pop	{r4, pc}
	...

08000c1c <TS_GetTouchInfo>:
void TS_GetTouchInfo(uint16_t DeviceAddr, uint32_t touchIdx, uint32_t * pWeight, uint32_t * pArea, uint32_t * pEvent)
{
 8000c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	461d      	mov	r5, r3
  volatile uint8_t ucReadData = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t regAddressXHigh = 0;
  uint8_t regAddressPWeight = 0;
  uint8_t regAddressPMisc = 0;
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000c2a:	4b33      	ldr	r3, [pc, #204]	; (8000cf8 <TS_GetTouchInfo+0xdc>)
 8000c2c:	785b      	ldrb	r3, [r3, #1]
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d95e      	bls.n	8000cf0 <TS_GetTouchInfo+0xd4>
 8000c32:	4616      	mov	r6, r2
  {
	switch(touchIdx)
 8000c34:	2909      	cmp	r1, #9
 8000c36:	d806      	bhi.n	8000c46 <TS_GetTouchInfo+0x2a>
 8000c38:	e8df f001 	tbb	[pc, r1]
 8000c3c:	130e0936 	.word	0x130e0936
 8000c40:	27221d18 	.word	0x27221d18
 8000c44:	312c      	.short	0x312c
 8000c46:	2700      	movs	r7, #0
 8000c48:	46b8      	mov	r8, r7
 8000c4a:	4639      	mov	r1, r7
 8000c4c:	e030      	b.n	8000cb0 <TS_GetTouchInfo+0x94>
	    regAddressPMisc = FT5336_P1_MISC_REG;
	    break;
	  case 1 :
	    regAddressXHigh = FT5336_P2_XH_REG;
	    regAddressPWeight = FT5336_P2_WEIGHT_REG;
	    regAddressPMisc = FT5336_P2_MISC_REG;
 8000c4e:	270e      	movs	r7, #14
	    regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000c50:	f04f 080d 	mov.w	r8, #13
	    regAddressXHigh = FT5336_P2_XH_REG;
 8000c54:	2109      	movs	r1, #9
	    break;
 8000c56:	e02b      	b.n	8000cb0 <TS_GetTouchInfo+0x94>
	  case 2 :
	    regAddressXHigh = FT5336_P3_XH_REG;
	    regAddressPWeight = FT5336_P3_WEIGHT_REG;
	    regAddressPMisc = FT5336_P3_MISC_REG;
 8000c58:	2714      	movs	r7, #20
	    regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000c5a:	f04f 0813 	mov.w	r8, #19
	    regAddressXHigh = FT5336_P3_XH_REG;
 8000c5e:	210f      	movs	r1, #15
	    break;
 8000c60:	e026      	b.n	8000cb0 <TS_GetTouchInfo+0x94>
	  case 3 :
	    regAddressXHigh = FT5336_P4_XH_REG;
	    regAddressPWeight = FT5336_P4_WEIGHT_REG;
	    regAddressPMisc = FT5336_P4_MISC_REG;
 8000c62:	271a      	movs	r7, #26
	    regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000c64:	f04f 0819 	mov.w	r8, #25
	    regAddressXHigh = FT5336_P4_XH_REG;
 8000c68:	2115      	movs	r1, #21
	    break;
 8000c6a:	e021      	b.n	8000cb0 <TS_GetTouchInfo+0x94>
	  case 4 :
	    regAddressXHigh = FT5336_P5_XH_REG;
	    regAddressPWeight = FT5336_P5_WEIGHT_REG;
	    regAddressPMisc = FT5336_P5_MISC_REG;
 8000c6c:	2720      	movs	r7, #32
	    regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000c6e:	f04f 081f 	mov.w	r8, #31
	    regAddressXHigh = FT5336_P5_XH_REG;
 8000c72:	211b      	movs	r1, #27
	    break;
 8000c74:	e01c      	b.n	8000cb0 <TS_GetTouchInfo+0x94>
	  case 5 :
	    regAddressXHigh = FT5336_P6_XH_REG;
	    regAddressPWeight = FT5336_P6_WEIGHT_REG;
	    regAddressPMisc = FT5336_P6_MISC_REG;
 8000c76:	2726      	movs	r7, #38	; 0x26
	    regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8000c78:	f04f 0825 	mov.w	r8, #37	; 0x25
	    regAddressXHigh = FT5336_P6_XH_REG;
 8000c7c:	2121      	movs	r1, #33	; 0x21
	    break;
 8000c7e:	e017      	b.n	8000cb0 <TS_GetTouchInfo+0x94>
	  case 6 :
	    regAddressXHigh = FT5336_P7_XH_REG;
	    regAddressPWeight = FT5336_P7_WEIGHT_REG;
	    regAddressPMisc = FT5336_P7_MISC_REG;
 8000c80:	272c      	movs	r7, #44	; 0x2c
	    regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000c82:	f04f 082b 	mov.w	r8, #43	; 0x2b
	    regAddressXHigh = FT5336_P7_XH_REG;
 8000c86:	2127      	movs	r1, #39	; 0x27
	    break;
 8000c88:	e012      	b.n	8000cb0 <TS_GetTouchInfo+0x94>
	  case 7 :
	    regAddressXHigh = FT5336_P8_XH_REG;
	    regAddressPWeight = FT5336_P8_WEIGHT_REG;
	    regAddressPMisc = FT5336_P8_MISC_REG;
 8000c8a:	2732      	movs	r7, #50	; 0x32
	    regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000c8c:	f04f 0831 	mov.w	r8, #49	; 0x31
	    regAddressXHigh = FT5336_P8_XH_REG;
 8000c90:	212d      	movs	r1, #45	; 0x2d
	    break;
 8000c92:	e00d      	b.n	8000cb0 <TS_GetTouchInfo+0x94>
	  case 8 :
	    regAddressXHigh = FT5336_P9_XH_REG;
	    regAddressPWeight = FT5336_P9_WEIGHT_REG;
	    regAddressPMisc = FT5336_P9_MISC_REG;
 8000c94:	2738      	movs	r7, #56	; 0x38
	    regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000c96:	f04f 0837 	mov.w	r8, #55	; 0x37
	    regAddressXHigh = FT5336_P9_XH_REG;
 8000c9a:	2133      	movs	r1, #51	; 0x33
	    break;
 8000c9c:	e008      	b.n	8000cb0 <TS_GetTouchInfo+0x94>
	  case 9 :
	    regAddressXHigh = FT5336_P10_XH_REG;
	    regAddressPWeight = FT5336_P10_WEIGHT_REG;
	    regAddressPMisc = FT5336_P10_MISC_REG;
 8000c9e:	273e      	movs	r7, #62	; 0x3e
	    regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000ca0:	f04f 083d 	mov.w	r8, #61	; 0x3d
	    regAddressXHigh = FT5336_P10_XH_REG;
 8000ca4:	2139      	movs	r1, #57	; 0x39
	    break;
 8000ca6:	e003      	b.n	8000cb0 <TS_GetTouchInfo+0x94>
	    regAddressPMisc = FT5336_P1_MISC_REG;
 8000ca8:	2708      	movs	r7, #8
	    regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000caa:	f04f 0807 	mov.w	r8, #7
	    regAddressXHigh = FT5336_P1_XH_REG;
 8000cae:	2103      	movs	r1, #3
	  default :
	    break;
	}
	ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000cb0:	b2c4      	uxtb	r4, r0
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	f7ff ff70 	bl	8000b98 <TS_IO_Read>
 8000cb8:	f88d 0007 	strb.w	r0, [sp, #7]
	* pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000cbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000cc0:	099b      	lsrs	r3, r3, #6
 8000cc2:	9a08      	ldr	r2, [sp, #32]
 8000cc4:	6013      	str	r3, [r2, #0]
	ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000cc6:	4641      	mov	r1, r8
 8000cc8:	4620      	mov	r0, r4
 8000cca:	f7ff ff65 	bl	8000b98 <TS_IO_Read>
 8000cce:	f88d 0007 	strb.w	r0, [sp, #7]
	* pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000cd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000cd6:	6033      	str	r3, [r6, #0]
	ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000cd8:	4639      	mov	r1, r7
 8000cda:	4620      	mov	r0, r4
 8000cdc:	f7ff ff5c 	bl	8000b98 <TS_IO_Read>
 8000ce0:	f88d 0007 	strb.w	r0, [sp, #7]
	* pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000ce4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000ce8:	091b      	lsrs	r3, r3, #4
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	602b      	str	r3, [r5, #0]
  }
}
 8000cf0:	b002      	add	sp, #8
 8000cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200000f0 	.word	0x200000f0

08000cfc <Touch_ReadID>:
uint16_t Touch_ReadID(uint16_t DeviceAddr)
{
 8000cfc:	b570      	push	{r4, r5, r6, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	4606      	mov	r6, r0
  volatile uint8_t ucReadId = 0;
 8000d02:	2400      	movs	r4, #0
 8000d04:	f88d 4007 	strb.w	r4, [sp, #7]
  uint8_t nbReadAttempts = 0;
  int8_t bFoundDevice = 0;
 8000d08:	4625      	mov	r5, r4
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000d0a:	e001      	b.n	8000d10 <Touch_ReadID+0x14>
 8000d0c:	3401      	adds	r4, #1
 8000d0e:	b2e4      	uxtb	r4, r4
 8000d10:	f085 0301 	eor.w	r3, r5, #1
 8000d14:	2c02      	cmp	r4, #2
 8000d16:	bf8c      	ite	hi
 8000d18:	2300      	movhi	r3, #0
 8000d1a:	f003 0301 	andls.w	r3, r3, #1
 8000d1e:	b163      	cbz	r3, 8000d3a <Touch_ReadID+0x3e>
  {
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000d20:	21a8      	movs	r1, #168	; 0xa8
 8000d22:	b2f0      	uxtb	r0, r6
 8000d24:	f7ff ff38 	bl	8000b98 <TS_IO_Read>
 8000d28:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 8000d2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b51      	cmp	r3, #81	; 0x51
 8000d34:	d1ea      	bne.n	8000d0c <Touch_ReadID+0x10>
    {
      bFoundDevice = 1;
 8000d36:	2501      	movs	r5, #1
 8000d38:	e7e8      	b.n	8000d0c <Touch_ReadID+0x10>
    }
  }
  return (ucReadId);
 8000d3a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8000d3e:	b002      	add	sp, #8
 8000d40:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d44 <TS_DetectTouch>:
uint8_t TS_DetectTouch(uint16_t DeviceAddr)
{
 8000d44:	b500      	push	{lr}
 8000d46:	b083      	sub	sp, #12
  volatile uint8_t nbTouch = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f88d 3007 	strb.w	r3, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000d4e:	2102      	movs	r1, #2
 8000d50:	b2c0      	uxtb	r0, r0
 8000d52:	f7ff ff21 	bl	8000b98 <TS_IO_Read>
 8000d56:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000d5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000d66:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b05      	cmp	r3, #5
 8000d6e:	d902      	bls.n	8000d76 <TS_DetectTouch+0x32>
  {
    nbTouch = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000d76:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000d7a:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <TS_DetectTouch+0x48>)
 8000d7c:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8000d7e:	2200      	movs	r2, #0
 8000d80:	709a      	strb	r2, [r3, #2]
  return (nbTouch);
 8000d82:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8000d86:	b003      	add	sp, #12
 8000d88:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d8c:	200000f0 	.word	0x200000f0

08000d90 <TS_GetXY>:
void TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	4615      	mov	r5, r2
  volatile uint8_t ucReadData = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f88d 3007 	strb.w	r3, [sp, #7]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
  uint8_t regAddressXHigh = 0;
  uint8_t regAddressYLow = 0;
  uint8_t regAddressYHigh = 0;
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000d9e:	4a4f      	ldr	r2, [pc, #316]	; (8000edc <TS_GetXY+0x14c>)
 8000da0:	7893      	ldrb	r3, [r2, #2]
 8000da2:	7852      	ldrb	r2, [r2, #1]
 8000da4:	4293      	cmp	r3, r2
 8000da6:	f080 8096 	bcs.w	8000ed6 <TS_GetXY+0x146>
 8000daa:	460f      	mov	r7, r1
  {
	switch(ft5336_handle.currActiveTouchIdx)
 8000dac:	2b09      	cmp	r3, #9
 8000dae:	d806      	bhi.n	8000dbe <TS_GetXY+0x2e>
 8000db0:	e8df f003 	tbb	[pc, r3]
 8000db4:	1b130b53 	.word	0x1b130b53
 8000db8:	3b332b23 	.word	0x3b332b23
 8000dbc:	4b43      	.short	0x4b43
 8000dbe:	f04f 0800 	mov.w	r8, #0
 8000dc2:	46c1      	mov	r9, r8
 8000dc4:	46c2      	mov	sl, r8
 8000dc6:	4641      	mov	r1, r8
 8000dc8:	e04e      	b.n	8000e68 <TS_GetXY+0xd8>

	  case 1 :
	    regAddressXLow = FT5336_P2_XL_REG;
	    regAddressXHigh = FT5336_P2_XH_REG;
	    regAddressYLow = FT5336_P2_YL_REG;
	    regAddressYHigh = FT5336_P2_YH_REG;
 8000dca:	f04f 080b 	mov.w	r8, #11
	    regAddressYLow = FT5336_P2_YL_REG;
 8000dce:	f04f 090c 	mov.w	r9, #12
	    regAddressXHigh = FT5336_P2_XH_REG;
 8000dd2:	f04f 0a09 	mov.w	sl, #9
	    regAddressXLow = FT5336_P2_XL_REG;
 8000dd6:	210a      	movs	r1, #10
	    break;
 8000dd8:	e046      	b.n	8000e68 <TS_GetXY+0xd8>

	  case 2 :
	    regAddressXLow = FT5336_P3_XL_REG;
	    regAddressXHigh = FT5336_P3_XH_REG;
	    regAddressYLow = FT5336_P3_YL_REG;
	    regAddressYHigh = FT5336_P3_YH_REG;
 8000dda:	f04f 0811 	mov.w	r8, #17
	    regAddressYLow = FT5336_P3_YL_REG;
 8000dde:	f04f 0912 	mov.w	r9, #18
	    regAddressXHigh = FT5336_P3_XH_REG;
 8000de2:	f04f 0a0f 	mov.w	sl, #15
	    regAddressXLow = FT5336_P3_XL_REG;
 8000de6:	2110      	movs	r1, #16
	    break;
 8000de8:	e03e      	b.n	8000e68 <TS_GetXY+0xd8>

	  case 3 :
	    regAddressXLow = FT5336_P4_XL_REG;
	    regAddressXHigh = FT5336_P4_XH_REG;
	    regAddressYLow = FT5336_P4_YL_REG;
	    regAddressYHigh = FT5336_P4_YH_REG;
 8000dea:	f04f 0817 	mov.w	r8, #23
	    regAddressYLow = FT5336_P4_YL_REG;
 8000dee:	f04f 0918 	mov.w	r9, #24
	    regAddressXHigh = FT5336_P4_XH_REG;
 8000df2:	f04f 0a15 	mov.w	sl, #21
	    regAddressXLow = FT5336_P4_XL_REG;
 8000df6:	2116      	movs	r1, #22
	    break;
 8000df8:	e036      	b.n	8000e68 <TS_GetXY+0xd8>

	  case 4 :
	    regAddressXLow = FT5336_P5_XL_REG;
	    regAddressXHigh = FT5336_P5_XH_REG;
	    regAddressYLow = FT5336_P5_YL_REG;
	    regAddressYHigh = FT5336_P5_YH_REG;
 8000dfa:	f04f 081d 	mov.w	r8, #29
	    regAddressYLow = FT5336_P5_YL_REG;
 8000dfe:	f04f 091e 	mov.w	r9, #30
	    regAddressXHigh = FT5336_P5_XH_REG;
 8000e02:	f04f 0a1b 	mov.w	sl, #27
	    regAddressXLow = FT5336_P5_XL_REG;
 8000e06:	211c      	movs	r1, #28
	    break;
 8000e08:	e02e      	b.n	8000e68 <TS_GetXY+0xd8>

	  case 5 :
	    regAddressXLow = FT5336_P6_XL_REG;
	    regAddressXHigh = FT5336_P6_XH_REG;
	    regAddressYLow = FT5336_P6_YL_REG;
	    regAddressYHigh = FT5336_P6_YH_REG;
 8000e0a:	f04f 0823 	mov.w	r8, #35	; 0x23
	    regAddressYLow = FT5336_P6_YL_REG;
 8000e0e:	f04f 0924 	mov.w	r9, #36	; 0x24
	    regAddressXHigh = FT5336_P6_XH_REG;
 8000e12:	f04f 0a21 	mov.w	sl, #33	; 0x21
	    regAddressXLow = FT5336_P6_XL_REG;
 8000e16:	2122      	movs	r1, #34	; 0x22
	    break;
 8000e18:	e026      	b.n	8000e68 <TS_GetXY+0xd8>

	  case 6 :
	    regAddressXLow = FT5336_P7_XL_REG;
	    regAddressXHigh = FT5336_P7_XH_REG;
	    regAddressYLow = FT5336_P7_YL_REG;
	    regAddressYHigh = FT5336_P7_YH_REG;
 8000e1a:	f04f 0829 	mov.w	r8, #41	; 0x29
	    regAddressYLow = FT5336_P7_YL_REG;
 8000e1e:	f04f 092a 	mov.w	r9, #42	; 0x2a
	    regAddressXHigh = FT5336_P7_XH_REG;
 8000e22:	f04f 0a27 	mov.w	sl, #39	; 0x27
	    regAddressXLow = FT5336_P7_XL_REG;
 8000e26:	2128      	movs	r1, #40	; 0x28
	    break;
 8000e28:	e01e      	b.n	8000e68 <TS_GetXY+0xd8>

	  case 7 :
	    regAddressXLow = FT5336_P8_XL_REG;
	    regAddressXHigh = FT5336_P8_XH_REG;
	    regAddressYLow = FT5336_P8_YL_REG;
	    regAddressYHigh = FT5336_P8_YH_REG;
 8000e2a:	f04f 082f 	mov.w	r8, #47	; 0x2f
	    regAddressYLow = FT5336_P8_YL_REG;
 8000e2e:	f04f 0930 	mov.w	r9, #48	; 0x30
	    regAddressXHigh = FT5336_P8_XH_REG;
 8000e32:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
	    regAddressXLow = FT5336_P8_XL_REG;
 8000e36:	212e      	movs	r1, #46	; 0x2e
	    break;
 8000e38:	e016      	b.n	8000e68 <TS_GetXY+0xd8>

	  case 8 :
	    regAddressXLow = FT5336_P9_XL_REG;
	    regAddressXHigh = FT5336_P9_XH_REG;
	    regAddressYLow = FT5336_P9_YL_REG;
	    regAddressYHigh = FT5336_P9_YH_REG;
 8000e3a:	f04f 0835 	mov.w	r8, #53	; 0x35
	    regAddressYLow = FT5336_P9_YL_REG;
 8000e3e:	f04f 0936 	mov.w	r9, #54	; 0x36
	    regAddressXHigh = FT5336_P9_XH_REG;
 8000e42:	f04f 0a33 	mov.w	sl, #51	; 0x33
	    regAddressXLow = FT5336_P9_XL_REG;
 8000e46:	2134      	movs	r1, #52	; 0x34
	    break;
 8000e48:	e00e      	b.n	8000e68 <TS_GetXY+0xd8>

	  case 9 :
	    regAddressXLow = FT5336_P10_XL_REG;
	    regAddressXHigh = FT5336_P10_XH_REG;
	    regAddressYLow = FT5336_P10_YL_REG;
	    regAddressYHigh = FT5336_P10_YH_REG;
 8000e4a:	f04f 083b 	mov.w	r8, #59	; 0x3b
	    regAddressYLow = FT5336_P10_YL_REG;
 8000e4e:	f04f 093c 	mov.w	r9, #60	; 0x3c
	    regAddressXHigh = FT5336_P10_XH_REG;
 8000e52:	f04f 0a39 	mov.w	sl, #57	; 0x39
	    regAddressXLow = FT5336_P10_XL_REG;
 8000e56:	213a      	movs	r1, #58	; 0x3a
	    break;
 8000e58:	e006      	b.n	8000e68 <TS_GetXY+0xd8>
	    regAddressYHigh = FT5336_P1_YH_REG;
 8000e5a:	f04f 0805 	mov.w	r8, #5
	    regAddressYLow = FT5336_P1_YL_REG;
 8000e5e:	f04f 0906 	mov.w	r9, #6
	    regAddressXHigh = FT5336_P1_XH_REG;
 8000e62:	f04f 0a03 	mov.w	sl, #3
	    regAddressXLow = FT5336_P1_XL_REG;
 8000e66:	2104      	movs	r1, #4

	  default :

	    break;
	}
	ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000e68:	b2c4      	uxtb	r4, r0
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	f7ff fe94 	bl	8000b98 <TS_IO_Read>
 8000e70:	f88d 0007 	strb.w	r0, [sp, #7]
	coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000e74:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000e78:	4e19      	ldr	r6, [pc, #100]	; (8000ee0 <TS_GetXY+0x150>)
 8000e7a:	8033      	strh	r3, [r6, #0]
	ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000e7c:	4651      	mov	r1, sl
 8000e7e:	4620      	mov	r0, r4
 8000e80:	f7ff fe8a 	bl	8000b98 <TS_IO_Read>
 8000e84:	f88d 0007 	strb.w	r0, [sp, #7]
	coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000e88:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000e92:	8832      	ldrh	r2, [r6, #0]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	8033      	strh	r3, [r6, #0]
	*X = coord;
 8000e9a:	803b      	strh	r3, [r7, #0]
	ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000e9c:	4649      	mov	r1, r9
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	f7ff fe7a 	bl	8000b98 <TS_IO_Read>
 8000ea4:	f88d 0007 	strb.w	r0, [sp, #7]
	coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000ea8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000eac:	8033      	strh	r3, [r6, #0]
	ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000eae:	4641      	mov	r1, r8
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	f7ff fe71 	bl	8000b98 <TS_IO_Read>
 8000eb6:	f88d 0007 	strb.w	r0, [sp, #7]
	coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000eba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000ec4:	8832      	ldrh	r2, [r6, #0]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	8033      	strh	r3, [r6, #0]
	*Y = coord;
 8000ecc:	802b      	strh	r3, [r5, #0]
	ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000ece:	4a03      	ldr	r2, [pc, #12]	; (8000edc <TS_GetXY+0x14c>)
 8000ed0:	7893      	ldrb	r3, [r2, #2]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	7093      	strb	r3, [r2, #2]
  }
}
 8000ed6:	b002      	add	sp, #8
 8000ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000edc:	200000f0 	.word	0x200000f0
 8000ee0:	200000ec 	.word	0x200000ec

08000ee4 <TS_Get_GestureId>:
uint8_t TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8000ee4:	b510      	push	{r4, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	4604      	mov	r4, r0
  uint32_t gestureId = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	9301      	str	r3, [sp, #4]
  uint8_t ts_status = TS_OK;
  ft5336_TS_GetGestureID(TS_I2C_ADDRESS, &gestureId);
 8000eee:	a901      	add	r1, sp, #4
 8000ef0:	2070      	movs	r0, #112	; 0x70
 8000ef2:	f7ff fe81 	bl	8000bf8 <ft5336_TS_GetGestureID>
  switch(gestureId)
 8000ef6:	9b01      	ldr	r3, [sp, #4]
 8000ef8:	2b1c      	cmp	r3, #28
 8000efa:	d812      	bhi.n	8000f22 <TS_Get_GestureId+0x3e>
 8000efc:	2b1c      	cmp	r3, #28
 8000efe:	d831      	bhi.n	8000f64 <TS_Get_GestureId+0x80>
 8000f00:	e8df f003 	tbb	[pc, r3]
 8000f04:	30303019 	.word	0x30303019
 8000f08:	30303030 	.word	0x30303030
 8000f0c:	30303030 	.word	0x30303030
 8000f10:	30303030 	.word	0x30303030
 8000f14:	3030301c 	.word	0x3030301c
 8000f18:	30303020 	.word	0x30303020
 8000f1c:	30303024 	.word	0x30303024
 8000f20:	28          	.byte	0x28
 8000f21:	00          	.byte	0x00
 8000f22:	2b40      	cmp	r3, #64	; 0x40
 8000f24:	d01a      	beq.n	8000f5c <TS_Get_GestureId+0x78>
 8000f26:	2b49      	cmp	r3, #73	; 0x49
 8000f28:	d103      	bne.n	8000f32 <TS_Get_GestureId+0x4e>
      break;
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
      break;
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8000f2a:	2306      	movs	r3, #6
 8000f2c:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t ts_status = TS_OK;
 8000f2e:	2000      	movs	r0, #0
      break;
 8000f30:	e019      	b.n	8000f66 <TS_Get_GestureId+0x82>
  switch(gestureId)
 8000f32:	2001      	movs	r0, #1
 8000f34:	e017      	b.n	8000f66 <TS_Get_GestureId+0x82>
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8000f36:	2000      	movs	r0, #0
 8000f38:	62a0      	str	r0, [r4, #40]	; 0x28
      break;
 8000f3a:	e014      	b.n	8000f66 <TS_Get_GestureId+0x82>
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t ts_status = TS_OK;
 8000f40:	2000      	movs	r0, #0
      break;
 8000f42:	e010      	b.n	8000f66 <TS_Get_GestureId+0x82>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8000f44:	2302      	movs	r3, #2
 8000f46:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t ts_status = TS_OK;
 8000f48:	2000      	movs	r0, #0
      break;
 8000f4a:	e00c      	b.n	8000f66 <TS_Get_GestureId+0x82>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t ts_status = TS_OK;
 8000f50:	2000      	movs	r0, #0
      break;
 8000f52:	e008      	b.n	8000f66 <TS_Get_GestureId+0x82>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8000f54:	2304      	movs	r3, #4
 8000f56:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t ts_status = TS_OK;
 8000f58:	2000      	movs	r0, #0
      break;
 8000f5a:	e004      	b.n	8000f66 <TS_Get_GestureId+0x82>
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8000f5c:	2305      	movs	r3, #5
 8000f5e:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t ts_status = TS_OK;
 8000f60:	2000      	movs	r0, #0
      break;
 8000f62:	e000      	b.n	8000f66 <TS_Get_GestureId+0x82>
  switch(gestureId)
 8000f64:	2001      	movs	r0, #1
    default :
      ts_status = TS_ERROR;
      break;
  } /* of switch(gestureId) */
  return(ts_status);
}
 8000f66:	b002      	add	sp, #8
 8000f68:	bd10      	pop	{r4, pc}
	...

08000f6c <TS_GetState>:
uint8_t TS_GetState(TS_StateTypeDef *TS_State)
{
 8000f6c:	b530      	push	{r4, r5, lr}
 8000f6e:	b093      	sub	sp, #76	; 0x4c
 8000f70:	4605      	mov	r5, r0
  uint16_t brute_x[TS_MAX_NB_TOUCH];
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
  uint32_t weight = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	9305      	str	r3, [sp, #20]
  uint32_t area = 0;
 8000f76:	9304      	str	r3, [sp, #16]
  uint32_t event = 0;
 8000f78:	9303      	str	r3, [sp, #12]
  TS_State->touchDetected = TS_DetectTouch(TS_I2C_ADDRESS);
 8000f7a:	2070      	movs	r0, #112	; 0x70
 8000f7c:	f7ff fee2 	bl	8000d44 <TS_DetectTouch>
 8000f80:	7028      	strb	r0, [r5, #0]
  if(TS_State->touchDetected)
 8000f82:	2800      	cmp	r0, #0
 8000f84:	f000 80a9 	beq.w	80010da <TS_GetState+0x16e>
  {
	for(index=0; index < TS_State->touchDetected; index++)
 8000f88:	2400      	movs	r4, #0
 8000f8a:	e017      	b.n	8000fbc <TS_GetState+0x50>
	{
	  TS_GetXY(TS_I2C_ADDRESS, &(brute_x[index]), &(brute_y[index]));
	  if(tsOrientation == TS_SWAP_NONE)
	  {
		x[index] = brute_x[index];
 8000f8c:	aa12      	add	r2, sp, #72	; 0x48
 8000f8e:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8000f92:	f832 1c24 	ldrh.w	r1, [r2, #-36]
 8000f96:	f822 1c0c 	strh.w	r1, [r2, #-12]
		y[index] = brute_y[index];
 8000f9a:	f832 1c30 	ldrh.w	r1, [r2, #-48]
 8000f9e:	f822 1c18 	strh.w	r1, [r2, #-24]
 8000fa2:	e01c      	b.n	8000fde <TS_GetState+0x72>
	  {
	    y[index] = brute_x[index];
	    x[index] = brute_y[index];
	  }
	  x[index] = brute_y[index];
	  x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	1a5b      	subs	r3, r3, r1
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	e04d      	b.n	8001048 <TS_GetState+0xdc>
	  y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8000fac:	b292      	uxth	r2, r2
 8000fae:	1a12      	subs	r2, r2, r0
 8000fb0:	b292      	uxth	r2, r2
 8000fb2:	e056      	b.n	8001062 <TS_GetState+0xf6>
	  TS_State->touchWeight[index] = weight;
	  TS_State->touchArea[index] = area;
	  switch(event)
	  {
	    case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN :
	      TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8000fb4:	192b      	adds	r3, r5, r4
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	76da      	strb	r2, [r3, #27]
	for(index=0; index < TS_State->touchDetected; index++)
 8000fba:	3401      	adds	r4, #1
 8000fbc:	782b      	ldrb	r3, [r5, #0]
 8000fbe:	42a3      	cmp	r3, r4
 8000fc0:	f240 8088 	bls.w	80010d4 <TS_GetState+0x168>
	  TS_GetXY(TS_I2C_ADDRESS, &(brute_x[index]), &(brute_y[index]));
 8000fc4:	ab06      	add	r3, sp, #24
 8000fc6:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 8000fca:	ab09      	add	r3, sp, #36	; 0x24
 8000fcc:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 8000fd0:	2070      	movs	r0, #112	; 0x70
 8000fd2:	f7ff fedd 	bl	8000d90 <TS_GetXY>
	  if(tsOrientation == TS_SWAP_NONE)
 8000fd6:	4b42      	ldr	r3, [pc, #264]	; (80010e0 <TS_GetState+0x174>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d0d6      	beq.n	8000f8c <TS_GetState+0x20>
	  if(tsOrientation & TS_SWAP_X)
 8000fde:	f013 0f02 	tst.w	r3, #2
 8000fe2:	d008      	beq.n	8000ff6 <TS_GetState+0x8a>
	    x[index] = 4096 - brute_x[index];
 8000fe4:	aa12      	add	r2, sp, #72	; 0x48
 8000fe6:	eb02 0144 	add.w	r1, r2, r4, lsl #1
 8000fea:	f831 2c24 	ldrh.w	r2, [r1, #-36]
 8000fee:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 8000ff2:	f821 2c0c 	strh.w	r2, [r1, #-12]
	  if(tsOrientation & TS_SWAP_Y)
 8000ff6:	f013 0f04 	tst.w	r3, #4
 8000ffa:	d008      	beq.n	800100e <TS_GetState+0xa2>
	    y[index] = 4096 - brute_y[index];
 8000ffc:	aa12      	add	r2, sp, #72	; 0x48
 8000ffe:	eb02 0144 	add.w	r1, r2, r4, lsl #1
 8001002:	f831 2c30 	ldrh.w	r2, [r1, #-48]
 8001006:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 800100a:	f821 2c18 	strh.w	r2, [r1, #-24]
	  if(tsOrientation & TS_SWAP_XY)
 800100e:	f013 0f08 	tst.w	r3, #8
 8001012:	d00a      	beq.n	800102a <TS_GetState+0xbe>
	    y[index] = brute_x[index];
 8001014:	ab12      	add	r3, sp, #72	; 0x48
 8001016:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800101a:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800101e:	f823 2c18 	strh.w	r2, [r3, #-24]
	    x[index] = brute_y[index];
 8001022:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8001026:	f823 2c0c 	strh.w	r2, [r3, #-12]
	  x[index] = brute_y[index];
 800102a:	ab12      	add	r3, sp, #72	; 0x48
 800102c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8001030:	f833 1c30 	ldrh.w	r1, [r3, #-48]
 8001034:	f823 1c0c 	strh.w	r1, [r3, #-12]
	  x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8001038:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <TS_GetState+0x178>)
 800103a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800103e:	4299      	cmp	r1, r3
 8001040:	d9b0      	bls.n	8000fa4 <TS_GetState+0x38>
 8001042:	b29b      	uxth	r3, r3
 8001044:	1acb      	subs	r3, r1, r3
 8001046:	b29b      	uxth	r3, r3
	  y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8001048:	aa12      	add	r2, sp, #72	; 0x48
 800104a:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 800104e:	f832 0c18 	ldrh.w	r0, [r2, #-24]
 8001052:	4a25      	ldr	r2, [pc, #148]	; (80010e8 <TS_GetState+0x17c>)
 8001054:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8001058:	4290      	cmp	r0, r2
 800105a:	d9a7      	bls.n	8000fac <TS_GetState+0x40>
 800105c:	b292      	uxth	r2, r2
 800105e:	1a82      	subs	r2, r0, r2
 8001060:	b292      	uxth	r2, r2
	  if ((x_diff + y_diff) > 5)
 8001062:	4413      	add	r3, r2
 8001064:	2b05      	cmp	r3, #5
 8001066:	dd05      	ble.n	8001074 <TS_GetState+0x108>
	    _x[index] = x[index];
 8001068:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <TS_GetState+0x178>)
 800106a:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	    _y[index] = y[index];
 800106e:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <TS_GetState+0x17c>)
 8001070:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	  TS_State->touchX[index] = x[index];
 8001074:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 8001078:	8059      	strh	r1, [r3, #2]
	  TS_State->touchY[index] = y[index];
 800107a:	1d23      	adds	r3, r4, #4
 800107c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8001080:	8098      	strh	r0, [r3, #4]
	  TS_GetTouchInfo(TS_I2C_ADDRESS, index, &weight, &area, &event);
 8001082:	ab03      	add	r3, sp, #12
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	ab04      	add	r3, sp, #16
 8001088:	aa05      	add	r2, sp, #20
 800108a:	4621      	mov	r1, r4
 800108c:	2070      	movs	r0, #112	; 0x70
 800108e:	f7ff fdc5 	bl	8000c1c <TS_GetTouchInfo>
	  TS_State->touchWeight[index] = weight;
 8001092:	192b      	adds	r3, r5, r4
 8001094:	9a05      	ldr	r2, [sp, #20]
 8001096:	759a      	strb	r2, [r3, #22]
	  TS_State->touchArea[index] = area;
 8001098:	9a04      	ldr	r2, [sp, #16]
 800109a:	f883 2020 	strb.w	r2, [r3, #32]
	  switch(event)
 800109e:	9b03      	ldr	r3, [sp, #12]
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d88a      	bhi.n	8000fba <TS_GetState+0x4e>
 80010a4:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <TS_GetState+0x140>)
 80010a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010aa:	bf00      	nop
 80010ac:	08000fb5 	.word	0x08000fb5
 80010b0:	080010bd 	.word	0x080010bd
 80010b4:	080010c5 	.word	0x080010c5
 80010b8:	080010cd 	.word	0x080010cd
	      break;
	    case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
	      TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80010bc:	192b      	adds	r3, r5, r4
 80010be:	2202      	movs	r2, #2
 80010c0:	76da      	strb	r2, [r3, #27]
	      break;
 80010c2:	e77a      	b.n	8000fba <TS_GetState+0x4e>
	    case FT5336_TOUCH_EVT_FLAG_CONTACT :
	      TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80010c4:	192b      	adds	r3, r5, r4
 80010c6:	2203      	movs	r2, #3
 80010c8:	76da      	strb	r2, [r3, #27]
	      break;
 80010ca:	e776      	b.n	8000fba <TS_GetState+0x4e>
	    case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
	      TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80010cc:	192b      	adds	r3, r5, r4
 80010ce:	2200      	movs	r2, #0
 80010d0:	76da      	strb	r2, [r3, #27]
	      break;
 80010d2:	e772      	b.n	8000fba <TS_GetState+0x4e>
	    default :
	      ts_status = TS_ERROR;
	      break;
	  }
	}
	ts_status = TS_Get_GestureId(TS_State);
 80010d4:	4628      	mov	r0, r5
 80010d6:	f7ff ff05 	bl	8000ee4 <TS_Get_GestureId>
  }
  return (ts_status);
}
 80010da:	b013      	add	sp, #76	; 0x4c
 80010dc:	bd30      	pop	{r4, r5, pc}
 80010de:	bf00      	nop
 80010e0:	200000f3 	.word	0x200000f3
 80010e4:	200000c4 	.word	0x200000c4
 80010e8:	200000d8 	.word	0x200000d8

080010ec <Touch_Init>:


void Touch_Init(void)
{
 80010ec:	b508      	push	{r3, lr}
  uint8_t regValue = 0;
  HAL_Delay(200);
 80010ee:	20c8      	movs	r0, #200	; 0xc8
 80010f0:	f001 f808 	bl	8002104 <HAL_Delay>
  if(Touch_ReadID(TS_I2C_ADDRESS) != FT5336_ID_VALUE)
 80010f4:	2070      	movs	r0, #112	; 0x70
 80010f6:	f7ff fe01 	bl	8000cfc <Touch_ReadID>
  {}
  tsOrientation = TS_SWAP_XY;
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <Touch_Init+0x28>)
 80010fc:	2208      	movs	r2, #8
 80010fe:	701a      	strb	r2, [r3, #0]

  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
  TS_IO_Write(TS_I2C_ADDRESS, FT5336_GMODE_REG, regValue);
 8001100:	2200      	movs	r2, #0
 8001102:	21a4      	movs	r1, #164	; 0xa4
 8001104:	2070      	movs	r0, #112	; 0x70
 8001106:	f7ff fd61 	bl	8000bcc <TS_IO_Write>
  ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800110a:	4b03      	ldr	r3, [pc, #12]	; (8001118 <Touch_Init+0x2c>)
 800110c:	2201      	movs	r2, #1
 800110e:	701a      	strb	r2, [r3, #0]
}
 8001110:	bd08      	pop	{r3, pc}
 8001112:	bf00      	nop
 8001114:	200000f3 	.word	0x200000f3
 8001118:	200000f0 	.word	0x200000f0

0800111c <MainFunc>:
short unsigned int RGB[272*480]; //Резервируем память для буффера дисплея
DisplayConfig ds;                //Основные параметры библиотеки


void MainFunc ()
{
 800111c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800111e:	b083      	sub	sp, #12
	  ds.Color_Type = Color565;
 8001120:	4c6e      	ldr	r4, [pc, #440]	; (80012dc <MainFunc+0x1c0>)
 8001122:	2500      	movs	r5, #0
 8001124:	7325      	strb	r5, [r4, #12]
	  ds.Display_Height = 272;
 8001126:	f44f 7388 	mov.w	r3, #272	; 0x110
 800112a:	6063      	str	r3, [r4, #4]
	  ds.Display_Width = 480;
 800112c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001130:	60a3      	str	r3, [r4, #8]
	  ds.Layers = 1;
 8001132:	2301      	movs	r3, #1
 8001134:	7363      	strb	r3, [r4, #13]
	  ds.Start_RAM_Address = (uint32)&RGB;
 8001136:	496a      	ldr	r1, [pc, #424]	; (80012e0 <MainFunc+0x1c4>)
 8001138:	6021      	str	r1, [r4, #0]

	  ds.Window_Frame_Color = red;
 800113a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 800113e:	6123      	str	r3, [r4, #16]
	  ds.Window_Bar_Color = lightBlue2;
 8001140:	4b68      	ldr	r3, [pc, #416]	; (80012e4 <MainFunc+0x1c8>)
 8001142:	6163      	str	r3, [r4, #20]
	  ds.Window_Bar_H_Color = blue;
 8001144:	23ff      	movs	r3, #255	; 0xff
 8001146:	61a3      	str	r3, [r4, #24]
	  ds.Window_Bar_L_Color = lightBlue4;
 8001148:	4a67      	ldr	r2, [pc, #412]	; (80012e8 <MainFunc+0x1cc>)
 800114a:	61e2      	str	r2, [r4, #28]
	  ds.Window_Color = white;
 800114c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8001150:	6222      	str	r2, [r4, #32]
	  ds.Window_Text_Color = black;
 8001152:	6265      	str	r5, [r4, #36]	; 0x24
	  ds.Window_Frame_Thickness = 2;
 8001154:	2202      	movs	r2, #2
 8001156:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

	  ds.Button_Frame_Color = lightBlack2;
 800115a:	4a64      	ldr	r2, [pc, #400]	; (80012ec <MainFunc+0x1d0>)
 800115c:	62e2      	str	r2, [r4, #44]	; 0x2c
	  ds.Button_Color = gray2;
 800115e:	4864      	ldr	r0, [pc, #400]	; (80012f0 <MainFunc+0x1d4>)
 8001160:	6320      	str	r0, [r4, #48]	; 0x30
	  ds.Button_Selected_Color = lightBlack3;
 8001162:	4864      	ldr	r0, [pc, #400]	; (80012f4 <MainFunc+0x1d8>)
 8001164:	6360      	str	r0, [r4, #52]	; 0x34
	  ds.Button_Text_Color = black;
 8001166:	63a5      	str	r5, [r4, #56]	; 0x38

	  ds.Label_Color = black;
 8001168:	63e5      	str	r5, [r4, #60]	; 0x3c
	  ds.Label_Selected_Color = lightBlack2;
 800116a:	6422      	str	r2, [r4, #64]	; 0x40
	  ds.Label_Background_Color = blue;
 800116c:	6463      	str	r3, [r4, #68]	; 0x44

	  ds.Bar_Color = darkGreen2;
 800116e:	f44f 4319 	mov.w	r3, #39168	; 0x9900
 8001172:	64a3      	str	r3, [r4, #72]	; 0x48
	  ds.Bar_Color2 = darkViolet2;
 8001174:	4b60      	ldr	r3, [pc, #384]	; (80012f8 <MainFunc+0x1dc>)
 8001176:	64e3      	str	r3, [r4, #76]	; 0x4c
	  ds.Bar_Color3 = lightViolet2;
 8001178:	f103 1366 	add.w	r3, r3, #6684774	; 0x660066
 800117c:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 8001180:	6523      	str	r3, [r4, #80]	; 0x50


	  HAL_LTDC_SetAddress(&hltdc,(uint32_t)&RGB,0);  // запускаем модуль LTDC (железный)
 8001182:	462a      	mov	r2, r5
 8001184:	485d      	ldr	r0, [pc, #372]	; (80012fc <MainFunc+0x1e0>)
 8001186:	f002 f86d 	bl	8003264 <HAL_LTDC_SetAddress>
	  Graphics_Init(&ds); //инит библиотеки (из структуры ds)
 800118a:	4620      	mov	r0, r4
 800118c:	f7ff fbd2 	bl	8000934 <Graphics_Init>

	  Fill_Display(black);
 8001190:	4628      	mov	r0, r5
 8001192:	f7ff fc3b 	bl	8000a0c <Fill_Display>

	  uint8 k = 0;

	  int16 x = 240, y = 135, r = 15;
 8001196:	250f      	movs	r5, #15
 8001198:	2787      	movs	r7, #135	; 0x87
 800119a:	26f0      	movs	r6, #240	; 0xf0
 800119c:	e081      	b.n	80012a2 <MainFunc+0x186>
		  k = isTouch();


          if(k == Clicked)
          {
        	  Circle(x, y, r, red, 3);
 800119e:	2303      	movs	r3, #3
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80011a6:	462a      	mov	r2, r5
 80011a8:	4639      	mov	r1, r7
 80011aa:	4630      	mov	r0, r6
 80011ac:	f7ff fc98 	bl	8000ae0 <Circle>
 80011b0:	e080      	b.n	80012b4 <MainFunc+0x198>
          }

          if(k == NotClicked)
          {
        	  Circle(x, y, r, gray, 3);
 80011b2:	2303      	movs	r3, #3
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	4b52      	ldr	r3, [pc, #328]	; (8001300 <MainFunc+0x1e4>)
 80011b8:	462a      	mov	r2, r5
 80011ba:	4639      	mov	r1, r7
 80011bc:	4630      	mov	r0, r6
 80011be:	f7ff fc8f 	bl	8000ae0 <Circle>
 80011c2:	e07a      	b.n	80012ba <MainFunc+0x19e>
          }


          if(k == LeftSwap)
          {
        	  if(x - TransitionValue() > 0)
 80011c4:	f7ff fbb0 	bl	8000928 <TransitionValue>
 80011c8:	1a30      	subs	r0, r6, r0
 80011ca:	2800      	cmp	r0, #0
 80011cc:	dc09      	bgt.n	80011e2 <MainFunc+0xc6>
        	  { x -= TransitionValue(); }
        	  else
        	  { x = 1;}
 80011ce:	2601      	movs	r6, #1

        	  Circle(x, y, r, gray, 3);
 80011d0:	2303      	movs	r3, #3
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	4b4a      	ldr	r3, [pc, #296]	; (8001300 <MainFunc+0x1e4>)
 80011d6:	462a      	mov	r2, r5
 80011d8:	4639      	mov	r1, r7
 80011da:	4630      	mov	r0, r6
 80011dc:	f7ff fc80 	bl	8000ae0 <Circle>
 80011e0:	e06d      	b.n	80012be <MainFunc+0x1a2>
        	  { x -= TransitionValue(); }
 80011e2:	f7ff fba1 	bl	8000928 <TransitionValue>
 80011e6:	b280      	uxth	r0, r0
 80011e8:	1a36      	subs	r6, r6, r0
 80011ea:	b236      	sxth	r6, r6
 80011ec:	e7f0      	b.n	80011d0 <MainFunc+0xb4>
          }

          if(k == RightSwap)
          {
        	  if(x + TransitionValue() < 480)
 80011ee:	f7ff fb9b 	bl	8000928 <TransitionValue>
 80011f2:	4430      	add	r0, r6
 80011f4:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
 80011f8:	db0a      	blt.n	8001210 <MainFunc+0xf4>
        	  { x += TransitionValue(); }
        	  else
        	  { x = 480;}
 80011fa:	f44f 76f0 	mov.w	r6, #480	; 0x1e0

        	  Circle(x, y, r, gray, 3);
 80011fe:	2303      	movs	r3, #3
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	4b3f      	ldr	r3, [pc, #252]	; (8001300 <MainFunc+0x1e4>)
 8001204:	462a      	mov	r2, r5
 8001206:	4639      	mov	r1, r7
 8001208:	4630      	mov	r0, r6
 800120a:	f7ff fc69 	bl	8000ae0 <Circle>
 800120e:	e058      	b.n	80012c2 <MainFunc+0x1a6>
        	  { x += TransitionValue(); }
 8001210:	f7ff fb8a 	bl	8000928 <TransitionValue>
 8001214:	fa16 f680 	uxtah	r6, r6, r0
 8001218:	b236      	sxth	r6, r6
 800121a:	e7f0      	b.n	80011fe <MainFunc+0xe2>
          }

          if(k == UpSwap)
          {
        	  if(y - TransitionValue() > 0)
 800121c:	f7ff fb84 	bl	8000928 <TransitionValue>
 8001220:	1a38      	subs	r0, r7, r0
 8001222:	2800      	cmp	r0, #0
 8001224:	dc09      	bgt.n	800123a <MainFunc+0x11e>
        	  { y -= TransitionValue(); }
        	  else
        	  { y = 1;}
 8001226:	2701      	movs	r7, #1

        	  Circle(x, y, r, gray, 3);
 8001228:	2303      	movs	r3, #3
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	4b34      	ldr	r3, [pc, #208]	; (8001300 <MainFunc+0x1e4>)
 800122e:	462a      	mov	r2, r5
 8001230:	4639      	mov	r1, r7
 8001232:	4630      	mov	r0, r6
 8001234:	f7ff fc54 	bl	8000ae0 <Circle>
 8001238:	e045      	b.n	80012c6 <MainFunc+0x1aa>
        	  { y -= TransitionValue(); }
 800123a:	f7ff fb75 	bl	8000928 <TransitionValue>
 800123e:	b280      	uxth	r0, r0
 8001240:	1a3f      	subs	r7, r7, r0
 8001242:	b23f      	sxth	r7, r7
 8001244:	e7f0      	b.n	8001228 <MainFunc+0x10c>
          }

          if(k == DownSwap)
          {
        	  if(y + TransitionValue() < 272)
 8001246:	f7ff fb6f 	bl	8000928 <TransitionValue>
 800124a:	4438      	add	r0, r7
 800124c:	f5b0 7f88 	cmp.w	r0, #272	; 0x110
 8001250:	db0a      	blt.n	8001268 <MainFunc+0x14c>
        	  { y += TransitionValue(); }
        	  else
        	  { y = 272;}
 8001252:	f44f 7788 	mov.w	r7, #272	; 0x110
        	  Circle(x, y, r, gray, 3);
 8001256:	2303      	movs	r3, #3
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	4b29      	ldr	r3, [pc, #164]	; (8001300 <MainFunc+0x1e4>)
 800125c:	462a      	mov	r2, r5
 800125e:	4639      	mov	r1, r7
 8001260:	4630      	mov	r0, r6
 8001262:	f7ff fc3d 	bl	8000ae0 <Circle>
 8001266:	e030      	b.n	80012ca <MainFunc+0x1ae>
        	  { y += TransitionValue(); }
 8001268:	f7ff fb5e 	bl	8000928 <TransitionValue>
 800126c:	fa17 f780 	uxtah	r7, r7, r0
 8001270:	b23f      	sxth	r7, r7
 8001272:	e7f0      	b.n	8001256 <MainFunc+0x13a>
          }


          if(k == ZoomIn)
          {
        	  r += 5;
 8001274:	3505      	adds	r5, #5
 8001276:	b22d      	sxth	r5, r5
        	  Circle(x, y, r, gray, 3);
 8001278:	2303      	movs	r3, #3
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	4b20      	ldr	r3, [pc, #128]	; (8001300 <MainFunc+0x1e4>)
 800127e:	462a      	mov	r2, r5
 8001280:	4639      	mov	r1, r7
 8001282:	4630      	mov	r0, r6
 8001284:	f7ff fc2c 	bl	8000ae0 <Circle>
 8001288:	e021      	b.n	80012ce <MainFunc+0x1b2>
          if(k == ZoomOut)
          {
        	  if(r - 5 > 15)
        	  { r -= 5; }
        	  else
        	  { r = 15; }
 800128a:	250f      	movs	r5, #15
        	  Circle(x, y, r, gray, 3);
 800128c:	2303      	movs	r3, #3
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MainFunc+0x1e4>)
 8001292:	462a      	mov	r2, r5
 8001294:	4639      	mov	r1, r7
 8001296:	4630      	mov	r0, r6
 8001298:	f7ff fc22 	bl	8000ae0 <Circle>
          }

		  HAL_Delay(150);
 800129c:	2096      	movs	r0, #150	; 0x96
 800129e:	f000 ff31 	bl	8002104 <HAL_Delay>
		  Fill_Display(black);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff fbb2 	bl	8000a0c <Fill_Display>
		  k = isTouch();
 80012a8:	f7ff fa44 	bl	8000734 <isTouch>
 80012ac:	4604      	mov	r4, r0
          if(k == Clicked)
 80012ae:	2801      	cmp	r0, #1
 80012b0:	f43f af75 	beq.w	800119e <MainFunc+0x82>
          if(k == NotClicked)
 80012b4:	2c00      	cmp	r4, #0
 80012b6:	f43f af7c 	beq.w	80011b2 <MainFunc+0x96>
          if(k == LeftSwap)
 80012ba:	2c05      	cmp	r4, #5
 80012bc:	d082      	beq.n	80011c4 <MainFunc+0xa8>
          if(k == RightSwap)
 80012be:	2c06      	cmp	r4, #6
 80012c0:	d095      	beq.n	80011ee <MainFunc+0xd2>
          if(k == UpSwap)
 80012c2:	2c03      	cmp	r4, #3
 80012c4:	d0aa      	beq.n	800121c <MainFunc+0x100>
          if(k == DownSwap)
 80012c6:	2c04      	cmp	r4, #4
 80012c8:	d0bd      	beq.n	8001246 <MainFunc+0x12a>
          if(k == ZoomIn)
 80012ca:	2c07      	cmp	r4, #7
 80012cc:	d0d2      	beq.n	8001274 <MainFunc+0x158>
          if(k == ZoomOut)
 80012ce:	2c08      	cmp	r4, #8
 80012d0:	d1e4      	bne.n	800129c <MainFunc+0x180>
        	  if(r - 5 > 15)
 80012d2:	2d14      	cmp	r5, #20
 80012d4:	ddd9      	ble.n	800128a <MainFunc+0x16e>
        	  { r -= 5; }
 80012d6:	3d05      	subs	r5, #5
 80012d8:	b22d      	sxth	r5, r5
 80012da:	e7d7      	b.n	800128c <MainFunc+0x170>
 80012dc:	2003fcf4 	.word	0x2003fcf4
 80012e0:	200000f4 	.word	0x200000f4
 80012e4:	006666ff 	.word	0x006666ff
 80012e8:	00ccccff 	.word	0x00ccccff
 80012ec:	00404040 	.word	0x00404040
 80012f0:	00c0c0c0 	.word	0x00c0c0c0
 80012f4:	00606060 	.word	0x00606060
 80012f8:	004c0099 	.word	0x004c0099
 80012fc:	2003fdd4 	.word	0x2003fdd4
 8001300:	00808080 	.word	0x00808080

08001304 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001304:	b510      	push	{r4, lr}
 8001306:	b084      	sub	sp, #16
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001308:	2400      	movs	r4, #0
 800130a:	9400      	str	r4, [sp, #0]
 800130c:	9401      	str	r4, [sp, #4]
 800130e:	9402      	str	r4, [sp, #8]
 8001310:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001312:	f000 ff61 	bl	80021d8 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001316:	2301      	movs	r3, #1
 8001318:	f88d 3000 	strb.w	r3, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800131c:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x20000004;
 8001320:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <MPU_Config+0x54>)
 8001322:	9201      	str	r2, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8001324:	2211      	movs	r2, #17
 8001326:	f88d 2008 	strb.w	r2, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800132a:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800132e:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001332:	2203      	movs	r2, #3
 8001334:	f88d 200b 	strb.w	r2, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001338:	f88d 400c 	strb.w	r4, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800133c:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001340:	f88d 300e 	strb.w	r3, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001344:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001348:	4668      	mov	r0, sp
 800134a:	f000 ff63 	bl	8002214 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800134e:	2004      	movs	r0, #4
 8001350:	f000 ff50 	bl	80021f4 <HAL_MPU_Enable>

}
 8001354:	b004      	add	sp, #16
 8001356:	bd10      	pop	{r4, pc}
 8001358:	20000004 	.word	0x20000004

0800135c <MX_GPIO_Init>:
{
 800135c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001360:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001362:	2400      	movs	r4, #0
 8001364:	940b      	str	r4, [sp, #44]	; 0x2c
 8001366:	940c      	str	r4, [sp, #48]	; 0x30
 8001368:	940d      	str	r4, [sp, #52]	; 0x34
 800136a:	940e      	str	r4, [sp, #56]	; 0x38
 800136c:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800136e:	4baa      	ldr	r3, [pc, #680]	; (8001618 <MX_GPIO_Init+0x2bc>)
 8001370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001372:	f042 0210 	orr.w	r2, r2, #16
 8001376:	631a      	str	r2, [r3, #48]	; 0x30
 8001378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800137a:	f002 0210 	and.w	r2, r2, #16
 800137e:	9200      	str	r2, [sp, #0]
 8001380:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001384:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001388:	631a      	str	r2, [r3, #48]	; 0x30
 800138a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800138c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001390:	9201      	str	r2, [sp, #4]
 8001392:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001396:	f042 0202 	orr.w	r2, r2, #2
 800139a:	631a      	str	r2, [r3, #48]	; 0x30
 800139c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800139e:	f002 0202 	and.w	r2, r2, #2
 80013a2:	9202      	str	r2, [sp, #8]
 80013a4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013a8:	f042 0208 	orr.w	r2, r2, #8
 80013ac:	631a      	str	r2, [r3, #48]	; 0x30
 80013ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b0:	f002 0208 	and.w	r2, r2, #8
 80013b4:	9203      	str	r2, [sp, #12]
 80013b6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ba:	f042 0204 	orr.w	r2, r2, #4
 80013be:	631a      	str	r2, [r3, #48]	; 0x30
 80013c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013c2:	f002 0204 	and.w	r2, r2, #4
 80013c6:	9204      	str	r2, [sp, #16]
 80013c8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013cc:	f042 0201 	orr.w	r2, r2, #1
 80013d0:	631a      	str	r2, [r3, #48]	; 0x30
 80013d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d4:	f002 0201 	and.w	r2, r2, #1
 80013d8:	9205      	str	r2, [sp, #20]
 80013da:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013e2:	631a      	str	r2, [r3, #48]	; 0x30
 80013e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80013ea:	9206      	str	r2, [sp, #24]
 80013ec:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80013ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013f4:	631a      	str	r2, [r3, #48]	; 0x30
 80013f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80013fc:	9207      	str	r2, [sp, #28]
 80013fe:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001402:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001406:	631a      	str	r2, [r3, #48]	; 0x30
 8001408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800140a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800140e:	9208      	str	r2, [sp, #32]
 8001410:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001414:	f042 0220 	orr.w	r2, r2, #32
 8001418:	631a      	str	r2, [r3, #48]	; 0x30
 800141a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800141c:	f002 0220 	and.w	r2, r2, #32
 8001420:	9209      	str	r2, [sp, #36]	; 0x24
 8001422:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001426:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800142a:	631a      	str	r2, [r3, #48]	; 0x30
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001432:	930a      	str	r3, [sp, #40]	; 0x28
 8001434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001436:	2201      	movs	r2, #1
 8001438:	2120      	movs	r1, #32
 800143a:	4878      	ldr	r0, [pc, #480]	; (800161c <MX_GPIO_Init+0x2c0>)
 800143c:	f001 f93c 	bl	80026b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001440:	4622      	mov	r2, r4
 8001442:	210c      	movs	r1, #12
 8001444:	4876      	ldr	r0, [pc, #472]	; (8001620 <MX_GPIO_Init+0x2c4>)
 8001446:	f001 f937 	bl	80026b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800144a:	2201      	movs	r2, #1
 800144c:	2108      	movs	r1, #8
 800144e:	4875      	ldr	r0, [pc, #468]	; (8001624 <MX_GPIO_Init+0x2c8>)
 8001450:	f001 f932 	bl	80026b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001454:	2201      	movs	r2, #1
 8001456:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800145a:	4871      	ldr	r0, [pc, #452]	; (8001620 <MX_GPIO_Init+0x2c4>)
 800145c:	f001 f92c 	bl	80026b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001460:	4622      	mov	r2, r4
 8001462:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001466:	4870      	ldr	r0, [pc, #448]	; (8001628 <MX_GPIO_Init+0x2cc>)
 8001468:	f001 f926 	bl	80026b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800146c:	4622      	mov	r2, r4
 800146e:	21c8      	movs	r1, #200	; 0xc8
 8001470:	486e      	ldr	r0, [pc, #440]	; (800162c <MX_GPIO_Init+0x2d0>)
 8001472:	f001 f921 	bl	80026b8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001476:	2308      	movs	r3, #8
 8001478:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800147e:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8001638 <MX_GPIO_Init+0x2dc>
 8001482:	a90b      	add	r1, sp, #44	; 0x2c
 8001484:	4648      	mov	r0, r9
 8001486:	f001 f825 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800148a:	2304      	movs	r3, #4
 800148c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2502      	movs	r5, #2
 8001490:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001494:	2603      	movs	r6, #3
 8001496:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001498:	2309      	movs	r3, #9
 800149a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800149c:	a90b      	add	r1, sp, #44	; 0x2c
 800149e:	4648      	mov	r0, r9
 80014a0:	f001 f818 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80014a4:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80014a8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014b0:	230b      	movs	r3, #11
 80014b2:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014b4:	a90b      	add	r1, sp, #44	; 0x2c
 80014b6:	485d      	ldr	r0, [pc, #372]	; (800162c <MX_GPIO_Init+0x2d0>)
 80014b8:	f001 f80c 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80014bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014c0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c2:	2312      	movs	r3, #18
 80014c4:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ca:	2304      	movs	r3, #4
 80014cc:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ce:	f8df b16c 	ldr.w	fp, [pc, #364]	; 800163c <MX_GPIO_Init+0x2e0>
 80014d2:	a90b      	add	r1, sp, #44	; 0x2c
 80014d4:	4658      	mov	r0, fp
 80014d6:	f000 fffd 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80014da:	f643 4323 	movw	r3, #15395	; 0x3c23
 80014de:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80014e6:	f04f 080a 	mov.w	r8, #10
 80014ea:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ee:	a90b      	add	r1, sp, #44	; 0x2c
 80014f0:	4658      	mov	r0, fp
 80014f2:	f000 ffef 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80014f6:	2310      	movs	r3, #16
 80014f8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001500:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001502:	a90b      	add	r1, sp, #44	; 0x2c
 8001504:	4658      	mov	r0, fp
 8001506:	f000 ffe5 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001514:	2308      	movs	r3, #8
 8001516:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001518:	a90b      	add	r1, sp, #44	; 0x2c
 800151a:	4840      	ldr	r0, [pc, #256]	; (800161c <MX_GPIO_Init+0x2c0>)
 800151c:	f000 ffda 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001524:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800152c:	2701      	movs	r7, #1
 800152e:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001530:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8001640 <MX_GPIO_Init+0x2e4>
 8001534:	a90b      	add	r1, sp, #44	; 0x2c
 8001536:	4650      	mov	r0, sl
 8001538:	f000 ffcc 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800153c:	2360      	movs	r3, #96	; 0x60
 800153e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001546:	230d      	movs	r3, #13
 8001548:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800154a:	a90b      	add	r1, sp, #44	; 0x2c
 800154c:	4648      	mov	r0, r9
 800154e:	f000 ffc1 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800155c:	2307      	movs	r3, #7
 800155e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001560:	a90b      	add	r1, sp, #44	; 0x2c
 8001562:	4658      	mov	r0, fp
 8001564:	f000 ffb6 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001568:	2340      	movs	r3, #64	; 0x40
 800156a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001570:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001572:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001576:	a90b      	add	r1, sp, #44	; 0x2c
 8001578:	4658      	mov	r0, fp
 800157a:	f000 ffab 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800157e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001582:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001584:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001588:	a90b      	add	r1, sp, #44	; 0x2c
 800158a:	4829      	ldr	r0, [pc, #164]	; (8001630 <MX_GPIO_Init+0x2d4>)
 800158c:	f000 ffa2 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001590:	2340      	movs	r3, #64	; 0x40
 8001592:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <MX_GPIO_Init+0x2d8>)
 8001596:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800159a:	a90b      	add	r1, sp, #44	; 0x2c
 800159c:	481f      	ldr	r0, [pc, #124]	; (800161c <MX_GPIO_Init+0x2c0>)
 800159e:	f000 ff99 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80015a2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015a6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015ae:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	a90b      	add	r1, sp, #44	; 0x2c
 80015b4:	4650      	mov	r0, sl
 80015b6:	f000 ff8d 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80015ba:	23f0      	movs	r3, #240	; 0xf0
 80015bc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80015c4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015c8:	a90b      	add	r1, sp, #44	; 0x2c
 80015ca:	4815      	ldr	r0, [pc, #84]	; (8001620 <MX_GPIO_Init+0x2c4>)
 80015cc:	f000 ff82 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80015d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80015dc:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80015e0:	a90b      	add	r1, sp, #44	; 0x2c
 80015e2:	4812      	ldr	r0, [pc, #72]	; (800162c <MX_GPIO_Init+0x2d0>)
 80015e4:	f000 ff76 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80015e8:	2320      	movs	r3, #32
 80015ea:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ec:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015f2:	a90b      	add	r1, sp, #44	; 0x2c
 80015f4:	4809      	ldr	r0, [pc, #36]	; (800161c <MX_GPIO_Init+0x2c0>)
 80015f6:	f000 ff6d 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80015fa:	2208      	movs	r2, #8
 80015fc:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001604:	220d      	movs	r2, #13
 8001606:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001608:	a90b      	add	r1, sp, #44	; 0x2c
 800160a:	4804      	ldr	r0, [pc, #16]	; (800161c <MX_GPIO_Init+0x2c0>)
 800160c:	f000 ff62 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001610:	f241 030c 	movw	r3, #4108	; 0x100c
 8001614:	930b      	str	r3, [sp, #44]	; 0x2c
 8001616:	e015      	b.n	8001644 <MX_GPIO_Init+0x2e8>
 8001618:	40023800 	.word	0x40023800
 800161c:	40020c00 	.word	0x40020c00
 8001620:	40022000 	.word	0x40022000
 8001624:	40022800 	.word	0x40022800
 8001628:	40021c00 	.word	0x40021c00
 800162c:	40021800 	.word	0x40021800
 8001630:	40022400 	.word	0x40022400
 8001634:	10120000 	.word	0x10120000
 8001638:	40021000 	.word	0x40021000
 800163c:	40020400 	.word	0x40020400
 8001640:	40020000 	.word	0x40020000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800164a:	a90b      	add	r1, sp, #44	; 0x2c
 800164c:	488e      	ldr	r0, [pc, #568]	; (8001888 <MX_GPIO_Init+0x52c>)
 800164e:	f000 ff41 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001652:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001656:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001658:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800165c:	f5a9 6900 	sub.w	r9, r9, #2048	; 0x800
 8001660:	a90b      	add	r1, sp, #44	; 0x2c
 8001662:	4648      	mov	r0, r9
 8001664:	f000 ff36 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001668:	2208      	movs	r2, #8
 800166a:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001672:	a90b      	add	r1, sp, #44	; 0x2c
 8001674:	4885      	ldr	r0, [pc, #532]	; (800188c <MX_GPIO_Init+0x530>)
 8001676:	f000 ff2d 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800167a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800167e:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001686:	220d      	movs	r2, #13
 8001688:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800168a:	a90b      	add	r1, sp, #44	; 0x2c
 800168c:	4880      	ldr	r0, [pc, #512]	; (8001890 <MX_GPIO_Init+0x534>)
 800168e:	f000 ff21 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001692:	2210      	movs	r2, #16
 8001694:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001696:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800169a:	a90b      	add	r1, sp, #44	; 0x2c
 800169c:	487d      	ldr	r0, [pc, #500]	; (8001894 <MX_GPIO_Init+0x538>)
 800169e:	f000 ff19 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80016a2:	f248 0304 	movw	r3, #32772	; 0x8004
 80016a6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a8:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016ac:	a90b      	add	r1, sp, #44	; 0x2c
 80016ae:	487a      	ldr	r0, [pc, #488]	; (8001898 <MX_GPIO_Init+0x53c>)
 80016b0:	f000 ff10 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80016b4:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016bc:	2205      	movs	r2, #5
 80016be:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80016c0:	a90b      	add	r1, sp, #44	; 0x2c
 80016c2:	4871      	ldr	r0, [pc, #452]	; (8001888 <MX_GPIO_Init+0x52c>)
 80016c4:	f000 ff06 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80016c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016cc:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ce:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80016d4:	a90b      	add	r1, sp, #44	; 0x2c
 80016d6:	4870      	ldr	r0, [pc, #448]	; (8001898 <MX_GPIO_Init+0x53c>)
 80016d8:	f000 fefc 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80016dc:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80016e0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80016e8:	220d      	movs	r2, #13
 80016ea:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016ec:	a90b      	add	r1, sp, #44	; 0x2c
 80016ee:	486a      	ldr	r0, [pc, #424]	; (8001898 <MX_GPIO_Init+0x53c>)
 80016f0:	f000 fef0 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80016f4:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80016fc:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80016fe:	a90b      	add	r1, sp, #44	; 0x2c
 8001700:	4861      	ldr	r0, [pc, #388]	; (8001888 <MX_GPIO_Init+0x52c>)
 8001702:	f000 fee7 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800170a:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001712:	2207      	movs	r2, #7
 8001714:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001716:	a90b      	add	r1, sp, #44	; 0x2c
 8001718:	4650      	mov	r0, sl
 800171a:	f000 fedb 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800171e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001722:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800172a:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800172c:	a90b      	add	r1, sp, #44	; 0x2c
 800172e:	4650      	mov	r0, sl
 8001730:	f000 fed0 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001734:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001738:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800173a:	4b58      	ldr	r3, [pc, #352]	; (800189c <MX_GPIO_Init+0x540>)
 800173c:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001740:	a90b      	add	r1, sp, #44	; 0x2c
 8001742:	4851      	ldr	r0, [pc, #324]	; (8001888 <MX_GPIO_Init+0x52c>)
 8001744:	f000 fec6 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001748:	23c0      	movs	r3, #192	; 0xc0
 800174a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001752:	2308      	movs	r3, #8
 8001754:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001756:	a90b      	add	r1, sp, #44	; 0x2c
 8001758:	4648      	mov	r0, r9
 800175a:	f000 febb 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800175e:	2310      	movs	r3, #16
 8001760:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001766:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001768:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800176c:	a90b      	add	r1, sp, #44	; 0x2c
 800176e:	484a      	ldr	r0, [pc, #296]	; (8001898 <MX_GPIO_Init+0x53c>)
 8001770:	f000 feb0 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001774:	23c8      	movs	r3, #200	; 0xc8
 8001776:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001778:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800177e:	a90b      	add	r1, sp, #44	; 0x2c
 8001780:	4843      	ldr	r0, [pc, #268]	; (8001890 <MX_GPIO_Init+0x534>)
 8001782:	f000 fea7 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001786:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800178a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178c:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001790:	a90b      	add	r1, sp, #44	; 0x2c
 8001792:	4843      	ldr	r0, [pc, #268]	; (80018a0 <MX_GPIO_Init+0x544>)
 8001794:	f000 fe9e 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001798:	2305      	movs	r3, #5
 800179a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017a2:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a6:	a90b      	add	r1, sp, #44	; 0x2c
 80017a8:	4648      	mov	r0, r9
 80017aa:	f000 fe93 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80017ae:	2332      	movs	r3, #50	; 0x32
 80017b0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017b8:	230b      	movs	r3, #11
 80017ba:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017bc:	a90b      	add	r1, sp, #44	; 0x2c
 80017be:	4648      	mov	r0, r9
 80017c0:	f000 fe88 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017c4:	2304      	movs	r3, #4
 80017c6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80017ce:	2309      	movs	r3, #9
 80017d0:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d2:	a90b      	add	r1, sp, #44	; 0x2c
 80017d4:	4658      	mov	r0, fp
 80017d6:	f000 fe7d 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80017da:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017de:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e4:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80017e6:	2309      	movs	r3, #9
 80017e8:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ea:	a90b      	add	r1, sp, #44	; 0x2c
 80017ec:	4829      	ldr	r0, [pc, #164]	; (8001894 <MX_GPIO_Init+0x538>)
 80017ee:	f000 fe71 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80017f2:	2304      	movs	r3, #4
 80017f4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f6:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80017fa:	a90b      	add	r1, sp, #44	; 0x2c
 80017fc:	4824      	ldr	r0, [pc, #144]	; (8001890 <MX_GPIO_Init+0x534>)
 80017fe:	f000 fe69 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001802:	2386      	movs	r3, #134	; 0x86
 8001804:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800180c:	230b      	movs	r3, #11
 800180e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	a90b      	add	r1, sp, #44	; 0x2c
 8001812:	4650      	mov	r0, sl
 8001814:	f000 fe5e 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001818:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181a:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800181e:	a90b      	add	r1, sp, #44	; 0x2c
 8001820:	4650      	mov	r0, sl
 8001822:	f000 fe57 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001826:	2350      	movs	r3, #80	; 0x50
 8001828:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001830:	230d      	movs	r3, #13
 8001832:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001834:	a90b      	add	r1, sp, #44	; 0x2c
 8001836:	4650      	mov	r0, sl
 8001838:	f000 fe4c 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800183c:	2328      	movs	r3, #40	; 0x28
 800183e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001846:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	a90b      	add	r1, sp, #44	; 0x2c
 800184c:	4650      	mov	r0, sl
 800184e:	f000 fe41 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001852:	2340      	movs	r3, #64	; 0x40
 8001854:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800185c:	2309      	movs	r3, #9
 800185e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001860:	a90b      	add	r1, sp, #44	; 0x2c
 8001862:	480d      	ldr	r0, [pc, #52]	; (8001898 <MX_GPIO_Init+0x53c>)
 8001864:	f000 fe36 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001868:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800186c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001874:	2305      	movs	r3, #5
 8001876:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001878:	a90b      	add	r1, sp, #44	; 0x2c
 800187a:	4658      	mov	r0, fp
 800187c:	f000 fe2a 	bl	80024d4 <HAL_GPIO_Init>
}
 8001880:	b011      	add	sp, #68	; 0x44
 8001882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001886:	bf00      	nop
 8001888:	40022000 	.word	0x40022000
 800188c:	40022800 	.word	0x40022800
 8001890:	40021800 	.word	0x40021800
 8001894:	40020c00 	.word	0x40020c00
 8001898:	40021c00 	.word	0x40021c00
 800189c:	10120000 	.word	0x10120000
 80018a0:	40021400 	.word	0x40021400

080018a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80018a6:	6802      	ldr	r2, [r0, #0]
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d000      	beq.n	80018b0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018ae:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80018b0:	f000 fc16 	bl	80020e0 <HAL_IncTick>
}
 80018b4:	e7fb      	b.n	80018ae <HAL_TIM_PeriodElapsedCallback+0xa>
 80018b6:	bf00      	nop
 80018b8:	40001000 	.word	0x40001000

080018bc <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018bc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018be:	e7fe      	b.n	80018be <Error_Handler+0x2>

080018c0 <MX_DMA2D_Init>:
{
 80018c0:	b508      	push	{r3, lr}
  hdma2d.Instance = DMA2D;
 80018c2:	480c      	ldr	r0, [pc, #48]	; (80018f4 <MX_DMA2D_Init+0x34>)
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <MX_DMA2D_Init+0x38>)
 80018c6:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80018c8:	2300      	movs	r3, #0
 80018ca:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80018cc:	2202      	movs	r2, #2
 80018ce:	6082      	str	r2, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 80018d0:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80018d2:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80018d4:	62c2      	str	r2, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80018d6:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80018d8:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80018da:	f000 fccb 	bl	8002274 <HAL_DMA2D_Init>
 80018de:	b928      	cbnz	r0, 80018ec <MX_DMA2D_Init+0x2c>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80018e0:	2101      	movs	r1, #1
 80018e2:	4804      	ldr	r0, [pc, #16]	; (80018f4 <MX_DMA2D_Init+0x34>)
 80018e4:	f000 fd94 	bl	8002410 <HAL_DMA2D_ConfigLayer>
 80018e8:	b910      	cbnz	r0, 80018f0 <MX_DMA2D_Init+0x30>
}
 80018ea:	bd08      	pop	{r3, pc}
    Error_Handler();
 80018ec:	f7ff ffe6 	bl	80018bc <Error_Handler>
    Error_Handler();
 80018f0:	f7ff ffe4 	bl	80018bc <Error_Handler>
 80018f4:	2003fd48 	.word	0x2003fd48
 80018f8:	4002b000 	.word	0x4002b000

080018fc <MX_FMC_Init>:
{
 80018fc:	b500      	push	{lr}
 80018fe:	b089      	sub	sp, #36	; 0x24
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001900:	2300      	movs	r3, #0
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	9302      	str	r3, [sp, #8]
 8001906:	9303      	str	r3, [sp, #12]
 8001908:	9304      	str	r3, [sp, #16]
 800190a:	9305      	str	r3, [sp, #20]
 800190c:	9306      	str	r3, [sp, #24]
 800190e:	9307      	str	r3, [sp, #28]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001910:	4813      	ldr	r0, [pc, #76]	; (8001960 <MX_FMC_Init+0x64>)
 8001912:	4a14      	ldr	r2, [pc, #80]	; (8001964 <MX_FMC_Init+0x68>)
 8001914:	6002      	str	r2, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001916:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001918:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800191a:	2104      	movs	r1, #4
 800191c:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800191e:	2210      	movs	r2, #16
 8001920:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001922:	2240      	movs	r2, #64	; 0x40
 8001924:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001926:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800192a:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800192c:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800192e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001932:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001934:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001938:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800193a:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 800193c:	2302      	movs	r3, #2
 800193e:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8001940:	2206      	movs	r2, #6
 8001942:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001944:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
 8001946:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8001948:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 2;
 800194a:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 800194c:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800194e:	4469      	add	r1, sp
 8001950:	f002 fd91 	bl	8004476 <HAL_SDRAM_Init>
 8001954:	b910      	cbnz	r0, 800195c <MX_FMC_Init+0x60>
}
 8001956:	b009      	add	sp, #36	; 0x24
 8001958:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 800195c:	f7ff ffae 	bl	80018bc <Error_Handler>
 8001960:	2003fe9c 	.word	0x2003fe9c
 8001964:	a0000140 	.word	0xa0000140

08001968 <MX_I2C3_Init>:
{
 8001968:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 800196a:	4811      	ldr	r0, [pc, #68]	; (80019b0 <MX_I2C3_Init+0x48>)
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <MX_I2C3_Init+0x4c>)
 800196e:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_I2C3_Init+0x50>)
 8001972:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 224;
 8001974:	23e0      	movs	r3, #224	; 0xe0
 8001976:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001978:	2301      	movs	r3, #1
 800197a:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001980:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001982:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001984:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001986:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001988:	f001 f80c 	bl	80029a4 <HAL_I2C_Init>
 800198c:	b950      	cbnz	r0, 80019a4 <MX_I2C3_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800198e:	2100      	movs	r1, #0
 8001990:	4807      	ldr	r0, [pc, #28]	; (80019b0 <MX_I2C3_Init+0x48>)
 8001992:	f001 fa13 	bl	8002dbc <HAL_I2CEx_ConfigAnalogFilter>
 8001996:	b938      	cbnz	r0, 80019a8 <MX_I2C3_Init+0x40>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001998:	2100      	movs	r1, #0
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_I2C3_Init+0x48>)
 800199c:	f001 fa3c 	bl	8002e18 <HAL_I2CEx_ConfigDigitalFilter>
 80019a0:	b920      	cbnz	r0, 80019ac <MX_I2C3_Init+0x44>
}
 80019a2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80019a4:	f7ff ff8a 	bl	80018bc <Error_Handler>
    Error_Handler();
 80019a8:	f7ff ff88 	bl	80018bc <Error_Handler>
    Error_Handler();
 80019ac:	f7ff ff86 	bl	80018bc <Error_Handler>
 80019b0:	2003fd88 	.word	0x2003fd88
 80019b4:	40005c00 	.word	0x40005c00
 80019b8:	00c0eaff 	.word	0x00c0eaff

080019bc <MX_LTDC_Init>:
{
 80019bc:	b500      	push	{lr}
 80019be:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80019c0:	2234      	movs	r2, #52	; 0x34
 80019c2:	2100      	movs	r1, #0
 80019c4:	a801      	add	r0, sp, #4
 80019c6:	f002 ffff 	bl	80049c8 <memset>
  hltdc.Instance = LTDC;
 80019ca:	4826      	ldr	r0, [pc, #152]	; (8001a64 <MX_LTDC_Init+0xa8>)
 80019cc:	4b26      	ldr	r3, [pc, #152]	; (8001a68 <MX_LTDC_Init+0xac>)
 80019ce:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80019d4:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80019d6:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80019d8:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 40;
 80019da:	2228      	movs	r2, #40	; 0x28
 80019dc:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 9;
 80019de:	2209      	movs	r2, #9
 80019e0:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80019e2:	2235      	movs	r2, #53	; 0x35
 80019e4:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80019e6:	220b      	movs	r2, #11
 80019e8:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80019ea:	f240 2215 	movw	r2, #533	; 0x215
 80019ee:	6242      	str	r2, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80019f0:	f240 121b 	movw	r2, #283	; 0x11b
 80019f4:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80019f6:	f240 2235 	movw	r2, #565	; 0x235
 80019fa:	62c2      	str	r2, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80019fc:	f240 121d 	movw	r2, #285	; 0x11d
 8001a00:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001a02:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001a06:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001a0a:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001a0e:	f001 fb0b 	bl	8003028 <HAL_LTDC_Init>
 8001a12:	bb18      	cbnz	r0, 8001a5c <MX_LTDC_Init+0xa0>
  pLayerCfg.WindowX0 = 0;
 8001a14:	2200      	movs	r2, #0
 8001a16:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 8001a18:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001a1c:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8001a1e:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 8001a20:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001a24:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001a26:	2002      	movs	r0, #2
 8001a28:	9005      	str	r0, [sp, #20]
  pLayerCfg.Alpha = 255;
 8001a2a:	20ff      	movs	r0, #255	; 0xff
 8001a2c:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 8001a2e:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001a30:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a34:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001a36:	2005      	movs	r0, #5
 8001a38:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8001a3a:	920a      	str	r2, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001a3c:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001a3e:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001a40:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001a44:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001a48:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001a4c:	a901      	add	r1, sp, #4
 8001a4e:	4805      	ldr	r0, [pc, #20]	; (8001a64 <MX_LTDC_Init+0xa8>)
 8001a50:	f001 fbd4 	bl	80031fc <HAL_LTDC_ConfigLayer>
 8001a54:	b920      	cbnz	r0, 8001a60 <MX_LTDC_Init+0xa4>
}
 8001a56:	b00f      	add	sp, #60	; 0x3c
 8001a58:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001a5c:	f7ff ff2e 	bl	80018bc <Error_Handler>
    Error_Handler();
 8001a60:	f7ff ff2c 	bl	80018bc <Error_Handler>
 8001a64:	2003fdd4 	.word	0x2003fdd4
 8001a68:	40016800 	.word	0x40016800

08001a6c <MX_RTC_Init>:
{
 8001a6c:	b510      	push	{r4, lr}
 8001a6e:	b092      	sub	sp, #72	; 0x48
  RTC_TimeTypeDef sTime = {0};
 8001a70:	2400      	movs	r4, #0
 8001a72:	940c      	str	r4, [sp, #48]	; 0x30
 8001a74:	940d      	str	r4, [sp, #52]	; 0x34
 8001a76:	940e      	str	r4, [sp, #56]	; 0x38
 8001a78:	940f      	str	r4, [sp, #60]	; 0x3c
 8001a7a:	9410      	str	r4, [sp, #64]	; 0x40
 8001a7c:	9411      	str	r4, [sp, #68]	; 0x44
  RTC_DateTypeDef sDate = {0};
 8001a7e:	940b      	str	r4, [sp, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001a80:	222c      	movs	r2, #44	; 0x2c
 8001a82:	4621      	mov	r1, r4
 8001a84:	4668      	mov	r0, sp
 8001a86:	f002 ff9f 	bl	80049c8 <memset>
  hrtc.Instance = RTC;
 8001a8a:	4831      	ldr	r0, [pc, #196]	; (8001b50 <MX_RTC_Init+0xe4>)
 8001a8c:	4b31      	ldr	r3, [pc, #196]	; (8001b54 <MX_RTC_Init+0xe8>)
 8001a8e:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a90:	6044      	str	r4, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a92:	237f      	movs	r3, #127	; 0x7f
 8001a94:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a96:	23ff      	movs	r3, #255	; 0xff
 8001a98:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a9a:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a9c:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a9e:	6184      	str	r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001aa0:	f002 faac 	bl	8003ffc <HAL_RTC_Init>
 8001aa4:	2800      	cmp	r0, #0
 8001aa6:	d147      	bne.n	8001b38 <MX_RTC_Init+0xcc>
  sTime.Hours = 0x0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001aae:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001ab2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ab6:	9310      	str	r3, [sp, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ab8:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001aba:	2201      	movs	r2, #1
 8001abc:	a90c      	add	r1, sp, #48	; 0x30
 8001abe:	4824      	ldr	r0, [pc, #144]	; (8001b50 <MX_RTC_Init+0xe4>)
 8001ac0:	f002 fb0a 	bl	80040d8 <HAL_RTC_SetTime>
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	d139      	bne.n	8001b3c <MX_RTC_Init+0xd0>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001ace:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  sDate.Date = 0x1;
 8001ad2:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
  sDate.Year = 0x0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001adc:	a90b      	add	r1, sp, #44	; 0x2c
 8001ade:	481c      	ldr	r0, [pc, #112]	; (8001b50 <MX_RTC_Init+0xe4>)
 8001ae0:	f002 fb7a 	bl	80041d8 <HAL_RTC_SetDate>
 8001ae4:	bb60      	cbnz	r0, 8001b40 <MX_RTC_Init+0xd4>
  sAlarm.AlarmTime.Hours = 0x0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f88d 3000 	strb.w	r3, [sp]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001aec:	f88d 3001 	strb.w	r3, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001af0:	f88d 3002 	strb.w	r3, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001af4:	9301      	str	r3, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001af6:	9304      	str	r3, [sp, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001af8:	9305      	str	r3, [sp, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001afa:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001afc:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001afe:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001b00:	2201      	movs	r2, #1
 8001b02:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b0a:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b0c:	4669      	mov	r1, sp
 8001b0e:	4810      	ldr	r0, [pc, #64]	; (8001b50 <MX_RTC_Init+0xe4>)
 8001b10:	f002 fbd0 	bl	80042b4 <HAL_RTC_SetAlarm>
 8001b14:	b9b0      	cbnz	r0, 8001b44 <MX_RTC_Init+0xd8>
  sAlarm.Alarm = RTC_ALARM_B;
 8001b16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b1a:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	4669      	mov	r1, sp
 8001b20:	480b      	ldr	r0, [pc, #44]	; (8001b50 <MX_RTC_Init+0xe4>)
 8001b22:	f002 fbc7 	bl	80042b4 <HAL_RTC_SetAlarm>
 8001b26:	b978      	cbnz	r0, 8001b48 <MX_RTC_Init+0xdc>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001b28:	2202      	movs	r2, #2
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4808      	ldr	r0, [pc, #32]	; (8001b50 <MX_RTC_Init+0xe4>)
 8001b2e:	f002 fc71 	bl	8004414 <HAL_RTCEx_SetTimeStamp>
 8001b32:	b958      	cbnz	r0, 8001b4c <MX_RTC_Init+0xe0>
}
 8001b34:	b012      	add	sp, #72	; 0x48
 8001b36:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001b38:	f7ff fec0 	bl	80018bc <Error_Handler>
    Error_Handler();
 8001b3c:	f7ff febe 	bl	80018bc <Error_Handler>
    Error_Handler();
 8001b40:	f7ff febc 	bl	80018bc <Error_Handler>
    Error_Handler();
 8001b44:	f7ff feba 	bl	80018bc <Error_Handler>
    Error_Handler();
 8001b48:	f7ff feb8 	bl	80018bc <Error_Handler>
    Error_Handler();
 8001b4c:	f7ff feb6 	bl	80018bc <Error_Handler>
 8001b50:	2003fe7c 	.word	0x2003fe7c
 8001b54:	40002800 	.word	0x40002800

08001b58 <SystemClock_Config>:
{
 8001b58:	b500      	push	{lr}
 8001b5a:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b5c:	2230      	movs	r2, #48	; 0x30
 8001b5e:	2100      	movs	r1, #0
 8001b60:	a828      	add	r0, sp, #160	; 0xa0
 8001b62:	f002 ff31 	bl	80049c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b66:	2100      	movs	r1, #0
 8001b68:	9123      	str	r1, [sp, #140]	; 0x8c
 8001b6a:	9124      	str	r1, [sp, #144]	; 0x90
 8001b6c:	9125      	str	r1, [sp, #148]	; 0x94
 8001b6e:	9126      	str	r1, [sp, #152]	; 0x98
 8001b70:	9127      	str	r1, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b72:	2284      	movs	r2, #132	; 0x84
 8001b74:	a802      	add	r0, sp, #8
 8001b76:	f002 ff27 	bl	80049c8 <memset>
  HAL_PWR_EnableBkUpAccess();
 8001b7a:	f001 fb95 	bl	80032a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	4b33      	ldr	r3, [pc, #204]	; (8001c4c <SystemClock_Config+0xf4>)
 8001b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b86:	641a      	str	r2, [r3, #64]	; 0x40
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b92:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <SystemClock_Config+0xf8>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001ba6:	2309      	movs	r3, #9
 8001ba8:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bae:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	932d      	str	r3, [sp, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	932e      	str	r3, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bb8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001bbc:	922f      	str	r2, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001bbe:	2219      	movs	r2, #25
 8001bc0:	9230      	str	r2, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001bc2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001bc6:	9231      	str	r2, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bc8:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001bca:	2308      	movs	r3, #8
 8001bcc:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bce:	a828      	add	r0, sp, #160	; 0xa0
 8001bd0:	f001 fbb0 	bl	8003334 <HAL_RCC_OscConfig>
 8001bd4:	2800      	cmp	r0, #0
 8001bd6:	d131      	bne.n	8001c3c <SystemClock_Config+0xe4>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001bd8:	f001 fb6e 	bl	80032b8 <HAL_PWREx_EnableOverDrive>
 8001bdc:	2800      	cmp	r0, #0
 8001bde:	d12f      	bne.n	8001c40 <SystemClock_Config+0xe8>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001be0:	230f      	movs	r3, #15
 8001be2:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001be4:	2302      	movs	r3, #2
 8001be6:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001be8:	2300      	movs	r3, #0
 8001bea:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bf0:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf6:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001bf8:	2106      	movs	r1, #6
 8001bfa:	a823      	add	r0, sp, #140	; 0x8c
 8001bfc:	f001 fe06 	bl	800380c <HAL_RCC_ClockConfig>
 8001c00:	bb00      	cbnz	r0, 8001c44 <SystemClock_Config+0xec>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8001c02:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <SystemClock_Config+0xfc>)
 8001c04:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8001c06:	2364      	movs	r3, #100	; 0x64
 8001c08:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001c0e:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001c10:	2300      	movs	r3, #0
 8001c12:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001c14:	2201      	movs	r2, #1
 8001c16:	920c      	str	r2, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001c18:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c1c:	920d      	str	r2, [sp, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c22:	920e      	str	r2, [sp, #56]	; 0x38
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001c24:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001c26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c2a:	9221      	str	r2, [sp, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001c2c:	9322      	str	r3, [sp, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c2e:	a802      	add	r0, sp, #8
 8001c30:	f001 fed6 	bl	80039e0 <HAL_RCCEx_PeriphCLKConfig>
 8001c34:	b940      	cbnz	r0, 8001c48 <SystemClock_Config+0xf0>
}
 8001c36:	b035      	add	sp, #212	; 0xd4
 8001c38:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001c3c:	f7ff fe3e 	bl	80018bc <Error_Handler>
    Error_Handler();
 8001c40:	f7ff fe3c 	bl	80018bc <Error_Handler>
    Error_Handler();
 8001c44:	f7ff fe3a 	bl	80018bc <Error_Handler>
    Error_Handler();
 8001c48:	f7ff fe38 	bl	80018bc <Error_Handler>
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40007000 	.word	0x40007000
 8001c54:	00a10028 	.word	0x00a10028

08001c58 <main>:
{
 8001c58:	b508      	push	{r3, lr}
  MPU_Config();
 8001c5a:	f7ff fb53 	bl	8001304 <MPU_Config>
  HAL_Init();
 8001c5e:	f000 fa2d 	bl	80020bc <HAL_Init>
  SystemClock_Config();
 8001c62:	f7ff ff79 	bl	8001b58 <SystemClock_Config>
  HAL_Delay(500);
 8001c66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c6a:	f000 fa4b 	bl	8002104 <HAL_Delay>
  MX_GPIO_Init();
 8001c6e:	f7ff fb75 	bl	800135c <MX_GPIO_Init>
  MX_DMA2D_Init();
 8001c72:	f7ff fe25 	bl	80018c0 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001c76:	f7ff fe41 	bl	80018fc <MX_FMC_Init>
  MX_I2C3_Init();
 8001c7a:	f7ff fe75 	bl	8001968 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001c7e:	f7ff fe9d 	bl	80019bc <MX_LTDC_Init>
  MX_RTC_Init();
 8001c82:	f7ff fef3 	bl	8001a6c <MX_RTC_Init>
	  MainFunc ();
 8001c86:	f7ff fa49 	bl	800111c <MainFunc>
  while (1)
 8001c8a:	e7fc      	b.n	8001c86 <main+0x2e>

08001c8c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c8e:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001c90:	2300      	movs	r3, #0
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	9302      	str	r3, [sp, #8]
 8001c96:	9303      	str	r3, [sp, #12]
 8001c98:	9304      	str	r3, [sp, #16]
 8001c9a:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8001c9c:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <HAL_FMC_MspInit+0xbc>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	b10b      	cbz	r3, 8001ca6 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001ca2:	b007      	add	sp, #28
 8001ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8001ca6:	4b28      	ldr	r3, [pc, #160]	; (8001d48 <HAL_FMC_MspInit+0xbc>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001cac:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_FMC_MspInit+0xc0>)
 8001cae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cb0:	f042 0201 	orr.w	r2, r2, #1
 8001cb4:	639a      	str	r2, [r3, #56]	; 0x38
 8001cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001cc0:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001cc4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2602      	movs	r6, #2
 8001cc8:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cca:	2503      	movs	r5, #3
 8001ccc:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cce:	240c      	movs	r4, #12
 8001cd0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cd2:	a901      	add	r1, sp, #4
 8001cd4:	481e      	ldr	r0, [pc, #120]	; (8001d50 <HAL_FMC_MspInit+0xc4>)
 8001cd6:	f000 fbfd 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001cda:	f248 1333 	movw	r3, #33075	; 0x8133
 8001cde:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2700      	movs	r7, #0
 8001ce4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ce8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cea:	a901      	add	r1, sp, #4
 8001cec:	4819      	ldr	r0, [pc, #100]	; (8001d54 <HAL_FMC_MspInit+0xc8>)
 8001cee:	f000 fbf1 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001cf2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001cf6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfc:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cfe:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d00:	a901      	add	r1, sp, #4
 8001d02:	4815      	ldr	r0, [pc, #84]	; (8001d58 <HAL_FMC_MspInit+0xcc>)
 8001d04:	f000 fbe6 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001d08:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001d0c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d14:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d16:	a901      	add	r1, sp, #4
 8001d18:	4810      	ldr	r0, [pc, #64]	; (8001d5c <HAL_FMC_MspInit+0xd0>)
 8001d1a:	f000 fbdb 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001d1e:	2328      	movs	r3, #40	; 0x28
 8001d20:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d26:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d28:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d2a:	a901      	add	r1, sp, #4
 8001d2c:	480c      	ldr	r0, [pc, #48]	; (8001d60 <HAL_FMC_MspInit+0xd4>)
 8001d2e:	f000 fbd1 	bl	80024d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001d32:	2308      	movs	r3, #8
 8001d34:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d3c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001d3e:	a901      	add	r1, sp, #4
 8001d40:	4808      	ldr	r0, [pc, #32]	; (8001d64 <HAL_FMC_MspInit+0xd8>)
 8001d42:	f000 fbc7 	bl	80024d4 <HAL_GPIO_Init>
 8001d46:	e7ac      	b.n	8001ca2 <HAL_FMC_MspInit+0x16>
 8001d48:	2003fed0 	.word	0x2003fed0
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40021800 	.word	0x40021800
 8001d58:	40020c00 	.word	0x40020c00
 8001d5c:	40021400 	.word	0x40021400
 8001d60:	40021c00 	.word	0x40021c00
 8001d64:	40020800 	.word	0x40020800

08001d68 <HAL_MspInit>:
{
 8001d68:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_MspInit+0x2c>)
 8001d6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d72:	641a      	str	r2, [r3, #64]	; 0x40
 8001d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d76:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001d7a:	9200      	str	r2, [sp, #0]
 8001d7c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d84:	645a      	str	r2, [r3, #68]	; 0x44
 8001d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8c:	9301      	str	r3, [sp, #4]
 8001d8e:	9b01      	ldr	r3, [sp, #4]
}
 8001d90:	b002      	add	sp, #8
 8001d92:	4770      	bx	lr
 8001d94:	40023800 	.word	0x40023800

08001d98 <HAL_DMA2D_MspInit>:
  if(hdma2d->Instance==DMA2D)
 8001d98:	6802      	ldr	r2, [r0, #0]
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <HAL_DMA2D_MspInit+0x3c>)
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d000      	beq.n	8001da2 <HAL_DMA2D_MspInit+0xa>
 8001da0:	4770      	bx	lr
{
 8001da2:	b500      	push	{lr}
 8001da4:	b083      	sub	sp, #12
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001da6:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 8001daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001db0:	631a      	str	r2, [r3, #48]	; 0x30
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	205a      	movs	r0, #90	; 0x5a
 8001dc2:	f000 f9c5 	bl	8002150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001dc6:	205a      	movs	r0, #90	; 0x5a
 8001dc8:	f000 f9f8 	bl	80021bc <HAL_NVIC_EnableIRQ>
}
 8001dcc:	b003      	add	sp, #12
 8001dce:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dd2:	bf00      	nop
 8001dd4:	4002b000 	.word	0x4002b000

08001dd8 <HAL_I2C_MspInit>:
{
 8001dd8:	b510      	push	{r4, lr}
 8001dda:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	2300      	movs	r3, #0
 8001dde:	9303      	str	r3, [sp, #12]
 8001de0:	9304      	str	r3, [sp, #16]
 8001de2:	9305      	str	r3, [sp, #20]
 8001de4:	9306      	str	r3, [sp, #24]
 8001de6:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C3)
 8001de8:	6802      	ldr	r2, [r0, #0]
 8001dea:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <HAL_I2C_MspInit+0x64>)
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_I2C_MspInit+0x1c>
}
 8001df0:	b008      	add	sp, #32
 8001df2:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001df4:	4c12      	ldr	r4, [pc, #72]	; (8001e40 <HAL_I2C_MspInit+0x68>)
 8001df6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dfc:	6323      	str	r3, [r4, #48]	; 0x30
 8001dfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e04:	9301      	str	r3, [sp, #4]
 8001e06:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001e08:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001e0c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e0e:	2312      	movs	r3, #18
 8001e10:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e12:	2301      	movs	r3, #1
 8001e14:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e16:	2303      	movs	r3, #3
 8001e18:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e1e:	a903      	add	r1, sp, #12
 8001e20:	4808      	ldr	r0, [pc, #32]	; (8001e44 <HAL_I2C_MspInit+0x6c>)
 8001e22:	f000 fb57 	bl	80024d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e2c:	6423      	str	r3, [r4, #64]	; 0x40
 8001e2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e34:	9302      	str	r3, [sp, #8]
 8001e36:	9b02      	ldr	r3, [sp, #8]
}
 8001e38:	e7da      	b.n	8001df0 <HAL_I2C_MspInit+0x18>
 8001e3a:	bf00      	nop
 8001e3c:	40005c00 	.word	0x40005c00
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40021c00 	.word	0x40021c00

08001e48 <HAL_LTDC_MspInit>:
{
 8001e48:	b570      	push	{r4, r5, r6, lr}
 8001e4a:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	9307      	str	r3, [sp, #28]
 8001e50:	9308      	str	r3, [sp, #32]
 8001e52:	9309      	str	r3, [sp, #36]	; 0x24
 8001e54:	930a      	str	r3, [sp, #40]	; 0x28
 8001e56:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hltdc->Instance==LTDC)
 8001e58:	6802      	ldr	r2, [r0, #0]
 8001e5a:	4b3e      	ldr	r3, [pc, #248]	; (8001f54 <HAL_LTDC_MspInit+0x10c>)
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d001      	beq.n	8001e64 <HAL_LTDC_MspInit+0x1c>
}
 8001e60:	b00c      	add	sp, #48	; 0x30
 8001e62:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001e64:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8001e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e6a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001e6e:	645a      	str	r2, [r3, #68]	; 0x44
 8001e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e72:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001e76:	9201      	str	r2, [sp, #4]
 8001e78:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e7c:	f042 0210 	orr.w	r2, r2, #16
 8001e80:	631a      	str	r2, [r3, #48]	; 0x30
 8001e82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e84:	f002 0210 	and.w	r2, r2, #16
 8001e88:	9202      	str	r2, [sp, #8]
 8001e8a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e92:	631a      	str	r2, [r3, #48]	; 0x30
 8001e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e96:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001e9a:	9203      	str	r2, [sp, #12]
 8001e9c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ea0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ea4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ea8:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001eac:	9204      	str	r2, [sp, #16]
 8001eae:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
 8001eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eba:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001ebe:	9205      	str	r2, [sp, #20]
 8001ec0:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ec8:	631a      	str	r2, [r3, #48]	; 0x30
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed0:	9306      	str	r3, [sp, #24]
 8001ed2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001ed4:	2310      	movs	r3, #16
 8001ed6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2502      	movs	r5, #2
 8001eda:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001edc:	260e      	movs	r6, #14
 8001ede:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001ee0:	a907      	add	r1, sp, #28
 8001ee2:	481d      	ldr	r0, [pc, #116]	; (8001f58 <HAL_LTDC_MspInit+0x110>)
 8001ee4:	f000 faf6 	bl	80024d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001ee8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001eec:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2400      	movs	r4, #0
 8001ef2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef4:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ef6:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001ef8:	a907      	add	r1, sp, #28
 8001efa:	4818      	ldr	r0, [pc, #96]	; (8001f5c <HAL_LTDC_MspInit+0x114>)
 8001efc:	f000 faea 	bl	80024d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001f00:	23f7      	movs	r3, #247	; 0xf7
 8001f02:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f0a:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001f0c:	a907      	add	r1, sp, #28
 8001f0e:	4814      	ldr	r0, [pc, #80]	; (8001f60 <HAL_LTDC_MspInit+0x118>)
 8001f10:	f000 fae0 	bl	80024d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f18:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001f20:	2309      	movs	r3, #9
 8001f22:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001f24:	a907      	add	r1, sp, #28
 8001f26:	480f      	ldr	r0, [pc, #60]	; (8001f64 <HAL_LTDC_MspInit+0x11c>)
 8001f28:	f000 fad4 	bl	80024d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001f2c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001f30:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f36:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f38:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f3a:	a907      	add	r1, sp, #28
 8001f3c:	480a      	ldr	r0, [pc, #40]	; (8001f68 <HAL_LTDC_MspInit+0x120>)
 8001f3e:	f000 fac9 	bl	80024d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001f42:	4622      	mov	r2, r4
 8001f44:	4621      	mov	r1, r4
 8001f46:	2058      	movs	r0, #88	; 0x58
 8001f48:	f000 f902 	bl	8002150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001f4c:	2058      	movs	r0, #88	; 0x58
 8001f4e:	f000 f935 	bl	80021bc <HAL_NVIC_EnableIRQ>
}
 8001f52:	e785      	b.n	8001e60 <HAL_LTDC_MspInit+0x18>
 8001f54:	40016800 	.word	0x40016800
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40022400 	.word	0x40022400
 8001f60:	40022800 	.word	0x40022800
 8001f64:	40021800 	.word	0x40021800
 8001f68:	40022000 	.word	0x40022000

08001f6c <HAL_RTC_MspInit>:
  if(hrtc->Instance==RTC)
 8001f6c:	6802      	ldr	r2, [r0, #0]
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <HAL_RTC_MspInit+0x18>)
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d000      	beq.n	8001f76 <HAL_RTC_MspInit+0xa>
}
 8001f74:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8001f76:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <HAL_RTC_MspInit+0x1c>)
 8001f78:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f7e:	6713      	str	r3, [r2, #112]	; 0x70
}
 8001f80:	e7f8      	b.n	8001f74 <HAL_RTC_MspInit+0x8>
 8001f82:	bf00      	nop
 8001f84:	40002800 	.word	0x40002800
 8001f88:	40023800 	.word	0x40023800

08001f8c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001f8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001f8e:	f7ff fe7d 	bl	8001c8c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001f92:	bd08      	pop	{r3, pc}

08001f94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f94:	b500      	push	{lr}
 8001f96:	b089      	sub	sp, #36	; 0x24
 8001f98:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2036      	movs	r0, #54	; 0x36
 8001f9e:	f000 f8d7 	bl	8002150 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fa2:	2036      	movs	r0, #54	; 0x36
 8001fa4:	f000 f90a 	bl	80021bc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001fa8:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_InitTick+0x6c>)
 8001faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fac:	f042 0210 	orr.w	r2, r2, #16
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fbc:	a902      	add	r1, sp, #8
 8001fbe:	a803      	add	r0, sp, #12
 8001fc0:	f001 fcf0 	bl	80039a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001fc4:	f001 fcde 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 8001fc8:	0043      	lsls	r3, r0, #1
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fca:	480e      	ldr	r0, [pc, #56]	; (8002004 <HAL_InitTick+0x70>)
 8001fcc:	fba0 2303 	umull	r2, r3, r0, r3
 8001fd0:	0c9b      	lsrs	r3, r3, #18
 8001fd2:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001fd4:	480c      	ldr	r0, [pc, #48]	; (8002008 <HAL_InitTick+0x74>)
 8001fd6:	4a0d      	ldr	r2, [pc, #52]	; (800200c <HAL_InitTick+0x78>)
 8001fd8:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001fda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fde:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001fe0:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe6:	6083      	str	r3, [r0, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001fe8:	f002 fc08 	bl	80047fc <HAL_TIM_Base_Init>
 8001fec:	b118      	cbz	r0, 8001ff6 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
 8001fee:	2001      	movs	r0, #1
}
 8001ff0:	b009      	add	sp, #36	; 0x24
 8001ff2:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim6);
 8001ff6:	4804      	ldr	r0, [pc, #16]	; (8002008 <HAL_InitTick+0x74>)
 8001ff8:	f002 fa5e 	bl	80044b8 <HAL_TIM_Base_Start_IT>
 8001ffc:	e7f8      	b.n	8001ff0 <HAL_InitTick+0x5c>
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800
 8002004:	431bde83 	.word	0x431bde83
 8002008:	2003fed4 	.word	0x2003fed4
 800200c:	40001000 	.word	0x40001000

08002010 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002010:	e7fe      	b.n	8002010 <NMI_Handler>

08002012 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002012:	e7fe      	b.n	8002012 <HardFault_Handler>

08002014 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <MemManage_Handler>

08002016 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002016:	e7fe      	b.n	8002016 <BusFault_Handler>

08002018 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002018:	e7fe      	b.n	8002018 <UsageFault_Handler>

0800201a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800201a:	4770      	bx	lr

0800201c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201c:	4770      	bx	lr

0800201e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800201e:	4770      	bx	lr

08002020 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002020:	4770      	bx	lr
	...

08002024 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002024:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002026:	4802      	ldr	r0, [pc, #8]	; (8002030 <TIM6_DAC_IRQHandler+0xc>)
 8002028:	f002 fa92 	bl	8004550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800202c:	bd08      	pop	{r3, pc}
 800202e:	bf00      	nop
 8002030:	2003fed4 	.word	0x2003fed4

08002034 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002034:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002036:	4802      	ldr	r0, [pc, #8]	; (8002040 <LTDC_IRQHandler+0xc>)
 8002038:	f001 f873 	bl	8003122 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800203c:	bd08      	pop	{r3, pc}
 800203e:	bf00      	nop
 8002040:	2003fdd4 	.word	0x2003fdd4

08002044 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002044:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002046:	4802      	ldr	r0, [pc, #8]	; (8002050 <DMA2D_IRQHandler+0xc>)
 8002048:	f000 f944 	bl	80022d4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800204c:	bd08      	pop	{r3, pc}
 800204e:	bf00      	nop
 8002050:	2003fd48 	.word	0x2003fd48

08002054 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002054:	4a03      	ldr	r2, [pc, #12]	; (8002064 <SystemInit+0x10>)
 8002056:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800205a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800205e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800206c:	480d      	ldr	r0, [pc, #52]	; (80020a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800206e:	490e      	ldr	r1, [pc, #56]	; (80020a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002070:	4a0e      	ldr	r2, [pc, #56]	; (80020ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002074:	e002      	b.n	800207c <LoopCopyDataInit>

08002076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800207a:	3304      	adds	r3, #4

0800207c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800207c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800207e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002080:	d3f9      	bcc.n	8002076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002082:	4a0b      	ldr	r2, [pc, #44]	; (80020b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002084:	4c0b      	ldr	r4, [pc, #44]	; (80020b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002088:	e001      	b.n	800208e <LoopFillZerobss>

0800208a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800208a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800208c:	3204      	adds	r2, #4

0800208e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800208e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002090:	d3fb      	bcc.n	800208a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002092:	f7ff ffdf 	bl	8002054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002096:	f002 fc73 	bl	8004980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800209a:	f7ff fddd 	bl	8001c58 <main>
  bx  lr    
 800209e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020a0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80020a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80020ac:	08004a18 	.word	0x08004a18
  ldr r2, =_sbss
 80020b0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80020b4:	2003ff24 	.word	0x2003ff24

080020b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020b8:	e7fe      	b.n	80020b8 <ADC_IRQHandler>
	...

080020bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020bc:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80020be:	4a07      	ldr	r2, [pc, #28]	; (80020dc <HAL_Init+0x20>)
 80020c0:	6813      	ldr	r3, [r2, #0]
 80020c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020c6:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c8:	2003      	movs	r0, #3
 80020ca:	f000 f82f 	bl	800212c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ce:	2000      	movs	r0, #0
 80020d0:	f7ff ff60 	bl	8001f94 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80020d4:	f7ff fe48 	bl	8001d68 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80020d8:	2000      	movs	r0, #0
 80020da:	bd08      	pop	{r3, pc}
 80020dc:	40023c00 	.word	0x40023c00

080020e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80020e0:	4a03      	ldr	r2, [pc, #12]	; (80020f0 <HAL_IncTick+0x10>)
 80020e2:	6811      	ldr	r1, [r2, #0]
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <HAL_IncTick+0x14>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	440b      	add	r3, r1
 80020ea:	6013      	str	r3, [r2, #0]
}
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	2003ff20 	.word	0x2003ff20
 80020f4:	2000000c 	.word	0x2000000c

080020f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80020f8:	4b01      	ldr	r3, [pc, #4]	; (8002100 <HAL_GetTick+0x8>)
 80020fa:	6818      	ldr	r0, [r3, #0]
}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	2003ff20 	.word	0x2003ff20

08002104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002104:	b538      	push	{r3, r4, r5, lr}
 8002106:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002108:	f7ff fff6 	bl	80020f8 <HAL_GetTick>
 800210c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002112:	d002      	beq.n	800211a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <HAL_Delay+0x24>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800211a:	f7ff ffed 	bl	80020f8 <HAL_GetTick>
 800211e:	1b40      	subs	r0, r0, r5
 8002120:	42a0      	cmp	r0, r4
 8002122:	d3fa      	bcc.n	800211a <HAL_Delay+0x16>
  {
  }
}
 8002124:	bd38      	pop	{r3, r4, r5, pc}
 8002126:	bf00      	nop
 8002128:	2000000c 	.word	0x2000000c

0800212c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800212c:	4906      	ldr	r1, [pc, #24]	; (8002148 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800212e:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002130:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002134:	041b      	lsls	r3, r3, #16
 8002136:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002138:	0200      	lsls	r0, r0, #8
 800213a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800213e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002140:	4a02      	ldr	r2, [pc, #8]	; (800214c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002142:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8002144:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002146:	4770      	bx	lr
 8002148:	e000ed00 	.word	0xe000ed00
 800214c:	05fa0000 	.word	0x05fa0000

08002150 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002150:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002152:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <HAL_NVIC_SetPriority+0x60>)
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800215a:	f1c3 0c07 	rsb	ip, r3, #7
 800215e:	f1bc 0f04 	cmp.w	ip, #4
 8002162:	bf28      	it	cs
 8002164:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002168:	f103 0e04 	add.w	lr, r3, #4
 800216c:	f1be 0f06 	cmp.w	lr, #6
 8002170:	d914      	bls.n	800219c <HAL_NVIC_SetPriority+0x4c>
 8002172:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	f04f 3eff 	mov.w	lr, #4294967295
 8002178:	fa0e fc0c 	lsl.w	ip, lr, ip
 800217c:	ea21 010c 	bic.w	r1, r1, ip
 8002180:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002182:	fa0e f303 	lsl.w	r3, lr, r3
 8002186:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800218c:	2800      	cmp	r0, #0
 800218e:	db07      	blt.n	80021a0 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002190:	0109      	lsls	r1, r1, #4
 8002192:	b2c9      	uxtb	r1, r1
 8002194:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <HAL_NVIC_SetPriority+0x64>)
 8002196:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002198:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219c:	2300      	movs	r3, #0
 800219e:	e7e9      	b.n	8002174 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a0:	f000 000f 	and.w	r0, r0, #15
 80021a4:	0109      	lsls	r1, r1, #4
 80021a6:	b2c9      	uxtb	r1, r1
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <HAL_NVIC_SetPriority+0x68>)
 80021aa:	5419      	strb	r1, [r3, r0]
 80021ac:	e7f4      	b.n	8002198 <HAL_NVIC_SetPriority+0x48>
 80021ae:	bf00      	nop
 80021b0:	e000ed00 	.word	0xe000ed00
 80021b4:	e000e400 	.word	0xe000e400
 80021b8:	e000ed14 	.word	0xe000ed14

080021bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80021bc:	2800      	cmp	r0, #0
 80021be:	db07      	blt.n	80021d0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c0:	f000 021f 	and.w	r2, r0, #31
 80021c4:	0940      	lsrs	r0, r0, #5
 80021c6:	2301      	movs	r3, #1
 80021c8:	4093      	lsls	r3, r2
 80021ca:	4a02      	ldr	r2, [pc, #8]	; (80021d4 <HAL_NVIC_EnableIRQ+0x18>)
 80021cc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000e100 	.word	0xe000e100

080021d8 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80021d8:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80021dc:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <HAL_MPU_Disable+0x18>)
 80021de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80021e6:	2200      	movs	r2, #0
 80021e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80021f4:	f040 0001 	orr.w	r0, r0, #1
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <HAL_MPU_Enable+0x1c>)
 80021fa:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80021fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002200:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002204:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002206:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800220a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800220e:	4770      	bx	lr
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002214:	7842      	ldrb	r2, [r0, #1]
 8002216:	4b16      	ldr	r3, [pc, #88]	; (8002270 <HAL_MPU_ConfigRegion+0x5c>)
 8002218:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 800221c:	7803      	ldrb	r3, [r0, #0]
 800221e:	b1fb      	cbz	r3, 8002260 <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8002220:	6843      	ldr	r3, [r0, #4]
 8002222:	4a13      	ldr	r2, [pc, #76]	; (8002270 <HAL_MPU_ConfigRegion+0x5c>)
 8002224:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002228:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800222a:	7ac3      	ldrb	r3, [r0, #11]
 800222c:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800222e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002232:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002234:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002238:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800223a:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800223e:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002240:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002244:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800224a:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800224c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002250:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002252:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002256:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002258:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800225a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 800225e:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <HAL_MPU_ConfigRegion+0x5c>)
 8002262:	2200      	movs	r2, #0
 8002264:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 8002268:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002274:	b338      	cbz	r0, 80022c6 <HAL_DMA2D_Init+0x52>
{
 8002276:	b510      	push	{r4, lr}
 8002278:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800227a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800227e:	b1eb      	cbz	r3, 80022bc <HAL_DMA2D_Init+0x48>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002280:	2302      	movs	r3, #2
 8002282:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002286:	6822      	ldr	r2, [r4, #0]
 8002288:	6813      	ldr	r3, [r2, #0]
 800228a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800228e:	6861      	ldr	r1, [r4, #4]
 8002290:	430b      	orrs	r3, r1
 8002292:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002294:	6822      	ldr	r2, [r4, #0]
 8002296:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002298:	f023 0307 	bic.w	r3, r3, #7
 800229c:	68a1      	ldr	r1, [r4, #8]
 800229e:	430b      	orrs	r3, r1
 80022a0:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80022a2:	6822      	ldr	r2, [r4, #0]
 80022a4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <HAL_DMA2D_Init+0x58>)
 80022a8:	400b      	ands	r3, r1
 80022aa:	68e1      	ldr	r1, [r4, #12]
 80022ac:	430b      	orrs	r3, r1
 80022ae:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80022b0:	2000      	movs	r0, #0
 80022b2:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80022b4:	2301      	movs	r3, #1
 80022b6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 80022ba:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 80022bc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 80022c0:	f7ff fd6a 	bl	8001d98 <HAL_DMA2D_MspInit>
 80022c4:	e7dc      	b.n	8002280 <HAL_DMA2D_Init+0xc>
    return HAL_ERROR;
 80022c6:	2001      	movs	r0, #1
}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	ffffc000 	.word	0xffffc000

080022d0 <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80022d0:	4770      	bx	lr

080022d2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80022d2:	4770      	bx	lr

080022d4 <HAL_DMA2D_IRQHandler>:
{
 80022d4:	b570      	push	{r4, r5, r6, lr}
 80022d6:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80022d8:	6803      	ldr	r3, [r0, #0]
 80022da:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80022dc:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80022de:	f015 0f01 	tst.w	r5, #1
 80022e2:	d016      	beq.n	8002312 <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 80022e4:	f416 7f80 	tst.w	r6, #256	; 0x100
 80022e8:	d013      	beq.n	8002312 <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022f0:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80022f2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	63c3      	str	r3, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80022fa:	6803      	ldr	r3, [r0, #0]
 80022fc:	2201      	movs	r2, #1
 80022fe:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002300:	2304      	movs	r3, #4
 8002302:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8002306:	2300      	movs	r3, #0
 8002308:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 800230c:	6943      	ldr	r3, [r0, #20]
 800230e:	b103      	cbz	r3, 8002312 <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 8002310:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002312:	f015 0f20 	tst.w	r5, #32
 8002316:	d018      	beq.n	800234a <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002318:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800231c:	d015      	beq.n	800234a <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800231e:	6822      	ldr	r2, [r4, #0]
 8002320:	6813      	ldr	r3, [r2, #0]
 8002322:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002326:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002328:	6823      	ldr	r3, [r4, #0]
 800232a:	2220      	movs	r2, #32
 800232c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800232e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002330:	f043 0302 	orr.w	r3, r3, #2
 8002334:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002336:	2304      	movs	r3, #4
 8002338:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800233c:	2300      	movs	r3, #0
 800233e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8002342:	6963      	ldr	r3, [r4, #20]
 8002344:	b10b      	cbz	r3, 800234a <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 8002346:	4620      	mov	r0, r4
 8002348:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800234a:	f015 0f08 	tst.w	r5, #8
 800234e:	d018      	beq.n	8002382 <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002350:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8002354:	d015      	beq.n	8002382 <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002356:	6822      	ldr	r2, [r4, #0]
 8002358:	6813      	ldr	r3, [r2, #0]
 800235a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800235e:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002360:	6823      	ldr	r3, [r4, #0]
 8002362:	2208      	movs	r2, #8
 8002364:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002366:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002368:	f043 0304 	orr.w	r3, r3, #4
 800236c:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800236e:	2304      	movs	r3, #4
 8002370:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8002374:	2300      	movs	r3, #0
 8002376:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 800237a:	6963      	ldr	r3, [r4, #20]
 800237c:	b10b      	cbz	r3, 8002382 <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 800237e:	4620      	mov	r0, r4
 8002380:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002382:	f015 0f04 	tst.w	r5, #4
 8002386:	d002      	beq.n	800238e <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002388:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800238c:	d120      	bne.n	80023d0 <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800238e:	f015 0f02 	tst.w	r5, #2
 8002392:	d016      	beq.n	80023c2 <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002394:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002398:	d013      	beq.n	80023c2 <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800239a:	6822      	ldr	r2, [r4, #0]
 800239c:	6813      	ldr	r3, [r2, #0]
 800239e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023a2:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80023a4:	6823      	ldr	r3, [r4, #0]
 80023a6:	2202      	movs	r2, #2
 80023a8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80023aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80023ac:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80023ae:	2301      	movs	r3, #1
 80023b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80023b4:	2300      	movs	r3, #0
 80023b6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferCpltCallback != NULL)
 80023ba:	6923      	ldr	r3, [r4, #16]
 80023bc:	b10b      	cbz	r3, 80023c2 <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 80023be:	4620      	mov	r0, r4
 80023c0:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80023c2:	f015 0f10 	tst.w	r5, #16
 80023c6:	d002      	beq.n	80023ce <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80023c8:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 80023cc:	d10c      	bne.n	80023e8 <HAL_DMA2D_IRQHandler+0x114>
}
 80023ce:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80023d0:	6822      	ldr	r2, [r4, #0]
 80023d2:	6813      	ldr	r3, [r2, #0]
 80023d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023d8:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80023da:	6823      	ldr	r3, [r4, #0]
 80023dc:	2204      	movs	r2, #4
 80023de:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80023e0:	4620      	mov	r0, r4
 80023e2:	f7ff ff75 	bl	80022d0 <HAL_DMA2D_LineEventCallback>
 80023e6:	e7d2      	b.n	800238e <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80023e8:	6822      	ldr	r2, [r4, #0]
 80023ea:	6813      	ldr	r3, [r2, #0]
 80023ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023f0:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80023f2:	6823      	ldr	r3, [r4, #0]
 80023f4:	2210      	movs	r2, #16
 80023f6:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80023f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80023fa:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80023fc:	2301      	movs	r3, #1
 80023fe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8002402:	2300      	movs	r3, #0
 8002404:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002408:	4620      	mov	r0, r4
 800240a:	f7ff ff62 	bl	80022d2 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800240e:	e7de      	b.n	80023ce <HAL_DMA2D_IRQHandler+0xfa>

08002410 <HAL_DMA2D_ConfigLayer>:
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002410:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002414:	2b01      	cmp	r3, #1
 8002416:	d059      	beq.n	80024cc <HAL_DMA2D_ConfigLayer+0xbc>
{
 8002418:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 800241a:	2301      	movs	r3, #1
 800241c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002420:	2302      	movs	r3, #2
 8002422:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002426:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 800242a:	69da      	ldr	r2, [r3, #28]
 800242c:	1c8b      	adds	r3, r1, #2
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	58c3      	ldr	r3, [r0, r3]
 8002432:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002436:	3a09      	subs	r2, #9
 8002438:	2a01      	cmp	r2, #1
 800243a:	d91e      	bls.n	800247a <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800243c:	1c8a      	adds	r2, r1, #2
 800243e:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8002442:	6852      	ldr	r2, [r2, #4]
 8002444:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002448:	bb41      	cbnz	r1, 800249c <HAL_DMA2D_ConfigLayer+0x8c>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800244a:	6804      	ldr	r4, [r0, #0]
 800244c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800244e:	4a20      	ldr	r2, [pc, #128]	; (80024d0 <HAL_DMA2D_ConfigLayer+0xc0>)
 8002450:	402a      	ands	r2, r5
 8002452:	4313      	orrs	r3, r2
 8002454:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002456:	6802      	ldr	r2, [r0, #0]
 8002458:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 800245c:	699c      	ldr	r4, [r3, #24]
 800245e:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	3b09      	subs	r3, #9
 8002464:	2b01      	cmp	r3, #1
 8002466:	d910      	bls.n	800248a <HAL_DMA2D_ConfigLayer+0x7a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002468:	2301      	movs	r3, #1
 800246a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800246e:	2300      	movs	r3, #0
 8002470:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8002474:	4618      	mov	r0, r3
}
 8002476:	bc30      	pop	{r4, r5}
 8002478:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800247a:	1c8a      	adds	r2, r1, #2
 800247c:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8002480:	6852      	ldr	r2, [r2, #4]
 8002482:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002486:	4313      	orrs	r3, r2
 8002488:	e7de      	b.n	8002448 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800248a:	3102      	adds	r1, #2
 800248c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002490:	684b      	ldr	r3, [r1, #4]
 8002492:	6802      	ldr	r2, [r0, #0]
 8002494:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002498:	6293      	str	r3, [r2, #40]	; 0x28
 800249a:	e7e5      	b.n	8002468 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800249c:	6804      	ldr	r4, [r0, #0]
 800249e:	69e5      	ldr	r5, [r4, #28]
 80024a0:	4a0b      	ldr	r2, [pc, #44]	; (80024d0 <HAL_DMA2D_ConfigLayer+0xc0>)
 80024a2:	402a      	ands	r2, r5
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80024a8:	6802      	ldr	r2, [r0, #0]
 80024aa:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80024ae:	699c      	ldr	r4, [r3, #24]
 80024b0:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	3b09      	subs	r3, #9
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d8d6      	bhi.n	8002468 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80024ba:	3102      	adds	r1, #2
 80024bc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80024c0:	684b      	ldr	r3, [r1, #4]
 80024c2:	6802      	ldr	r2, [r0, #0]
 80024c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80024c8:	6213      	str	r3, [r2, #32]
 80024ca:	e7cd      	b.n	8002468 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 80024cc:	2002      	movs	r0, #2
}
 80024ce:	4770      	bx	lr
 80024d0:	00fcfff0 	.word	0x00fcfff0

080024d4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024d4:	2300      	movs	r3, #0
 80024d6:	2b0f      	cmp	r3, #15
 80024d8:	f200 80e4 	bhi.w	80026a4 <HAL_GPIO_Init+0x1d0>
{
 80024dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024de:	b083      	sub	sp, #12
 80024e0:	e03a      	b.n	8002558 <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024e2:	2209      	movs	r2, #9
 80024e4:	e000      	b.n	80024e8 <HAL_GPIO_Init+0x14>
 80024e6:	2200      	movs	r2, #0
 80024e8:	40aa      	lsls	r2, r5
 80024ea:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 80024ec:	3402      	adds	r4, #2
 80024ee:	4d6e      	ldr	r5, [pc, #440]	; (80026a8 <HAL_GPIO_Init+0x1d4>)
 80024f0:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f4:	4a6d      	ldr	r2, [pc, #436]	; (80026ac <HAL_GPIO_Init+0x1d8>)
 80024f6:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80024f8:	ea6f 020c 	mvn.w	r2, ip
 80024fc:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002500:	684e      	ldr	r6, [r1, #4]
 8002502:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8002506:	d001      	beq.n	800250c <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8002508:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 800250c:	4c67      	ldr	r4, [pc, #412]	; (80026ac <HAL_GPIO_Init+0x1d8>)
 800250e:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8002510:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002512:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002516:	684e      	ldr	r6, [r1, #4]
 8002518:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 800251c:	d001      	beq.n	8002522 <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 800251e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8002522:	4c62      	ldr	r4, [pc, #392]	; (80026ac <HAL_GPIO_Init+0x1d8>)
 8002524:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002526:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002528:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800252c:	684e      	ldr	r6, [r1, #4]
 800252e:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8002532:	d001      	beq.n	8002538 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 8002534:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8002538:	4c5c      	ldr	r4, [pc, #368]	; (80026ac <HAL_GPIO_Init+0x1d8>)
 800253a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 800253c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800253e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002540:	684d      	ldr	r5, [r1, #4]
 8002542:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8002546:	d001      	beq.n	800254c <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8002548:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 800254c:	4c57      	ldr	r4, [pc, #348]	; (80026ac <HAL_GPIO_Init+0x1d8>)
 800254e:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002550:	3301      	adds	r3, #1
 8002552:	2b0f      	cmp	r3, #15
 8002554:	f200 80a4 	bhi.w	80026a0 <HAL_GPIO_Init+0x1cc>
    ioposition = ((uint32_t)0x01) << position;
 8002558:	2201      	movs	r2, #1
 800255a:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800255c:	680c      	ldr	r4, [r1, #0]
 800255e:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8002562:	ea32 0404 	bics.w	r4, r2, r4
 8002566:	d1f3      	bne.n	8002550 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002568:	684c      	ldr	r4, [r1, #4]
 800256a:	1e65      	subs	r5, r4, #1
 800256c:	2c11      	cmp	r4, #17
 800256e:	bf18      	it	ne
 8002570:	2d01      	cmpne	r5, #1
 8002572:	d901      	bls.n	8002578 <HAL_GPIO_Init+0xa4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002574:	2c12      	cmp	r4, #18
 8002576:	d112      	bne.n	800259e <HAL_GPIO_Init+0xca>
        temp = GPIOx->OSPEEDR; 
 8002578:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800257a:	005e      	lsls	r6, r3, #1
 800257c:	2403      	movs	r4, #3
 800257e:	40b4      	lsls	r4, r6
 8002580:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8002584:	68cc      	ldr	r4, [r1, #12]
 8002586:	40b4      	lsls	r4, r6
 8002588:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800258a:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800258c:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800258e:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002592:	684c      	ldr	r4, [r1, #4]
 8002594:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8002598:	409a      	lsls	r2, r3
 800259a:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 800259c:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800259e:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80025a0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80025a4:	2403      	movs	r4, #3
 80025a6:	fa04 f40e 	lsl.w	r4, r4, lr
 80025aa:	43e2      	mvns	r2, r4
 80025ac:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80025b0:	688c      	ldr	r4, [r1, #8]
 80025b2:	fa04 f40e 	lsl.w	r4, r4, lr
 80025b6:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80025b8:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025ba:	684c      	ldr	r4, [r1, #4]
 80025bc:	2c12      	cmp	r4, #18
 80025be:	bf18      	it	ne
 80025c0:	2c02      	cmpne	r4, #2
 80025c2:	d10f      	bne.n	80025e4 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3];
 80025c4:	08dd      	lsrs	r5, r3, #3
 80025c6:	3508      	adds	r5, #8
 80025c8:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025cc:	f003 0407 	and.w	r4, r3, #7
 80025d0:	00a6      	lsls	r6, r4, #2
 80025d2:	240f      	movs	r4, #15
 80025d4:	40b4      	lsls	r4, r6
 80025d6:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025da:	690c      	ldr	r4, [r1, #16]
 80025dc:	40b4      	lsls	r4, r6
 80025de:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 80025e0:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 80025e4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025e6:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025e8:	684a      	ldr	r2, [r1, #4]
 80025ea:	f002 0203 	and.w	r2, r2, #3
 80025ee:	fa02 f20e 	lsl.w	r2, r2, lr
 80025f2:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80025f4:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025f6:	684a      	ldr	r2, [r1, #4]
 80025f8:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80025fc:	d0a8      	beq.n	8002550 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fe:	4a2c      	ldr	r2, [pc, #176]	; (80026b0 <HAL_GPIO_Init+0x1dc>)
 8002600:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002602:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002606:	6454      	str	r4, [r2, #68]	; 0x44
 8002608:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800260a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800260e:	9201      	str	r2, [sp, #4]
 8002610:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8002612:	089c      	lsrs	r4, r3, #2
 8002614:	1ca5      	adds	r5, r4, #2
 8002616:	4a24      	ldr	r2, [pc, #144]	; (80026a8 <HAL_GPIO_Init+0x1d4>)
 8002618:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800261c:	f003 0203 	and.w	r2, r3, #3
 8002620:	0095      	lsls	r5, r2, #2
 8002622:	220f      	movs	r2, #15
 8002624:	40aa      	lsls	r2, r5
 8002626:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800262a:	4a22      	ldr	r2, [pc, #136]	; (80026b4 <HAL_GPIO_Init+0x1e0>)
 800262c:	4290      	cmp	r0, r2
 800262e:	f43f af5a 	beq.w	80024e6 <HAL_GPIO_Init+0x12>
 8002632:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002636:	4290      	cmp	r0, r2
 8002638:	d022      	beq.n	8002680 <HAL_GPIO_Init+0x1ac>
 800263a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800263e:	4290      	cmp	r0, r2
 8002640:	d020      	beq.n	8002684 <HAL_GPIO_Init+0x1b0>
 8002642:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002646:	4290      	cmp	r0, r2
 8002648:	d01e      	beq.n	8002688 <HAL_GPIO_Init+0x1b4>
 800264a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800264e:	4290      	cmp	r0, r2
 8002650:	d01c      	beq.n	800268c <HAL_GPIO_Init+0x1b8>
 8002652:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002656:	4290      	cmp	r0, r2
 8002658:	d01a      	beq.n	8002690 <HAL_GPIO_Init+0x1bc>
 800265a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800265e:	4290      	cmp	r0, r2
 8002660:	d018      	beq.n	8002694 <HAL_GPIO_Init+0x1c0>
 8002662:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002666:	4290      	cmp	r0, r2
 8002668:	d016      	beq.n	8002698 <HAL_GPIO_Init+0x1c4>
 800266a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800266e:	4290      	cmp	r0, r2
 8002670:	d014      	beq.n	800269c <HAL_GPIO_Init+0x1c8>
 8002672:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002676:	4290      	cmp	r0, r2
 8002678:	f43f af33 	beq.w	80024e2 <HAL_GPIO_Init+0xe>
 800267c:	220a      	movs	r2, #10
 800267e:	e733      	b.n	80024e8 <HAL_GPIO_Init+0x14>
 8002680:	2201      	movs	r2, #1
 8002682:	e731      	b.n	80024e8 <HAL_GPIO_Init+0x14>
 8002684:	2202      	movs	r2, #2
 8002686:	e72f      	b.n	80024e8 <HAL_GPIO_Init+0x14>
 8002688:	2203      	movs	r2, #3
 800268a:	e72d      	b.n	80024e8 <HAL_GPIO_Init+0x14>
 800268c:	2204      	movs	r2, #4
 800268e:	e72b      	b.n	80024e8 <HAL_GPIO_Init+0x14>
 8002690:	2205      	movs	r2, #5
 8002692:	e729      	b.n	80024e8 <HAL_GPIO_Init+0x14>
 8002694:	2206      	movs	r2, #6
 8002696:	e727      	b.n	80024e8 <HAL_GPIO_Init+0x14>
 8002698:	2207      	movs	r2, #7
 800269a:	e725      	b.n	80024e8 <HAL_GPIO_Init+0x14>
 800269c:	2208      	movs	r2, #8
 800269e:	e723      	b.n	80024e8 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80026a0:	b003      	add	sp, #12
 80026a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40013800 	.word	0x40013800
 80026ac:	40013c00 	.word	0x40013c00
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40020000 	.word	0x40020000

080026b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026b8:	b10a      	cbz	r2, 80026be <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ba:	6181      	str	r1, [r0, #24]
 80026bc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80026be:	0409      	lsls	r1, r1, #16
 80026c0:	6181      	str	r1, [r0, #24]
  }
}
 80026c2:	4770      	bx	lr

080026c4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026c4:	6803      	ldr	r3, [r0, #0]
 80026c6:	699a      	ldr	r2, [r3, #24]
 80026c8:	f012 0f02 	tst.w	r2, #2
 80026cc:	d001      	beq.n	80026d2 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026ce:	2200      	movs	r2, #0
 80026d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026d2:	6803      	ldr	r3, [r0, #0]
 80026d4:	699a      	ldr	r2, [r3, #24]
 80026d6:	f012 0f01 	tst.w	r2, #1
 80026da:	d103      	bne.n	80026e4 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	619a      	str	r2, [r3, #24]
  }
}
 80026e4:	4770      	bx	lr

080026e6 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026e6:	b430      	push	{r4, r5}
 80026e8:	9d02      	ldr	r5, [sp, #8]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80026ea:	6804      	ldr	r4, [r0, #0]
 80026ec:	6860      	ldr	r0, [r4, #4]
 80026ee:	ea4f 5c55 	mov.w	ip, r5, lsr #21
 80026f2:	f40c 6c80 	and.w	ip, ip, #1024	; 0x400
 80026f6:	f04c 7c7f 	orr.w	ip, ip, #66846720	; 0x3fc0000
 80026fa:	f44c 3c58 	orr.w	ip, ip, #221184	; 0x36000
 80026fe:	f44c 7c7f 	orr.w	ip, ip, #1020	; 0x3fc
 8002702:	f04c 0c03 	orr.w	ip, ip, #3
 8002706:	ea20 000c 	bic.w	r0, r0, ip
 800270a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800270e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002712:	4319      	orrs	r1, r3
 8002714:	4329      	orrs	r1, r5
 8002716:	4301      	orrs	r1, r0
 8002718:	6061      	str	r1, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800271a:	bc30      	pop	{r4, r5}
 800271c:	4770      	bx	lr

0800271e <I2C_IsAcknowledgeFailed>:
{
 800271e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002720:	4605      	mov	r5, r0
 8002722:	460e      	mov	r6, r1
 8002724:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002726:	6803      	ldr	r3, [r0, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	f013 0f10 	tst.w	r3, #16
 800272e:	d101      	bne.n	8002734 <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 8002730:	2000      	movs	r0, #0
}
 8002732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002734:	682b      	ldr	r3, [r5, #0]
 8002736:	699c      	ldr	r4, [r3, #24]
 8002738:	f014 0f20 	tst.w	r4, #32
 800273c:	d117      	bne.n	800276e <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 800273e:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002742:	d0f7      	beq.n	8002734 <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002744:	f7ff fcd8 	bl	80020f8 <HAL_GetTick>
 8002748:	1bc0      	subs	r0, r0, r7
 800274a:	42b0      	cmp	r0, r6
 800274c:	d801      	bhi.n	8002752 <I2C_IsAcknowledgeFailed+0x34>
 800274e:	2e00      	cmp	r6, #0
 8002750:	d1f0      	bne.n	8002734 <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002752:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002754:	f043 0320 	orr.w	r3, r3, #32
 8002758:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800275a:	2320      	movs	r3, #32
 800275c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002760:	2300      	movs	r3, #0
 8002762:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002766:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 800276a:	2001      	movs	r0, #1
 800276c:	e7e1      	b.n	8002732 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800276e:	2210      	movs	r2, #16
 8002770:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002772:	682b      	ldr	r3, [r5, #0]
 8002774:	2420      	movs	r4, #32
 8002776:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002778:	4628      	mov	r0, r5
 800277a:	f7ff ffa3 	bl	80026c4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800277e:	682a      	ldr	r2, [r5, #0]
 8002780:	6853      	ldr	r3, [r2, #4]
 8002782:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002786:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800278a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800278e:	f023 0301 	bic.w	r3, r3, #1
 8002792:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002794:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002796:	f043 0304 	orr.w	r3, r3, #4
 800279a:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800279c:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80027a6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 80027aa:	2001      	movs	r0, #1
 80027ac:	e7c1      	b.n	8002732 <I2C_IsAcknowledgeFailed+0x14>

080027ae <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80027ae:	b570      	push	{r4, r5, r6, lr}
 80027b0:	4604      	mov	r4, r0
 80027b2:	460d      	mov	r5, r1
 80027b4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	f013 0f02 	tst.w	r3, #2
 80027be:	d11d      	bne.n	80027fc <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c0:	4632      	mov	r2, r6
 80027c2:	4629      	mov	r1, r5
 80027c4:	4620      	mov	r0, r4
 80027c6:	f7ff ffaa 	bl	800271e <I2C_IsAcknowledgeFailed>
 80027ca:	b9c8      	cbnz	r0, 8002800 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80027cc:	f1b5 3fff 	cmp.w	r5, #4294967295
 80027d0:	d0f1      	beq.n	80027b6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d2:	f7ff fc91 	bl	80020f8 <HAL_GetTick>
 80027d6:	1b80      	subs	r0, r0, r6
 80027d8:	42a8      	cmp	r0, r5
 80027da:	d801      	bhi.n	80027e0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80027dc:	2d00      	cmp	r5, #0
 80027de:	d1ea      	bne.n	80027b6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80027e2:	f043 0320 	orr.w	r3, r3, #32
 80027e6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027e8:	2320      	movs	r3, #32
 80027ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80027f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80027f8:	2001      	movs	r0, #1
 80027fa:	e000      	b.n	80027fe <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80027fc:	2000      	movs	r0, #0
}
 80027fe:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002800:	2001      	movs	r0, #1
 8002802:	e7fc      	b.n	80027fe <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08002804 <I2C_WaitOnFlagUntilTimeout>:
{
 8002804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002808:	4606      	mov	r6, r0
 800280a:	4688      	mov	r8, r1
 800280c:	4617      	mov	r7, r2
 800280e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002810:	6834      	ldr	r4, [r6, #0]
 8002812:	69a4      	ldr	r4, [r4, #24]
 8002814:	ea38 0304 	bics.w	r3, r8, r4
 8002818:	bf0c      	ite	eq
 800281a:	f04f 0c01 	moveq.w	ip, #1
 800281e:	f04f 0c00 	movne.w	ip, #0
 8002822:	45bc      	cmp	ip, r7
 8002824:	d118      	bne.n	8002858 <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 8002826:	f1b5 3fff 	cmp.w	r5, #4294967295
 800282a:	d0f1      	beq.n	8002810 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800282c:	f7ff fc64 	bl	80020f8 <HAL_GetTick>
 8002830:	9b06      	ldr	r3, [sp, #24]
 8002832:	1ac0      	subs	r0, r0, r3
 8002834:	42a8      	cmp	r0, r5
 8002836:	d801      	bhi.n	800283c <I2C_WaitOnFlagUntilTimeout+0x38>
 8002838:	2d00      	cmp	r5, #0
 800283a:	d1e9      	bne.n	8002810 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800283c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800283e:	f043 0320 	orr.w	r3, r3, #32
 8002842:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002844:	2320      	movs	r3, #32
 8002846:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800284a:	2300      	movs	r3, #0
 800284c:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002850:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8002854:	2001      	movs	r0, #1
 8002856:	e000      	b.n	800285a <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 8002858:	2000      	movs	r0, #0
}
 800285a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002860 <I2C_RequestMemoryWrite>:
{
 8002860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	4604      	mov	r4, r0
 8002868:	4690      	mov	r8, r2
 800286a:	461d      	mov	r5, r3
 800286c:	9e08      	ldr	r6, [sp, #32]
 800286e:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002870:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <I2C_RequestMemoryWrite+0x78>)
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002878:	b2ea      	uxtb	r2, r5
 800287a:	f7ff ff34 	bl	80026e6 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800287e:	463a      	mov	r2, r7
 8002880:	4631      	mov	r1, r6
 8002882:	4620      	mov	r0, r4
 8002884:	f7ff ff93 	bl	80027ae <I2C_WaitOnTXISFlagUntilTimeout>
 8002888:	b9f8      	cbnz	r0, 80028ca <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800288a:	2d01      	cmp	r5, #1
 800288c:	d10e      	bne.n	80028ac <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800288e:	6823      	ldr	r3, [r4, #0]
 8002890:	fa5f f288 	uxtb.w	r2, r8
 8002894:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002896:	9700      	str	r7, [sp, #0]
 8002898:	4633      	mov	r3, r6
 800289a:	2200      	movs	r2, #0
 800289c:	2180      	movs	r1, #128	; 0x80
 800289e:	4620      	mov	r0, r4
 80028a0:	f7ff ffb0 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 80028a4:	b9a8      	cbnz	r0, 80028d2 <I2C_RequestMemoryWrite+0x72>
}
 80028a6:	b002      	add	sp, #8
 80028a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028ac:	6823      	ldr	r3, [r4, #0]
 80028ae:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80028b2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028b4:	463a      	mov	r2, r7
 80028b6:	4631      	mov	r1, r6
 80028b8:	4620      	mov	r0, r4
 80028ba:	f7ff ff78 	bl	80027ae <I2C_WaitOnTXISFlagUntilTimeout>
 80028be:	b930      	cbnz	r0, 80028ce <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028c0:	6823      	ldr	r3, [r4, #0]
 80028c2:	fa5f f288 	uxtb.w	r2, r8
 80028c6:	629a      	str	r2, [r3, #40]	; 0x28
 80028c8:	e7e5      	b.n	8002896 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 80028ca:	2001      	movs	r0, #1
 80028cc:	e7eb      	b.n	80028a6 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 80028ce:	2001      	movs	r0, #1
 80028d0:	e7e9      	b.n	80028a6 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 80028d2:	2001      	movs	r0, #1
 80028d4:	e7e7      	b.n	80028a6 <I2C_RequestMemoryWrite+0x46>
 80028d6:	bf00      	nop
 80028d8:	80002000 	.word	0x80002000

080028dc <I2C_RequestMemoryRead>:
{
 80028dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	4604      	mov	r4, r0
 80028e4:	4690      	mov	r8, r2
 80028e6:	461d      	mov	r5, r3
 80028e8:	9e08      	ldr	r6, [sp, #32]
 80028ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80028ec:	4b18      	ldr	r3, [pc, #96]	; (8002950 <I2C_RequestMemoryRead+0x74>)
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	2300      	movs	r3, #0
 80028f2:	b2ea      	uxtb	r2, r5
 80028f4:	f7ff fef7 	bl	80026e6 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f8:	463a      	mov	r2, r7
 80028fa:	4631      	mov	r1, r6
 80028fc:	4620      	mov	r0, r4
 80028fe:	f7ff ff56 	bl	80027ae <I2C_WaitOnTXISFlagUntilTimeout>
 8002902:	b9f8      	cbnz	r0, 8002944 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002904:	2d01      	cmp	r5, #1
 8002906:	d10e      	bne.n	8002926 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002908:	6823      	ldr	r3, [r4, #0]
 800290a:	fa5f f288 	uxtb.w	r2, r8
 800290e:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002910:	9700      	str	r7, [sp, #0]
 8002912:	4633      	mov	r3, r6
 8002914:	2200      	movs	r2, #0
 8002916:	2140      	movs	r1, #64	; 0x40
 8002918:	4620      	mov	r0, r4
 800291a:	f7ff ff73 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 800291e:	b9a8      	cbnz	r0, 800294c <I2C_RequestMemoryRead+0x70>
}
 8002920:	b002      	add	sp, #8
 8002922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002926:	6823      	ldr	r3, [r4, #0]
 8002928:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800292c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800292e:	463a      	mov	r2, r7
 8002930:	4631      	mov	r1, r6
 8002932:	4620      	mov	r0, r4
 8002934:	f7ff ff3b 	bl	80027ae <I2C_WaitOnTXISFlagUntilTimeout>
 8002938:	b930      	cbnz	r0, 8002948 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800293a:	6823      	ldr	r3, [r4, #0]
 800293c:	fa5f f288 	uxtb.w	r2, r8
 8002940:	629a      	str	r2, [r3, #40]	; 0x28
 8002942:	e7e5      	b.n	8002910 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8002944:	2001      	movs	r0, #1
 8002946:	e7eb      	b.n	8002920 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8002948:	2001      	movs	r0, #1
 800294a:	e7e9      	b.n	8002920 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 800294c:	2001      	movs	r0, #1
 800294e:	e7e7      	b.n	8002920 <I2C_RequestMemoryRead+0x44>
 8002950:	80002000 	.word	0x80002000

08002954 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002954:	b570      	push	{r4, r5, r6, lr}
 8002956:	4605      	mov	r5, r0
 8002958:	460c      	mov	r4, r1
 800295a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800295c:	682b      	ldr	r3, [r5, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	f013 0f20 	tst.w	r3, #32
 8002964:	d11a      	bne.n	800299c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002966:	4632      	mov	r2, r6
 8002968:	4621      	mov	r1, r4
 800296a:	4628      	mov	r0, r5
 800296c:	f7ff fed7 	bl	800271e <I2C_IsAcknowledgeFailed>
 8002970:	b9b0      	cbnz	r0, 80029a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002972:	f7ff fbc1 	bl	80020f8 <HAL_GetTick>
 8002976:	1b80      	subs	r0, r0, r6
 8002978:	42a0      	cmp	r0, r4
 800297a:	d801      	bhi.n	8002980 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 800297c:	2c00      	cmp	r4, #0
 800297e:	d1ed      	bne.n	800295c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002980:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002982:	f043 0320 	orr.w	r3, r3, #32
 8002986:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002988:	2320      	movs	r3, #32
 800298a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800298e:	2300      	movs	r3, #0
 8002990:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002994:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8002998:	2001      	movs	r0, #1
}
 800299a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800299c:	2000      	movs	r0, #0
 800299e:	e7fc      	b.n	800299a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80029a0:	2001      	movs	r0, #1
 80029a2:	e7fa      	b.n	800299a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080029a4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80029a4:	2800      	cmp	r0, #0
 80029a6:	d057      	beq.n	8002a58 <HAL_I2C_Init+0xb4>
{
 80029a8:	b510      	push	{r4, lr}
 80029aa:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ac:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d041      	beq.n	8002a38 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80029b4:	2324      	movs	r3, #36	; 0x24
 80029b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80029ba:	6822      	ldr	r2, [r4, #0]
 80029bc:	6813      	ldr	r3, [r2, #0]
 80029be:	f023 0301 	bic.w	r3, r3, #1
 80029c2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029c4:	6863      	ldr	r3, [r4, #4]
 80029c6:	6822      	ldr	r2, [r4, #0]
 80029c8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80029cc:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029ce:	6822      	ldr	r2, [r4, #0]
 80029d0:	6893      	ldr	r3, [r2, #8]
 80029d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80029d6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029d8:	68e3      	ldr	r3, [r4, #12]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d031      	beq.n	8002a42 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029de:	68a3      	ldr	r3, [r4, #8]
 80029e0:	6822      	ldr	r2, [r4, #0]
 80029e2:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80029e6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029e8:	68e3      	ldr	r3, [r4, #12]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d02f      	beq.n	8002a4e <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029ee:	6822      	ldr	r2, [r4, #0]
 80029f0:	6851      	ldr	r1, [r2, #4]
 80029f2:	4b1a      	ldr	r3, [pc, #104]	; (8002a5c <HAL_I2C_Init+0xb8>)
 80029f4:	430b      	orrs	r3, r1
 80029f6:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029f8:	6822      	ldr	r2, [r4, #0]
 80029fa:	68d3      	ldr	r3, [r2, #12]
 80029fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002a00:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002a02:	6923      	ldr	r3, [r4, #16]
 8002a04:	6962      	ldr	r2, [r4, #20]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	69a1      	ldr	r1, [r4, #24]
 8002a0a:	6822      	ldr	r2, [r4, #0]
 8002a0c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a10:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a12:	69e3      	ldr	r3, [r4, #28]
 8002a14:	6a21      	ldr	r1, [r4, #32]
 8002a16:	6822      	ldr	r2, [r4, #0]
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002a1c:	6822      	ldr	r2, [r4, #0]
 8002a1e:	6813      	ldr	r3, [r2, #0]
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a26:	2000      	movs	r0, #0
 8002a28:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a2a:	2320      	movs	r3, #32
 8002a2c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a30:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a32:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002a36:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002a38:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002a3c:	f7ff f9cc 	bl	8001dd8 <HAL_I2C_MspInit>
 8002a40:	e7b8      	b.n	80029b4 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a42:	68a3      	ldr	r3, [r4, #8]
 8002a44:	6822      	ldr	r2, [r4, #0]
 8002a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a4a:	6093      	str	r3, [r2, #8]
 8002a4c:	e7cc      	b.n	80029e8 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	e7ca      	b.n	80029ee <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002a58:	2001      	movs	r0, #1
}
 8002a5a:	4770      	bx	lr
 8002a5c:	02008000 	.word	0x02008000

08002a60 <HAL_I2C_Mem_Write>:
{
 8002a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a64:	b083      	sub	sp, #12
 8002a66:	460d      	mov	r5, r1
 8002a68:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8002a6c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a6e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8002a72:	b2c9      	uxtb	r1, r1
 8002a74:	2920      	cmp	r1, #32
 8002a76:	f040 80bc 	bne.w	8002bf2 <HAL_I2C_Mem_Write+0x192>
 8002a7a:	4604      	mov	r4, r0
 8002a7c:	4690      	mov	r8, r2
 8002a7e:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8002a80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002a82:	f1ba 0f00 	cmp.w	sl, #0
 8002a86:	bf18      	it	ne
 8002a88:	2b00      	cmpne	r3, #0
 8002a8a:	d016      	beq.n	8002aba <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 8002a8c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	f000 80b2 	beq.w	8002bfa <HAL_I2C_Mem_Write+0x19a>
 8002a96:	f04f 0b01 	mov.w	fp, #1
 8002a9a:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002a9e:	f7ff fb2b 	bl	80020f8 <HAL_GetTick>
 8002aa2:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002aa4:	9000      	str	r0, [sp, #0]
 8002aa6:	2319      	movs	r3, #25
 8002aa8:	465a      	mov	r2, fp
 8002aaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f7ff fea8 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 8002ab4:	b130      	cbz	r0, 8002ac4 <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 8002ab6:	2001      	movs	r0, #1
 8002ab8:	e09c      	b.n	8002bf4 <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002aba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002abe:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	e097      	b.n	8002bf4 <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ac4:	2321      	movs	r3, #33	; 0x21
 8002ac6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002aca:	2340      	movs	r3, #64	; 0x40
 8002acc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002ad4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002ad6:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ad8:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002adc:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ade:	9601      	str	r6, [sp, #4]
 8002ae0:	9700      	str	r7, [sp, #0]
 8002ae2:	464b      	mov	r3, r9
 8002ae4:	4642      	mov	r2, r8
 8002ae6:	4629      	mov	r1, r5
 8002ae8:	4620      	mov	r0, r4
 8002aea:	f7ff feb9 	bl	8002860 <I2C_RequestMemoryWrite>
 8002aee:	b970      	cbnz	r0, 8002b0e <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002af0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2bff      	cmp	r3, #255	; 0xff
 8002af6:	d90f      	bls.n	8002b18 <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002af8:	22ff      	movs	r2, #255	; 0xff
 8002afa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002afc:	2300      	movs	r3, #0
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b04:	4629      	mov	r1, r5
 8002b06:	4620      	mov	r0, r4
 8002b08:	f7ff fded 	bl	80026e6 <I2C_TransferConfig>
 8002b0c:	e021      	b.n	8002b52 <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002b14:	4658      	mov	r0, fp
 8002b16:	e06d      	b.n	8002bf4 <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8002b18:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b1a:	b292      	uxth	r2, r2
 8002b1c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b1e:	2300      	movs	r3, #0
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	4629      	mov	r1, r5
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	f7ff fddb 	bl	80026e6 <I2C_TransferConfig>
 8002b30:	e00f      	b.n	8002b52 <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8002b32:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b34:	b292      	uxth	r2, r2
 8002b36:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b38:	2300      	movs	r3, #0
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	4629      	mov	r1, r5
 8002b44:	4620      	mov	r0, r4
 8002b46:	f7ff fdce 	bl	80026e6 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002b4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d033      	beq.n	8002bba <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b52:	4632      	mov	r2, r6
 8002b54:	4639      	mov	r1, r7
 8002b56:	4620      	mov	r0, r4
 8002b58:	f7ff fe29 	bl	80027ae <I2C_WaitOnTXISFlagUntilTimeout>
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	d14e      	bne.n	8002bfe <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b60:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b62:	6823      	ldr	r3, [r4, #0]
 8002b64:	7812      	ldrb	r2, [r2, #0]
 8002b66:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002b68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002b6e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002b78:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b80:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b82:	b292      	uxth	r2, r2
 8002b84:	2a00      	cmp	r2, #0
 8002b86:	d0e0      	beq.n	8002b4a <HAL_I2C_Mem_Write+0xea>
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1de      	bne.n	8002b4a <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b8c:	9600      	str	r6, [sp, #0]
 8002b8e:	463b      	mov	r3, r7
 8002b90:	2200      	movs	r2, #0
 8002b92:	2180      	movs	r1, #128	; 0x80
 8002b94:	4620      	mov	r0, r4
 8002b96:	f7ff fe35 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 8002b9a:	bb90      	cbnz	r0, 8002c02 <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2bff      	cmp	r3, #255	; 0xff
 8002ba2:	d9c6      	bls.n	8002b32 <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ba4:	22ff      	movs	r2, #255	; 0xff
 8002ba6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ba8:	2300      	movs	r3, #0
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	4620      	mov	r0, r4
 8002bb4:	f7ff fd97 	bl	80026e6 <I2C_TransferConfig>
 8002bb8:	e7c7      	b.n	8002b4a <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bba:	4632      	mov	r2, r6
 8002bbc:	4639      	mov	r1, r7
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	f7ff fec8 	bl	8002954 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bc4:	b9f8      	cbnz	r0, 8002c06 <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002bcc:	6821      	ldr	r1, [r4, #0]
 8002bce:	684b      	ldr	r3, [r1, #4]
 8002bd0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002bd4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002bd8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002be2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002bec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8002bf0:	e000      	b.n	8002bf4 <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 8002bf2:	2002      	movs	r0, #2
}
 8002bf4:	b003      	add	sp, #12
 8002bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002bfa:	2002      	movs	r0, #2
 8002bfc:	e7fa      	b.n	8002bf4 <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 8002bfe:	2001      	movs	r0, #1
 8002c00:	e7f8      	b.n	8002bf4 <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 8002c02:	2001      	movs	r0, #1
 8002c04:	e7f6      	b.n	8002bf4 <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 8002c06:	2001      	movs	r0, #1
 8002c08:	e7f4      	b.n	8002bf4 <HAL_I2C_Mem_Write+0x194>
	...

08002c0c <HAL_I2C_Mem_Read>:
{
 8002c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c10:	b083      	sub	sp, #12
 8002c12:	460d      	mov	r5, r1
 8002c14:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8002c18:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c1a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8002c1e:	b2c9      	uxtb	r1, r1
 8002c20:	2920      	cmp	r1, #32
 8002c22:	f040 80bd 	bne.w	8002da0 <HAL_I2C_Mem_Read+0x194>
 8002c26:	4604      	mov	r4, r0
 8002c28:	4690      	mov	r8, r2
 8002c2a:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8002c2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c2e:	f1ba 0f00 	cmp.w	sl, #0
 8002c32:	bf18      	it	ne
 8002c34:	2b00      	cmpne	r3, #0
 8002c36:	d016      	beq.n	8002c66 <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 8002c38:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	f000 80b3 	beq.w	8002da8 <HAL_I2C_Mem_Read+0x19c>
 8002c42:	f04f 0b01 	mov.w	fp, #1
 8002c46:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002c4a:	f7ff fa55 	bl	80020f8 <HAL_GetTick>
 8002c4e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c50:	9000      	str	r0, [sp, #0]
 8002c52:	2319      	movs	r3, #25
 8002c54:	465a      	mov	r2, fp
 8002c56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	f7ff fdd2 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 8002c60:	b130      	cbz	r0, 8002c70 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 8002c62:	2001      	movs	r0, #1
 8002c64:	e09d      	b.n	8002da2 <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c6a:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	e098      	b.n	8002da2 <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c70:	2322      	movs	r3, #34	; 0x22
 8002c72:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c76:	2340      	movs	r3, #64	; 0x40
 8002c78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002c80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002c82:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c84:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c88:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c8a:	9601      	str	r6, [sp, #4]
 8002c8c:	9700      	str	r7, [sp, #0]
 8002c8e:	464b      	mov	r3, r9
 8002c90:	4642      	mov	r2, r8
 8002c92:	4629      	mov	r1, r5
 8002c94:	4620      	mov	r0, r4
 8002c96:	f7ff fe21 	bl	80028dc <I2C_RequestMemoryRead>
 8002c9a:	b970      	cbnz	r0, 8002cba <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	2bff      	cmp	r3, #255	; 0xff
 8002ca2:	d90f      	bls.n	8002cc4 <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ca4:	22ff      	movs	r2, #255	; 0xff
 8002ca6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002ca8:	4b43      	ldr	r3, [pc, #268]	; (8002db8 <HAL_I2C_Mem_Read+0x1ac>)
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	f7ff fd17 	bl	80026e6 <I2C_TransferConfig>
 8002cb8:	e021      	b.n	8002cfe <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002cc0:	4658      	mov	r0, fp
 8002cc2:	e06e      	b.n	8002da2 <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8002cc4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002cc6:	b292      	uxth	r2, r2
 8002cc8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002cca:	4b3b      	ldr	r3, [pc, #236]	; (8002db8 <HAL_I2C_Mem_Read+0x1ac>)
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	f7ff fd05 	bl	80026e6 <I2C_TransferConfig>
 8002cdc:	e00f      	b.n	8002cfe <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8002cde:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002ce0:	b292      	uxth	r2, r2
 8002ce2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	4629      	mov	r1, r5
 8002cf0:	4620      	mov	r0, r4
 8002cf2:	f7ff fcf8 	bl	80026e6 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002cf6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d034      	beq.n	8002d68 <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002cfe:	9600      	str	r6, [sp, #0]
 8002d00:	463b      	mov	r3, r7
 8002d02:	2200      	movs	r2, #0
 8002d04:	2104      	movs	r1, #4
 8002d06:	4620      	mov	r0, r4
 8002d08:	f7ff fd7c 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 8002d0c:	2800      	cmp	r0, #0
 8002d0e:	d14d      	bne.n	8002dac <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d10:	6823      	ldr	r3, [r4, #0]
 8002d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d16:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002d18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002d1e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002d20:	3a01      	subs	r2, #1
 8002d22:	b292      	uxth	r2, r2
 8002d24:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002d26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0de      	beq.n	8002cf6 <HAL_I2C_Mem_Read+0xea>
 8002d38:	2a00      	cmp	r2, #0
 8002d3a:	d1dc      	bne.n	8002cf6 <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d3c:	9600      	str	r6, [sp, #0]
 8002d3e:	463b      	mov	r3, r7
 8002d40:	2180      	movs	r1, #128	; 0x80
 8002d42:	4620      	mov	r0, r4
 8002d44:	f7ff fd5e 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 8002d48:	bb90      	cbnz	r0, 8002db0 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2bff      	cmp	r3, #255	; 0xff
 8002d50:	d9c5      	bls.n	8002cde <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d52:	22ff      	movs	r2, #255	; 0xff
 8002d54:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d56:	2300      	movs	r3, #0
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d5e:	4629      	mov	r1, r5
 8002d60:	4620      	mov	r0, r4
 8002d62:	f7ff fcc0 	bl	80026e6 <I2C_TransferConfig>
 8002d66:	e7c6      	b.n	8002cf6 <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d68:	4632      	mov	r2, r6
 8002d6a:	4639      	mov	r1, r7
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f7ff fdf1 	bl	8002954 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d72:	b9f8      	cbnz	r0, 8002db4 <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d74:	6823      	ldr	r3, [r4, #0]
 8002d76:	2220      	movs	r2, #32
 8002d78:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002d7a:	6821      	ldr	r1, [r4, #0]
 8002d7c:	684b      	ldr	r3, [r1, #4]
 8002d7e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002d82:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002d86:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d90:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d94:	2300      	movs	r3, #0
 8002d96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002d9a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8002d9e:	e000      	b.n	8002da2 <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 8002da0:	2002      	movs	r0, #2
}
 8002da2:	b003      	add	sp, #12
 8002da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002da8:	2002      	movs	r0, #2
 8002daa:	e7fa      	b.n	8002da2 <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 8002dac:	2001      	movs	r0, #1
 8002dae:	e7f8      	b.n	8002da2 <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 8002db0:	2001      	movs	r0, #1
 8002db2:	e7f6      	b.n	8002da2 <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 8002db4:	2001      	movs	r0, #1
 8002db6:	e7f4      	b.n	8002da2 <HAL_I2C_Mem_Read+0x196>
 8002db8:	80002400 	.word	0x80002400

08002dbc <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dbc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b20      	cmp	r3, #32
 8002dc4:	d124      	bne.n	8002e10 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d022      	beq.n	8002e14 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd4:	2324      	movs	r3, #36	; 0x24
 8002dd6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dda:	6802      	ldr	r2, [r0, #0]
 8002ddc:	6813      	ldr	r3, [r2, #0]
 8002dde:	f023 0301 	bic.w	r3, r3, #1
 8002de2:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002de4:	6802      	ldr	r2, [r0, #0]
 8002de6:	6813      	ldr	r3, [r2, #0]
 8002de8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dec:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002dee:	6802      	ldr	r2, [r0, #0]
 8002df0:	6813      	ldr	r3, [r2, #0]
 8002df2:	4319      	orrs	r1, r3
 8002df4:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002df6:	6802      	ldr	r2, [r0, #0]
 8002df8:	6813      	ldr	r3, [r2, #0]
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e00:	2320      	movs	r3, #32
 8002e02:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e06:	2300      	movs	r3, #0
 8002e08:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002e10:	2002      	movs	r0, #2
 8002e12:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002e14:	2002      	movs	r0, #2
  }
}
 8002e16:	4770      	bx	lr

08002e18 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e18:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	d122      	bne.n	8002e68 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e22:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d020      	beq.n	8002e6c <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e30:	2324      	movs	r3, #36	; 0x24
 8002e32:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e36:	6802      	ldr	r2, [r0, #0]
 8002e38:	6813      	ldr	r3, [r2, #0]
 8002e3a:	f023 0301 	bic.w	r3, r3, #1
 8002e3e:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e40:	6802      	ldr	r2, [r0, #0]
 8002e42:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e48:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e4c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e4e:	6802      	ldr	r2, [r0, #0]
 8002e50:	6813      	ldr	r3, [r2, #0]
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e58:	2320      	movs	r3, #32
 8002e5a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002e64:	4618      	mov	r0, r3
 8002e66:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002e68:	2002      	movs	r0, #2
 8002e6a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002e6c:	2002      	movs	r0, #2
  }
}
 8002e6e:	4770      	bx	lr

08002e70 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002e70:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002e72:	684d      	ldr	r5, [r1, #4]
 8002e74:	6804      	ldr	r4, [r0, #0]
 8002e76:	68e3      	ldr	r3, [r4, #12]
 8002e78:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8002e7c:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002e7e:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 8002e82:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8002e86:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002e8a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002e8e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002e92:	680b      	ldr	r3, [r1, #0]
 8002e94:	6804      	ldr	r4, [r0, #0]
 8002e96:	68e6      	ldr	r6, [r4, #12]
 8002e98:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8002e9c:	4433      	add	r3, r6
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8002ea4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002ea8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002eac:	68cd      	ldr	r5, [r1, #12]
 8002eae:	6804      	ldr	r4, [r0, #0]
 8002eb0:	68e3      	ldr	r3, [r4, #12]
 8002eb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eb6:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002eb8:	eb04 1ec2 	add.w	lr, r4, r2, lsl #7
 8002ebc:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8002ec0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002ec4:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002ec8:	688b      	ldr	r3, [r1, #8]
 8002eca:	6804      	ldr	r4, [r0, #0]
 8002ecc:	68e6      	ldr	r6, [r4, #12]
 8002ece:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 8002ed2:	4473      	add	r3, lr
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8002eda:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002ede:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002ee2:	6803      	ldr	r3, [r0, #0]
 8002ee4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8002ee8:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8002eec:	f024 0407 	bic.w	r4, r4, #7
 8002ef0:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002ef4:	6803      	ldr	r3, [r0, #0]
 8002ef6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8002efa:	690c      	ldr	r4, [r1, #16]
 8002efc:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002f00:	f891 7031 	ldrb.w	r7, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002f04:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002f08:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002f0a:	6804      	ldr	r4, [r0, #0]
 8002f0c:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8002f10:	f104 0e84 	add.w	lr, r4, #132	; 0x84
 8002f14:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8002f18:	2400      	movs	r4, #0
 8002f1a:	f8ce 4018 	str.w	r4, [lr, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002f1e:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8002f22:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8002f2a:	6806      	ldr	r6, [r0, #0]
 8002f2c:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 8002f30:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8002f34:	f8ce 309c 	str.w	r3, [lr, #156]	; 0x9c
 8002f38:	f10e 0e84 	add.w	lr, lr, #132	; 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002f3c:	6803      	ldr	r3, [r0, #0]
 8002f3e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8002f42:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8002f46:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8002f4a:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002f4e:	6803      	ldr	r3, [r0, #0]
 8002f50:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8002f54:	694d      	ldr	r5, [r1, #20]
 8002f56:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002f5a:	6803      	ldr	r3, [r0, #0]
 8002f5c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8002f60:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8002f64:	4d2e      	ldr	r5, [pc, #184]	; (8003020 <LTDC_SetConfig+0x1b0>)
 8002f66:	4035      	ands	r5, r6
 8002f68:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002f6c:	6a0d      	ldr	r5, [r1, #32]
 8002f6e:	6803      	ldr	r3, [r0, #0]
 8002f70:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8002f74:	69ce      	ldr	r6, [r1, #28]
 8002f76:	4335      	orrs	r5, r6
 8002f78:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002f7c:	6803      	ldr	r3, [r0, #0]
 8002f7e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8002f82:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8002f86:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002f8a:	6803      	ldr	r3, [r0, #0]
 8002f8c:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 8002f90:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8002f92:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002f96:	690b      	ldr	r3, [r1, #16]
 8002f98:	b16b      	cbz	r3, 8002fb6 <LTDC_SetConfig+0x146>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d039      	beq.n	8003012 <LTDC_SetConfig+0x1a2>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	bf18      	it	ne
 8002fa2:	2b04      	cmpne	r3, #4
 8002fa4:	d037      	beq.n	8003016 <LTDC_SetConfig+0x1a6>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d037      	beq.n	800301a <LTDC_SetConfig+0x1aa>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002faa:	2b07      	cmp	r3, #7
 8002fac:	d001      	beq.n	8002fb2 <LTDC_SetConfig+0x142>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8002fae:	2501      	movs	r5, #1
 8002fb0:	e002      	b.n	8002fb8 <LTDC_SetConfig+0x148>
    tmp = 2U;
 8002fb2:	2502      	movs	r5, #2
 8002fb4:	e000      	b.n	8002fb8 <LTDC_SetConfig+0x148>
    tmp = 4U;
 8002fb6:	2504      	movs	r5, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002fb8:	6802      	ldr	r2, [r0, #0]
 8002fba:	4462      	add	r2, ip
 8002fbc:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8002fc0:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 8002fc4:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002fc8:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8002fca:	fb05 f402 	mul.w	r4, r5, r2
 8002fce:	684b      	ldr	r3, [r1, #4]
 8002fd0:	680a      	ldr	r2, [r1, #0]
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	fb05 f303 	mul.w	r3, r5, r3
 8002fd8:	3303      	adds	r3, #3
 8002fda:	6802      	ldr	r2, [r0, #0]
 8002fdc:	4462      	add	r2, ip
 8002fde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8002fe2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002fe6:	6803      	ldr	r3, [r0, #0]
 8002fe8:	4463      	add	r3, ip
 8002fea:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8002fee:	4a0d      	ldr	r2, [pc, #52]	; (8003024 <LTDC_SetConfig+0x1b4>)
 8002ff0:	4022      	ands	r2, r4
 8002ff2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002ff6:	6803      	ldr	r3, [r0, #0]
 8002ff8:	4463      	add	r3, ip
 8002ffa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002ffc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003000:	6803      	ldr	r3, [r0, #0]
 8003002:	449c      	add	ip, r3
 8003004:	f8dc 3084 	ldr.w	r3, [ip, #132]	; 0x84
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
}
 8003010:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 8003012:	2503      	movs	r5, #3
 8003014:	e7d0      	b.n	8002fb8 <LTDC_SetConfig+0x148>
    tmp = 2U;
 8003016:	2502      	movs	r5, #2
 8003018:	e7ce      	b.n	8002fb8 <LTDC_SetConfig+0x148>
 800301a:	2502      	movs	r5, #2
 800301c:	e7cc      	b.n	8002fb8 <LTDC_SetConfig+0x148>
 800301e:	bf00      	nop
 8003020:	fffff8f8 	.word	0xfffff8f8
 8003024:	fffff800 	.word	0xfffff800

08003028 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8003028:	2800      	cmp	r0, #0
 800302a:	d072      	beq.n	8003112 <HAL_LTDC_Init+0xea>
{
 800302c:	b538      	push	{r3, r4, r5, lr}
 800302e:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003030:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d067      	beq.n	8003108 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003038:	2302      	movs	r3, #2
 800303a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800303e:	6822      	ldr	r2, [r4, #0]
 8003040:	6993      	ldr	r3, [r2, #24]
 8003042:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003046:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003048:	6821      	ldr	r1, [r4, #0]
 800304a:	698a      	ldr	r2, [r1, #24]
 800304c:	6863      	ldr	r3, [r4, #4]
 800304e:	68a0      	ldr	r0, [r4, #8]
 8003050:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003052:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003054:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003056:	6920      	ldr	r0, [r4, #16]
 8003058:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800305a:	4313      	orrs	r3, r2
 800305c:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800305e:	6821      	ldr	r1, [r4, #0]
 8003060:	688a      	ldr	r2, [r1, #8]
 8003062:	4b2d      	ldr	r3, [pc, #180]	; (8003118 <HAL_LTDC_Init+0xf0>)
 8003064:	401a      	ands	r2, r3
 8003066:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003068:	6820      	ldr	r0, [r4, #0]
 800306a:	6882      	ldr	r2, [r0, #8]
 800306c:	69a1      	ldr	r1, [r4, #24]
 800306e:	6965      	ldr	r5, [r4, #20]
 8003070:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003074:	430a      	orrs	r2, r1
 8003076:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003078:	6821      	ldr	r1, [r4, #0]
 800307a:	68ca      	ldr	r2, [r1, #12]
 800307c:	401a      	ands	r2, r3
 800307e:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003080:	6820      	ldr	r0, [r4, #0]
 8003082:	68c2      	ldr	r2, [r0, #12]
 8003084:	6a21      	ldr	r1, [r4, #32]
 8003086:	69e5      	ldr	r5, [r4, #28]
 8003088:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800308c:	430a      	orrs	r2, r1
 800308e:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003090:	6821      	ldr	r1, [r4, #0]
 8003092:	690a      	ldr	r2, [r1, #16]
 8003094:	401a      	ands	r2, r3
 8003096:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003098:	6820      	ldr	r0, [r4, #0]
 800309a:	6902      	ldr	r2, [r0, #16]
 800309c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800309e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80030a0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80030a4:	430a      	orrs	r2, r1
 80030a6:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80030a8:	6821      	ldr	r1, [r4, #0]
 80030aa:	694a      	ldr	r2, [r1, #20]
 80030ac:	4013      	ands	r3, r2
 80030ae:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80030b0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80030b2:	6821      	ldr	r1, [r4, #0]
 80030b4:	694b      	ldr	r3, [r1, #20]
 80030b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80030b8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80030bc:	4313      	orrs	r3, r2
 80030be:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80030c0:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80030c4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80030c8:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80030ca:	6821      	ldr	r1, [r4, #0]
 80030cc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80030ce:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80030d2:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80030d4:	6821      	ldr	r1, [r4, #0]
 80030d6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80030d8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80030dc:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80030e0:	4303      	orrs	r3, r0
 80030e2:	4313      	orrs	r3, r2
 80030e4:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80030e6:	6822      	ldr	r2, [r4, #0]
 80030e8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80030ea:	f043 0306 	orr.w	r3, r3, #6
 80030ee:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80030f0:	6822      	ldr	r2, [r4, #0]
 80030f2:	6993      	ldr	r3, [r2, #24]
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80030fa:	2000      	movs	r0, #0
 80030fc:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003100:	2301      	movs	r3, #1
 8003102:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8003106:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8003108:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800310c:	f7fe fe9c 	bl	8001e48 <HAL_LTDC_MspInit>
 8003110:	e792      	b.n	8003038 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8003112:	2001      	movs	r0, #1
}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	f000f800 	.word	0xf000f800

0800311c <HAL_LTDC_ErrorCallback>:
}
 800311c:	4770      	bx	lr

0800311e <HAL_LTDC_LineEventCallback>:
}
 800311e:	4770      	bx	lr

08003120 <HAL_LTDC_ReloadEventCallback>:
}
 8003120:	4770      	bx	lr

08003122 <HAL_LTDC_IRQHandler>:
{
 8003122:	b570      	push	{r4, r5, r6, lr}
 8003124:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003126:	6803      	ldr	r3, [r0, #0]
 8003128:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800312a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800312c:	f015 0f04 	tst.w	r5, #4
 8003130:	d002      	beq.n	8003138 <HAL_LTDC_IRQHandler+0x16>
 8003132:	f016 0f04 	tst.w	r6, #4
 8003136:	d112      	bne.n	800315e <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003138:	f015 0f02 	tst.w	r5, #2
 800313c:	d002      	beq.n	8003144 <HAL_LTDC_IRQHandler+0x22>
 800313e:	f016 0f02 	tst.w	r6, #2
 8003142:	d121      	bne.n	8003188 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003144:	f015 0f01 	tst.w	r5, #1
 8003148:	d002      	beq.n	8003150 <HAL_LTDC_IRQHandler+0x2e>
 800314a:	f016 0f01 	tst.w	r6, #1
 800314e:	d132      	bne.n	80031b6 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003150:	f015 0f08 	tst.w	r5, #8
 8003154:	d002      	beq.n	800315c <HAL_LTDC_IRQHandler+0x3a>
 8003156:	f016 0f08 	tst.w	r6, #8
 800315a:	d13d      	bne.n	80031d8 <HAL_LTDC_IRQHandler+0xb6>
}
 800315c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800315e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003160:	f022 0204 	bic.w	r2, r2, #4
 8003164:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003166:	6803      	ldr	r3, [r0, #0]
 8003168:	2204      	movs	r2, #4
 800316a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800316c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003178:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800317c:	2300      	movs	r3, #0
 800317e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8003182:	f7ff ffcb 	bl	800311c <HAL_LTDC_ErrorCallback>
 8003186:	e7d7      	b.n	8003138 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003188:	6822      	ldr	r2, [r4, #0]
 800318a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800318c:	f023 0302 	bic.w	r3, r3, #2
 8003190:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	2202      	movs	r2, #2
 8003196:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003198:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80031a2:	2304      	movs	r3, #4
 80031a4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80031a8:	2300      	movs	r3, #0
 80031aa:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80031ae:	4620      	mov	r0, r4
 80031b0:	f7ff ffb4 	bl	800311c <HAL_LTDC_ErrorCallback>
 80031b4:	e7c6      	b.n	8003144 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80031b6:	6822      	ldr	r2, [r4, #0]
 80031b8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80031ba:	f023 0301 	bic.w	r3, r3, #1
 80031be:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80031c0:	6822      	ldr	r2, [r4, #0]
 80031c2:	2301      	movs	r3, #1
 80031c4:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80031c6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80031ca:	2300      	movs	r3, #0
 80031cc:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80031d0:	4620      	mov	r0, r4
 80031d2:	f7ff ffa4 	bl	800311e <HAL_LTDC_LineEventCallback>
 80031d6:	e7bb      	b.n	8003150 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80031d8:	6822      	ldr	r2, [r4, #0]
 80031da:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80031dc:	f023 0308 	bic.w	r3, r3, #8
 80031e0:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	2208      	movs	r2, #8
 80031e6:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80031e8:	2301      	movs	r3, #1
 80031ea:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80031ee:	2300      	movs	r3, #0
 80031f0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80031f4:	4620      	mov	r0, r4
 80031f6:	f7ff ff93 	bl	8003120 <HAL_LTDC_ReloadEventCallback>
}
 80031fa:	e7af      	b.n	800315c <HAL_LTDC_IRQHandler+0x3a>

080031fc <HAL_LTDC_ConfigLayer>:
{
 80031fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80031fe:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003202:	2b01      	cmp	r3, #1
 8003204:	d02c      	beq.n	8003260 <HAL_LTDC_ConfigLayer+0x64>
 8003206:	4604      	mov	r4, r0
 8003208:	460d      	mov	r5, r1
 800320a:	4616      	mov	r6, r2
 800320c:	2701      	movs	r7, #1
 800320e:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003212:	2302      	movs	r3, #2
 8003214:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003218:	f04f 0c34 	mov.w	ip, #52	; 0x34
 800321c:	fb0c 0c02 	mla	ip, ip, r2, r0
 8003220:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8003224:	468e      	mov	lr, r1
 8003226:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800322a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800322e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003232:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003236:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800323a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800323e:	f8de 3000 	ldr.w	r3, [lr]
 8003242:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003246:	4632      	mov	r2, r6
 8003248:	4629      	mov	r1, r5
 800324a:	4620      	mov	r0, r4
 800324c:	f7ff fe10 	bl	8002e70 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003254:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003258:	2000      	movs	r0, #0
 800325a:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 800325e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 8003260:	2002      	movs	r0, #2
 8003262:	e7fc      	b.n	800325e <HAL_LTDC_ConfigLayer+0x62>

08003264 <HAL_LTDC_SetAddress>:
{
 8003264:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hltdc);
 8003266:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800326a:	2b01      	cmp	r3, #1
 800326c:	d019      	beq.n	80032a2 <HAL_LTDC_SetAddress+0x3e>
 800326e:	4604      	mov	r4, r0
 8003270:	2501      	movs	r5, #1
 8003272:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003276:	2302      	movs	r3, #2
 8003278:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800327c:	2334      	movs	r3, #52	; 0x34
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	f103 0038 	add.w	r0, r3, #56	; 0x38
  pLayerCfg->FBStartAdress = Address;
 8003286:	4423      	add	r3, r4
 8003288:	65d9      	str	r1, [r3, #92]	; 0x5c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800328a:	1821      	adds	r1, r4, r0
 800328c:	4620      	mov	r0, r4
 800328e:	f7ff fdef 	bl	8002e70 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003292:	6823      	ldr	r3, [r4, #0]
 8003294:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8003296:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800329a:	2000      	movs	r0, #0
 800329c:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 80032a0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hltdc);
 80032a2:	2002      	movs	r0, #2
 80032a4:	e7fc      	b.n	80032a0 <HAL_LTDC_SetAddress+0x3c>
	...

080032a8 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032a8:	4a02      	ldr	r2, [pc, #8]	; (80032b4 <HAL_PWR_EnableBkUpAccess+0xc>)
 80032aa:	6813      	ldr	r3, [r2, #0]
 80032ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b0:	6013      	str	r3, [r2, #0]
}
 80032b2:	4770      	bx	lr
 80032b4:	40007000 	.word	0x40007000

080032b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032b8:	b510      	push	{r4, lr}
 80032ba:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80032bc:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_PWREx_EnableOverDrive+0x74>)
 80032be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032cc:	9301      	str	r3, [sp, #4]
 80032ce:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80032d0:	4a17      	ldr	r2, [pc, #92]	; (8003330 <HAL_PWREx_EnableOverDrive+0x78>)
 80032d2:	6813      	ldr	r3, [r2, #0]
 80032d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032da:	f7fe ff0d 	bl	80020f8 <HAL_GetTick>
 80032de:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032e0:	4b13      	ldr	r3, [pc, #76]	; (8003330 <HAL_PWREx_EnableOverDrive+0x78>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80032e8:	d108      	bne.n	80032fc <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032ea:	f7fe ff05 	bl	80020f8 <HAL_GetTick>
 80032ee:	1b00      	subs	r0, r0, r4
 80032f0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80032f4:	d9f4      	bls.n	80032e0 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 80032f6:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 80032f8:	b002      	add	sp, #8
 80032fa:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032fc:	4a0c      	ldr	r2, [pc, #48]	; (8003330 <HAL_PWREx_EnableOverDrive+0x78>)
 80032fe:	6813      	ldr	r3, [r2, #0]
 8003300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003304:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8003306:	f7fe fef7 	bl	80020f8 <HAL_GetTick>
 800330a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800330c:	4b08      	ldr	r3, [pc, #32]	; (8003330 <HAL_PWREx_EnableOverDrive+0x78>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003314:	d107      	bne.n	8003326 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003316:	f7fe feef 	bl	80020f8 <HAL_GetTick>
 800331a:	1b00      	subs	r0, r0, r4
 800331c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003320:	d9f4      	bls.n	800330c <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8003322:	2003      	movs	r0, #3
 8003324:	e7e8      	b.n	80032f8 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8003326:	2000      	movs	r0, #0
 8003328:	e7e6      	b.n	80032f8 <HAL_PWREx_EnableOverDrive+0x40>
 800332a:	bf00      	nop
 800332c:	40023800 	.word	0x40023800
 8003330:	40007000 	.word	0x40007000

08003334 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003334:	2800      	cmp	r0, #0
 8003336:	f000 81ff 	beq.w	8003738 <HAL_RCC_OscConfig+0x404>
{
 800333a:	b570      	push	{r4, r5, r6, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003340:	6803      	ldr	r3, [r0, #0]
 8003342:	f013 0f01 	tst.w	r3, #1
 8003346:	d029      	beq.n	800339c <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003348:	4b95      	ldr	r3, [pc, #596]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 030c 	and.w	r3, r3, #12
 8003350:	2b04      	cmp	r3, #4
 8003352:	d01a      	beq.n	800338a <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003354:	4b92      	ldr	r3, [pc, #584]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 030c 	and.w	r3, r3, #12
 800335c:	2b08      	cmp	r3, #8
 800335e:	d00f      	beq.n	8003380 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003360:	6863      	ldr	r3, [r4, #4]
 8003362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003366:	d040      	beq.n	80033ea <HAL_RCC_OscConfig+0xb6>
 8003368:	2b00      	cmp	r3, #0
 800336a:	d154      	bne.n	8003416 <HAL_RCC_OscConfig+0xe2>
 800336c:	4b8c      	ldr	r3, [pc, #560]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	e039      	b.n	80033f4 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003380:	4b87      	ldr	r3, [pc, #540]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003388:	d0ea      	beq.n	8003360 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338a:	4b85      	ldr	r3, [pc, #532]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003392:	d003      	beq.n	800339c <HAL_RCC_OscConfig+0x68>
 8003394:	6863      	ldr	r3, [r4, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 81d0 	beq.w	800373c <HAL_RCC_OscConfig+0x408>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	f013 0f02 	tst.w	r3, #2
 80033a2:	d074      	beq.n	800348e <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033a4:	4b7e      	ldr	r3, [pc, #504]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f013 0f0c 	tst.w	r3, #12
 80033ac:	d05e      	beq.n	800346c <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ae:	4b7c      	ldr	r3, [pc, #496]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d053      	beq.n	8003462 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033ba:	68e3      	ldr	r3, [r4, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 8089 	beq.w	80034d4 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c2:	4a77      	ldr	r2, [pc, #476]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	6813      	ldr	r3, [r2, #0]
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fe fe94 	bl	80020f8 <HAL_GetTick>
 80033d0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d2:	4b73      	ldr	r3, [pc, #460]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f013 0f02 	tst.w	r3, #2
 80033da:	d172      	bne.n	80034c2 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033dc:	f7fe fe8c 	bl	80020f8 <HAL_GetTick>
 80033e0:	1b40      	subs	r0, r0, r5
 80033e2:	2802      	cmp	r0, #2
 80033e4:	d9f5      	bls.n	80033d2 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80033e6:	2003      	movs	r0, #3
 80033e8:	e1ad      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ea:	4a6d      	ldr	r2, [pc, #436]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	6813      	ldr	r3, [r2, #0]
 80033ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f2:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f4:	6863      	ldr	r3, [r4, #4]
 80033f6:	b32b      	cbz	r3, 8003444 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80033f8:	f7fe fe7e 	bl	80020f8 <HAL_GetTick>
 80033fc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	4b68      	ldr	r3, [pc, #416]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003406:	d1c9      	bne.n	800339c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003408:	f7fe fe76 	bl	80020f8 <HAL_GetTick>
 800340c:	1b40      	subs	r0, r0, r5
 800340e:	2864      	cmp	r0, #100	; 0x64
 8003410:	d9f5      	bls.n	80033fe <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8003412:	2003      	movs	r0, #3
 8003414:	e197      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003416:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800341a:	d009      	beq.n	8003430 <HAL_RCC_OscConfig+0xfc>
 800341c:	4b60      	ldr	r3, [pc, #384]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	e7e1      	b.n	80033f4 <HAL_RCC_OscConfig+0xc0>
 8003430:	4b5b      	ldr	r3, [pc, #364]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e7d7      	b.n	80033f4 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8003444:	f7fe fe58 	bl	80020f8 <HAL_GetTick>
 8003448:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344a:	4b55      	ldr	r3, [pc, #340]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003452:	d0a3      	beq.n	800339c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003454:	f7fe fe50 	bl	80020f8 <HAL_GetTick>
 8003458:	1b40      	subs	r0, r0, r5
 800345a:	2864      	cmp	r0, #100	; 0x64
 800345c:	d9f5      	bls.n	800344a <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 800345e:	2003      	movs	r0, #3
 8003460:	e171      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003462:	4b4f      	ldr	r3, [pc, #316]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800346a:	d1a6      	bne.n	80033ba <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346c:	4b4c      	ldr	r3, [pc, #304]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f013 0f02 	tst.w	r3, #2
 8003474:	d003      	beq.n	800347e <HAL_RCC_OscConfig+0x14a>
 8003476:	68e3      	ldr	r3, [r4, #12]
 8003478:	2b01      	cmp	r3, #1
 800347a:	f040 8161 	bne.w	8003740 <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347e:	4a48      	ldr	r2, [pc, #288]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003480:	6813      	ldr	r3, [r2, #0]
 8003482:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003486:	6921      	ldr	r1, [r4, #16]
 8003488:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800348c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	f013 0f08 	tst.w	r3, #8
 8003494:	d046      	beq.n	8003524 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003496:	6963      	ldr	r3, [r4, #20]
 8003498:	b383      	cbz	r3, 80034fc <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800349a:	4a41      	ldr	r2, [pc, #260]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800349c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a4:	f7fe fe28 	bl	80020f8 <HAL_GetTick>
 80034a8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034aa:	4b3d      	ldr	r3, [pc, #244]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ae:	f013 0f02 	tst.w	r3, #2
 80034b2:	d137      	bne.n	8003524 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b4:	f7fe fe20 	bl	80020f8 <HAL_GetTick>
 80034b8:	1b40      	subs	r0, r0, r5
 80034ba:	2802      	cmp	r0, #2
 80034bc:	d9f5      	bls.n	80034aa <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 80034be:	2003      	movs	r0, #3
 80034c0:	e141      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c2:	4a37      	ldr	r2, [pc, #220]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80034c4:	6813      	ldr	r3, [r2, #0]
 80034c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80034ca:	6921      	ldr	r1, [r4, #16]
 80034cc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	e7dc      	b.n	800348e <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 80034d4:	4a32      	ldr	r2, [pc, #200]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80034d6:	6813      	ldr	r3, [r2, #0]
 80034d8:	f023 0301 	bic.w	r3, r3, #1
 80034dc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80034de:	f7fe fe0b 	bl	80020f8 <HAL_GetTick>
 80034e2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e4:	4b2e      	ldr	r3, [pc, #184]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f013 0f02 	tst.w	r3, #2
 80034ec:	d0cf      	beq.n	800348e <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ee:	f7fe fe03 	bl	80020f8 <HAL_GetTick>
 80034f2:	1b40      	subs	r0, r0, r5
 80034f4:	2802      	cmp	r0, #2
 80034f6:	d9f5      	bls.n	80034e4 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 80034f8:	2003      	movs	r0, #3
 80034fa:	e124      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034fc:	4a28      	ldr	r2, [pc, #160]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80034fe:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003500:	f023 0301 	bic.w	r3, r3, #1
 8003504:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003506:	f7fe fdf7 	bl	80020f8 <HAL_GetTick>
 800350a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800350c:	4b24      	ldr	r3, [pc, #144]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800350e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003510:	f013 0f02 	tst.w	r3, #2
 8003514:	d006      	beq.n	8003524 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003516:	f7fe fdef 	bl	80020f8 <HAL_GetTick>
 800351a:	1b40      	subs	r0, r0, r5
 800351c:	2802      	cmp	r0, #2
 800351e:	d9f5      	bls.n	800350c <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8003520:	2003      	movs	r0, #3
 8003522:	e110      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	f013 0f04 	tst.w	r3, #4
 800352a:	d07d      	beq.n	8003628 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352c:	4b1c      	ldr	r3, [pc, #112]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003534:	d11e      	bne.n	8003574 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003536:	4b1a      	ldr	r3, [pc, #104]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003538:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800353a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800353e:	641a      	str	r2, [r3, #64]	; 0x40
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003546:	9301      	str	r3, [sp, #4]
 8003548:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800354a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800354c:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <HAL_RCC_OscConfig+0x270>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003554:	d010      	beq.n	8003578 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003556:	68a3      	ldr	r3, [r4, #8]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d025      	beq.n	80035a8 <HAL_RCC_OscConfig+0x274>
 800355c:	2b00      	cmp	r3, #0
 800355e:	d13b      	bne.n	80035d8 <HAL_RCC_OscConfig+0x2a4>
 8003560:	4b0f      	ldr	r3, [pc, #60]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003562:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003564:	f022 0201 	bic.w	r2, r2, #1
 8003568:	671a      	str	r2, [r3, #112]	; 0x70
 800356a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800356c:	f022 0204 	bic.w	r2, r2, #4
 8003570:	671a      	str	r2, [r3, #112]	; 0x70
 8003572:	e01e      	b.n	80035b2 <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 8003574:	2500      	movs	r5, #0
 8003576:	e7e9      	b.n	800354c <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 8003578:	4a0a      	ldr	r2, [pc, #40]	; (80035a4 <HAL_RCC_OscConfig+0x270>)
 800357a:	6813      	ldr	r3, [r2, #0]
 800357c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003580:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003582:	f7fe fdb9 	bl	80020f8 <HAL_GetTick>
 8003586:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003588:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <HAL_RCC_OscConfig+0x270>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003590:	d1e1      	bne.n	8003556 <HAL_RCC_OscConfig+0x222>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003592:	f7fe fdb1 	bl	80020f8 <HAL_GetTick>
 8003596:	1b80      	subs	r0, r0, r6
 8003598:	2864      	cmp	r0, #100	; 0x64
 800359a:	d9f5      	bls.n	8003588 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 800359c:	2003      	movs	r0, #3
 800359e:	e0d2      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
 80035a0:	40023800 	.word	0x40023800
 80035a4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a8:	4a6e      	ldr	r2, [pc, #440]	; (8003764 <HAL_RCC_OscConfig+0x430>)
 80035aa:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035b2:	68a3      	ldr	r3, [r4, #8]
 80035b4:	b333      	cbz	r3, 8003604 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b6:	f7fe fd9f 	bl	80020f8 <HAL_GetTick>
 80035ba:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035bc:	4b69      	ldr	r3, [pc, #420]	; (8003764 <HAL_RCC_OscConfig+0x430>)
 80035be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c0:	f013 0f02 	tst.w	r3, #2
 80035c4:	d12f      	bne.n	8003626 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c6:	f7fe fd97 	bl	80020f8 <HAL_GetTick>
 80035ca:	1b80      	subs	r0, r0, r6
 80035cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80035d0:	4298      	cmp	r0, r3
 80035d2:	d9f3      	bls.n	80035bc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80035d4:	2003      	movs	r0, #3
 80035d6:	e0b6      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d8:	2b05      	cmp	r3, #5
 80035da:	d009      	beq.n	80035f0 <HAL_RCC_OscConfig+0x2bc>
 80035dc:	4b61      	ldr	r3, [pc, #388]	; (8003764 <HAL_RCC_OscConfig+0x430>)
 80035de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	671a      	str	r2, [r3, #112]	; 0x70
 80035e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035e8:	f022 0204 	bic.w	r2, r2, #4
 80035ec:	671a      	str	r2, [r3, #112]	; 0x70
 80035ee:	e7e0      	b.n	80035b2 <HAL_RCC_OscConfig+0x27e>
 80035f0:	4b5c      	ldr	r3, [pc, #368]	; (8003764 <HAL_RCC_OscConfig+0x430>)
 80035f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035f4:	f042 0204 	orr.w	r2, r2, #4
 80035f8:	671a      	str	r2, [r3, #112]	; 0x70
 80035fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035fc:	f042 0201 	orr.w	r2, r2, #1
 8003600:	671a      	str	r2, [r3, #112]	; 0x70
 8003602:	e7d6      	b.n	80035b2 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003604:	f7fe fd78 	bl	80020f8 <HAL_GetTick>
 8003608:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360a:	4b56      	ldr	r3, [pc, #344]	; (8003764 <HAL_RCC_OscConfig+0x430>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	f013 0f02 	tst.w	r3, #2
 8003612:	d008      	beq.n	8003626 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003614:	f7fe fd70 	bl	80020f8 <HAL_GetTick>
 8003618:	1b80      	subs	r0, r0, r6
 800361a:	f241 3388 	movw	r3, #5000	; 0x1388
 800361e:	4298      	cmp	r0, r3
 8003620:	d9f3      	bls.n	800360a <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8003622:	2003      	movs	r0, #3
 8003624:	e08f      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003626:	b9fd      	cbnz	r5, 8003668 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003628:	69a3      	ldr	r3, [r4, #24]
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 808a 	beq.w	8003744 <HAL_RCC_OscConfig+0x410>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003630:	4a4c      	ldr	r2, [pc, #304]	; (8003764 <HAL_RCC_OscConfig+0x430>)
 8003632:	6892      	ldr	r2, [r2, #8]
 8003634:	f002 020c 	and.w	r2, r2, #12
 8003638:	2a08      	cmp	r2, #8
 800363a:	d058      	beq.n	80036ee <HAL_RCC_OscConfig+0x3ba>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800363c:	2b02      	cmp	r3, #2
 800363e:	d019      	beq.n	8003674 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003640:	4a48      	ldr	r2, [pc, #288]	; (8003764 <HAL_RCC_OscConfig+0x430>)
 8003642:	6813      	ldr	r3, [r2, #0]
 8003644:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364a:	f7fe fd55 	bl	80020f8 <HAL_GetTick>
 800364e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003650:	4b44      	ldr	r3, [pc, #272]	; (8003764 <HAL_RCC_OscConfig+0x430>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003658:	d047      	beq.n	80036ea <HAL_RCC_OscConfig+0x3b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365a:	f7fe fd4d 	bl	80020f8 <HAL_GetTick>
 800365e:	1b00      	subs	r0, r0, r4
 8003660:	2802      	cmp	r0, #2
 8003662:	d9f5      	bls.n	8003650 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003664:	2003      	movs	r0, #3
 8003666:	e06e      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003668:	4a3e      	ldr	r2, [pc, #248]	; (8003764 <HAL_RCC_OscConfig+0x430>)
 800366a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800366c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003670:	6413      	str	r3, [r2, #64]	; 0x40
 8003672:	e7d9      	b.n	8003628 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8003674:	4a3b      	ldr	r2, [pc, #236]	; (8003764 <HAL_RCC_OscConfig+0x430>)
 8003676:	6813      	ldr	r3, [r2, #0]
 8003678:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800367c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800367e:	f7fe fd3b 	bl	80020f8 <HAL_GetTick>
 8003682:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003684:	4b37      	ldr	r3, [pc, #220]	; (8003764 <HAL_RCC_OscConfig+0x430>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800368c:	d006      	beq.n	800369c <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368e:	f7fe fd33 	bl	80020f8 <HAL_GetTick>
 8003692:	1b40      	subs	r0, r0, r5
 8003694:	2802      	cmp	r0, #2
 8003696:	d9f5      	bls.n	8003684 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8003698:	2003      	movs	r0, #3
 800369a:	e054      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800369c:	69e3      	ldr	r3, [r4, #28]
 800369e:	6a22      	ldr	r2, [r4, #32]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80036a4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80036a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80036aa:	0852      	lsrs	r2, r2, #1
 80036ac:	3a01      	subs	r2, #1
 80036ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80036b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80036b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80036b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036bc:	4a29      	ldr	r2, [pc, #164]	; (8003764 <HAL_RCC_OscConfig+0x430>)
 80036be:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80036c0:	6813      	ldr	r3, [r2, #0]
 80036c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036c6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80036c8:	f7fe fd16 	bl	80020f8 <HAL_GetTick>
 80036cc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ce:	4b25      	ldr	r3, [pc, #148]	; (8003764 <HAL_RCC_OscConfig+0x430>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80036d6:	d106      	bne.n	80036e6 <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d8:	f7fe fd0e 	bl	80020f8 <HAL_GetTick>
 80036dc:	1b00      	subs	r0, r0, r4
 80036de:	2802      	cmp	r0, #2
 80036e0:	d9f5      	bls.n	80036ce <HAL_RCC_OscConfig+0x39a>
            return HAL_TIMEOUT;
 80036e2:	2003      	movs	r0, #3
 80036e4:	e02f      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80036e6:	2000      	movs	r0, #0
 80036e8:	e02d      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
 80036ea:	2000      	movs	r0, #0
 80036ec:	e02b      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
      pll_config = RCC->PLLCFGR;
 80036ee:	4a1d      	ldr	r2, [pc, #116]	; (8003764 <HAL_RCC_OscConfig+0x430>)
 80036f0:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d029      	beq.n	800374a <HAL_RCC_OscConfig+0x416>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f6:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80036fa:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036fc:	428b      	cmp	r3, r1
 80036fe:	d126      	bne.n	800374e <HAL_RCC_OscConfig+0x41a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003700:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8003704:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003706:	428b      	cmp	r3, r1
 8003708:	d123      	bne.n	8003752 <HAL_RCC_OscConfig+0x41e>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800370a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800370c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003710:	4013      	ands	r3, r2
 8003712:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8003716:	d11e      	bne.n	8003756 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003718:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800371c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800371e:	085b      	lsrs	r3, r3, #1
 8003720:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003722:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8003726:	d118      	bne.n	800375a <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003728:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800372c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800372e:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 8003732:	d114      	bne.n	800375e <HAL_RCC_OscConfig+0x42a>
  return HAL_OK;
 8003734:	2000      	movs	r0, #0
 8003736:	e006      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
    return HAL_ERROR;
 8003738:	2001      	movs	r0, #1
}
 800373a:	4770      	bx	lr
        return HAL_ERROR;
 800373c:	2001      	movs	r0, #1
 800373e:	e002      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
        return HAL_ERROR;
 8003740:	2001      	movs	r0, #1
 8003742:	e000      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
  return HAL_OK;
 8003744:	2000      	movs	r0, #0
}
 8003746:	b002      	add	sp, #8
 8003748:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800374a:	2001      	movs	r0, #1
 800374c:	e7fb      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
 800374e:	2001      	movs	r0, #1
 8003750:	e7f9      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
 8003752:	2001      	movs	r0, #1
 8003754:	e7f7      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
 8003756:	2001      	movs	r0, #1
 8003758:	e7f5      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
 800375a:	2001      	movs	r0, #1
 800375c:	e7f3      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
 800375e:	2001      	movs	r0, #1
 8003760:	e7f1      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
 8003762:	bf00      	nop
 8003764:	40023800 	.word	0x40023800

08003768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003768:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800376a:	4b25      	ldr	r3, [pc, #148]	; (8003800 <HAL_RCC_GetSysClockFreq+0x98>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b04      	cmp	r3, #4
 8003774:	d03f      	beq.n	80037f6 <HAL_RCC_GetSysClockFreq+0x8e>
 8003776:	2b08      	cmp	r3, #8
 8003778:	d13f      	bne.n	80037fa <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800377a:	4b21      	ldr	r3, [pc, #132]	; (8003800 <HAL_RCC_GetSysClockFreq+0x98>)
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003788:	d012      	beq.n	80037b0 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800378a:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <HAL_RCC_GetSysClockFreq+0x98>)
 800378c:	6859      	ldr	r1, [r3, #4]
 800378e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003792:	481c      	ldr	r0, [pc, #112]	; (8003804 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003794:	2300      	movs	r3, #0
 8003796:	fba1 0100 	umull	r0, r1, r1, r0
 800379a:	f7fc fd35 	bl	8000208 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800379e:	4b18      	ldr	r3, [pc, #96]	; (8003800 <HAL_RCC_GetSysClockFreq+0x98>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80037a6:	3301      	adds	r3, #1
 80037a8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80037aa:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80037ae:	e025      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b0:	4b13      	ldr	r3, [pc, #76]	; (8003800 <HAL_RCC_GetSysClockFreq+0x98>)
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80037b8:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80037bc:	ebb1 000c 	subs.w	r0, r1, ip
 80037c0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80037c4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80037c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037cc:	0181      	lsls	r1, r0, #6
 80037ce:	1a09      	subs	r1, r1, r0
 80037d0:	eb63 030e 	sbc.w	r3, r3, lr
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037da:	00c9      	lsls	r1, r1, #3
 80037dc:	eb11 0c0c 	adds.w	ip, r1, ip
 80037e0:	f143 0300 	adc.w	r3, r3, #0
 80037e4:	0299      	lsls	r1, r3, #10
 80037e6:	2300      	movs	r3, #0
 80037e8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80037ec:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80037f0:	f7fc fd0a 	bl	8000208 <__aeabi_uldivmod>
 80037f4:	e7d3      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80037f6:	4803      	ldr	r0, [pc, #12]	; (8003804 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037f8:	e000      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037fa:	4803      	ldr	r0, [pc, #12]	; (8003808 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80037fc:	bd08      	pop	{r3, pc}
 80037fe:	bf00      	nop
 8003800:	40023800 	.word	0x40023800
 8003804:	017d7840 	.word	0x017d7840
 8003808:	00f42400 	.word	0x00f42400

0800380c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800380c:	2800      	cmp	r0, #0
 800380e:	f000 80a0 	beq.w	8003952 <HAL_RCC_ClockConfig+0x146>
{
 8003812:	b570      	push	{r4, r5, r6, lr}
 8003814:	460d      	mov	r5, r1
 8003816:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003818:	4b52      	ldr	r3, [pc, #328]	; (8003964 <HAL_RCC_ClockConfig+0x158>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	428b      	cmp	r3, r1
 8003822:	d20b      	bcs.n	800383c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003824:	4a4f      	ldr	r2, [pc, #316]	; (8003964 <HAL_RCC_ClockConfig+0x158>)
 8003826:	6813      	ldr	r3, [r2, #0]
 8003828:	f023 030f 	bic.w	r3, r3, #15
 800382c:	430b      	orrs	r3, r1
 800382e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003830:	6813      	ldr	r3, [r2, #0]
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	428b      	cmp	r3, r1
 8003838:	f040 808d 	bne.w	8003956 <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	f013 0f02 	tst.w	r3, #2
 8003842:	d017      	beq.n	8003874 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003844:	f013 0f04 	tst.w	r3, #4
 8003848:	d004      	beq.n	8003854 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800384a:	4a47      	ldr	r2, [pc, #284]	; (8003968 <HAL_RCC_ClockConfig+0x15c>)
 800384c:	6893      	ldr	r3, [r2, #8]
 800384e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003852:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003854:	6823      	ldr	r3, [r4, #0]
 8003856:	f013 0f08 	tst.w	r3, #8
 800385a:	d004      	beq.n	8003866 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800385c:	4a42      	ldr	r2, [pc, #264]	; (8003968 <HAL_RCC_ClockConfig+0x15c>)
 800385e:	6893      	ldr	r3, [r2, #8]
 8003860:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003864:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003866:	4a40      	ldr	r2, [pc, #256]	; (8003968 <HAL_RCC_ClockConfig+0x15c>)
 8003868:	6893      	ldr	r3, [r2, #8]
 800386a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800386e:	68a1      	ldr	r1, [r4, #8]
 8003870:	430b      	orrs	r3, r1
 8003872:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	f013 0f01 	tst.w	r3, #1
 800387a:	d031      	beq.n	80038e0 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800387c:	6863      	ldr	r3, [r4, #4]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d020      	beq.n	80038c4 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003882:	2b02      	cmp	r3, #2
 8003884:	d025      	beq.n	80038d2 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003886:	4a38      	ldr	r2, [pc, #224]	; (8003968 <HAL_RCC_ClockConfig+0x15c>)
 8003888:	6812      	ldr	r2, [r2, #0]
 800388a:	f012 0f02 	tst.w	r2, #2
 800388e:	d064      	beq.n	800395a <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003890:	4935      	ldr	r1, [pc, #212]	; (8003968 <HAL_RCC_ClockConfig+0x15c>)
 8003892:	688a      	ldr	r2, [r1, #8]
 8003894:	f022 0203 	bic.w	r2, r2, #3
 8003898:	4313      	orrs	r3, r2
 800389a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800389c:	f7fe fc2c 	bl	80020f8 <HAL_GetTick>
 80038a0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a2:	4b31      	ldr	r3, [pc, #196]	; (8003968 <HAL_RCC_ClockConfig+0x15c>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	6862      	ldr	r2, [r4, #4]
 80038ac:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80038b0:	d016      	beq.n	80038e0 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b2:	f7fe fc21 	bl	80020f8 <HAL_GetTick>
 80038b6:	1b80      	subs	r0, r0, r6
 80038b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80038bc:	4298      	cmp	r0, r3
 80038be:	d9f0      	bls.n	80038a2 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80038c0:	2003      	movs	r0, #3
 80038c2:	e045      	b.n	8003950 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c4:	4a28      	ldr	r2, [pc, #160]	; (8003968 <HAL_RCC_ClockConfig+0x15c>)
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80038cc:	d1e0      	bne.n	8003890 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80038ce:	2001      	movs	r0, #1
 80038d0:	e03e      	b.n	8003950 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d2:	4a25      	ldr	r2, [pc, #148]	; (8003968 <HAL_RCC_ClockConfig+0x15c>)
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80038da:	d1d9      	bne.n	8003890 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80038dc:	2001      	movs	r0, #1
 80038de:	e037      	b.n	8003950 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038e0:	4b20      	ldr	r3, [pc, #128]	; (8003964 <HAL_RCC_ClockConfig+0x158>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	42ab      	cmp	r3, r5
 80038ea:	d90a      	bls.n	8003902 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ec:	4a1d      	ldr	r2, [pc, #116]	; (8003964 <HAL_RCC_ClockConfig+0x158>)
 80038ee:	6813      	ldr	r3, [r2, #0]
 80038f0:	f023 030f 	bic.w	r3, r3, #15
 80038f4:	432b      	orrs	r3, r5
 80038f6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f8:	6813      	ldr	r3, [r2, #0]
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	42ab      	cmp	r3, r5
 8003900:	d12d      	bne.n	800395e <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	f013 0f04 	tst.w	r3, #4
 8003908:	d006      	beq.n	8003918 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800390a:	4a17      	ldr	r2, [pc, #92]	; (8003968 <HAL_RCC_ClockConfig+0x15c>)
 800390c:	6893      	ldr	r3, [r2, #8]
 800390e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003912:	68e1      	ldr	r1, [r4, #12]
 8003914:	430b      	orrs	r3, r1
 8003916:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	f013 0f08 	tst.w	r3, #8
 800391e:	d007      	beq.n	8003930 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003920:	4a11      	ldr	r2, [pc, #68]	; (8003968 <HAL_RCC_ClockConfig+0x15c>)
 8003922:	6893      	ldr	r3, [r2, #8]
 8003924:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003928:	6921      	ldr	r1, [r4, #16]
 800392a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800392e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003930:	f7ff ff1a 	bl	8003768 <HAL_RCC_GetSysClockFreq>
 8003934:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <HAL_RCC_ClockConfig+0x15c>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800393c:	4a0b      	ldr	r2, [pc, #44]	; (800396c <HAL_RCC_ClockConfig+0x160>)
 800393e:	5cd3      	ldrb	r3, [r2, r3]
 8003940:	40d8      	lsrs	r0, r3
 8003942:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <HAL_RCC_ClockConfig+0x164>)
 8003944:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003946:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <HAL_RCC_ClockConfig+0x168>)
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	f7fe fb23 	bl	8001f94 <HAL_InitTick>
  return HAL_OK;
 800394e:	2000      	movs	r0, #0
}
 8003950:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003952:	2001      	movs	r0, #1
}
 8003954:	4770      	bx	lr
      return HAL_ERROR;
 8003956:	2001      	movs	r0, #1
 8003958:	e7fa      	b.n	8003950 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800395a:	2001      	movs	r0, #1
 800395c:	e7f8      	b.n	8003950 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 800395e:	2001      	movs	r0, #1
 8003960:	e7f6      	b.n	8003950 <HAL_RCC_ClockConfig+0x144>
 8003962:	bf00      	nop
 8003964:	40023c00 	.word	0x40023c00
 8003968:	40023800 	.word	0x40023800
 800396c:	080049f0 	.word	0x080049f0
 8003970:	20000008 	.word	0x20000008
 8003974:	20000010 	.word	0x20000010

08003978 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003978:	4b01      	ldr	r3, [pc, #4]	; (8003980 <HAL_RCC_GetHCLKFreq+0x8>)
 800397a:	6818      	ldr	r0, [r3, #0]
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20000008 	.word	0x20000008

08003984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003984:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003986:	f7ff fff7 	bl	8003978 <HAL_RCC_GetHCLKFreq>
 800398a:	4b04      	ldr	r3, [pc, #16]	; (800399c <HAL_RCC_GetPCLK1Freq+0x18>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003992:	4a03      	ldr	r2, [pc, #12]	; (80039a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003994:	5cd3      	ldrb	r3, [r2, r3]
}
 8003996:	40d8      	lsrs	r0, r3
 8003998:	bd08      	pop	{r3, pc}
 800399a:	bf00      	nop
 800399c:	40023800 	.word	0x40023800
 80039a0:	08004a00 	.word	0x08004a00

080039a4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039a4:	230f      	movs	r3, #15
 80039a6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <HAL_RCC_GetClockConfig+0x34>)
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	f002 0203 	and.w	r2, r2, #3
 80039b0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80039b8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80039c0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	08db      	lsrs	r3, r3, #3
 80039c6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80039ca:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039cc:	4b03      	ldr	r3, [pc, #12]	; (80039dc <HAL_RCC_GetClockConfig+0x38>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	600b      	str	r3, [r1, #0]
}
 80039d6:	4770      	bx	lr
 80039d8:	40023800 	.word	0x40023800
 80039dc:	40023c00 	.word	0x40023c00

080039e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039e2:	b083      	sub	sp, #12
 80039e4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80039e6:	6806      	ldr	r6, [r0, #0]
 80039e8:	f016 0601 	ands.w	r6, r6, #1
 80039ec:	d00d      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039ee:	4ba7      	ldr	r3, [pc, #668]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80039f6:	609a      	str	r2, [r3, #8]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80039fc:	430a      	orrs	r2, r1
 80039fe:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a00:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 8139 	beq.w	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x29a>
  uint32_t plli2sused = 0;
 8003a08:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a0a:	6825      	ldr	r5, [r4, #0]
 8003a0c:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 8003a10:	d011      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a12:	4a9e      	ldr	r2, [pc, #632]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003a14:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003a18:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003a1c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003a1e:	430b      	orrs	r3, r1
 8003a20:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a2a:	f000 8128 	beq.w	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 8127 	beq.w	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  uint32_t pllsaiused = 0;
 8003a34:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003a3c:	d00f      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a3e:	4a93      	ldr	r2, [pc, #588]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003a40:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003a44:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003a48:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a56:	f000 8116 	beq.w	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a5a:	b903      	cbnz	r3, 8003a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 8003a5c:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003a64:	d000      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 8003a66:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a68:	f013 0f20 	tst.w	r3, #32
 8003a6c:	f040 8110 	bne.w	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	f013 0f10 	tst.w	r3, #16
 8003a76:	d00c      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a78:	4b84      	ldr	r3, [pc, #528]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003a7a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a7e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003a82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003a86:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003a98:	d008      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a9a:	4a7c      	ldr	r2, [pc, #496]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003a9c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003aa0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003aa4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003aa6:	430b      	orrs	r3, r1
 8003aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003ab2:	d008      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ab4:	4a75      	ldr	r2, [pc, #468]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003ab6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003aba:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003abe:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003acc:	d008      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ace:	4a6f      	ldr	r2, [pc, #444]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003ad0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003ad4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003ad8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003ada:	430b      	orrs	r3, r1
 8003adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ae0:	6823      	ldr	r3, [r4, #0]
 8003ae2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003ae6:	d008      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ae8:	4a68      	ldr	r2, [pc, #416]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003aea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003aee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003af2:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003af4:	430b      	orrs	r3, r1
 8003af6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003b00:	d008      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b02:	4a62      	ldr	r2, [pc, #392]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003b04:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b08:	f023 0303 	bic.w	r3, r3, #3
 8003b0c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003b1a:	d008      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b1c:	4a5b      	ldr	r2, [pc, #364]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003b1e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b22:	f023 030c 	bic.w	r3, r3, #12
 8003b26:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b2e:	6823      	ldr	r3, [r4, #0]
 8003b30:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003b34:	d008      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b36:	4a55      	ldr	r2, [pc, #340]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003b38:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b3c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003b40:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003b42:	430b      	orrs	r3, r1
 8003b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003b4e:	d008      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b50:	4a4e      	ldr	r2, [pc, #312]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003b52:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b56:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003b5a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b62:	6823      	ldr	r3, [r4, #0]
 8003b64:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003b68:	d008      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b6a:	4a48      	ldr	r2, [pc, #288]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003b6c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b74:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003b76:	430b      	orrs	r3, r1
 8003b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003b82:	d008      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b84:	4a41      	ldr	r2, [pc, #260]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003b86:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b8a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003b8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003b90:	430b      	orrs	r3, r1
 8003b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003b9c:	d008      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b9e:	4a3b      	ldr	r2, [pc, #236]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003ba0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003ba4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ba8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003baa:	430b      	orrs	r3, r1
 8003bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003bb6:	d008      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003bb8:	4a34      	ldr	r2, [pc, #208]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003bba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003bbe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003bc2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003bd0:	d008      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bd2:	4a2e      	ldr	r2, [pc, #184]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003bd4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003bd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bdc:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003bde:	430b      	orrs	r3, r1
 8003be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003bea:	d00d      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003bec:	4a27      	ldr	r2, [pc, #156]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003bee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003bf2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003bf6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003bfe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003c00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c04:	f000 80aa 	beq.w	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	f013 0f08 	tst.w	r3, #8
 8003c0e:	d000      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 8003c10:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c12:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003c16:	d008      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c18:	4a1c      	ldr	r2, [pc, #112]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003c1a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003c1e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003c22:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003c24:	430b      	orrs	r3, r1
 8003c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003c30:	d009      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c32:	4a16      	ldr	r2, [pc, #88]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003c34:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003c40:	430b      	orrs	r3, r1
 8003c42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c46:	b926      	cbnz	r6, 8003c52 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8003c48:	6823      	ldr	r3, [r4, #0]
 8003c4a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003c4e:	f000 8105 	beq.w	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c52:	4a0e      	ldr	r2, [pc, #56]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003c54:	6813      	ldr	r3, [r2, #0]
 8003c56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c5c:	f7fe fa4c 	bl	80020f8 <HAL_GetTick>
 8003c60:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c62:	4b0a      	ldr	r3, [pc, #40]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003c6a:	d079      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c6c:	f7fe fa44 	bl	80020f8 <HAL_GetTick>
 8003c70:	1b80      	subs	r0, r0, r6
 8003c72:	2864      	cmp	r0, #100	; 0x64
 8003c74:	d9f5      	bls.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x282>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c76:	2003      	movs	r0, #3
 8003c78:	e0f3      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x482>
      plli2sused = 1;
 8003c7a:	2601      	movs	r6, #1
 8003c7c:	e6c5      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8003c7e:	2601      	movs	r6, #1
 8003c80:	e6d5      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 8003c82:	2501      	movs	r5, #1
 8003c84:	e6d7      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 8003c86:	2601      	movs	r6, #1
 8003c88:	e6e7      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c8a:	bf00      	nop
 8003c8c:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c90:	4b7f      	ldr	r3, [pc, #508]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c98:	641a      	str	r2, [r3, #64]	; 0x40
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	9301      	str	r3, [sp, #4]
 8003ca2:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003ca4:	4a7b      	ldr	r2, [pc, #492]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8003ca6:	6813      	ldr	r3, [r2, #0]
 8003ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cac:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003cae:	f7fe fa23 	bl	80020f8 <HAL_GetTick>
 8003cb2:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003cb4:	4b77      	ldr	r3, [pc, #476]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003cbc:	d106      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cbe:	f7fe fa1b 	bl	80020f8 <HAL_GetTick>
 8003cc2:	1bc0      	subs	r0, r0, r7
 8003cc4:	2864      	cmp	r0, #100	; 0x64
 8003cc6:	d9f5      	bls.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        return HAL_TIMEOUT;
 8003cc8:	2003      	movs	r0, #3
 8003cca:	e0ca      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x482>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ccc:	4b70      	ldr	r3, [pc, #448]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cd0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003cd4:	d015      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8003cd6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003cd8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d010      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x322>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ce0:	4b6b      	ldr	r3, [pc, #428]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003ce2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ce4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ce8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003cea:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003cee:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cf0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003cf2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003cf6:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8003cf8:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfc:	f013 0f01 	tst.w	r3, #1
 8003d00:	d112      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x348>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d02:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d04:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003d08:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003d0c:	d01d      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003d0e:	4a60      	ldr	r2, [pc, #384]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003d10:	6893      	ldr	r3, [r2, #8]
 8003d12:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d16:	6093      	str	r3, [r2, #8]
 8003d18:	495d      	ldr	r1, [pc, #372]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003d1a:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8003d1c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003d1e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003d22:	4313      	orrs	r3, r2
 8003d24:	670b      	str	r3, [r1, #112]	; 0x70
 8003d26:	e6a3      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8003d28:	f7fe f9e6 	bl	80020f8 <HAL_GetTick>
 8003d2c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d2e:	4b58      	ldr	r3, [pc, #352]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	f013 0f02 	tst.w	r3, #2
 8003d36:	d1e4      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x322>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d38:	f7fe f9de 	bl	80020f8 <HAL_GetTick>
 8003d3c:	1bc0      	subs	r0, r0, r7
 8003d3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d42:	4298      	cmp	r0, r3
 8003d44:	d9f3      	bls.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x34e>
            return HAL_TIMEOUT;
 8003d46:	2003      	movs	r0, #3
 8003d48:	e08b      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x482>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d4a:	4851      	ldr	r0, [pc, #324]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003d4c:	6882      	ldr	r2, [r0, #8]
 8003d4e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003d52:	4951      	ldr	r1, [pc, #324]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8003d54:	4019      	ands	r1, r3
 8003d56:	430a      	orrs	r2, r1
 8003d58:	6082      	str	r2, [r0, #8]
 8003d5a:	e7dd      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x338>
      pllsaiused = 1;
 8003d5c:	2501      	movs	r5, #1
 8003d5e:	e753      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x228>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	f013 0f01 	tst.w	r3, #1
 8003d66:	d013      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8003d68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d6a:	b98b      	cbnz	r3, 8003d90 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d6c:	4a48      	ldr	r2, [pc, #288]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003d6e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d72:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d76:	6860      	ldr	r0, [r4, #4]
 8003d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d7c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003d80:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003d84:	430b      	orrs	r3, r1
 8003d86:	68a1      	ldr	r1, [r4, #8]
 8003d88:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003d8c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003d96:	d003      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003d98:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003d9a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003d9e:	d006      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003da0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003da4:	d01e      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x404>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003da6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dac:	d11a      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x404>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dae:	4a38      	ldr	r2, [pc, #224]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003db0:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003db4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003db8:	6860      	ldr	r0, [r4, #4]
 8003dba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dbe:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003dc2:	68e0      	ldr	r0, [r4, #12]
 8003dc4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003dc8:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003dd2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003dd6:	f023 031f 	bic.w	r3, r3, #31
 8003dda:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003ddc:	3901      	subs	r1, #1
 8003dde:	430b      	orrs	r3, r1
 8003de0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003dea:	d011      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dec:	4a28      	ldr	r2, [pc, #160]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003dee:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003df2:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003df6:	6866      	ldr	r6, [r4, #4]
 8003df8:	6923      	ldr	r3, [r4, #16]
 8003dfa:	041b      	lsls	r3, r3, #16
 8003dfc:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8003e00:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8003e04:	4303      	orrs	r3, r0
 8003e06:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003e0a:	430b      	orrs	r3, r1
 8003e0c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003e16:	d00d      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x454>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e18:	6862      	ldr	r2, [r4, #4]
 8003e1a:	6923      	ldr	r3, [r4, #16]
 8003e1c:	041b      	lsls	r3, r3, #16
 8003e1e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003e22:	68e2      	ldr	r2, [r4, #12]
 8003e24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003e28:	68a2      	ldr	r2, [r4, #8]
 8003e2a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003e2e:	4a18      	ldr	r2, [pc, #96]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003e30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e34:	4a16      	ldr	r2, [pc, #88]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003e36:	6813      	ldr	r3, [r2, #0]
 8003e38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e3e:	f7fe f95b 	bl	80020f8 <HAL_GetTick>
 8003e42:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e44:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003e4c:	d106      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e4e:	f7fe f953 	bl	80020f8 <HAL_GetTick>
 8003e52:	1b80      	subs	r0, r0, r6
 8003e54:	2864      	cmp	r0, #100	; 0x64
 8003e56:	d9f5      	bls.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x464>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e58:	2003      	movs	r0, #3
 8003e5a:	e002      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x482>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e5c:	2d01      	cmp	r5, #1
 8003e5e:	d002      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x486>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003e60:	2000      	movs	r0, #0
}
 8003e62:	b003      	add	sp, #12
 8003e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8003e66:	4a0a      	ldr	r2, [pc, #40]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003e68:	6813      	ldr	r3, [r2, #0]
 8003e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e6e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003e70:	f7fe f942 	bl	80020f8 <HAL_GetTick>
 8003e74:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e76:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003e7e:	d00d      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e80:	f7fe f93a 	bl	80020f8 <HAL_GetTick>
 8003e84:	1b40      	subs	r0, r0, r5
 8003e86:	2864      	cmp	r0, #100	; 0x64
 8003e88:	d9f5      	bls.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x496>
        return HAL_TIMEOUT;
 8003e8a:	2003      	movs	r0, #3
 8003e8c:	e7e9      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800
 8003e94:	40007000 	.word	0x40007000
 8003e98:	0ffffcff 	.word	0x0ffffcff
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003ea2:	d001      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 8003ea4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003ea6:	b122      	cbz	r2, 8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ea8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003eac:	d01d      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x50a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003eae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003eb0:	b9db      	cbnz	r3, 8003eea <HAL_RCCEx_PeriphCLKConfig+0x50a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003eb2:	4a35      	ldr	r2, [pc, #212]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8003eb4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003eb8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ebc:	6960      	ldr	r0, [r4, #20]
 8003ebe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ec2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003ec6:	69a0      	ldr	r0, [r4, #24]
 8003ec8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003ecc:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ed6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003eda:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003ede:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003ee0:	3901      	subs	r1, #1
 8003ee2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003ee6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003ef0:	d003      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003ef2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003ef4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ef8:	d031      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x57e>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	f013 0f08 	tst.w	r3, #8
 8003f00:	d019      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x556>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f02:	4a21      	ldr	r2, [pc, #132]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8003f04:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f08:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003f0c:	6960      	ldr	r0, [r4, #20]
 8003f0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f12:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003f16:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003f1a:	430b      	orrs	r3, r1
 8003f1c:	69e1      	ldr	r1, [r4, #28]
 8003f1e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003f22:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003f26:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003f2a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003f2e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003f30:	430b      	orrs	r3, r1
 8003f32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8003f36:	4a14      	ldr	r2, [pc, #80]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8003f38:	6813      	ldr	r3, [r2, #0]
 8003f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003f40:	f7fe f8da 	bl	80020f8 <HAL_GetTick>
 8003f44:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f46:	4b10      	ldr	r3, [pc, #64]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003f4e:	d119      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f50:	f7fe f8d2 	bl	80020f8 <HAL_GetTick>
 8003f54:	1b00      	subs	r0, r0, r4
 8003f56:	2864      	cmp	r0, #100	; 0x64
 8003f58:	d9f5      	bls.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x566>
        return HAL_TIMEOUT;
 8003f5a:	2003      	movs	r0, #3
 8003f5c:	e781      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x482>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f5e:	4a0a      	ldr	r2, [pc, #40]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8003f60:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f64:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f68:	6965      	ldr	r5, [r4, #20]
 8003f6a:	6a23      	ldr	r3, [r4, #32]
 8003f6c:	041b      	lsls	r3, r3, #16
 8003f6e:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8003f72:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8003f76:	4303      	orrs	r3, r0
 8003f78:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003f82:	e7ba      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x51a>
  return HAL_OK;
 8003f84:	2000      	movs	r0, #0
 8003f86:	e76c      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003f88:	40023800 	.word	0x40023800

08003f8c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003f8c:	b538      	push	{r3, r4, r5, lr}
 8003f8e:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003f90:	6802      	ldr	r2, [r0, #0]
 8003f92:	68d3      	ldr	r3, [r2, #12]
 8003f94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f98:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f9a:	f7fe f8ad 	bl	80020f8 <HAL_GetTick>
 8003f9e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003fa0:	6823      	ldr	r3, [r4, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f013 0f20 	tst.w	r3, #32
 8003fa8:	d107      	bne.n	8003fba <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003faa:	f7fe f8a5 	bl	80020f8 <HAL_GetTick>
 8003fae:	1b40      	subs	r0, r0, r5
 8003fb0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003fb4:	d9f4      	bls.n	8003fa0 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8003fb6:	2003      	movs	r0, #3
 8003fb8:	e000      	b.n	8003fbc <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8003fba:	2000      	movs	r0, #0
}
 8003fbc:	bd38      	pop	{r3, r4, r5, pc}

08003fbe <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003fbe:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003fc0:	6803      	ldr	r3, [r0, #0]
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003fc8:	d001      	beq.n	8003fce <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003fca:	2000      	movs	r0, #0
}
 8003fcc:	bd38      	pop	{r3, r4, r5, pc}
 8003fce:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003fd6:	f7fe f88f 	bl	80020f8 <HAL_GetTick>
 8003fda:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003fdc:	6823      	ldr	r3, [r4, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003fe4:	d107      	bne.n	8003ff6 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003fe6:	f7fe f887 	bl	80020f8 <HAL_GetTick>
 8003fea:	1b43      	subs	r3, r0, r5
 8003fec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ff0:	d9f4      	bls.n	8003fdc <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8003ff2:	2003      	movs	r0, #3
 8003ff4:	e7ea      	b.n	8003fcc <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	e7e8      	b.n	8003fcc <RTC_EnterInitMode+0xe>
	...

08003ffc <HAL_RTC_Init>:
{
 8003ffc:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8003ffe:	2800      	cmp	r0, #0
 8004000:	d05a      	beq.n	80040b8 <HAL_RTC_Init+0xbc>
 8004002:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004004:	7f43      	ldrb	r3, [r0, #29]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d03f      	beq.n	800408a <HAL_RTC_Init+0x8e>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800400a:	2302      	movs	r3, #2
 800400c:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	22ca      	movs	r2, #202	; 0xca
 8004012:	625a      	str	r2, [r3, #36]	; 0x24
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	2253      	movs	r2, #83	; 0x53
 8004018:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800401a:	4620      	mov	r0, r4
 800401c:	f7ff ffcf 	bl	8003fbe <RTC_EnterInitMode>
 8004020:	4605      	mov	r5, r0
 8004022:	2800      	cmp	r0, #0
 8004024:	d135      	bne.n	8004092 <HAL_RTC_Init+0x96>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004026:	6822      	ldr	r2, [r4, #0]
 8004028:	6891      	ldr	r1, [r2, #8]
 800402a:	4b24      	ldr	r3, [pc, #144]	; (80040bc <HAL_RTC_Init+0xc0>)
 800402c:	400b      	ands	r3, r1
 800402e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004030:	6821      	ldr	r1, [r4, #0]
 8004032:	688a      	ldr	r2, [r1, #8]
 8004034:	6863      	ldr	r3, [r4, #4]
 8004036:	6920      	ldr	r0, [r4, #16]
 8004038:	4303      	orrs	r3, r0
 800403a:	6960      	ldr	r0, [r4, #20]
 800403c:	4303      	orrs	r3, r0
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	68e2      	ldr	r2, [r4, #12]
 8004046:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8004048:	6822      	ldr	r2, [r4, #0]
 800404a:	6913      	ldr	r3, [r2, #16]
 800404c:	68a1      	ldr	r1, [r4, #8]
 800404e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004052:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004054:	6822      	ldr	r2, [r4, #0]
 8004056:	68d3      	ldr	r3, [r2, #12]
 8004058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800405c:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800405e:	6823      	ldr	r3, [r4, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f013 0f20 	tst.w	r3, #32
 8004066:	d01b      	beq.n	80040a0 <HAL_RTC_Init+0xa4>
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8004068:	6822      	ldr	r2, [r4, #0]
 800406a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800406c:	f023 0308 	bic.w	r3, r3, #8
 8004070:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8004072:	6822      	ldr	r2, [r4, #0]
 8004074:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004076:	69a1      	ldr	r1, [r4, #24]
 8004078:	430b      	orrs	r3, r1
 800407a:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	22ff      	movs	r2, #255	; 0xff
 8004080:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004082:	2301      	movs	r3, #1
 8004084:	7763      	strb	r3, [r4, #29]
}
 8004086:	4628      	mov	r0, r5
 8004088:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 800408a:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 800408c:	f7fd ff6e 	bl	8001f6c <HAL_RTC_MspInit>
 8004090:	e7bb      	b.n	800400a <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	22ff      	movs	r2, #255	; 0xff
 8004096:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004098:	2304      	movs	r3, #4
 800409a:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 800409c:	2501      	movs	r5, #1
 800409e:	e7f2      	b.n	8004086 <HAL_RTC_Init+0x8a>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80040a0:	4620      	mov	r0, r4
 80040a2:	f7ff ff73 	bl	8003f8c <HAL_RTC_WaitForSynchro>
 80040a6:	2800      	cmp	r0, #0
 80040a8:	d0de      	beq.n	8004068 <HAL_RTC_Init+0x6c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	22ff      	movs	r2, #255	; 0xff
 80040ae:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80040b0:	2304      	movs	r3, #4
 80040b2:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 80040b4:	2501      	movs	r5, #1
 80040b6:	e7e6      	b.n	8004086 <HAL_RTC_Init+0x8a>
     return HAL_ERROR;
 80040b8:	2501      	movs	r5, #1
 80040ba:	e7e4      	b.n	8004086 <HAL_RTC_Init+0x8a>
 80040bc:	ff8fffbf 	.word	0xff8fffbf

080040c0 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 80040c0:	2300      	movs	r3, #0

  while(Value >= 10)
 80040c2:	e002      	b.n	80040ca <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80040c4:	3301      	adds	r3, #1
    Value -= 10;
 80040c6:	380a      	subs	r0, #10
 80040c8:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 80040ca:	2809      	cmp	r0, #9
 80040cc:	d8fa      	bhi.n	80040c4 <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	b2db      	uxtb	r3, r3
}
 80040d2:	4318      	orrs	r0, r3
 80040d4:	4770      	bx	lr
	...

080040d8 <HAL_RTC_SetTime>:
{
 80040d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80040da:	7f03      	ldrb	r3, [r0, #28]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d076      	beq.n	80041ce <HAL_RTC_SetTime+0xf6>
 80040e0:	4604      	mov	r4, r0
 80040e2:	460e      	mov	r6, r1
 80040e4:	2301      	movs	r3, #1
 80040e6:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80040e8:	2302      	movs	r3, #2
 80040ea:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 80040ec:	2a00      	cmp	r2, #0
 80040ee:	d145      	bne.n	800417c <HAL_RTC_SetTime+0xa4>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80040f0:	6803      	ldr	r3, [r0, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80040f8:	d101      	bne.n	80040fe <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 80040fa:	2300      	movs	r3, #0
 80040fc:	730b      	strb	r3, [r1, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80040fe:	7830      	ldrb	r0, [r6, #0]
 8004100:	f7ff ffde 	bl	80040c0 <RTC_ByteToBcd2>
 8004104:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8004106:	7870      	ldrb	r0, [r6, #1]
 8004108:	f7ff ffda 	bl	80040c0 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800410c:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004110:	78b0      	ldrb	r0, [r6, #2]
 8004112:	f7ff ffd5 	bl	80040c0 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8004116:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16));
 8004118:	7b30      	ldrb	r0, [r6, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800411a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	22ca      	movs	r2, #202	; 0xca
 8004122:	625a      	str	r2, [r3, #36]	; 0x24
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	2253      	movs	r2, #83	; 0x53
 8004128:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800412a:	4620      	mov	r0, r4
 800412c:	f7ff ff47 	bl	8003fbe <RTC_EnterInitMode>
 8004130:	4607      	mov	r7, r0
 8004132:	2800      	cmp	r0, #0
 8004134:	d134      	bne.n	80041a0 <HAL_RTC_SetTime+0xc8>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004136:	6822      	ldr	r2, [r4, #0]
 8004138:	4b26      	ldr	r3, [pc, #152]	; (80041d4 <HAL_RTC_SetTime+0xfc>)
 800413a:	402b      	ands	r3, r5
 800413c:	6013      	str	r3, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800413e:	6822      	ldr	r2, [r4, #0]
 8004140:	6893      	ldr	r3, [r2, #8]
 8004142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004146:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004148:	6821      	ldr	r1, [r4, #0]
 800414a:	688b      	ldr	r3, [r1, #8]
 800414c:	6932      	ldr	r2, [r6, #16]
 800414e:	6970      	ldr	r0, [r6, #20]
 8004150:	4302      	orrs	r2, r0
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004156:	6822      	ldr	r2, [r4, #0]
 8004158:	68d3      	ldr	r3, [r2, #12]
 800415a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800415e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f013 0f20 	tst.w	r3, #32
 8004168:	d023      	beq.n	80041b2 <HAL_RTC_SetTime+0xda>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	22ff      	movs	r2, #255	; 0xff
 800416e:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8004170:	2301      	movs	r3, #1
 8004172:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 8004174:	2300      	movs	r3, #0
 8004176:	7723      	strb	r3, [r4, #28]
}
 8004178:	4638      	mov	r0, r7
 800417a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800417c:	6803      	ldr	r3, [r0, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004184:	d101      	bne.n	800418a <HAL_RTC_SetTime+0xb2>
      sTime->TimeFormat = 0x00;
 8004186:	2300      	movs	r3, #0
 8004188:	730b      	strb	r3, [r1, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800418a:	7833      	ldrb	r3, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800418c:	7875      	ldrb	r5, [r6, #1]
 800418e:	022d      	lsls	r5, r5, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004190:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8004194:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8004196:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));
 8004198:	7b30      	ldrb	r0, [r6, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800419a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800419e:	e7be      	b.n	800411e <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041a0:	6823      	ldr	r3, [r4, #0]
 80041a2:	22ff      	movs	r2, #255	; 0xff
 80041a4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80041a6:	2304      	movs	r3, #4
 80041a8:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80041aa:	2300      	movs	r3, #0
 80041ac:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80041ae:	2701      	movs	r7, #1
 80041b0:	e7e2      	b.n	8004178 <HAL_RTC_SetTime+0xa0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80041b2:	4620      	mov	r0, r4
 80041b4:	f7ff feea 	bl	8003f8c <HAL_RTC_WaitForSynchro>
 80041b8:	2800      	cmp	r0, #0
 80041ba:	d0d6      	beq.n	800416a <HAL_RTC_SetTime+0x92>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	22ff      	movs	r2, #255	; 0xff
 80041c0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80041c2:	2304      	movs	r3, #4
 80041c4:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80041c6:	2300      	movs	r3, #0
 80041c8:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80041ca:	2701      	movs	r7, #1
 80041cc:	e7d4      	b.n	8004178 <HAL_RTC_SetTime+0xa0>
  __HAL_LOCK(hrtc);
 80041ce:	2702      	movs	r7, #2
 80041d0:	e7d2      	b.n	8004178 <HAL_RTC_SetTime+0xa0>
 80041d2:	bf00      	nop
 80041d4:	007f7f7f 	.word	0x007f7f7f

080041d8 <HAL_RTC_SetDate>:
{
 80041d8:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 80041da:	7f03      	ldrb	r3, [r0, #28]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d064      	beq.n	80042aa <HAL_RTC_SetDate+0xd2>
 80041e0:	4604      	mov	r4, r0
 80041e2:	460e      	mov	r6, r1
 80041e4:	2301      	movs	r3, #1
 80041e6:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80041e8:	2302      	movs	r3, #2
 80041ea:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80041ec:	b93a      	cbnz	r2, 80041fe <HAL_RTC_SetDate+0x26>
 80041ee:	784b      	ldrb	r3, [r1, #1]
 80041f0:	f013 0f10 	tst.w	r3, #16
 80041f4:	d003      	beq.n	80041fe <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80041f6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80041fa:	330a      	adds	r3, #10
 80041fc:	704b      	strb	r3, [r1, #1]
  if(Format == RTC_FORMAT_BIN)
 80041fe:	2a00      	cmp	r2, #0
 8004200:	d131      	bne.n	8004266 <HAL_RTC_SetDate+0x8e>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004202:	78f0      	ldrb	r0, [r6, #3]
 8004204:	f7ff ff5c 	bl	80040c0 <RTC_ByteToBcd2>
 8004208:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800420a:	7870      	ldrb	r0, [r6, #1]
 800420c:	f7ff ff58 	bl	80040c0 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004210:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004214:	78b0      	ldrb	r0, [r6, #2]
 8004216:	f7ff ff53 	bl	80040c0 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800421a:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13));
 800421c:	7830      	ldrb	r0, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800421e:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	22ca      	movs	r2, #202	; 0xca
 8004226:	625a      	str	r2, [r3, #36]	; 0x24
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	2253      	movs	r2, #83	; 0x53
 800422c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800422e:	4620      	mov	r0, r4
 8004230:	f7ff fec5 	bl	8003fbe <RTC_EnterInitMode>
 8004234:	4606      	mov	r6, r0
 8004236:	bb08      	cbnz	r0, 800427c <HAL_RTC_SetDate+0xa4>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004238:	6822      	ldr	r2, [r4, #0]
 800423a:	4b1d      	ldr	r3, [pc, #116]	; (80042b0 <HAL_RTC_SetDate+0xd8>)
 800423c:	402b      	ands	r3, r5
 800423e:	6053      	str	r3, [r2, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004240:	6822      	ldr	r2, [r4, #0]
 8004242:	68d3      	ldr	r3, [r2, #12]
 8004244:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004248:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f013 0f20 	tst.w	r3, #32
 8004252:	d01c      	beq.n	800428e <HAL_RTC_SetDate+0xb6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	22ff      	movs	r2, #255	; 0xff
 8004258:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800425a:	2301      	movs	r3, #1
 800425c:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800425e:	2300      	movs	r3, #0
 8004260:	7723      	strb	r3, [r4, #28]
}
 8004262:	4630      	mov	r0, r6
 8004264:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8004266:	78f3      	ldrb	r3, [r6, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 8004268:	7875      	ldrb	r5, [r6, #1]
 800426a:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800426c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  ((uint32_t)sDate->Date) | \
 8004270:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8004272:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));
 8004274:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8004276:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
 800427a:	e7d2      	b.n	8004222 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	22ff      	movs	r2, #255	; 0xff
 8004280:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004282:	2304      	movs	r3, #4
 8004284:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8004286:	2300      	movs	r3, #0
 8004288:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 800428a:	2601      	movs	r6, #1
 800428c:	e7e9      	b.n	8004262 <HAL_RTC_SetDate+0x8a>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800428e:	4620      	mov	r0, r4
 8004290:	f7ff fe7c 	bl	8003f8c <HAL_RTC_WaitForSynchro>
 8004294:	2800      	cmp	r0, #0
 8004296:	d0dd      	beq.n	8004254 <HAL_RTC_SetDate+0x7c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	22ff      	movs	r2, #255	; 0xff
 800429c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800429e:	2304      	movs	r3, #4
 80042a0:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80042a2:	2300      	movs	r3, #0
 80042a4:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80042a6:	2601      	movs	r6, #1
 80042a8:	e7db      	b.n	8004262 <HAL_RTC_SetDate+0x8a>
 __HAL_LOCK(hrtc);
 80042aa:	2602      	movs	r6, #2
 80042ac:	e7d9      	b.n	8004262 <HAL_RTC_SetDate+0x8a>
 80042ae:	bf00      	nop
 80042b0:	00ffff3f 	.word	0x00ffff3f

080042b4 <HAL_RTC_SetAlarm>:
{
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80042b6:	7f03      	ldrb	r3, [r0, #28]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	f000 80a9 	beq.w	8004410 <HAL_RTC_SetAlarm+0x15c>
 80042be:	4604      	mov	r4, r0
 80042c0:	460d      	mov	r5, r1
 80042c2:	2301      	movs	r3, #1
 80042c4:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80042c6:	2302      	movs	r3, #2
 80042c8:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 80042ca:	2a00      	cmp	r2, #0
 80042cc:	d14d      	bne.n	800436a <HAL_RTC_SetAlarm+0xb6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80042ce:	6803      	ldr	r3, [r0, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80042d6:	d101      	bne.n	80042dc <HAL_RTC_SetAlarm+0x28>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80042d8:	2300      	movs	r3, #0
 80042da:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80042dc:	6a2e      	ldr	r6, [r5, #32]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80042de:	7828      	ldrb	r0, [r5, #0]
 80042e0:	f7ff feee 	bl	80040c0 <RTC_ByteToBcd2>
 80042e4:	0407      	lsls	r7, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80042e6:	7868      	ldrb	r0, [r5, #1]
 80042e8:	f7ff feea 	bl	80040c0 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80042ec:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80042f0:	78a8      	ldrb	r0, [r5, #2]
 80042f2:	f7ff fee5 	bl	80040c0 <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80042f6:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80042f8:	7b28      	ldrb	r0, [r5, #12]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80042fa:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80042fe:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 8004302:	f7ff fedd 	bl	80040c0 <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8004306:	ea47 6700 	orr.w	r7, r7, r0, lsl #24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800430a:	433e      	orrs	r6, r7
              ((uint32_t)sAlarm->AlarmMask));
 800430c:	69ab      	ldr	r3, [r5, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800430e:	431e      	orrs	r6, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004310:	686f      	ldr	r7, [r5, #4]
 8004312:	69eb      	ldr	r3, [r5, #28]
 8004314:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	22ca      	movs	r2, #202	; 0xca
 800431a:	625a      	str	r2, [r3, #36]	; 0x24
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	2253      	movs	r2, #83	; 0x53
 8004320:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004322:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004328:	d039      	beq.n	800439e <HAL_RTC_SetAlarm+0xea>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800432a:	6822      	ldr	r2, [r4, #0]
 800432c:	6893      	ldr	r3, [r2, #8]
 800432e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004332:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004334:	6822      	ldr	r2, [r4, #0]
 8004336:	6893      	ldr	r3, [r2, #8]
 8004338:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800433c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800433e:	f7fd fedb 	bl	80020f8 <HAL_GetTick>
 8004342:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	f012 0f02 	tst.w	r2, #2
 800434c:	d150      	bne.n	80043f0 <HAL_RTC_SetAlarm+0x13c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800434e:	f7fd fed3 	bl	80020f8 <HAL_GetTick>
 8004352:	1b40      	subs	r0, r0, r5
 8004354:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004358:	d9f4      	bls.n	8004344 <HAL_RTC_SetAlarm+0x90>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	22ff      	movs	r2, #255	; 0xff
 800435e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004360:	2003      	movs	r0, #3
 8004362:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8004364:	2300      	movs	r3, #0
 8004366:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8004368:	e051      	b.n	800440e <HAL_RTC_SetAlarm+0x15a>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800436a:	6803      	ldr	r3, [r0, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004372:	d101      	bne.n	8004378 <HAL_RTC_SetAlarm+0xc4>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8004374:	2300      	movs	r3, #0
 8004376:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8004378:	6a2e      	ldr	r6, [r5, #32]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800437a:	782a      	ldrb	r2, [r5, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800437c:	786b      	ldrb	r3, [r5, #1]
 800437e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8004380:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004384:	78aa      	ldrb	r2, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8004386:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8004388:	7b2a      	ldrb	r2, [r5, #12]
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800438a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800438e:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8004392:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8004396:	431e      	orrs	r6, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004398:	69ab      	ldr	r3, [r5, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800439a:	431e      	orrs	r6, r3
 800439c:	e7b8      	b.n	8004310 <HAL_RTC_SetAlarm+0x5c>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800439e:	6822      	ldr	r2, [r4, #0]
 80043a0:	6893      	ldr	r3, [r2, #8]
 80043a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043a6:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80043a8:	6822      	ldr	r2, [r4, #0]
 80043aa:	6893      	ldr	r3, [r2, #8]
 80043ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043b0:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80043b2:	f7fd fea1 	bl	80020f8 <HAL_GetTick>
 80043b6:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	f012 0f01 	tst.w	r2, #1
 80043c0:	d10d      	bne.n	80043de <HAL_RTC_SetAlarm+0x12a>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80043c2:	f7fd fe99 	bl	80020f8 <HAL_GetTick>
 80043c6:	1b40      	subs	r0, r0, r5
 80043c8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80043cc:	d9f4      	bls.n	80043b8 <HAL_RTC_SetAlarm+0x104>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	22ff      	movs	r2, #255	; 0xff
 80043d2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043d4:	2003      	movs	r0, #3
 80043d6:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80043d8:	2300      	movs	r3, #0
 80043da:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 80043dc:	e017      	b.n	800440e <HAL_RTC_SetAlarm+0x15a>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80043de:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80043e4:	6822      	ldr	r2, [r4, #0]
 80043e6:	6893      	ldr	r3, [r2, #8]
 80043e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ec:	6093      	str	r3, [r2, #8]
 80043ee:	e007      	b.n	8004400 <HAL_RTC_SetAlarm+0x14c>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80043f0:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80043f6:	6822      	ldr	r2, [r4, #0]
 80043f8:	6893      	ldr	r3, [r2, #8]
 80043fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043fe:	6093      	str	r3, [r2, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	22ff      	movs	r2, #255	; 0xff
 8004404:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004406:	2301      	movs	r3, #1
 8004408:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 800440a:	2000      	movs	r0, #0
 800440c:	7720      	strb	r0, [r4, #28]
}
 800440e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8004410:	2002      	movs	r0, #2
 8004412:	e7fc      	b.n	800440e <HAL_RTC_SetAlarm+0x15a>

08004414 <HAL_RTCEx_SetTimeStamp>:
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004414:	7f03      	ldrb	r3, [r0, #28]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d02b      	beq.n	8004472 <HAL_RTCEx_SetTimeStamp+0x5e>
{
 800441a:	b430      	push	{r4, r5}
  __HAL_LOCK(hrtc);
 800441c:	f04f 0c01 	mov.w	ip, #1
 8004420:	f880 c01c 	strb.w	ip, [r0, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004424:	2302      	movs	r3, #2
 8004426:	7743      	strb	r3, [r0, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8004428:	6804      	ldr	r4, [r0, #0]
 800442a:	68a5      	ldr	r5, [r4, #8]
 800442c:	f6a3 030b 	subw	r3, r3, #2059	; 0x80b
 8004430:	402b      	ands	r3, r5

  tmpreg|= TimeStampEdge;
 8004432:	4319      	orrs	r1, r3

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004434:	23ca      	movs	r3, #202	; 0xca
 8004436:	6263      	str	r3, [r4, #36]	; 0x24
 8004438:	6803      	ldr	r3, [r0, #0]
 800443a:	2453      	movs	r4, #83	; 0x53
 800443c:	625c      	str	r4, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800443e:	6804      	ldr	r4, [r0, #0]
 8004440:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004442:	f023 0306 	bic.w	r3, r3, #6
 8004446:	64e3      	str	r3, [r4, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8004448:	6804      	ldr	r4, [r0, #0]
 800444a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800444c:	431a      	orrs	r2, r3
 800444e:	64e2      	str	r2, [r4, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8004450:	6803      	ldr	r3, [r0, #0]
 8004452:	6099      	str	r1, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8004454:	6802      	ldr	r2, [r0, #0]
 8004456:	6893      	ldr	r3, [r2, #8]
 8004458:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800445c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800445e:	6803      	ldr	r3, [r0, #0]
 8004460:	22ff      	movs	r2, #255	; 0xff
 8004462:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004464:	f880 c01d 	strb.w	ip, [r0, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004468:	2300      	movs	r3, #0
 800446a:	7703      	strb	r3, [r0, #28]

  return HAL_OK;
 800446c:	4618      	mov	r0, r3
}
 800446e:	bc30      	pop	{r4, r5}
 8004470:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8004472:	2002      	movs	r0, #2
}
 8004474:	4770      	bx	lr

08004476 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004476:	b1e0      	cbz	r0, 80044b2 <HAL_SDRAM_Init+0x3c>
{   
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	460d      	mov	r5, r1
 800447c:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800447e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004482:	b18b      	cbz	r3, 80044a8 <HAL_SDRAM_Init+0x32>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004484:	2302      	movs	r3, #2
 8004486:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800448a:	4621      	mov	r1, r4
 800448c:	f851 0b04 	ldr.w	r0, [r1], #4
 8004490:	f000 f9e8 	bl	8004864 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004494:	6862      	ldr	r2, [r4, #4]
 8004496:	4629      	mov	r1, r5
 8004498:	6820      	ldr	r0, [r4, #0]
 800449a:	f000 fa1d 	bl	80048d8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800449e:	2301      	movs	r3, #1
 80044a0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 80044a4:	2000      	movs	r0, #0
}
 80044a6:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 80044a8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80044ac:	f7fd fd6e 	bl	8001f8c <HAL_SDRAM_MspInit>
 80044b0:	e7e8      	b.n	8004484 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 80044b2:	2001      	movs	r0, #1
}
 80044b4:	4770      	bx	lr

080044b6 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80044b6:	4770      	bx	lr

080044b8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044b8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d13a      	bne.n	8004538 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c2:	2302      	movs	r3, #2
 80044c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044c8:	6802      	ldr	r2, [r0, #0]
 80044ca:	68d3      	ldr	r3, [r2, #12]
 80044cc:	f043 0301 	orr.w	r3, r3, #1
 80044d0:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d2:	6803      	ldr	r3, [r0, #0]
 80044d4:	4a1a      	ldr	r2, [pc, #104]	; (8004540 <HAL_TIM_Base_Start_IT+0x88>)
 80044d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044da:	bf18      	it	ne
 80044dc:	4293      	cmpne	r3, r2
 80044de:	d01d      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x64>
 80044e0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d019      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x64>
 80044e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d015      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x64>
 80044f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d011      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x64>
 80044f8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00d      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x64>
 8004500:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004504:	4293      	cmp	r3, r2
 8004506:	d009      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x64>
 8004508:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800450c:	4293      	cmp	r3, r2
 800450e:	d005      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	f042 0201 	orr.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004518:	2000      	movs	r0, #0
 800451a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800451c:	6899      	ldr	r1, [r3, #8]
 800451e:	4a09      	ldr	r2, [pc, #36]	; (8004544 <HAL_TIM_Base_Start_IT+0x8c>)
 8004520:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004522:	2a06      	cmp	r2, #6
 8004524:	bf18      	it	ne
 8004526:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800452a:	d007      	beq.n	800453c <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004534:	2000      	movs	r0, #0
 8004536:	4770      	bx	lr
    return HAL_ERROR;
 8004538:	2001      	movs	r0, #1
 800453a:	4770      	bx	lr
  return HAL_OK;
 800453c:	2000      	movs	r0, #0
}
 800453e:	4770      	bx	lr
 8004540:	40010000 	.word	0x40010000
 8004544:	00010007 	.word	0x00010007

08004548 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004548:	4770      	bx	lr

0800454a <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800454a:	4770      	bx	lr

0800454c <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800454c:	4770      	bx	lr

0800454e <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800454e:	4770      	bx	lr

08004550 <HAL_TIM_IRQHandler>:
{
 8004550:	b510      	push	{r4, lr}
 8004552:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004554:	6803      	ldr	r3, [r0, #0]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	f012 0f02 	tst.w	r2, #2
 800455c:	d011      	beq.n	8004582 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800455e:	68da      	ldr	r2, [r3, #12]
 8004560:	f012 0f02 	tst.w	r2, #2
 8004564:	d00d      	beq.n	8004582 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004566:	f06f 0202 	mvn.w	r2, #2
 800456a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800456c:	2301      	movs	r3, #1
 800456e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004570:	6803      	ldr	r3, [r0, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	f013 0f03 	tst.w	r3, #3
 8004578:	d079      	beq.n	800466e <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800457a:	f7ff ffe6 	bl	800454a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457e:	2300      	movs	r3, #0
 8004580:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	691a      	ldr	r2, [r3, #16]
 8004586:	f012 0f04 	tst.w	r2, #4
 800458a:	d012      	beq.n	80045b2 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	f012 0f04 	tst.w	r2, #4
 8004592:	d00e      	beq.n	80045b2 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004594:	f06f 0204 	mvn.w	r2, #4
 8004598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800459a:	2302      	movs	r3, #2
 800459c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80045a6:	d068      	beq.n	800467a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80045a8:	4620      	mov	r0, r4
 80045aa:	f7ff ffce 	bl	800454a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ae:	2300      	movs	r3, #0
 80045b0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	691a      	ldr	r2, [r3, #16]
 80045b6:	f012 0f08 	tst.w	r2, #8
 80045ba:	d012      	beq.n	80045e2 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	f012 0f08 	tst.w	r2, #8
 80045c2:	d00e      	beq.n	80045e2 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045c4:	f06f 0208 	mvn.w	r2, #8
 80045c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ca:	2304      	movs	r3, #4
 80045cc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f013 0f03 	tst.w	r3, #3
 80045d6:	d057      	beq.n	8004688 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80045d8:	4620      	mov	r0, r4
 80045da:	f7ff ffb6 	bl	800454a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045de:	2300      	movs	r3, #0
 80045e0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	691a      	ldr	r2, [r3, #16]
 80045e6:	f012 0f10 	tst.w	r2, #16
 80045ea:	d012      	beq.n	8004612 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	f012 0f10 	tst.w	r2, #16
 80045f2:	d00e      	beq.n	8004612 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045f4:	f06f 0210 	mvn.w	r2, #16
 80045f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045fa:	2308      	movs	r3, #8
 80045fc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004606:	d046      	beq.n	8004696 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004608:	4620      	mov	r0, r4
 800460a:	f7ff ff9e 	bl	800454a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460e:	2300      	movs	r3, #0
 8004610:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	691a      	ldr	r2, [r3, #16]
 8004616:	f012 0f01 	tst.w	r2, #1
 800461a:	d003      	beq.n	8004624 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	f012 0f01 	tst.w	r2, #1
 8004622:	d13f      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	f012 0f80 	tst.w	r2, #128	; 0x80
 800462c:	d003      	beq.n	8004636 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004634:	d13d      	bne.n	80046b2 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800463e:	d003      	beq.n	8004648 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004646:	d13b      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004650:	d003      	beq.n	800465a <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004658:	d139      	bne.n	80046ce <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	f012 0f20 	tst.w	r2, #32
 8004662:	d003      	beq.n	800466c <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	f012 0f20 	tst.w	r2, #32
 800466a:	d137      	bne.n	80046dc <HAL_TIM_IRQHandler+0x18c>
}
 800466c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800466e:	f7ff ff6b 	bl	8004548 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004672:	4620      	mov	r0, r4
 8004674:	f7ff ff6a 	bl	800454c <HAL_TIM_PWM_PulseFinishedCallback>
 8004678:	e781      	b.n	800457e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467a:	4620      	mov	r0, r4
 800467c:	f7ff ff64 	bl	8004548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004680:	4620      	mov	r0, r4
 8004682:	f7ff ff63 	bl	800454c <HAL_TIM_PWM_PulseFinishedCallback>
 8004686:	e792      	b.n	80045ae <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004688:	4620      	mov	r0, r4
 800468a:	f7ff ff5d 	bl	8004548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800468e:	4620      	mov	r0, r4
 8004690:	f7ff ff5c 	bl	800454c <HAL_TIM_PWM_PulseFinishedCallback>
 8004694:	e7a3      	b.n	80045de <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004696:	4620      	mov	r0, r4
 8004698:	f7ff ff56 	bl	8004548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800469c:	4620      	mov	r0, r4
 800469e:	f7ff ff55 	bl	800454c <HAL_TIM_PWM_PulseFinishedCallback>
 80046a2:	e7b4      	b.n	800460e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046a4:	f06f 0201 	mvn.w	r2, #1
 80046a8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80046aa:	4620      	mov	r0, r4
 80046ac:	f7fd f8fa 	bl	80018a4 <HAL_TIM_PeriodElapsedCallback>
 80046b0:	e7b8      	b.n	8004624 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046b6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80046b8:	4620      	mov	r0, r4
 80046ba:	f000 f8d0 	bl	800485e <HAL_TIMEx_BreakCallback>
 80046be:	e7ba      	b.n	8004636 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046c0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046c4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80046c6:	4620      	mov	r0, r4
 80046c8:	f000 f8ca 	bl	8004860 <HAL_TIMEx_Break2Callback>
 80046cc:	e7bc      	b.n	8004648 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046d2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80046d4:	4620      	mov	r0, r4
 80046d6:	f7ff ff3a 	bl	800454e <HAL_TIM_TriggerCallback>
 80046da:	e7be      	b.n	800465a <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046dc:	f06f 0220 	mvn.w	r2, #32
 80046e0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80046e2:	4620      	mov	r0, r4
 80046e4:	f000 f8ba 	bl	800485c <HAL_TIMEx_CommutCallback>
}
 80046e8:	e7c0      	b.n	800466c <HAL_TIM_IRQHandler+0x11c>
	...

080046ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046ec:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ee:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046f0:	4a3b      	ldr	r2, [pc, #236]	; (80047e0 <TIM_Base_SetConfig+0xf4>)
 80046f2:	4290      	cmp	r0, r2
 80046f4:	bf14      	ite	ne
 80046f6:	f04f 0e00 	movne.w	lr, #0
 80046fa:	f04f 0e01 	moveq.w	lr, #1
 80046fe:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004702:	bf14      	ite	ne
 8004704:	4672      	movne	r2, lr
 8004706:	f04e 0201 	orreq.w	r2, lr, #1
 800470a:	b9aa      	cbnz	r2, 8004738 <TIM_Base_SetConfig+0x4c>
 800470c:	4c35      	ldr	r4, [pc, #212]	; (80047e4 <TIM_Base_SetConfig+0xf8>)
 800470e:	42a0      	cmp	r0, r4
 8004710:	bf14      	ite	ne
 8004712:	2400      	movne	r4, #0
 8004714:	2401      	moveq	r4, #1
 8004716:	4d34      	ldr	r5, [pc, #208]	; (80047e8 <TIM_Base_SetConfig+0xfc>)
 8004718:	42a8      	cmp	r0, r5
 800471a:	d00d      	beq.n	8004738 <TIM_Base_SetConfig+0x4c>
 800471c:	b964      	cbnz	r4, 8004738 <TIM_Base_SetConfig+0x4c>
 800471e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8004722:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 8004726:	42a0      	cmp	r0, r4
 8004728:	bf14      	ite	ne
 800472a:	2400      	movne	r4, #0
 800472c:	2401      	moveq	r4, #1
 800472e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004732:	42a8      	cmp	r0, r5
 8004734:	d000      	beq.n	8004738 <TIM_Base_SetConfig+0x4c>
 8004736:	b11c      	cbz	r4, 8004740 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800473c:	684c      	ldr	r4, [r1, #4]
 800473e:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004740:	2a00      	cmp	r2, #0
 8004742:	d133      	bne.n	80047ac <TIM_Base_SetConfig+0xc0>
 8004744:	4a27      	ldr	r2, [pc, #156]	; (80047e4 <TIM_Base_SetConfig+0xf8>)
 8004746:	4290      	cmp	r0, r2
 8004748:	bf14      	ite	ne
 800474a:	2200      	movne	r2, #0
 800474c:	2201      	moveq	r2, #1
 800474e:	4c26      	ldr	r4, [pc, #152]	; (80047e8 <TIM_Base_SetConfig+0xfc>)
 8004750:	42a0      	cmp	r0, r4
 8004752:	d02b      	beq.n	80047ac <TIM_Base_SetConfig+0xc0>
 8004754:	bb52      	cbnz	r2, 80047ac <TIM_Base_SetConfig+0xc0>
 8004756:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800475a:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800475e:	4290      	cmp	r0, r2
 8004760:	bf14      	ite	ne
 8004762:	2200      	movne	r2, #0
 8004764:	2201      	moveq	r2, #1
 8004766:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800476a:	42a0      	cmp	r0, r4
 800476c:	d01e      	beq.n	80047ac <TIM_Base_SetConfig+0xc0>
 800476e:	b9ea      	cbnz	r2, 80047ac <TIM_Base_SetConfig+0xc0>
 8004770:	4a1e      	ldr	r2, [pc, #120]	; (80047ec <TIM_Base_SetConfig+0x100>)
 8004772:	4290      	cmp	r0, r2
 8004774:	bf14      	ite	ne
 8004776:	2200      	movne	r2, #0
 8004778:	2201      	moveq	r2, #1
 800477a:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 800477e:	42a0      	cmp	r0, r4
 8004780:	d014      	beq.n	80047ac <TIM_Base_SetConfig+0xc0>
 8004782:	b99a      	cbnz	r2, 80047ac <TIM_Base_SetConfig+0xc0>
 8004784:	4a1a      	ldr	r2, [pc, #104]	; (80047f0 <TIM_Base_SetConfig+0x104>)
 8004786:	4290      	cmp	r0, r2
 8004788:	bf14      	ite	ne
 800478a:	2200      	movne	r2, #0
 800478c:	2201      	moveq	r2, #1
 800478e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004792:	42a0      	cmp	r0, r4
 8004794:	d00a      	beq.n	80047ac <TIM_Base_SetConfig+0xc0>
 8004796:	b94a      	cbnz	r2, 80047ac <TIM_Base_SetConfig+0xc0>
 8004798:	4a16      	ldr	r2, [pc, #88]	; (80047f4 <TIM_Base_SetConfig+0x108>)
 800479a:	4290      	cmp	r0, r2
 800479c:	bf14      	ite	ne
 800479e:	2200      	movne	r2, #0
 80047a0:	2201      	moveq	r2, #1
 80047a2:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
 80047a6:	42a0      	cmp	r0, r4
 80047a8:	d000      	beq.n	80047ac <TIM_Base_SetConfig+0xc0>
 80047aa:	b122      	cbz	r2, 80047b6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047ac:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047b0:	68cb      	ldr	r3, [r1, #12]
 80047b2:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ba:	694a      	ldr	r2, [r1, #20]
 80047bc:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80047be:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047c0:	688a      	ldr	r2, [r1, #8]
 80047c2:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047c4:	680a      	ldr	r2, [r1, #0]
 80047c6:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047c8:	4a0b      	ldr	r2, [pc, #44]	; (80047f8 <TIM_Base_SetConfig+0x10c>)
 80047ca:	4290      	cmp	r0, r2
 80047cc:	bf14      	ite	ne
 80047ce:	4673      	movne	r3, lr
 80047d0:	f04e 0301 	orreq.w	r3, lr, #1
 80047d4:	b10b      	cbz	r3, 80047da <TIM_Base_SetConfig+0xee>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047d6:	690b      	ldr	r3, [r1, #16]
 80047d8:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047da:	2301      	movs	r3, #1
 80047dc:	6143      	str	r3, [r0, #20]
}
 80047de:	bd30      	pop	{r4, r5, pc}
 80047e0:	40010000 	.word	0x40010000
 80047e4:	40000800 	.word	0x40000800
 80047e8:	40000400 	.word	0x40000400
 80047ec:	40014400 	.word	0x40014400
 80047f0:	40001800 	.word	0x40001800
 80047f4:	40002000 	.word	0x40002000
 80047f8:	40010400 	.word	0x40010400

080047fc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80047fc:	b360      	cbz	r0, 8004858 <HAL_TIM_Base_Init+0x5c>
{
 80047fe:	b510      	push	{r4, lr}
 8004800:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004802:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004806:	b313      	cbz	r3, 800484e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8004808:	2302      	movs	r3, #2
 800480a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800480e:	4621      	mov	r1, r4
 8004810:	f851 0b04 	ldr.w	r0, [r1], #4
 8004814:	f7ff ff6a 	bl	80046ec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004818:	2301      	movs	r3, #1
 800481a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800481e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004822:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004826:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800482a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800482e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004832:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004836:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800483a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800483e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004842:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004846:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800484a:	2000      	movs	r0, #0
}
 800484c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800484e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004852:	f7ff fe30 	bl	80044b6 <HAL_TIM_Base_MspInit>
 8004856:	e7d7      	b.n	8004808 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004858:	2001      	movs	r0, #1
}
 800485a:	4770      	bx	lr

0800485c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800485c:	4770      	bx	lr

0800485e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800485e:	4770      	bx	lr

08004860 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004860:	4770      	bx	lr
	...

08004864 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004864:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8004866:	680b      	ldr	r3, [r1, #0]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d018      	beq.n	800489e <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800486c:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800486e:	4a19      	ldr	r2, [pc, #100]	; (80048d4 <FMC_SDRAM_Init+0x70>)
 8004870:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004872:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 8004874:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004876:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 8004878:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 800487a:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 800487c:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 800487e:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 8004880:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 8004882:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 8004884:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 8004886:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 8004888:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 800488a:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 800488c:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 800488e:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 8004890:	6a49      	ldr	r1, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8004892:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004894:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004896:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8004898:	2000      	movs	r0, #0
 800489a:	bc30      	pop	{r4, r5}
 800489c:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800489e:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80048a0:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80048a4:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 80048a6:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80048a8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80048aa:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 80048ac:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80048ae:	4322      	orrs	r2, r4
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80048b0:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80048b2:	4c08      	ldr	r4, [pc, #32]	; (80048d4 <FMC_SDRAM_Init+0x70>)
 80048b4:	401c      	ands	r4, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80048b6:	684b      	ldr	r3, [r1, #4]
 80048b8:	688d      	ldr	r5, [r1, #8]
 80048ba:	432b      	orrs	r3, r5
                       Init->RowBitsNumber       |\
 80048bc:	68cd      	ldr	r5, [r1, #12]
 80048be:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 80048c0:	690d      	ldr	r5, [r1, #16]
 80048c2:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 80048c4:	694d      	ldr	r5, [r1, #20]
 80048c6:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 80048c8:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 80048ca:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80048cc:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80048ce:	6002      	str	r2, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80048d0:	6043      	str	r3, [r0, #4]
 80048d2:	e7e1      	b.n	8004898 <FMC_SDRAM_Init+0x34>
 80048d4:	ffff8000 	.word	0xffff8000

080048d8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80048d8:	b510      	push	{r4, lr}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80048da:	2a01      	cmp	r2, #1
 80048dc:	d025      	beq.n	800492a <FMC_SDRAM_Timing_Init+0x52>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80048de:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80048e0:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80048e4:	680b      	ldr	r3, [r1, #0]
 80048e6:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80048e8:	684c      	ldr	r4, [r1, #4]
 80048ea:	f104 3cff 	add.w	ip, r4, #4294967295
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80048ee:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80048f2:	688c      	ldr	r4, [r1, #8]
 80048f4:	f104 3cff 	add.w	ip, r4, #4294967295
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80048f8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80048fc:	68cc      	ldr	r4, [r1, #12]
 80048fe:	f104 3cff 	add.w	ip, r4, #4294967295
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8004902:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8004906:	690c      	ldr	r4, [r1, #16]
 8004908:	f104 3cff 	add.w	ip, r4, #4294967295
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800490c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 8004910:	694c      	ldr	r4, [r1, #20]
 8004912:	f104 3cff 	add.w	ip, r4, #4294967295
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8004916:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 800491a:	6989      	ldr	r1, [r1, #24]
 800491c:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800491e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004922:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004924:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8004926:	2000      	movs	r0, #0
 8004928:	bd10      	pop	{r4, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800492a:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800492c:	4c13      	ldr	r4, [pc, #76]	; (800497c <FMC_SDRAM_Timing_Init+0xa4>)
 800492e:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8004930:	68ca      	ldr	r2, [r1, #12]
 8004932:	f102 3cff 	add.w	ip, r2, #4294967295
                        (((Timing->RPDelay)-1) << 20)); 
 8004936:	694b      	ldr	r3, [r1, #20]
 8004938:	1e5a      	subs	r2, r3, #1
 800493a:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800493c:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
 8004940:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004942:	68c3      	ldr	r3, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004944:	f003 4c70 	and.w	ip, r3, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004948:	680b      	ldr	r3, [r1, #0]
 800494a:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800494c:	684c      	ldr	r4, [r1, #4]
 800494e:	f104 3eff 	add.w	lr, r4, #4294967295
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004952:	ea43 130e 	orr.w	r3, r3, lr, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8004956:	688c      	ldr	r4, [r1, #8]
 8004958:	f104 3eff 	add.w	lr, r4, #4294967295
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800495c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8004960:	690c      	ldr	r4, [r1, #16]
 8004962:	f104 3eff 	add.w	lr, r4, #4294967295
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8004966:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 800496a:	6989      	ldr	r1, [r1, #24]
 800496c:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800496e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004972:	ea43 030c 	orr.w	r3, r3, ip
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004976:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004978:	60c3      	str	r3, [r0, #12]
 800497a:	e7d4      	b.n	8004926 <FMC_SDRAM_Timing_Init+0x4e>
 800497c:	ff0f0fff 	.word	0xff0f0fff

08004980 <__libc_init_array>:
 8004980:	b570      	push	{r4, r5, r6, lr}
 8004982:	4d0d      	ldr	r5, [pc, #52]	; (80049b8 <__libc_init_array+0x38>)
 8004984:	4c0d      	ldr	r4, [pc, #52]	; (80049bc <__libc_init_array+0x3c>)
 8004986:	1b64      	subs	r4, r4, r5
 8004988:	10a4      	asrs	r4, r4, #2
 800498a:	2600      	movs	r6, #0
 800498c:	42a6      	cmp	r6, r4
 800498e:	d109      	bne.n	80049a4 <__libc_init_array+0x24>
 8004990:	4d0b      	ldr	r5, [pc, #44]	; (80049c0 <__libc_init_array+0x40>)
 8004992:	4c0c      	ldr	r4, [pc, #48]	; (80049c4 <__libc_init_array+0x44>)
 8004994:	f000 f820 	bl	80049d8 <_init>
 8004998:	1b64      	subs	r4, r4, r5
 800499a:	10a4      	asrs	r4, r4, #2
 800499c:	2600      	movs	r6, #0
 800499e:	42a6      	cmp	r6, r4
 80049a0:	d105      	bne.n	80049ae <__libc_init_array+0x2e>
 80049a2:	bd70      	pop	{r4, r5, r6, pc}
 80049a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a8:	4798      	blx	r3
 80049aa:	3601      	adds	r6, #1
 80049ac:	e7ee      	b.n	800498c <__libc_init_array+0xc>
 80049ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b2:	4798      	blx	r3
 80049b4:	3601      	adds	r6, #1
 80049b6:	e7f2      	b.n	800499e <__libc_init_array+0x1e>
 80049b8:	08004a10 	.word	0x08004a10
 80049bc:	08004a10 	.word	0x08004a10
 80049c0:	08004a10 	.word	0x08004a10
 80049c4:	08004a14 	.word	0x08004a14

080049c8 <memset>:
 80049c8:	4402      	add	r2, r0
 80049ca:	4603      	mov	r3, r0
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d100      	bne.n	80049d2 <memset+0xa>
 80049d0:	4770      	bx	lr
 80049d2:	f803 1b01 	strb.w	r1, [r3], #1
 80049d6:	e7f9      	b.n	80049cc <memset+0x4>

080049d8 <_init>:
 80049d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049da:	bf00      	nop
 80049dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049de:	bc08      	pop	{r3}
 80049e0:	469e      	mov	lr, r3
 80049e2:	4770      	bx	lr

080049e4 <_fini>:
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	bf00      	nop
 80049e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ea:	bc08      	pop	{r3}
 80049ec:	469e      	mov	lr, r3
 80049ee:	4770      	bx	lr
