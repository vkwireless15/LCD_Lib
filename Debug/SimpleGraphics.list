
SimpleGraphics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006018  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d30  080061e0  080061e0  000161e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f10  08007f10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007f10  08007f10  00017f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f18  08007f18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f18  08007f18  00017f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f1c  08007f1c  00017f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003fea4  2000000c  08007f2c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2003feb0  08007f2c  0002feb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021e3c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003485  00000000  00000000  00041e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016b8  00000000  00000000  00045300  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000285e1  00000000  00000000  000469b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000133e5  00000000  00000000  0006ef99  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000fc6c2  00000000  00000000  0008237e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0017ea40  2**0
                  CONTENTS, READONLY
 19 .debug_loc    00015f32  00000000  00000000  0017eabb  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00001660  00000000  00000000  001949f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_frame  00004510  00000000  00000000  00196050  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080061c8 	.word	0x080061c8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080061c8 	.word	0x080061c8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b972 	b.w	8000d40 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9e08      	ldr	r6, [sp, #32]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	4688      	mov	r8, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d14b      	bne.n	8000b1a <__udivmoddi4+0xa6>
 8000a82:	428a      	cmp	r2, r1
 8000a84:	4615      	mov	r5, r2
 8000a86:	d967      	bls.n	8000b58 <__udivmoddi4+0xe4>
 8000a88:	fab2 f282 	clz	r2, r2
 8000a8c:	b14a      	cbz	r2, 8000aa2 <__udivmoddi4+0x2e>
 8000a8e:	f1c2 0720 	rsb	r7, r2, #32
 8000a92:	fa01 f302 	lsl.w	r3, r1, r2
 8000a96:	fa20 f707 	lsr.w	r7, r0, r7
 8000a9a:	4095      	lsls	r5, r2
 8000a9c:	ea47 0803 	orr.w	r8, r7, r3
 8000aa0:	4094      	lsls	r4, r2
 8000aa2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aa6:	0c23      	lsrs	r3, r4, #16
 8000aa8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000aac:	fa1f fc85 	uxth.w	ip, r5
 8000ab0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ab4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ab8:	fb07 f10c 	mul.w	r1, r7, ip
 8000abc:	4299      	cmp	r1, r3
 8000abe:	d909      	bls.n	8000ad4 <__udivmoddi4+0x60>
 8000ac0:	18eb      	adds	r3, r5, r3
 8000ac2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ac6:	f080 811b 	bcs.w	8000d00 <__udivmoddi4+0x28c>
 8000aca:	4299      	cmp	r1, r3
 8000acc:	f240 8118 	bls.w	8000d00 <__udivmoddi4+0x28c>
 8000ad0:	3f02      	subs	r7, #2
 8000ad2:	442b      	add	r3, r5
 8000ad4:	1a5b      	subs	r3, r3, r1
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000adc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ae0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ae8:	45a4      	cmp	ip, r4
 8000aea:	d909      	bls.n	8000b00 <__udivmoddi4+0x8c>
 8000aec:	192c      	adds	r4, r5, r4
 8000aee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af2:	f080 8107 	bcs.w	8000d04 <__udivmoddi4+0x290>
 8000af6:	45a4      	cmp	ip, r4
 8000af8:	f240 8104 	bls.w	8000d04 <__udivmoddi4+0x290>
 8000afc:	3802      	subs	r0, #2
 8000afe:	442c      	add	r4, r5
 8000b00:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b04:	eba4 040c 	sub.w	r4, r4, ip
 8000b08:	2700      	movs	r7, #0
 8000b0a:	b11e      	cbz	r6, 8000b14 <__udivmoddi4+0xa0>
 8000b0c:	40d4      	lsrs	r4, r2
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e9c6 4300 	strd	r4, r3, [r6]
 8000b14:	4639      	mov	r1, r7
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d909      	bls.n	8000b32 <__udivmoddi4+0xbe>
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	f000 80eb 	beq.w	8000cfa <__udivmoddi4+0x286>
 8000b24:	2700      	movs	r7, #0
 8000b26:	e9c6 0100 	strd	r0, r1, [r6]
 8000b2a:	4638      	mov	r0, r7
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	fab3 f783 	clz	r7, r3
 8000b36:	2f00      	cmp	r7, #0
 8000b38:	d147      	bne.n	8000bca <__udivmoddi4+0x156>
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d302      	bcc.n	8000b44 <__udivmoddi4+0xd0>
 8000b3e:	4282      	cmp	r2, r0
 8000b40:	f200 80fa 	bhi.w	8000d38 <__udivmoddi4+0x2c4>
 8000b44:	1a84      	subs	r4, r0, r2
 8000b46:	eb61 0303 	sbc.w	r3, r1, r3
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	4698      	mov	r8, r3
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d0e0      	beq.n	8000b14 <__udivmoddi4+0xa0>
 8000b52:	e9c6 4800 	strd	r4, r8, [r6]
 8000b56:	e7dd      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000b58:	b902      	cbnz	r2, 8000b5c <__udivmoddi4+0xe8>
 8000b5a:	deff      	udf	#255	; 0xff
 8000b5c:	fab2 f282 	clz	r2, r2
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	f040 808f 	bne.w	8000c84 <__udivmoddi4+0x210>
 8000b66:	1b49      	subs	r1, r1, r5
 8000b68:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6c:	fa1f f885 	uxth.w	r8, r5
 8000b70:	2701      	movs	r7, #1
 8000b72:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b76:	0c23      	lsrs	r3, r4, #16
 8000b78:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b80:	fb08 f10c 	mul.w	r1, r8, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x124>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x122>
 8000b90:	4299      	cmp	r1, r3
 8000b92:	f200 80cd 	bhi.w	8000d30 <__udivmoddi4+0x2bc>
 8000b96:	4684      	mov	ip, r0
 8000b98:	1a59      	subs	r1, r3, r1
 8000b9a:	b2a3      	uxth	r3, r4
 8000b9c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ba0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ba4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ba8:	fb08 f800 	mul.w	r8, r8, r0
 8000bac:	45a0      	cmp	r8, r4
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x14c>
 8000bb0:	192c      	adds	r4, r5, r4
 8000bb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x14a>
 8000bb8:	45a0      	cmp	r8, r4
 8000bba:	f200 80b6 	bhi.w	8000d2a <__udivmoddi4+0x2b6>
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	eba4 0408 	sub.w	r4, r4, r8
 8000bc4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc8:	e79f      	b.n	8000b0a <__udivmoddi4+0x96>
 8000bca:	f1c7 0c20 	rsb	ip, r7, #32
 8000bce:	40bb      	lsls	r3, r7
 8000bd0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bd4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bd8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bdc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000be0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000be4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000be8:	4325      	orrs	r5, r4
 8000bea:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bee:	0c2c      	lsrs	r4, r5, #16
 8000bf0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bf4:	fa1f fa8e 	uxth.w	sl, lr
 8000bf8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bfc:	fb09 f40a 	mul.w	r4, r9, sl
 8000c00:	429c      	cmp	r4, r3
 8000c02:	fa02 f207 	lsl.w	r2, r2, r7
 8000c06:	fa00 f107 	lsl.w	r1, r0, r7
 8000c0a:	d90b      	bls.n	8000c24 <__udivmoddi4+0x1b0>
 8000c0c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c10:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c14:	f080 8087 	bcs.w	8000d26 <__udivmoddi4+0x2b2>
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	f240 8084 	bls.w	8000d26 <__udivmoddi4+0x2b2>
 8000c1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c22:	4473      	add	r3, lr
 8000c24:	1b1b      	subs	r3, r3, r4
 8000c26:	b2ad      	uxth	r5, r5
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c34:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c38:	45a2      	cmp	sl, r4
 8000c3a:	d908      	bls.n	8000c4e <__udivmoddi4+0x1da>
 8000c3c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	d26b      	bcs.n	8000d1e <__udivmoddi4+0x2aa>
 8000c46:	45a2      	cmp	sl, r4
 8000c48:	d969      	bls.n	8000d1e <__udivmoddi4+0x2aa>
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	4474      	add	r4, lr
 8000c4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c52:	fba0 8902 	umull	r8, r9, r0, r2
 8000c56:	eba4 040a 	sub.w	r4, r4, sl
 8000c5a:	454c      	cmp	r4, r9
 8000c5c:	46c2      	mov	sl, r8
 8000c5e:	464b      	mov	r3, r9
 8000c60:	d354      	bcc.n	8000d0c <__udivmoddi4+0x298>
 8000c62:	d051      	beq.n	8000d08 <__udivmoddi4+0x294>
 8000c64:	2e00      	cmp	r6, #0
 8000c66:	d069      	beq.n	8000d3c <__udivmoddi4+0x2c8>
 8000c68:	ebb1 050a 	subs.w	r5, r1, sl
 8000c6c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c70:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c74:	40fd      	lsrs	r5, r7
 8000c76:	40fc      	lsrs	r4, r7
 8000c78:	ea4c 0505 	orr.w	r5, ip, r5
 8000c7c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c80:	2700      	movs	r7, #0
 8000c82:	e747      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000c84:	f1c2 0320 	rsb	r3, r2, #32
 8000c88:	fa20 f703 	lsr.w	r7, r0, r3
 8000c8c:	4095      	lsls	r5, r2
 8000c8e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c92:	fa21 f303 	lsr.w	r3, r1, r3
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	4338      	orrs	r0, r7
 8000c9c:	0c01      	lsrs	r1, r0, #16
 8000c9e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ca2:	fa1f f885 	uxth.w	r8, r5
 8000ca6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000caa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cae:	fb07 f308 	mul.w	r3, r7, r8
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cb8:	d907      	bls.n	8000cca <__udivmoddi4+0x256>
 8000cba:	1869      	adds	r1, r5, r1
 8000cbc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cc0:	d22f      	bcs.n	8000d22 <__udivmoddi4+0x2ae>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d92d      	bls.n	8000d22 <__udivmoddi4+0x2ae>
 8000cc6:	3f02      	subs	r7, #2
 8000cc8:	4429      	add	r1, r5
 8000cca:	1acb      	subs	r3, r1, r3
 8000ccc:	b281      	uxth	r1, r0
 8000cce:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cda:	fb00 f308 	mul.w	r3, r0, r8
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x27e>
 8000ce2:	1869      	adds	r1, r5, r1
 8000ce4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ce8:	d217      	bcs.n	8000d1a <__udivmoddi4+0x2a6>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d915      	bls.n	8000d1a <__udivmoddi4+0x2a6>
 8000cee:	3802      	subs	r0, #2
 8000cf0:	4429      	add	r1, r5
 8000cf2:	1ac9      	subs	r1, r1, r3
 8000cf4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cf8:	e73b      	b.n	8000b72 <__udivmoddi4+0xfe>
 8000cfa:	4637      	mov	r7, r6
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	e709      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000d00:	4607      	mov	r7, r0
 8000d02:	e6e7      	b.n	8000ad4 <__udivmoddi4+0x60>
 8000d04:	4618      	mov	r0, r3
 8000d06:	e6fb      	b.n	8000b00 <__udivmoddi4+0x8c>
 8000d08:	4541      	cmp	r1, r8
 8000d0a:	d2ab      	bcs.n	8000c64 <__udivmoddi4+0x1f0>
 8000d0c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d10:	eb69 020e 	sbc.w	r2, r9, lr
 8000d14:	3801      	subs	r0, #1
 8000d16:	4613      	mov	r3, r2
 8000d18:	e7a4      	b.n	8000c64 <__udivmoddi4+0x1f0>
 8000d1a:	4660      	mov	r0, ip
 8000d1c:	e7e9      	b.n	8000cf2 <__udivmoddi4+0x27e>
 8000d1e:	4618      	mov	r0, r3
 8000d20:	e795      	b.n	8000c4e <__udivmoddi4+0x1da>
 8000d22:	4667      	mov	r7, ip
 8000d24:	e7d1      	b.n	8000cca <__udivmoddi4+0x256>
 8000d26:	4681      	mov	r9, r0
 8000d28:	e77c      	b.n	8000c24 <__udivmoddi4+0x1b0>
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	442c      	add	r4, r5
 8000d2e:	e747      	b.n	8000bc0 <__udivmoddi4+0x14c>
 8000d30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d34:	442b      	add	r3, r5
 8000d36:	e72f      	b.n	8000b98 <__udivmoddi4+0x124>
 8000d38:	4638      	mov	r0, r7
 8000d3a:	e708      	b.n	8000b4e <__udivmoddi4+0xda>
 8000d3c:	4637      	mov	r7, r6
 8000d3e:	e6e9      	b.n	8000b14 <__udivmoddi4+0xa0>

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <Init_Graphics_System>:

void Init_Graphics_System(uint32 H, uint32 W, uint32 LCD_RAM_START_ADDRESS, uint8 Layers, uint8 ColorType) //Инициализация драйвера дисплея, графического ускорителя и т.п.
{
	//LTDC_LayerCfgTypeDef pLayerCfg = {0};
	//LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
	Height = H;
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <Init_Graphics_System+0x10>)
 8000d46:	6018      	str	r0, [r3, #0]
    Width = W;
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <Init_Graphics_System+0x14>)
 8000d4a:	6019      	str	r1, [r3, #0]

    LCD_FRAME_BUFFER0 = LCD_RAM_START_ADDRESS;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <Init_Graphics_System+0x18>)
 8000d4e:	601a      	str	r2, [r3, #0]
    if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
    {

    } */

}
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000028 	.word	0x20000028
 8000d58:	20000030 	.word	0x20000030
 8000d5c:	2000002c 	.word	0x2000002c

08000d60 <Fill_all>:

void Fill_all(uint32 Color) //Заливка всего дисплея цветом
{
	for(int i=0; i<480*272; i++)
 8000d60:	2300      	movs	r3, #0
 8000d62:	e005      	b.n	8000d70 <Fill_all+0x10>
	{
	  *(__IO uint16*) (LCD_FRAME_BUFFER0 + (i*2)) = Color;
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <Fill_all+0x18>)
 8000d66:	6812      	ldr	r2, [r2, #0]
 8000d68:	b281      	uxth	r1, r0
 8000d6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<480*272; i++)
 8000d6e:	3301      	adds	r3, #1
 8000d70:	f5b3 3fff 	cmp.w	r3, #130560	; 0x1fe00
 8000d74:	dbf6      	blt.n	8000d64 <Fill_all+0x4>
	}
}
 8000d76:	4770      	bx	lr
 8000d78:	2000002c 	.word	0x2000002c

08000d7c <Fill_rectangle>:

void Fill_rectangle(uint32 Color, int32 StartX, int32 StopX, int32 StartY, int32 StopY) //Заливка прямоугольной формы
{
 8000d7c:	b4f0      	push	{r4, r5, r6, r7}
 8000d7e:	f8dd c010 	ldr.w	ip, [sp, #16]
	StartX--;
 8000d82:	3901      	subs	r1, #1
	StartY--;
 8000d84:	3b01      	subs	r3, #1
    	   //HAL_Delay(5);
    	   HAL_DMA2D_PollForTransfer(&hdma2d, TransferDelay);
       }
    } */

	for(uint32 y = StartY; y < StopY; y++)
 8000d86:	e00c      	b.n	8000da2 <Fill_rectangle+0x26>
	{
		for(uint32 x = StartX; x < StopX; x++)
		{
			*(__IO uint16*) (LCD_FRAME_BUFFER0 + (2*(y*Width + x))) = Color;
 8000d88:	4d09      	ldr	r5, [pc, #36]	; (8000db0 <Fill_rectangle+0x34>)
 8000d8a:	682d      	ldr	r5, [r5, #0]
 8000d8c:	fb05 4503 	mla	r5, r5, r3, r4
 8000d90:	4e08      	ldr	r6, [pc, #32]	; (8000db4 <Fill_rectangle+0x38>)
 8000d92:	6836      	ldr	r6, [r6, #0]
 8000d94:	b287      	uxth	r7, r0
 8000d96:	f826 7015 	strh.w	r7, [r6, r5, lsl #1]
		for(uint32 x = StartX; x < StopX; x++)
 8000d9a:	3401      	adds	r4, #1
 8000d9c:	42a2      	cmp	r2, r4
 8000d9e:	d8f3      	bhi.n	8000d88 <Fill_rectangle+0xc>
	for(uint32 y = StartY; y < StopY; y++)
 8000da0:	3301      	adds	r3, #1
 8000da2:	459c      	cmp	ip, r3
 8000da4:	d901      	bls.n	8000daa <Fill_rectangle+0x2e>
		for(uint32 x = StartX; x < StopX; x++)
 8000da6:	460c      	mov	r4, r1
 8000da8:	e7f8      	b.n	8000d9c <Fill_rectangle+0x20>
		}
	}
}
 8000daa:	bcf0      	pop	{r4, r5, r6, r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000030 	.word	0x20000030
 8000db4:	2000002c 	.word	0x2000002c

08000db8 <MemPoint>:

void MemPoint(int32 x, int32 y, int32 Color) //Отрисовка одного пикселя
{
	*(__IO uint16*) (LCD_FRAME_BUFFER0 + (2*(y*Width + x))) = Color;
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <MemPoint+0x14>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	fb03 0101 	mla	r1, r3, r1, r0
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <MemPoint+0x18>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	b292      	uxth	r2, r2
 8000dc6:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 8000dca:	4770      	bx	lr
 8000dcc:	20000030 	.word	0x20000030
 8000dd0:	2000002c 	.word	0x2000002c

08000dd4 <Get565Color>:
{
	uint8 FontH = calibri[1];
	return FontH;
}
uint16 Get565Color(uint32 Color) //Возвращает значение цвета в формате пикселя 565(5 бит - красный цвет, 6 - зеленый, 5 - синий)
{
 8000dd4:	b410      	push	{r4}
   uint8 R, G, B;
   R = (Color >> 16) & 0xff;
   G = (Color >> 8) & 0xff;
   B = Color & 0xff;

   R = 31 * R / 255;
 8000dd6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8000dda:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 8000dde:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <Get565Color+0x58>)
 8000de0:	fb82 4103 	smull	r4, r1, r2, r3
 8000de4:	4419      	add	r1, r3
 8000de6:	17db      	asrs	r3, r3, #31
 8000de8:	ebc3 11e1 	rsb	r1, r3, r1, asr #7
   G = 63 * G / 255;
 8000dec:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000df0:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8000df4:	fb82 c403 	smull	ip, r4, r2, r3
 8000df8:	441c      	add	r4, r3
 8000dfa:	17db      	asrs	r3, r3, #31
 8000dfc:	ebc3 13e4 	rsb	r3, r3, r4, asr #7
   B = 31 * B / 255;
 8000e00:	b2c0      	uxtb	r0, r0
 8000e02:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8000e06:	fb82 4200 	smull	r4, r2, r2, r0
 8000e0a:	4402      	add	r2, r0
 8000e0c:	17c0      	asrs	r0, r0, #31
 8000e0e:	ebc0 10e2 	rsb	r0, r0, r2, asr #7
 8000e12:	b2c2      	uxtb	r2, r0

   RezColor |= B;
   RezColor |= (G << 5);
 8000e14:	0158      	lsls	r0, r3, #5
 8000e16:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
 8000e1a:	4310      	orrs	r0, r2
   RezColor |= (R << 11);
 8000e1c:	02c9      	lsls	r1, r1, #11
 8000e1e:	f401 21ff 	and.w	r1, r1, #522240	; 0x7f800
 8000e22:	4308      	orrs	r0, r1

   return RezColor;
}
 8000e24:	b280      	uxth	r0, r0
 8000e26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	80808081 	.word	0x80808081

08000e30 <Graphics_Init>:
	}
	return Error;
}

void Graphics_Init(DisplayConfig *dcf) //Инициализация самой бибиллиотеки а также инициализация графических устройств(дисплей, графические ускорители, тач-панели)
{
 8000e30:	b510      	push	{r4, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	4602      	mov	r2, r0
	DispHeight = dcf->Display_Height;
 8000e36:	6840      	ldr	r0, [r0, #4]
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <Graphics_Init+0x28>)
 8000e3a:	6018      	str	r0, [r3, #0]
	DispWidth = dcf->Display_Width;
 8000e3c:	6891      	ldr	r1, [r2, #8]
 8000e3e:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <Graphics_Init+0x2c>)
 8000e40:	6019      	str	r1, [r3, #0]
	ColorType = dcf->Color_Type;
 8000e42:	7b14      	ldrb	r4, [r2, #12]
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <Graphics_Init+0x30>)
 8000e46:	701c      	strb	r4, [r3, #0]
	Init_Graphics_System(dcf->Display_Height, dcf->Display_Width, dcf->Start_RAM_Address, dcf->Layers, dcf->Color_Type);
 8000e48:	7b53      	ldrb	r3, [r2, #13]
 8000e4a:	6812      	ldr	r2, [r2, #0]
 8000e4c:	9400      	str	r4, [sp, #0]
 8000e4e:	f7ff ff79 	bl	8000d44 <Init_Graphics_System>
}
 8000e52:	b002      	add	sp, #8
 8000e54:	bd10      	pop	{r4, pc}
 8000e56:	bf00      	nop
 8000e58:	20000038 	.word	0x20000038
 8000e5c:	2000003c 	.word	0x2000003c
 8000e60:	20000034 	.word	0x20000034

08000e64 <Pixel>:

void Pixel(uint16 x, uint16 y, uint32 Color, uint16 Tolshina)
{
 8000e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e68:	4691      	mov	r9, r2
  uint16 i, j, tolsx, tolsy;
  x--; y--;
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	b287      	uxth	r7, r0
 8000e6e:	3901      	subs	r1, #1
 8000e70:	b28d      	uxth	r5, r1
  tolsy = y+Tolshina;
 8000e72:	eb05 0803 	add.w	r8, r5, r3
 8000e76:	fa1f f888 	uxth.w	r8, r8
  tolsx = x+Tolshina;
 8000e7a:	443b      	add	r3, r7
 8000e7c:	b29e      	uxth	r6, r3
  for(i = y; i<tolsy; i++)
 8000e7e:	e013      	b.n	8000ea8 <Pixel+0x44>
  {
	  for(j = x; j<tolsx; j++)
 8000e80:	3401      	adds	r4, #1
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	42b4      	cmp	r4, r6
 8000e86:	d20d      	bcs.n	8000ea4 <Pixel+0x40>
	  {
		  if(i < DispHeight && j < DispWidth)
 8000e88:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <Pixel+0x50>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	429d      	cmp	r5, r3
 8000e8e:	d2f7      	bcs.n	8000e80 <Pixel+0x1c>
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <Pixel+0x54>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d2f3      	bcs.n	8000e80 <Pixel+0x1c>
		  {
			  MemPoint(j,i,Color);
 8000e98:	464a      	mov	r2, r9
 8000e9a:	4629      	mov	r1, r5
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	f7ff ff8b 	bl	8000db8 <MemPoint>
 8000ea2:	e7ed      	b.n	8000e80 <Pixel+0x1c>
  for(i = y; i<tolsy; i++)
 8000ea4:	3501      	adds	r5, #1
 8000ea6:	b2ad      	uxth	r5, r5
 8000ea8:	4545      	cmp	r5, r8
 8000eaa:	d201      	bcs.n	8000eb0 <Pixel+0x4c>
	  for(j = x; j<tolsx; j++)
 8000eac:	463c      	mov	r4, r7
 8000eae:	e7e9      	b.n	8000e84 <Pixel+0x20>
	      }
	  }
  }
}
 8000eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000eb4:	20000038 	.word	0x20000038
 8000eb8:	2000003c 	.word	0x2000003c

08000ebc <Fill_Display>:
void Fill_Display(uint32 Color) //Заливает весь дисплей определенным цветом
{
 8000ebc:	b510      	push	{r4, lr}
 8000ebe:	4604      	mov	r4, r0

	if(ColorType == Color565)
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <Fill_Display+0x38>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	b143      	cbz	r3, 8000ed8 <Fill_Display+0x1c>
	{ Fill_all(Get565Color(Color)); }

	if(ColorType == Color888)
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <Fill_Display+0x38>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d009      	beq.n	8000ee2 <Fill_Display+0x26>
	{ Fill_all(Color | 0xFF << 24); }

	if(ColorType == Color_A888)
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <Fill_Display+0x38>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d00a      	beq.n	8000eec <Fill_Display+0x30>
	{ Fill_all(Color); }
}
 8000ed6:	bd10      	pop	{r4, pc}
	{ Fill_all(Get565Color(Color)); }
 8000ed8:	f7ff ff7c 	bl	8000dd4 <Get565Color>
 8000edc:	f7ff ff40 	bl	8000d60 <Fill_all>
 8000ee0:	e7f1      	b.n	8000ec6 <Fill_Display+0xa>
	{ Fill_all(Color | 0xFF << 24); }
 8000ee2:	f044 407f 	orr.w	r0, r4, #4278190080	; 0xff000000
 8000ee6:	f7ff ff3b 	bl	8000d60 <Fill_all>
 8000eea:	e7f0      	b.n	8000ece <Fill_Display+0x12>
	{ Fill_all(Color); }
 8000eec:	4620      	mov	r0, r4
 8000eee:	f7ff ff37 	bl	8000d60 <Fill_all>
}
 8000ef2:	e7f0      	b.n	8000ed6 <Fill_Display+0x1a>
 8000ef4:	20000034 	.word	0x20000034

08000ef8 <Fill_Rectangle>:
void Fill_Rectangle(uint32 Color, int32 StartX, int32 StopX, int32 StartY, int32 StopY) //заливает цветом прямоугольную область
{
 8000ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	4680      	mov	r8, r0
 8000f00:	4615      	mov	r5, r2
 8000f02:	461c      	mov	r4, r3
 8000f04:	9f08      	ldr	r7, [sp, #32]
	if(((StartX > 0) && (StartX <= DispWidth)) || ((StopX > 0) && (StopX <= DispWidth)))
 8000f06:	1e0e      	subs	r6, r1, #0
 8000f08:	dd03      	ble.n	8000f12 <Fill_Rectangle+0x1a>
 8000f0a:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <Fill_Rectangle+0xac>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	d905      	bls.n	8000f1e <Fill_Rectangle+0x26>
 8000f12:	2d00      	cmp	r5, #0
 8000f14:	dd28      	ble.n	8000f68 <Fill_Rectangle+0x70>
 8000f16:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <Fill_Rectangle+0xac>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	429d      	cmp	r5, r3
 8000f1c:	d824      	bhi.n	8000f68 <Fill_Rectangle+0x70>
	{
		if(((StartY > 0) && (StartY <= DispHeight)) || ((StopY > 0) && (StopY <= DispHeight)))
 8000f1e:	2c00      	cmp	r4, #0
 8000f20:	dd03      	ble.n	8000f2a <Fill_Rectangle+0x32>
 8000f22:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <Fill_Rectangle+0xb0>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	429c      	cmp	r4, r3
 8000f28:	d905      	bls.n	8000f36 <Fill_Rectangle+0x3e>
 8000f2a:	2f00      	cmp	r7, #0
 8000f2c:	dd1c      	ble.n	8000f68 <Fill_Rectangle+0x70>
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <Fill_Rectangle+0xb0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	429f      	cmp	r7, r3
 8000f34:	d818      	bhi.n	8000f68 <Fill_Rectangle+0x70>
		{
			if(StartX <= 0)
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	dd19      	ble.n	8000f6e <Fill_Rectangle+0x76>
			{ StartX = 1;}
			if(StopX > DispWidth)
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <Fill_Rectangle+0xac>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	429d      	cmp	r5, r3
 8000f40:	d900      	bls.n	8000f44 <Fill_Rectangle+0x4c>
			{ StartX = DispWidth;}
 8000f42:	461e      	mov	r6, r3

			if(StartY <= 0)
 8000f44:	2c00      	cmp	r4, #0
 8000f46:	dd14      	ble.n	8000f72 <Fill_Rectangle+0x7a>
			{ StartY = 1;}
			if(StopY > DispHeight)
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <Fill_Rectangle+0xb0>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	429f      	cmp	r7, r3
 8000f4e:	d900      	bls.n	8000f52 <Fill_Rectangle+0x5a>
			{ StartY = DispHeight;}
 8000f50:	461c      	mov	r4, r3

			if(ColorType == Color565)
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <Fill_Rectangle+0xb4>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b173      	cbz	r3, 8000f76 <Fill_Rectangle+0x7e>
			{ Fill_rectangle(Get565Color(Color), StartX, StopX, StartY, StopY); }

			if(ColorType == Color888)
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <Fill_Rectangle+0xb4>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d014      	beq.n	8000f8a <Fill_Rectangle+0x92>
			{ Fill_rectangle(Color | 0xFF << 24, StartX, StopX, StartY, StopY); }

			if(ColorType == Color_A888)
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <Fill_Rectangle+0xb4>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d019      	beq.n	8000f9c <Fill_Rectangle+0xa4>
			{ Fill_all(Color); }
		}
	}
}
 8000f68:	b002      	add	sp, #8
 8000f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			{ StartX = 1;}
 8000f6e:	2601      	movs	r6, #1
 8000f70:	e7e3      	b.n	8000f3a <Fill_Rectangle+0x42>
			{ StartY = 1;}
 8000f72:	2401      	movs	r4, #1
 8000f74:	e7e8      	b.n	8000f48 <Fill_Rectangle+0x50>
			{ Fill_rectangle(Get565Color(Color), StartX, StopX, StartY, StopY); }
 8000f76:	4640      	mov	r0, r8
 8000f78:	f7ff ff2c 	bl	8000dd4 <Get565Color>
 8000f7c:	9700      	str	r7, [sp, #0]
 8000f7e:	4623      	mov	r3, r4
 8000f80:	462a      	mov	r2, r5
 8000f82:	4631      	mov	r1, r6
 8000f84:	f7ff fefa 	bl	8000d7c <Fill_rectangle>
 8000f88:	e7e6      	b.n	8000f58 <Fill_Rectangle+0x60>
			{ Fill_rectangle(Color | 0xFF << 24, StartX, StopX, StartY, StopY); }
 8000f8a:	9700      	str	r7, [sp, #0]
 8000f8c:	4623      	mov	r3, r4
 8000f8e:	462a      	mov	r2, r5
 8000f90:	4631      	mov	r1, r6
 8000f92:	f048 407f 	orr.w	r0, r8, #4278190080	; 0xff000000
 8000f96:	f7ff fef1 	bl	8000d7c <Fill_rectangle>
 8000f9a:	e7e1      	b.n	8000f60 <Fill_Rectangle+0x68>
			{ Fill_all(Color); }
 8000f9c:	4640      	mov	r0, r8
 8000f9e:	f7ff fedf 	bl	8000d60 <Fill_all>
}
 8000fa2:	e7e1      	b.n	8000f68 <Fill_Rectangle+0x70>
 8000fa4:	2000003c 	.word	0x2000003c
 8000fa8:	20000038 	.word	0x20000038
 8000fac:	20000034 	.word	0x20000034

08000fb0 <HLine>:
void HLine(uint32 Color, int16 x1, int16 x2, int16 y1, uint8 Tolshina)//
{
 8000fb0:	b510      	push	{r4, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	f89d 4010 	ldrb.w	r4, [sp, #16]
    if(Tolshina > 0)
 8000fb8:	b90c      	cbnz	r4, 8000fbe <HLine+0xe>
    {
    	Tolshina--;
    	Fill_Rectangle(Color, x1, x2, y1, y1+Tolshina);
    }
}
 8000fba:	b002      	add	sp, #8
 8000fbc:	bd10      	pop	{r4, pc}
    	Tolshina--;
 8000fbe:	3c01      	subs	r4, #1
    	Fill_Rectangle(Color, x1, x2, y1, y1+Tolshina);
 8000fc0:	fa53 f484 	uxtab	r4, r3, r4
 8000fc4:	9400      	str	r4, [sp, #0]
 8000fc6:	f7ff ff97 	bl	8000ef8 <Fill_Rectangle>
}
 8000fca:	e7f6      	b.n	8000fba <HLine+0xa>

08000fcc <VLine>:
void VLine(uint32 Color, int16 x1, int16 y1, int16 y2, uint8 Tolshina)
{
 8000fcc:	b530      	push	{r4, r5, lr}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	f89d 4018 	ldrb.w	r4, [sp, #24]
	if(Tolshina > 0)
 8000fd4:	b90c      	cbnz	r4, 8000fda <VLine+0xe>
	{
		Tolshina--;
		Fill_Rectangle(Color, x1, x1+Tolshina, y1, y2);
	}
}
 8000fd6:	b003      	add	sp, #12
 8000fd8:	bd30      	pop	{r4, r5, pc}
 8000fda:	461d      	mov	r5, r3
 8000fdc:	4613      	mov	r3, r2
		Tolshina--;
 8000fde:	3c01      	subs	r4, #1
		Fill_Rectangle(Color, x1, x1+Tolshina, y1, y2);
 8000fe0:	9500      	str	r5, [sp, #0]
 8000fe2:	fa51 f284 	uxtab	r2, r1, r4
 8000fe6:	f7ff ff87 	bl	8000ef8 <Fill_Rectangle>
}
 8000fea:	e7f4      	b.n	8000fd6 <VLine+0xa>

08000fec <FramePanel>:
void FramePanel(uint32 BorderColor, uint32 FloodColor, int16 x1, int16 x2, int16 y1, int16 y2, uint8 Tolshina)
{
 8000fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	4607      	mov	r7, r0
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	4692      	mov	sl, r2
 8000ff8:	461c      	mov	r4, r3
 8000ffa:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8000ffe:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8001002:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
	Tolshina --;
 8001006:	1e75      	subs	r5, r6, #1
 8001008:	b2ed      	uxtb	r5, r5
	Fill_Rectangle(FloodColor,x1,x2,y1,y2);
 800100a:	f8cd 9000 	str.w	r9, [sp]
 800100e:	4643      	mov	r3, r8
 8001010:	4622      	mov	r2, r4
 8001012:	4651      	mov	r1, sl
 8001014:	f7ff ff70 	bl	8000ef8 <Fill_Rectangle>
    HLine(BorderColor,x1,x2,y1,Tolshina + 1);
 8001018:	9600      	str	r6, [sp, #0]
 800101a:	4643      	mov	r3, r8
 800101c:	4622      	mov	r2, r4
 800101e:	4651      	mov	r1, sl
 8001020:	4638      	mov	r0, r7
 8001022:	f7ff ffc5 	bl	8000fb0 <HLine>
    HLine(BorderColor,x1,x2,y2 - Tolshina,Tolshina +1);
 8001026:	b2ad      	uxth	r5, r5
 8001028:	eba9 0305 	sub.w	r3, r9, r5
 800102c:	9600      	str	r6, [sp, #0]
 800102e:	b21b      	sxth	r3, r3
 8001030:	4622      	mov	r2, r4
 8001032:	4651      	mov	r1, sl
 8001034:	4638      	mov	r0, r7
 8001036:	f7ff ffbb 	bl	8000fb0 <HLine>
    VLine(BorderColor,x1,y1,y2,Tolshina + 1);
 800103a:	9600      	str	r6, [sp, #0]
 800103c:	464b      	mov	r3, r9
 800103e:	4642      	mov	r2, r8
 8001040:	4651      	mov	r1, sl
 8001042:	4638      	mov	r0, r7
 8001044:	f7ff ffc2 	bl	8000fcc <VLine>
    VLine(BorderColor,x2 - Tolshina,y1,y2,Tolshina + 1);
 8001048:	1b61      	subs	r1, r4, r5
 800104a:	9600      	str	r6, [sp, #0]
 800104c:	464b      	mov	r3, r9
 800104e:	4642      	mov	r2, r8
 8001050:	b209      	sxth	r1, r1
 8001052:	4638      	mov	r0, r7
 8001054:	f7ff ffba 	bl	8000fcc <VLine>
}
 8001058:	b002      	add	sp, #8
 800105a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08001060 <Line>:
void Line(int16 x1, int16 y1, int16 x2, int16 y2, uint32 Color, uint16 Tolshina)//++
{
 8001060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001064:	b083      	sub	sp, #12
 8001066:	4605      	mov	r5, r0
 8001068:	460e      	mov	r6, r1
 800106a:	4617      	mov	r7, r2
 800106c:	4698      	mov	r8, r3
 800106e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8001072:	9001      	str	r0, [sp, #4]
   uint16 y = 0, k = 0;
   if(x1 <= x2)
 8001074:	4295      	cmp	r5, r2
 8001076:	f300 8095 	bgt.w	80011a4 <Line+0x144>
   {
	   if(y1 <= y2)
 800107a:	4299      	cmp	r1, r3
 800107c:	dc48      	bgt.n	8001110 <Line+0xb0>
	   {
		   if(x2 - x1 != 0)
 800107e:	4295      	cmp	r5, r2
 8001080:	d016      	beq.n	80010b0 <Line+0x50>
		   {
		       k = (y2 - y1)/(x2 - x1);
 8001082:	1a5b      	subs	r3, r3, r1
 8001084:	1b51      	subs	r1, r2, r5
 8001086:	461a      	mov	r2, r3
 8001088:	fb93 f3f1 	sdiv	r3, r3, r1
 800108c:	fa1f fb83 	uxth.w	fp, r3
		       if((y2 - y1)%(x2 - x1) != 0)
 8001090:	fb01 2313 	mls	r3, r1, r3, r2
 8001094:	b10b      	cbz	r3, 800109a <Line+0x3a>
		       {
		    	   if(Tolshina == 1)
 8001096:	2801      	cmp	r0, #1
 8001098:	d005      	beq.n	80010a6 <Line+0x46>
		   {
			   k = 1;
			   x2++;
		   }

		   if(k == 0)
 800109a:	f1bb 0f00 	cmp.w	fp, #0
 800109e:	d10b      	bne.n	80010b8 <Line+0x58>
		   { k = 1; }
 80010a0:	f04f 0b01 	mov.w	fp, #1
 80010a4:	e008      	b.n	80010b8 <Line+0x58>
		    	       k++;
 80010a6:	f10b 0b01 	add.w	fp, fp, #1
 80010aa:	fa1f fb8b 	uxth.w	fp, fp
 80010ae:	e7f4      	b.n	800109a <Line+0x3a>
			   x2++;
 80010b0:	3701      	adds	r7, #1
 80010b2:	b23f      	sxth	r7, r7
			   k = 1;
 80010b4:	f04f 0b01 	mov.w	fp, #1

		   for(uint16 xp = x1; xp <= x2; xp++)
 80010b8:	fa1f fa85 	uxth.w	sl, r5
 80010bc:	e003      	b.n	80010c6 <Line+0x66>
 80010be:	f10a 0a01 	add.w	sl, sl, #1
 80010c2:	fa1f fa8a 	uxth.w	sl, sl
 80010c6:	45ba      	cmp	sl, r7
 80010c8:	f300 80f2 	bgt.w	80012b0 <Line+0x250>
		   {
			   y = (xp - x1) * (y2 - y1) / (x2 - x1) + y1;
 80010cc:	ebaa 0405 	sub.w	r4, sl, r5
 80010d0:	eba8 0306 	sub.w	r3, r8, r6
 80010d4:	fb03 f404 	mul.w	r4, r3, r4
 80010d8:	1b7b      	subs	r3, r7, r5
 80010da:	fb94 f4f3 	sdiv	r4, r4, r3
 80010de:	b2b3      	uxth	r3, r6
 80010e0:	fa13 f484 	uxtah	r4, r3, r4
 80010e4:	b2a4      	uxth	r4, r4
			   for(uint16 yp = 0; yp < k; yp++)
 80010e6:	f04f 0900 	mov.w	r9, #0
 80010ea:	45cb      	cmp	fp, r9
 80010ec:	d9e7      	bls.n	80010be <Line+0x5e>
			   {
				   Pixel(xp, y, Color, Tolshina);
 80010ee:	9b01      	ldr	r3, [sp, #4]
 80010f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80010f2:	4621      	mov	r1, r4
 80010f4:	4650      	mov	r0, sl
 80010f6:	f7ff feb5 	bl	8000e64 <Pixel>
				   y++;
 80010fa:	3401      	adds	r4, #1
 80010fc:	b2a4      	uxth	r4, r4
				   if(y > DispHeight)
 80010fe:	4b6e      	ldr	r3, [pc, #440]	; (80012b8 <Line+0x258>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	429c      	cmp	r4, r3
 8001104:	d8db      	bhi.n	80010be <Line+0x5e>
			   for(uint16 yp = 0; yp < k; yp++)
 8001106:	f109 0901 	add.w	r9, r9, #1
 800110a:	fa1f f989 	uxth.w	r9, r9
 800110e:	e7ec      	b.n	80010ea <Line+0x8a>
			   }
		   }
	   }
	   else
	   {
		   if(x2 - x1 != 0)
 8001110:	4295      	cmp	r5, r2
 8001112:	d017      	beq.n	8001144 <Line+0xe4>
		   {
		       k = (y1 - y2)/(x2 - x1);
 8001114:	1acb      	subs	r3, r1, r3
 8001116:	1b51      	subs	r1, r2, r5
 8001118:	461a      	mov	r2, r3
 800111a:	fb93 f3f1 	sdiv	r3, r3, r1
 800111e:	fa1f fb83 	uxth.w	fp, r3
		       if((y1 - y2)%(x2 - x1) != 0)
 8001122:	fb01 2313 	mls	r3, r1, r3, r2
 8001126:	b113      	cbz	r3, 800112e <Line+0xce>
		       {
		    	   if(Tolshina == 1)
 8001128:	9b01      	ldr	r3, [sp, #4]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d005      	beq.n	800113a <Line+0xda>
		   {
			   k = 1;
			   x2++;
		   }

		   if(k == 0)
 800112e:	f1bb 0f00 	cmp.w	fp, #0
 8001132:	d10b      	bne.n	800114c <Line+0xec>
		   { k = 1; }
 8001134:	f04f 0b01 	mov.w	fp, #1
 8001138:	e008      	b.n	800114c <Line+0xec>
	    	           k++;
 800113a:	f10b 0b01 	add.w	fp, fp, #1
 800113e:	fa1f fb8b 	uxth.w	fp, fp
 8001142:	e7f4      	b.n	800112e <Line+0xce>
			   x2++;
 8001144:	3701      	adds	r7, #1
 8001146:	b23f      	sxth	r7, r7
			   k = 1;
 8001148:	f04f 0b01 	mov.w	fp, #1

		   for(uint16 xp = x1; xp <= x2; xp++)
 800114c:	fa1f fa85 	uxth.w	sl, r5
 8001150:	e003      	b.n	800115a <Line+0xfa>
 8001152:	f10a 0a01 	add.w	sl, sl, #1
 8001156:	fa1f fa8a 	uxth.w	sl, sl
 800115a:	45ba      	cmp	sl, r7
 800115c:	f300 80a8 	bgt.w	80012b0 <Line+0x250>
		   {
			   y = (xp - x1) * (y2 - y1) / (x2 - x1) + y1;
 8001160:	ebaa 0405 	sub.w	r4, sl, r5
 8001164:	eba8 0306 	sub.w	r3, r8, r6
 8001168:	fb03 f404 	mul.w	r4, r3, r4
 800116c:	1b7b      	subs	r3, r7, r5
 800116e:	fb94 f4f3 	sdiv	r4, r4, r3
 8001172:	b2b3      	uxth	r3, r6
 8001174:	fa13 f484 	uxtah	r4, r3, r4
 8001178:	b2a4      	uxth	r4, r4
			   for(uint16 yp = 0; yp < k; yp++)
 800117a:	f04f 0900 	mov.w	r9, #0
 800117e:	45cb      	cmp	fp, r9
 8001180:	d9e7      	bls.n	8001152 <Line+0xf2>
			   {
				   Pixel(xp, y, Color, Tolshina);
 8001182:	9b01      	ldr	r3, [sp, #4]
 8001184:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001186:	4621      	mov	r1, r4
 8001188:	4650      	mov	r0, sl
 800118a:	f7ff fe6b 	bl	8000e64 <Pixel>
				   y--;
 800118e:	3c01      	subs	r4, #1
 8001190:	b2a4      	uxth	r4, r4
				   if(y > DispHeight)
 8001192:	4b49      	ldr	r3, [pc, #292]	; (80012b8 <Line+0x258>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	429c      	cmp	r4, r3
 8001198:	d8db      	bhi.n	8001152 <Line+0xf2>
			   for(uint16 yp = 0; yp < k; yp++)
 800119a:	f109 0901 	add.w	r9, r9, #1
 800119e:	fa1f f989 	uxth.w	r9, r9
 80011a2:	e7ec      	b.n	800117e <Line+0x11e>
		   }
	   }
   }
   else
   {
	   if(y1 <= y2)
 80011a4:	4299      	cmp	r1, r3
 80011a6:	dc41      	bgt.n	800122c <Line+0x1cc>
	   {
		   if(x1 - x2 != 0)
		   {
		       k = (y2 - y1)/(x1 - x2);
 80011a8:	1a5b      	subs	r3, r3, r1
 80011aa:	1aa9      	subs	r1, r5, r2
 80011ac:	461a      	mov	r2, r3
 80011ae:	fb93 f3f1 	sdiv	r3, r3, r1
 80011b2:	fa1f fb83 	uxth.w	fp, r3
		       if((y2 - y1)%(x1 - x2) != 0)
 80011b6:	fb01 2313 	mls	r3, r1, r3, r2
 80011ba:	b113      	cbz	r3, 80011c2 <Line+0x162>
		       {
		    	   if(Tolshina == 1)
 80011bc:	9b01      	ldr	r3, [sp, #4]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d007      	beq.n	80011d2 <Line+0x172>
		   {
			   k = 1;
			   x1++;
		   }

		   if(k == 0)
 80011c2:	f1bb 0f00 	cmp.w	fp, #0
 80011c6:	d101      	bne.n	80011cc <Line+0x16c>
		   { k = 1; }
 80011c8:	f04f 0b01 	mov.w	fp, #1

		   for(uint16 xp = x2; xp <= x1; xp++)
 80011cc:	fa1f fa87 	uxth.w	sl, r7
 80011d0:	e008      	b.n	80011e4 <Line+0x184>
		    	       k++;
 80011d2:	f10b 0b01 	add.w	fp, fp, #1
 80011d6:	fa1f fb8b 	uxth.w	fp, fp
 80011da:	e7f2      	b.n	80011c2 <Line+0x162>
		   for(uint16 xp = x2; xp <= x1; xp++)
 80011dc:	f10a 0a01 	add.w	sl, sl, #1
 80011e0:	fa1f fa8a 	uxth.w	sl, sl
 80011e4:	45aa      	cmp	sl, r5
 80011e6:	dc63      	bgt.n	80012b0 <Line+0x250>
		   {
			   y = (xp - x1) * (y2 - y1) / (x2 - x1) + y1;
 80011e8:	ebaa 0405 	sub.w	r4, sl, r5
 80011ec:	eba8 0306 	sub.w	r3, r8, r6
 80011f0:	fb03 f404 	mul.w	r4, r3, r4
 80011f4:	1b7b      	subs	r3, r7, r5
 80011f6:	fb94 f4f3 	sdiv	r4, r4, r3
 80011fa:	b2b3      	uxth	r3, r6
 80011fc:	fa13 f484 	uxtah	r4, r3, r4
 8001200:	b2a4      	uxth	r4, r4
			   for(uint16 yp = 0; yp < k; yp++)
 8001202:	f04f 0900 	mov.w	r9, #0
 8001206:	45cb      	cmp	fp, r9
 8001208:	d9e8      	bls.n	80011dc <Line+0x17c>
			   {
				   Pixel(xp, y, Color, Tolshina);
 800120a:	9b01      	ldr	r3, [sp, #4]
 800120c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800120e:	4621      	mov	r1, r4
 8001210:	4650      	mov	r0, sl
 8001212:	f7ff fe27 	bl	8000e64 <Pixel>
				   y++;
 8001216:	3401      	adds	r4, #1
 8001218:	b2a4      	uxth	r4, r4
				   if(y > DispHeight)
 800121a:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <Line+0x258>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	429c      	cmp	r4, r3
 8001220:	d8dc      	bhi.n	80011dc <Line+0x17c>
			   for(uint16 yp = 0; yp < k; yp++)
 8001222:	f109 0901 	add.w	r9, r9, #1
 8001226:	fa1f f989 	uxth.w	r9, r9
 800122a:	e7ec      	b.n	8001206 <Line+0x1a6>
	   }
	   else
	   {
		   if(x2 - x1 != 0)
		   {
		       k = (y1 - y2)/(x2 - x1);
 800122c:	1acb      	subs	r3, r1, r3
 800122e:	1b51      	subs	r1, r2, r5
 8001230:	461a      	mov	r2, r3
 8001232:	fb93 f3f1 	sdiv	r3, r3, r1
 8001236:	fa1f fb83 	uxth.w	fp, r3
		       if((y1 - y2)%(x2 - x1) != 0)
 800123a:	fb01 2313 	mls	r3, r1, r3, r2
 800123e:	b113      	cbz	r3, 8001246 <Line+0x1e6>
		       {
		    	   if(Tolshina == 1)
 8001240:	9b01      	ldr	r3, [sp, #4]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d007      	beq.n	8001256 <Line+0x1f6>
		   {
			   k = 1;
			   x2++;
		   }

		   if(k == 0)
 8001246:	f1bb 0f00 	cmp.w	fp, #0
 800124a:	d101      	bne.n	8001250 <Line+0x1f0>
		   { k = 1; }
 800124c:	f04f 0b01 	mov.w	fp, #1

		   for(uint16 xp = x2; xp <= x1; xp++)
 8001250:	fa1f fa87 	uxth.w	sl, r7
 8001254:	e008      	b.n	8001268 <Line+0x208>
	    	           k++;
 8001256:	f10b 0b01 	add.w	fp, fp, #1
 800125a:	fa1f fb8b 	uxth.w	fp, fp
 800125e:	e7f2      	b.n	8001246 <Line+0x1e6>
		   for(uint16 xp = x2; xp <= x1; xp++)
 8001260:	f10a 0a01 	add.w	sl, sl, #1
 8001264:	fa1f fa8a 	uxth.w	sl, sl
 8001268:	45aa      	cmp	sl, r5
 800126a:	dc21      	bgt.n	80012b0 <Line+0x250>
		   {
			   y = (xp - x1) * (y2 - y1) / (x2 - x1) + y1;
 800126c:	ebaa 0405 	sub.w	r4, sl, r5
 8001270:	eba8 0306 	sub.w	r3, r8, r6
 8001274:	fb03 f404 	mul.w	r4, r3, r4
 8001278:	1b7b      	subs	r3, r7, r5
 800127a:	fb94 f4f3 	sdiv	r4, r4, r3
 800127e:	b2b3      	uxth	r3, r6
 8001280:	fa13 f484 	uxtah	r4, r3, r4
 8001284:	b2a4      	uxth	r4, r4
			   for(uint16 yp = 0; yp < k; yp++)
 8001286:	f04f 0900 	mov.w	r9, #0
 800128a:	45cb      	cmp	fp, r9
 800128c:	d9e8      	bls.n	8001260 <Line+0x200>
			   {
				   Pixel(xp, y, Color, Tolshina);
 800128e:	9b01      	ldr	r3, [sp, #4]
 8001290:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001292:	4621      	mov	r1, r4
 8001294:	4650      	mov	r0, sl
 8001296:	f7ff fde5 	bl	8000e64 <Pixel>
				   y++;
 800129a:	3401      	adds	r4, #1
 800129c:	b2a4      	uxth	r4, r4
				   if(y > DispHeight)
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <Line+0x258>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	429c      	cmp	r4, r3
 80012a4:	d8dc      	bhi.n	8001260 <Line+0x200>
			   for(uint16 yp = 0; yp < k; yp++)
 80012a6:	f109 0901 	add.w	r9, r9, #1
 80012aa:	fa1f f989 	uxth.w	r9, r9
 80012ae:	e7ec      	b.n	800128a <Line+0x22a>
				   {break; }
			   }
		   }
	   }
   }
}
 80012b0:	b003      	add	sp, #12
 80012b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012b6:	bf00      	nop
 80012b8:	20000038 	.word	0x20000038

080012bc <Circle>:
void Circle (int16 x1, int16 y1, int16 r,uint32 Color, uint16 Tolshina)
{
 80012bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012c0:	b087      	sub	sp, #28
 80012c2:	9004      	str	r0, [sp, #16]
 80012c4:	9105      	str	r1, [sp, #20]
 80012c6:	9302      	str	r3, [sp, #8]
 80012c8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80012cc:	9301      	str	r3, [sp, #4]
    int x = -r, y = 0, err = 2-2*r, e2;
 80012ce:	f1c2 0900 	rsb	r9, r2, #0
 80012d2:	f1c2 0201 	rsb	r2, r2, #1
 80012d6:	ea4f 0842 	mov.w	r8, r2, lsl #1
 80012da:	f04f 0a00 	mov.w	sl, #0
 80012de:	e00c      	b.n	80012fa <Circle+0x3e>
 80012e0:	4643      	mov	r3, r8
		e2 = err;
		if (e2 <= y) {
			err += ++y*2+1;
			if (-x == y && e2 <= x) e2 = 0;
		}
		if (e2 > x) err += ++x*2+1;
 80012e2:	45c1      	cmp	r9, r8
 80012e4:	da45      	bge.n	8001372 <Circle+0xb6>
 80012e6:	f109 0901 	add.w	r9, r9, #1
 80012ea:	ea4f 0849 	mov.w	r8, r9, lsl #1
 80012ee:	f108 0801 	add.w	r8, r8, #1
 80012f2:	4498      	add	r8, r3
	} while (x <= 0);
 80012f4:	f1b9 0f00 	cmp.w	r9, #0
 80012f8:	dc3d      	bgt.n	8001376 <Circle+0xba>
		Pixel(x1-x, y1+y,Color,Tolshina);
 80012fa:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 80012fe:	fa1f fb89 	uxth.w	fp, r9
 8001302:	eba4 030b 	sub.w	r3, r4, fp
 8001306:	b298      	uxth	r0, r3
 8001308:	fa1f f68a 	uxth.w	r6, sl
 800130c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8001310:	1977      	adds	r7, r6, r5
 8001312:	b2bf      	uxth	r7, r7
 8001314:	9b01      	ldr	r3, [sp, #4]
 8001316:	9a02      	ldr	r2, [sp, #8]
 8001318:	4639      	mov	r1, r7
 800131a:	9003      	str	r0, [sp, #12]
 800131c:	f7ff fda2 	bl	8000e64 <Pixel>
		Pixel(x1+x, y1+y,Color,Tolshina);
 8001320:	445c      	add	r4, fp
 8001322:	b2a4      	uxth	r4, r4
 8001324:	9b01      	ldr	r3, [sp, #4]
 8001326:	f8dd b008 	ldr.w	fp, [sp, #8]
 800132a:	465a      	mov	r2, fp
 800132c:	4639      	mov	r1, r7
 800132e:	4620      	mov	r0, r4
 8001330:	f7ff fd98 	bl	8000e64 <Pixel>
		Pixel(x1+x, y1-y,Color,Tolshina);
 8001334:	1bad      	subs	r5, r5, r6
 8001336:	b2ad      	uxth	r5, r5
 8001338:	9e01      	ldr	r6, [sp, #4]
 800133a:	4633      	mov	r3, r6
 800133c:	465a      	mov	r2, fp
 800133e:	4629      	mov	r1, r5
 8001340:	4620      	mov	r0, r4
 8001342:	f7ff fd8f 	bl	8000e64 <Pixel>
		Pixel(x1-x, y1-y,Color,Tolshina);
 8001346:	4633      	mov	r3, r6
 8001348:	465a      	mov	r2, fp
 800134a:	4629      	mov	r1, r5
 800134c:	9803      	ldr	r0, [sp, #12]
 800134e:	f7ff fd89 	bl	8000e64 <Pixel>
		if (e2 <= y) {
 8001352:	45c2      	cmp	sl, r8
 8001354:	dbc4      	blt.n	80012e0 <Circle+0x24>
			err += ++y*2+1;
 8001356:	f10a 0a01 	add.w	sl, sl, #1
 800135a:	ea4f 034a 	mov.w	r3, sl, lsl #1
 800135e:	3301      	adds	r3, #1
 8001360:	4443      	add	r3, r8
			if (-x == y && e2 <= x) e2 = 0;
 8001362:	eb1a 0f09 	cmn.w	sl, r9
 8001366:	d1bc      	bne.n	80012e2 <Circle+0x26>
 8001368:	45c1      	cmp	r9, r8
 800136a:	dbba      	blt.n	80012e2 <Circle+0x26>
 800136c:	f04f 0800 	mov.w	r8, #0
 8001370:	e7b7      	b.n	80012e2 <Circle+0x26>
 8001372:	4698      	mov	r8, r3
 8001374:	e7be      	b.n	80012f4 <Circle+0x38>
}
 8001376:	b007      	add	sp, #28
 8001378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800137c <FillCircle>:
void FillCircle(uint16 x1, uint16 y1, uint16 r, uint32 Color)//
{
 800137c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137e:	b083      	sub	sp, #12
 8001380:	4607      	mov	r7, r0
 8001382:	460e      	mov	r6, r1
 8001384:	4614      	mov	r4, r2
 8001386:	461d      	mov	r5, r3
  uint16 r1 = r;
  while(r1 != 0)
 8001388:	e009      	b.n	800139e <FillCircle+0x22>
  {
      Circle(x1,y1,r1,Color,2);
 800138a:	2302      	movs	r3, #2
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	462b      	mov	r3, r5
 8001390:	b222      	sxth	r2, r4
 8001392:	b231      	sxth	r1, r6
 8001394:	b238      	sxth	r0, r7
 8001396:	f7ff ff91 	bl	80012bc <Circle>
      r1--;
 800139a:	3c01      	subs	r4, #1
 800139c:	b2a4      	uxth	r4, r4
  while(r1 != 0)
 800139e:	2c00      	cmp	r4, #0
 80013a0:	d1f3      	bne.n	800138a <FillCircle+0xe>
  }
}
 80013a2:	b003      	add	sp, #12
 80013a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080013a8 <VGradA>:
void VGradA(int16 x1, int16 x2, int16 y1, int16 y2, int32 ColorH, int32 ColorL)//
{
 80013a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013ac:	ed2d 8b06 	vpush	{d8-d10}
 80013b0:	460f      	mov	r7, r1
 80013b2:	469a      	mov	sl, r3
 80013b4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80013b6:	9c11      	ldr	r4, [sp, #68]	; 0x44
    float HRed, HGreen, HBlue;
    float LRed, LGreen, LBlue;
    y1-=1;
 80013b8:	3a01      	subs	r2, #1
 80013ba:	fa0f f982 	sxth.w	r9, r2
    x1-=1;
 80013be:	3801      	subs	r0, #1
 80013c0:	fa0f fb80 	sxth.w	fp, r0

	if(ColorType == Color565)
 80013c4:	4b72      	ldr	r3, [pc, #456]	; (8001590 <VGradA+0x1e8>)
 80013c6:	781e      	ldrb	r6, [r3, #0]
 80013c8:	b93e      	cbnz	r6, 80013da <VGradA+0x32>
	{ ColorH = Get565Color(ColorH); ColorL = Get565Color(ColorL);}
 80013ca:	4628      	mov	r0, r5
 80013cc:	f7ff fd02 	bl	8000dd4 <Get565Color>
 80013d0:	4605      	mov	r5, r0
 80013d2:	4620      	mov	r0, r4
 80013d4:	f7ff fcfe 	bl	8000dd4 <Get565Color>
 80013d8:	4604      	mov	r4, r0

	if(ColorType == Color888)
 80013da:	2e01      	cmp	r6, #1
 80013dc:	d035      	beq.n	800144a <VGradA+0xa2>
	{ ColorH = ColorH | 0xFF << 24; ColorL = ColorL | 0xFF << 24; }

	if(x1 < 1){x1 = 1;}
 80013de:	f1bb 0f00 	cmp.w	fp, #0
 80013e2:	dd37      	ble.n	8001454 <VGradA+0xac>
	if(x2 > DispWidth){ x2 = DispWidth;}
 80013e4:	4b6b      	ldr	r3, [pc, #428]	; (8001594 <VGradA+0x1ec>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	429f      	cmp	r7, r3
 80013ea:	d900      	bls.n	80013ee <VGradA+0x46>
 80013ec:	b21f      	sxth	r7, r3
	if(y1 < 1){ y1 = 1;}
 80013ee:	f1b9 0f00 	cmp.w	r9, #0
 80013f2:	dd32      	ble.n	800145a <VGradA+0xb2>
	if(y2 > DispHeight){ y2 = DispHeight;}
 80013f4:	4b68      	ldr	r3, [pc, #416]	; (8001598 <VGradA+0x1f0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	459a      	cmp	sl, r3
 80013fa:	d901      	bls.n	8001400 <VGradA+0x58>
 80013fc:	fa0f fa83 	sxth.w	sl, r3

    if(ColorType != Color565)
 8001400:	b376      	cbz	r6, 8001460 <VGradA+0xb8>
    {
       HBlue = ColorH & 0x000000ff;
 8001402:	b2eb      	uxtb	r3, r5
 8001404:	ee09 3a90 	vmov	s19, r3
 8001408:	eef8 9ae9 	vcvt.f32.s32	s19, s19
       ColorH = ColorH>>8;
       HGreen = ColorH & 0x000000ff;
 800140c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8001410:	ee09 3a10 	vmov	s18, r3
 8001414:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
       ColorH = ColorH>>8;
       HRed = ColorH & 0x000000ff;
 8001418:	f3c5 4507 	ubfx	r5, r5, #16, #8
 800141c:	ee07 5a90 	vmov	s15, r5
 8001420:	eeb8 8ae7 	vcvt.f32.s32	s16, s15

       LBlue = ColorL & 0x000000ff;
 8001424:	b2e3      	uxtb	r3, r4
 8001426:	ee0a 3a90 	vmov	s21, r3
 800142a:	eef8 aaea 	vcvt.f32.s32	s21, s21
       ColorL = ColorL>>8;
       LGreen = ColorL & 0x000000ff;
 800142e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8001432:	ee0a 3a10 	vmov	s20, r3
 8001436:	eeb8 aaca 	vcvt.f32.s32	s20, s20
       ColorL = ColorL>>8;
       LRed = ColorL & 0x000000ff;
 800143a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 800143e:	ee07 4a90 	vmov	s15, r4
 8001442:	eef8 8ae7 	vcvt.f32.s32	s17, s15
    }

    uint32 Res_Color, promej_zn;
    float Mix;

    for(int16 i = y1; i<y2; i++)
 8001446:	464e      	mov	r6, r9
 8001448:	e061      	b.n	800150e <VGradA+0x166>
	{ ColorH = ColorH | 0xFF << 24; ColorL = ColorL | 0xFF << 24; }
 800144a:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 800144e:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 8001452:	e7c4      	b.n	80013de <VGradA+0x36>
	if(x1 < 1){x1 = 1;}
 8001454:	f04f 0b01 	mov.w	fp, #1
 8001458:	e7c4      	b.n	80013e4 <VGradA+0x3c>
	if(y1 < 1){ y1 = 1;}
 800145a:	f04f 0901 	mov.w	r9, #1
 800145e:	e7c9      	b.n	80013f4 <VGradA+0x4c>
        HBlue = ColorH & 0x0000001f;
 8001460:	f005 031f 	and.w	r3, r5, #31
 8001464:	ee09 3a90 	vmov	s19, r3
 8001468:	eef8 9ae9 	vcvt.f32.s32	s19, s19
        HGreen = ColorH & 0x0000003f;
 800146c:	f3c5 1345 	ubfx	r3, r5, #5, #6
 8001470:	ee09 3a10 	vmov	s18, r3
 8001474:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
        HRed = ColorH & 0x0000001f;
 8001478:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 800147c:	ee07 5a90 	vmov	s15, r5
 8001480:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
        LBlue = ColorL & 0x0000001f;
 8001484:	f004 031f 	and.w	r3, r4, #31
 8001488:	ee0a 3a90 	vmov	s21, r3
 800148c:	eef8 aaea 	vcvt.f32.s32	s21, s21
        LGreen = ColorL & 0x0000003f;
 8001490:	f3c4 1345 	ubfx	r3, r4, #5, #6
 8001494:	ee0a 3a10 	vmov	s20, r3
 8001498:	eeb8 aaca 	vcvt.f32.s32	s20, s20
        LRed = ColorL & 0x0000001f;
 800149c:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80014a0:	ee07 4a90 	vmov	s15, r4
 80014a4:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 80014a8:	e7cd      	b.n	8001446 <VGradA+0x9e>
        promej_zn = HBlue * (1 - Mix) + LBlue * (Mix);
        Res_Color |= promej_zn;
     }
     else
     {
         Res_Color = HRed * (1 - Mix) + LRed * (Mix);
 80014aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014b2:	ee67 6a08 	vmul.f32	s13, s14, s16
 80014b6:	ee28 6aa7 	vmul.f32	s12, s17, s15
 80014ba:	ee76 6a86 	vadd.f32	s13, s13, s12
 80014be:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80014c2:	ee16 3a90 	vmov	r3, s13
         Res_Color <<= 6;
         promej_zn = HGreen * (1 - Mix) + LGreen * (Mix);
 80014c6:	ee67 6a09 	vmul.f32	s13, s14, s18
 80014ca:	ee2a 6a27 	vmul.f32	s12, s20, s15
 80014ce:	ee76 6a86 	vadd.f32	s13, s13, s12
 80014d2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80014d6:	ee16 5a90 	vmov	r5, s13
         Res_Color |= promej_zn;
 80014da:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
         Res_Color <<= 5;
         promej_zn = HBlue * (1 - Mix) + LBlue * (Mix);
 80014de:	ee27 7a29 	vmul.f32	s14, s14, s19
 80014e2:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80014e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
         Res_Color |= promej_zn;
 80014ee:	ee17 3a90 	vmov	r3, s15
 80014f2:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
 80014f6:	e045      	b.n	8001584 <VGradA+0x1dc>
     }

     for(int16 j = x1; j<x2; j++)
     {
          MemPoint(j,i,Res_Color);
 80014f8:	462a      	mov	r2, r5
 80014fa:	4641      	mov	r1, r8
 80014fc:	4620      	mov	r0, r4
 80014fe:	f7ff fc5b 	bl	8000db8 <MemPoint>
     for(int16 j = x1; j<x2; j++)
 8001502:	3401      	adds	r4, #1
 8001504:	b224      	sxth	r4, r4
 8001506:	42a7      	cmp	r7, r4
 8001508:	dcf6      	bgt.n	80014f8 <VGradA+0x150>
    for(int16 i = y1; i<y2; i++)
 800150a:	3601      	adds	r6, #1
 800150c:	b236      	sxth	r6, r6
 800150e:	45b2      	cmp	sl, r6
 8001510:	dd3a      	ble.n	8001588 <VGradA+0x1e0>
     Mix = (float)(i - y1) / (float)(y2 - y1);
 8001512:	46b0      	mov	r8, r6
 8001514:	eba6 0309 	sub.w	r3, r6, r9
 8001518:	ee06 3a90 	vmov	s13, r3
 800151c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001520:	ebaa 0309 	sub.w	r3, sl, r9
 8001524:	ee07 3a10 	vmov	s14, r3
 8001528:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800152c:	eec6 7a87 	vdiv.f32	s15, s13, s14
     if(ColorType != Color565)
 8001530:	4b17      	ldr	r3, [pc, #92]	; (8001590 <VGradA+0x1e8>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0b8      	beq.n	80014aa <VGradA+0x102>
        Res_Color = HRed * (1 - Mix) + LRed * (Mix);
 8001538:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800153c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001540:	ee67 6a08 	vmul.f32	s13, s14, s16
 8001544:	ee28 6aa7 	vmul.f32	s12, s17, s15
 8001548:	ee76 6a86 	vadd.f32	s13, s13, s12
 800154c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001550:	ee16 3a90 	vmov	r3, s13
        promej_zn = HGreen * (1 - Mix) + LGreen * (Mix);
 8001554:	ee67 6a09 	vmul.f32	s13, s14, s18
 8001558:	ee2a 6a27 	vmul.f32	s12, s20, s15
 800155c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001560:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001564:	ee16 5a90 	vmov	r5, s13
        Res_Color |= promej_zn;
 8001568:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
        promej_zn = HBlue * (1 - Mix) + LBlue * (Mix);
 800156c:	ee27 7a29 	vmul.f32	s14, s14, s19
 8001570:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8001574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
        Res_Color |= promej_zn;
 800157c:	ee17 3a90 	vmov	r3, s15
 8001580:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
     for(int16 j = x1; j<x2; j++)
 8001584:	465c      	mov	r4, fp
 8001586:	e7be      	b.n	8001506 <VGradA+0x15e>
     }
   }
}
 8001588:	ecbd 8b06 	vpop	{d8-d10}
 800158c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001590:	20000034 	.word	0x20000034
 8001594:	2000003c 	.word	0x2000003c
 8001598:	20000038 	.word	0x20000038

0800159c <HGradA>:
void HGradA(int16 x1, int16 x2, int16 y1, int16 y2, int32 ColorH, int32 ColorL)//++
{
 800159c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015a0:	ed2d 8b06 	vpush	{d8-d10}
 80015a4:	4689      	mov	r9, r1
 80015a6:	461f      	mov	r7, r3
 80015a8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80015aa:	9c11      	ldr	r4, [sp, #68]	; 0x44
    float HRed, HGreen, HBlue;
    float LRed, LGreen, LBlue;
    y1-=1;
 80015ac:	3a01      	subs	r2, #1
 80015ae:	fa0f fb82 	sxth.w	fp, r2
    x1-=1;
 80015b2:	3801      	subs	r0, #1
 80015b4:	fa0f fa80 	sxth.w	sl, r0

	if(ColorType == Color565)
 80015b8:	4b76      	ldr	r3, [pc, #472]	; (8001794 <HGradA+0x1f8>)
 80015ba:	781e      	ldrb	r6, [r3, #0]
 80015bc:	b93e      	cbnz	r6, 80015ce <HGradA+0x32>
	{ ColorH = Get565Color(ColorH); ColorL = Get565Color(ColorL);}
 80015be:	4628      	mov	r0, r5
 80015c0:	f7ff fc08 	bl	8000dd4 <Get565Color>
 80015c4:	4605      	mov	r5, r0
 80015c6:	4620      	mov	r0, r4
 80015c8:	f7ff fc04 	bl	8000dd4 <Get565Color>
 80015cc:	4604      	mov	r4, r0

	if(ColorType == Color888)
 80015ce:	2e01      	cmp	r6, #1
 80015d0:	d036      	beq.n	8001640 <HGradA+0xa4>
	{ ColorH = ColorH | 0xFF << 24; ColorL = ColorL | 0xFF << 24; }

	if(x1 < 1){x1 = 1;}
 80015d2:	f1ba 0f00 	cmp.w	sl, #0
 80015d6:	dd38      	ble.n	800164a <HGradA+0xae>
	if(x2 > DispWidth){ x2 = DispWidth;}
 80015d8:	4b6f      	ldr	r3, [pc, #444]	; (8001798 <HGradA+0x1fc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4599      	cmp	r9, r3
 80015de:	d901      	bls.n	80015e4 <HGradA+0x48>
 80015e0:	fa0f f983 	sxth.w	r9, r3
	if(y1 < 1){ y1 = 1;}
 80015e4:	f1bb 0f00 	cmp.w	fp, #0
 80015e8:	dd32      	ble.n	8001650 <HGradA+0xb4>
	if(y2 > DispHeight){ y2 = DispHeight;}
 80015ea:	4b6c      	ldr	r3, [pc, #432]	; (800179c <HGradA+0x200>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	429f      	cmp	r7, r3
 80015f0:	d900      	bls.n	80015f4 <HGradA+0x58>
 80015f2:	b21f      	sxth	r7, r3

    if(ColorType != Color565)
 80015f4:	b37e      	cbz	r6, 8001656 <HGradA+0xba>
    {
       HBlue = ColorH & 0x000000ff;
 80015f6:	b2eb      	uxtb	r3, r5
 80015f8:	ee09 3a90 	vmov	s19, r3
 80015fc:	eef8 9ae9 	vcvt.f32.s32	s19, s19
       ColorH = ColorH>>8;
       HGreen = ColorH & 0x000000ff;
 8001600:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8001604:	ee09 3a10 	vmov	s18, r3
 8001608:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
       ColorH = ColorH>>8;
       HRed = ColorH & 0x000000ff;
 800160c:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8001610:	ee07 5a90 	vmov	s15, r5
 8001614:	eeb8 8ae7 	vcvt.f32.s32	s16, s15

       LBlue = ColorL & 0x000000ff;
 8001618:	b2e3      	uxtb	r3, r4
 800161a:	ee0a 3a90 	vmov	s21, r3
 800161e:	eef8 aaea 	vcvt.f32.s32	s21, s21
       ColorL = ColorL>>8;
       LGreen = ColorL & 0x000000ff;
 8001622:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8001626:	ee0a 3a10 	vmov	s20, r3
 800162a:	eeb8 aaca 	vcvt.f32.s32	s20, s20
       ColorL = ColorL>>8;
       LRed = ColorL & 0x000000ff;
 800162e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8001632:	ee07 4a90 	vmov	s15, r4
 8001636:	eef8 8ae7 	vcvt.f32.s32	s17, s15
    }

    uint32 Res_Color, promej_zn;
    float Mix;

    for(uint16 i = x1; i<x2; i++)
 800163a:	fa1f f68a 	uxth.w	r6, sl
 800163e:	e061      	b.n	8001704 <HGradA+0x168>
	{ ColorH = ColorH | 0xFF << 24; ColorL = ColorL | 0xFF << 24; }
 8001640:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 8001644:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 8001648:	e7c3      	b.n	80015d2 <HGradA+0x36>
	if(x1 < 1){x1 = 1;}
 800164a:	f04f 0a01 	mov.w	sl, #1
 800164e:	e7c3      	b.n	80015d8 <HGradA+0x3c>
	if(y1 < 1){ y1 = 1;}
 8001650:	f04f 0b01 	mov.w	fp, #1
 8001654:	e7c9      	b.n	80015ea <HGradA+0x4e>
        HBlue = ColorH & 0x0000001f;
 8001656:	f005 031f 	and.w	r3, r5, #31
 800165a:	ee09 3a90 	vmov	s19, r3
 800165e:	eef8 9ae9 	vcvt.f32.s32	s19, s19
        HGreen = ColorH & 0x0000003f;
 8001662:	f3c5 1345 	ubfx	r3, r5, #5, #6
 8001666:	ee09 3a10 	vmov	s18, r3
 800166a:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
        HRed = ColorH & 0x0000001f;
 800166e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8001672:	ee07 5a90 	vmov	s15, r5
 8001676:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
        LBlue = ColorL & 0x0000001f;
 800167a:	f004 031f 	and.w	r3, r4, #31
 800167e:	ee0a 3a90 	vmov	s21, r3
 8001682:	eef8 aaea 	vcvt.f32.s32	s21, s21
        LGreen = ColorL & 0x0000003f;
 8001686:	f3c4 1345 	ubfx	r3, r4, #5, #6
 800168a:	ee0a 3a10 	vmov	s20, r3
 800168e:	eeb8 aaca 	vcvt.f32.s32	s20, s20
        LRed = ColorL & 0x0000001f;
 8001692:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8001696:	ee07 4a90 	vmov	s15, r4
 800169a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800169e:	e7cc      	b.n	800163a <HGradA+0x9e>
         promej_zn = HBlue * (1 - Mix) + LBlue * (Mix);
         Res_Color |= promej_zn;
     }
     else
     {
         Res_Color = HRed * (1 - Mix) + LRed * (Mix);
 80016a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016a8:	ee67 6a08 	vmul.f32	s13, s14, s16
 80016ac:	ee28 6aa7 	vmul.f32	s12, s17, s15
 80016b0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80016b4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80016b8:	ee16 3a90 	vmov	r3, s13
         Res_Color <<= 6;
         promej_zn = HGreen * (1 - Mix) + LGreen * (Mix);
 80016bc:	ee67 6a09 	vmul.f32	s13, s14, s18
 80016c0:	ee2a 6a27 	vmul.f32	s12, s20, s15
 80016c4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80016c8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80016cc:	ee16 5a90 	vmov	r5, s13
         Res_Color |= promej_zn;
 80016d0:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
         Res_Color <<= 5;
         promej_zn = HBlue * (1 - Mix) + LBlue * (Mix);
 80016d4:	ee27 7a29 	vmul.f32	s14, s14, s19
 80016d8:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80016dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
         Res_Color |= promej_zn;
 80016e4:	ee17 3a90 	vmov	r3, s15
 80016e8:	ea43 1545 	orr.w	r5, r3, r5, lsl #5
 80016ec:	e04c      	b.n	8001788 <HGradA+0x1ec>
     }


     for(int16 j = y1; j<y2; j++)
     {
         MemPoint(i,j,Res_Color);
 80016ee:	462a      	mov	r2, r5
 80016f0:	4621      	mov	r1, r4
 80016f2:	4640      	mov	r0, r8
 80016f4:	f7ff fb60 	bl	8000db8 <MemPoint>
     for(int16 j = y1; j<y2; j++)
 80016f8:	3401      	adds	r4, #1
 80016fa:	b224      	sxth	r4, r4
 80016fc:	42a7      	cmp	r7, r4
 80016fe:	dcf6      	bgt.n	80016ee <HGradA+0x152>
    for(uint16 i = x1; i<x2; i++)
 8001700:	3601      	adds	r6, #1
 8001702:	b2b6      	uxth	r6, r6
 8001704:	464b      	mov	r3, r9
 8001706:	454e      	cmp	r6, r9
 8001708:	da40      	bge.n	800178c <HGradA+0x1f0>
     if(i > x2 - 1)
 800170a:	f109 32ff 	add.w	r2, r9, #4294967295
 800170e:	42b2      	cmp	r2, r6
 8001710:	da01      	bge.n	8001716 <HGradA+0x17a>
     {i = DispWidth;}
 8001712:	4a21      	ldr	r2, [pc, #132]	; (8001798 <HGradA+0x1fc>)
 8001714:	8816      	ldrh	r6, [r2, #0]
     Mix = (float)(i - x1) / (float)(x2 - x1);
 8001716:	46b0      	mov	r8, r6
 8001718:	eba6 020a 	sub.w	r2, r6, sl
 800171c:	ee06 2a90 	vmov	s13, r2
 8001720:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001724:	eba3 030a 	sub.w	r3, r3, sl
 8001728:	ee07 3a90 	vmov	s15, r3
 800172c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001730:	eec6 7a87 	vdiv.f32	s15, s13, s14
     if(ColorType != Color565)
 8001734:	4b17      	ldr	r3, [pc, #92]	; (8001794 <HGradA+0x1f8>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0b1      	beq.n	80016a0 <HGradA+0x104>
         Res_Color = HRed * (1 - Mix) + LRed * (Mix);
 800173c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001740:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001744:	ee67 6a08 	vmul.f32	s13, s14, s16
 8001748:	ee28 6aa7 	vmul.f32	s12, s17, s15
 800174c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001750:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001754:	ee16 3a90 	vmov	r3, s13
         promej_zn = HGreen * (1 - Mix) + LGreen * (Mix);
 8001758:	ee67 6a09 	vmul.f32	s13, s14, s18
 800175c:	ee2a 6a27 	vmul.f32	s12, s20, s15
 8001760:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001764:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001768:	ee16 5a90 	vmov	r5, s13
         Res_Color |= promej_zn;
 800176c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
         promej_zn = HBlue * (1 - Mix) + LBlue * (Mix);
 8001770:	ee27 7a29 	vmul.f32	s14, s14, s19
 8001774:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8001778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
         Res_Color |= promej_zn;
 8001780:	ee17 3a90 	vmov	r3, s15
 8001784:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
     for(int16 j = y1; j<y2; j++)
 8001788:	465c      	mov	r4, fp
 800178a:	e7b7      	b.n	80016fc <HGradA+0x160>
     }
   }
}
 800178c:	ecbd 8b06 	vpop	{d8-d10}
 8001790:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001794:	20000034 	.word	0x20000034
 8001798:	2000003c 	.word	0x2000003c
 800179c:	20000038 	.word	0x20000038

080017a0 <VGradB>:
void VGradB(int16 x1, int16 x2, int16 y1, int16 y2, uint32 ColorH, uint32 ColorC, uint32 ColorL)//++
{
 80017a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	4680      	mov	r8, r0
 80017a8:	460f      	mov	r7, r1
 80017aa:	461d      	mov	r5, r3
 80017ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 VGradA(x1,x2,y1,y1+((y2 - y1)/2),ColorH,ColorC);
 80017ae:	1a9c      	subs	r4, r3, r2
 80017b0:	d416      	bmi.n	80017e0 <VGradB+0x40>
 80017b2:	eb02 0464 	add.w	r4, r2, r4, asr #1
 80017b6:	b224      	sxth	r4, r4
 80017b8:	9601      	str	r6, [sp, #4]
 80017ba:	9b08      	ldr	r3, [sp, #32]
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	4623      	mov	r3, r4
 80017c0:	4639      	mov	r1, r7
 80017c2:	4640      	mov	r0, r8
 80017c4:	f7ff fdf0 	bl	80013a8 <VGradA>
 VGradA(x1,x2,y1+((y2 - y1)/2),y2,ColorC,ColorL);
 80017c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80017ca:	9301      	str	r3, [sp, #4]
 80017cc:	9600      	str	r6, [sp, #0]
 80017ce:	462b      	mov	r3, r5
 80017d0:	4622      	mov	r2, r4
 80017d2:	4639      	mov	r1, r7
 80017d4:	4640      	mov	r0, r8
 80017d6:	f7ff fde7 	bl	80013a8 <VGradA>
}
 80017da:	b002      	add	sp, #8
 80017dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 VGradA(x1,x2,y1,y1+((y2 - y1)/2),ColorH,ColorC);
 80017e0:	3401      	adds	r4, #1
 80017e2:	e7e6      	b.n	80017b2 <VGradB+0x12>

080017e4 <HGradB>:
void HGradB(int16 x1, int16 x2, int16 y1, int16 y2, uint32 ColorH, uint32 ColorC, uint32 ColorL)//++
{
 80017e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	460d      	mov	r5, r1
 80017ec:	4690      	mov	r8, r2
 80017ee:	461f      	mov	r7, r3
 80017f0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 HGradA(x1,x1+((x2 - x1)/2),y1,y2,ColorH,ColorC);
 80017f2:	1a0c      	subs	r4, r1, r0
 80017f4:	d416      	bmi.n	8001824 <HGradB+0x40>
 80017f6:	eb00 0464 	add.w	r4, r0, r4, asr #1
 80017fa:	b224      	sxth	r4, r4
 80017fc:	9601      	str	r6, [sp, #4]
 80017fe:	9b08      	ldr	r3, [sp, #32]
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	463b      	mov	r3, r7
 8001804:	4642      	mov	r2, r8
 8001806:	4621      	mov	r1, r4
 8001808:	f7ff fec8 	bl	800159c <HGradA>
 HGradA(x1+((x2 - x1)/2),x2,y1,y2,ColorC,ColorL);
 800180c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	9600      	str	r6, [sp, #0]
 8001812:	463b      	mov	r3, r7
 8001814:	4642      	mov	r2, r8
 8001816:	4629      	mov	r1, r5
 8001818:	4620      	mov	r0, r4
 800181a:	f7ff febf 	bl	800159c <HGradA>
}
 800181e:	b002      	add	sp, #8
 8001820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 HGradA(x1,x1+((x2 - x1)/2),y1,y2,ColorH,ColorC);
 8001824:	3401      	adds	r4, #1
 8001826:	e7e6      	b.n	80017f6 <HGradB+0x12>

08001828 <Progress_bar>:
void Progress_bar(uint16 XStart, uint16 XEnd, uint16 YStart, uint16 YEnd, uint16 StartPos, uint16 StopPos, uint16 CurrPos, uint32 BorderColor, uint32 FloodColor, uint32 BarColor, uint16 Tolshina, uint8 Orient)
{
 8001828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	4606      	mov	r6, r0
 8001830:	4688      	mov	r8, r1
 8001832:	4691      	mov	r9, r2
 8001834:	461c      	mov	r4, r3
 8001836:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800183a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800183e:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
 8001842:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8001846:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
  uint16 Tr = Tolshina - 1;
 800184a:	1e5f      	subs	r7, r3, #1
 800184c:	b2bf      	uxth	r7, r7
  float STPOS;
  float POSCOUNT;
  uint16 XPOS = 0, YPOS = 0;
  uint16 POSN = CurrPos - StartPos;
 800184e:	ebac 0205 	sub.w	r2, ip, r5
 8001852:	b292      	uxth	r2, r2
 8001854:	ee07 2a90 	vmov	s15, r2

  if(Orient == Horisontal)
 8001858:	2903      	cmp	r1, #3
 800185a:	d03f      	beq.n	80018dc <Progress_bar+0xb4>
         XPOS = (uint16)((POSN * POSCOUNT)+ XStart - Tr);
      }
  }
  else
  {
      STPOS = StopPos - StartPos;
 800185c:	1b42      	subs	r2, r0, r5
 800185e:	ee06 2a90 	vmov	s13, r2
 8001862:	eef8 6ae6 	vcvt.f32.s32	s13, s13
      POSCOUNT = (YEnd - YStart)/STPOS;
 8001866:	eba4 0209 	sub.w	r2, r4, r9
 800186a:	ee06 2a10 	vmov	s12, r2
 800186e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001872:	ee86 7a26 	vdiv.f32	s14, s12, s13
      YPOS = (uint16)(YEnd - (POSN * POSCOUNT));
 8001876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800187e:	ee07 4a90 	vmov	s15, r4
 8001882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001886:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800188a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800188e:	ee17 5a90 	vmov	r5, s15
      YPOS += Tolshina;
 8001892:	fa13 f585 	uxtah	r5, r3, r5
 8001896:	b2ad      	uxth	r5, r5
  uint16 XPOS = 0, YPOS = 0;
 8001898:	f04f 0a00 	mov.w	sl, #0
  }

  if(Orient == Horisontal)
 800189c:	2903      	cmp	r1, #3
 800189e:	f000 809f 	beq.w	80019e0 <Progress_bar+0x1b8>
      FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,Tolshina);
      Fill_Rectangle(BarColor,XStart + 1 + Tr,XPOS-1,YStart + 1 + Tr,YEnd - Tr - 1);
  }
  else
  {
	  FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,Tolshina);
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	9302      	str	r3, [sp, #8]
 80018a6:	b223      	sxth	r3, r4
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	fa0f f389 	sxth.w	r3, r9
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	fa0f f388 	sxth.w	r3, r8
 80018b4:	b232      	sxth	r2, r6
 80018b6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80018b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80018ba:	f7ff fb97 	bl	8000fec <FramePanel>
	  Fill_Rectangle(BarColor, XStart + 1 + Tr,XEnd - Tr - 1, YPOS, YEnd - Tr - 1);
 80018be:	1c71      	adds	r1, r6, #1
 80018c0:	eba8 0207 	sub.w	r2, r8, r7
 80018c4:	1be4      	subs	r4, r4, r7
 80018c6:	3c01      	subs	r4, #1
 80018c8:	9400      	str	r4, [sp, #0]
 80018ca:	462b      	mov	r3, r5
 80018cc:	3a01      	subs	r2, #1
 80018ce:	4439      	add	r1, r7
 80018d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80018d2:	f7ff fb11 	bl	8000ef8 <Fill_Rectangle>
  }
}
 80018d6:	b004      	add	sp, #16
 80018d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(CurrPos == 1)
 80018dc:	f1bc 0f01 	cmp.w	ip, #1
 80018e0:	d02a      	beq.n	8001938 <Progress_bar+0x110>
  uint16 XPOS = 0, YPOS = 0;
 80018e2:	f04f 0a00 	mov.w	sl, #0
      if(CurrPos == StartPos)
 80018e6:	45ac      	cmp	ip, r5
 80018e8:	d054      	beq.n	8001994 <Progress_bar+0x16c>
      if(CurrPos > StartPos)
 80018ea:	45ac      	cmp	ip, r5
 80018ec:	d976      	bls.n	80019dc <Progress_bar+0x1b4>
         STPOS = StopPos - StartPos;
 80018ee:	1b40      	subs	r0, r0, r5
 80018f0:	ee07 0a10 	vmov	s14, r0
 80018f4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
         POSCOUNT = (XEnd - XStart)/STPOS;
 80018f8:	eba8 0206 	sub.w	r2, r8, r6
 80018fc:	ee06 2a10 	vmov	s12, r2
 8001900:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001904:	ee86 7a26 	vdiv.f32	s14, s12, s13
         XPOS = (uint16)((POSN * POSCOUNT)+ XStart - Tr);
 8001908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800190c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001910:	ee07 6a90 	vmov	s15, r6
 8001914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001918:	ee77 7a87 	vadd.f32	s15, s15, s14
 800191c:	ee07 7a10 	vmov	s14, r7
 8001920:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001924:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800192c:	ee17 2a90 	vmov	r2, s15
 8001930:	fa1f fa82 	uxth.w	sl, r2
  uint16 XPOS = 0, YPOS = 0;
 8001934:	2500      	movs	r5, #0
 8001936:	e7b1      	b.n	800189c <Progress_bar+0x74>
         STPOS = StopPos - StartPos;
 8001938:	1b42      	subs	r2, r0, r5
 800193a:	ee06 2a10 	vmov	s12, r2
 800193e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
         POSCOUNT = (XEnd - XStart)/STPOS;
 8001942:	eba8 0206 	sub.w	r2, r8, r6
 8001946:	ee05 2a90 	vmov	s11, r2
 800194a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800194e:	eec5 6a86 	vdiv.f32	s13, s11, s12
         XPOS = (uint16)((POSN - StartPos * POSCOUNT)+ XStart + 1 + Tr);
 8001952:	ee07 5a10 	vmov	s14, r5
 8001956:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800195a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800195e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001962:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8001966:	ee07 6a10 	vmov	s14, r6
 800196a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800196e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001976:	ee77 6a26 	vadd.f32	s13, s14, s13
 800197a:	ee07 7a10 	vmov	s14, r7
 800197e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001982:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001986:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800198a:	ee17 2a10 	vmov	r2, s14
 800198e:	fa1f fa82 	uxth.w	sl, r2
 8001992:	e7a8      	b.n	80018e6 <Progress_bar+0xbe>
         STPOS = StopPos - StartPos;
 8001994:	1b42      	subs	r2, r0, r5
 8001996:	ee06 2a10 	vmov	s12, r2
 800199a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
         POSCOUNT = (XEnd - XStart)/STPOS;
 800199e:	eba8 0206 	sub.w	r2, r8, r6
 80019a2:	ee05 2a90 	vmov	s11, r2
 80019a6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80019aa:	ee85 7a86 	vdiv.f32	s14, s11, s12
         XPOS = (uint16)((POSN * POSCOUNT)+ XStart + Tr);
 80019ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019b2:	ee66 6a87 	vmul.f32	s13, s13, s14
 80019b6:	ee07 6a10 	vmov	s14, r6
 80019ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80019be:	ee77 6a26 	vadd.f32	s13, s14, s13
 80019c2:	ee07 7a10 	vmov	s14, r7
 80019c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80019ca:	ee37 7a26 	vadd.f32	s14, s14, s13
 80019ce:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80019d2:	ee17 2a10 	vmov	r2, s14
 80019d6:	fa1f fa82 	uxth.w	sl, r2
 80019da:	e786      	b.n	80018ea <Progress_bar+0xc2>
  uint16 XPOS = 0, YPOS = 0;
 80019dc:	2500      	movs	r5, #0
 80019de:	e75d      	b.n	800189c <Progress_bar+0x74>
      FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,Tolshina);
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	9302      	str	r3, [sp, #8]
 80019e4:	b223      	sxth	r3, r4
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	fa0f f389 	sxth.w	r3, r9
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	fa0f f388 	sxth.w	r3, r8
 80019f2:	b232      	sxth	r2, r6
 80019f4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80019f6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80019f8:	f7ff faf8 	bl	8000fec <FramePanel>
      Fill_Rectangle(BarColor,XStart + 1 + Tr,XPOS-1,YStart + 1 + Tr,YEnd - Tr - 1);
 80019fc:	1c71      	adds	r1, r6, #1
 80019fe:	f109 0301 	add.w	r3, r9, #1
 8001a02:	1be4      	subs	r4, r4, r7
 8001a04:	3c01      	subs	r4, #1
 8001a06:	9400      	str	r4, [sp, #0]
 8001a08:	443b      	add	r3, r7
 8001a0a:	f10a 32ff 	add.w	r2, sl, #4294967295
 8001a0e:	4439      	add	r1, r7
 8001a10:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001a12:	f7ff fa71 	bl	8000ef8 <Fill_Rectangle>
 8001a16:	e75e      	b.n	80018d6 <Progress_bar+0xae>

08001a18 <Progress_bar_gradientB_V>:
void Progress_bar_gradientB_V(uint16 XStart, uint16 XEnd, uint16 YStart, uint16 YEnd, uint16 StartPos, uint16 StopPos, uint16 CurrPos, uint32 BorderColor, uint32 FloodColor, uint32 BarColorH, uint32 BarColorC, uint16 Tolshina, uint8 Orient)//++
{
 8001a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a1c:	b085      	sub	sp, #20
 8001a1e:	4605      	mov	r5, r0
 8001a20:	460f      	mov	r7, r1
 8001a22:	4691      	mov	r9, r2
 8001a24:	461c      	mov	r4, r3
 8001a26:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
 8001a2a:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8001a2e:	f8bd e040 	ldrh.w	lr, [sp, #64]	; 0x40
 8001a32:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8001a36:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8001a3a:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
	  uint16 Tr = Tolshina - 1;
 8001a3e:	1e5e      	subs	r6, r3, #1
 8001a40:	b2b6      	uxth	r6, r6
	  float STPOS;
	  float POSCOUNT;
	  uint16 XPOS = 0, YPOS = 0;
	  uint16 POSN = CurrPos - StartPos;
 8001a42:	ebae 010c 	sub.w	r1, lr, ip
 8001a46:	b289      	uxth	r1, r1
 8001a48:	ee07 1a90 	vmov	s15, r1

	  if(Orient == Horisontal)
 8001a4c:	2a03      	cmp	r2, #3
 8001a4e:	d049      	beq.n	8001ae4 <Progress_bar_gradientB_V+0xcc>
	         XPOS = (uint16)((POSN * POSCOUNT)+ XStart);
	      }
	  }
	  else
	  {
	      STPOS = StopPos - StartPos;
 8001a50:	eba0 010c 	sub.w	r1, r0, ip
 8001a54:	ee06 1a90 	vmov	s13, r1
 8001a58:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	      POSCOUNT = (YEnd - YStart)/STPOS;
 8001a5c:	eba4 0109 	sub.w	r1, r4, r9
 8001a60:	ee06 1a10 	vmov	s12, r1
 8001a64:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001a68:	ee86 7a26 	vdiv.f32	s14, s12, s13
	      YPOS = (uint16)(YEnd - (POSN * POSCOUNT));
 8001a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a70:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a74:	ee07 4a90 	vmov	s15, r4
 8001a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a84:	ee17 8a90 	vmov	r8, s15
	      YPOS += Tolshina;
 8001a88:	fa13 f888 	uxtah	r8, r3, r8
 8001a8c:	fa1f f888 	uxth.w	r8, r8
	  uint16 XPOS = 0, YPOS = 0;
 8001a90:	f04f 0a00 	mov.w	sl, #0
	  }

	  if(Orient == Horisontal)
 8001a94:	2a03      	cmp	r2, #3
 8001a96:	f000 80a3 	beq.w	8001be0 <Progress_bar_gradientB_V+0x1c8>
	      FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,Tolshina);
	      VGradB(XStart + 1 + Tr,XPOS-1,YStart + 1 + Tr,YEnd - 1 - Tr,BarColorH,BarColorC,BarColorH);
	  }
	  else
	  {
		  FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,Tolshina);
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	9302      	str	r3, [sp, #8]
 8001a9e:	b223      	sxth	r3, r4
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	fa0f f289 	sxth.w	r2, r9
 8001aa6:	9200      	str	r2, [sp, #0]
 8001aa8:	b23b      	sxth	r3, r7
 8001aaa:	b22a      	sxth	r2, r5
 8001aac:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001aae:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001ab0:	f7ff fa9c 	bl	8000fec <FramePanel>
		  VGradB(XStart + 1 + Tr, XEnd - Tr - 1, YPOS, YEnd - Tr - 1, BarColorH, BarColorC, BarColorH);
 8001ab4:	1970      	adds	r0, r6, r5
 8001ab6:	3001      	adds	r0, #1
 8001ab8:	1bb9      	subs	r1, r7, r6
 8001aba:	b289      	uxth	r1, r1
 8001abc:	3901      	subs	r1, #1
 8001abe:	1ba3      	subs	r3, r4, r6
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	f8cd b008 	str.w	fp, [sp, #8]
 8001ac8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001aca:	9201      	str	r2, [sp, #4]
 8001acc:	f8cd b000 	str.w	fp, [sp]
 8001ad0:	b21b      	sxth	r3, r3
 8001ad2:	fa0f f288 	sxth.w	r2, r8
 8001ad6:	b209      	sxth	r1, r1
 8001ad8:	b200      	sxth	r0, r0
 8001ada:	f7ff fe61 	bl	80017a0 <VGradB>
	  }
}
 8001ade:	b005      	add	sp, #20
 8001ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	      if(CurrPos == 1)
 8001ae4:	f1be 0f01 	cmp.w	lr, #1
 8001ae8:	d025      	beq.n	8001b36 <Progress_bar_gradientB_V+0x11e>
	  uint16 XPOS = 0, YPOS = 0;
 8001aea:	f04f 0a00 	mov.w	sl, #0
	      if(CurrPos == StartPos)
 8001aee:	45e6      	cmp	lr, ip
 8001af0:	d04f      	beq.n	8001b92 <Progress_bar_gradientB_V+0x17a>
	      if(CurrPos > StartPos)
 8001af2:	45e6      	cmp	lr, ip
 8001af4:	d971      	bls.n	8001bda <Progress_bar_gradientB_V+0x1c2>
	         STPOS = StopPos - StartPos;
 8001af6:	eba0 000c 	sub.w	r0, r0, ip
 8001afa:	ee07 0a10 	vmov	s14, r0
 8001afe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
	         POSCOUNT = (XEnd - XStart)/STPOS;
 8001b02:	1b79      	subs	r1, r7, r5
 8001b04:	ee06 1a10 	vmov	s12, r1
 8001b08:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001b0c:	ee86 7a26 	vdiv.f32	s14, s12, s13
	         XPOS = (uint16)((POSN * POSCOUNT)+ XStart);
 8001b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b18:	ee07 5a90 	vmov	s15, r5
 8001b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b28:	ee17 1a90 	vmov	r1, s15
 8001b2c:	fa1f fa81 	uxth.w	sl, r1
	  uint16 XPOS = 0, YPOS = 0;
 8001b30:	f04f 0800 	mov.w	r8, #0
 8001b34:	e7ae      	b.n	8001a94 <Progress_bar_gradientB_V+0x7c>
	         STPOS = StopPos - StartPos;
 8001b36:	eba0 010c 	sub.w	r1, r0, ip
 8001b3a:	ee06 1a10 	vmov	s12, r1
 8001b3e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	         POSCOUNT = (XEnd - XStart)/STPOS;
 8001b42:	1b79      	subs	r1, r7, r5
 8001b44:	ee05 1a90 	vmov	s11, r1
 8001b48:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001b4c:	eec5 6a86 	vdiv.f32	s13, s11, s12
	         XPOS = (uint16)((POSN - StartPos * POSCOUNT)+ XStart + 1 + Tr);
 8001b50:	ee07 ca10 	vmov	s14, ip
 8001b54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b58:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001b5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b60:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8001b64:	ee07 5a10 	vmov	s14, r5
 8001b68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b6c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001b70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b74:	ee77 6a26 	vadd.f32	s13, s14, s13
 8001b78:	ee07 6a10 	vmov	s14, r6
 8001b7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b80:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001b84:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8001b88:	ee17 1a10 	vmov	r1, s14
 8001b8c:	fa1f fa81 	uxth.w	sl, r1
 8001b90:	e7ad      	b.n	8001aee <Progress_bar_gradientB_V+0xd6>
	         STPOS = StopPos - StartPos;
 8001b92:	eba0 010c 	sub.w	r1, r0, ip
 8001b96:	ee06 1a10 	vmov	s12, r1
 8001b9a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	         POSCOUNT = (XEnd - XStart)/STPOS;
 8001b9e:	1b79      	subs	r1, r7, r5
 8001ba0:	ee05 1a90 	vmov	s11, r1
 8001ba4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001ba8:	ee85 7a86 	vdiv.f32	s14, s11, s12
	         XPOS = (uint16)((POSN * POSCOUNT)+ XStart + Tr);
 8001bac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bb0:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001bb4:	ee07 5a10 	vmov	s14, r5
 8001bb8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001bbc:	ee77 6a26 	vadd.f32	s13, s14, s13
 8001bc0:	ee07 6a10 	vmov	s14, r6
 8001bc4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001bc8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001bcc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8001bd0:	ee17 1a10 	vmov	r1, s14
 8001bd4:	fa1f fa81 	uxth.w	sl, r1
 8001bd8:	e78b      	b.n	8001af2 <Progress_bar_gradientB_V+0xda>
	  uint16 XPOS = 0, YPOS = 0;
 8001bda:	f04f 0800 	mov.w	r8, #0
 8001bde:	e759      	b.n	8001a94 <Progress_bar_gradientB_V+0x7c>
	      FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,Tolshina);
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	9302      	str	r3, [sp, #8]
 8001be4:	b223      	sxth	r3, r4
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	fa0f f389 	sxth.w	r3, r9
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	b23b      	sxth	r3, r7
 8001bf0:	b22a      	sxth	r2, r5
 8001bf2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001bf4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001bf6:	f7ff f9f9 	bl	8000fec <FramePanel>
	      VGradB(XStart + 1 + Tr,XPOS-1,YStart + 1 + Tr,YEnd - 1 - Tr,BarColorH,BarColorC,BarColorH);
 8001bfa:	1970      	adds	r0, r6, r5
 8001bfc:	3001      	adds	r0, #1
 8001bfe:	f10a 31ff 	add.w	r1, sl, #4294967295
 8001c02:	eb06 0209 	add.w	r2, r6, r9
 8001c06:	3201      	adds	r2, #1
 8001c08:	1ba4      	subs	r4, r4, r6
 8001c0a:	1e63      	subs	r3, r4, #1
 8001c0c:	f8cd b008 	str.w	fp, [sp, #8]
 8001c10:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8001c12:	9401      	str	r4, [sp, #4]
 8001c14:	f8cd b000 	str.w	fp, [sp]
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	b212      	sxth	r2, r2
 8001c1c:	b209      	sxth	r1, r1
 8001c1e:	b200      	sxth	r0, r0
 8001c20:	f7ff fdbe 	bl	80017a0 <VGradB>
 8001c24:	e75b      	b.n	8001ade <Progress_bar_gradientB_V+0xc6>

08001c26 <Inverse>:
uint8 Inverse(uint8 S)
{
	uint8 K = 0;
	for(uint8 i = 0; i<8; i++)
 8001c26:	2300      	movs	r3, #0
	uint8 K = 0;
 8001c28:	461a      	mov	r2, r3
	for(uint8 i = 0; i<8; i++)
 8001c2a:	e006      	b.n	8001c3a <Inverse+0x14>
	{
		if((S & 0x01) != 0)
		{
			K = K | 0x01;
		}
		S = S >> 1;
 8001c2c:	0840      	lsrs	r0, r0, #1
		if(i<7)
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d801      	bhi.n	8001c36 <Inverse+0x10>
		{
		  K = K << 1;
 8001c32:	0052      	lsls	r2, r2, #1
 8001c34:	b2d2      	uxtb	r2, r2
	for(uint8 i = 0; i<8; i++)
 8001c36:	3301      	adds	r3, #1
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b07      	cmp	r3, #7
 8001c3c:	d805      	bhi.n	8001c4a <Inverse+0x24>
		if((S & 0x01) != 0)
 8001c3e:	f010 0f01 	tst.w	r0, #1
 8001c42:	d0f3      	beq.n	8001c2c <Inverse+0x6>
			K = K | 0x01;
 8001c44:	f042 0201 	orr.w	r2, r2, #1
 8001c48:	e7f0      	b.n	8001c2c <Inverse+0x6>
	    }
	}
	return K;
}
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	4770      	bx	lr
	...

08001c50 <Symbol>:
void Symbol(uint16 X, uint16 Y, uint16 *NextX, uint16 *NextY, uint8 *CharWt, uint8 *CharHt, uint32 Color, char Symbol)
{
 8001c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c54:	b083      	sub	sp, #12
 8001c56:	4682      	mov	sl, r0
 8001c58:	460d      	mov	r5, r1
 8001c5a:	9100      	str	r1, [sp, #0]
	uint8 FontH = calibri[1];
 8001c5c:	4965      	ldr	r1, [pc, #404]	; (8001df4 <Symbol+0x1a4>)
 8001c5e:	f891 b001 	ldrb.w	fp, [r1, #1]
	uint8 FirstChar = calibri[2];
 8001c62:	788c      	ldrb	r4, [r1, #2]
	uint8 NumOfChar = calibri[3];
	uint8 Cursor = Symbol - FirstChar;
 8001c64:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8001c68:	1b00      	subs	r0, r0, r4
 8001c6a:	b2c0      	uxtb	r0, r0
	uint16 SymbStartPos = 4 + NumOfChar;
 8001c6c:	78ce      	ldrb	r6, [r1, #3]
 8001c6e:	3604      	adds	r6, #4
	uint8 CharW = calibri[Cursor + 4];
 8001c70:	3004      	adds	r0, #4
 8001c72:	f811 8000 	ldrb.w	r8, [r1, r0]
	uint16 i, j, k = 0;
	uint32 CharBit = 0;

	*NextX = X + CharW;
 8001c76:	eb0a 0108 	add.w	r1, sl, r8
 8001c7a:	8011      	strh	r1, [r2, #0]
	*NextY = Y + FontH;
 8001c7c:	fa1f f48b 	uxth.w	r4, fp
 8001c80:	1962      	adds	r2, r4, r5
 8001c82:	801a      	strh	r2, [r3, #0]
	*CharWt = CharW;
 8001c84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001c86:	f883 8000 	strb.w	r8, [r3]
	*CharHt = FontH;
 8001c8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001c8c:	f883 b000 	strb.w	fp, [r3]
	for(i = 4; i < Cursor + 4; i++)
 8001c90:	2204      	movs	r2, #4
 8001c92:	e001      	b.n	8001c98 <Symbol+0x48>
 8001c94:	3201      	adds	r2, #1
 8001c96:	b292      	uxth	r2, r2
 8001c98:	4290      	cmp	r0, r2
 8001c9a:	dd1e      	ble.n	8001cda <Symbol+0x8a>
	{
	   	if(calibri[i] <= 8)
 8001c9c:	4b55      	ldr	r3, [pc, #340]	; (8001df4 <Symbol+0x1a4>)
 8001c9e:	5c9b      	ldrb	r3, [r3, r2]
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d801      	bhi.n	8001ca8 <Symbol+0x58>
	   	{
	   	   SymbStartPos += FontH;
 8001ca4:	4426      	add	r6, r4
 8001ca6:	b2b6      	uxth	r6, r6
	   	}

	   	if(calibri[i] > 8 && calibri[i] <= 16)
 8001ca8:	f1a3 0109 	sub.w	r1, r3, #9
 8001cac:	b2c9      	uxtb	r1, r1
 8001cae:	2907      	cmp	r1, #7
 8001cb0:	d802      	bhi.n	8001cb8 <Symbol+0x68>
		{
	   		SymbStartPos += FontH * 2;
 8001cb2:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 8001cb6:	b2b6      	uxth	r6, r6
		}

	   	if(calibri[i] > 16 && calibri[i] <= 24)
 8001cb8:	f1a3 0111 	sub.w	r1, r3, #17
 8001cbc:	b2c9      	uxtb	r1, r1
 8001cbe:	2907      	cmp	r1, #7
 8001cc0:	d803      	bhi.n	8001cca <Symbol+0x7a>
		{
	   		SymbStartPos += FontH * 3;
 8001cc2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8001cc6:	440e      	add	r6, r1
 8001cc8:	b2b6      	uxth	r6, r6
		}
	   	if(calibri[i] > 24 && calibri[i] <= 32)
 8001cca:	3b19      	subs	r3, #25
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b07      	cmp	r3, #7
 8001cd0:	d8e0      	bhi.n	8001c94 <Symbol+0x44>
		{
	   		SymbStartPos += FontH * 4;
 8001cd2:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8001cd6:	b2b6      	uxth	r6, r6
 8001cd8:	e7dc      	b.n	8001c94 <Symbol+0x44>
		}
	}

	for(i = Y; i < Y + FontH; i++)
 8001cda:	f8dd 9000 	ldr.w	r9, [sp]
	uint32 CharBit = 0;
 8001cde:	2500      	movs	r5, #0
	uint16 i, j, k = 0;
 8001ce0:	462f      	mov	r7, r5
 8001ce2:	e01a      	b.n	8001d1a <Symbol+0xca>
      		    if(i < DispHeight && j < DispWidth)
      		    {
      		    	MemPoint(j,i,Color);
      	        }
            }
            CharBit = CharBit << 1;
 8001ce4:	006d      	lsls	r5, r5, #1
		for(j = X; j < X + CharW; j++)
 8001ce6:	3401      	adds	r4, #1
 8001ce8:	b2a4      	uxth	r4, r4
 8001cea:	4620      	mov	r0, r4
 8001cec:	eb0a 0308 	add.w	r3, sl, r8
 8001cf0:	429c      	cmp	r4, r3
 8001cf2:	da0e      	bge.n	8001d12 <Symbol+0xc2>
            if((CharBit & 0x80000000) != 0)
 8001cf4:	2d00      	cmp	r5, #0
 8001cf6:	daf5      	bge.n	8001ce4 <Symbol+0x94>
      		    if(i < DispHeight && j < DispWidth)
 8001cf8:	4b3f      	ldr	r3, [pc, #252]	; (8001df8 <Symbol+0x1a8>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4599      	cmp	r9, r3
 8001cfe:	d2f1      	bcs.n	8001ce4 <Symbol+0x94>
 8001d00:	4b3e      	ldr	r3, [pc, #248]	; (8001dfc <Symbol+0x1ac>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	429c      	cmp	r4, r3
 8001d06:	d2ed      	bcs.n	8001ce4 <Symbol+0x94>
      		    	MemPoint(j,i,Color);
 8001d08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001d0a:	9901      	ldr	r1, [sp, #4]
 8001d0c:	f7ff f854 	bl	8000db8 <MemPoint>
 8001d10:	e7e8      	b.n	8001ce4 <Symbol+0x94>
	for(i = Y; i < Y + FontH; i++)
 8001d12:	f109 0901 	add.w	r9, r9, #1
 8001d16:	fa1f f989 	uxth.w	r9, r9
 8001d1a:	f8cd 9004 	str.w	r9, [sp, #4]
 8001d1e:	9b00      	ldr	r3, [sp, #0]
 8001d20:	445b      	add	r3, fp
 8001d22:	4599      	cmp	r9, r3
 8001d24:	da62      	bge.n	8001dec <Symbol+0x19c>
		if(CharW <= 8)
 8001d26:	f1b8 0f08 	cmp.w	r8, #8
 8001d2a:	d807      	bhi.n	8001d3c <Symbol+0xec>
			CharBit = Inverse(calibri[SymbStartPos + k]);
 8001d2c:	19f3      	adds	r3, r6, r7
 8001d2e:	4a31      	ldr	r2, [pc, #196]	; (8001df4 <Symbol+0x1a4>)
 8001d30:	5cd0      	ldrb	r0, [r2, r3]
 8001d32:	f7ff ff78 	bl	8001c26 <Inverse>
			CharBit = CharBit << 24;
 8001d36:	0605      	lsls	r5, r0, #24
			k++;
 8001d38:	3701      	adds	r7, #1
 8001d3a:	b2bf      	uxth	r7, r7
		if(CharW > 8 && CharW <= 16)
 8001d3c:	f1a8 0309 	sub.w	r3, r8, #9
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b07      	cmp	r3, #7
 8001d44:	d80f      	bhi.n	8001d66 <Symbol+0x116>
			CharBit = Inverse(calibri[SymbStartPos + k]);
 8001d46:	19bb      	adds	r3, r7, r6
 8001d48:	4c2a      	ldr	r4, [pc, #168]	; (8001df4 <Symbol+0x1a4>)
 8001d4a:	5ce0      	ldrb	r0, [r4, r3]
 8001d4c:	f7ff ff6b 	bl	8001c26 <Inverse>
			k++;
 8001d50:	1c7b      	adds	r3, r7, #1
			CharBit = CharBit << 8;
 8001d52:	0205      	lsls	r5, r0, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 8001d54:	fa16 f383 	uxtah	r3, r6, r3
 8001d58:	5ce0      	ldrb	r0, [r4, r3]
 8001d5a:	f7ff ff64 	bl	8001c26 <Inverse>
 8001d5e:	4305      	orrs	r5, r0
			CharBit = CharBit << 16;
 8001d60:	042d      	lsls	r5, r5, #16
			k++;
 8001d62:	3702      	adds	r7, #2
 8001d64:	b2bf      	uxth	r7, r7
		if(CharW > 16 && CharW <= 24)
 8001d66:	f1a8 0311 	sub.w	r3, r8, #17
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b07      	cmp	r3, #7
 8001d6e:	d817      	bhi.n	8001da0 <Symbol+0x150>
			CharBit = Inverse(calibri[SymbStartPos + k]);
 8001d70:	19bb      	adds	r3, r7, r6
 8001d72:	4c20      	ldr	r4, [pc, #128]	; (8001df4 <Symbol+0x1a4>)
 8001d74:	5ce0      	ldrb	r0, [r4, r3]
 8001d76:	f7ff ff56 	bl	8001c26 <Inverse>
			k++;
 8001d7a:	1c7b      	adds	r3, r7, #1
			CharBit = CharBit << 8;
 8001d7c:	0205      	lsls	r5, r0, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 8001d7e:	fa16 f383 	uxtah	r3, r6, r3
 8001d82:	5ce0      	ldrb	r0, [r4, r3]
 8001d84:	f7ff ff4f 	bl	8001c26 <Inverse>
 8001d88:	4305      	orrs	r5, r0
			k++;
 8001d8a:	1cbb      	adds	r3, r7, #2
			CharBit = CharBit << 8;
 8001d8c:	022d      	lsls	r5, r5, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 8001d8e:	fa16 f383 	uxtah	r3, r6, r3
 8001d92:	5ce0      	ldrb	r0, [r4, r3]
 8001d94:	f7ff ff47 	bl	8001c26 <Inverse>
 8001d98:	4305      	orrs	r5, r0
			CharBit = CharBit << 8;
 8001d9a:	022d      	lsls	r5, r5, #8
			k++;
 8001d9c:	3703      	adds	r7, #3
 8001d9e:	b2bf      	uxth	r7, r7
		if(CharW > 24 && CharW <= 32)
 8001da0:	f1a8 0319 	sub.w	r3, r8, #25
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b07      	cmp	r3, #7
 8001da8:	d81e      	bhi.n	8001de8 <Symbol+0x198>
			CharBit = Inverse(calibri[SymbStartPos + k]);
 8001daa:	19bb      	adds	r3, r7, r6
 8001dac:	4c11      	ldr	r4, [pc, #68]	; (8001df4 <Symbol+0x1a4>)
 8001dae:	5ce0      	ldrb	r0, [r4, r3]
 8001db0:	f7ff ff39 	bl	8001c26 <Inverse>
			k++;
 8001db4:	1c7b      	adds	r3, r7, #1
			CharBit = CharBit << 8;
 8001db6:	0205      	lsls	r5, r0, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 8001db8:	fa16 f383 	uxtah	r3, r6, r3
 8001dbc:	5ce0      	ldrb	r0, [r4, r3]
 8001dbe:	f7ff ff32 	bl	8001c26 <Inverse>
 8001dc2:	4305      	orrs	r5, r0
			k++;
 8001dc4:	1cbb      	adds	r3, r7, #2
			CharBit = CharBit << 8;
 8001dc6:	022d      	lsls	r5, r5, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 8001dc8:	fa16 f383 	uxtah	r3, r6, r3
 8001dcc:	5ce0      	ldrb	r0, [r4, r3]
 8001dce:	f7ff ff2a 	bl	8001c26 <Inverse>
 8001dd2:	4305      	orrs	r5, r0
			k++;
 8001dd4:	1cfb      	adds	r3, r7, #3
			CharBit = CharBit << 8;
 8001dd6:	022d      	lsls	r5, r5, #8
			CharBit = CharBit | Inverse(calibri[SymbStartPos + k]);
 8001dd8:	fa16 f383 	uxtah	r3, r6, r3
 8001ddc:	5ce0      	ldrb	r0, [r4, r3]
 8001dde:	f7ff ff22 	bl	8001c26 <Inverse>
 8001de2:	4305      	orrs	r5, r0
			k++;
 8001de4:	3704      	adds	r7, #4
 8001de6:	b2bf      	uxth	r7, r7
		for(j = X; j < X + CharW; j++)
 8001de8:	4654      	mov	r4, sl
 8001dea:	e77e      	b.n	8001cea <Symbol+0x9a>
		}
	}
}
 8001dec:	b003      	add	sp, #12
 8001dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001df2:	bf00      	nop
 8001df4:	08006208 	.word	0x08006208
 8001df8:	20000038 	.word	0x20000038
 8001dfc:	2000003c 	.word	0x2000003c

08001e00 <Label>:
void Label (uint16 X, uint16 Y, uint32 Color, char String[])//++
{
 8001e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e04:	b087      	sub	sp, #28
 8001e06:	4607      	mov	r7, r0
 8001e08:	4688      	mov	r8, r1
 8001e0a:	4691      	mov	r9, r2
 8001e0c:	461e      	mov	r6, r3
  uint16 Nx = 0, Ny = 0;
 8001e0e:	2500      	movs	r5, #0
 8001e10:	f8ad 5016 	strh.w	r5, [sp, #22]
 8001e14:	f8ad 5014 	strh.w	r5, [sp, #20]
  uint16 Sym = 0;
  uint8 ChW = 0;
 8001e18:	f88d 5013 	strb.w	r5, [sp, #19]
  uint8 ChH = 0;
 8001e1c:	f88d 5012 	strb.w	r5, [sp, #18]
  while(String[Sym]!=0)
 8001e20:	e001      	b.n	8001e26 <Label+0x26>
  {
  	Sym++;
 8001e22:	3501      	adds	r5, #1
 8001e24:	b2ad      	uxth	r5, r5
  while(String[Sym]!=0)
 8001e26:	5d73      	ldrb	r3, [r6, r5]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1fa      	bne.n	8001e22 <Label+0x22>
  }
  for(uint16 i = 0; i<Sym; i++)
 8001e2c:	2400      	movs	r4, #0
 8001e2e:	e003      	b.n	8001e38 <Label+0x38>

  		Symbol(X, Y, &Nx, &Ny,&ChW,&ChH, Color, String[i]);

  		if(X + ChW < DispWidth)
  		{
  		   X = Nx;
 8001e30:	f8bd 7016 	ldrh.w	r7, [sp, #22]
  for(uint16 i = 0; i<Sym; i++)
 8001e34:	3401      	adds	r4, #1
 8001e36:	b2a4      	uxth	r4, r4
 8001e38:	42a5      	cmp	r5, r4
 8001e3a:	d919      	bls.n	8001e70 <Label+0x70>
  	if(String[i]>= 0x20 && String[i]<= 0xFF)
 8001e3c:	5d33      	ldrb	r3, [r6, r4]
 8001e3e:	2b1f      	cmp	r3, #31
 8001e40:	d9f8      	bls.n	8001e34 <Label+0x34>
  		Symbol(X, Y, &Nx, &Ny,&ChW,&ChH, Color, String[i]);
 8001e42:	9303      	str	r3, [sp, #12]
 8001e44:	f8cd 9008 	str.w	r9, [sp, #8]
 8001e48:	f10d 0312 	add.w	r3, sp, #18
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	f10d 0313 	add.w	r3, sp, #19
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	ab05      	add	r3, sp, #20
 8001e56:	f10d 0216 	add.w	r2, sp, #22
 8001e5a:	4641      	mov	r1, r8
 8001e5c:	4638      	mov	r0, r7
 8001e5e:	f7ff fef7 	bl	8001c50 <Symbol>
  		if(X + ChW < DispWidth)
 8001e62:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8001e66:	441f      	add	r7, r3
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <Label+0x78>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	429f      	cmp	r7, r3
 8001e6e:	d3df      	bcc.n	8001e30 <Label+0x30>
  		}

  	}
  }

}
 8001e70:	b007      	add	sp, #28
 8001e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e76:	bf00      	nop
 8001e78:	2000003c 	.word	0x2000003c

08001e7c <TrackBar>:
{
  FramePanel(BColor,FloodColor,x1, x2, y1, y1+19, Tolshina);
  Label(x1+2,y1+1, TextColor, Text);
}
void TrackBar(int16 XStart, int16 XEnd, int16 YStart, int16 YEnd, int16 StartPos, int16 StopPos, int16 CurrPos, int32 BorderColor, uint32 FloodColor, uint32 TrackerColor, uint8 Orient, uint8 Rad)
{
 8001e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	4604      	mov	r4, r0
 8001e84:	460d      	mov	r5, r1
 8001e86:	4690      	mov	r8, r2
 8001e88:	461f      	mov	r7, r3
 8001e8a:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8001e8e:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8001e92:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8001e96:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8001e9a:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
	  float STPOS;
	  float POSCOUNT;
	  uint16 XPOS = 0, YPOS = 0;
	  uint16 POSN = CurrPos - StartPos;
 8001e9e:	fa1f f38e 	uxth.w	r3, lr
 8001ea2:	fa1f f28c 	uxth.w	r2, ip
 8001ea6:	1a9b      	subs	r3, r3, r2
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	ee07 3a90 	vmov	s15, r3

	  if(Orient == Horisontal)
 8001eae:	2803      	cmp	r0, #3
 8001eb0:	d03b      	beq.n	8001f2a <TrackBar+0xae>
	         XPOS = (uint16)((POSN * POSCOUNT)+ XStart);
	      }
	  }
	  else
	  {
	      STPOS = StopPos - StartPos;
 8001eb2:	eba1 030c 	sub.w	r3, r1, ip
 8001eb6:	ee07 3a10 	vmov	s14, r3
 8001eba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	      POSCOUNT = (YEnd - YStart)/STPOS;
 8001ebe:	eba7 0308 	sub.w	r3, r7, r8
 8001ec2:	ee06 3a90 	vmov	s13, r3
 8001ec6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001eca:	ee86 6a87 	vdiv.f32	s12, s13, s14
	      YPOS = (uint16)(YEnd - (POSN * POSCOUNT));
 8001ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001ed6:	ee07 7a10 	vmov	s14, r7
 8001eda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ee6:	ee17 3a90 	vmov	r3, s15
 8001eea:	fa1f f983 	uxth.w	r9, r3
	  uint16 XPOS = 0, YPOS = 0;
 8001eee:	f04f 0a00 	mov.w	sl, #0
	  }

	  if(Orient == Horisontal)
 8001ef2:	2803      	cmp	r0, #3
 8001ef4:	f000 808b 	beq.w	800200e <TrackBar+0x192>
	      FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,1);
	      FillCircle(XPOS,YStart + (YEnd - YStart) / 2, Rad, TrackerColor);
	  }
	  else
	  {
		  FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,1);
 8001ef8:	2301      	movs	r3, #1
 8001efa:	9302      	str	r3, [sp, #8]
 8001efc:	9701      	str	r7, [sp, #4]
 8001efe:	f8cd 8000 	str.w	r8, [sp]
 8001f02:	462b      	mov	r3, r5
 8001f04:	4622      	mov	r2, r4
 8001f06:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001f08:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001f0a:	f7ff f86f 	bl	8000fec <FramePanel>
		  FillCircle(XStart + ((XEnd - XStart) / 2),YPOS,Rad,TrackerColor);
 8001f0e:	1b28      	subs	r0, r5, r4
 8001f10:	f100 8096 	bmi.w	8002040 <TrackBar+0x1c4>
 8001f14:	eb04 0060 	add.w	r0, r4, r0, asr #1
 8001f18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001f1a:	4632      	mov	r2, r6
 8001f1c:	4649      	mov	r1, r9
 8001f1e:	b280      	uxth	r0, r0
 8001f20:	f7ff fa2c 	bl	800137c <FillCircle>
	  }
}
 8001f24:	b004      	add	sp, #16
 8001f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	      if(CurrPos == 1)
 8001f2a:	f1be 0f01 	cmp.w	lr, #1
 8001f2e:	d025      	beq.n	8001f7c <TrackBar+0x100>
	  uint16 XPOS = 0, YPOS = 0;
 8001f30:	f04f 0a00 	mov.w	sl, #0
	      if(CurrPos == StartPos)
 8001f34:	45e6      	cmp	lr, ip
 8001f36:	d049      	beq.n	8001fcc <TrackBar+0x150>
	      if(CurrPos > StartPos)
 8001f38:	45e6      	cmp	lr, ip
 8001f3a:	dd65      	ble.n	8002008 <TrackBar+0x18c>
	         STPOS = StopPos - StartPos;
 8001f3c:	eba1 010c 	sub.w	r1, r1, ip
 8001f40:	ee07 1a10 	vmov	s14, r1
 8001f44:	eef8 6ac7 	vcvt.f32.s32	s13, s14
	         POSCOUNT = (XEnd - XStart)/STPOS;
 8001f48:	1b2b      	subs	r3, r5, r4
 8001f4a:	ee06 3a10 	vmov	s12, r3
 8001f4e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001f52:	ee86 7a26 	vdiv.f32	s14, s12, s13
	         XPOS = (uint16)((POSN * POSCOUNT)+ XStart);
 8001f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f5a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f5e:	ee07 4a90 	vmov	s15, r4
 8001f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f6e:	ee17 3a90 	vmov	r3, s15
 8001f72:	fa1f fa83 	uxth.w	sl, r3
	  uint16 XPOS = 0, YPOS = 0;
 8001f76:	f04f 0900 	mov.w	r9, #0
 8001f7a:	e7ba      	b.n	8001ef2 <TrackBar+0x76>
	         STPOS = StopPos - StartPos;
 8001f7c:	eba1 030c 	sub.w	r3, r1, ip
 8001f80:	ee06 3a10 	vmov	s12, r3
 8001f84:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	         POSCOUNT = (XEnd - XStart)/STPOS;
 8001f88:	1b2b      	subs	r3, r5, r4
 8001f8a:	ee05 3a90 	vmov	s11, r3
 8001f8e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001f92:	ee85 7a86 	vdiv.f32	s14, s11, s12
	         XPOS = (uint16)((POSN - StartPos * POSCOUNT)+ XStart + 1);
 8001f96:	ee06 ca90 	vmov	s13, ip
 8001f9a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001f9e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001fa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fa6:	ee77 6a66 	vsub.f32	s13, s14, s13
 8001faa:	ee07 4a10 	vmov	s14, r4
 8001fae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001fb2:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fba:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001fbe:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8001fc2:	ee17 3a10 	vmov	r3, s14
 8001fc6:	fa1f fa83 	uxth.w	sl, r3
 8001fca:	e7b3      	b.n	8001f34 <TrackBar+0xb8>
	         STPOS = StopPos - StartPos;
 8001fcc:	eba1 030c 	sub.w	r3, r1, ip
 8001fd0:	ee06 3a10 	vmov	s12, r3
 8001fd4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	         POSCOUNT = (XEnd - XStart)/STPOS;
 8001fd8:	1b2b      	subs	r3, r5, r4
 8001fda:	ee05 3a90 	vmov	s11, r3
 8001fde:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001fe2:	eec5 6a86 	vdiv.f32	s13, s11, s12
	         XPOS = (uint16)((POSN * POSCOUNT)+ XStart);
 8001fe6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fea:	ee67 6a26 	vmul.f32	s13, s14, s13
 8001fee:	ee07 4a10 	vmov	s14, r4
 8001ff2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ff6:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001ffa:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8001ffe:	ee17 3a10 	vmov	r3, s14
 8002002:	fa1f fa83 	uxth.w	sl, r3
 8002006:	e797      	b.n	8001f38 <TrackBar+0xbc>
	  uint16 XPOS = 0, YPOS = 0;
 8002008:	f04f 0900 	mov.w	r9, #0
 800200c:	e771      	b.n	8001ef2 <TrackBar+0x76>
	      FramePanel(BorderColor,FloodColor,XStart,XEnd,YStart, YEnd,1);
 800200e:	2301      	movs	r3, #1
 8002010:	9302      	str	r3, [sp, #8]
 8002012:	9701      	str	r7, [sp, #4]
 8002014:	f8cd 8000 	str.w	r8, [sp]
 8002018:	462b      	mov	r3, r5
 800201a:	4622      	mov	r2, r4
 800201c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800201e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002020:	f7fe ffe4 	bl	8000fec <FramePanel>
	      FillCircle(XPOS,YStart + (YEnd - YStart) / 2, Rad, TrackerColor);
 8002024:	ebb7 0708 	subs.w	r7, r7, r8
 8002028:	d408      	bmi.n	800203c <TrackBar+0x1c0>
 800202a:	eb08 0767 	add.w	r7, r8, r7, asr #1
 800202e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002030:	4632      	mov	r2, r6
 8002032:	b2b9      	uxth	r1, r7
 8002034:	4650      	mov	r0, sl
 8002036:	f7ff f9a1 	bl	800137c <FillCircle>
 800203a:	e773      	b.n	8001f24 <TrackBar+0xa8>
 800203c:	3701      	adds	r7, #1
 800203e:	e7f4      	b.n	800202a <TrackBar+0x1ae>
		  FillCircle(XStart + ((XEnd - XStart) / 2),YPOS,Rad,TrackerColor);
 8002040:	3001      	adds	r0, #1
 8002042:	e767      	b.n	8001f14 <TrackBar+0x98>

08002044 <SymbolLength>:
uint32 SymbolLength(char String[])
{
 8002044:	b430      	push	{r4, r5}
	uint8 FirstChar = calibri[2];
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <SymbolLength+0x28>)
 8002048:	789d      	ldrb	r5, [r3, #2]
	uint8 Cursor = 0;
	uint8 CharW = 0;
	uint32 Len = 0;
	uint32 SymCh = 0;
 800204a:	2200      	movs	r2, #0
	uint32 Len = 0;
 800204c:	4611      	mov	r1, r2

	while(String[SymCh] != 0)
 800204e:	e006      	b.n	800205e <SymbolLength+0x1a>
	{
		Cursor = String[SymCh] - FirstChar;
 8002050:	1b5b      	subs	r3, r3, r5
 8002052:	b2db      	uxtb	r3, r3
		CharW = calibri[Cursor + 4];
 8002054:	3304      	adds	r3, #4
 8002056:	4c05      	ldr	r4, [pc, #20]	; (800206c <SymbolLength+0x28>)
 8002058:	5ce3      	ldrb	r3, [r4, r3]
		Len += CharW;
 800205a:	4419      	add	r1, r3
		SymCh++;
 800205c:	3201      	adds	r2, #1
	while(String[SymCh] != 0)
 800205e:	5c83      	ldrb	r3, [r0, r2]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f5      	bne.n	8002050 <SymbolLength+0xc>
	}
	return Len;
}
 8002064:	4608      	mov	r0, r1
 8002066:	bc30      	pop	{r4, r5}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	08006208 	.word	0x08006208

08002070 <Form>:
			 s++;
		 }
	 }
}
void Form(uint16 x1, uint16 x2, uint16 y1, uint16 y2, uint16 y_S, uint16 TolshinaB, uint32 ColorL, uint32 ColorS, uint32 ColorW,uint32 ColorT,char FormName[])//++
{
 8002070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002074:	b087      	sub	sp, #28
 8002076:	4682      	mov	sl, r0
 8002078:	460e      	mov	r6, r1
 800207a:	4690      	mov	r8, r2
 800207c:	4699      	mov	r9, r3
 800207e:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
 8002082:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
  uint16 k = TolshinaB - 1,txty;
 8002086:	1e6c      	subs	r4, r5, #1
 8002088:	b2a4      	uxth	r4, r4
  txty = y1+((y1+y_S - y1)/2 - 8);
 800208a:	eb02 0167 	add.w	r1, r2, r7, asr #1
 800208e:	b289      	uxth	r1, r1
 8002090:	3908      	subs	r1, #8
 8002092:	fa1f fb81 	uxth.w	fp, r1

  Fill_Rectangle(ColorW,x1,x2,y1,y2);
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	4613      	mov	r3, r2
 800209a:	4632      	mov	r2, r6
 800209c:	4601      	mov	r1, r0
 800209e:	9814      	ldr	r0, [sp, #80]	; 0x50
 80020a0:	f7fe ff2a 	bl	8000ef8 <Fill_Rectangle>
  Fill_Rectangle(ColorS,x1,x2,y1,y1+y_S);
 80020a4:	eb07 0308 	add.w	r3, r7, r8
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	4643      	mov	r3, r8
 80020ac:	4632      	mov	r2, r6
 80020ae:	4651      	mov	r1, sl
 80020b0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80020b2:	f7fe ff21 	bl	8000ef8 <Fill_Rectangle>
  VLine(ColorL,x1,y1,y2,TolshinaB);
 80020b6:	f8cd a010 	str.w	sl, [sp, #16]
 80020ba:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 80020be:	fa0f f288 	sxth.w	r2, r8
 80020c2:	fa0f f389 	sxth.w	r3, r9
 80020c6:	b2ed      	uxtb	r5, r5
 80020c8:	9500      	str	r5, [sp, #0]
 80020ca:	9305      	str	r3, [sp, #20]
 80020cc:	9203      	str	r2, [sp, #12]
 80020ce:	9102      	str	r1, [sp, #8]
 80020d0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80020d2:	f7fe ff7b 	bl	8000fcc <VLine>
  VLine(ColorL,x2-k,y1,y2,TolshinaB);
 80020d6:	eba6 0a04 	sub.w	sl, r6, r4
 80020da:	fa0f fa8a 	sxth.w	sl, sl
 80020de:	9500      	str	r5, [sp, #0]
 80020e0:	9b05      	ldr	r3, [sp, #20]
 80020e2:	9a03      	ldr	r2, [sp, #12]
 80020e4:	4651      	mov	r1, sl
 80020e6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80020e8:	f7fe ff70 	bl	8000fcc <VLine>
  HLine(ColorL,x1,x2,y1,TolshinaB);
 80020ec:	b236      	sxth	r6, r6
 80020ee:	9500      	str	r5, [sp, #0]
 80020f0:	9b03      	ldr	r3, [sp, #12]
 80020f2:	4632      	mov	r2, r6
 80020f4:	9902      	ldr	r1, [sp, #8]
 80020f6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80020f8:	f7fe ff5a 	bl	8000fb0 <HLine>
  HLine(ColorL,x1,x2,y2-k,TolshinaB);
 80020fc:	eba9 0304 	sub.w	r3, r9, r4
 8002100:	9500      	str	r5, [sp, #0]
 8002102:	b21b      	sxth	r3, r3
 8002104:	4632      	mov	r2, r6
 8002106:	9902      	ldr	r1, [sp, #8]
 8002108:	9812      	ldr	r0, [sp, #72]	; 0x48
 800210a:	f7fe ff51 	bl	8000fb0 <HLine>
  HLine(ColorL,x1+k,x2 - k,y_S+y1,TolshinaB);
 800210e:	9b04      	ldr	r3, [sp, #16]
 8002110:	4423      	add	r3, r4
 8002112:	b29e      	uxth	r6, r3
 8002114:	eb07 0308 	add.w	r3, r7, r8
 8002118:	9500      	str	r5, [sp, #0]
 800211a:	b21b      	sxth	r3, r3
 800211c:	4652      	mov	r2, sl
 800211e:	b231      	sxth	r1, r6
 8002120:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002122:	f7fe ff45 	bl	8000fb0 <HLine>
  Label(x1+k+2,txty+k,ColorT,FormName);
 8002126:	eb04 010b 	add.w	r1, r4, fp
 800212a:	1cb0      	adds	r0, r6, #2
 800212c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800212e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002130:	b289      	uxth	r1, r1
 8002132:	b280      	uxth	r0, r0
 8002134:	f7ff fe64 	bl	8001e00 <Label>
}
 8002138:	b007      	add	sp, #28
 800213a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800213e <Button>:
void Button(uint16 x1, uint16 x2, uint16 y1, uint16 y2, uint16 TolshinaB, uint32 BorderColor, uint32 BtColor, char Text[],uint32 TextColor)//++
{
 800213e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002142:	b085      	sub	sp, #20
 8002144:	4680      	mov	r8, r0
 8002146:	4689      	mov	r9, r1
 8002148:	4616      	mov	r6, r2
 800214a:	461f      	mov	r7, r3
  uint16 txtX, txtY, g = 0;
  txtY = y1+((y2 - y1)/2 - 8);
 800214c:	1a9d      	subs	r5, r3, r2
 800214e:	d429      	bmi.n	80021a4 <Button+0x66>
 8002150:	eb06 0565 	add.w	r5, r6, r5, asr #1
 8002154:	b2ad      	uxth	r5, r5
 8002156:	3d08      	subs	r5, #8
 8002158:	b2ad      	uxth	r5, r5
  g = SymbolLength(Text);
 800215a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800215c:	f7ff ff72 	bl	8002044 <SymbolLength>
 8002160:	b280      	uxth	r0, r0
  txtX = x1+((x2 - x1)/2)-(g/2);
 8002162:	ebb9 0308 	subs.w	r3, r9, r8
 8002166:	d41f      	bmi.n	80021a8 <Button+0x6a>
 8002168:	eb08 0463 	add.w	r4, r8, r3, asr #1
 800216c:	b2a4      	uxth	r4, r4
 800216e:	eba4 0450 	sub.w	r4, r4, r0, lsr #1
 8002172:	b2a4      	uxth	r4, r4
  FramePanel(BorderColor,BtColor,x1,x2,y1,y2,TolshinaB);
 8002174:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8002178:	9302      	str	r3, [sp, #8]
 800217a:	b23f      	sxth	r7, r7
 800217c:	9701      	str	r7, [sp, #4]
 800217e:	b236      	sxth	r6, r6
 8002180:	9600      	str	r6, [sp, #0]
 8002182:	fa0f f389 	sxth.w	r3, r9
 8002186:	fa0f f288 	sxth.w	r2, r8
 800218a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800218c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800218e:	f7fe ff2d 	bl	8000fec <FramePanel>
  Label(txtX, txtY, TextColor,Text);
 8002192:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002194:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002196:	4629      	mov	r1, r5
 8002198:	4620      	mov	r0, r4
 800219a:	f7ff fe31 	bl	8001e00 <Label>
}
 800219e:	b005      	add	sp, #20
 80021a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  txtY = y1+((y2 - y1)/2 - 8);
 80021a4:	3501      	adds	r5, #1
 80021a6:	e7d3      	b.n	8002150 <Button+0x12>
  txtX = x1+((x2 - x1)/2)-(g/2);
 80021a8:	3301      	adds	r3, #1
 80021aa:	e7dd      	b.n	8002168 <Button+0x2a>

080021ac <GradientFormA>:
void GradientFormA(uint16 x1, uint16 x2, uint16 y1, uint16 y2, uint16 y_S, uint16 TolshinaB, uint32 ColorL, uint32 ColorSH, uint32 ColorSL, uint32 ColorW,uint32 ColorT,char FormName[])//++
{
 80021ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021b0:	b087      	sub	sp, #28
 80021b2:	4681      	mov	r9, r0
 80021b4:	460d      	mov	r5, r1
 80021b6:	4693      	mov	fp, r2
 80021b8:	461f      	mov	r7, r3
 80021ba:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 80021be:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  uint16 k = TolshinaB - 1,txty;
 80021c2:	1e74      	subs	r4, r6, #1
 80021c4:	b2a4      	uxth	r4, r4
  txty = y1+(y_S / 2 - 8);
 80021c6:	eb02 015a 	add.w	r1, r2, sl, lsr #1
 80021ca:	b289      	uxth	r1, r1
 80021cc:	3908      	subs	r1, #8
 80021ce:	fa1f f881 	uxth.w	r8, r1
  Fill_Rectangle(ColorW,x1,x2,y1,y2);
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	4613      	mov	r3, r2
 80021d6:	462a      	mov	r2, r5
 80021d8:	4601      	mov	r1, r0
 80021da:	9815      	ldr	r0, [sp, #84]	; 0x54
 80021dc:	f7fe fe8c 	bl	8000ef8 <Fill_Rectangle>
  HGradA(x1,x2,y1,y1+y_S,ColorSH,ColorSL);
 80021e0:	f8cd 9010 	str.w	r9, [sp, #16]
 80021e4:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80021e8:	b229      	sxth	r1, r5
 80021ea:	fa0f f98b 	sxth.w	r9, fp
 80021ee:	44d3      	add	fp, sl
 80021f0:	fa0f fb8b 	sxth.w	fp, fp
 80021f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	465b      	mov	r3, fp
 80021fe:	464a      	mov	r2, r9
 8002200:	9105      	str	r1, [sp, #20]
 8002202:	9003      	str	r0, [sp, #12]
 8002204:	f7ff f9ca 	bl	800159c <HGradA>
  VLine(ColorL,x1,y1,y2,TolshinaB);
 8002208:	fa0f fa87 	sxth.w	sl, r7
 800220c:	b2f6      	uxtb	r6, r6
 800220e:	9600      	str	r6, [sp, #0]
 8002210:	4653      	mov	r3, sl
 8002212:	464a      	mov	r2, r9
 8002214:	9903      	ldr	r1, [sp, #12]
 8002216:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002218:	f7fe fed8 	bl	8000fcc <VLine>
  VLine(ColorL,x2-k,y1,y2,TolshinaB);
 800221c:	1b2d      	subs	r5, r5, r4
 800221e:	b22d      	sxth	r5, r5
 8002220:	9600      	str	r6, [sp, #0]
 8002222:	4653      	mov	r3, sl
 8002224:	464a      	mov	r2, r9
 8002226:	4629      	mov	r1, r5
 8002228:	9812      	ldr	r0, [sp, #72]	; 0x48
 800222a:	f7fe fecf 	bl	8000fcc <VLine>
  HLine(ColorL,x1,x2,y1,TolshinaB);
 800222e:	9600      	str	r6, [sp, #0]
 8002230:	464b      	mov	r3, r9
 8002232:	f8dd a014 	ldr.w	sl, [sp, #20]
 8002236:	4652      	mov	r2, sl
 8002238:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800223c:	4649      	mov	r1, r9
 800223e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002240:	f7fe feb6 	bl	8000fb0 <HLine>
  HLine(ColorL,x1,x2,y2-k,TolshinaB);
 8002244:	1b3b      	subs	r3, r7, r4
 8002246:	9600      	str	r6, [sp, #0]
 8002248:	b21b      	sxth	r3, r3
 800224a:	4652      	mov	r2, sl
 800224c:	4649      	mov	r1, r9
 800224e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002250:	f7fe feae 	bl	8000fb0 <HLine>
  HLine(ColorL,x1+k,x2 - k,y_S+y1,TolshinaB);
 8002254:	9b04      	ldr	r3, [sp, #16]
 8002256:	4423      	add	r3, r4
 8002258:	b29f      	uxth	r7, r3
 800225a:	9600      	str	r6, [sp, #0]
 800225c:	465b      	mov	r3, fp
 800225e:	462a      	mov	r2, r5
 8002260:	b239      	sxth	r1, r7
 8002262:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002264:	f7fe fea4 	bl	8000fb0 <HLine>
  Label(x1+k+2,txty+k,ColorT,FormName);
 8002268:	eb04 0108 	add.w	r1, r4, r8
 800226c:	1cb8      	adds	r0, r7, #2
 800226e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002270:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002272:	b289      	uxth	r1, r1
 8002274:	b280      	uxth	r0, r0
 8002276:	f7ff fdc3 	bl	8001e00 <Label>
}
 800227a:	b007      	add	sp, #28
 800227c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002280 <GradientFormB>:
void GradientFormB(uint16 x1, uint16 x2, uint16 y1, uint16 y2, uint16 y_S, uint16 TolshinaB, uint32 ColorL, uint32 ColorSH, uint32 ColorSL, uint32 ColorW,uint32 ColorT,char FormName[])//++
{
 8002280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002284:	b087      	sub	sp, #28
 8002286:	4681      	mov	r9, r0
 8002288:	460d      	mov	r5, r1
 800228a:	4693      	mov	fp, r2
 800228c:	461f      	mov	r7, r3
 800228e:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8002292:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  uint16 k = TolshinaB - 1,txty;
 8002296:	1e74      	subs	r4, r6, #1
 8002298:	b2a4      	uxth	r4, r4
  txty = y1+(y_S/2 - 8);
 800229a:	eb02 015a 	add.w	r1, r2, sl, lsr #1
 800229e:	b289      	uxth	r1, r1
 80022a0:	3908      	subs	r1, #8
 80022a2:	fa1f f881 	uxth.w	r8, r1
  Fill_Rectangle(ColorW,x1,x2,y1,y2);
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	4613      	mov	r3, r2
 80022aa:	462a      	mov	r2, r5
 80022ac:	4601      	mov	r1, r0
 80022ae:	9815      	ldr	r0, [sp, #84]	; 0x54
 80022b0:	f7fe fe22 	bl	8000ef8 <Fill_Rectangle>
  VGradA(x1,x2,y1,y1+y_S,ColorSH,ColorSL);
 80022b4:	f8cd 9010 	str.w	r9, [sp, #16]
 80022b8:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80022bc:	b229      	sxth	r1, r5
 80022be:	fa0f f98b 	sxth.w	r9, fp
 80022c2:	44d3      	add	fp, sl
 80022c4:	fa0f fb8b 	sxth.w	fp, fp
 80022c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	465b      	mov	r3, fp
 80022d2:	464a      	mov	r2, r9
 80022d4:	9105      	str	r1, [sp, #20]
 80022d6:	9003      	str	r0, [sp, #12]
 80022d8:	f7ff f866 	bl	80013a8 <VGradA>
  VLine(ColorL,x1,y1,y2,TolshinaB);
 80022dc:	fa0f fa87 	sxth.w	sl, r7
 80022e0:	b2f6      	uxtb	r6, r6
 80022e2:	9600      	str	r6, [sp, #0]
 80022e4:	4653      	mov	r3, sl
 80022e6:	464a      	mov	r2, r9
 80022e8:	9903      	ldr	r1, [sp, #12]
 80022ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 80022ec:	f7fe fe6e 	bl	8000fcc <VLine>
  VLine(ColorL,x2-k,y1,y2,TolshinaB);
 80022f0:	1b2d      	subs	r5, r5, r4
 80022f2:	b22d      	sxth	r5, r5
 80022f4:	9600      	str	r6, [sp, #0]
 80022f6:	4653      	mov	r3, sl
 80022f8:	464a      	mov	r2, r9
 80022fa:	4629      	mov	r1, r5
 80022fc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80022fe:	f7fe fe65 	bl	8000fcc <VLine>
  HLine(ColorL,x1,x2,y1,TolshinaB);
 8002302:	9600      	str	r6, [sp, #0]
 8002304:	464b      	mov	r3, r9
 8002306:	f8dd a014 	ldr.w	sl, [sp, #20]
 800230a:	4652      	mov	r2, sl
 800230c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8002310:	4649      	mov	r1, r9
 8002312:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002314:	f7fe fe4c 	bl	8000fb0 <HLine>
  HLine(ColorL,x1,x2,y2-k,TolshinaB);
 8002318:	1b3b      	subs	r3, r7, r4
 800231a:	9600      	str	r6, [sp, #0]
 800231c:	b21b      	sxth	r3, r3
 800231e:	4652      	mov	r2, sl
 8002320:	4649      	mov	r1, r9
 8002322:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002324:	f7fe fe44 	bl	8000fb0 <HLine>
  HLine(ColorL,x1+k,x2 - k,y_S+y1,TolshinaB);
 8002328:	9b04      	ldr	r3, [sp, #16]
 800232a:	4423      	add	r3, r4
 800232c:	b29f      	uxth	r7, r3
 800232e:	9600      	str	r6, [sp, #0]
 8002330:	465b      	mov	r3, fp
 8002332:	462a      	mov	r2, r5
 8002334:	b239      	sxth	r1, r7
 8002336:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002338:	f7fe fe3a 	bl	8000fb0 <HLine>
  Label(x1+k+2,txty+k,ColorT,FormName);
 800233c:	eb04 0108 	add.w	r1, r4, r8
 8002340:	1cb8      	adds	r0, r7, #2
 8002342:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002344:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002346:	b289      	uxth	r1, r1
 8002348:	b280      	uxth	r0, r0
 800234a:	f7ff fd59 	bl	8001e00 <Label>
}
 800234e:	b007      	add	sp, #28
 8002350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002354 <CheckBox>:
void CheckBox(int16 x1, int16 x2, int16 y1, int16 y2, uint32 BrColor, uint32 BackColor, uint32 ChColor, uint8 Checked, uint32 TextColor, char Name[])
{
 8002354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002358:	b085      	sub	sp, #20
 800235a:	4606      	mov	r6, r0
 800235c:	460c      	mov	r4, r1
 800235e:	4617      	mov	r7, r2
 8002360:	461d      	mov	r5, r3
	FramePanel(BrColor,BackColor,x1,x2,y1,y2,2);
 8002362:	2302      	movs	r3, #2
 8002364:	9302      	str	r3, [sp, #8]
 8002366:	9501      	str	r5, [sp, #4]
 8002368:	9200      	str	r2, [sp, #0]
 800236a:	460b      	mov	r3, r1
 800236c:	4602      	mov	r2, r0
 800236e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002370:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002372:	f7fe fe3b 	bl	8000fec <FramePanel>
	if(Checked == 1)
 8002376:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800237a:	2b01      	cmp	r3, #1
 800237c:	d009      	beq.n	8002392 <CheckBox+0x3e>
	{

		Line(x1+3, y1+6, x1+((x2-x1)/2), y2-3, ChColor, 2);
		Line(x1+((x2-x1)/2), y2-3, x2-3, y1+3, ChColor, 2);
	}
	Label(x2 + 3, y1, TextColor, Name);
 800237e:	1ce0      	adds	r0, r4, #3
 8002380:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002382:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002384:	b2b9      	uxth	r1, r7
 8002386:	b280      	uxth	r0, r0
 8002388:	f7ff fd3a 	bl	8001e00 <Label>
}
 800238c:	b005      	add	sp, #20
 800238e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		Line(x1+3, y1+6, x1+((x2-x1)/2), y2-3, ChColor, 2);
 8002392:	b2b3      	uxth	r3, r6
 8002394:	1cd8      	adds	r0, r3, #3
 8002396:	b280      	uxth	r0, r0
 8002398:	fa1f f887 	uxth.w	r8, r7
 800239c:	f108 0106 	add.w	r1, r8, #6
 80023a0:	b289      	uxth	r1, r1
 80023a2:	1ba2      	subs	r2, r4, r6
 80023a4:	d41e      	bmi.n	80023e4 <CheckBox+0x90>
 80023a6:	eb03 0262 	add.w	r2, r3, r2, asr #1
 80023aa:	b216      	sxth	r6, r2
 80023ac:	3d03      	subs	r5, #3
 80023ae:	b22d      	sxth	r5, r5
 80023b0:	f04f 0902 	mov.w	r9, #2
 80023b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80023b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	462b      	mov	r3, r5
 80023be:	4632      	mov	r2, r6
 80023c0:	b209      	sxth	r1, r1
 80023c2:	b200      	sxth	r0, r0
 80023c4:	f7fe fe4c 	bl	8001060 <Line>
		Line(x1+((x2-x1)/2), y2-3, x2-3, y1+3, ChColor, 2);
 80023c8:	1ee2      	subs	r2, r4, #3
 80023ca:	f108 0303 	add.w	r3, r8, #3
 80023ce:	f8cd 9004 	str.w	r9, [sp, #4]
 80023d2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80023d4:	9100      	str	r1, [sp, #0]
 80023d6:	b21b      	sxth	r3, r3
 80023d8:	b212      	sxth	r2, r2
 80023da:	4629      	mov	r1, r5
 80023dc:	4630      	mov	r0, r6
 80023de:	f7fe fe3f 	bl	8001060 <Line>
 80023e2:	e7cc      	b.n	800237e <CheckBox+0x2a>
		Line(x1+3, y1+6, x1+((x2-x1)/2), y2-3, ChColor, 2);
 80023e4:	3201      	adds	r2, #1
 80023e6:	e7de      	b.n	80023a6 <CheckBox+0x52>

080023e8 <Radiobutton>:
void Radiobutton(uint16 x, uint16 y, uint16 Radius, uint32 ExCirColor, uint32 InCirColor, uint32 BackColor, uint8 Transp_key, uint16 Checked)
{
 80023e8:	b570      	push	{r4, r5, r6, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	4605      	mov	r5, r0
 80023ee:	460e      	mov	r6, r1
 80023f0:	4614      	mov	r4, r2
	if(Transp_key == 0)
	{
//		FramePanel(BackColor,x-Radius,x+Radius+1,y-Radius,y+Radius+1);
	}

	if(Checked == 1)
 80023f2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80023f6:	2a01      	cmp	r2, #1
 80023f8:	d008      	beq.n	800240c <Radiobutton+0x24>
		FillCircle(x,y,Radius - 4,InCirColor);

	}
	else
	{
		Circle(x,y,Radius,ExCirColor,2);
 80023fa:	2202      	movs	r2, #2
 80023fc:	9200      	str	r2, [sp, #0]
 80023fe:	b222      	sxth	r2, r4
 8002400:	b209      	sxth	r1, r1
 8002402:	b200      	sxth	r0, r0
 8002404:	f7fe ff5a 	bl	80012bc <Circle>
	}
}
 8002408:	b002      	add	sp, #8
 800240a:	bd70      	pop	{r4, r5, r6, pc}
		Circle(x,y,Radius,ExCirColor,2);
 800240c:	2202      	movs	r2, #2
 800240e:	9200      	str	r2, [sp, #0]
 8002410:	b222      	sxth	r2, r4
 8002412:	b209      	sxth	r1, r1
 8002414:	b200      	sxth	r0, r0
 8002416:	f7fe ff51 	bl	80012bc <Circle>
		FillCircle(x,y,Radius - 4,InCirColor);
 800241a:	1f22      	subs	r2, r4, #4
 800241c:	9b06      	ldr	r3, [sp, #24]
 800241e:	b292      	uxth	r2, r2
 8002420:	4631      	mov	r1, r6
 8002422:	4628      	mov	r0, r5
 8002424:	f7fe ffaa 	bl	800137c <FillCircle>
 8002428:	e7ee      	b.n	8002408 <Radiobutton+0x20>

0800242a <Graph>:
void Graph(uint16 X1, uint16 X2, uint16 Y1, uint16 Y2, uint32 FillColor, uint32 FrColor, uint8 Tl, uint32 LinColor, uint32 StepX, uint32 StepY, int32 XMax, int32 XMin, int32 YMax, int32 YMin)
{
 800242a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800242e:	ed2d 8b08 	vpush	{d8-d11}
 8002432:	b085      	sub	sp, #20
 8002434:	4607      	mov	r7, r0
 8002436:	460d      	mov	r5, r1
 8002438:	4690      	mov	r8, r2
 800243a:	461c      	mov	r4, r3
 800243c:	f89d a060 	ldrb.w	sl, [sp, #96]	; 0x60
	float XC, YC, StX, StY, XX, YY;;

	XC = ((float)XMax - (float)XMin) / (float)StepX;
 8002440:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8002444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002448:	ed9d 7a1d 	vldr	s14, [sp, #116]	; 0x74
 800244c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002450:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002454:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 8002458:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800245c:	eec7 9a87 	vdiv.f32	s19, s15, s14
	YC = ((float)YMax - (float)YMin) / (float)StepY;
 8002460:	eddd 7a1e 	vldr	s15, [sp, #120]	; 0x78
 8002464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002468:	ed9d 7a1f 	vldr	s14, [sp, #124]	; 0x7c
 800246c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002470:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002474:	ed9d 7a1b 	vldr	s14, [sp, #108]	; 0x6c
 8002478:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800247c:	ee87 aa87 	vdiv.f32	s20, s15, s14
	FramePanel(FrColor, FillColor, X1, X2, Y1, Y2, Tl);
 8002480:	f8cd a008 	str.w	sl, [sp, #8]
 8002484:	b21b      	sxth	r3, r3
 8002486:	9301      	str	r3, [sp, #4]
 8002488:	b213      	sxth	r3, r2
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	b20b      	sxth	r3, r1
 800248e:	b202      	sxth	r2, r0
 8002490:	9916      	ldr	r1, [sp, #88]	; 0x58
 8002492:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8002494:	f7fe fdaa 	bl	8000fec <FramePanel>

	StX = (((float)X2 - (float)Tl) - ((float)X1 + (float)Tl)) / XC;
 8002498:	ee07 5a90 	vmov	s15, r5
 800249c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024a0:	ee07 aa90 	vmov	s15, sl
 80024a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024ac:	ee06 7a90 	vmov	s13, r7
 80024b0:	eeb8 9a66 	vcvt.f32.u32	s18, s13
 80024b4:	ee37 9a89 	vadd.f32	s18, s15, s18
 80024b8:	ee37 7a49 	vsub.f32	s14, s14, s18
 80024bc:	ee87 ba29 	vdiv.f32	s22, s14, s19
	StY = (((float)Y2 - (float)Tl) - ((float)Y1 + (float)Tl)) / YC;
 80024c0:	ee07 4a10 	vmov	s14, r4
 80024c4:	eeb8 8a47 	vcvt.f32.u32	s16, s14
 80024c8:	ee78 8a67 	vsub.f32	s17, s16, s15
 80024cc:	ee07 8a10 	vmov	s14, r8
 80024d0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80024d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024d8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80024dc:	eec7 aa8a 	vdiv.f32	s21, s15, s20
	XX = (float)X1 + (float)Tl;
	YY = (float)Y2 - (float)Tl;

	VLine(LinColor, (uint16)XX, Y1+Tl, Y2-Tl, 1);
 80024e0:	eefc 7ac9 	vcvt.u32.f32	s15, s18
 80024e4:	fa1f fb8a 	uxth.w	fp, sl
 80024e8:	eb0b 0908 	add.w	r9, fp, r8
 80024ec:	fa0f f989 	sxth.w	r9, r9
 80024f0:	eba4 040b 	sub.w	r4, r4, fp
 80024f4:	b224      	sxth	r4, r4
 80024f6:	2301      	movs	r3, #1
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	4623      	mov	r3, r4
 80024fc:	464a      	mov	r2, r9
 80024fe:	ee17 1a90 	vmov	r1, s15
 8002502:	b209      	sxth	r1, r1
 8002504:	9819      	ldr	r0, [sp, #100]	; 0x64
 8002506:	f7fe fd61 	bl	8000fcc <VLine>
	XX += StX;
 800250a:	ee39 9a0b 	vadd.f32	s18, s18, s22
	for(uint16 x = 0; x < XC; x++)
 800250e:	2600      	movs	r6, #0
 8002510:	e00d      	b.n	800252e <Graph+0x104>
		    VLine(LinColor, (uint16)XX, Y1+Tl, Y2-Tl, 1);
		    XX += StX;
	    }
		else
		{
		    VLine(LinColor, X2 - Tl, Y1+Tl, Y2-Tl, 1);
 8002512:	eba5 010b 	sub.w	r1, r5, fp
 8002516:	2301      	movs	r3, #1
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	4623      	mov	r3, r4
 800251c:	464a      	mov	r2, r9
 800251e:	b209      	sxth	r1, r1
 8002520:	9819      	ldr	r0, [sp, #100]	; 0x64
 8002522:	f7fe fd53 	bl	8000fcc <VLine>
		    XX += StX;
 8002526:	ee39 9a0b 	vadd.f32	s18, s18, s22
	for(uint16 x = 0; x < XC; x++)
 800252a:	3601      	adds	r6, #1
 800252c:	b2b6      	uxth	r6, r6
 800252e:	ee07 6a90 	vmov	s15, r6
 8002532:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002536:	eeb4 7ae9 	vcmpe.f32	s14, s19
 800253a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800253e:	d517      	bpl.n	8002570 <Graph+0x146>
		if(x < XC - 1)
 8002540:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002544:	ee79 7ae7 	vsub.f32	s15, s19, s15
 8002548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800254c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002550:	dddf      	ble.n	8002512 <Graph+0xe8>
		    VLine(LinColor, (uint16)XX, Y1+Tl, Y2-Tl, 1);
 8002552:	eefc 7ac9 	vcvt.u32.f32	s15, s18
 8002556:	2301      	movs	r3, #1
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	4623      	mov	r3, r4
 800255c:	464a      	mov	r2, r9
 800255e:	ee17 1a90 	vmov	r1, s15
 8002562:	b209      	sxth	r1, r1
 8002564:	9819      	ldr	r0, [sp, #100]	; 0x64
 8002566:	f7fe fd31 	bl	8000fcc <VLine>
		    XX += StX;
 800256a:	ee39 9a0b 	vadd.f32	s18, s18, s22
 800256e:	e7dc      	b.n	800252a <Graph+0x100>
		}
	}
	HLine(LinColor, X1+Tl, X2-Tl, (uint16)YY, 1);
 8002570:	445f      	add	r7, fp
 8002572:	b23f      	sxth	r7, r7
 8002574:	eba5 050b 	sub.w	r5, r5, fp
 8002578:	b22d      	sxth	r5, r5
 800257a:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 800257e:	2301      	movs	r3, #1
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	ee17 3a90 	vmov	r3, s15
 8002586:	b21b      	sxth	r3, r3
 8002588:	462a      	mov	r2, r5
 800258a:	4639      	mov	r1, r7
 800258c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800258e:	f7fe fd0f 	bl	8000fb0 <HLine>
	YY -= StY;
 8002592:	ee78 8aea 	vsub.f32	s17, s17, s21
	for(uint16 y = 0; y < YC; y++)
 8002596:	2400      	movs	r4, #0
 8002598:	e00b      	b.n	80025b2 <Graph+0x188>
		{
		    HLine(LinColor, X1+Tl, X2-Tl, Y1 + Tl, 1);
	    }
		else
		{
			HLine(LinColor, X1+Tl, X2-Tl, (uint16)YY, 1);
 800259a:	2201      	movs	r2, #1
 800259c:	9200      	str	r2, [sp, #0]
 800259e:	b21b      	sxth	r3, r3
 80025a0:	462a      	mov	r2, r5
 80025a2:	4639      	mov	r1, r7
 80025a4:	9819      	ldr	r0, [sp, #100]	; 0x64
 80025a6:	f7fe fd03 	bl	8000fb0 <HLine>
		}
		YY -= StY;
 80025aa:	ee78 8aea 	vsub.f32	s17, s17, s21
	for(uint16 y = 0; y < YC; y++)
 80025ae:	3401      	adds	r4, #1
 80025b0:	b2a4      	uxth	r4, r4
 80025b2:	ee07 4a90 	vmov	s15, r4
 80025b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ba:	eef4 7aca 	vcmpe.f32	s15, s20
 80025be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c2:	d513      	bpl.n	80025ec <Graph+0x1c2>
		if((uint16)YY >= Y1 && (uint16)YY <= Y1 + Tl)
 80025c4:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 80025c8:	ee17 3a90 	vmov	r3, s15
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	4543      	cmp	r3, r8
 80025d0:	d3e3      	bcc.n	800259a <Graph+0x170>
 80025d2:	eb08 020a 	add.w	r2, r8, sl
 80025d6:	4293      	cmp	r3, r2
 80025d8:	dcdf      	bgt.n	800259a <Graph+0x170>
		    HLine(LinColor, X1+Tl, X2-Tl, Y1 + Tl, 1);
 80025da:	2301      	movs	r3, #1
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	464b      	mov	r3, r9
 80025e0:	462a      	mov	r2, r5
 80025e2:	4639      	mov	r1, r7
 80025e4:	9819      	ldr	r0, [sp, #100]	; 0x64
 80025e6:	f7fe fce3 	bl	8000fb0 <HLine>
 80025ea:	e7de      	b.n	80025aa <Graph+0x180>
	}
}
 80025ec:	b005      	add	sp, #20
 80025ee:	ecbd 8b08 	vpop	{d8-d11}
 80025f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080025f8 <GraphLine>:
void GraphLine(uint16 X1, uint16 X2, uint16 Y1, uint16 Y2, uint32 Color, uint8 Tl, uint32 StepX, uint32 StepY, uint32 XMax, uint32 XMin, int YMax, int YMin, int data[], uint32 Points, uint8 LineTl)
{
 80025f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025fc:	ed2d 8b0a 	vpush	{d8-d12}
 8002600:	b089      	sub	sp, #36	; 0x24
 8002602:	4605      	mov	r5, r0
 8002604:	4691      	mov	r9, r2
 8002606:	461f      	mov	r7, r3
 8002608:	f89d b074 	ldrb.w	fp, [sp, #116]	; 0x74
 800260c:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800260e:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 8002612:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 8002616:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8002618:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 800261c:	9303      	str	r3, [sp, #12]
	uint16 Points_cnt = 0, Yctrl = 0;
	float LineX = 0, NextX = 0, LineY = 0, NextY = 0;
	float XC = 0, StX = 0, YY = 0, Ydif = 0, StY = 0, StartY = 0;
    uint8 owf_flag = 1;
	YY = Y2 - Y1;
 800261e:	1abb      	subs	r3, r7, r2
 8002620:	ee09 3a90 	vmov	s19, r3
 8002624:	eef8 9ae9 	vcvt.f32.s32	s19, s19
	Ydif = YMax - YMin;
 8002628:	eba8 030a 	sub.w	r3, r8, sl
 800262c:	ee09 3a10 	vmov	s18, r3
 8002630:	eeb8 9ac9 	vcvt.f32.s32	s18, s18

	if((X2 - X1) >= (XMax - XMin))
 8002634:	9106      	str	r1, [sp, #24]
 8002636:	1a09      	subs	r1, r1, r0
 8002638:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800263a:	1b1b      	subs	r3, r3, r4
 800263c:	4299      	cmp	r1, r3
 800263e:	d366      	bcc.n	800270e <GraphLine+0x116>
	{
		XC = (float)XMax;
 8002640:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8002644:	eeb8 ba67 	vcvt.f32.u32	s22, s15
		StX = (float)(X2 - X1) / (float)(XMax - XMin) * 0.9902;
 8002648:	ee07 1a90 	vmov	s15, r1
 800264c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002650:	ee07 3a10 	vmov	s14, r3
 8002654:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002658:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800265c:	ee17 0a90 	vmov	r0, s15
 8002660:	f7fd ff36 	bl	80004d0 <__aeabi_f2d>
 8002664:	a379      	add	r3, pc, #484	; (adr r3, 800284c <GraphLine+0x254>)
 8002666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266a:	f7fd ff89 	bl	8000580 <__aeabi_dmul>
 800266e:	f7fe f999 	bl	80009a4 <__aeabi_d2f>
 8002672:	ee0b 0a90 	vmov	s23, r0
	}

	LineX = (float)X1 + (float)Tl + (float)(LineTl - 1);
 8002676:	ee07 5a90 	vmov	s15, r5
 800267a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800267e:	ee07 ba90 	vmov	s15, fp
 8002682:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002686:	ee78 7a07 	vadd.f32	s15, s16, s14
 800268a:	9b03      	ldr	r3, [sp, #12]
 800268c:	9307      	str	r3, [sp, #28]
 800268e:	1e5a      	subs	r2, r3, #1
 8002690:	ee08 2a10 	vmov	s16, r2
 8002694:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8002698:	ee37 8a88 	vadd.f32	s16, s15, s16
	NextX = LineX;
	StartY = (float)Y2 - (float)(Tl) - (float)LineTl;
 800269c:	ee07 7a90 	vmov	s15, r7
 80026a0:	eef8 8a67 	vcvt.f32.u32	s17, s15
 80026a4:	ee78 8ac7 	vsub.f32	s17, s17, s14
 80026a8:	ee07 3a90 	vmov	s15, r3
 80026ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026b0:	ee78 8ae7 	vsub.f32	s17, s17, s15

	LineY = StartY - ((YY / Ydif * (float)data[XMin]) * 0.974);
 80026b4:	eec9 aa89 	vdiv.f32	s21, s19, s18
 80026b8:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80026bc:	ee07 3a90 	vmov	s15, r3
 80026c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026c4:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80026c8:	ee17 0a90 	vmov	r0, s15
 80026cc:	f7fd ff00 	bl	80004d0 <__aeabi_f2d>
 80026d0:	a35b      	add	r3, pc, #364	; (adr r3, 8002840 <GraphLine+0x248>)
 80026d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d6:	f7fd ff53 	bl	8000580 <__aeabi_dmul>
 80026da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80026de:	ee18 0a90 	vmov	r0, s17
 80026e2:	f7fd fef5 	bl	80004d0 <__aeabi_f2d>
 80026e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80026ea:	f7fd fd91 	bl	8000210 <__aeabi_dsub>
 80026ee:	f7fe f959 	bl	80009a4 <__aeabi_d2f>
 80026f2:	ee09 0a90 	vmov	s19, r0

	Yctrl = LineY;

	if(Yctrl < (Y1 + Tl))
 80026f6:	f8cd b010 	str.w	fp, [sp, #16]
 80026fa:	eb09 030b 	add.w	r3, r9, fp
 80026fe:	ee0c 3a10 	vmov	s24, r3
		Yctrl = Y1 + Tl;
	}

	NextY = Yctrl;

	for(uint16 x = XMin; x < XC; x++)
 8002702:	b2a4      	uxth	r4, r4
    uint8 owf_flag = 1;
 8002704:	f04f 0b01 	mov.w	fp, #1
	uint16 Points_cnt = 0, Yctrl = 0;
 8002708:	f04f 0900 	mov.w	r9, #0
	for(uint16 x = XMin; x < XC; x++)
 800270c:	e032      	b.n	8002774 <GraphLine+0x17c>
	float XC = 0, StX = 0, YY = 0, Ydif = 0, StY = 0, StartY = 0;
 800270e:	eddf ba4e 	vldr	s23, [pc, #312]	; 8002848 <GraphLine+0x250>
 8002712:	eeb0 ba6b 	vmov.f32	s22, s23
 8002716:	e7ae      	b.n	8002676 <GraphLine+0x7e>
			LineX = NextX;
			LineY = NextY;
	    }
		else
		{
			if(owf_flag == 0)
 8002718:	f1bb 0f00 	cmp.w	fp, #0
 800271c:	d005      	beq.n	800272a <GraphLine+0x132>
				NextY = Y1 + Tl;
				Line((uint16)LineX, (uint16)LineY, (uint16)NextX, (uint16)NextY, Color, LineTl);
				owf_flag = 1;
			}

			if(data[x] > YMax)
 800271e:	59f3      	ldr	r3, [r6, r7]
 8002720:	4543      	cmp	r3, r8
 8002722:	dd21      	ble.n	8002768 <GraphLine+0x170>
			{
			    LineX = NextX;
			    LineY = Y1 + Tl;
 8002724:	eef8 9acc 	vcvt.f32.s32	s19, s24
 8002728:	e020      	b.n	800276c <GraphLine+0x174>
				NextY = Y1 + Tl;
 800272a:	eef8 7acc 	vcvt.f32.s32	s15, s24
				Line((uint16)LineX, (uint16)LineY, (uint16)NextX, (uint16)NextY, Color, LineTl);
 800272e:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8002732:	eefc 9ae9 	vcvt.u32.f32	s19, s19
 8002736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800273a:	9b03      	ldr	r3, [sp, #12]
 800273c:	9301      	str	r3, [sp, #4]
 800273e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	ee17 3a90 	vmov	r3, s15
 8002746:	b21b      	sxth	r3, r3
 8002748:	eefc 7ac9 	vcvt.u32.f32	s15, s18
 800274c:	ee17 2a90 	vmov	r2, s15
 8002750:	b212      	sxth	r2, r2
 8002752:	ee19 1a90 	vmov	r1, s19
 8002756:	b209      	sxth	r1, r1
 8002758:	ee18 0a10 	vmov	r0, s16
 800275c:	b200      	sxth	r0, r0
 800275e:	f7fe fc7f 	bl	8001060 <Line>
				owf_flag = 1;
 8002762:	f04f 0b01 	mov.w	fp, #1
 8002766:	e7da      	b.n	800271e <GraphLine+0x126>
		    }
			else
			{
			    LineX = NextX;
			    LineY = StartY;
 8002768:	eef0 9a68 	vmov.f32	s19, s17
	for(uint16 x = XMin; x < XC; x++)
 800276c:	3401      	adds	r4, #1
 800276e:	b2a4      	uxth	r4, r4
 8002770:	eeb0 8a49 	vmov.f32	s16, s18
 8002774:	ee07 4a90 	vmov	s15, r4
 8002778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800277c:	eef4 7acb 	vcmpe.f32	s15, s22
 8002780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002784:	d555      	bpl.n	8002832 <GraphLine+0x23a>
		StY = (YY / Ydif * (float)data[x]) * 0.974; //расчет дисплейного Y, 0.974 - корректировка погрешности
 8002786:	00a7      	lsls	r7, r4, #2
 8002788:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800278c:	ee07 5a90 	vmov	s15, r5
 8002790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002794:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8002798:	ee17 0a90 	vmov	r0, s15
 800279c:	f7fd fe98 	bl	80004d0 <__aeabi_f2d>
 80027a0:	a327      	add	r3, pc, #156	; (adr r3, 8002840 <GraphLine+0x248>)
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	f7fd feeb 	bl	8000580 <__aeabi_dmul>
 80027aa:	f7fe f8fb 	bl	80009a4 <__aeabi_d2f>
		NextX += StX;
 80027ae:	ee38 9a2b 	vadd.f32	s18, s16, s23
		NextY = StartY - StY;
 80027b2:	ee07 0a90 	vmov	s15, r0
 80027b6:	ee38 aae7 	vsub.f32	s20, s17, s15
		if((data[x] >= YMin) && (data[x] <= YMax))
 80027ba:	4555      	cmp	r5, sl
 80027bc:	dbac      	blt.n	8002718 <GraphLine+0x120>
 80027be:	4545      	cmp	r5, r8
 80027c0:	dcaa      	bgt.n	8002718 <GraphLine+0x120>
		    if(Points_cnt < Points)
 80027c2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80027c4:	4599      	cmp	r9, r3
 80027c6:	d22d      	bcs.n	8002824 <GraphLine+0x22c>
		    	if(NextX >= X2 - Tl)
 80027c8:	9b06      	ldr	r3, [sp, #24]
 80027ca:	9a04      	ldr	r2, [sp, #16]
 80027cc:	1a9a      	subs	r2, r3, r2
 80027ce:	ee07 2a90 	vmov	s15, r2
 80027d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027d6:	eef4 7ac9 	vcmpe.f32	s15, s18
 80027da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027de:	d805      	bhi.n	80027ec <GraphLine+0x1f4>
		    	{NextX = X2 - LineTl;}
 80027e0:	9a07      	ldr	r2, [sp, #28]
 80027e2:	1a9b      	subs	r3, r3, r2
 80027e4:	ee09 3a10 	vmov	s18, r3
 80027e8:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
		        Line((uint16)LineX, (uint16)LineY, (uint16)NextX, (uint16)NextY, Color, LineTl);
 80027ec:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 80027f0:	eefc 9ae9 	vcvt.u32.f32	s19, s19
 80027f4:	9b03      	ldr	r3, [sp, #12]
 80027f6:	9301      	str	r3, [sp, #4]
 80027f8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	eefc 7aca 	vcvt.u32.f32	s15, s20
 8002800:	ee17 3a90 	vmov	r3, s15
 8002804:	b21b      	sxth	r3, r3
 8002806:	eefc 7ac9 	vcvt.u32.f32	s15, s18
 800280a:	ee17 2a90 	vmov	r2, s15
 800280e:	b212      	sxth	r2, r2
 8002810:	ee19 1a90 	vmov	r1, s19
 8002814:	b209      	sxth	r1, r1
 8002816:	ee18 0a10 	vmov	r0, s16
 800281a:	b200      	sxth	r0, r0
 800281c:	f7fe fc20 	bl	8001060 <Line>
		        owf_flag = 0;
 8002820:	f04f 0b00 	mov.w	fp, #0
		    Points_cnt++;
 8002824:	f109 0901 	add.w	r9, r9, #1
 8002828:	fa1f f989 	uxth.w	r9, r9
			LineY = NextY;
 800282c:	eef0 9a4a 	vmov.f32	s19, s20
 8002830:	e79c      	b.n	800276c <GraphLine+0x174>
	//Line(50, 40, 150, 140, green | 0xff000000, 2);
	//Line(150, 150, 50, 50, green | 0xff000000, 2);

	//Line(160, 140, 260, 40, green | 0xff000000, 2);
	//Line(270, 40, 170, 140, green | 0xff000000, 2);
}
 8002832:	b009      	add	sp, #36	; 0x24
 8002834:	ecbd 8b0a 	vpop	{d8-d12}
 8002838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800283c:	f3af 8000 	nop.w
 8002840:	0c49ba5e 	.word	0x0c49ba5e
 8002844:	3fef2b02 	.word	0x3fef2b02
 8002848:	00000000 	.word	0x00000000
 800284c:	e90ff972 	.word	0xe90ff972
 8002850:	3fefafb7 	.word	0x3fefafb7

08002854 <LCD_Fill_Rectangle>:


//для внешнего пользования(прикладных программ) Обработка касаний, координатных штучек

void LCD_Fill_Rectangle(D_Fill_Rectangle *FR)
{
 8002854:	b510      	push	{r4, lr}
 8002856:	b082      	sub	sp, #8
    Fill_Rectangle(FR->Color, FR->X1, FR->X2, FR->Y1, FR->Y2);
 8002858:	68c3      	ldr	r3, [r0, #12]
 800285a:	6882      	ldr	r2, [r0, #8]
 800285c:	6841      	ldr	r1, [r0, #4]
 800285e:	6804      	ldr	r4, [r0, #0]
 8002860:	6900      	ldr	r0, [r0, #16]
 8002862:	9000      	str	r0, [sp, #0]
 8002864:	4620      	mov	r0, r4
 8002866:	f7fe fb47 	bl	8000ef8 <Fill_Rectangle>
}
 800286a:	b002      	add	sp, #8
 800286c:	bd10      	pop	{r4, pc}

0800286e <LCD_HLine>:
void LCD_HLine(D_HLine *hline)
{
 800286e:	b510      	push	{r4, lr}
 8002870:	b082      	sub	sp, #8
	HLine(hline->Color, hline->X1, hline->X2, hline->Y1, hline->Thickness);
 8002872:	7c04      	ldrb	r4, [r0, #16]
 8002874:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8002878:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 800287c:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8002880:	6800      	ldr	r0, [r0, #0]
 8002882:	9400      	str	r4, [sp, #0]
 8002884:	f7fe fb94 	bl	8000fb0 <HLine>
}
 8002888:	b002      	add	sp, #8
 800288a:	bd10      	pop	{r4, pc}

0800288c <LCD_FramePanel>:
void LCD_VLine(D_VLine *vline)
{
	VLine(vline->Color, vline->X1, vline->Y1, vline->Y2, vline->Thickness);
}
uint8 LCD_FramePanel(D_FramePanel *framePanel)
{
 800288c:	b570      	push	{r4, r5, r6, lr}
 800288e:	b084      	sub	sp, #16
	//uint8 TouchDet = GetCursorPosition();
	FramePanel(framePanel->FrameColor, framePanel->FillColor, framePanel->X1, framePanel->X2, framePanel->Y1, framePanel->Y2, framePanel->Thickness);
 8002890:	6904      	ldr	r4, [r0, #16]
 8002892:	6945      	ldr	r5, [r0, #20]
 8002894:	7e06      	ldrb	r6, [r0, #24]
 8002896:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800289a:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 800289e:	6841      	ldr	r1, [r0, #4]
 80028a0:	6800      	ldr	r0, [r0, #0]
 80028a2:	9602      	str	r6, [sp, #8]
 80028a4:	b22d      	sxth	r5, r5
 80028a6:	9501      	str	r5, [sp, #4]
 80028a8:	b224      	sxth	r4, r4
 80028aa:	9400      	str	r4, [sp, #0]
 80028ac:	f7fe fb9e 	bl	8000fec <FramePanel>
			framePanel->Is_pressed = NotClicked;
			return NotClicked;
		}
	} */
	return NotClicked;
}
 80028b0:	2000      	movs	r0, #0
 80028b2:	b004      	add	sp, #16
 80028b4:	bd70      	pop	{r4, r5, r6, pc}

080028b6 <LCD_Circle>:
void LCD_Circle(D_Circle *circle)
{
 80028b6:	b510      	push	{r4, lr}
 80028b8:	b082      	sub	sp, #8
	Circle(circle->X1, circle->Y1, circle->R, circle->Color, circle->Thickness);
 80028ba:	68c3      	ldr	r3, [r0, #12]
 80028bc:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80028c0:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80028c4:	f9b0 4000 	ldrsh.w	r4, [r0]
 80028c8:	8a00      	ldrh	r0, [r0, #16]
 80028ca:	9000      	str	r0, [sp, #0]
 80028cc:	4620      	mov	r0, r4
 80028ce:	f7fe fcf5 	bl	80012bc <Circle>
}
 80028d2:	b002      	add	sp, #8
 80028d4:	bd10      	pop	{r4, pc}

080028d6 <LCD_FillCircle>:
void LCD_Line(D_Line *line)
{
    Line(line->X1, line->Y1, line->X2, line->Y2, line->Color, line->Thickness);
}
void LCD_FillCircle(D_FillCircle *fillCircle)
{
 80028d6:	b508      	push	{r3, lr}
	FillCircle(fillCircle->X1, fillCircle->Y1, fillCircle->R, fillCircle->Color);
 80028d8:	68c3      	ldr	r3, [r0, #12]
 80028da:	8902      	ldrh	r2, [r0, #8]
 80028dc:	8881      	ldrh	r1, [r0, #4]
 80028de:	8800      	ldrh	r0, [r0, #0]
 80028e0:	f7fe fd4c 	bl	800137c <FillCircle>
}
 80028e4:	bd08      	pop	{r3, pc}

080028e6 <LCD_ProgressBar>:
void LCD_ProgressBar(D_ProgressBar *ProgressBar)
{
 80028e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028ea:	b088      	sub	sp, #32
	Progress_bar(ProgressBar->X1, ProgressBar->X2, ProgressBar->Y1, ProgressBar->Y2, ProgressBar->StartValue, ProgressBar->StopValue, ProgressBar->CurrentValue, ProgressBar->FrameColor, ProgressBar->FillColor, ProgressBar->BarColor, ProgressBar->Thickness, ProgressBar->Orientation);
 80028ec:	6904      	ldr	r4, [r0, #16]
 80028ee:	6945      	ldr	r5, [r0, #20]
 80028f0:	6986      	ldr	r6, [r0, #24]
 80028f2:	f890 c028 	ldrb.w	ip, [r0, #40]	; 0x28
 80028f6:	f890 e029 	ldrb.w	lr, [r0, #41]	; 0x29
 80028fa:	f8b0 800c 	ldrh.w	r8, [r0, #12]
 80028fe:	8902      	ldrh	r2, [r0, #8]
 8002900:	8881      	ldrh	r1, [r0, #4]
 8002902:	8807      	ldrh	r7, [r0, #0]
 8002904:	f8cd e01c 	str.w	lr, [sp, #28]
 8002908:	f8cd c018 	str.w	ip, [sp, #24]
 800290c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800290e:	9305      	str	r3, [sp, #20]
 8002910:	6a03      	ldr	r3, [r0, #32]
 8002912:	9304      	str	r3, [sp, #16]
 8002914:	69c0      	ldr	r0, [r0, #28]
 8002916:	9003      	str	r0, [sp, #12]
 8002918:	b2b6      	uxth	r6, r6
 800291a:	9602      	str	r6, [sp, #8]
 800291c:	b2ad      	uxth	r5, r5
 800291e:	9501      	str	r5, [sp, #4]
 8002920:	b2a4      	uxth	r4, r4
 8002922:	9400      	str	r4, [sp, #0]
 8002924:	4643      	mov	r3, r8
 8002926:	4638      	mov	r0, r7
 8002928:	f7fe ff7e 	bl	8001828 <Progress_bar>
}
 800292c:	b008      	add	sp, #32
 800292e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002932 <LCD_TrackBar>:
uint8 LCD_TrackBar(D_TrackBar *trackBar)
{
 8002932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002936:	b088      	sub	sp, #32
//	uint8 TouchDet = GetCursorPosition();
//	uint16 Xdif, ValDif;
	TrackBar(trackBar->X1, trackBar->X2, trackBar->Y1, trackBar->Y2, trackBar->StartValue, trackBar->StopValue, trackBar->CurrentValue, trackBar->FrameColor, trackBar->BackColor, trackBar->TrackerColor, trackBar->Orientation, trackBar->Radius);
 8002938:	6904      	ldr	r4, [r0, #16]
 800293a:	6945      	ldr	r5, [r0, #20]
 800293c:	6986      	ldr	r6, [r0, #24]
 800293e:	69c3      	ldr	r3, [r0, #28]
 8002940:	9303      	str	r3, [sp, #12]
 8002942:	f890 c028 	ldrb.w	ip, [r0, #40]	; 0x28
 8002946:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 800294a:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 800294e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8002952:	f9b0 7000 	ldrsh.w	r7, [r0]
 8002956:	f890 e02c 	ldrb.w	lr, [r0, #44]	; 0x2c
 800295a:	f8cd e01c 	str.w	lr, [sp, #28]
 800295e:	f8cd c018 	str.w	ip, [sp, #24]
 8002962:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002964:	9305      	str	r3, [sp, #20]
 8002966:	6a00      	ldr	r0, [r0, #32]
 8002968:	9004      	str	r0, [sp, #16]
 800296a:	b236      	sxth	r6, r6
 800296c:	9602      	str	r6, [sp, #8]
 800296e:	b22d      	sxth	r5, r5
 8002970:	9501      	str	r5, [sp, #4]
 8002972:	b224      	sxth	r4, r4
 8002974:	9400      	str	r4, [sp, #0]
 8002976:	4643      	mov	r3, r8
 8002978:	4638      	mov	r0, r7
 800297a:	f7ff fa7f 	bl	8001e7c <TrackBar>
//		{
//			return NotClicked;
//		}
//	}
	return NotClicked;
}
 800297e:	2000      	movs	r0, #0
 8002980:	b008      	add	sp, #32
 8002982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002986 <LCD_VGradient>:
uint8 LCD_VGradient(D_VGradient *VGradient)
{
 8002986:	b530      	push	{r4, r5, lr}
 8002988:	b083      	sub	sp, #12
	//uint8 TouchDet = GetCursorPosition();
	VGradA(VGradient->X1, VGradient->X2, VGradient->Y1, VGradient->Y2, VGradient->ColorH, VGradient->ColorL);
 800298a:	6904      	ldr	r4, [r0, #16]
 800298c:	6945      	ldr	r5, [r0, #20]
 800298e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8002992:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8002996:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800299a:	f9b0 0000 	ldrsh.w	r0, [r0]
 800299e:	9501      	str	r5, [sp, #4]
 80029a0:	9400      	str	r4, [sp, #0]
 80029a2:	f7fe fd01 	bl	80013a8 <VGradA>
//		{
//			return NotClicked;
//		}
//	}
	return NotClicked;
}
 80029a6:	2000      	movs	r0, #0
 80029a8:	b003      	add	sp, #12
 80029aa:	bd30      	pop	{r4, r5, pc}

080029ac <LCD_HGradient>:
uint8 LCD_HGradient(D_HGradient *HGradient)
{
 80029ac:	b530      	push	{r4, r5, lr}
 80029ae:	b083      	sub	sp, #12
//	uint8 TouchDet = GetCursorPosition();
	HGradA(HGradient->X1, HGradient->X2, HGradient->Y1, HGradient->Y2, HGradient->ColorH, HGradient->ColorL);
 80029b0:	6904      	ldr	r4, [r0, #16]
 80029b2:	6945      	ldr	r5, [r0, #20]
 80029b4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80029b8:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80029bc:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80029c0:	f9b0 0000 	ldrsh.w	r0, [r0]
 80029c4:	9501      	str	r5, [sp, #4]
 80029c6:	9400      	str	r4, [sp, #0]
 80029c8:	f7fe fde8 	bl	800159c <HGradA>
//		{
//			return NotClicked;
//		}
//	}
	return NotClicked;
}
 80029cc:	2000      	movs	r0, #0
 80029ce:	b003      	add	sp, #12
 80029d0:	bd30      	pop	{r4, r5, pc}

080029d2 <LCD_DualVGradient>:
uint8 LCD_DualVGradient(D_DualVGradient *DualVGradient)
{
 80029d2:	b530      	push	{r4, r5, lr}
 80029d4:	b085      	sub	sp, #20
//	uint8_t TouchDet = GetCursorPosition();
	VGradB(DualVGradient->X1, DualVGradient->X2, DualVGradient->Y1, DualVGradient->Y2, DualVGradient->ColorH, DualVGradient->ColorC, DualVGradient->ColorL);
 80029d6:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80029da:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80029de:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80029e2:	f9b0 4000 	ldrsh.w	r4, [r0]
 80029e6:	6985      	ldr	r5, [r0, #24]
 80029e8:	9502      	str	r5, [sp, #8]
 80029ea:	6945      	ldr	r5, [r0, #20]
 80029ec:	9501      	str	r5, [sp, #4]
 80029ee:	6900      	ldr	r0, [r0, #16]
 80029f0:	9000      	str	r0, [sp, #0]
 80029f2:	4620      	mov	r0, r4
 80029f4:	f7fe fed4 	bl	80017a0 <VGradB>
//		{
//			return NotClicked;
//		}
//	}
	return NotClicked;
}
 80029f8:	2000      	movs	r0, #0
 80029fa:	b005      	add	sp, #20
 80029fc:	bd30      	pop	{r4, r5, pc}

080029fe <LCD_DualHGradient>:
uint8 LCD_DualHGradient(D_DualHGradient *DualHGradient)
{
 80029fe:	b530      	push	{r4, r5, lr}
 8002a00:	b085      	sub	sp, #20
//	uint8_t TouchDet = GetCursorPosition();
	HGradB(DualHGradient->X1, DualHGradient->X2, DualHGradient->Y1, DualHGradient->Y2, DualHGradient->ColorH, DualHGradient->ColorC, DualHGradient->ColorL);
 8002a02:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8002a06:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8002a0a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8002a0e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8002a12:	6985      	ldr	r5, [r0, #24]
 8002a14:	9502      	str	r5, [sp, #8]
 8002a16:	6945      	ldr	r5, [r0, #20]
 8002a18:	9501      	str	r5, [sp, #4]
 8002a1a:	6900      	ldr	r0, [r0, #16]
 8002a1c:	9000      	str	r0, [sp, #0]
 8002a1e:	4620      	mov	r0, r4
 8002a20:	f7fe fee0 	bl	80017e4 <HGradB>
//		{
//			return NotClicked;
//		}
//	}
	return NotClicked;
}
 8002a24:	2000      	movs	r0, #0
 8002a26:	b005      	add	sp, #20
 8002a28:	bd30      	pop	{r4, r5, pc}

08002a2a <LCD_Label>:
void LCD_Label(D_Label *label, char Text[])
{
 8002a2a:	b508      	push	{r3, lr}
    Label(label->X, label->Y, label->Color, Text);
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	6882      	ldr	r2, [r0, #8]
 8002a30:	8881      	ldrh	r1, [r0, #4]
 8002a32:	8800      	ldrh	r0, [r0, #0]
 8002a34:	f7ff f9e4 	bl	8001e00 <Label>
}
 8002a38:	bd08      	pop	{r3, pc}

08002a3a <LCD_Form>:
uint8 LCD_Form(D_Form *form, char Text[])
{
 8002a3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a3c:	b089      	sub	sp, #36	; 0x24
	//uint8 TouchDet = GetCursorPosition();
	Form(form->X1, form->X2, form->Y1, form->Y2, form->YBar, form->Thickness, form->FrameColor, form->BarColor, form->WindowColor, form->TextColor, Text);
 8002a3e:	6904      	ldr	r4, [r0, #16]
 8002a40:	7d07      	ldrb	r7, [r0, #20]
 8002a42:	8983      	ldrh	r3, [r0, #12]
 8002a44:	8902      	ldrh	r2, [r0, #8]
 8002a46:	8886      	ldrh	r6, [r0, #4]
 8002a48:	8805      	ldrh	r5, [r0, #0]
 8002a4a:	9106      	str	r1, [sp, #24]
 8002a4c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8002a4e:	9105      	str	r1, [sp, #20]
 8002a50:	6a01      	ldr	r1, [r0, #32]
 8002a52:	9104      	str	r1, [sp, #16]
 8002a54:	69c1      	ldr	r1, [r0, #28]
 8002a56:	9103      	str	r1, [sp, #12]
 8002a58:	6981      	ldr	r1, [r0, #24]
 8002a5a:	9102      	str	r1, [sp, #8]
 8002a5c:	9701      	str	r7, [sp, #4]
 8002a5e:	b2a4      	uxth	r4, r4
 8002a60:	9400      	str	r4, [sp, #0]
 8002a62:	4631      	mov	r1, r6
 8002a64:	4628      	mov	r0, r5
 8002a66:	f7ff fb03 	bl	8002070 <Form>
//			form->Is_pressed = NotClicked;
//			return NotClicked;
//		}
//	}
	return NotClicked;
}
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	b009      	add	sp, #36	; 0x24
 8002a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a70 <LCD_Button>:
uint8 LCD_Button(D_Button *button, char Text[])
{
 8002a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a72:	b087      	sub	sp, #28
//		Button(button->X1, button->X2, button->Y1, button->Y2, button->Thickness, button->FrameColor, button->PressedColor, Text, button->TextColor);
//	 	return Clicked;
//	}
//	else
//	{
		Button(button->X1, button->X2, button->Y1, button->Y2, button->Thickness, button->FrameColor, button->FillColor, Text, button->TextColor);
 8002a74:	7c06      	ldrb	r6, [r0, #16]
 8002a76:	8983      	ldrh	r3, [r0, #12]
 8002a78:	8902      	ldrh	r2, [r0, #8]
 8002a7a:	8885      	ldrh	r5, [r0, #4]
 8002a7c:	8804      	ldrh	r4, [r0, #0]
 8002a7e:	6a07      	ldr	r7, [r0, #32]
 8002a80:	9704      	str	r7, [sp, #16]
 8002a82:	9103      	str	r1, [sp, #12]
 8002a84:	6981      	ldr	r1, [r0, #24]
 8002a86:	9102      	str	r1, [sp, #8]
 8002a88:	6941      	ldr	r1, [r0, #20]
 8002a8a:	9101      	str	r1, [sp, #4]
 8002a8c:	9600      	str	r6, [sp, #0]
 8002a8e:	4629      	mov	r1, r5
 8002a90:	4620      	mov	r0, r4
 8002a92:	f7ff fb54 	bl	800213e <Button>
//		{
//			return NotClicked;
//		}
//	}
	return NotClicked;
}
 8002a96:	2000      	movs	r0, #0
 8002a98:	b007      	add	sp, #28
 8002a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a9c <LCD_HGradientForm>:
uint8 LCD_HGradientForm(D_HGradientForm *HGradientForm, char Text[])
{
 8002a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a9e:	b089      	sub	sp, #36	; 0x24
	//uint8 TouchDet = GetCursorPosition();
	GradientFormA(HGradientForm->X1, HGradientForm->X2, HGradientForm->Y1, HGradientForm->Y2, HGradientForm->YBar, HGradientForm->Thickness, HGradientForm->FrameColor, HGradientForm->BarColorH, HGradientForm->BarColorL, HGradientForm->WindowColor, HGradientForm->TextColor, Text);
 8002aa0:	6904      	ldr	r4, [r0, #16]
 8002aa2:	7d07      	ldrb	r7, [r0, #20]
 8002aa4:	8983      	ldrh	r3, [r0, #12]
 8002aa6:	8902      	ldrh	r2, [r0, #8]
 8002aa8:	8886      	ldrh	r6, [r0, #4]
 8002aaa:	8805      	ldrh	r5, [r0, #0]
 8002aac:	9107      	str	r1, [sp, #28]
 8002aae:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002ab0:	9106      	str	r1, [sp, #24]
 8002ab2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8002ab4:	9105      	str	r1, [sp, #20]
 8002ab6:	6a01      	ldr	r1, [r0, #32]
 8002ab8:	9104      	str	r1, [sp, #16]
 8002aba:	69c1      	ldr	r1, [r0, #28]
 8002abc:	9103      	str	r1, [sp, #12]
 8002abe:	6981      	ldr	r1, [r0, #24]
 8002ac0:	9102      	str	r1, [sp, #8]
 8002ac2:	9701      	str	r7, [sp, #4]
 8002ac4:	b2a4      	uxth	r4, r4
 8002ac6:	9400      	str	r4, [sp, #0]
 8002ac8:	4631      	mov	r1, r6
 8002aca:	4628      	mov	r0, r5
 8002acc:	f7ff fb6e 	bl	80021ac <GradientFormA>
//			HGradientForm->Is_pressed = NotClicked;
//			return NotClicked;
//		}
//	}
	return NotClicked;
}
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	b009      	add	sp, #36	; 0x24
 8002ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ad6 <LCD_VGradientForm>:
uint8 LCD_VGradientForm(D_VGradientForm *VGradientForm, char Text[])
{
 8002ad6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ad8:	b089      	sub	sp, #36	; 0x24
	//uint8 TouchDet = GetCursorPosition();
	GradientFormB(VGradientForm->X1, VGradientForm->X2, VGradientForm->Y1, VGradientForm->Y2, VGradientForm->YBar, VGradientForm->Thickness, VGradientForm->FrameColor, VGradientForm->BarColorH, VGradientForm->BarColorL, VGradientForm->WindowColor, VGradientForm->TextColor, Text);
 8002ada:	6904      	ldr	r4, [r0, #16]
 8002adc:	7d07      	ldrb	r7, [r0, #20]
 8002ade:	8983      	ldrh	r3, [r0, #12]
 8002ae0:	8902      	ldrh	r2, [r0, #8]
 8002ae2:	8886      	ldrh	r6, [r0, #4]
 8002ae4:	8805      	ldrh	r5, [r0, #0]
 8002ae6:	9107      	str	r1, [sp, #28]
 8002ae8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002aea:	9106      	str	r1, [sp, #24]
 8002aec:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8002aee:	9105      	str	r1, [sp, #20]
 8002af0:	6a01      	ldr	r1, [r0, #32]
 8002af2:	9104      	str	r1, [sp, #16]
 8002af4:	69c1      	ldr	r1, [r0, #28]
 8002af6:	9103      	str	r1, [sp, #12]
 8002af8:	6981      	ldr	r1, [r0, #24]
 8002afa:	9102      	str	r1, [sp, #8]
 8002afc:	9701      	str	r7, [sp, #4]
 8002afe:	b2a4      	uxth	r4, r4
 8002b00:	9400      	str	r4, [sp, #0]
 8002b02:	4631      	mov	r1, r6
 8002b04:	4628      	mov	r0, r5
 8002b06:	f7ff fbbb 	bl	8002280 <GradientFormB>
//			VGradientForm->Is_pressed = NotClicked;
//			return NotClicked;
//		}
//	}
	return NotClicked;
}
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	b009      	add	sp, #36	; 0x24
 8002b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b10 <LCD_ProgressBarVGradient>:
void LCD_ProgressBarVGradient(D_ProgressBarVGradient *ProgressBarVGradient)
{
 8002b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b14:	b08a      	sub	sp, #40	; 0x28
   Progress_bar_gradientB_V(ProgressBarVGradient->X1, ProgressBarVGradient->X2, ProgressBarVGradient->Y1, ProgressBarVGradient->Y2, ProgressBarVGradient->StartValue, ProgressBarVGradient->StopValue, ProgressBarVGradient->CurrentValue, ProgressBarVGradient->FrameColor, ProgressBarVGradient->FillColor, ProgressBarVGradient->BarColorH, ProgressBarVGradient->BarColorC, ProgressBarVGradient->Thickness, ProgressBarVGradient->Orientation);
 8002b16:	6904      	ldr	r4, [r0, #16]
 8002b18:	6945      	ldr	r5, [r0, #20]
 8002b1a:	6986      	ldr	r6, [r0, #24]
 8002b1c:	f890 c02c 	ldrb.w	ip, [r0, #44]	; 0x2c
 8002b20:	f890 e02d 	ldrb.w	lr, [r0, #45]	; 0x2d
 8002b24:	f8b0 800c 	ldrh.w	r8, [r0, #12]
 8002b28:	8902      	ldrh	r2, [r0, #8]
 8002b2a:	8881      	ldrh	r1, [r0, #4]
 8002b2c:	8807      	ldrh	r7, [r0, #0]
 8002b2e:	f8cd e020 	str.w	lr, [sp, #32]
 8002b32:	f8cd c01c 	str.w	ip, [sp, #28]
 8002b36:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002b38:	9306      	str	r3, [sp, #24]
 8002b3a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002b3c:	9305      	str	r3, [sp, #20]
 8002b3e:	6a03      	ldr	r3, [r0, #32]
 8002b40:	9304      	str	r3, [sp, #16]
 8002b42:	69c0      	ldr	r0, [r0, #28]
 8002b44:	9003      	str	r0, [sp, #12]
 8002b46:	b2b6      	uxth	r6, r6
 8002b48:	9602      	str	r6, [sp, #8]
 8002b4a:	b2ad      	uxth	r5, r5
 8002b4c:	9501      	str	r5, [sp, #4]
 8002b4e:	b2a4      	uxth	r4, r4
 8002b50:	9400      	str	r4, [sp, #0]
 8002b52:	4643      	mov	r3, r8
 8002b54:	4638      	mov	r0, r7
 8002b56:	f7fe ff5f 	bl	8001a18 <Progress_bar_gradientB_V>
}
 8002b5a:	b00a      	add	sp, #40	; 0x28
 8002b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002b60 <LCD_CheckBox>:
//	}
	return NotClicked;

}
uint8 LCD_CheckBox(D_CheckBox *ctrl, char Name[])
{
 8002b60:	b570      	push	{r4, r5, r6, lr}
 8002b62:	b086      	sub	sp, #24
//	uint8 TouchDet = GetCursorPosition();

	CheckBox(ctrl->X1, ctrl->X2, ctrl->Y1, ctrl->Y2, ctrl->FrameColor, ctrl->BackColor, ctrl->CheckColor, ctrl->Checked, ctrl->TextColor, Name);
 8002b64:	7f06      	ldrb	r6, [r0, #28]
 8002b66:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8002b6a:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8002b6e:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 8002b72:	f9b0 4000 	ldrsh.w	r4, [r0]
 8002b76:	9105      	str	r1, [sp, #20]
 8002b78:	6a01      	ldr	r1, [r0, #32]
 8002b7a:	9104      	str	r1, [sp, #16]
 8002b7c:	9603      	str	r6, [sp, #12]
 8002b7e:	6981      	ldr	r1, [r0, #24]
 8002b80:	9102      	str	r1, [sp, #8]
 8002b82:	6941      	ldr	r1, [r0, #20]
 8002b84:	9101      	str	r1, [sp, #4]
 8002b86:	6901      	ldr	r1, [r0, #16]
 8002b88:	9100      	str	r1, [sp, #0]
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f7ff fbe1 	bl	8002354 <CheckBox>
		{
			return NotClicked;
		}
	}*/
	return NotClicked;
}
 8002b92:	2000      	movs	r0, #0
 8002b94:	b006      	add	sp, #24
 8002b96:	bd70      	pop	{r4, r5, r6, pc}

08002b98 <LCD_RadioButton>:
uint8 LCD_RadioButton(D_RadioButton *RadioButton, char Name[])
{
 8002b98:	b570      	push	{r4, r5, r6, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	4604      	mov	r4, r0
 8002b9e:	460d      	mov	r5, r1
//	uint8 TouchDet = GetCursorPosition();
	Radiobutton(RadioButton->X, RadioButton->Y, RadioButton->Radius, RadioButton->ExCirColor, RadioButton->InCirColor, RadioButton->BackColor,
			RadioButton->Transp_key, RadioButton->Checked);
 8002ba0:	7f03      	ldrb	r3, [r0, #28]
	Radiobutton(RadioButton->X, RadioButton->Y, RadioButton->Radius, RadioButton->ExCirColor, RadioButton->InCirColor, RadioButton->BackColor,
 8002ba2:	8902      	ldrh	r2, [r0, #8]
 8002ba4:	8881      	ldrh	r1, [r0, #4]
 8002ba6:	8800      	ldrh	r0, [r0, #0]
 8002ba8:	7f66      	ldrb	r6, [r4, #29]
 8002baa:	9603      	str	r6, [sp, #12]
 8002bac:	9302      	str	r3, [sp, #8]
 8002bae:	6963      	ldr	r3, [r4, #20]
 8002bb0:	9301      	str	r3, [sp, #4]
 8002bb2:	6923      	ldr	r3, [r4, #16]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	68e3      	ldr	r3, [r4, #12]
 8002bb8:	f7ff fc16 	bl	80023e8 <Radiobutton>
	Label(RadioButton->X + RadioButton->Radius + 6, RadioButton->Y - (RadioButton->Radius * 2), RadioButton->TextColor, Name);
 8002bbc:	6820      	ldr	r0, [r4, #0]
 8002bbe:	8923      	ldrh	r3, [r4, #8]
 8002bc0:	4418      	add	r0, r3
 8002bc2:	b280      	uxth	r0, r0
 8002bc4:	6861      	ldr	r1, [r4, #4]
 8002bc6:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
 8002bca:	3006      	adds	r0, #6
 8002bcc:	462b      	mov	r3, r5
 8002bce:	69a2      	ldr	r2, [r4, #24]
 8002bd0:	b289      	uxth	r1, r1
 8002bd2:	b280      	uxth	r0, r0
 8002bd4:	f7ff f914 	bl	8001e00 <Label>
//		{
//			return NotClicked;
//		}
//	}
	return NotClicked;
}
 8002bd8:	2000      	movs	r0, #0
 8002bda:	b004      	add	sp, #16
 8002bdc:	bd70      	pop	{r4, r5, r6, pc}

08002bde <LCD_Graph>:
void LCD_Graph(D_Graph *Gr)
{
	if(Gr->Unvisible == 0)
 8002bde:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002be2:	b103      	cbz	r3, 8002be6 <LCD_Graph+0x8>
 8002be4:	4770      	bx	lr
{
 8002be6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002be8:	b08d      	sub	sp, #52	; 0x34
 8002bea:	4604      	mov	r4, r0
	{
	   Graph(Gr->X1, Gr->X2, Gr->Y1, Gr->Y2, Gr->FillColor, Gr->FrameColor, Gr->Thickness, Gr->LinesColor, Gr->StepX, Gr->StepY, Gr->XMax, Gr->XMin, Gr->YMax, Gr->YMin);
 8002bec:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8002bee:	950b      	str	r5, [sp, #44]	; 0x2c
 8002bf0:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8002bf2:	6b07      	ldr	r7, [r0, #48]	; 0x30
 8002bf4:	8983      	ldrh	r3, [r0, #12]
 8002bf6:	8902      	ldrh	r2, [r0, #8]
 8002bf8:	8881      	ldrh	r1, [r0, #4]
 8002bfa:	8800      	ldrh	r0, [r0, #0]
 8002bfc:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8002bfe:	9509      	str	r5, [sp, #36]	; 0x24
 8002c00:	9708      	str	r7, [sp, #32]
 8002c02:	9607      	str	r6, [sp, #28]
 8002c04:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002c06:	9506      	str	r5, [sp, #24]
 8002c08:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002c0a:	9505      	str	r5, [sp, #20]
 8002c0c:	6a25      	ldr	r5, [r4, #32]
 8002c0e:	9504      	str	r5, [sp, #16]
 8002c10:	69e5      	ldr	r5, [r4, #28]
 8002c12:	9503      	str	r5, [sp, #12]
 8002c14:	69a5      	ldr	r5, [r4, #24]
 8002c16:	b2ed      	uxtb	r5, r5
 8002c18:	9502      	str	r5, [sp, #8]
 8002c1a:	6965      	ldr	r5, [r4, #20]
 8002c1c:	9501      	str	r5, [sp, #4]
 8002c1e:	6924      	ldr	r4, [r4, #16]
 8002c20:	9400      	str	r4, [sp, #0]
 8002c22:	f7ff fc02 	bl	800242a <Graph>
	}
}
 8002c26:	b00d      	add	sp, #52	; 0x34
 8002c28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c2a <LCD_GraphLine>:
void LCD_GraphLine(D_Graph *Gr, D_GraphLine *GrL, int data[])
{
	if(GrL->Unvisible == 0)
 8002c2a:	7a4b      	ldrb	r3, [r1, #9]
 8002c2c:	b103      	cbz	r3, 8002c30 <LCD_GraphLine+0x6>
 8002c2e:	4770      	bx	lr
{
 8002c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c32:	b08d      	sub	sp, #52	; 0x34
 8002c34:	4696      	mov	lr, r2
 8002c36:	460e      	mov	r6, r1
 8002c38:	4604      	mov	r4, r0
	{
	   GraphLine(Gr->X1, Gr->X2, Gr->Y1, Gr->Y2, GrL->LineColor, Gr->Thickness, Gr->StepX, Gr->StepY, Gr->XMax, Gr->XMin, Gr->YMax, Gr->YMin, data, GrL->Points_count, GrL->Thickness);
 8002c3a:	6987      	ldr	r7, [r0, #24]
 8002c3c:	8983      	ldrh	r3, [r0, #12]
 8002c3e:	8902      	ldrh	r2, [r0, #8]
 8002c40:	8881      	ldrh	r1, [r0, #4]
 8002c42:	8800      	ldrh	r0, [r0, #0]
 8002c44:	f896 c008 	ldrb.w	ip, [r6, #8]
 8002c48:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8002c4c:	6835      	ldr	r5, [r6, #0]
 8002c4e:	9509      	str	r5, [sp, #36]	; 0x24
 8002c50:	f8cd e020 	str.w	lr, [sp, #32]
 8002c54:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8002c56:	9507      	str	r5, [sp, #28]
 8002c58:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002c5a:	9506      	str	r5, [sp, #24]
 8002c5c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8002c5e:	9505      	str	r5, [sp, #20]
 8002c60:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002c62:	9504      	str	r5, [sp, #16]
 8002c64:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002c66:	9503      	str	r5, [sp, #12]
 8002c68:	6a24      	ldr	r4, [r4, #32]
 8002c6a:	9402      	str	r4, [sp, #8]
 8002c6c:	b2ff      	uxtb	r7, r7
 8002c6e:	9701      	str	r7, [sp, #4]
 8002c70:	6874      	ldr	r4, [r6, #4]
 8002c72:	9400      	str	r4, [sp, #0]
 8002c74:	f7ff fcc0 	bl	80025f8 <GraphLine>
	}
}
 8002c78:	b00d      	add	sp, #52	; 0x34
 8002c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c7c <MainFunc>:

extern LTDC_HandleTypeDef hltdc;
DisplayConfig ds;

void MainFunc ()
{
 8002c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c80:	f5ad 7d57 	sub.w	sp, sp, #860	; 0x35c
	ds.Color_Type = Color565;
 8002c84:	4ec1      	ldr	r6, [pc, #772]	; (8002f8c <MainFunc+0x310>)
 8002c86:	2400      	movs	r4, #0
 8002c88:	7334      	strb	r4, [r6, #12]
	ds.Display_Height = 272;
 8002c8a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002c8e:	6073      	str	r3, [r6, #4]
	ds.Display_Width = 480;
 8002c90:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002c94:	60b3      	str	r3, [r6, #8]
	ds.Layers = 1;
 8002c96:	2501      	movs	r5, #1
 8002c98:	7375      	strb	r5, [r6, #13]
	ds.Start_RAM_Address = (uint32_t)&RGB;
 8002c9a:	49bd      	ldr	r1, [pc, #756]	; (8002f90 <MainFunc+0x314>)
 8002c9c:	6031      	str	r1, [r6, #0]

	HAL_LTDC_SetAddress(&hltdc,(uint32_t)&RGB,0);  // запускаем модуль LTDC (железный)
 8002c9e:	4622      	mov	r2, r4
 8002ca0:	48bc      	ldr	r0, [pc, #752]	; (8002f94 <MainFunc+0x318>)
 8002ca2:	f001 feeb 	bl	8004a7c <HAL_LTDC_SetAddress>
	Graphics_Init(&ds); //инит библиотеки (из структуры ds)
 8002ca6:	4630      	mov	r0, r6
 8002ca8:	f7fe f8c2 	bl	8000e30 <Graphics_Init>
    D_RadioButton rb;
    D_Graph gr;
    D_GraphLine grL;


	kv.X1 = 200;
 8002cac:	f04f 08c8 	mov.w	r8, #200	; 0xc8
 8002cb0:	f8cd 8348 	str.w	r8, [sp, #840]	; 0x348
	kv.X2 = 400;
 8002cb4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002cb8:	93d3      	str	r3, [sp, #844]	; 0x34c
	kv.Y1 = 30;
 8002cba:	271e      	movs	r7, #30
 8002cbc:	97d4      	str	r7, [sp, #848]	; 0x350
	kv.Y2 = 230;
 8002cbe:	23e6      	movs	r3, #230	; 0xe6
 8002cc0:	93d5      	str	r3, [sp, #852]	; 0x354
	kv.Color = green;
 8002cc2:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002cc6:	91d1      	str	r1, [sp, #836]	; 0x344

	pan.FrameColor = blue;
 8002cc8:	23ff      	movs	r3, #255	; 0xff
 8002cca:	93ca      	str	r3, [sp, #808]	; 0x328
	pan.FillColor = yellow;
 8002ccc:	f8df b2c8 	ldr.w	fp, [pc, #712]	; 8002f98 <MainFunc+0x31c>
 8002cd0:	f8cd b32c 	str.w	fp, [sp, #812]	; 0x32c
	pan.Thickness = 2;
 8002cd4:	f04f 0202 	mov.w	r2, #2
 8002cd8:	f88d 2340 	strb.w	r2, [sp, #832]	; 0x340
	pan.X1 = 1;
 8002cdc:	95cc      	str	r5, [sp, #816]	; 0x330
	pan.X2 = 480;
 8002cde:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002ce2:	92cd      	str	r2, [sp, #820]	; 0x334
	pan.Y1 = 1;
 8002ce4:	95ce      	str	r5, [sp, #824]	; 0x338
	pan.Y2 = 272;
 8002ce6:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002cea:	92cf      	str	r2, [sp, #828]	; 0x33c
	rec.X2 = 480;
	rec.Y1 = 50;
	rec.Y2 = 270;
	rec.Color = red;

	line.X1 = 100;
 8002cec:	2264      	movs	r2, #100	; 0x64
 8002cee:	92c6      	str	r2, [sp, #792]	; 0x318
	line.X2 = 450;
 8002cf0:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002cf4:	92c7      	str	r2, [sp, #796]	; 0x31c
	line.Y1 = 200;
 8002cf6:	f8cd 8320 	str.w	r8, [sp, #800]	; 0x320
	line.Color = blue;
 8002cfa:	93c5      	str	r3, [sp, #788]	; 0x314
	line.Thickness = 5;
 8002cfc:	f04f 0205 	mov.w	r2, #5
 8002d00:	f88d 2324 	strb.w	r2, [sp, #804]	; 0x324

	ball.X1 = 200;
 8002d04:	f8cd 8300 	str.w	r8, [sp, #768]	; 0x300
	ball.Y1 = 125;
 8002d08:	227d      	movs	r2, #125	; 0x7d
 8002d0a:	92c1      	str	r2, [sp, #772]	; 0x304
	ball.Color = green;
 8002d0c:	91c3      	str	r1, [sp, #780]	; 0x30c
	ball.R = 40;
 8002d0e:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8002d12:	f8cd c308 	str.w	ip, [sp, #776]	; 0x308

	p.X1 = 200;
 8002d16:	f8cd 82d4 	str.w	r8, [sp, #724]	; 0x2d4
	p.X2 = 400;
 8002d1a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002d1e:	92b6      	str	r2, [sp, #728]	; 0x2d8
	p.Y1 = 30;
 8002d20:	97b7      	str	r7, [sp, #732]	; 0x2dc
	p.Y2 = 40;
 8002d22:	f8cd c2e0 	str.w	ip, [sp, #736]	; 0x2e0
	p.StartValue = 0;
 8002d26:	94b9      	str	r4, [sp, #740]	; 0x2e4
	p.StopValue = 10;
 8002d28:	260a      	movs	r6, #10
 8002d2a:	96ba      	str	r6, [sp, #744]	; 0x2e8
	p.CurrentValue = 6;
 8002d2c:	2206      	movs	r2, #6
 8002d2e:	92bb      	str	r2, [sp, #748]	; 0x2ec
	p.Thickness = 3;
 8002d30:	f04f 0e03 	mov.w	lr, #3
 8002d34:	f88d e2fc 	strb.w	lr, [sp, #764]	; 0x2fc
	p.FillColor = black;
 8002d38:	94bd      	str	r4, [sp, #756]	; 0x2f4
	p.FrameColor = blue;
 8002d3a:	93bc      	str	r3, [sp, #752]	; 0x2f0
	p.BarColor = red;
 8002d3c:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8002d40:	92be      	str	r2, [sp, #760]	; 0x2f8
	p.Orientation = Horisontal;
 8002d42:	f88d e2fd 	strb.w	lr, [sp, #765]	; 0x2fd

	pa.X1 = 30;
 8002d46:	97aa      	str	r7, [sp, #680]	; 0x2a8
	pa.X2 = 50;
 8002d48:	2032      	movs	r0, #50	; 0x32
 8002d4a:	90ab      	str	r0, [sp, #684]	; 0x2ac
	pa.Y1 = 30;
 8002d4c:	97ac      	str	r7, [sp, #688]	; 0x2b0
	pa.Y2 = 262;
 8002d4e:	f44f 7983 	mov.w	r9, #262	; 0x106
 8002d52:	f8cd 92b4 	str.w	r9, [sp, #692]	; 0x2b4
	pa.StartValue = 0;
 8002d56:	94ae      	str	r4, [sp, #696]	; 0x2b8
	pa.StopValue = 10;
 8002d58:	96af      	str	r6, [sp, #700]	; 0x2bc
	pa.CurrentValue = 6;
 8002d5a:	2006      	movs	r0, #6
 8002d5c:	90b0      	str	r0, [sp, #704]	; 0x2c0
	pa.Thickness = 3;
 8002d5e:	f88d e2d0 	strb.w	lr, [sp, #720]	; 0x2d0
	pa.FillColor = black;
 8002d62:	94b2      	str	r4, [sp, #712]	; 0x2c8
	pa.FrameColor = blue;
 8002d64:	93b1      	str	r3, [sp, #708]	; 0x2c4
	pa.BarColor = red;
 8002d66:	92b3      	str	r2, [sp, #716]	; 0x2cc
	pa.Orientation = Vertical;
 8002d68:	f04f 0a04 	mov.w	sl, #4
 8002d6c:	f88d a2d1 	strb.w	sl, [sp, #721]	; 0x2d1

	round.X1 = 100;
 8002d70:	2064      	movs	r0, #100	; 0x64
 8002d72:	90a4      	str	r0, [sp, #656]	; 0x290
	round.Y1 = 120;
 8002d74:	2078      	movs	r0, #120	; 0x78
 8002d76:	90a5      	str	r0, [sp, #660]	; 0x294
	round.Color = yellow;
 8002d78:	f8cd b29c 	str.w	fp, [sp, #668]	; 0x29c
	round.Thickness = 3;
 8002d7c:	f8cd e2a0 	str.w	lr, [sp, #672]	; 0x2a0
	round.R = 40;
 8002d80:	f8cd c298 	str.w	ip, [sp, #664]	; 0x298

	check.X1 = 20;
 8002d84:	2014      	movs	r0, #20
 8002d86:	909a      	str	r0, [sp, #616]	; 0x268
	check.X2 = 35;
 8002d88:	2023      	movs	r0, #35	; 0x23
 8002d8a:	909b      	str	r0, [sp, #620]	; 0x26c
	check.Y1 = 10;
 8002d8c:	969c      	str	r6, [sp, #624]	; 0x270
	check.Y2 = 25;
 8002d8e:	f04f 0c19 	mov.w	ip, #25
 8002d92:	f8cd c274 	str.w	ip, [sp, #628]	; 0x274
	check.FrameColor = blue;
 8002d96:	939e      	str	r3, [sp, #632]	; 0x278
	check.BackColor = white;
 8002d98:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 8002d9c:	979f      	str	r7, [sp, #636]	; 0x27c
	check.CheckColor = black;
 8002d9e:	94a0      	str	r4, [sp, #640]	; 0x280
	check.Checked = 1;
 8002da0:	f88d 5284 	strb.w	r5, [sp, #644]	; 0x284
	check.TextColor = white;
 8002da4:	97a2      	str	r7, [sp, #648]	; 0x288

	tr.X1 = 200;
 8002da6:	f8cd 8234 	str.w	r8, [sp, #564]	; 0x234
	tr.X2 = 400;
 8002daa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002dae:	908e      	str	r0, [sp, #568]	; 0x238
	tr.Y1 = 45;
 8002db0:	202d      	movs	r0, #45	; 0x2d
 8002db2:	908f      	str	r0, [sp, #572]	; 0x23c
	tr.Y2 = 50;
 8002db4:	2032      	movs	r0, #50	; 0x32
 8002db6:	9090      	str	r0, [sp, #576]	; 0x240
	tr.StartValue = 0;
 8002db8:	9491      	str	r4, [sp, #580]	; 0x244
	tr.StopValue = 10;
 8002dba:	9692      	str	r6, [sp, #584]	; 0x248
	tr.FrameColor = blue;
 8002dbc:	9394      	str	r3, [sp, #592]	; 0x250
	tr.BackColor = red;
 8002dbe:	9295      	str	r2, [sp, #596]	; 0x254
	tr.Orientation = Horisontal;
 8002dc0:	f88d e25c 	strb.w	lr, [sp, #604]	; 0x25c
	tr.Radius = 6;
 8002dc4:	2006      	movs	r0, #6
 8002dc6:	9098      	str	r0, [sp, #608]	; 0x260
	tr.TrackerColor = yellow;
 8002dc8:	f8cd b258 	str.w	fp, [sp, #600]	; 0x258

	tra.X1 = 20;
 8002dcc:	2014      	movs	r0, #20
 8002dce:	9080      	str	r0, [sp, #512]	; 0x200
	tra.X2 = 25;
 8002dd0:	f8cd c204 	str.w	ip, [sp, #516]	; 0x204
	tra.Y1 = 35;
 8002dd4:	2023      	movs	r0, #35	; 0x23
 8002dd6:	9082      	str	r0, [sp, #520]	; 0x208
	tra.Y2 = 262;
 8002dd8:	f8cd 920c 	str.w	r9, [sp, #524]	; 0x20c
	tra.StartValue = 0;
 8002ddc:	9484      	str	r4, [sp, #528]	; 0x210
	tra.StopValue = 10;
 8002dde:	9685      	str	r6, [sp, #532]	; 0x214
	tra.FrameColor = blue;
 8002de0:	9387      	str	r3, [sp, #540]	; 0x21c
	tra.BackColor = red;
 8002de2:	9288      	str	r2, [sp, #544]	; 0x220
	tra.Orientation = Vertical;
 8002de4:	f88d a228 	strb.w	sl, [sp, #552]	; 0x228
	tra.Radius = 6;
 8002de8:	2006      	movs	r0, #6
 8002dea:	908b      	str	r0, [sp, #556]	; 0x22c
	tra.TrackerColor = yellow;
 8002dec:	f8cd b224 	str.w	fp, [sp, #548]	; 0x224

	vgr.X1 = 240;
 8002df0:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 8002df4:	f8cd a1e4 	str.w	sl, [sp, #484]	; 0x1e4
	vgr.X2 = 340;
 8002df8:	f44f 7aaa 	mov.w	sl, #340	; 0x154
 8002dfc:	f8cd a1e8 	str.w	sl, [sp, #488]	; 0x1e8
	vgr.Y1 = 190;
 8002e00:	20be      	movs	r0, #190	; 0xbe
 8002e02:	907b      	str	r0, [sp, #492]	; 0x1ec
	vgr.Y2 = 262;
 8002e04:	f8cd 91f0 	str.w	r9, [sp, #496]	; 0x1f0
	vgr.ColorH = red;
 8002e08:	927d      	str	r2, [sp, #500]	; 0x1f4
	vgr.ColorL = lightBlue1;
 8002e0a:	f8df a190 	ldr.w	sl, [pc, #400]	; 8002f9c <MainFunc+0x320>
 8002e0e:	f8cd a1f8 	str.w	sl, [sp, #504]	; 0x1f8
	vgr.Unvisible = 0;
 8002e12:	f88d 41fd 	strb.w	r4, [sp, #509]	; 0x1fd
	vgr.Is_pressed = 0;
 8002e16:	f88d 41fc 	strb.w	r4, [sp, #508]	; 0x1fc

	hgr.X1 = 135;
 8002e1a:	f04f 0b87 	mov.w	fp, #135	; 0x87
 8002e1e:	f8cd b1c8 	str.w	fp, [sp, #456]	; 0x1c8
	hgr.X2 = 235;
 8002e22:	f04f 0beb 	mov.w	fp, #235	; 0xeb
 8002e26:	f8cd b1cc 	str.w	fp, [sp, #460]	; 0x1cc
	hgr.Y1 = 190;
 8002e2a:	9074      	str	r0, [sp, #464]	; 0x1d0
	hgr.Y2 = 262;
 8002e2c:	f8cd 91d4 	str.w	r9, [sp, #468]	; 0x1d4
	hgr.ColorH = red;
 8002e30:	9276      	str	r2, [sp, #472]	; 0x1d8
	hgr.ColorL = lightBlue1;
 8002e32:	f8cd a1dc 	str.w	sl, [sp, #476]	; 0x1dc
	hgr.Unvisible = 0;
 8002e36:	f88d 41e1 	strb.w	r4, [sp, #481]	; 0x1e1
	hgr.Is_pressed = 0;
 8002e3a:	f88d 41e0 	strb.w	r4, [sp, #480]	; 0x1e0

	dhgr.X1 = 345;
 8002e3e:	f240 1b59 	movw	fp, #345	; 0x159
 8002e42:	f8cd b1a8 	str.w	fp, [sp, #424]	; 0x1a8
	dhgr.X2 = 445;
 8002e46:	f240 1abd 	movw	sl, #445	; 0x1bd
 8002e4a:	f8cd a1ac 	str.w	sl, [sp, #428]	; 0x1ac
	dhgr.Y1 = 190;
 8002e4e:	906c      	str	r0, [sp, #432]	; 0x1b0
	dhgr.Y2 = 262;
 8002e50:	f8cd 91b4 	str.w	r9, [sp, #436]	; 0x1b4
	dhgr.ColorH  = red;
 8002e54:	926e      	str	r2, [sp, #440]	; 0x1b8
	dhgr.ColorC = green;
 8002e56:	916f      	str	r1, [sp, #444]	; 0x1bc
	dhgr.ColorL = blue;
 8002e58:	9370      	str	r3, [sp, #448]	; 0x1c0

	dvgr.X1 = 345;
 8002e5a:	f8cd b188 	str.w	fp, [sp, #392]	; 0x188
	dvgr.X2 = 445;
 8002e5e:	f8cd a18c 	str.w	sl, [sp, #396]	; 0x18c
	dvgr.Y1 = 113;
 8002e62:	f04f 0971 	mov.w	r9, #113	; 0x71
 8002e66:	f8cd 9190 	str.w	r9, [sp, #400]	; 0x190
	dvgr.Y2 = 185;
 8002e6a:	f04f 09b9 	mov.w	r9, #185	; 0xb9
 8002e6e:	f8cd 9194 	str.w	r9, [sp, #404]	; 0x194
	dvgr.ColorH  = red;
 8002e72:	9266      	str	r2, [sp, #408]	; 0x198
	dvgr.ColorC = green;
 8002e74:	9167      	str	r1, [sp, #412]	; 0x19c
	dvgr.ColorL = blue;
 8002e76:	9368      	str	r3, [sp, #416]	; 0x1a0

    lb.X = 80;
 8002e78:	f04f 0950 	mov.w	r9, #80	; 0x50
 8002e7c:	f8cd 9174 	str.w	r9, [sp, #372]	; 0x174
    lb.Y = 90;
 8002e80:	205a      	movs	r0, #90	; 0x5a
 8002e82:	905e      	str	r0, [sp, #376]	; 0x178
    lb.Color = white;
 8002e84:	975f      	str	r7, [sp, #380]	; 0x17c
    lb.ClickedColor = gray;
 8002e86:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8002fa0 <MainFunc+0x324>
 8002e8a:	f8cd 9180 	str.w	r9, [sp, #384]	; 0x180

    fr.X1 = 2;
 8002e8e:	2002      	movs	r0, #2
 8002e90:	9052      	str	r0, [sp, #328]	; 0x148
    fr.X2 = 479;
 8002e92:	f240 1adf 	movw	sl, #479	; 0x1df
 8002e96:	f8cd a14c 	str.w	sl, [sp, #332]	; 0x14c
    fr.Y1 = 2;
 8002e9a:	9054      	str	r0, [sp, #336]	; 0x150
    fr.Y2 = 271;
 8002e9c:	f240 1b0f 	movw	fp, #271	; 0x10f
 8002ea0:	f8cd b154 	str.w	fp, [sp, #340]	; 0x154
    fr.YBar = 25;
 8002ea4:	f8cd c158 	str.w	ip, [sp, #344]	; 0x158
    fr.BarColor = blue;
 8002ea8:	9359      	str	r3, [sp, #356]	; 0x164
    fr.FrameColor = red;
 8002eaa:	9258      	str	r2, [sp, #352]	; 0x160
    fr.TextColor = green;
 8002eac:	915b      	str	r1, [sp, #364]	; 0x16c
    fr.Thickness = 1;
 8002eae:	f88d 515c 	strb.w	r5, [sp, #348]	; 0x15c
    fr.WindowColor = white;
 8002eb2:	975a      	str	r7, [sp, #360]	; 0x168

    bt.FillColor = gray2;
 8002eb4:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8002fa4 <MainFunc+0x328>
 8002eb8:	f8cd 9138 	str.w	r9, [sp, #312]	; 0x138
    bt.FrameColor = black;
 8002ebc:	944d      	str	r4, [sp, #308]	; 0x134
    bt.PressedColor = white;
 8002ebe:	974f      	str	r7, [sp, #316]	; 0x13c
    bt.TextColor = black;
 8002ec0:	9450      	str	r4, [sp, #320]	; 0x140
    bt.Thickness = 1;
 8002ec2:	f88d 5130 	strb.w	r5, [sp, #304]	; 0x130
    bt.X1 = 230;
 8002ec6:	20e6      	movs	r0, #230	; 0xe6
 8002ec8:	9048      	str	r0, [sp, #288]	; 0x120
    bt.X2 = 310;
 8002eca:	f44f 799b 	mov.w	r9, #310	; 0x136
 8002ece:	f8cd 9124 	str.w	r9, [sp, #292]	; 0x124
    bt.Y1 = 100;
 8002ed2:	2064      	movs	r0, #100	; 0x64
 8002ed4:	904a      	str	r0, [sp, #296]	; 0x128
    bt.Y2 = 120;
 8002ed6:	2078      	movs	r0, #120	; 0x78
 8002ed8:	904b      	str	r0, [sp, #300]	; 0x12c

    hfr.X1 = 2;
 8002eda:	2002      	movs	r0, #2
 8002edc:	903c      	str	r0, [sp, #240]	; 0xf0
    hfr.X2 = 479;
 8002ede:	f8cd a0f4 	str.w	sl, [sp, #244]	; 0xf4
    hfr.Y1 = 2;
 8002ee2:	903e      	str	r0, [sp, #248]	; 0xf8
    hfr.Y2 = 271;
 8002ee4:	f8cd b0fc 	str.w	fp, [sp, #252]	; 0xfc
    hfr.YBar = 25;
 8002ee8:	f8cd c100 	str.w	ip, [sp, #256]	; 0x100
    hfr.BarColorH = blue;
 8002eec:	9343      	str	r3, [sp, #268]	; 0x10c
    hfr.BarColorL = lightBlue3;
 8002eee:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8002fa8 <MainFunc+0x32c>
 8002ef2:	f8cd 9110 	str.w	r9, [sp, #272]	; 0x110
    hfr.FrameColor = red;
 8002ef6:	9242      	str	r2, [sp, #264]	; 0x108
    hfr.TextColor = green;
 8002ef8:	9146      	str	r1, [sp, #280]	; 0x118
    hfr.Thickness = 1;
 8002efa:	f88d 5104 	strb.w	r5, [sp, #260]	; 0x104
    hfr.WindowColor = white;
 8002efe:	9745      	str	r7, [sp, #276]	; 0x114

    vfr.X1 = 2;
 8002f00:	9030      	str	r0, [sp, #192]	; 0xc0
    vfr.X2 = 479;
 8002f02:	f8cd a0c4 	str.w	sl, [sp, #196]	; 0xc4
    vfr.Y1 = 2;
 8002f06:	9032      	str	r0, [sp, #200]	; 0xc8
    vfr.Y2 = 271;
 8002f08:	f8cd b0cc 	str.w	fp, [sp, #204]	; 0xcc
    vfr.YBar = 25;
 8002f0c:	f8cd c0d0 	str.w	ip, [sp, #208]	; 0xd0
    vfr.BarColorL = blue;
 8002f10:	9338      	str	r3, [sp, #224]	; 0xe0
    vfr.BarColorH = lightBlue4;
 8002f12:	f509 194c 	add.w	r9, r9, #3342336	; 0x330000
 8002f16:	f509 594c 	add.w	r9, r9, #13056	; 0x3300
 8002f1a:	f8cd 90dc 	str.w	r9, [sp, #220]	; 0xdc
    vfr.FrameColor = red;
 8002f1e:	9236      	str	r2, [sp, #216]	; 0xd8
    vfr.TextColor = green;
 8002f20:	913a      	str	r1, [sp, #232]	; 0xe8
    vfr.Thickness = 1;
 8002f22:	f88d 50d4 	strb.w	r5, [sp, #212]	; 0xd4
    vfr.WindowColor = white;
 8002f26:	9739      	str	r7, [sp, #228]	; 0xe4


	pvg.X1 = 200;
 8002f28:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
	pvg.X2 = 400;
 8002f2c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002f30:	9025      	str	r0, [sp, #148]	; 0x94
	pvg.Y1 = 70;
 8002f32:	f04f 0846 	mov.w	r8, #70	; 0x46
 8002f36:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
	pvg.Y2 = 90;
 8002f3a:	205a      	movs	r0, #90	; 0x5a
 8002f3c:	9027      	str	r0, [sp, #156]	; 0x9c
	pvg.StartValue = 0;
 8002f3e:	9428      	str	r4, [sp, #160]	; 0xa0
	pvg.StopValue = 10;
 8002f40:	9629      	str	r6, [sp, #164]	; 0xa4
	pvg.CurrentValue = 6;
 8002f42:	2006      	movs	r0, #6
 8002f44:	902a      	str	r0, [sp, #168]	; 0xa8
	pvg.Thickness = 1;
 8002f46:	f88d 50bc 	strb.w	r5, [sp, #188]	; 0xbc
	pvg.FillColor = black;
 8002f4a:	942c      	str	r4, [sp, #176]	; 0xb0
	pvg.FrameColor = green;
 8002f4c:	912b      	str	r1, [sp, #172]	; 0xac
	pvg.BarColorC = red;
 8002f4e:	922e      	str	r2, [sp, #184]	; 0xb8
	pvg.BarColorH = blue;
 8002f50:	932d      	str	r3, [sp, #180]	; 0xb4
	pvg.Orientation = Horisontal;
 8002f52:	f88d e0bd 	strb.w	lr, [sp, #189]	; 0xbd


	rb.BackColor = blue;
 8002f56:	9321      	str	r3, [sp, #132]	; 0x84
	rb.Checked = 1;
 8002f58:	f88d 508d 	strb.w	r5, [sp, #141]	; 0x8d
	rb.Radius = 5;
 8002f5c:	2005      	movs	r0, #5
 8002f5e:	901e      	str	r0, [sp, #120]	; 0x78
	rb.TextColor = white;
 8002f60:	9722      	str	r7, [sp, #136]	; 0x88
	rb.X = 25;
 8002f62:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
	rb.Y = 50;
 8002f66:	2032      	movs	r0, #50	; 0x32
 8002f68:	901d      	str	r0, [sp, #116]	; 0x74
	rb.Transp_key = 0;
 8002f6a:	f88d 408c 	strb.w	r4, [sp, #140]	; 0x8c
	rb.ExCirColor = green;
 8002f6e:	911f      	str	r1, [sp, #124]	; 0x7c
	rb.InCirColor = blue;
 8002f70:	9320      	str	r3, [sp, #128]	; 0x80
	rb.Unvisible = 1;
 8002f72:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f

	gr.FillColor = white;
 8002f76:	9711      	str	r7, [sp, #68]	; 0x44
	gr.FrameColor = green;
 8002f78:	9112      	str	r1, [sp, #72]	; 0x48
	gr.LinesColor = red;
 8002f7a:	9214      	str	r2, [sp, #80]	; 0x50
	gr.StepX = 1;
 8002f7c:	9515      	str	r5, [sp, #84]	; 0x54
	gr.StepY = 10;
 8002f7e:	9616      	str	r6, [sp, #88]	; 0x58
	gr.X1 = 1;
 8002f80:	950d      	str	r5, [sp, #52]	; 0x34
	gr.X2 = 480;
 8002f82:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002f86:	930e      	str	r3, [sp, #56]	; 0x38
	gr.XMax = 10;
 8002f88:	9617      	str	r6, [sp, #92]	; 0x5c
 8002f8a:	e00f      	b.n	8002fac <MainFunc+0x330>
 8002f8c:	20000044 	.word	0x20000044
 8002f90:	20000054 	.word	0x20000054
 8002f94:	2003fd24 	.word	0x2003fd24
 8002f98:	00ffff00 	.word	0x00ffff00
 8002f9c:	003333ff 	.word	0x003333ff
 8002fa0:	00808080 	.word	0x00808080
 8002fa4:	00c0c0c0 	.word	0x00c0c0c0
 8002fa8:	009999ff 	.word	0x009999ff
	gr.XMin = 0;
 8002fac:	9418      	str	r4, [sp, #96]	; 0x60
	gr.Y1 = 1;
 8002fae:	950f      	str	r5, [sp, #60]	; 0x3c
	gr.Y2 = 272;
 8002fb0:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002fb4:	9310      	str	r3, [sp, #64]	; 0x40
	gr.YMax = 100;
 8002fb6:	2364      	movs	r3, #100	; 0x64
 8002fb8:	9319      	str	r3, [sp, #100]	; 0x64
	gr.YMin = 0;
 8002fba:	941a      	str	r4, [sp, #104]	; 0x68
	gr.Unvisible = 0;
 8002fbc:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
	gr.Thickness = 2;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	9313      	str	r3, [sp, #76]	; 0x4c

	grL.LineColor = black;
 8002fc4:	940b      	str	r4, [sp, #44]	; 0x2c
	grL.Points_count = 10;
 8002fc6:	960a      	str	r6, [sp, #40]	; 0x28
	grL.Thickness = 2;
 8002fc8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8002fcc:	e085      	b.n	80030da <MainFunc+0x45e>
		lb.Color = black;


		for(i = 0; i < 11; i++)
		{
			p.CurrentValue = i;
 8002fce:	94bb      	str	r4, [sp, #748]	; 0x2ec
			pa.CurrentValue = i;
 8002fd0:	94b0      	str	r4, [sp, #704]	; 0x2c0
			tr.CurrentValue = i;
 8002fd2:	9493      	str	r4, [sp, #588]	; 0x24c
			tra.CurrentValue = i;
 8002fd4:	9486      	str	r4, [sp, #536]	; 0x218
			pvg.CurrentValue = i;
 8002fd6:	942a      	str	r4, [sp, #168]	; 0xa8

			lb.Y += 2;
 8002fd8:	9b5e      	ldr	r3, [sp, #376]	; 0x178
 8002fda:	3302      	adds	r3, #2
 8002fdc:	935e      	str	r3, [sp, #376]	; 0x178

			Fill_Display(darkBlue3);
 8002fde:	2066      	movs	r0, #102	; 0x66
 8002fe0:	f7fd ff6c 	bl	8000ebc <Fill_Display>
			LCD_Form(&fr, "Form1");
 8002fe4:	4966      	ldr	r1, [pc, #408]	; (8003180 <MainFunc+0x504>)
 8002fe6:	a852      	add	r0, sp, #328	; 0x148
 8002fe8:	f7ff fd27 	bl	8002a3a <LCD_Form>
			LCD_HGradientForm(&hfr, "HForm1");
 8002fec:	4965      	ldr	r1, [pc, #404]	; (8003184 <MainFunc+0x508>)
 8002fee:	a83c      	add	r0, sp, #240	; 0xf0
 8002ff0:	f7ff fd54 	bl	8002a9c <LCD_HGradientForm>
			LCD_VGradientForm(&vfr, "VForm1");
 8002ff4:	4964      	ldr	r1, [pc, #400]	; (8003188 <MainFunc+0x50c>)
 8002ff6:	a830      	add	r0, sp, #192	; 0xc0
 8002ff8:	f7ff fd6d 	bl	8002ad6 <LCD_VGradientForm>
		    LCD_ProgressBar(&p);
 8002ffc:	a8b5      	add	r0, sp, #724	; 0x2d4
 8002ffe:	f7ff fc72 	bl	80028e6 <LCD_ProgressBar>
		    LCD_ProgressBar(&pa);
 8003002:	a8aa      	add	r0, sp, #680	; 0x2a8
 8003004:	f7ff fc6f 	bl	80028e6 <LCD_ProgressBar>
		    LCD_ProgressBarVGradient(&pvg);
 8003008:	a824      	add	r0, sp, #144	; 0x90
 800300a:	f7ff fd81 	bl	8002b10 <LCD_ProgressBarVGradient>
		    LCD_TrackBar(&tr);
 800300e:	a88d      	add	r0, sp, #564	; 0x234
 8003010:	f7ff fc8f 	bl	8002932 <LCD_TrackBar>
		    LCD_TrackBar(&tra);
 8003014:	a880      	add	r0, sp, #512	; 0x200
 8003016:	f7ff fc8c 	bl	8002932 <LCD_TrackBar>
		    LCD_VGradient(&vgr);
 800301a:	a879      	add	r0, sp, #484	; 0x1e4
 800301c:	f7ff fcb3 	bl	8002986 <LCD_VGradient>
		    LCD_HGradient(&hgr);
 8003020:	a872      	add	r0, sp, #456	; 0x1c8
 8003022:	f7ff fcc3 	bl	80029ac <LCD_HGradient>
		    LCD_DualHGradient(&dhgr);
 8003026:	a86a      	add	r0, sp, #424	; 0x1a8
 8003028:	f7ff fce9 	bl	80029fe <LCD_DualHGradient>
		    LCD_DualVGradient(&dvgr);
 800302c:	a862      	add	r0, sp, #392	; 0x188
 800302e:	f7ff fcd0 	bl	80029d2 <LCD_DualVGradient>
		    LCD_Label(&lb, "Hello!");
 8003032:	4956      	ldr	r1, [pc, #344]	; (800318c <MainFunc+0x510>)
 8003034:	a85d      	add	r0, sp, #372	; 0x174
 8003036:	f7ff fcf8 	bl	8002a2a <LCD_Label>
		    LCD_Button(&bt, "Butt1");
 800303a:	4955      	ldr	r1, [pc, #340]	; (8003190 <MainFunc+0x514>)
 800303c:	a848      	add	r0, sp, #288	; 0x120
 800303e:	f7ff fd17 	bl	8002a70 <LCD_Button>
		    HAL_Delay(800);
 8003042:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003046:	f000 ffa9 	bl	8003f9c <HAL_Delay>
		for(i = 0; i < 11; i++)
 800304a:	3401      	adds	r4, #1
 800304c:	b2a4      	uxth	r4, r4
 800304e:	2c0a      	cmp	r4, #10
 8003050:	d9bd      	bls.n	8002fce <MainFunc+0x352>




		}
		HAL_Delay(300);
 8003052:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003056:	f000 ffa1 	bl	8003f9c <HAL_Delay>

		Fill_Display(black);
 800305a:	2000      	movs	r0, #0
 800305c:	f7fd ff2e 	bl	8000ebc <Fill_Display>
		LCD_RadioButton(&rb, "Radiobutton1");
 8003060:	494c      	ldr	r1, [pc, #304]	; (8003194 <MainFunc+0x518>)
 8003062:	a81c      	add	r0, sp, #112	; 0x70
 8003064:	f7ff fd98 	bl	8002b98 <LCD_RadioButton>
		LCD_CheckBox(&check, "CheckButton 1");
 8003068:	494b      	ldr	r1, [pc, #300]	; (8003198 <MainFunc+0x51c>)
 800306a:	a89a      	add	r0, sp, #616	; 0x268
 800306c:	f7ff fd78 	bl	8002b60 <LCD_CheckBox>
		HAL_Delay(3000);
 8003070:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003074:	f000 ff92 	bl	8003f9c <HAL_Delay>


		vgr.X1 = 2;
 8003078:	2302      	movs	r3, #2
 800307a:	9379      	str	r3, [sp, #484]	; 0x1e4
		vgr.X2 = 479;
 800307c:	f240 11df 	movw	r1, #479	; 0x1df
 8003080:	917a      	str	r1, [sp, #488]	; 0x1e8
		vgr.Y1 = 2;
 8003082:	937b      	str	r3, [sp, #492]	; 0x1ec
		vgr.Y2 = 271;
 8003084:	f240 120f 	movw	r2, #271	; 0x10f
 8003088:	927c      	str	r2, [sp, #496]	; 0x1f0

		hgr.X1 = 2;
 800308a:	9372      	str	r3, [sp, #456]	; 0x1c8
		hgr.X2 = 479;
 800308c:	9173      	str	r1, [sp, #460]	; 0x1cc
		hgr.Y1 = 2;
 800308e:	9374      	str	r3, [sp, #464]	; 0x1d0
		hgr.Y2 = 271;
 8003090:	9275      	str	r2, [sp, #468]	; 0x1d4

		Fill_Display(green);
 8003092:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8003096:	f7fd ff11 	bl	8000ebc <Fill_Display>
		LCD_VGradient(&vgr);
 800309a:	a879      	add	r0, sp, #484	; 0x1e4
 800309c:	f7ff fc73 	bl	8002986 <LCD_VGradient>
		HAL_Delay(1000);
 80030a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030a4:	f000 ff7a 	bl	8003f9c <HAL_Delay>

		Fill_Display(green);
 80030a8:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 80030ac:	f7fd ff06 	bl	8000ebc <Fill_Display>
		LCD_Form(&fr, "Form1");
 80030b0:	4933      	ldr	r1, [pc, #204]	; (8003180 <MainFunc+0x504>)
 80030b2:	a852      	add	r0, sp, #328	; 0x148
 80030b4:	f7ff fcc1 	bl	8002a3a <LCD_Form>
		LCD_HGradient(&hgr);
 80030b8:	a872      	add	r0, sp, #456	; 0x1c8
 80030ba:	f7ff fc77 	bl	80029ac <LCD_HGradient>
		HAL_Delay(5000);
 80030be:	f241 3088 	movw	r0, #5000	; 0x1388
 80030c2:	f000 ff6b 	bl	8003f9c <HAL_Delay>

		Fill_Display(black);
 80030c6:	2000      	movs	r0, #0
 80030c8:	f7fd fef8 	bl	8000ebc <Fill_Display>
		LCD_Circle(&round);
 80030cc:	a8a4      	add	r0, sp, #656	; 0x290
 80030ce:	f7ff fbf2 	bl	80028b6 <LCD_Circle>
		HAL_Delay(3000);
 80030d2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80030d6:	f000 ff61 	bl	8003f9c <HAL_Delay>
		LCD_Graph(&gr);
 80030da:	a80d      	add	r0, sp, #52	; 0x34
 80030dc:	f7ff fd7f 	bl	8002bde <LCD_Graph>
		int data[] = {90, 80, 70, 60, 50, 40, 30, 20, 10, 0};
 80030e0:	466c      	mov	r4, sp
 80030e2:	4d2e      	ldr	r5, [pc, #184]	; (800319c <MainFunc+0x520>)
 80030e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80030f0:	e884 0003 	stmia.w	r4, {r0, r1}
		LCD_GraphLine(&gr, &grL, data);
 80030f4:	466a      	mov	r2, sp
 80030f6:	a90a      	add	r1, sp, #40	; 0x28
 80030f8:	a80d      	add	r0, sp, #52	; 0x34
 80030fa:	f7ff fd96 	bl	8002c2a <LCD_GraphLine>
		HAL_Delay(3000);
 80030fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003102:	f000 ff4b 	bl	8003f9c <HAL_Delay>
		Fill_Display(black);
 8003106:	2000      	movs	r0, #0
 8003108:	f7fd fed8 	bl	8000ebc <Fill_Display>
		LCD_Fill_Rectangle(&kv);
 800310c:	a8d1      	add	r0, sp, #836	; 0x344
 800310e:	f7ff fba1 	bl	8002854 <LCD_Fill_Rectangle>
		HAL_Delay(3000);
 8003112:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003116:	f000 ff41 	bl	8003f9c <HAL_Delay>
		LCD_FramePanel(&pan);
 800311a:	a8ca      	add	r0, sp, #808	; 0x328
 800311c:	f7ff fbb6 	bl	800288c <LCD_FramePanel>
		HAL_Delay(3000);
 8003120:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003124:	f000 ff3a 	bl	8003f9c <HAL_Delay>
		Fill_Display(black);
 8003128:	2000      	movs	r0, #0
 800312a:	f7fd fec7 	bl	8000ebc <Fill_Display>
		LCD_HLine(&line);
 800312e:	a8c5      	add	r0, sp, #788	; 0x314
 8003130:	f7ff fb9d 	bl	800286e <LCD_HLine>
		HAL_Delay(3000);
 8003134:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003138:	f000 ff30 	bl	8003f9c <HAL_Delay>
		Fill_Display(black);
 800313c:	2000      	movs	r0, #0
 800313e:	f7fd febd 	bl	8000ebc <Fill_Display>
		LCD_FillCircle(&ball);
 8003142:	a8c0      	add	r0, sp, #768	; 0x300
 8003144:	f7ff fbc7 	bl	80028d6 <LCD_FillCircle>
		HAL_Delay(3000);
 8003148:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800314c:	f000 ff26 	bl	8003f9c <HAL_Delay>
		vgr.X1 = 240;
 8003150:	23f0      	movs	r3, #240	; 0xf0
 8003152:	9379      	str	r3, [sp, #484]	; 0x1e4
		vgr.X2 = 340;
 8003154:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8003158:	937a      	str	r3, [sp, #488]	; 0x1e8
		vgr.Y1 = 190;
 800315a:	22be      	movs	r2, #190	; 0xbe
 800315c:	927b      	str	r2, [sp, #492]	; 0x1ec
		vgr.Y2 = 262;
 800315e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8003162:	937c      	str	r3, [sp, #496]	; 0x1f0
		hgr.X1 = 135;
 8003164:	2187      	movs	r1, #135	; 0x87
 8003166:	9172      	str	r1, [sp, #456]	; 0x1c8
		hgr.X2 = 235;
 8003168:	21eb      	movs	r1, #235	; 0xeb
 800316a:	9173      	str	r1, [sp, #460]	; 0x1cc
		hgr.Y1 = 190;
 800316c:	9274      	str	r2, [sp, #464]	; 0x1d0
		hgr.Y2 = 262;
 800316e:	9375      	str	r3, [sp, #468]	; 0x1d4
		lb.X = 100;
 8003170:	2364      	movs	r3, #100	; 0x64
 8003172:	935d      	str	r3, [sp, #372]	; 0x174
		lb.Y = 60;
 8003174:	233c      	movs	r3, #60	; 0x3c
 8003176:	935e      	str	r3, [sp, #376]	; 0x178
		lb.Color = black;
 8003178:	2400      	movs	r4, #0
 800317a:	945f      	str	r4, [sp, #380]	; 0x17c
		for(i = 0; i < 11; i++)
 800317c:	e767      	b.n	800304e <MainFunc+0x3d2>
 800317e:	bf00      	nop
 8003180:	08007eb0 	.word	0x08007eb0
 8003184:	08007eb8 	.word	0x08007eb8
 8003188:	08007ec0 	.word	0x08007ec0
 800318c:	08007ec8 	.word	0x08007ec8
 8003190:	08007ed0 	.word	0x08007ed0
 8003194:	08007ed8 	.word	0x08007ed8
 8003198:	08007ee8 	.word	0x08007ee8
 800319c:	080061e0 	.word	0x080061e0

080031a0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80031a0:	b510      	push	{r4, lr}
 80031a2:	b084      	sub	sp, #16
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80031a4:	2400      	movs	r4, #0
 80031a6:	9400      	str	r4, [sp, #0]
 80031a8:	9401      	str	r4, [sp, #4]
 80031aa:	9402      	str	r4, [sp, #8]
 80031ac:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80031ae:	f000 ff5b 	bl	8004068 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80031b2:	2301      	movs	r3, #1
 80031b4:	f88d 3000 	strb.w	r3, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80031b8:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x20000004;
 80031bc:	4a0d      	ldr	r2, [pc, #52]	; (80031f4 <MPU_Config+0x54>)
 80031be:	9201      	str	r2, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80031c0:	2211      	movs	r2, #17
 80031c2:	f88d 2008 	strb.w	r2, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80031c6:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80031ca:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80031ce:	2203      	movs	r2, #3
 80031d0:	f88d 200b 	strb.w	r2, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80031d4:	f88d 400c 	strb.w	r4, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80031d8:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80031dc:	f88d 300e 	strb.w	r3, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80031e0:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80031e4:	4668      	mov	r0, sp
 80031e6:	f000 ff61 	bl	80040ac <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80031ea:	2004      	movs	r0, #4
 80031ec:	f000 ff4c 	bl	8004088 <HAL_MPU_Enable>

}
 80031f0:	b004      	add	sp, #16
 80031f2:	bd10      	pop	{r4, pc}
 80031f4:	20000004 	.word	0x20000004

080031f8 <MX_GPIO_Init>:
{
 80031f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031fc:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fe:	2400      	movs	r4, #0
 8003200:	940b      	str	r4, [sp, #44]	; 0x2c
 8003202:	940c      	str	r4, [sp, #48]	; 0x30
 8003204:	940d      	str	r4, [sp, #52]	; 0x34
 8003206:	940e      	str	r4, [sp, #56]	; 0x38
 8003208:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800320a:	4ba9      	ldr	r3, [pc, #676]	; (80034b0 <MX_GPIO_Init+0x2b8>)
 800320c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800320e:	f042 0210 	orr.w	r2, r2, #16
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
 8003214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003216:	f002 0210 	and.w	r2, r2, #16
 800321a:	9200      	str	r2, [sp, #0]
 800321c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800321e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003224:	631a      	str	r2, [r3, #48]	; 0x30
 8003226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003228:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800322c:	9201      	str	r2, [sp, #4]
 800322e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003232:	f042 0202 	orr.w	r2, r2, #2
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
 8003238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800323a:	f002 0202 	and.w	r2, r2, #2
 800323e:	9202      	str	r2, [sp, #8]
 8003240:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003244:	f042 0208 	orr.w	r2, r2, #8
 8003248:	631a      	str	r2, [r3, #48]	; 0x30
 800324a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800324c:	f002 0208 	and.w	r2, r2, #8
 8003250:	9203      	str	r2, [sp, #12]
 8003252:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003256:	f042 0204 	orr.w	r2, r2, #4
 800325a:	631a      	str	r2, [r3, #48]	; 0x30
 800325c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800325e:	f002 0204 	and.w	r2, r2, #4
 8003262:	9204      	str	r2, [sp, #16]
 8003264:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003268:	f042 0201 	orr.w	r2, r2, #1
 800326c:	631a      	str	r2, [r3, #48]	; 0x30
 800326e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003270:	f002 0201 	and.w	r2, r2, #1
 8003274:	9205      	str	r2, [sp, #20]
 8003276:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800327a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
 8003280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003282:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003286:	9206      	str	r2, [sp, #24]
 8003288:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800328a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003290:	631a      	str	r2, [r3, #48]	; 0x30
 8003292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003294:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003298:	9207      	str	r2, [sp, #28]
 800329a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800329c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800329e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
 80032a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032a6:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80032aa:	9208      	str	r2, [sp, #32]
 80032ac:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80032ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032b0:	f042 0220 	orr.w	r2, r2, #32
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30
 80032b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032b8:	f002 0220 	and.w	r2, r2, #32
 80032bc:	9209      	str	r2, [sp, #36]	; 0x24
 80032be:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ce:	930a      	str	r3, [sp, #40]	; 0x28
 80032d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80032d2:	2201      	movs	r2, #1
 80032d4:	2120      	movs	r1, #32
 80032d6:	4877      	ldr	r0, [pc, #476]	; (80034b4 <MX_GPIO_Init+0x2bc>)
 80032d8:	f001 f930 	bl	800453c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80032dc:	4622      	mov	r2, r4
 80032de:	210c      	movs	r1, #12
 80032e0:	4875      	ldr	r0, [pc, #468]	; (80034b8 <MX_GPIO_Init+0x2c0>)
 80032e2:	f001 f92b 	bl	800453c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80032e6:	2201      	movs	r2, #1
 80032e8:	2108      	movs	r1, #8
 80032ea:	4874      	ldr	r0, [pc, #464]	; (80034bc <MX_GPIO_Init+0x2c4>)
 80032ec:	f001 f926 	bl	800453c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80032f0:	2201      	movs	r2, #1
 80032f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032f6:	4870      	ldr	r0, [pc, #448]	; (80034b8 <MX_GPIO_Init+0x2c0>)
 80032f8:	f001 f920 	bl	800453c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80032fc:	4622      	mov	r2, r4
 80032fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003302:	486f      	ldr	r0, [pc, #444]	; (80034c0 <MX_GPIO_Init+0x2c8>)
 8003304:	f001 f91a 	bl	800453c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8003308:	4622      	mov	r2, r4
 800330a:	21c8      	movs	r1, #200	; 0xc8
 800330c:	486d      	ldr	r0, [pc, #436]	; (80034c4 <MX_GPIO_Init+0x2cc>)
 800330e:	f001 f915 	bl	800453c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8003312:	f04f 0b08 	mov.w	fp, #8
 8003316:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800331a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800331e:	a90b      	add	r1, sp, #44	; 0x2c
 8003320:	4869      	ldr	r0, [pc, #420]	; (80034c8 <MX_GPIO_Init+0x2d0>)
 8003322:	f001 f81d 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003326:	2304      	movs	r3, #4
 8003328:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332a:	2502      	movs	r5, #2
 800332c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003330:	2603      	movs	r6, #3
 8003332:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003334:	2309      	movs	r3, #9
 8003336:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003338:	a90b      	add	r1, sp, #44	; 0x2c
 800333a:	4863      	ldr	r0, [pc, #396]	; (80034c8 <MX_GPIO_Init+0x2d0>)
 800333c:	f001 f810 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8003340:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8003344:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003346:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334a:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800334c:	230b      	movs	r3, #11
 800334e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003350:	a90b      	add	r1, sp, #44	; 0x2c
 8003352:	485c      	ldr	r0, [pc, #368]	; (80034c4 <MX_GPIO_Init+0x2cc>)
 8003354:	f001 f804 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003358:	f44f 7340 	mov.w	r3, #768	; 0x300
 800335c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800335e:	2312      	movs	r3, #18
 8003360:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003362:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003364:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003366:	2304      	movs	r3, #4
 8003368:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800336a:	a90b      	add	r1, sp, #44	; 0x2c
 800336c:	4857      	ldr	r0, [pc, #348]	; (80034cc <MX_GPIO_Init+0x2d4>)
 800336e:	f000 fff7 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8003372:	f643 4323 	movw	r3, #15395	; 0x3c23
 8003376:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003378:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800337c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800337e:	f04f 080a 	mov.w	r8, #10
 8003382:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003386:	a90b      	add	r1, sp, #44	; 0x2c
 8003388:	4850      	ldr	r0, [pc, #320]	; (80034cc <MX_GPIO_Init+0x2d4>)
 800338a:	f000 ffe9 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800338e:	2310      	movs	r3, #16
 8003390:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003392:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003394:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003396:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003398:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800339a:	a90b      	add	r1, sp, #44	; 0x2c
 800339c:	484b      	ldr	r0, [pc, #300]	; (80034cc <MX_GPIO_Init+0x2d4>)
 800339e:	f000 ffdf 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80033a2:	f04f 0a80 	mov.w	sl, #128	; 0x80
 80033a6:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033aa:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ac:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ae:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80033b0:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80033b4:	a90b      	add	r1, sp, #44	; 0x2c
 80033b6:	483f      	ldr	r0, [pc, #252]	; (80034b4 <MX_GPIO_Init+0x2bc>)
 80033b8:	f000 ffd2 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80033bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033c0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c6:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033c8:	2701      	movs	r7, #1
 80033ca:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80033cc:	a90b      	add	r1, sp, #44	; 0x2c
 80033ce:	4840      	ldr	r0, [pc, #256]	; (80034d0 <MX_GPIO_Init+0x2d8>)
 80033d0:	f000 ffc6 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80033d4:	2360      	movs	r3, #96	; 0x60
 80033d6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033da:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033dc:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80033de:	f04f 090d 	mov.w	r9, #13
 80033e2:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033e6:	a90b      	add	r1, sp, #44	; 0x2c
 80033e8:	4837      	ldr	r0, [pc, #220]	; (80034c8 <MX_GPIO_Init+0x2d0>)
 80033ea:	f000 ffb9 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80033ee:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f6:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033f8:	2307      	movs	r3, #7
 80033fa:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80033fc:	a90b      	add	r1, sp, #44	; 0x2c
 80033fe:	4833      	ldr	r0, [pc, #204]	; (80034cc <MX_GPIO_Init+0x2d4>)
 8003400:	f000 ffae 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003404:	2340      	movs	r3, #64	; 0x40
 8003406:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003408:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800340c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800340e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003412:	a90b      	add	r1, sp, #44	; 0x2c
 8003414:	482d      	ldr	r0, [pc, #180]	; (80034cc <MX_GPIO_Init+0x2d4>)
 8003416:	f000 ffa3 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800341a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800341e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003420:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003422:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003424:	a90b      	add	r1, sp, #44	; 0x2c
 8003426:	482b      	ldr	r0, [pc, #172]	; (80034d4 <MX_GPIO_Init+0x2dc>)
 8003428:	f000 ff9a 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800342c:	2340      	movs	r3, #64	; 0x40
 800342e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003430:	4b29      	ldr	r3, [pc, #164]	; (80034d8 <MX_GPIO_Init+0x2e0>)
 8003432:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003434:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8003436:	a90b      	add	r1, sp, #44	; 0x2c
 8003438:	481e      	ldr	r0, [pc, #120]	; (80034b4 <MX_GPIO_Init+0x2bc>)
 800343a:	f000 ff91 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800343e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003442:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003444:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003448:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800344a:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344e:	a90b      	add	r1, sp, #44	; 0x2c
 8003450:	481f      	ldr	r0, [pc, #124]	; (80034d0 <MX_GPIO_Init+0x2d8>)
 8003452:	f000 ff85 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003456:	23f0      	movs	r3, #240	; 0xf0
 8003458:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003460:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003464:	a90b      	add	r1, sp, #44	; 0x2c
 8003466:	4814      	ldr	r0, [pc, #80]	; (80034b8 <MX_GPIO_Init+0x2c0>)
 8003468:	f000 ff7a 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800346c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003470:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003472:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003474:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003476:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003478:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800347c:	a90b      	add	r1, sp, #44	; 0x2c
 800347e:	4811      	ldr	r0, [pc, #68]	; (80034c4 <MX_GPIO_Init+0x2cc>)
 8003480:	f000 ff6e 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003484:	2320      	movs	r3, #32
 8003486:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003488:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348c:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800348e:	a90b      	add	r1, sp, #44	; 0x2c
 8003490:	4808      	ldr	r0, [pc, #32]	; (80034b4 <MX_GPIO_Init+0x2bc>)
 8003492:	f000 ff65 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8003496:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80034a0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80034a4:	a90b      	add	r1, sp, #44	; 0x2c
 80034a6:	4803      	ldr	r0, [pc, #12]	; (80034b4 <MX_GPIO_Init+0x2bc>)
 80034a8:	f000 ff5a 	bl	8004360 <HAL_GPIO_Init>
 80034ac:	e016      	b.n	80034dc <MX_GPIO_Init+0x2e4>
 80034ae:	bf00      	nop
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40020c00 	.word	0x40020c00
 80034b8:	40022000 	.word	0x40022000
 80034bc:	40022800 	.word	0x40022800
 80034c0:	40021c00 	.word	0x40021c00
 80034c4:	40021800 	.word	0x40021800
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40020400 	.word	0x40020400
 80034d0:	40020000 	.word	0x40020000
 80034d4:	40022400 	.word	0x40022400
 80034d8:	10120000 	.word	0x10120000
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80034dc:	f241 030c 	movw	r3, #4108	; 0x100c
 80034e0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034e2:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e6:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80034e8:	a90b      	add	r1, sp, #44	; 0x2c
 80034ea:	488d      	ldr	r0, [pc, #564]	; (8003720 <MX_GPIO_Init+0x528>)
 80034ec:	f000 ff38 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80034f0:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
 80034f4:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034f8:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fa:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80034fc:	a90b      	add	r1, sp, #44	; 0x2c
 80034fe:	4889      	ldr	r0, [pc, #548]	; (8003724 <MX_GPIO_Init+0x52c>)
 8003500:	f000 ff2e 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8003504:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003508:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350c:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800350e:	a90b      	add	r1, sp, #44	; 0x2c
 8003510:	4885      	ldr	r0, [pc, #532]	; (8003728 <MX_GPIO_Init+0x530>)
 8003512:	f000 ff25 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8003516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800351a:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003520:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003522:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8003526:	a90b      	add	r1, sp, #44	; 0x2c
 8003528:	4880      	ldr	r0, [pc, #512]	; (800372c <MX_GPIO_Init+0x534>)
 800352a:	f000 ff19 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800352e:	2210      	movs	r2, #16
 8003530:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003532:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003536:	a90b      	add	r1, sp, #44	; 0x2c
 8003538:	487d      	ldr	r0, [pc, #500]	; (8003730 <MX_GPIO_Init+0x538>)
 800353a:	f000 ff11 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800353e:	f248 0304 	movw	r3, #32772	; 0x8004
 8003542:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003544:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003546:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003548:	a90b      	add	r1, sp, #44	; 0x2c
 800354a:	487a      	ldr	r0, [pc, #488]	; (8003734 <MX_GPIO_Init+0x53c>)
 800354c:	f000 ff08 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8003550:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003552:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003554:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003556:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003558:	2205      	movs	r2, #5
 800355a:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800355c:	a90b      	add	r1, sp, #44	; 0x2c
 800355e:	4870      	ldr	r0, [pc, #448]	; (8003720 <MX_GPIO_Init+0x528>)
 8003560:	f000 fefe 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8003564:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003568:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356c:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800356e:	a90b      	add	r1, sp, #44	; 0x2c
 8003570:	4870      	ldr	r0, [pc, #448]	; (8003734 <MX_GPIO_Init+0x53c>)
 8003572:	f000 fef5 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8003576:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800357a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003580:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003582:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003586:	a90b      	add	r1, sp, #44	; 0x2c
 8003588:	486a      	ldr	r0, [pc, #424]	; (8003734 <MX_GPIO_Init+0x53c>)
 800358a:	f000 fee9 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800358e:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003590:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003592:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003594:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003596:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003598:	a90b      	add	r1, sp, #44	; 0x2c
 800359a:	4861      	ldr	r0, [pc, #388]	; (8003720 <MX_GPIO_Init+0x528>)
 800359c:	f000 fee0 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 80035a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035a4:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035aa:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035ac:	2207      	movs	r2, #7
 80035ae:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80035b0:	a90b      	add	r1, sp, #44	; 0x2c
 80035b2:	4861      	ldr	r0, [pc, #388]	; (8003738 <MX_GPIO_Init+0x540>)
 80035b4:	f000 fed4 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80035b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035bc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035be:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80035c4:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80035c6:	a90b      	add	r1, sp, #44	; 0x2c
 80035c8:	485b      	ldr	r0, [pc, #364]	; (8003738 <MX_GPIO_Init+0x540>)
 80035ca:	f000 fec9 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80035ce:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80035d2:	4b5a      	ldr	r3, [pc, #360]	; (800373c <MX_GPIO_Init+0x544>)
 80035d4:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d6:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80035d8:	a90b      	add	r1, sp, #44	; 0x2c
 80035da:	4851      	ldr	r0, [pc, #324]	; (8003720 <MX_GPIO_Init+0x528>)
 80035dc:	f000 fec0 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80035e0:	23c0      	movs	r3, #192	; 0xc0
 80035e2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e8:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80035ea:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ee:	a90b      	add	r1, sp, #44	; 0x2c
 80035f0:	484c      	ldr	r0, [pc, #304]	; (8003724 <MX_GPIO_Init+0x52c>)
 80035f2:	f000 feb5 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80035f6:	2310      	movs	r3, #16
 80035f8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fa:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035fe:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003600:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8003604:	a90b      	add	r1, sp, #44	; 0x2c
 8003606:	484b      	ldr	r0, [pc, #300]	; (8003734 <MX_GPIO_Init+0x53c>)
 8003608:	f000 feaa 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800360c:	23c8      	movs	r3, #200	; 0xc8
 800360e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003610:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003614:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003616:	a90b      	add	r1, sp, #44	; 0x2c
 8003618:	4844      	ldr	r0, [pc, #272]	; (800372c <MX_GPIO_Init+0x534>)
 800361a:	f000 fea1 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800361e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8003622:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003624:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003626:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003628:	a90b      	add	r1, sp, #44	; 0x2c
 800362a:	4845      	ldr	r0, [pc, #276]	; (8003740 <MX_GPIO_Init+0x548>)
 800362c:	f000 fe98 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8003630:	2305      	movs	r3, #5
 8003632:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003634:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003636:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003638:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800363a:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800363e:	a90b      	add	r1, sp, #44	; 0x2c
 8003640:	4838      	ldr	r0, [pc, #224]	; (8003724 <MX_GPIO_Init+0x52c>)
 8003642:	f000 fe8d 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003646:	2332      	movs	r3, #50	; 0x32
 8003648:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800364e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003650:	230b      	movs	r3, #11
 8003652:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003654:	a90b      	add	r1, sp, #44	; 0x2c
 8003656:	4833      	ldr	r0, [pc, #204]	; (8003724 <MX_GPIO_Init+0x52c>)
 8003658:	f000 fe82 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800365c:	2304      	movs	r3, #4
 800365e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003660:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003662:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003664:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003666:	2309      	movs	r3, #9
 8003668:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800366a:	a90b      	add	r1, sp, #44	; 0x2c
 800366c:	4835      	ldr	r0, [pc, #212]	; (8003744 <MX_GPIO_Init+0x54c>)
 800366e:	f000 fe77 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003672:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003676:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003678:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800367c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800367e:	2309      	movs	r3, #9
 8003680:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003682:	a90b      	add	r1, sp, #44	; 0x2c
 8003684:	482a      	ldr	r0, [pc, #168]	; (8003730 <MX_GPIO_Init+0x538>)
 8003686:	f000 fe6b 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800368a:	2304      	movs	r3, #4
 800368c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800368e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8003692:	a90b      	add	r1, sp, #44	; 0x2c
 8003694:	4825      	ldr	r0, [pc, #148]	; (800372c <MX_GPIO_Init+0x534>)
 8003696:	f000 fe63 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800369a:	2386      	movs	r3, #134	; 0x86
 800369c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a2:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80036a4:	230b      	movs	r3, #11
 80036a6:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a8:	a90b      	add	r1, sp, #44	; 0x2c
 80036aa:	4823      	ldr	r0, [pc, #140]	; (8003738 <MX_GPIO_Init+0x540>)
 80036ac:	f000 fe58 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80036b0:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036b2:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b4:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80036b6:	a90b      	add	r1, sp, #44	; 0x2c
 80036b8:	481f      	ldr	r0, [pc, #124]	; (8003738 <MX_GPIO_Init+0x540>)
 80036ba:	f000 fe51 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80036be:	2350      	movs	r3, #80	; 0x50
 80036c0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c6:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80036c8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036cc:	a90b      	add	r1, sp, #44	; 0x2c
 80036ce:	481a      	ldr	r0, [pc, #104]	; (8003738 <MX_GPIO_Init+0x540>)
 80036d0:	f000 fe46 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80036d4:	2328      	movs	r3, #40	; 0x28
 80036d6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036da:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036dc:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80036de:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e2:	a90b      	add	r1, sp, #44	; 0x2c
 80036e4:	4814      	ldr	r0, [pc, #80]	; (8003738 <MX_GPIO_Init+0x540>)
 80036e6:	f000 fe3b 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80036ea:	2340      	movs	r3, #64	; 0x40
 80036ec:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ee:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80036f4:	2309      	movs	r3, #9
 80036f6:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80036f8:	a90b      	add	r1, sp, #44	; 0x2c
 80036fa:	480e      	ldr	r0, [pc, #56]	; (8003734 <MX_GPIO_Init+0x53c>)
 80036fc:	f000 fe30 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003700:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003704:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003706:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003708:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800370a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800370c:	2305      	movs	r3, #5
 800370e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003710:	a90b      	add	r1, sp, #44	; 0x2c
 8003712:	480c      	ldr	r0, [pc, #48]	; (8003744 <MX_GPIO_Init+0x54c>)
 8003714:	f000 fe24 	bl	8004360 <HAL_GPIO_Init>
}
 8003718:	b011      	add	sp, #68	; 0x44
 800371a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800371e:	bf00      	nop
 8003720:	40022000 	.word	0x40022000
 8003724:	40020800 	.word	0x40020800
 8003728:	40022800 	.word	0x40022800
 800372c:	40021800 	.word	0x40021800
 8003730:	40020c00 	.word	0x40020c00
 8003734:	40021c00 	.word	0x40021c00
 8003738:	40020000 	.word	0x40020000
 800373c:	10120000 	.word	0x10120000
 8003740:	40021400 	.word	0x40021400
 8003744:	40020400 	.word	0x40020400

08003748 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003748:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800374a:	6802      	ldr	r2, [r0, #0]
 800374c:	4b03      	ldr	r3, [pc, #12]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x14>)
 800374e:	429a      	cmp	r2, r3
 8003750:	d000      	beq.n	8003754 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003752:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8003754:	f000 fc10 	bl	8003f78 <HAL_IncTick>
}
 8003758:	e7fb      	b.n	8003752 <HAL_TIM_PeriodElapsedCallback+0xa>
 800375a:	bf00      	nop
 800375c:	40001000 	.word	0x40001000

08003760 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003760:	b672      	cpsid	i
 8003762:	e7fe      	b.n	8003762 <Error_Handler+0x2>

08003764 <MX_DMA2D_Init>:
{
 8003764:	b508      	push	{r3, lr}
  hdma2d.Instance = DMA2D;
 8003766:	480c      	ldr	r0, [pc, #48]	; (8003798 <MX_DMA2D_Init+0x34>)
 8003768:	4b0c      	ldr	r3, [pc, #48]	; (800379c <MX_DMA2D_Init+0x38>)
 800376a:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800376c:	2300      	movs	r3, #0
 800376e:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8003770:	2202      	movs	r2, #2
 8003772:	6082      	str	r2, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8003774:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8003776:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8003778:	62c2      	str	r2, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800377a:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800377c:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800377e:	f000 fcbf 	bl	8004100 <HAL_DMA2D_Init>
 8003782:	b928      	cbnz	r0, 8003790 <MX_DMA2D_Init+0x2c>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003784:	2101      	movs	r1, #1
 8003786:	4804      	ldr	r0, [pc, #16]	; (8003798 <MX_DMA2D_Init+0x34>)
 8003788:	f000 fd88 	bl	800429c <HAL_DMA2D_ConfigLayer>
 800378c:	b910      	cbnz	r0, 8003794 <MX_DMA2D_Init+0x30>
}
 800378e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003790:	f7ff ffe6 	bl	8003760 <Error_Handler>
    Error_Handler();
 8003794:	f7ff ffe4 	bl	8003760 <Error_Handler>
 8003798:	2003fdec 	.word	0x2003fdec
 800379c:	4002b000 	.word	0x4002b000

080037a0 <MX_FMC_Init>:
{
 80037a0:	b500      	push	{lr}
 80037a2:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80037a4:	4814      	ldr	r0, [pc, #80]	; (80037f8 <MX_FMC_Init+0x58>)
 80037a6:	4b15      	ldr	r3, [pc, #84]	; (80037fc <MX_FMC_Init+0x5c>)
 80037a8:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80037aa:	2300      	movs	r3, #0
 80037ac:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80037ae:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80037b0:	2104      	movs	r1, #4
 80037b2:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80037b4:	2210      	movs	r2, #16
 80037b6:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80037b8:	2240      	movs	r2, #64	; 0x40
 80037ba:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80037bc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80037c0:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80037c2:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80037c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037c8:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80037ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037ce:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80037d0:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 80037d2:	2302      	movs	r3, #2
 80037d4:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80037d6:	2206      	movs	r2, #6
 80037d8:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 80037da:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
 80037dc:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80037de:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 2;
 80037e0:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 80037e2:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80037e4:	4469      	add	r1, sp
 80037e6:	f002 fa4b 	bl	8005c80 <HAL_SDRAM_Init>
 80037ea:	b910      	cbnz	r0, 80037f2 <MX_FMC_Init+0x52>
}
 80037ec:	b009      	add	sp, #36	; 0x24
 80037ee:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 80037f2:	f7ff ffb5 	bl	8003760 <Error_Handler>
 80037f6:	bf00      	nop
 80037f8:	2003fe2c 	.word	0x2003fe2c
 80037fc:	a0000140 	.word	0xa0000140

08003800 <MX_I2C3_Init>:
{
 8003800:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 8003802:	4811      	ldr	r0, [pc, #68]	; (8003848 <MX_I2C3_Init+0x48>)
 8003804:	4b11      	ldr	r3, [pc, #68]	; (800384c <MX_I2C3_Init+0x4c>)
 8003806:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8003808:	4b11      	ldr	r3, [pc, #68]	; (8003850 <MX_I2C3_Init+0x50>)
 800380a:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 224;
 800380c:	23e0      	movs	r3, #224	; 0xe0
 800380e:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003810:	2301      	movs	r3, #1
 8003812:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003814:	2300      	movs	r3, #0
 8003816:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003818:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800381a:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800381c:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800381e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003820:	f000 fe92 	bl	8004548 <HAL_I2C_Init>
 8003824:	b950      	cbnz	r0, 800383c <MX_I2C3_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003826:	2100      	movs	r1, #0
 8003828:	4807      	ldr	r0, [pc, #28]	; (8003848 <MX_I2C3_Init+0x48>)
 800382a:	f000 feeb 	bl	8004604 <HAL_I2CEx_ConfigAnalogFilter>
 800382e:	b938      	cbnz	r0, 8003840 <MX_I2C3_Init+0x40>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003830:	2100      	movs	r1, #0
 8003832:	4805      	ldr	r0, [pc, #20]	; (8003848 <MX_I2C3_Init+0x48>)
 8003834:	f000 ff14 	bl	8004660 <HAL_I2CEx_ConfigDigitalFilter>
 8003838:	b920      	cbnz	r0, 8003844 <MX_I2C3_Init+0x44>
}
 800383a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800383c:	f7ff ff90 	bl	8003760 <Error_Handler>
    Error_Handler();
 8003840:	f7ff ff8e 	bl	8003760 <Error_Handler>
    Error_Handler();
 8003844:	f7ff ff8c 	bl	8003760 <Error_Handler>
 8003848:	2003fc54 	.word	0x2003fc54
 800384c:	40005c00 	.word	0x40005c00
 8003850:	00c0eaff 	.word	0x00c0eaff

08003854 <MX_LTDC_Init>:
{
 8003854:	b500      	push	{lr}
 8003856:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003858:	2234      	movs	r2, #52	; 0x34
 800385a:	2100      	movs	r1, #0
 800385c:	a801      	add	r0, sp, #4
 800385e:	f002 fcab 	bl	80061b8 <memset>
  hltdc.Instance = LTDC;
 8003862:	4826      	ldr	r0, [pc, #152]	; (80038fc <MX_LTDC_Init+0xa8>)
 8003864:	4b26      	ldr	r3, [pc, #152]	; (8003900 <MX_LTDC_Init+0xac>)
 8003866:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003868:	2300      	movs	r3, #0
 800386a:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800386c:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800386e:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003870:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 40;
 8003872:	2228      	movs	r2, #40	; 0x28
 8003874:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 9;
 8003876:	2209      	movs	r2, #9
 8003878:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800387a:	2235      	movs	r2, #53	; 0x35
 800387c:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800387e:	220b      	movs	r2, #11
 8003880:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8003882:	f240 2215 	movw	r2, #533	; 0x215
 8003886:	6242      	str	r2, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8003888:	f240 121b 	movw	r2, #283	; 0x11b
 800388c:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800388e:	f240 2235 	movw	r2, #565	; 0x235
 8003892:	62c2      	str	r2, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8003894:	f240 121d 	movw	r2, #285	; 0x11d
 8003898:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800389a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800389e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80038a2:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80038a6:	f000 ffd1 	bl	800484c <HAL_LTDC_Init>
 80038aa:	bb18      	cbnz	r0, 80038f4 <MX_LTDC_Init+0xa0>
  pLayerCfg.WindowX0 = 0;
 80038ac:	2200      	movs	r2, #0
 80038ae:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 80038b0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80038b4:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 80038b6:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 80038b8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80038bc:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80038be:	2002      	movs	r0, #2
 80038c0:	9005      	str	r0, [sp, #20]
  pLayerCfg.Alpha = 255;
 80038c2:	20ff      	movs	r0, #255	; 0xff
 80038c4:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 80038c6:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80038c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80038cc:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80038ce:	2005      	movs	r0, #5
 80038d0:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80038d2:	920a      	str	r2, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80038d4:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80038d6:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80038d8:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80038dc:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80038e0:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80038e4:	a901      	add	r1, sp, #4
 80038e6:	4805      	ldr	r0, [pc, #20]	; (80038fc <MX_LTDC_Init+0xa8>)
 80038e8:	f001 f89a 	bl	8004a20 <HAL_LTDC_ConfigLayer>
 80038ec:	b920      	cbnz	r0, 80038f8 <MX_LTDC_Init+0xa4>
}
 80038ee:	b00f      	add	sp, #60	; 0x3c
 80038f0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80038f4:	f7ff ff34 	bl	8003760 <Error_Handler>
    Error_Handler();
 80038f8:	f7ff ff32 	bl	8003760 <Error_Handler>
 80038fc:	2003fd24 	.word	0x2003fd24
 8003900:	40016800 	.word	0x40016800

08003904 <MX_RTC_Init>:
{
 8003904:	b510      	push	{r4, lr}
 8003906:	b092      	sub	sp, #72	; 0x48
  RTC_TimeTypeDef sTime = {0};
 8003908:	2400      	movs	r4, #0
 800390a:	940c      	str	r4, [sp, #48]	; 0x30
 800390c:	940d      	str	r4, [sp, #52]	; 0x34
 800390e:	940e      	str	r4, [sp, #56]	; 0x38
 8003910:	940f      	str	r4, [sp, #60]	; 0x3c
 8003912:	9410      	str	r4, [sp, #64]	; 0x40
 8003914:	9411      	str	r4, [sp, #68]	; 0x44
  RTC_DateTypeDef sDate = {0};
 8003916:	940b      	str	r4, [sp, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8003918:	222c      	movs	r2, #44	; 0x2c
 800391a:	4621      	mov	r1, r4
 800391c:	4668      	mov	r0, sp
 800391e:	f002 fc4b 	bl	80061b8 <memset>
  hrtc.Instance = RTC;
 8003922:	4831      	ldr	r0, [pc, #196]	; (80039e8 <MX_RTC_Init+0xe4>)
 8003924:	4b31      	ldr	r3, [pc, #196]	; (80039ec <MX_RTC_Init+0xe8>)
 8003926:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003928:	6044      	str	r4, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 800392a:	237f      	movs	r3, #127	; 0x7f
 800392c:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 800392e:	23ff      	movs	r3, #255	; 0xff
 8003930:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003932:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003934:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003936:	6184      	str	r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003938:	f001 ff68 	bl	800580c <HAL_RTC_Init>
 800393c:	2800      	cmp	r0, #0
 800393e:	d147      	bne.n	80039d0 <MX_RTC_Init+0xcc>
  sTime.Hours = 0x0;
 8003940:	2300      	movs	r3, #0
 8003942:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  sTime.Minutes = 0x0;
 8003946:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  sTime.Seconds = 0x0;
 800394a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800394e:	9310      	str	r3, [sp, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003950:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003952:	2201      	movs	r2, #1
 8003954:	a90c      	add	r1, sp, #48	; 0x30
 8003956:	4824      	ldr	r0, [pc, #144]	; (80039e8 <MX_RTC_Init+0xe4>)
 8003958:	f001 ffc6 	bl	80058e8 <HAL_RTC_SetTime>
 800395c:	2800      	cmp	r0, #0
 800395e:	d139      	bne.n	80039d4 <MX_RTC_Init+0xd0>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003960:	2201      	movs	r2, #1
 8003962:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8003966:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  sDate.Date = 0x1;
 800396a:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
  sDate.Year = 0x0;
 800396e:	2300      	movs	r3, #0
 8003970:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003974:	a90b      	add	r1, sp, #44	; 0x2c
 8003976:	481c      	ldr	r0, [pc, #112]	; (80039e8 <MX_RTC_Init+0xe4>)
 8003978:	f002 f836 	bl	80059e8 <HAL_RTC_SetDate>
 800397c:	bb60      	cbnz	r0, 80039d8 <MX_RTC_Init+0xd4>
  sAlarm.AlarmTime.Hours = 0x0;
 800397e:	2300      	movs	r3, #0
 8003980:	f88d 3000 	strb.w	r3, [sp]
  sAlarm.AlarmTime.Minutes = 0x0;
 8003984:	f88d 3001 	strb.w	r3, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8003988:	f88d 3002 	strb.w	r3, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800398c:	9301      	str	r3, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800398e:	9304      	str	r3, [sp, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003990:	9305      	str	r3, [sp, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003992:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003994:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003996:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8003998:	2201      	movs	r2, #1
 800399a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800399e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039a2:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80039a4:	4669      	mov	r1, sp
 80039a6:	4810      	ldr	r0, [pc, #64]	; (80039e8 <MX_RTC_Init+0xe4>)
 80039a8:	f002 f88c 	bl	8005ac4 <HAL_RTC_SetAlarm>
 80039ac:	b9b0      	cbnz	r0, 80039dc <MX_RTC_Init+0xd8>
  sAlarm.Alarm = RTC_ALARM_B;
 80039ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039b2:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80039b4:	2201      	movs	r2, #1
 80039b6:	4669      	mov	r1, sp
 80039b8:	480b      	ldr	r0, [pc, #44]	; (80039e8 <MX_RTC_Init+0xe4>)
 80039ba:	f002 f883 	bl	8005ac4 <HAL_RTC_SetAlarm>
 80039be:	b978      	cbnz	r0, 80039e0 <MX_RTC_Init+0xdc>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80039c0:	2202      	movs	r2, #2
 80039c2:	2100      	movs	r1, #0
 80039c4:	4808      	ldr	r0, [pc, #32]	; (80039e8 <MX_RTC_Init+0xe4>)
 80039c6:	f002 f92d 	bl	8005c24 <HAL_RTCEx_SetTimeStamp>
 80039ca:	b958      	cbnz	r0, 80039e4 <MX_RTC_Init+0xe0>
}
 80039cc:	b012      	add	sp, #72	; 0x48
 80039ce:	bd10      	pop	{r4, pc}
    Error_Handler();
 80039d0:	f7ff fec6 	bl	8003760 <Error_Handler>
    Error_Handler();
 80039d4:	f7ff fec4 	bl	8003760 <Error_Handler>
    Error_Handler();
 80039d8:	f7ff fec2 	bl	8003760 <Error_Handler>
    Error_Handler();
 80039dc:	f7ff fec0 	bl	8003760 <Error_Handler>
    Error_Handler();
 80039e0:	f7ff febe 	bl	8003760 <Error_Handler>
    Error_Handler();
 80039e4:	f7ff febc 	bl	8003760 <Error_Handler>
 80039e8:	2003fdcc 	.word	0x2003fdcc
 80039ec:	40002800 	.word	0x40002800

080039f0 <SystemClock_Config>:
{
 80039f0:	b500      	push	{lr}
 80039f2:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039f4:	2230      	movs	r2, #48	; 0x30
 80039f6:	2100      	movs	r1, #0
 80039f8:	a828      	add	r0, sp, #160	; 0xa0
 80039fa:	f002 fbdd 	bl	80061b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039fe:	2100      	movs	r1, #0
 8003a00:	9123      	str	r1, [sp, #140]	; 0x8c
 8003a02:	9124      	str	r1, [sp, #144]	; 0x90
 8003a04:	9125      	str	r1, [sp, #148]	; 0x94
 8003a06:	9126      	str	r1, [sp, #152]	; 0x98
 8003a08:	9127      	str	r1, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a0a:	2284      	movs	r2, #132	; 0x84
 8003a0c:	a802      	add	r0, sp, #8
 8003a0e:	f002 fbd3 	bl	80061b8 <memset>
  HAL_PWR_EnableBkUpAccess();
 8003a12:	f001 f855 	bl	8004ac0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a16:	4b33      	ldr	r3, [pc, #204]	; (8003ae4 <SystemClock_Config+0xf4>)
 8003a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a1e:	641a      	str	r2, [r3, #64]	; 0x40
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a2a:	4b2f      	ldr	r3, [pc, #188]	; (8003ae8 <SystemClock_Config+0xf8>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a3a:	9301      	str	r3, [sp, #4]
 8003a3c:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003a3e:	2309      	movs	r3, #9
 8003a40:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a46:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	932d      	str	r3, [sp, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	932e      	str	r3, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a50:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003a54:	922f      	str	r2, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003a56:	2219      	movs	r2, #25
 8003a58:	9230      	str	r2, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8003a5a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003a5e:	9231      	str	r2, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a60:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003a62:	2308      	movs	r3, #8
 8003a64:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a66:	a828      	add	r0, sp, #160	; 0xa0
 8003a68:	f001 f870 	bl	8004b4c <HAL_RCC_OscConfig>
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	d131      	bne.n	8003ad4 <SystemClock_Config+0xe4>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003a70:	f001 f82e 	bl	8004ad0 <HAL_PWREx_EnableOverDrive>
 8003a74:	2800      	cmp	r0, #0
 8003a76:	d12f      	bne.n	8003ad8 <SystemClock_Config+0xe8>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a78:	230f      	movs	r3, #15
 8003a7a:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a80:	2300      	movs	r3, #0
 8003a82:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a88:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a8e:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003a90:	2106      	movs	r1, #6
 8003a92:	a823      	add	r0, sp, #140	; 0x8c
 8003a94:	f001 fac8 	bl	8005028 <HAL_RCC_ClockConfig>
 8003a98:	bb00      	cbnz	r0, 8003adc <SystemClock_Config+0xec>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8003a9a:	4b14      	ldr	r3, [pc, #80]	; (8003aec <SystemClock_Config+0xfc>)
 8003a9c:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8003a9e:	2364      	movs	r3, #100	; 0x64
 8003aa0:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003aa6:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003aac:	2201      	movs	r2, #1
 8003aae:	920c      	str	r2, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003ab0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ab4:	920d      	str	r2, [sp, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aba:	920e      	str	r2, [sp, #56]	; 0x38
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003abc:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8003abe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ac2:	9221      	str	r2, [sp, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8003ac4:	9322      	str	r3, [sp, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ac6:	a802      	add	r0, sp, #8
 8003ac8:	f001 fb96 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 8003acc:	b940      	cbnz	r0, 8003ae0 <SystemClock_Config+0xf0>
}
 8003ace:	b035      	add	sp, #212	; 0xd4
 8003ad0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003ad4:	f7ff fe44 	bl	8003760 <Error_Handler>
    Error_Handler();
 8003ad8:	f7ff fe42 	bl	8003760 <Error_Handler>
    Error_Handler();
 8003adc:	f7ff fe40 	bl	8003760 <Error_Handler>
    Error_Handler();
 8003ae0:	f7ff fe3e 	bl	8003760 <Error_Handler>
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	40007000 	.word	0x40007000
 8003aec:	00a10028 	.word	0x00a10028

08003af0 <main>:
{
 8003af0:	b508      	push	{r3, lr}
  MPU_Config();
 8003af2:	f7ff fb55 	bl	80031a0 <MPU_Config>
  HAL_Init();
 8003af6:	f000 fa2d 	bl	8003f54 <HAL_Init>
  SystemClock_Config();
 8003afa:	f7ff ff79 	bl	80039f0 <SystemClock_Config>
  HAL_Delay(500);
 8003afe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b02:	f000 fa4b 	bl	8003f9c <HAL_Delay>
  MX_GPIO_Init();
 8003b06:	f7ff fb77 	bl	80031f8 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8003b0a:	f7ff fe2b 	bl	8003764 <MX_DMA2D_Init>
  MX_FMC_Init();
 8003b0e:	f7ff fe47 	bl	80037a0 <MX_FMC_Init>
  MX_I2C3_Init();
 8003b12:	f7ff fe75 	bl	8003800 <MX_I2C3_Init>
  MX_LTDC_Init();
 8003b16:	f7ff fe9d 	bl	8003854 <MX_LTDC_Init>
  MX_RTC_Init();
 8003b1a:	f7ff fef3 	bl	8003904 <MX_RTC_Init>
	  MainFunc ();
 8003b1e:	f7ff f8ad 	bl	8002c7c <MainFunc>
 8003b22:	e7fc      	b.n	8003b1e <main+0x2e>

08003b24 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b26:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003b28:	2300      	movs	r3, #0
 8003b2a:	9301      	str	r3, [sp, #4]
 8003b2c:	9302      	str	r3, [sp, #8]
 8003b2e:	9303      	str	r3, [sp, #12]
 8003b30:	9304      	str	r3, [sp, #16]
 8003b32:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8003b34:	4b2a      	ldr	r3, [pc, #168]	; (8003be0 <HAL_FMC_MspInit+0xbc>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	b10b      	cbz	r3, 8003b3e <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003b3a:	b007      	add	sp, #28
 8003b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8003b3e:	4b28      	ldr	r3, [pc, #160]	; (8003be0 <HAL_FMC_MspInit+0xbc>)
 8003b40:	2201      	movs	r2, #1
 8003b42:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8003b44:	4b27      	ldr	r3, [pc, #156]	; (8003be4 <HAL_FMC_MspInit+0xc0>)
 8003b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b48:	f042 0201 	orr.w	r2, r2, #1
 8003b4c:	639a      	str	r2, [r3, #56]	; 0x38
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003b58:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003b5c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5e:	2602      	movs	r6, #2
 8003b60:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b62:	2503      	movs	r5, #3
 8003b64:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b66:	240c      	movs	r4, #12
 8003b68:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b6a:	a901      	add	r1, sp, #4
 8003b6c:	481e      	ldr	r0, [pc, #120]	; (8003be8 <HAL_FMC_MspInit+0xc4>)
 8003b6e:	f000 fbf7 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003b72:	f248 1333 	movw	r3, #33075	; 0x8133
 8003b76:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b78:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7a:	2700      	movs	r7, #0
 8003b7c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b7e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b80:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b82:	a901      	add	r1, sp, #4
 8003b84:	4819      	ldr	r0, [pc, #100]	; (8003bec <HAL_FMC_MspInit+0xc8>)
 8003b86:	f000 fbeb 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003b8a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003b8e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b90:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b92:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b94:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b96:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b98:	a901      	add	r1, sp, #4
 8003b9a:	4815      	ldr	r0, [pc, #84]	; (8003bf0 <HAL_FMC_MspInit+0xcc>)
 8003b9c:	f000 fbe0 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003ba0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003ba4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba6:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba8:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003baa:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003bac:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003bae:	a901      	add	r1, sp, #4
 8003bb0:	4810      	ldr	r0, [pc, #64]	; (8003bf4 <HAL_FMC_MspInit+0xd0>)
 8003bb2:	f000 fbd5 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003bb6:	2328      	movs	r3, #40	; 0x28
 8003bb8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bba:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbc:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bbe:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003bc0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003bc2:	a901      	add	r1, sp, #4
 8003bc4:	480c      	ldr	r0, [pc, #48]	; (8003bf8 <HAL_FMC_MspInit+0xd4>)
 8003bc6:	f000 fbcb 	bl	8004360 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003bca:	2308      	movs	r3, #8
 8003bcc:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bce:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd0:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bd2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003bd4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003bd6:	a901      	add	r1, sp, #4
 8003bd8:	4808      	ldr	r0, [pc, #32]	; (8003bfc <HAL_FMC_MspInit+0xd8>)
 8003bda:	f000 fbc1 	bl	8004360 <HAL_GPIO_Init>
 8003bde:	e7ac      	b.n	8003b3a <HAL_FMC_MspInit+0x16>
 8003be0:	20000040 	.word	0x20000040
 8003be4:	40023800 	.word	0x40023800
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40021800 	.word	0x40021800
 8003bf0:	40020c00 	.word	0x40020c00
 8003bf4:	40021400 	.word	0x40021400
 8003bf8:	40021c00 	.word	0x40021c00
 8003bfc:	40020800 	.word	0x40020800

08003c00 <HAL_MspInit>:
{
 8003c00:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c02:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <HAL_MspInit+0x2c>)
 8003c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40
 8003c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c0e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003c12:	9200      	str	r2, [sp, #0]
 8003c14:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c1c:	645a      	str	r2, [r3, #68]	; 0x44
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	9b01      	ldr	r3, [sp, #4]
}
 8003c28:	b002      	add	sp, #8
 8003c2a:	4770      	bx	lr
 8003c2c:	40023800 	.word	0x40023800

08003c30 <HAL_DMA2D_MspInit>:
  if(hdma2d->Instance==DMA2D)
 8003c30:	6802      	ldr	r2, [r0, #0]
 8003c32:	4b0e      	ldr	r3, [pc, #56]	; (8003c6c <HAL_DMA2D_MspInit+0x3c>)
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d000      	beq.n	8003c3a <HAL_DMA2D_MspInit+0xa>
 8003c38:	4770      	bx	lr
{
 8003c3a:	b500      	push	{lr}
 8003c3c:	b083      	sub	sp, #12
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003c3e:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 8003c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c44:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003c48:	631a      	str	r2, [r3, #48]	; 0x30
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8003c54:	2200      	movs	r2, #0
 8003c56:	4611      	mov	r1, r2
 8003c58:	205a      	movs	r0, #90	; 0x5a
 8003c5a:	f000 f9c5 	bl	8003fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003c5e:	205a      	movs	r0, #90	; 0x5a
 8003c60:	f000 f9f4 	bl	800404c <HAL_NVIC_EnableIRQ>
}
 8003c64:	b003      	add	sp, #12
 8003c66:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c6a:	bf00      	nop
 8003c6c:	4002b000 	.word	0x4002b000

08003c70 <HAL_I2C_MspInit>:
{
 8003c70:	b510      	push	{r4, lr}
 8003c72:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c74:	2300      	movs	r3, #0
 8003c76:	9303      	str	r3, [sp, #12]
 8003c78:	9304      	str	r3, [sp, #16]
 8003c7a:	9305      	str	r3, [sp, #20]
 8003c7c:	9306      	str	r3, [sp, #24]
 8003c7e:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C3)
 8003c80:	6802      	ldr	r2, [r0, #0]
 8003c82:	4b14      	ldr	r3, [pc, #80]	; (8003cd4 <HAL_I2C_MspInit+0x64>)
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d001      	beq.n	8003c8c <HAL_I2C_MspInit+0x1c>
}
 8003c88:	b008      	add	sp, #32
 8003c8a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c8c:	4c12      	ldr	r4, [pc, #72]	; (8003cd8 <HAL_I2C_MspInit+0x68>)
 8003c8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c94:	6323      	str	r3, [r4, #48]	; 0x30
 8003c96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9c:	9301      	str	r3, [sp, #4]
 8003c9e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003ca0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003ca4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ca6:	2312      	movs	r3, #18
 8003ca8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003caa:	2301      	movs	r3, #1
 8003cac:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003cb2:	2304      	movs	r3, #4
 8003cb4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003cb6:	a903      	add	r1, sp, #12
 8003cb8:	4808      	ldr	r0, [pc, #32]	; (8003cdc <HAL_I2C_MspInit+0x6c>)
 8003cba:	f000 fb51 	bl	8004360 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003cbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cc4:	6423      	str	r3, [r4, #64]	; 0x40
 8003cc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ccc:	9302      	str	r3, [sp, #8]
 8003cce:	9b02      	ldr	r3, [sp, #8]
}
 8003cd0:	e7da      	b.n	8003c88 <HAL_I2C_MspInit+0x18>
 8003cd2:	bf00      	nop
 8003cd4:	40005c00 	.word	0x40005c00
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40021c00 	.word	0x40021c00

08003ce0 <HAL_LTDC_MspInit>:
{
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	9307      	str	r3, [sp, #28]
 8003ce8:	9308      	str	r3, [sp, #32]
 8003cea:	9309      	str	r3, [sp, #36]	; 0x24
 8003cec:	930a      	str	r3, [sp, #40]	; 0x28
 8003cee:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hltdc->Instance==LTDC)
 8003cf0:	6802      	ldr	r2, [r0, #0]
 8003cf2:	4b3e      	ldr	r3, [pc, #248]	; (8003dec <HAL_LTDC_MspInit+0x10c>)
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d001      	beq.n	8003cfc <HAL_LTDC_MspInit+0x1c>
}
 8003cf8:	b00c      	add	sp, #48	; 0x30
 8003cfa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003cfc:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8003d00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d02:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003d06:	645a      	str	r2, [r3, #68]	; 0x44
 8003d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d0a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8003d0e:	9201      	str	r2, [sp, #4]
 8003d10:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d14:	f042 0210 	orr.w	r2, r2, #16
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
 8003d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d1c:	f002 0210 	and.w	r2, r2, #16
 8003d20:	9202      	str	r2, [sp, #8]
 8003d22:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
 8003d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d2e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003d32:	9203      	str	r2, [sp, #12]
 8003d34:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003d36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d3c:	631a      	str	r2, [r3, #48]	; 0x30
 8003d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d40:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8003d44:	9204      	str	r2, [sp, #16]
 8003d46:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d4e:	631a      	str	r2, [r3, #48]	; 0x30
 8003d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d52:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003d56:	9205      	str	r2, [sp, #20]
 8003d58:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30
 8003d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d68:	9306      	str	r3, [sp, #24]
 8003d6a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003d6c:	2310      	movs	r3, #16
 8003d6e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d70:	2502      	movs	r5, #2
 8003d72:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d74:	260e      	movs	r6, #14
 8003d76:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003d78:	a907      	add	r1, sp, #28
 8003d7a:	481d      	ldr	r0, [pc, #116]	; (8003df0 <HAL_LTDC_MspInit+0x110>)
 8003d7c:	f000 faf0 	bl	8004360 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003d80:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003d84:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d86:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d88:	2400      	movs	r4, #0
 8003d8a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d8c:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d8e:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003d90:	a907      	add	r1, sp, #28
 8003d92:	4818      	ldr	r0, [pc, #96]	; (8003df4 <HAL_LTDC_MspInit+0x114>)
 8003d94:	f000 fae4 	bl	8004360 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003d98:	23f7      	movs	r3, #247	; 0xf7
 8003d9a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d9c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003da0:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003da2:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003da4:	a907      	add	r1, sp, #28
 8003da6:	4814      	ldr	r0, [pc, #80]	; (8003df8 <HAL_LTDC_MspInit+0x118>)
 8003da8:	f000 fada 	bl	8004360 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003db0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db2:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db4:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db6:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003db8:	2309      	movs	r3, #9
 8003dba:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003dbc:	a907      	add	r1, sp, #28
 8003dbe:	480f      	ldr	r0, [pc, #60]	; (8003dfc <HAL_LTDC_MspInit+0x11c>)
 8003dc0:	f000 face 	bl	8004360 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003dc4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003dc8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dca:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dcc:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dce:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003dd0:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003dd2:	a907      	add	r1, sp, #28
 8003dd4:	480a      	ldr	r0, [pc, #40]	; (8003e00 <HAL_LTDC_MspInit+0x120>)
 8003dd6:	f000 fac3 	bl	8004360 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8003dda:	4622      	mov	r2, r4
 8003ddc:	4621      	mov	r1, r4
 8003dde:	2058      	movs	r0, #88	; 0x58
 8003de0:	f000 f902 	bl	8003fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003de4:	2058      	movs	r0, #88	; 0x58
 8003de6:	f000 f931 	bl	800404c <HAL_NVIC_EnableIRQ>
}
 8003dea:	e785      	b.n	8003cf8 <HAL_LTDC_MspInit+0x18>
 8003dec:	40016800 	.word	0x40016800
 8003df0:	40021000 	.word	0x40021000
 8003df4:	40022400 	.word	0x40022400
 8003df8:	40022800 	.word	0x40022800
 8003dfc:	40021800 	.word	0x40021800
 8003e00:	40022000 	.word	0x40022000

08003e04 <HAL_RTC_MspInit>:
  if(hrtc->Instance==RTC)
 8003e04:	6802      	ldr	r2, [r0, #0]
 8003e06:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <HAL_RTC_MspInit+0x18>)
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d000      	beq.n	8003e0e <HAL_RTC_MspInit+0xa>
}
 8003e0c:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8003e0e:	4a04      	ldr	r2, [pc, #16]	; (8003e20 <HAL_RTC_MspInit+0x1c>)
 8003e10:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e16:	6713      	str	r3, [r2, #112]	; 0x70
}
 8003e18:	e7f8      	b.n	8003e0c <HAL_RTC_MspInit+0x8>
 8003e1a:	bf00      	nop
 8003e1c:	40002800 	.word	0x40002800
 8003e20:	40023800 	.word	0x40023800

08003e24 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003e24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003e26:	f7ff fe7d 	bl	8003b24 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003e2a:	bd08      	pop	{r3, pc}

08003e2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e2c:	b500      	push	{lr}
 8003e2e:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003e30:	2200      	movs	r2, #0
 8003e32:	4601      	mov	r1, r0
 8003e34:	2036      	movs	r0, #54	; 0x36
 8003e36:	f000 f8d7 	bl	8003fe8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003e3a:	2036      	movs	r0, #54	; 0x36
 8003e3c:	f000 f906 	bl	800404c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003e40:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <HAL_InitTick+0x6c>)
 8003e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e44:	f042 0210 	orr.w	r2, r2, #16
 8003e48:	641a      	str	r2, [r3, #64]	; 0x40
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	9301      	str	r3, [sp, #4]
 8003e52:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003e54:	a902      	add	r1, sp, #8
 8003e56:	a803      	add	r0, sp, #12
 8003e58:	f001 f9b0 	bl	80051bc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003e5c:	f001 f99e 	bl	800519c <HAL_RCC_GetPCLK1Freq>
 8003e60:	0043      	lsls	r3, r0, #1
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003e62:	480e      	ldr	r0, [pc, #56]	; (8003e9c <HAL_InitTick+0x70>)
 8003e64:	fba0 2303 	umull	r2, r3, r0, r3
 8003e68:	0c9b      	lsrs	r3, r3, #18
 8003e6a:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003e6c:	480c      	ldr	r0, [pc, #48]	; (8003ea0 <HAL_InitTick+0x74>)
 8003e6e:	4a0d      	ldr	r2, [pc, #52]	; (8003ea4 <HAL_InitTick+0x78>)
 8003e70:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003e72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e76:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003e78:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e7e:	6083      	str	r3, [r0, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003e80:	f002 f8be 	bl	8006000 <HAL_TIM_Base_Init>
 8003e84:	b118      	cbz	r0, 8003e8e <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
 8003e86:	2001      	movs	r0, #1
}
 8003e88:	b009      	add	sp, #36	; 0x24
 8003e8a:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim6);
 8003e8e:	4804      	ldr	r0, [pc, #16]	; (8003ea0 <HAL_InitTick+0x74>)
 8003e90:	f001 ff16 	bl	8005cc0 <HAL_TIM_Base_Start_IT>
 8003e94:	e7f8      	b.n	8003e88 <HAL_InitTick+0x5c>
 8003e96:	bf00      	nop
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	431bde83 	.word	0x431bde83
 8003ea0:	2003fe60 	.word	0x2003fe60
 8003ea4:	40001000 	.word	0x40001000

08003ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ea8:	e7fe      	b.n	8003ea8 <NMI_Handler>

08003eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eaa:	e7fe      	b.n	8003eaa <HardFault_Handler>

08003eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003eac:	e7fe      	b.n	8003eac <MemManage_Handler>

08003eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eae:	e7fe      	b.n	8003eae <BusFault_Handler>

08003eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003eb0:	e7fe      	b.n	8003eb0 <UsageFault_Handler>

08003eb2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003eb2:	4770      	bx	lr

08003eb4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003eb4:	4770      	bx	lr

08003eb6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003eb6:	4770      	bx	lr

08003eb8 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003eb8:	4770      	bx	lr
	...

08003ebc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003ebc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003ebe:	4802      	ldr	r0, [pc, #8]	; (8003ec8 <TIM6_DAC_IRQHandler+0xc>)
 8003ec0:	f001 ff4a 	bl	8005d58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003ec4:	bd08      	pop	{r3, pc}
 8003ec6:	bf00      	nop
 8003ec8:	2003fe60 	.word	0x2003fe60

08003ecc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003ecc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003ece:	4802      	ldr	r0, [pc, #8]	; (8003ed8 <LTDC_IRQHandler+0xc>)
 8003ed0:	f000 fd39 	bl	8004946 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003ed4:	bd08      	pop	{r3, pc}
 8003ed6:	bf00      	nop
 8003ed8:	2003fd24 	.word	0x2003fd24

08003edc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003edc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003ede:	4802      	ldr	r0, [pc, #8]	; (8003ee8 <DMA2D_IRQHandler+0xc>)
 8003ee0:	f000 f93e 	bl	8004160 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003ee4:	bd08      	pop	{r3, pc}
 8003ee6:	bf00      	nop
 8003ee8:	2003fdec 	.word	0x2003fdec

08003eec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003eec:	4a03      	ldr	r2, [pc, #12]	; (8003efc <SystemInit+0x10>)
 8003eee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003ef2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ef6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003efa:	4770      	bx	lr
 8003efc:	e000ed00 	.word	0xe000ed00

08003f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f04:	480d      	ldr	r0, [pc, #52]	; (8003f3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f06:	490e      	ldr	r1, [pc, #56]	; (8003f40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f08:	4a0e      	ldr	r2, [pc, #56]	; (8003f44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f0c:	e002      	b.n	8003f14 <LoopCopyDataInit>

08003f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f12:	3304      	adds	r3, #4

08003f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f18:	d3f9      	bcc.n	8003f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f1a:	4a0b      	ldr	r2, [pc, #44]	; (8003f48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003f1c:	4c0b      	ldr	r4, [pc, #44]	; (8003f4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f20:	e001      	b.n	8003f26 <LoopFillZerobss>

08003f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f24:	3204      	adds	r2, #4

08003f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f28:	d3fb      	bcc.n	8003f22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f2a:	f7ff ffdf 	bl	8003eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f2e:	f002 f91f 	bl	8006170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f32:	f7ff fddd 	bl	8003af0 <main>
  bx  lr    
 8003f36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f38:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003f44:	08007f20 	.word	0x08007f20
  ldr r2, =_sbss
 8003f48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003f4c:	2003feb0 	.word	0x2003feb0

08003f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f50:	e7fe      	b.n	8003f50 <ADC_IRQHandler>
	...

08003f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f54:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8003f56:	4a07      	ldr	r2, [pc, #28]	; (8003f74 <HAL_Init+0x20>)
 8003f58:	6813      	ldr	r3, [r2, #0]
 8003f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f5e:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f60:	2003      	movs	r0, #3
 8003f62:	f000 f82f 	bl	8003fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f66:	2000      	movs	r0, #0
 8003f68:	f7ff ff60 	bl	8003e2c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003f6c:	f7ff fe48 	bl	8003c00 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8003f70:	2000      	movs	r0, #0
 8003f72:	bd08      	pop	{r3, pc}
 8003f74:	40023c00 	.word	0x40023c00

08003f78 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003f78:	4a03      	ldr	r2, [pc, #12]	; (8003f88 <HAL_IncTick+0x10>)
 8003f7a:	6811      	ldr	r1, [r2, #0]
 8003f7c:	4b03      	ldr	r3, [pc, #12]	; (8003f8c <HAL_IncTick+0x14>)
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	440b      	add	r3, r1
 8003f82:	6013      	str	r3, [r2, #0]
}
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	2003feac 	.word	0x2003feac
 8003f8c:	20000004 	.word	0x20000004

08003f90 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003f90:	4b01      	ldr	r3, [pc, #4]	; (8003f98 <HAL_GetTick+0x8>)
 8003f92:	6818      	ldr	r0, [r3, #0]
}
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	2003feac 	.word	0x2003feac

08003f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f9c:	b538      	push	{r3, r4, r5, lr}
 8003f9e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003fa0:	f7ff fff6 	bl	8003f90 <HAL_GetTick>
 8003fa4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fa6:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003faa:	d002      	beq.n	8003fb2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fac:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <HAL_Delay+0x24>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fb2:	f7ff ffed 	bl	8003f90 <HAL_GetTick>
 8003fb6:	1b40      	subs	r0, r0, r5
 8003fb8:	42a0      	cmp	r0, r4
 8003fba:	d3fa      	bcc.n	8003fb2 <HAL_Delay+0x16>
  {
  }
}
 8003fbc:	bd38      	pop	{r3, r4, r5, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000004 	.word	0x20000004

08003fc4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fc4:	4906      	ldr	r1, [pc, #24]	; (8003fe0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8003fc6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fc8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003fcc:	041b      	lsls	r3, r3, #16
 8003fce:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fd0:	0200      	lsls	r0, r0, #8
 8003fd2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fd6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003fd8:	4a02      	ldr	r2, [pc, #8]	; (8003fe4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003fda:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8003fdc:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003fde:	4770      	bx	lr
 8003fe0:	e000ed00 	.word	0xe000ed00
 8003fe4:	05fa0000 	.word	0x05fa0000

08003fe8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fe8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fea:	4b15      	ldr	r3, [pc, #84]	; (8004040 <HAL_NVIC_SetPriority+0x58>)
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ff2:	f1c3 0407 	rsb	r4, r3, #7
 8003ff6:	2c04      	cmp	r4, #4
 8003ff8:	bf28      	it	cs
 8003ffa:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ffc:	1d1d      	adds	r5, r3, #4
 8003ffe:	2d06      	cmp	r5, #6
 8004000:	d914      	bls.n	800402c <HAL_NVIC_SetPriority+0x44>
 8004002:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004004:	f04f 35ff 	mov.w	r5, #4294967295
 8004008:	fa05 f404 	lsl.w	r4, r5, r4
 800400c:	ea21 0104 	bic.w	r1, r1, r4
 8004010:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004012:	fa05 f303 	lsl.w	r3, r5, r3
 8004016:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800401a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800401c:	2800      	cmp	r0, #0
 800401e:	db07      	blt.n	8004030 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004020:	0109      	lsls	r1, r1, #4
 8004022:	b2c9      	uxtb	r1, r1
 8004024:	4b07      	ldr	r3, [pc, #28]	; (8004044 <HAL_NVIC_SetPriority+0x5c>)
 8004026:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004028:	bc30      	pop	{r4, r5}
 800402a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800402c:	2300      	movs	r3, #0
 800402e:	e7e9      	b.n	8004004 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004030:	f000 000f 	and.w	r0, r0, #15
 8004034:	0109      	lsls	r1, r1, #4
 8004036:	b2c9      	uxtb	r1, r1
 8004038:	4b03      	ldr	r3, [pc, #12]	; (8004048 <HAL_NVIC_SetPriority+0x60>)
 800403a:	5419      	strb	r1, [r3, r0]
 800403c:	e7f4      	b.n	8004028 <HAL_NVIC_SetPriority+0x40>
 800403e:	bf00      	nop
 8004040:	e000ed00 	.word	0xe000ed00
 8004044:	e000e400 	.word	0xe000e400
 8004048:	e000ed14 	.word	0xe000ed14

0800404c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800404c:	2800      	cmp	r0, #0
 800404e:	db07      	blt.n	8004060 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004050:	f000 021f 	and.w	r2, r0, #31
 8004054:	0940      	lsrs	r0, r0, #5
 8004056:	2301      	movs	r3, #1
 8004058:	4093      	lsls	r3, r2
 800405a:	4a02      	ldr	r2, [pc, #8]	; (8004064 <HAL_NVIC_EnableIRQ+0x18>)
 800405c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	e000e100 	.word	0xe000e100

08004068 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004068:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800406c:	4a04      	ldr	r2, [pc, #16]	; (8004080 <HAL_MPU_Disable+0x18>)
 800406e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004074:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004076:	4b03      	ldr	r3, [pc, #12]	; (8004084 <HAL_MPU_Disable+0x1c>)
 8004078:	2200      	movs	r2, #0
 800407a:	605a      	str	r2, [r3, #4]
}
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	e000ed00 	.word	0xe000ed00
 8004084:	e000ed90 	.word	0xe000ed90

08004088 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004088:	f040 0001 	orr.w	r0, r0, #1
 800408c:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <HAL_MPU_Enable+0x1c>)
 800408e:	6058      	str	r0, [r3, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004090:	4a05      	ldr	r2, [pc, #20]	; (80040a8 <HAL_MPU_Enable+0x20>)
 8004092:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004098:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800409a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800409e:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80040a2:	4770      	bx	lr
 80040a4:	e000ed90 	.word	0xe000ed90
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80040ac:	7842      	ldrb	r2, [r0, #1]
 80040ae:	4b13      	ldr	r3, [pc, #76]	; (80040fc <HAL_MPU_ConfigRegion+0x50>)
 80040b0:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80040b2:	7803      	ldrb	r3, [r0, #0]
 80040b4:	b923      	cbnz	r3, 80040c0 <HAL_MPU_ConfigRegion+0x14>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 80040b6:	4b11      	ldr	r3, [pc, #68]	; (80040fc <HAL_MPU_ConfigRegion+0x50>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80040bc:	611a      	str	r2, [r3, #16]
  }
}
 80040be:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 80040c0:	6843      	ldr	r3, [r0, #4]
 80040c2:	4a0e      	ldr	r2, [pc, #56]	; (80040fc <HAL_MPU_ConfigRegion+0x50>)
 80040c4:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80040c6:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80040c8:	7ac3      	ldrb	r3, [r0, #11]
 80040ca:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80040cc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80040d0:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80040d2:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80040d6:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80040d8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80040dc:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80040de:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80040e2:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80040e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80040e8:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80040ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80040ee:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80040f0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80040f4:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80040f6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80040f8:	6113      	str	r3, [r2, #16]
 80040fa:	4770      	bx	lr
 80040fc:	e000ed90 	.word	0xe000ed90

08004100 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004100:	b338      	cbz	r0, 8004152 <HAL_DMA2D_Init+0x52>
{
 8004102:	b510      	push	{r4, lr}
 8004104:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004106:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800410a:	b1eb      	cbz	r3, 8004148 <HAL_DMA2D_Init+0x48>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800410c:	2302      	movs	r3, #2
 800410e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004112:	6822      	ldr	r2, [r4, #0]
 8004114:	6813      	ldr	r3, [r2, #0]
 8004116:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800411a:	6861      	ldr	r1, [r4, #4]
 800411c:	430b      	orrs	r3, r1
 800411e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004120:	6822      	ldr	r2, [r4, #0]
 8004122:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004124:	f023 0307 	bic.w	r3, r3, #7
 8004128:	68a1      	ldr	r1, [r4, #8]
 800412a:	430b      	orrs	r3, r1
 800412c:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800412e:	6822      	ldr	r2, [r4, #0]
 8004130:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004132:	4b09      	ldr	r3, [pc, #36]	; (8004158 <HAL_DMA2D_Init+0x58>)
 8004134:	400b      	ands	r3, r1
 8004136:	68e1      	ldr	r1, [r4, #12]
 8004138:	430b      	orrs	r3, r1
 800413a:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800413c:	2000      	movs	r0, #0
 800413e:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004140:	2301      	movs	r3, #1
 8004142:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 8004146:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8004148:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 800414c:	f7ff fd70 	bl	8003c30 <HAL_DMA2D_MspInit>
 8004150:	e7dc      	b.n	800410c <HAL_DMA2D_Init+0xc>
    return HAL_ERROR;
 8004152:	2001      	movs	r0, #1
}
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	ffffc000 	.word	0xffffc000

0800415c <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800415c:	4770      	bx	lr

0800415e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800415e:	4770      	bx	lr

08004160 <HAL_DMA2D_IRQHandler>:
{
 8004160:	b570      	push	{r4, r5, r6, lr}
 8004162:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004164:	6803      	ldr	r3, [r0, #0]
 8004166:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004168:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800416a:	f015 0f01 	tst.w	r5, #1
 800416e:	d016      	beq.n	800419e <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004170:	f416 7f80 	tst.w	r6, #256	; 0x100
 8004174:	d013      	beq.n	800419e <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800417c:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800417e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004180:	f043 0301 	orr.w	r3, r3, #1
 8004184:	63c3      	str	r3, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004186:	6803      	ldr	r3, [r0, #0]
 8004188:	2201      	movs	r2, #1
 800418a:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800418c:	2304      	movs	r3, #4
 800418e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004192:	2300      	movs	r3, #0
 8004194:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004198:	6943      	ldr	r3, [r0, #20]
 800419a:	b103      	cbz	r3, 800419e <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 800419c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800419e:	f015 0f20 	tst.w	r5, #32
 80041a2:	d018      	beq.n	80041d6 <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 80041a4:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 80041a8:	d015      	beq.n	80041d6 <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80041aa:	6822      	ldr	r2, [r4, #0]
 80041ac:	6813      	ldr	r3, [r2, #0]
 80041ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041b2:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	2220      	movs	r2, #32
 80041b8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80041ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80041bc:	f043 0302 	orr.w	r3, r3, #2
 80041c0:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041c2:	2304      	movs	r3, #4
 80041c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80041c8:	2300      	movs	r3, #0
 80041ca:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80041ce:	6963      	ldr	r3, [r4, #20]
 80041d0:	b10b      	cbz	r3, 80041d6 <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 80041d2:	4620      	mov	r0, r4
 80041d4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80041d6:	f015 0f08 	tst.w	r5, #8
 80041da:	d018      	beq.n	800420e <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80041dc:	f416 6f00 	tst.w	r6, #2048	; 0x800
 80041e0:	d015      	beq.n	800420e <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80041e2:	6822      	ldr	r2, [r4, #0]
 80041e4:	6813      	ldr	r3, [r2, #0]
 80041e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041ea:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	2208      	movs	r2, #8
 80041f0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80041f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80041f4:	f043 0304 	orr.w	r3, r3, #4
 80041f8:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041fa:	2304      	movs	r3, #4
 80041fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004200:	2300      	movs	r3, #0
 8004202:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004206:	6963      	ldr	r3, [r4, #20]
 8004208:	b10b      	cbz	r3, 800420e <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 800420a:	4620      	mov	r0, r4
 800420c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800420e:	f015 0f04 	tst.w	r5, #4
 8004212:	d002      	beq.n	800421a <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004214:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8004218:	d120      	bne.n	800425c <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800421a:	f015 0f02 	tst.w	r5, #2
 800421e:	d016      	beq.n	800424e <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004220:	f416 7f00 	tst.w	r6, #512	; 0x200
 8004224:	d013      	beq.n	800424e <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004226:	6822      	ldr	r2, [r4, #0]
 8004228:	6813      	ldr	r3, [r2, #0]
 800422a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800422e:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	2202      	movs	r2, #2
 8004234:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004236:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004238:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800423a:	2301      	movs	r3, #1
 800423c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004240:	2300      	movs	r3, #0
 8004242:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8004246:	6923      	ldr	r3, [r4, #16]
 8004248:	b10b      	cbz	r3, 800424e <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 800424a:	4620      	mov	r0, r4
 800424c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800424e:	f015 0f10 	tst.w	r5, #16
 8004252:	d002      	beq.n	800425a <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004254:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8004258:	d10c      	bne.n	8004274 <HAL_DMA2D_IRQHandler+0x114>
}
 800425a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800425c:	6822      	ldr	r2, [r4, #0]
 800425e:	6813      	ldr	r3, [r2, #0]
 8004260:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004264:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	2204      	movs	r2, #4
 800426a:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800426c:	4620      	mov	r0, r4
 800426e:	f7ff ff75 	bl	800415c <HAL_DMA2D_LineEventCallback>
 8004272:	e7d2      	b.n	800421a <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004274:	6822      	ldr	r2, [r4, #0]
 8004276:	6813      	ldr	r3, [r2, #0]
 8004278:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800427c:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	2210      	movs	r2, #16
 8004282:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004284:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004286:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004288:	2301      	movs	r3, #1
 800428a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800428e:	2300      	movs	r3, #0
 8004290:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004294:	4620      	mov	r0, r4
 8004296:	f7ff ff62 	bl	800415e <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800429a:	e7de      	b.n	800425a <HAL_DMA2D_IRQHandler+0xfa>

0800429c <HAL_DMA2D_ConfigLayer>:
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800429c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d059      	beq.n	8004358 <HAL_DMA2D_ConfigLayer+0xbc>
{
 80042a4:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 80042a6:	2301      	movs	r3, #1
 80042a8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80042ac:	2302      	movs	r3, #2
 80042ae:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80042b2:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	1c8b      	adds	r3, r1, #2
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	58c3      	ldr	r3, [r0, r3]
 80042be:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80042c2:	3a09      	subs	r2, #9
 80042c4:	2a01      	cmp	r2, #1
 80042c6:	d91e      	bls.n	8004306 <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80042c8:	1c8a      	adds	r2, r1, #2
 80042ca:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 80042ce:	6852      	ldr	r2, [r2, #4]
 80042d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80042d4:	bb41      	cbnz	r1, 8004328 <HAL_DMA2D_ConfigLayer+0x8c>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80042d6:	6804      	ldr	r4, [r0, #0]
 80042d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80042da:	4a20      	ldr	r2, [pc, #128]	; (800435c <HAL_DMA2D_ConfigLayer+0xc0>)
 80042dc:	402a      	ands	r2, r5
 80042de:	4313      	orrs	r3, r2
 80042e0:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80042e2:	6802      	ldr	r2, [r0, #0]
 80042e4:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80042e8:	699c      	ldr	r4, [r3, #24]
 80042ea:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	3b09      	subs	r3, #9
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d910      	bls.n	8004316 <HAL_DMA2D_ConfigLayer+0x7a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80042f4:	2301      	movs	r3, #1
 80042f6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80042fa:	2300      	movs	r3, #0
 80042fc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8004300:	4618      	mov	r0, r3
}
 8004302:	bc30      	pop	{r4, r5}
 8004304:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004306:	1c8a      	adds	r2, r1, #2
 8004308:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 800430c:	6852      	ldr	r2, [r2, #4]
 800430e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004312:	4313      	orrs	r3, r2
 8004314:	e7de      	b.n	80042d4 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004316:	3102      	adds	r1, #2
 8004318:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800431c:	684b      	ldr	r3, [r1, #4]
 800431e:	6802      	ldr	r2, [r0, #0]
 8004320:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004324:	6293      	str	r3, [r2, #40]	; 0x28
 8004326:	e7e5      	b.n	80042f4 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004328:	6804      	ldr	r4, [r0, #0]
 800432a:	69e5      	ldr	r5, [r4, #28]
 800432c:	4a0b      	ldr	r2, [pc, #44]	; (800435c <HAL_DMA2D_ConfigLayer+0xc0>)
 800432e:	402a      	ands	r2, r5
 8004330:	4313      	orrs	r3, r2
 8004332:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004334:	6802      	ldr	r2, [r0, #0]
 8004336:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 800433a:	699c      	ldr	r4, [r3, #24]
 800433c:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	3b09      	subs	r3, #9
 8004342:	2b01      	cmp	r3, #1
 8004344:	d8d6      	bhi.n	80042f4 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004346:	3102      	adds	r1, #2
 8004348:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800434c:	684b      	ldr	r3, [r1, #4]
 800434e:	6802      	ldr	r2, [r0, #0]
 8004350:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004354:	6213      	str	r3, [r2, #32]
 8004356:	e7cd      	b.n	80042f4 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 8004358:	2002      	movs	r0, #2
}
 800435a:	4770      	bx	lr
 800435c:	00fcfff0 	.word	0x00fcfff0

08004360 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004360:	2300      	movs	r3, #0
 8004362:	2b0f      	cmp	r3, #15
 8004364:	f200 80e1 	bhi.w	800452a <HAL_GPIO_Init+0x1ca>
{
 8004368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800436a:	b083      	sub	sp, #12
 800436c:	e039      	b.n	80043e2 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800436e:	2209      	movs	r2, #9
 8004370:	e000      	b.n	8004374 <HAL_GPIO_Init+0x14>
 8004372:	2200      	movs	r2, #0
 8004374:	40b2      	lsls	r2, r6
 8004376:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8004378:	3402      	adds	r4, #2
 800437a:	4e6c      	ldr	r6, [pc, #432]	; (800452c <HAL_GPIO_Init+0x1cc>)
 800437c:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004380:	4a6b      	ldr	r2, [pc, #428]	; (8004530 <HAL_GPIO_Init+0x1d0>)
 8004382:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004384:	43ea      	mvns	r2, r5
 8004386:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800438a:	684f      	ldr	r7, [r1, #4]
 800438c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8004390:	d001      	beq.n	8004396 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8004392:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8004396:	4c66      	ldr	r4, [pc, #408]	; (8004530 <HAL_GPIO_Init+0x1d0>)
 8004398:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 800439a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800439c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043a0:	684f      	ldr	r7, [r1, #4]
 80043a2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80043a6:	d001      	beq.n	80043ac <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80043a8:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80043ac:	4c60      	ldr	r4, [pc, #384]	; (8004530 <HAL_GPIO_Init+0x1d0>)
 80043ae:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043b0:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80043b2:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043b6:	684f      	ldr	r7, [r1, #4]
 80043b8:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80043bc:	d001      	beq.n	80043c2 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80043be:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80043c2:	4c5b      	ldr	r4, [pc, #364]	; (8004530 <HAL_GPIO_Init+0x1d0>)
 80043c4:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80043c6:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80043c8:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043ca:	684e      	ldr	r6, [r1, #4]
 80043cc:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80043d0:	d001      	beq.n	80043d6 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80043d2:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80043d6:	4c56      	ldr	r4, [pc, #344]	; (8004530 <HAL_GPIO_Init+0x1d0>)
 80043d8:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80043da:	3301      	adds	r3, #1
 80043dc:	2b0f      	cmp	r3, #15
 80043de:	f200 80a2 	bhi.w	8004526 <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 80043e2:	2201      	movs	r2, #1
 80043e4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043e6:	680c      	ldr	r4, [r1, #0]
 80043e8:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80043ec:	42aa      	cmp	r2, r5
 80043ee:	d1f4      	bne.n	80043da <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043f0:	684c      	ldr	r4, [r1, #4]
 80043f2:	1e66      	subs	r6, r4, #1
 80043f4:	2c11      	cmp	r4, #17
 80043f6:	bf18      	it	ne
 80043f8:	2e01      	cmpne	r6, #1
 80043fa:	d901      	bls.n	8004400 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043fc:	2c12      	cmp	r4, #18
 80043fe:	d112      	bne.n	8004426 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8004400:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004402:	005f      	lsls	r7, r3, #1
 8004404:	2403      	movs	r4, #3
 8004406:	40bc      	lsls	r4, r7
 8004408:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 800440c:	68cc      	ldr	r4, [r1, #12]
 800440e:	40bc      	lsls	r4, r7
 8004410:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8004412:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8004414:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004416:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800441a:	684c      	ldr	r4, [r1, #4]
 800441c:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8004420:	409a      	lsls	r2, r3
 8004422:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8004424:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8004426:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004428:	005f      	lsls	r7, r3, #1
 800442a:	2603      	movs	r6, #3
 800442c:	40be      	lsls	r6, r7
 800442e:	43f6      	mvns	r6, r6
 8004430:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004432:	688c      	ldr	r4, [r1, #8]
 8004434:	40bc      	lsls	r4, r7
 8004436:	4314      	orrs	r4, r2
      GPIOx->PUPDR = temp;
 8004438:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800443a:	684a      	ldr	r2, [r1, #4]
 800443c:	2a12      	cmp	r2, #18
 800443e:	bf18      	it	ne
 8004440:	2a02      	cmpne	r2, #2
 8004442:	d113      	bne.n	800446c <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3];
 8004444:	08dc      	lsrs	r4, r3, #3
 8004446:	3408      	adds	r4, #8
 8004448:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800444c:	f003 0207 	and.w	r2, r3, #7
 8004450:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8004454:	220f      	movs	r2, #15
 8004456:	fa02 f20c 	lsl.w	r2, r2, ip
 800445a:	ea2e 0e02 	bic.w	lr, lr, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800445e:	690a      	ldr	r2, [r1, #16]
 8004460:	fa02 f20c 	lsl.w	r2, r2, ip
 8004464:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 8004468:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
      temp = GPIOx->MODER;
 800446c:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800446e:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004470:	684a      	ldr	r2, [r1, #4]
 8004472:	f002 0203 	and.w	r2, r2, #3
 8004476:	40ba      	lsls	r2, r7
 8004478:	4332      	orrs	r2, r6
      GPIOx->MODER = temp;
 800447a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800447c:	684a      	ldr	r2, [r1, #4]
 800447e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8004482:	d0aa      	beq.n	80043da <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004484:	4a2b      	ldr	r2, [pc, #172]	; (8004534 <HAL_GPIO_Init+0x1d4>)
 8004486:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8004488:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800448c:	6454      	str	r4, [r2, #68]	; 0x44
 800448e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004490:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004494:	9201      	str	r2, [sp, #4]
 8004496:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8004498:	089c      	lsrs	r4, r3, #2
 800449a:	1ca6      	adds	r6, r4, #2
 800449c:	4a23      	ldr	r2, [pc, #140]	; (800452c <HAL_GPIO_Init+0x1cc>)
 800449e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80044a2:	f003 0203 	and.w	r2, r3, #3
 80044a6:	0096      	lsls	r6, r2, #2
 80044a8:	220f      	movs	r2, #15
 80044aa:	40b2      	lsls	r2, r6
 80044ac:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80044b0:	4a21      	ldr	r2, [pc, #132]	; (8004538 <HAL_GPIO_Init+0x1d8>)
 80044b2:	4290      	cmp	r0, r2
 80044b4:	f43f af5d 	beq.w	8004372 <HAL_GPIO_Init+0x12>
 80044b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044bc:	4290      	cmp	r0, r2
 80044be:	d022      	beq.n	8004506 <HAL_GPIO_Init+0x1a6>
 80044c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044c4:	4290      	cmp	r0, r2
 80044c6:	d020      	beq.n	800450a <HAL_GPIO_Init+0x1aa>
 80044c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044cc:	4290      	cmp	r0, r2
 80044ce:	d01e      	beq.n	800450e <HAL_GPIO_Init+0x1ae>
 80044d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044d4:	4290      	cmp	r0, r2
 80044d6:	d01c      	beq.n	8004512 <HAL_GPIO_Init+0x1b2>
 80044d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044dc:	4290      	cmp	r0, r2
 80044de:	d01a      	beq.n	8004516 <HAL_GPIO_Init+0x1b6>
 80044e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044e4:	4290      	cmp	r0, r2
 80044e6:	d018      	beq.n	800451a <HAL_GPIO_Init+0x1ba>
 80044e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044ec:	4290      	cmp	r0, r2
 80044ee:	d016      	beq.n	800451e <HAL_GPIO_Init+0x1be>
 80044f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044f4:	4290      	cmp	r0, r2
 80044f6:	d014      	beq.n	8004522 <HAL_GPIO_Init+0x1c2>
 80044f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044fc:	4290      	cmp	r0, r2
 80044fe:	f43f af36 	beq.w	800436e <HAL_GPIO_Init+0xe>
 8004502:	220a      	movs	r2, #10
 8004504:	e736      	b.n	8004374 <HAL_GPIO_Init+0x14>
 8004506:	2201      	movs	r2, #1
 8004508:	e734      	b.n	8004374 <HAL_GPIO_Init+0x14>
 800450a:	2202      	movs	r2, #2
 800450c:	e732      	b.n	8004374 <HAL_GPIO_Init+0x14>
 800450e:	2203      	movs	r2, #3
 8004510:	e730      	b.n	8004374 <HAL_GPIO_Init+0x14>
 8004512:	2204      	movs	r2, #4
 8004514:	e72e      	b.n	8004374 <HAL_GPIO_Init+0x14>
 8004516:	2205      	movs	r2, #5
 8004518:	e72c      	b.n	8004374 <HAL_GPIO_Init+0x14>
 800451a:	2206      	movs	r2, #6
 800451c:	e72a      	b.n	8004374 <HAL_GPIO_Init+0x14>
 800451e:	2207      	movs	r2, #7
 8004520:	e728      	b.n	8004374 <HAL_GPIO_Init+0x14>
 8004522:	2208      	movs	r2, #8
 8004524:	e726      	b.n	8004374 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8004526:	b003      	add	sp, #12
 8004528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800452a:	4770      	bx	lr
 800452c:	40013800 	.word	0x40013800
 8004530:	40013c00 	.word	0x40013c00
 8004534:	40023800 	.word	0x40023800
 8004538:	40020000 	.word	0x40020000

0800453c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800453c:	b912      	cbnz	r2, 8004544 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800453e:	0409      	lsls	r1, r1, #16
 8004540:	6181      	str	r1, [r0, #24]
  }
}
 8004542:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8004544:	6181      	str	r1, [r0, #24]
 8004546:	4770      	bx	lr

08004548 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004548:	2800      	cmp	r0, #0
 800454a:	d057      	beq.n	80045fc <HAL_I2C_Init+0xb4>
{
 800454c:	b510      	push	{r4, lr}
 800454e:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004550:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004554:	2b00      	cmp	r3, #0
 8004556:	d041      	beq.n	80045dc <HAL_I2C_Init+0x94>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004558:	2324      	movs	r3, #36	; 0x24
 800455a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800455e:	6822      	ldr	r2, [r4, #0]
 8004560:	6813      	ldr	r3, [r2, #0]
 8004562:	f023 0301 	bic.w	r3, r3, #1
 8004566:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004568:	6863      	ldr	r3, [r4, #4]
 800456a:	6822      	ldr	r2, [r4, #0]
 800456c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004570:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004572:	6822      	ldr	r2, [r4, #0]
 8004574:	6893      	ldr	r3, [r2, #8]
 8004576:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800457a:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800457c:	68e3      	ldr	r3, [r4, #12]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d031      	beq.n	80045e6 <HAL_I2C_Init+0x9e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004582:	68a3      	ldr	r3, [r4, #8]
 8004584:	6822      	ldr	r2, [r4, #0]
 8004586:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800458a:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800458c:	68e3      	ldr	r3, [r4, #12]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d02f      	beq.n	80045f2 <HAL_I2C_Init+0xaa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004592:	6822      	ldr	r2, [r4, #0]
 8004594:	6851      	ldr	r1, [r2, #4]
 8004596:	4b1a      	ldr	r3, [pc, #104]	; (8004600 <HAL_I2C_Init+0xb8>)
 8004598:	430b      	orrs	r3, r1
 800459a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800459c:	6822      	ldr	r2, [r4, #0]
 800459e:	68d3      	ldr	r3, [r2, #12]
 80045a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045a4:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80045a6:	6923      	ldr	r3, [r4, #16]
 80045a8:	6962      	ldr	r2, [r4, #20]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	69a1      	ldr	r1, [r4, #24]
 80045ae:	6822      	ldr	r2, [r4, #0]
 80045b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80045b4:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045b6:	69e3      	ldr	r3, [r4, #28]
 80045b8:	6a21      	ldr	r1, [r4, #32]
 80045ba:	6822      	ldr	r2, [r4, #0]
 80045bc:	430b      	orrs	r3, r1
 80045be:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045c0:	6822      	ldr	r2, [r4, #0]
 80045c2:	6813      	ldr	r3, [r2, #0]
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045ca:	2000      	movs	r0, #0
 80045cc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045ce:	2320      	movs	r3, #32
 80045d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045d4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 80045da:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80045dc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80045e0:	f7ff fb46 	bl	8003c70 <HAL_I2C_MspInit>
 80045e4:	e7b8      	b.n	8004558 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045e6:	68a3      	ldr	r3, [r4, #8]
 80045e8:	6822      	ldr	r2, [r4, #0]
 80045ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ee:	6093      	str	r3, [r2, #8]
 80045f0:	e7cc      	b.n	800458c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045f8:	605a      	str	r2, [r3, #4]
 80045fa:	e7ca      	b.n	8004592 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80045fc:	2001      	movs	r0, #1
}
 80045fe:	4770      	bx	lr
 8004600:	02008000 	.word	0x02008000

08004604 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004604:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b20      	cmp	r3, #32
 800460c:	d124      	bne.n	8004658 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800460e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004612:	2b01      	cmp	r3, #1
 8004614:	d022      	beq.n	800465c <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8004616:	2301      	movs	r3, #1
 8004618:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800461c:	2324      	movs	r3, #36	; 0x24
 800461e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004622:	6802      	ldr	r2, [r0, #0]
 8004624:	6813      	ldr	r3, [r2, #0]
 8004626:	f023 0301 	bic.w	r3, r3, #1
 800462a:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800462c:	6802      	ldr	r2, [r0, #0]
 800462e:	6813      	ldr	r3, [r2, #0]
 8004630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004634:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004636:	6802      	ldr	r2, [r0, #0]
 8004638:	6813      	ldr	r3, [r2, #0]
 800463a:	4319      	orrs	r1, r3
 800463c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800463e:	6802      	ldr	r2, [r0, #0]
 8004640:	6813      	ldr	r3, [r2, #0]
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004648:	2320      	movs	r3, #32
 800464a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800464e:	2300      	movs	r3, #0
 8004650:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004654:	4618      	mov	r0, r3
 8004656:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004658:	2002      	movs	r0, #2
 800465a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800465c:	2002      	movs	r0, #2
  }
}
 800465e:	4770      	bx	lr

08004660 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004660:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b20      	cmp	r3, #32
 8004668:	d122      	bne.n	80046b0 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800466a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800466e:	2b01      	cmp	r3, #1
 8004670:	d020      	beq.n	80046b4 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8004672:	2301      	movs	r3, #1
 8004674:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004678:	2324      	movs	r3, #36	; 0x24
 800467a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800467e:	6802      	ldr	r2, [r0, #0]
 8004680:	6813      	ldr	r3, [r2, #0]
 8004682:	f023 0301 	bic.w	r3, r3, #1
 8004686:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004688:	6802      	ldr	r2, [r0, #0]
 800468a:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800468c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004690:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004694:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004696:	6802      	ldr	r2, [r0, #0]
 8004698:	6813      	ldr	r3, [r2, #0]
 800469a:	f043 0301 	orr.w	r3, r3, #1
 800469e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046a0:	2320      	movs	r3, #32
 80046a2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a6:	2300      	movs	r3, #0
 80046a8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80046ac:	4618      	mov	r0, r3
 80046ae:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80046b0:	2002      	movs	r0, #2
 80046b2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80046b4:	2002      	movs	r0, #2
  }
}
 80046b6:	4770      	bx	lr

080046b8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80046b8:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80046ba:	684d      	ldr	r5, [r1, #4]
 80046bc:	6804      	ldr	r4, [r0, #0]
 80046be:	68e3      	ldr	r3, [r4, #12]
 80046c0:	f3c3 430b 	ubfx	r3, r3, #16, #12
 80046c4:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80046c6:	01d2      	lsls	r2, r2, #7
 80046c8:	4414      	add	r4, r2
 80046ca:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80046ce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80046d2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80046d6:	680b      	ldr	r3, [r1, #0]
 80046d8:	6804      	ldr	r4, [r0, #0]
 80046da:	68e6      	ldr	r6, [r4, #12]
 80046dc:	f3c6 460b 	ubfx	r6, r6, #16, #12
 80046e0:	4433      	add	r3, r6
 80046e2:	3301      	adds	r3, #1
 80046e4:	4414      	add	r4, r2
 80046e6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80046ea:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80046ee:	68cd      	ldr	r5, [r1, #12]
 80046f0:	6804      	ldr	r4, [r0, #0]
 80046f2:	68e3      	ldr	r3, [r4, #12]
 80046f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046f8:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80046fa:	4414      	add	r4, r2
 80046fc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004700:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004704:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004708:	688b      	ldr	r3, [r1, #8]
 800470a:	6804      	ldr	r4, [r0, #0]
 800470c:	68e6      	ldr	r6, [r4, #12]
 800470e:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8004712:	4433      	add	r3, r6
 8004714:	3301      	adds	r3, #1
 8004716:	4414      	add	r4, r2
 8004718:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800471c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004720:	6803      	ldr	r3, [r0, #0]
 8004722:	4413      	add	r3, r2
 8004724:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8004728:	f024 0407 	bic.w	r4, r4, #7
 800472c:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004730:	6803      	ldr	r3, [r0, #0]
 8004732:	4413      	add	r3, r2
 8004734:	690c      	ldr	r4, [r1, #16]
 8004736:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800473a:	f891 c031 	ldrb.w	ip, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800473e:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004742:	698e      	ldr	r6, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004744:	6805      	ldr	r5, [r0, #0]
 8004746:	4415      	add	r5, r2
 8004748:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800474c:	2400      	movs	r4, #0
 800474e:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004752:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8004756:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800475a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800475e:	6805      	ldr	r5, [r0, #0]
 8004760:	4415      	add	r5, r2
 8004762:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8004766:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800476a:	6803      	ldr	r3, [r0, #0]
 800476c:	4413      	add	r3, r2
 800476e:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8004772:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8004776:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800477a:	6803      	ldr	r3, [r0, #0]
 800477c:	4413      	add	r3, r2
 800477e:	694d      	ldr	r5, [r1, #20]
 8004780:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004784:	6803      	ldr	r3, [r0, #0]
 8004786:	4413      	add	r3, r2
 8004788:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 800478c:	4d2d      	ldr	r5, [pc, #180]	; (8004844 <LTDC_SetConfig+0x18c>)
 800478e:	4035      	ands	r5, r6
 8004790:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004794:	69cd      	ldr	r5, [r1, #28]
 8004796:	6a0e      	ldr	r6, [r1, #32]
 8004798:	6803      	ldr	r3, [r0, #0]
 800479a:	4413      	add	r3, r2
 800479c:	4335      	orrs	r5, r6
 800479e:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80047a2:	6803      	ldr	r3, [r0, #0]
 80047a4:	4413      	add	r3, r2
 80047a6:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 80047aa:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80047ae:	6803      	ldr	r3, [r0, #0]
 80047b0:	4413      	add	r3, r2
 80047b2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80047b4:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80047b8:	690b      	ldr	r3, [r1, #16]
 80047ba:	b16b      	cbz	r3, 80047d8 <LTDC_SetConfig+0x120>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d03a      	beq.n	8004836 <LTDC_SetConfig+0x17e>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	bf18      	it	ne
 80047c4:	2b04      	cmpne	r3, #4
 80047c6:	d038      	beq.n	800483a <LTDC_SetConfig+0x182>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80047c8:	2b03      	cmp	r3, #3
 80047ca:	d038      	beq.n	800483e <LTDC_SetConfig+0x186>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80047cc:	2b07      	cmp	r3, #7
 80047ce:	d001      	beq.n	80047d4 <LTDC_SetConfig+0x11c>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e002      	b.n	80047da <LTDC_SetConfig+0x122>
    tmp = 2U;
 80047d4:	2302      	movs	r3, #2
 80047d6:	e000      	b.n	80047da <LTDC_SetConfig+0x122>
    tmp = 4U;
 80047d8:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80047da:	6804      	ldr	r4, [r0, #0]
 80047dc:	4414      	add	r4, r2
 80047de:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 80047e2:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 80047e6:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80047ea:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80047ec:	fb03 f504 	mul.w	r5, r3, r4
 80047f0:	684c      	ldr	r4, [r1, #4]
 80047f2:	680e      	ldr	r6, [r1, #0]
 80047f4:	1ba4      	subs	r4, r4, r6
 80047f6:	fb03 f304 	mul.w	r3, r3, r4
 80047fa:	3303      	adds	r3, #3
 80047fc:	6804      	ldr	r4, [r0, #0]
 80047fe:	4414      	add	r4, r2
 8004800:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8004804:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004808:	6803      	ldr	r3, [r0, #0]
 800480a:	4413      	add	r3, r2
 800480c:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 8004810:	4c0d      	ldr	r4, [pc, #52]	; (8004848 <LTDC_SetConfig+0x190>)
 8004812:	402c      	ands	r4, r5
 8004814:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004818:	6803      	ldr	r3, [r0, #0]
 800481a:	4413      	add	r3, r2
 800481c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800481e:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004822:	6803      	ldr	r3, [r0, #0]
 8004824:	441a      	add	r2, r3
 8004826:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
 8004832:	bcf0      	pop	{r4, r5, r6, r7}
 8004834:	4770      	bx	lr
    tmp = 3U;
 8004836:	2303      	movs	r3, #3
 8004838:	e7cf      	b.n	80047da <LTDC_SetConfig+0x122>
    tmp = 2U;
 800483a:	2302      	movs	r3, #2
 800483c:	e7cd      	b.n	80047da <LTDC_SetConfig+0x122>
 800483e:	2302      	movs	r3, #2
 8004840:	e7cb      	b.n	80047da <LTDC_SetConfig+0x122>
 8004842:	bf00      	nop
 8004844:	fffff8f8 	.word	0xfffff8f8
 8004848:	fffff800 	.word	0xfffff800

0800484c <HAL_LTDC_Init>:
  if (hltdc == NULL)
 800484c:	2800      	cmp	r0, #0
 800484e:	d072      	beq.n	8004936 <HAL_LTDC_Init+0xea>
{
 8004850:	b538      	push	{r3, r4, r5, lr}
 8004852:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004854:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d067      	beq.n	800492c <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800485c:	2302      	movs	r3, #2
 800485e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004862:	6822      	ldr	r2, [r4, #0]
 8004864:	6993      	ldr	r3, [r2, #24]
 8004866:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800486a:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800486c:	6821      	ldr	r1, [r4, #0]
 800486e:	698a      	ldr	r2, [r1, #24]
 8004870:	6863      	ldr	r3, [r4, #4]
 8004872:	68a0      	ldr	r0, [r4, #8]
 8004874:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004876:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004878:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800487a:	6920      	ldr	r0, [r4, #16]
 800487c:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800487e:	4313      	orrs	r3, r2
 8004880:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004882:	6821      	ldr	r1, [r4, #0]
 8004884:	688a      	ldr	r2, [r1, #8]
 8004886:	4b2d      	ldr	r3, [pc, #180]	; (800493c <HAL_LTDC_Init+0xf0>)
 8004888:	401a      	ands	r2, r3
 800488a:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800488c:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800488e:	6820      	ldr	r0, [r4, #0]
 8004890:	6882      	ldr	r2, [r0, #8]
 8004892:	69a1      	ldr	r1, [r4, #24]
 8004894:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8004898:	430a      	orrs	r2, r1
 800489a:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800489c:	6821      	ldr	r1, [r4, #0]
 800489e:	68ca      	ldr	r2, [r1, #12]
 80048a0:	401a      	ands	r2, r3
 80048a2:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80048a4:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80048a6:	6820      	ldr	r0, [r4, #0]
 80048a8:	68c2      	ldr	r2, [r0, #12]
 80048aa:	6a21      	ldr	r1, [r4, #32]
 80048ac:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80048b0:	430a      	orrs	r2, r1
 80048b2:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80048b4:	6821      	ldr	r1, [r4, #0]
 80048b6:	690a      	ldr	r2, [r1, #16]
 80048b8:	401a      	ands	r2, r3
 80048ba:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80048bc:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80048be:	6820      	ldr	r0, [r4, #0]
 80048c0:	6902      	ldr	r2, [r0, #16]
 80048c2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80048c4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80048c8:	430a      	orrs	r2, r1
 80048ca:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80048cc:	6821      	ldr	r1, [r4, #0]
 80048ce:	694a      	ldr	r2, [r1, #20]
 80048d0:	4013      	ands	r3, r2
 80048d2:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80048d4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80048d6:	6821      	ldr	r1, [r4, #0]
 80048d8:	694b      	ldr	r3, [r1, #20]
 80048da:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80048dc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80048e0:	4313      	orrs	r3, r2
 80048e2:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80048e4:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80048e8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80048ec:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80048ee:	6821      	ldr	r1, [r4, #0]
 80048f0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80048f2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80048f6:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80048f8:	6821      	ldr	r1, [r4, #0]
 80048fa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80048fc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004900:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8004904:	4303      	orrs	r3, r0
 8004906:	4313      	orrs	r3, r2
 8004908:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800490a:	6822      	ldr	r2, [r4, #0]
 800490c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800490e:	f043 0306 	orr.w	r3, r3, #6
 8004912:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8004914:	6822      	ldr	r2, [r4, #0]
 8004916:	6993      	ldr	r3, [r2, #24]
 8004918:	f043 0301 	orr.w	r3, r3, #1
 800491c:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800491e:	2000      	movs	r0, #0
 8004920:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8004924:	2301      	movs	r3, #1
 8004926:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800492a:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800492c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8004930:	f7ff f9d6 	bl	8003ce0 <HAL_LTDC_MspInit>
 8004934:	e792      	b.n	800485c <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8004936:	2001      	movs	r0, #1
}
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	f000f800 	.word	0xf000f800

08004940 <HAL_LTDC_ErrorCallback>:
}
 8004940:	4770      	bx	lr

08004942 <HAL_LTDC_LineEventCallback>:
}
 8004942:	4770      	bx	lr

08004944 <HAL_LTDC_ReloadEventCallback>:
}
 8004944:	4770      	bx	lr

08004946 <HAL_LTDC_IRQHandler>:
{
 8004946:	b570      	push	{r4, r5, r6, lr}
 8004948:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800494a:	6803      	ldr	r3, [r0, #0]
 800494c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800494e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004950:	f015 0f04 	tst.w	r5, #4
 8004954:	d002      	beq.n	800495c <HAL_LTDC_IRQHandler+0x16>
 8004956:	f016 0f04 	tst.w	r6, #4
 800495a:	d112      	bne.n	8004982 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800495c:	f015 0f02 	tst.w	r5, #2
 8004960:	d002      	beq.n	8004968 <HAL_LTDC_IRQHandler+0x22>
 8004962:	f016 0f02 	tst.w	r6, #2
 8004966:	d121      	bne.n	80049ac <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004968:	f015 0f01 	tst.w	r5, #1
 800496c:	d002      	beq.n	8004974 <HAL_LTDC_IRQHandler+0x2e>
 800496e:	f016 0f01 	tst.w	r6, #1
 8004972:	d132      	bne.n	80049da <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004974:	f015 0f08 	tst.w	r5, #8
 8004978:	d002      	beq.n	8004980 <HAL_LTDC_IRQHandler+0x3a>
 800497a:	f016 0f08 	tst.w	r6, #8
 800497e:	d13d      	bne.n	80049fc <HAL_LTDC_IRQHandler+0xb6>
}
 8004980:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004984:	f022 0204 	bic.w	r2, r2, #4
 8004988:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800498a:	6803      	ldr	r3, [r0, #0]
 800498c:	2204      	movs	r2, #4
 800498e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004990:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8004994:	f043 0301 	orr.w	r3, r3, #1
 8004998:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800499c:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80049a0:	2300      	movs	r3, #0
 80049a2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80049a6:	f7ff ffcb 	bl	8004940 <HAL_LTDC_ErrorCallback>
 80049aa:	e7d7      	b.n	800495c <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80049ac:	6822      	ldr	r2, [r4, #0]
 80049ae:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80049b0:	f023 0302 	bic.w	r3, r3, #2
 80049b4:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	2202      	movs	r2, #2
 80049ba:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80049bc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80049c6:	2304      	movs	r3, #4
 80049c8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80049cc:	2300      	movs	r3, #0
 80049ce:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80049d2:	4620      	mov	r0, r4
 80049d4:	f7ff ffb4 	bl	8004940 <HAL_LTDC_ErrorCallback>
 80049d8:	e7c6      	b.n	8004968 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80049da:	6822      	ldr	r2, [r4, #0]
 80049dc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80049de:	f023 0301 	bic.w	r3, r3, #1
 80049e2:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80049e4:	6822      	ldr	r2, [r4, #0]
 80049e6:	2301      	movs	r3, #1
 80049e8:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80049ea:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80049ee:	2300      	movs	r3, #0
 80049f0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80049f4:	4620      	mov	r0, r4
 80049f6:	f7ff ffa4 	bl	8004942 <HAL_LTDC_LineEventCallback>
 80049fa:	e7bb      	b.n	8004974 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80049fc:	6822      	ldr	r2, [r4, #0]
 80049fe:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004a00:	f023 0308 	bic.w	r3, r3, #8
 8004a04:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	2208      	movs	r2, #8
 8004a0a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004a12:	2300      	movs	r3, #0
 8004a14:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004a18:	4620      	mov	r0, r4
 8004a1a:	f7ff ff93 	bl	8004944 <HAL_LTDC_ReloadEventCallback>
}
 8004a1e:	e7af      	b.n	8004980 <HAL_LTDC_IRQHandler+0x3a>

08004a20 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8004a20:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d027      	beq.n	8004a78 <HAL_LTDC_ConfigLayer+0x58>
{
 8004a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a2c:	4694      	mov	ip, r2
 8004a2e:	460f      	mov	r7, r1
 8004a30:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 8004a32:	f04f 0801 	mov.w	r8, #1
 8004a36:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004a40:	2434      	movs	r4, #52	; 0x34
 8004a42:	fb04 0402 	mla	r4, r4, r2, r0
 8004a46:	3438      	adds	r4, #56	; 0x38
 8004a48:	460d      	mov	r5, r1
 8004a4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a56:	682b      	ldr	r3, [r5, #0]
 8004a58:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004a5a:	4662      	mov	r2, ip
 8004a5c:	4639      	mov	r1, r7
 8004a5e:	4630      	mov	r0, r6
 8004a60:	f7ff fe2a 	bl	80046b8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004a64:	6833      	ldr	r3, [r6, #0]
 8004a66:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004a6a:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004a6e:	2000      	movs	r0, #0
 8004a70:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8004a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8004a78:	2002      	movs	r0, #2
}
 8004a7a:	4770      	bx	lr

08004a7c <HAL_LTDC_SetAddress>:
{
 8004a7c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hltdc);
 8004a7e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d019      	beq.n	8004aba <HAL_LTDC_SetAddress+0x3e>
 8004a86:	4604      	mov	r4, r0
 8004a88:	2501      	movs	r5, #1
 8004a8a:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004a8e:	2302      	movs	r3, #2
 8004a90:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8004a94:	2334      	movs	r3, #52	; 0x34
 8004a96:	fb03 f302 	mul.w	r3, r3, r2
 8004a9a:	f103 0038 	add.w	r0, r3, #56	; 0x38
  pLayerCfg->FBStartAdress = Address;
 8004a9e:	4423      	add	r3, r4
 8004aa0:	65d9      	str	r1, [r3, #92]	; 0x5c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004aa2:	1821      	adds	r1, r4, r0
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	f7ff fe07 	bl	80046b8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8004aae:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8004ab8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hltdc);
 8004aba:	2002      	movs	r0, #2
 8004abc:	e7fc      	b.n	8004ab8 <HAL_LTDC_SetAddress+0x3c>
	...

08004ac0 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ac0:	4a02      	ldr	r2, [pc, #8]	; (8004acc <HAL_PWR_EnableBkUpAccess+0xc>)
 8004ac2:	6813      	ldr	r3, [r2, #0]
 8004ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac8:	6013      	str	r3, [r2, #0]
}
 8004aca:	4770      	bx	lr
 8004acc:	40007000 	.word	0x40007000

08004ad0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004ad0:	b510      	push	{r4, lr}
 8004ad2:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004ad4:	4b1b      	ldr	r3, [pc, #108]	; (8004b44 <HAL_PWREx_EnableOverDrive+0x74>)
 8004ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ad8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004adc:	641a      	str	r2, [r3, #64]	; 0x40
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae4:	9301      	str	r3, [sp, #4]
 8004ae6:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004ae8:	4a17      	ldr	r2, [pc, #92]	; (8004b48 <HAL_PWREx_EnableOverDrive+0x78>)
 8004aea:	6813      	ldr	r3, [r2, #0]
 8004aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004af2:	f7ff fa4d 	bl	8003f90 <HAL_GetTick>
 8004af6:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004af8:	4b13      	ldr	r3, [pc, #76]	; (8004b48 <HAL_PWREx_EnableOverDrive+0x78>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004b00:	d108      	bne.n	8004b14 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b02:	f7ff fa45 	bl	8003f90 <HAL_GetTick>
 8004b06:	1b00      	subs	r0, r0, r4
 8004b08:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004b0c:	d9f4      	bls.n	8004af8 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8004b0e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8004b10:	b002      	add	sp, #8
 8004b12:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004b14:	4a0c      	ldr	r2, [pc, #48]	; (8004b48 <HAL_PWREx_EnableOverDrive+0x78>)
 8004b16:	6813      	ldr	r3, [r2, #0]
 8004b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b1c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8004b1e:	f7ff fa37 	bl	8003f90 <HAL_GetTick>
 8004b22:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b24:	4b08      	ldr	r3, [pc, #32]	; (8004b48 <HAL_PWREx_EnableOverDrive+0x78>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b2c:	d107      	bne.n	8004b3e <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b2e:	f7ff fa2f 	bl	8003f90 <HAL_GetTick>
 8004b32:	1b00      	subs	r0, r0, r4
 8004b34:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004b38:	d9f4      	bls.n	8004b24 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8004b3a:	2003      	movs	r0, #3
 8004b3c:	e7e8      	b.n	8004b10 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8004b3e:	2000      	movs	r0, #0
 8004b40:	e7e6      	b.n	8004b10 <HAL_PWREx_EnableOverDrive+0x40>
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800
 8004b48:	40007000 	.word	0x40007000

08004b4c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	f000 8209 	beq.w	8004f64 <HAL_RCC_OscConfig+0x418>
{
 8004b52:	b570      	push	{r4, r5, r6, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b58:	6803      	ldr	r3, [r0, #0]
 8004b5a:	f013 0f01 	tst.w	r3, #1
 8004b5e:	d029      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b60:	4ba2      	ldr	r3, [pc, #648]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 030c 	and.w	r3, r3, #12
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d01a      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b6c:	4b9f      	ldr	r3, [pc, #636]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 030c 	and.w	r3, r3, #12
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d00f      	beq.n	8004b98 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b78:	6863      	ldr	r3, [r4, #4]
 8004b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b7e:	d040      	beq.n	8004c02 <HAL_RCC_OscConfig+0xb6>
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d154      	bne.n	8004c2e <HAL_RCC_OscConfig+0xe2>
 8004b84:	4b99      	ldr	r3, [pc, #612]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	e039      	b.n	8004c0c <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b98:	4b94      	ldr	r3, [pc, #592]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004ba0:	d0ea      	beq.n	8004b78 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba2:	4b92      	ldr	r3, [pc, #584]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004baa:	d003      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x68>
 8004bac:	6863      	ldr	r3, [r4, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 81da 	beq.w	8004f68 <HAL_RCC_OscConfig+0x41c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	f013 0f02 	tst.w	r3, #2
 8004bba:	d075      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bbc:	4b8b      	ldr	r3, [pc, #556]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f013 0f0c 	tst.w	r3, #12
 8004bc4:	d05e      	beq.n	8004c84 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bc6:	4b89      	ldr	r3, [pc, #548]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 030c 	and.w	r3, r3, #12
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d053      	beq.n	8004c7a <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bd2:	68e3      	ldr	r3, [r4, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 808a 	beq.w	8004cee <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bda:	4a84      	ldr	r2, [pc, #528]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004bdc:	6813      	ldr	r3, [r2, #0]
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be4:	f7ff f9d4 	bl	8003f90 <HAL_GetTick>
 8004be8:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bea:	4b80      	ldr	r3, [pc, #512]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f013 0f02 	tst.w	r3, #2
 8004bf2:	d173      	bne.n	8004cdc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf4:	f7ff f9cc 	bl	8003f90 <HAL_GetTick>
 8004bf8:	1b40      	subs	r0, r0, r5
 8004bfa:	2802      	cmp	r0, #2
 8004bfc:	d9f5      	bls.n	8004bea <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8004bfe:	2003      	movs	r0, #3
 8004c00:	e1b5      	b.n	8004f6e <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c02:	4a7a      	ldr	r2, [pc, #488]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004c04:	6813      	ldr	r3, [r2, #0]
 8004c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c0a:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c0c:	6863      	ldr	r3, [r4, #4]
 8004c0e:	b32b      	cbz	r3, 8004c5c <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8004c10:	f7ff f9be 	bl	8003f90 <HAL_GetTick>
 8004c14:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c16:	4b75      	ldr	r3, [pc, #468]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004c1e:	d1c9      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c20:	f7ff f9b6 	bl	8003f90 <HAL_GetTick>
 8004c24:	1b40      	subs	r0, r0, r5
 8004c26:	2864      	cmp	r0, #100	; 0x64
 8004c28:	d9f5      	bls.n	8004c16 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8004c2a:	2003      	movs	r0, #3
 8004c2c:	e19f      	b.n	8004f6e <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c32:	d009      	beq.n	8004c48 <HAL_RCC_OscConfig+0xfc>
 8004c34:	4b6d      	ldr	r3, [pc, #436]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	e7e1      	b.n	8004c0c <HAL_RCC_OscConfig+0xc0>
 8004c48:	4b68      	ldr	r3, [pc, #416]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	e7d7      	b.n	8004c0c <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8004c5c:	f7ff f998 	bl	8003f90 <HAL_GetTick>
 8004c60:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c62:	4b62      	ldr	r3, [pc, #392]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004c6a:	d0a3      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c6c:	f7ff f990 	bl	8003f90 <HAL_GetTick>
 8004c70:	1b40      	subs	r0, r0, r5
 8004c72:	2864      	cmp	r0, #100	; 0x64
 8004c74:	d9f5      	bls.n	8004c62 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8004c76:	2003      	movs	r0, #3
 8004c78:	e179      	b.n	8004f6e <HAL_RCC_OscConfig+0x422>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c7a:	4b5c      	ldr	r3, [pc, #368]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004c82:	d1a6      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c84:	4b59      	ldr	r3, [pc, #356]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f013 0f02 	tst.w	r3, #2
 8004c8c:	d004      	beq.n	8004c98 <HAL_RCC_OscConfig+0x14c>
 8004c8e:	68e3      	ldr	r3, [r4, #12]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d001      	beq.n	8004c98 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8004c94:	2001      	movs	r0, #1
 8004c96:	e16a      	b.n	8004f6e <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c98:	4a54      	ldr	r2, [pc, #336]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004c9a:	6813      	ldr	r3, [r2, #0]
 8004c9c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004ca0:	6921      	ldr	r1, [r4, #16]
 8004ca2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004ca6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	f013 0f08 	tst.w	r3, #8
 8004cae:	d046      	beq.n	8004d3e <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cb0:	6963      	ldr	r3, [r4, #20]
 8004cb2:	b383      	cbz	r3, 8004d16 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cb4:	4a4d      	ldr	r2, [pc, #308]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004cb6:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004cb8:	f043 0301 	orr.w	r3, r3, #1
 8004cbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cbe:	f7ff f967 	bl	8003f90 <HAL_GetTick>
 8004cc2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc4:	4b49      	ldr	r3, [pc, #292]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc8:	f013 0f02 	tst.w	r3, #2
 8004ccc:	d137      	bne.n	8004d3e <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cce:	f7ff f95f 	bl	8003f90 <HAL_GetTick>
 8004cd2:	1b40      	subs	r0, r0, r5
 8004cd4:	2802      	cmp	r0, #2
 8004cd6:	d9f5      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8004cd8:	2003      	movs	r0, #3
 8004cda:	e148      	b.n	8004f6e <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cdc:	4a43      	ldr	r2, [pc, #268]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004cde:	6813      	ldr	r3, [r2, #0]
 8004ce0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004ce4:	6921      	ldr	r1, [r4, #16]
 8004ce6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	e7dc      	b.n	8004ca8 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8004cee:	4a3f      	ldr	r2, [pc, #252]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004cf0:	6813      	ldr	r3, [r2, #0]
 8004cf2:	f023 0301 	bic.w	r3, r3, #1
 8004cf6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004cf8:	f7ff f94a 	bl	8003f90 <HAL_GetTick>
 8004cfc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cfe:	4b3b      	ldr	r3, [pc, #236]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f013 0f02 	tst.w	r3, #2
 8004d06:	d0cf      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x15c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d08:	f7ff f942 	bl	8003f90 <HAL_GetTick>
 8004d0c:	1b40      	subs	r0, r0, r5
 8004d0e:	2802      	cmp	r0, #2
 8004d10:	d9f5      	bls.n	8004cfe <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8004d12:	2003      	movs	r0, #3
 8004d14:	e12b      	b.n	8004f6e <HAL_RCC_OscConfig+0x422>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d16:	4a35      	ldr	r2, [pc, #212]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004d18:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004d1a:	f023 0301 	bic.w	r3, r3, #1
 8004d1e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d20:	f7ff f936 	bl	8003f90 <HAL_GetTick>
 8004d24:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d26:	4b31      	ldr	r3, [pc, #196]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d2a:	f013 0f02 	tst.w	r3, #2
 8004d2e:	d006      	beq.n	8004d3e <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d30:	f7ff f92e 	bl	8003f90 <HAL_GetTick>
 8004d34:	1b40      	subs	r0, r0, r5
 8004d36:	2802      	cmp	r0, #2
 8004d38:	d9f5      	bls.n	8004d26 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 8004d3a:	2003      	movs	r0, #3
 8004d3c:	e117      	b.n	8004f6e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	f013 0f04 	tst.w	r3, #4
 8004d44:	d07e      	beq.n	8004e44 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d46:	4b29      	ldr	r3, [pc, #164]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004d4e:	d11e      	bne.n	8004d8e <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d50:	4b26      	ldr	r3, [pc, #152]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d58:	641a      	str	r2, [r3, #64]	; 0x40
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d60:	9301      	str	r3, [sp, #4]
 8004d62:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004d64:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d66:	4b22      	ldr	r3, [pc, #136]	; (8004df0 <HAL_RCC_OscConfig+0x2a4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004d6e:	d010      	beq.n	8004d92 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d70:	68a3      	ldr	r3, [r4, #8]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d021      	beq.n	8004dba <HAL_RCC_OscConfig+0x26e>
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d13c      	bne.n	8004df4 <HAL_RCC_OscConfig+0x2a8>
 8004d7a:	4b1c      	ldr	r3, [pc, #112]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004d7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d7e:	f022 0201 	bic.w	r2, r2, #1
 8004d82:	671a      	str	r2, [r3, #112]	; 0x70
 8004d84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d86:	f022 0204 	bic.w	r2, r2, #4
 8004d8a:	671a      	str	r2, [r3, #112]	; 0x70
 8004d8c:	e01a      	b.n	8004dc4 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 8004d8e:	2500      	movs	r5, #0
 8004d90:	e7e9      	b.n	8004d66 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 8004d92:	4a17      	ldr	r2, [pc, #92]	; (8004df0 <HAL_RCC_OscConfig+0x2a4>)
 8004d94:	6813      	ldr	r3, [r2, #0]
 8004d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d9a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004d9c:	f7ff f8f8 	bl	8003f90 <HAL_GetTick>
 8004da0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004da2:	4b13      	ldr	r3, [pc, #76]	; (8004df0 <HAL_RCC_OscConfig+0x2a4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004daa:	d1e1      	bne.n	8004d70 <HAL_RCC_OscConfig+0x224>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dac:	f7ff f8f0 	bl	8003f90 <HAL_GetTick>
 8004db0:	1b80      	subs	r0, r0, r6
 8004db2:	2864      	cmp	r0, #100	; 0x64
 8004db4:	d9f5      	bls.n	8004da2 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8004db6:	2003      	movs	r0, #3
 8004db8:	e0d9      	b.n	8004f6e <HAL_RCC_OscConfig+0x422>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dba:	4a0c      	ldr	r2, [pc, #48]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004dbc:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dc4:	68a3      	ldr	r3, [r4, #8]
 8004dc6:	b35b      	cbz	r3, 8004e20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc8:	f7ff f8e2 	bl	8003f90 <HAL_GetTick>
 8004dcc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dce:	4b07      	ldr	r3, [pc, #28]	; (8004dec <HAL_RCC_OscConfig+0x2a0>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	f013 0f02 	tst.w	r3, #2
 8004dd6:	d134      	bne.n	8004e42 <HAL_RCC_OscConfig+0x2f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd8:	f7ff f8da 	bl	8003f90 <HAL_GetTick>
 8004ddc:	1b80      	subs	r0, r0, r6
 8004dde:	f241 3388 	movw	r3, #5000	; 0x1388
 8004de2:	4298      	cmp	r0, r3
 8004de4:	d9f3      	bls.n	8004dce <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8004de6:	2003      	movs	r0, #3
 8004de8:	e0c1      	b.n	8004f6e <HAL_RCC_OscConfig+0x422>
 8004dea:	bf00      	nop
 8004dec:	40023800 	.word	0x40023800
 8004df0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004df4:	2b05      	cmp	r3, #5
 8004df6:	d009      	beq.n	8004e0c <HAL_RCC_OscConfig+0x2c0>
 8004df8:	4b60      	ldr	r3, [pc, #384]	; (8004f7c <HAL_RCC_OscConfig+0x430>)
 8004dfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dfc:	f022 0201 	bic.w	r2, r2, #1
 8004e00:	671a      	str	r2, [r3, #112]	; 0x70
 8004e02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e04:	f022 0204 	bic.w	r2, r2, #4
 8004e08:	671a      	str	r2, [r3, #112]	; 0x70
 8004e0a:	e7db      	b.n	8004dc4 <HAL_RCC_OscConfig+0x278>
 8004e0c:	4b5b      	ldr	r3, [pc, #364]	; (8004f7c <HAL_RCC_OscConfig+0x430>)
 8004e0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e10:	f042 0204 	orr.w	r2, r2, #4
 8004e14:	671a      	str	r2, [r3, #112]	; 0x70
 8004e16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e18:	f042 0201 	orr.w	r2, r2, #1
 8004e1c:	671a      	str	r2, [r3, #112]	; 0x70
 8004e1e:	e7d1      	b.n	8004dc4 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e20:	f7ff f8b6 	bl	8003f90 <HAL_GetTick>
 8004e24:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e26:	4b55      	ldr	r3, [pc, #340]	; (8004f7c <HAL_RCC_OscConfig+0x430>)
 8004e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2a:	f013 0f02 	tst.w	r3, #2
 8004e2e:	d008      	beq.n	8004e42 <HAL_RCC_OscConfig+0x2f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e30:	f7ff f8ae 	bl	8003f90 <HAL_GetTick>
 8004e34:	1b80      	subs	r0, r0, r6
 8004e36:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e3a:	4298      	cmp	r0, r3
 8004e3c:	d9f3      	bls.n	8004e26 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 8004e3e:	2003      	movs	r0, #3
 8004e40:	e095      	b.n	8004f6e <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e42:	b9fd      	cbnz	r5, 8004e84 <HAL_RCC_OscConfig+0x338>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e44:	69a3      	ldr	r3, [r4, #24]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 8090 	beq.w	8004f6c <HAL_RCC_OscConfig+0x420>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e4c:	4a4b      	ldr	r2, [pc, #300]	; (8004f7c <HAL_RCC_OscConfig+0x430>)
 8004e4e:	6892      	ldr	r2, [r2, #8]
 8004e50:	f002 020c 	and.w	r2, r2, #12
 8004e54:	2a08      	cmp	r2, #8
 8004e56:	d058      	beq.n	8004f0a <HAL_RCC_OscConfig+0x3be>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d019      	beq.n	8004e90 <HAL_RCC_OscConfig+0x344>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5c:	4a47      	ldr	r2, [pc, #284]	; (8004f7c <HAL_RCC_OscConfig+0x430>)
 8004e5e:	6813      	ldr	r3, [r2, #0]
 8004e60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e66:	f7ff f893 	bl	8003f90 <HAL_GetTick>
 8004e6a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6c:	4b43      	ldr	r3, [pc, #268]	; (8004f7c <HAL_RCC_OscConfig+0x430>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004e74:	d047      	beq.n	8004f06 <HAL_RCC_OscConfig+0x3ba>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e76:	f7ff f88b 	bl	8003f90 <HAL_GetTick>
 8004e7a:	1b00      	subs	r0, r0, r4
 8004e7c:	2802      	cmp	r0, #2
 8004e7e:	d9f5      	bls.n	8004e6c <HAL_RCC_OscConfig+0x320>
          {
            return HAL_TIMEOUT;
 8004e80:	2003      	movs	r0, #3
 8004e82:	e074      	b.n	8004f6e <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e84:	4a3d      	ldr	r2, [pc, #244]	; (8004f7c <HAL_RCC_OscConfig+0x430>)
 8004e86:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e8e:	e7d9      	b.n	8004e44 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8004e90:	4a3a      	ldr	r2, [pc, #232]	; (8004f7c <HAL_RCC_OscConfig+0x430>)
 8004e92:	6813      	ldr	r3, [r2, #0]
 8004e94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e98:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004e9a:	f7ff f879 	bl	8003f90 <HAL_GetTick>
 8004e9e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea0:	4b36      	ldr	r3, [pc, #216]	; (8004f7c <HAL_RCC_OscConfig+0x430>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004ea8:	d006      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x36c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eaa:	f7ff f871 	bl	8003f90 <HAL_GetTick>
 8004eae:	1b40      	subs	r0, r0, r5
 8004eb0:	2802      	cmp	r0, #2
 8004eb2:	d9f5      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x354>
            return HAL_TIMEOUT;
 8004eb4:	2003      	movs	r0, #3
 8004eb6:	e05a      	b.n	8004f6e <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004eb8:	69e3      	ldr	r3, [r4, #28]
 8004eba:	6a22      	ldr	r2, [r4, #32]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004ec0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004ec4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004ec6:	0852      	lsrs	r2, r2, #1
 8004ec8:	3a01      	subs	r2, #1
 8004eca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ece:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ed0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004ed4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ed8:	4a28      	ldr	r2, [pc, #160]	; (8004f7c <HAL_RCC_OscConfig+0x430>)
 8004eda:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8004edc:	6813      	ldr	r3, [r2, #0]
 8004ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ee2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004ee4:	f7ff f854 	bl	8003f90 <HAL_GetTick>
 8004ee8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eea:	4b24      	ldr	r3, [pc, #144]	; (8004f7c <HAL_RCC_OscConfig+0x430>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004ef2:	d106      	bne.n	8004f02 <HAL_RCC_OscConfig+0x3b6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef4:	f7ff f84c 	bl	8003f90 <HAL_GetTick>
 8004ef8:	1b00      	subs	r0, r0, r4
 8004efa:	2802      	cmp	r0, #2
 8004efc:	d9f5      	bls.n	8004eea <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 8004efe:	2003      	movs	r0, #3
 8004f00:	e035      	b.n	8004f6e <HAL_RCC_OscConfig+0x422>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8004f02:	2000      	movs	r0, #0
 8004f04:	e033      	b.n	8004f6e <HAL_RCC_OscConfig+0x422>
 8004f06:	2000      	movs	r0, #0
 8004f08:	e031      	b.n	8004f6e <HAL_RCC_OscConfig+0x422>
      pll_config = RCC->PLLCFGR;
 8004f0a:	4a1c      	ldr	r2, [pc, #112]	; (8004f7c <HAL_RCC_OscConfig+0x430>)
 8004f0c:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d02f      	beq.n	8004f72 <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f12:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004f16:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f18:	428b      	cmp	r3, r1
 8004f1a:	d001      	beq.n	8004f20 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8004f1c:	2001      	movs	r0, #1
 8004f1e:	e026      	b.n	8004f6e <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f20:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8004f24:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f26:	428b      	cmp	r3, r1
 8004f28:	d001      	beq.n	8004f2e <HAL_RCC_OscConfig+0x3e2>
        return HAL_ERROR;
 8004f2a:	2001      	movs	r0, #1
 8004f2c:	e01f      	b.n	8004f6e <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f34:	4013      	ands	r3, r2
 8004f36:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCC_OscConfig+0x3f4>
        return HAL_ERROR;
 8004f3c:	2001      	movs	r0, #1
 8004f3e:	e016      	b.n	8004f6e <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f40:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8004f44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f46:	085b      	lsrs	r3, r3, #1
 8004f48:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f4a:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8004f4e:	d001      	beq.n	8004f54 <HAL_RCC_OscConfig+0x408>
        return HAL_ERROR;
 8004f50:	2001      	movs	r0, #1
 8004f52:	e00c      	b.n	8004f6e <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f54:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8004f58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f5a:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 8004f5e:	d00a      	beq.n	8004f76 <HAL_RCC_OscConfig+0x42a>
        return HAL_ERROR;
 8004f60:	2001      	movs	r0, #1
 8004f62:	e004      	b.n	8004f6e <HAL_RCC_OscConfig+0x422>
    return HAL_ERROR;
 8004f64:	2001      	movs	r0, #1
}
 8004f66:	4770      	bx	lr
        return HAL_ERROR;
 8004f68:	2001      	movs	r0, #1
 8004f6a:	e000      	b.n	8004f6e <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 8004f6c:	2000      	movs	r0, #0
}
 8004f6e:	b002      	add	sp, #8
 8004f70:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8004f72:	2001      	movs	r0, #1
 8004f74:	e7fb      	b.n	8004f6e <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 8004f76:	2000      	movs	r0, #0
 8004f78:	e7f9      	b.n	8004f6e <HAL_RCC_OscConfig+0x422>
 8004f7a:	bf00      	nop
 8004f7c:	40023800 	.word	0x40023800

08004f80 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f80:	4b26      	ldr	r3, [pc, #152]	; (800501c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 030c 	and.w	r3, r3, #12
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d044      	beq.n	8005016 <HAL_RCC_GetSysClockFreq+0x96>
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d001      	beq.n	8004f94 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f90:	4823      	ldr	r0, [pc, #140]	; (8005020 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f92:	4770      	bx	lr
{
 8004f94:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f98:	4b20      	ldr	r3, [pc, #128]	; (800501c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004fa6:	d013      	beq.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fa8:	4b1c      	ldr	r3, [pc, #112]	; (800501c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004faa:	6859      	ldr	r1, [r3, #4]
 8004fac:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	481c      	ldr	r0, [pc, #112]	; (8005024 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004fb4:	fba1 0100 	umull	r0, r1, r1, r0
 8004fb8:	f7fb fd44 	bl	8000a44 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004fbc:	4b17      	ldr	r3, [pc, #92]	; (800501c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8004fc8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004fcc:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fd0:	4b12      	ldr	r3, [pc, #72]	; (800501c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004fd8:	461e      	mov	r6, r3
 8004fda:	2700      	movs	r7, #0
 8004fdc:	015c      	lsls	r4, r3, #5
 8004fde:	2500      	movs	r5, #0
 8004fe0:	1ae4      	subs	r4, r4, r3
 8004fe2:	eb65 0507 	sbc.w	r5, r5, r7
 8004fe6:	01a9      	lsls	r1, r5, #6
 8004fe8:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8004fec:	01a0      	lsls	r0, r4, #6
 8004fee:	1b00      	subs	r0, r0, r4
 8004ff0:	eb61 0105 	sbc.w	r1, r1, r5
 8004ff4:	00cb      	lsls	r3, r1, #3
 8004ff6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004ffa:	00c4      	lsls	r4, r0, #3
 8004ffc:	19a0      	adds	r0, r4, r6
 8004ffe:	eb43 0107 	adc.w	r1, r3, r7
 8005002:	028b      	lsls	r3, r1, #10
 8005004:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8005008:	0284      	lsls	r4, r0, #10
 800500a:	4620      	mov	r0, r4
 800500c:	4619      	mov	r1, r3
 800500e:	2300      	movs	r3, #0
 8005010:	f7fb fd18 	bl	8000a44 <__aeabi_uldivmod>
 8005014:	e7d2      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8005016:	4803      	ldr	r0, [pc, #12]	; (8005024 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40023800 	.word	0x40023800
 8005020:	00f42400 	.word	0x00f42400
 8005024:	017d7840 	.word	0x017d7840

08005028 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005028:	2800      	cmp	r0, #0
 800502a:	f000 80a3 	beq.w	8005174 <HAL_RCC_ClockConfig+0x14c>
{
 800502e:	b570      	push	{r4, r5, r6, lr}
 8005030:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005032:	4b52      	ldr	r3, [pc, #328]	; (800517c <HAL_RCC_ClockConfig+0x154>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	428b      	cmp	r3, r1
 800503c:	d20c      	bcs.n	8005058 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800503e:	4a4f      	ldr	r2, [pc, #316]	; (800517c <HAL_RCC_ClockConfig+0x154>)
 8005040:	6813      	ldr	r3, [r2, #0]
 8005042:	f023 030f 	bic.w	r3, r3, #15
 8005046:	430b      	orrs	r3, r1
 8005048:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800504a:	6813      	ldr	r3, [r2, #0]
 800504c:	f003 030f 	and.w	r3, r3, #15
 8005050:	428b      	cmp	r3, r1
 8005052:	d001      	beq.n	8005058 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8005054:	2001      	movs	r0, #1
}
 8005056:	bd70      	pop	{r4, r5, r6, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	f013 0f02 	tst.w	r3, #2
 800505e:	d017      	beq.n	8005090 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005060:	f013 0f04 	tst.w	r3, #4
 8005064:	d004      	beq.n	8005070 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005066:	4a46      	ldr	r2, [pc, #280]	; (8005180 <HAL_RCC_ClockConfig+0x158>)
 8005068:	6893      	ldr	r3, [r2, #8]
 800506a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800506e:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	f013 0f08 	tst.w	r3, #8
 8005076:	d004      	beq.n	8005082 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005078:	4a41      	ldr	r2, [pc, #260]	; (8005180 <HAL_RCC_ClockConfig+0x158>)
 800507a:	6893      	ldr	r3, [r2, #8]
 800507c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005080:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005082:	4a3f      	ldr	r2, [pc, #252]	; (8005180 <HAL_RCC_ClockConfig+0x158>)
 8005084:	6893      	ldr	r3, [r2, #8]
 8005086:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800508a:	68a0      	ldr	r0, [r4, #8]
 800508c:	4303      	orrs	r3, r0
 800508e:	6093      	str	r3, [r2, #8]
 8005090:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	f013 0f01 	tst.w	r3, #1
 8005098:	d031      	beq.n	80050fe <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800509a:	6863      	ldr	r3, [r4, #4]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d020      	beq.n	80050e2 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d025      	beq.n	80050f0 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a4:	4a36      	ldr	r2, [pc, #216]	; (8005180 <HAL_RCC_ClockConfig+0x158>)
 80050a6:	6812      	ldr	r2, [r2, #0]
 80050a8:	f012 0f02 	tst.w	r2, #2
 80050ac:	d064      	beq.n	8005178 <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ae:	4934      	ldr	r1, [pc, #208]	; (8005180 <HAL_RCC_ClockConfig+0x158>)
 80050b0:	688a      	ldr	r2, [r1, #8]
 80050b2:	f022 0203 	bic.w	r2, r2, #3
 80050b6:	4313      	orrs	r3, r2
 80050b8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80050ba:	f7fe ff69 	bl	8003f90 <HAL_GetTick>
 80050be:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c0:	4b2f      	ldr	r3, [pc, #188]	; (8005180 <HAL_RCC_ClockConfig+0x158>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 030c 	and.w	r3, r3, #12
 80050c8:	6862      	ldr	r2, [r4, #4]
 80050ca:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80050ce:	d016      	beq.n	80050fe <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050d0:	f7fe ff5e 	bl	8003f90 <HAL_GetTick>
 80050d4:	1b80      	subs	r0, r0, r6
 80050d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80050da:	4298      	cmp	r0, r3
 80050dc:	d9f0      	bls.n	80050c0 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 80050de:	2003      	movs	r0, #3
 80050e0:	e7b9      	b.n	8005056 <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050e2:	4a27      	ldr	r2, [pc, #156]	; (8005180 <HAL_RCC_ClockConfig+0x158>)
 80050e4:	6812      	ldr	r2, [r2, #0]
 80050e6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80050ea:	d1e0      	bne.n	80050ae <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80050ec:	2001      	movs	r0, #1
 80050ee:	e7b2      	b.n	8005056 <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050f0:	4a23      	ldr	r2, [pc, #140]	; (8005180 <HAL_RCC_ClockConfig+0x158>)
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80050f8:	d1d9      	bne.n	80050ae <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80050fa:	2001      	movs	r0, #1
 80050fc:	e7ab      	b.n	8005056 <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050fe:	4b1f      	ldr	r3, [pc, #124]	; (800517c <HAL_RCC_ClockConfig+0x154>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	42ab      	cmp	r3, r5
 8005108:	d90c      	bls.n	8005124 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800510a:	4a1c      	ldr	r2, [pc, #112]	; (800517c <HAL_RCC_ClockConfig+0x154>)
 800510c:	6813      	ldr	r3, [r2, #0]
 800510e:	f023 030f 	bic.w	r3, r3, #15
 8005112:	432b      	orrs	r3, r5
 8005114:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005116:	6813      	ldr	r3, [r2, #0]
 8005118:	f003 030f 	and.w	r3, r3, #15
 800511c:	42ab      	cmp	r3, r5
 800511e:	d001      	beq.n	8005124 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8005120:	2001      	movs	r0, #1
 8005122:	e798      	b.n	8005056 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	f013 0f04 	tst.w	r3, #4
 800512a:	d006      	beq.n	800513a <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800512c:	4a14      	ldr	r2, [pc, #80]	; (8005180 <HAL_RCC_ClockConfig+0x158>)
 800512e:	6893      	ldr	r3, [r2, #8]
 8005130:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005134:	68e1      	ldr	r1, [r4, #12]
 8005136:	430b      	orrs	r3, r1
 8005138:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	f013 0f08 	tst.w	r3, #8
 8005140:	d007      	beq.n	8005152 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005142:	4a0f      	ldr	r2, [pc, #60]	; (8005180 <HAL_RCC_ClockConfig+0x158>)
 8005144:	6893      	ldr	r3, [r2, #8]
 8005146:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800514a:	6921      	ldr	r1, [r4, #16]
 800514c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005150:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005152:	f7ff ff15 	bl	8004f80 <HAL_RCC_GetSysClockFreq>
 8005156:	4b0a      	ldr	r3, [pc, #40]	; (8005180 <HAL_RCC_ClockConfig+0x158>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800515e:	4a09      	ldr	r2, [pc, #36]	; (8005184 <HAL_RCC_ClockConfig+0x15c>)
 8005160:	5cd3      	ldrb	r3, [r2, r3]
 8005162:	40d8      	lsrs	r0, r3
 8005164:	4b08      	ldr	r3, [pc, #32]	; (8005188 <HAL_RCC_ClockConfig+0x160>)
 8005166:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8005168:	4b08      	ldr	r3, [pc, #32]	; (800518c <HAL_RCC_ClockConfig+0x164>)
 800516a:	6818      	ldr	r0, [r3, #0]
 800516c:	f7fe fe5e 	bl	8003e2c <HAL_InitTick>
  return HAL_OK;
 8005170:	2000      	movs	r0, #0
 8005172:	e770      	b.n	8005056 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8005174:	2001      	movs	r0, #1
}
 8005176:	4770      	bx	lr
        return HAL_ERROR;
 8005178:	2001      	movs	r0, #1
 800517a:	e76c      	b.n	8005056 <HAL_RCC_ClockConfig+0x2e>
 800517c:	40023c00 	.word	0x40023c00
 8005180:	40023800 	.word	0x40023800
 8005184:	08007ef8 	.word	0x08007ef8
 8005188:	20000000 	.word	0x20000000
 800518c:	20000008 	.word	0x20000008

08005190 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8005190:	4b01      	ldr	r3, [pc, #4]	; (8005198 <HAL_RCC_GetHCLKFreq+0x8>)
 8005192:	6818      	ldr	r0, [r3, #0]
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	20000000 	.word	0x20000000

0800519c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800519c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800519e:	f7ff fff7 	bl	8005190 <HAL_RCC_GetHCLKFreq>
 80051a2:	4b04      	ldr	r3, [pc, #16]	; (80051b4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80051aa:	4a03      	ldr	r2, [pc, #12]	; (80051b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80051ac:	5cd3      	ldrb	r3, [r2, r3]
}
 80051ae:	40d8      	lsrs	r0, r3
 80051b0:	bd08      	pop	{r3, pc}
 80051b2:	bf00      	nop
 80051b4:	40023800 	.word	0x40023800
 80051b8:	08007f08 	.word	0x08007f08

080051bc <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051bc:	230f      	movs	r3, #15
 80051be:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051c0:	4b0b      	ldr	r3, [pc, #44]	; (80051f0 <HAL_RCC_GetClockConfig+0x34>)
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	f002 0203 	and.w	r2, r2, #3
 80051c8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80051d0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80051d8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	08db      	lsrs	r3, r3, #3
 80051de:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80051e2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80051e4:	4b03      	ldr	r3, [pc, #12]	; (80051f4 <HAL_RCC_GetClockConfig+0x38>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 030f 	and.w	r3, r3, #15
 80051ec:	600b      	str	r3, [r1, #0]
}
 80051ee:	4770      	bx	lr
 80051f0:	40023800 	.word	0x40023800
 80051f4:	40023c00 	.word	0x40023c00

080051f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051fa:	b083      	sub	sp, #12
 80051fc:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80051fe:	6803      	ldr	r3, [r0, #0]
 8005200:	f013 0f01 	tst.w	r3, #1
 8005204:	d00c      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005206:	4bb6      	ldr	r3, [pc, #728]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005208:	689a      	ldr	r2, [r3, #8]
 800520a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800520e:	609a      	str	r2, [r3, #8]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005214:	430a      	orrs	r2, r1
 8005216:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005218:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800521a:	b1c3      	cbz	r3, 800524e <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 800521c:	2600      	movs	r6, #0
 800521e:	e000      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8005220:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005228:	d015      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800522a:	4aad      	ldr	r2, [pc, #692]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800522c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005230:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005234:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005236:	430b      	orrs	r3, r1
 8005238:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800523c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800523e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005242:	d006      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 8129 	beq.w	800549c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
  uint32_t pllsaiused = 0;
 800524a:	2500      	movs	r5, #0
 800524c:	e004      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 800524e:	2601      	movs	r6, #1
 8005250:	e7e7      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8005252:	2601      	movs	r6, #1
 8005254:	e7f6      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 8005256:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800525e:	d00f      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005260:	4a9f      	ldr	r2, [pc, #636]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005262:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005266:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800526a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800526c:	430b      	orrs	r3, r1
 800526e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005272:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005274:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005278:	f000 8112 	beq.w	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800527c:	b903      	cbnz	r3, 8005280 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 800527e:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005286:	d000      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
      plli2sused = 1;
 8005288:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800528a:	f013 0f20 	tst.w	r3, #32
 800528e:	f040 8109 	bne.w	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	f013 0f10 	tst.w	r3, #16
 8005298:	d00c      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800529a:	4b91      	ldr	r3, [pc, #580]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800529c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80052a0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80052a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80052a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80052ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80052ae:	430a      	orrs	r2, r1
 80052b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052b4:	6823      	ldr	r3, [r4, #0]
 80052b6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80052ba:	d008      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052bc:	4a88      	ldr	r2, [pc, #544]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052be:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80052c2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80052c6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80052c8:	430b      	orrs	r3, r1
 80052ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80052d4:	d008      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052d6:	4a82      	ldr	r2, [pc, #520]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052d8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80052dc:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80052e0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80052e2:	430b      	orrs	r3, r1
 80052e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80052ee:	d008      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052f0:	4a7b      	ldr	r2, [pc, #492]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052f2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80052f6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80052fa:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80052fc:	430b      	orrs	r3, r1
 80052fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005308:	d008      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800530a:	4a75      	ldr	r2, [pc, #468]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800530c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005310:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005314:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005316:	430b      	orrs	r3, r1
 8005318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005322:	d008      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005324:	4a6e      	ldr	r2, [pc, #440]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005326:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800532a:	f023 0303 	bic.w	r3, r3, #3
 800532e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005330:	430b      	orrs	r3, r1
 8005332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	f013 0f80 	tst.w	r3, #128	; 0x80
 800533c:	d008      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800533e:	4a68      	ldr	r2, [pc, #416]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005340:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005344:	f023 030c 	bic.w	r3, r3, #12
 8005348:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800534a:	430b      	orrs	r3, r1
 800534c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005356:	d008      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005358:	4a61      	ldr	r2, [pc, #388]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800535a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800535e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005362:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005364:	430b      	orrs	r3, r1
 8005366:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005370:	d008      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005372:	4a5b      	ldr	r2, [pc, #364]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005374:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005378:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800537c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800537e:	430b      	orrs	r3, r1
 8005380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800538a:	d008      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800538c:	4a54      	ldr	r2, [pc, #336]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800538e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005396:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005398:	430b      	orrs	r3, r1
 800539a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80053a4:	d008      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80053a6:	4a4e      	ldr	r2, [pc, #312]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053a8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80053ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80053b0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80053b2:	430b      	orrs	r3, r1
 80053b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80053b8:	6823      	ldr	r3, [r4, #0]
 80053ba:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80053be:	d008      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80053c0:	4a47      	ldr	r2, [pc, #284]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053c2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80053c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80053ca:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80053cc:	430b      	orrs	r3, r1
 80053ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80053d8:	d008      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80053da:	4a41      	ldr	r2, [pc, #260]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053dc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80053e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80053e4:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80053e6:	430b      	orrs	r3, r1
 80053e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053ec:	6823      	ldr	r3, [r4, #0]
 80053ee:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80053f2:	d008      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053f4:	4a3a      	ldr	r2, [pc, #232]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053f6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80053fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053fe:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8005400:	430b      	orrs	r3, r1
 8005402:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800540c:	d00d      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800540e:	4a34      	ldr	r2, [pc, #208]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005410:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005414:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8005418:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800541a:	430b      	orrs	r3, r1
 800541c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005420:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005422:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005426:	f000 80a7 	beq.w	8005578 <HAL_RCCEx_PeriphCLKConfig+0x380>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	f013 0f08 	tst.w	r3, #8
 8005430:	d000      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    pllsaiused = 1;
 8005432:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005434:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005438:	d008      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800543a:	4a29      	ldr	r2, [pc, #164]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800543c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005440:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8005444:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8005446:	430b      	orrs	r3, r1
 8005448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005452:	d009      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005454:	4a22      	ldr	r2, [pc, #136]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005456:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800545a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800545e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8005462:	430b      	orrs	r3, r1
 8005464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005468:	b926      	cbnz	r6, 8005474 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005470:	f000 8102 	beq.w	8005678 <HAL_RCCEx_PeriphCLKConfig+0x480>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005474:	4a1a      	ldr	r2, [pc, #104]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005476:	6813      	ldr	r3, [r2, #0]
 8005478:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800547c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800547e:	f7fe fd87 	bl	8003f90 <HAL_GetTick>
 8005482:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005484:	4b16      	ldr	r3, [pc, #88]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800548c:	d076      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x384>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800548e:	f7fe fd7f 	bl	8003f90 <HAL_GetTick>
 8005492:	1b80      	subs	r0, r0, r6
 8005494:	2864      	cmp	r0, #100	; 0x64
 8005496:	d9f5      	bls.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005498:	2003      	movs	r0, #3
 800549a:	e0ef      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x484>
      pllsaiused = 1;
 800549c:	2501      	movs	r5, #1
 800549e:	e6db      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 80054a0:	2601      	movs	r6, #1
 80054a2:	e6eb      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_PWR_CLK_ENABLE();
 80054a4:	4b0e      	ldr	r3, [pc, #56]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80054ac:	641a      	str	r2, [r3, #64]	; 0x40
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b4:	9301      	str	r3, [sp, #4]
 80054b6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80054b8:	4a0a      	ldr	r2, [pc, #40]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80054ba:	6813      	ldr	r3, [r2, #0]
 80054bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80054c2:	f7fe fd65 	bl	8003f90 <HAL_GetTick>
 80054c6:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054c8:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80054d0:	d10a      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054d2:	f7fe fd5d 	bl	8003f90 <HAL_GetTick>
 80054d6:	1bc0      	subs	r0, r0, r7
 80054d8:	2864      	cmp	r0, #100	; 0x64
 80054da:	d9f5      	bls.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
        return HAL_TIMEOUT;
 80054dc:	2003      	movs	r0, #3
 80054de:	e0cd      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x484>
 80054e0:	40023800 	.word	0x40023800
 80054e4:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054e8:	4baa      	ldr	r3, [pc, #680]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80054ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054ec:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80054f0:	d015      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x326>
 80054f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80054f4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d010      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x326>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054fc:	4ba5      	ldr	r3, [pc, #660]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80054fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005500:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8005504:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005506:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800550a:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800550c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800550e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005512:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8005514:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005518:	f013 0f01 	tst.w	r3, #1
 800551c:	d112      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x34c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800551e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005520:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005524:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005528:	d01d      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800552a:	4a9a      	ldr	r2, [pc, #616]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800552c:	6893      	ldr	r3, [r2, #8]
 800552e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005532:	6093      	str	r3, [r2, #8]
 8005534:	4997      	ldr	r1, [pc, #604]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8005536:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8005538:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800553a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800553e:	4313      	orrs	r3, r2
 8005540:	670b      	str	r3, [r1, #112]	; 0x70
 8005542:	e6a6      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8005544:	f7fe fd24 	bl	8003f90 <HAL_GetTick>
 8005548:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800554a:	4b92      	ldr	r3, [pc, #584]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800554c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554e:	f013 0f02 	tst.w	r3, #2
 8005552:	d1e4      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x326>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005554:	f7fe fd1c 	bl	8003f90 <HAL_GetTick>
 8005558:	1bc0      	subs	r0, r0, r7
 800555a:	f241 3388 	movw	r3, #5000	; 0x1388
 800555e:	4298      	cmp	r0, r3
 8005560:	d9f3      	bls.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x352>
            return HAL_TIMEOUT;
 8005562:	2003      	movs	r0, #3
 8005564:	e08a      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x484>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005566:	488b      	ldr	r0, [pc, #556]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8005568:	6882      	ldr	r2, [r0, #8]
 800556a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800556e:	498a      	ldr	r1, [pc, #552]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8005570:	4019      	ands	r1, r3
 8005572:	430a      	orrs	r2, r1
 8005574:	6082      	str	r2, [r0, #8]
 8005576:	e7dd      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      pllsaiused = 1;
 8005578:	2501      	movs	r5, #1
 800557a:	e756      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x232>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	f013 0f01 	tst.w	r3, #1
 8005582:	d013      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8005584:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005586:	b98b      	cbnz	r3, 80055ac <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005588:	4a82      	ldr	r2, [pc, #520]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800558a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800558e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005592:	6860      	ldr	r0, [r4, #4]
 8005594:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005598:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800559c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80055a0:	430b      	orrs	r3, r1
 80055a2:	68a1      	ldr	r1, [r4, #8]
 80055a4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80055a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80055b2:	d003      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80055b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80055b6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80055ba:	d006      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80055bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80055c0:	d01e      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x408>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80055c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055c8:	d11a      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x408>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80055ca:	4a72      	ldr	r2, [pc, #456]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80055cc:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055d0:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80055d4:	6860      	ldr	r0, [r4, #4]
 80055d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055da:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80055de:	68e0      	ldr	r0, [r4, #12]
 80055e0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80055e4:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80055e8:	430b      	orrs	r3, r1
 80055ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80055ee:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80055f2:	f023 031f 	bic.w	r3, r3, #31
 80055f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80055f8:	3901      	subs	r1, #1
 80055fa:	430b      	orrs	r3, r1
 80055fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005606:	d011      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005608:	4a62      	ldr	r2, [pc, #392]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800560a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800560e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005612:	6866      	ldr	r6, [r4, #4]
 8005614:	6923      	ldr	r3, [r4, #16]
 8005616:	041b      	lsls	r3, r3, #16
 8005618:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800561c:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8005620:	4303      	orrs	r3, r0
 8005622:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8005626:	430b      	orrs	r3, r1
 8005628:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005632:	d00d      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x458>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005634:	6862      	ldr	r2, [r4, #4]
 8005636:	6923      	ldr	r3, [r4, #16]
 8005638:	041b      	lsls	r3, r3, #16
 800563a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800563e:	68e2      	ldr	r2, [r4, #12]
 8005640:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005644:	68a2      	ldr	r2, [r4, #8]
 8005646:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800564a:	4a52      	ldr	r2, [pc, #328]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800564c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005650:	4a50      	ldr	r2, [pc, #320]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8005652:	6813      	ldr	r3, [r2, #0]
 8005654:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005658:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800565a:	f7fe fc99 	bl	8003f90 <HAL_GetTick>
 800565e:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005660:	4b4c      	ldr	r3, [pc, #304]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005668:	d106      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800566a:	f7fe fc91 	bl	8003f90 <HAL_GetTick>
 800566e:	1b80      	subs	r0, r0, r6
 8005670:	2864      	cmp	r0, #100	; 0x64
 8005672:	d9f5      	bls.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x468>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005674:	2003      	movs	r0, #3
 8005676:	e001      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x484>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005678:	b915      	cbnz	r5, 8005680 <HAL_RCCEx_PeriphCLKConfig+0x488>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800567a:	2000      	movs	r0, #0
}
 800567c:	b003      	add	sp, #12
 800567e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8005680:	4a44      	ldr	r2, [pc, #272]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8005682:	6813      	ldr	r3, [r2, #0]
 8005684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005688:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800568a:	f7fe fc81 	bl	8003f90 <HAL_GetTick>
 800568e:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005690:	4b40      	ldr	r3, [pc, #256]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8005698:	d006      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800569a:	f7fe fc79 	bl	8003f90 <HAL_GetTick>
 800569e:	1b40      	subs	r0, r0, r5
 80056a0:	2864      	cmp	r0, #100	; 0x64
 80056a2:	d9f5      	bls.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x498>
        return HAL_TIMEOUT;
 80056a4:	2003      	movs	r0, #3
 80056a6:	e7e9      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x484>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80056ae:	d001      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80056b0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80056b2:	b122      	cbz	r2, 80056be <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80056b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80056b8:	d01d      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80056ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056bc:	b9db      	cbnz	r3, 80056f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80056be:	4a35      	ldr	r2, [pc, #212]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80056c0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056c4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80056c8:	6960      	ldr	r0, [r4, #20]
 80056ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056ce:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80056d2:	69a0      	ldr	r0, [r4, #24]
 80056d4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80056d8:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80056dc:	430b      	orrs	r3, r1
 80056de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80056e2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80056e6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80056ea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80056ec:	3901      	subs	r1, #1
 80056ee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80056f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80056fc:	d003      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 80056fe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005700:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005704:	d031      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x572>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	f013 0f08 	tst.w	r3, #8
 800570c:	d019      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x54a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800570e:	4a21      	ldr	r2, [pc, #132]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8005710:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005714:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005718:	6960      	ldr	r0, [r4, #20]
 800571a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800571e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005722:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8005726:	430b      	orrs	r3, r1
 8005728:	69e1      	ldr	r1, [r4, #28]
 800572a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800572e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005732:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005736:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800573a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800573c:	430b      	orrs	r3, r1
 800573e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8005742:	4a14      	ldr	r2, [pc, #80]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8005744:	6813      	ldr	r3, [r2, #0]
 8005746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800574a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800574c:	f7fe fc20 	bl	8003f90 <HAL_GetTick>
 8005750:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005752:	4b10      	ldr	r3, [pc, #64]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800575a:	d119      	bne.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x598>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800575c:	f7fe fc18 	bl	8003f90 <HAL_GetTick>
 8005760:	1b00      	subs	r0, r0, r4
 8005762:	2864      	cmp	r0, #100	; 0x64
 8005764:	d9f5      	bls.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x55a>
        return HAL_TIMEOUT;
 8005766:	2003      	movs	r0, #3
 8005768:	e788      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x484>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800576a:	4a0a      	ldr	r2, [pc, #40]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800576c:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005770:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005774:	6965      	ldr	r5, [r4, #20]
 8005776:	6a23      	ldr	r3, [r4, #32]
 8005778:	041b      	lsls	r3, r3, #16
 800577a:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800577e:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8005782:	4303      	orrs	r3, r0
 8005784:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8005788:	430b      	orrs	r3, r1
 800578a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800578e:	e7ba      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  return HAL_OK;
 8005790:	2000      	movs	r0, #0
 8005792:	e773      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005794:	40023800 	.word	0x40023800
 8005798:	0ffffcff 	.word	0x0ffffcff

0800579c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800579c:	b538      	push	{r3, r4, r5, lr}
 800579e:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80057a0:	6802      	ldr	r2, [r0, #0]
 80057a2:	68d3      	ldr	r3, [r2, #12]
 80057a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057a8:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057aa:	f7fe fbf1 	bl	8003f90 <HAL_GetTick>
 80057ae:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f013 0f20 	tst.w	r3, #32
 80057b8:	d107      	bne.n	80057ca <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80057ba:	f7fe fbe9 	bl	8003f90 <HAL_GetTick>
 80057be:	1b40      	subs	r0, r0, r5
 80057c0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80057c4:	d9f4      	bls.n	80057b0 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 80057c6:	2003      	movs	r0, #3
 80057c8:	e000      	b.n	80057cc <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 80057ca:	2000      	movs	r0, #0
}
 80057cc:	bd38      	pop	{r3, r4, r5, pc}

080057ce <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80057ce:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80057d0:	6803      	ldr	r3, [r0, #0]
 80057d2:	68da      	ldr	r2, [r3, #12]
 80057d4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80057d8:	d001      	beq.n	80057de <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80057da:	2000      	movs	r0, #0
}
 80057dc:	bd38      	pop	{r3, r4, r5, pc}
 80057de:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80057e0:	f04f 32ff 	mov.w	r2, #4294967295
 80057e4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80057e6:	f7fe fbd3 	bl	8003f90 <HAL_GetTick>
 80057ea:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80057f4:	d107      	bne.n	8005806 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80057f6:	f7fe fbcb 	bl	8003f90 <HAL_GetTick>
 80057fa:	1b40      	subs	r0, r0, r5
 80057fc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005800:	d9f4      	bls.n	80057ec <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8005802:	2003      	movs	r0, #3
 8005804:	e7ea      	b.n	80057dc <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8005806:	2000      	movs	r0, #0
 8005808:	e7e8      	b.n	80057dc <RTC_EnterInitMode+0xe>
	...

0800580c <HAL_RTC_Init>:
{
 800580c:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 800580e:	2800      	cmp	r0, #0
 8005810:	d05a      	beq.n	80058c8 <HAL_RTC_Init+0xbc>
 8005812:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005814:	7f43      	ldrb	r3, [r0, #29]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d03e      	beq.n	8005898 <HAL_RTC_Init+0x8c>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800581a:	2302      	movs	r3, #2
 800581c:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	22ca      	movs	r2, #202	; 0xca
 8005822:	625a      	str	r2, [r3, #36]	; 0x24
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	2253      	movs	r2, #83	; 0x53
 8005828:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800582a:	4620      	mov	r0, r4
 800582c:	f7ff ffcf 	bl	80057ce <RTC_EnterInitMode>
 8005830:	4605      	mov	r5, r0
 8005832:	2800      	cmp	r0, #0
 8005834:	d134      	bne.n	80058a0 <HAL_RTC_Init+0x94>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005836:	6822      	ldr	r2, [r4, #0]
 8005838:	6891      	ldr	r1, [r2, #8]
 800583a:	4b24      	ldr	r3, [pc, #144]	; (80058cc <HAL_RTC_Init+0xc0>)
 800583c:	400b      	ands	r3, r1
 800583e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005840:	6821      	ldr	r1, [r4, #0]
 8005842:	688a      	ldr	r2, [r1, #8]
 8005844:	6863      	ldr	r3, [r4, #4]
 8005846:	6920      	ldr	r0, [r4, #16]
 8005848:	4303      	orrs	r3, r0
 800584a:	6960      	ldr	r0, [r4, #20]
 800584c:	4303      	orrs	r3, r0
 800584e:	4313      	orrs	r3, r2
 8005850:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	68e2      	ldr	r2, [r4, #12]
 8005856:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8005858:	6822      	ldr	r2, [r4, #0]
 800585a:	6913      	ldr	r3, [r2, #16]
 800585c:	68a1      	ldr	r1, [r4, #8]
 800585e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005862:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005864:	6822      	ldr	r2, [r4, #0]
 8005866:	68d3      	ldr	r3, [r2, #12]
 8005868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800586c:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f013 0f20 	tst.w	r3, #32
 8005876:	d01b      	beq.n	80058b0 <HAL_RTC_Init+0xa4>
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8005878:	6822      	ldr	r2, [r4, #0]
 800587a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800587c:	f023 0308 	bic.w	r3, r3, #8
 8005880:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005882:	6822      	ldr	r2, [r4, #0]
 8005884:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005886:	69a1      	ldr	r1, [r4, #24]
 8005888:	430b      	orrs	r3, r1
 800588a:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800588c:	6823      	ldr	r3, [r4, #0]
 800588e:	22ff      	movs	r2, #255	; 0xff
 8005890:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8005892:	2301      	movs	r3, #1
 8005894:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8005896:	e009      	b.n	80058ac <HAL_RTC_Init+0xa0>
    hrtc->Lock = HAL_UNLOCKED;
 8005898:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 800589a:	f7fe fab3 	bl	8003e04 <HAL_RTC_MspInit>
 800589e:	e7bc      	b.n	800581a <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	22ff      	movs	r2, #255	; 0xff
 80058a4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058a6:	2304      	movs	r3, #4
 80058a8:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80058aa:	2501      	movs	r5, #1
}
 80058ac:	4628      	mov	r0, r5
 80058ae:	bd38      	pop	{r3, r4, r5, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058b0:	4620      	mov	r0, r4
 80058b2:	f7ff ff73 	bl	800579c <HAL_RTC_WaitForSynchro>
 80058b6:	2800      	cmp	r0, #0
 80058b8:	d0de      	beq.n	8005878 <HAL_RTC_Init+0x6c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	22ff      	movs	r2, #255	; 0xff
 80058be:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80058c0:	2304      	movs	r3, #4
 80058c2:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 80058c4:	2501      	movs	r5, #1
 80058c6:	e7f1      	b.n	80058ac <HAL_RTC_Init+0xa0>
     return HAL_ERROR;
 80058c8:	2501      	movs	r5, #1
 80058ca:	e7ef      	b.n	80058ac <HAL_RTC_Init+0xa0>
 80058cc:	ff8fffbf 	.word	0xff8fffbf

080058d0 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 80058d0:	2300      	movs	r3, #0

  while(Value >= 10)
 80058d2:	e002      	b.n	80058da <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80058d4:	3301      	adds	r3, #1
    Value -= 10;
 80058d6:	380a      	subs	r0, #10
 80058d8:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 80058da:	2809      	cmp	r0, #9
 80058dc:	d8fa      	bhi.n	80058d4 <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80058de:	011b      	lsls	r3, r3, #4
 80058e0:	b2db      	uxtb	r3, r3
}
 80058e2:	4318      	orrs	r0, r3
 80058e4:	4770      	bx	lr
	...

080058e8 <HAL_RTC_SetTime>:
{
 80058e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80058ea:	7f03      	ldrb	r3, [r0, #28]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d076      	beq.n	80059de <HAL_RTC_SetTime+0xf6>
 80058f0:	460d      	mov	r5, r1
 80058f2:	4604      	mov	r4, r0
 80058f4:	2301      	movs	r3, #1
 80058f6:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80058f8:	2302      	movs	r3, #2
 80058fa:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 80058fc:	2a00      	cmp	r2, #0
 80058fe:	d144      	bne.n	800598a <HAL_RTC_SetTime+0xa2>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005900:	6803      	ldr	r3, [r0, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005908:	d101      	bne.n	800590e <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 800590a:	2300      	movs	r3, #0
 800590c:	730b      	strb	r3, [r1, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800590e:	7828      	ldrb	r0, [r5, #0]
 8005910:	f7ff ffde 	bl	80058d0 <RTC_ByteToBcd2>
 8005914:	0406      	lsls	r6, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005916:	7868      	ldrb	r0, [r5, #1]
 8005918:	f7ff ffda 	bl	80058d0 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800591c:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005920:	78a8      	ldrb	r0, [r5, #2]
 8005922:	f7ff ffd5 	bl	80058d0 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005926:	4306      	orrs	r6, r0
                        (((uint32_t)sTime->TimeFormat) << 16));
 8005928:	7b28      	ldrb	r0, [r5, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800592a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	22ca      	movs	r2, #202	; 0xca
 8005932:	625a      	str	r2, [r3, #36]	; 0x24
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	2253      	movs	r2, #83	; 0x53
 8005938:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800593a:	4620      	mov	r0, r4
 800593c:	f7ff ff47 	bl	80057ce <RTC_EnterInitMode>
 8005940:	4607      	mov	r7, r0
 8005942:	2800      	cmp	r0, #0
 8005944:	d133      	bne.n	80059ae <HAL_RTC_SetTime+0xc6>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005946:	6822      	ldr	r2, [r4, #0]
 8005948:	4b26      	ldr	r3, [pc, #152]	; (80059e4 <HAL_RTC_SetTime+0xfc>)
 800594a:	4033      	ands	r3, r6
 800594c:	6013      	str	r3, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800594e:	6822      	ldr	r2, [r4, #0]
 8005950:	6893      	ldr	r3, [r2, #8]
 8005952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005956:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005958:	6821      	ldr	r1, [r4, #0]
 800595a:	688b      	ldr	r3, [r1, #8]
 800595c:	692a      	ldr	r2, [r5, #16]
 800595e:	6968      	ldr	r0, [r5, #20]
 8005960:	4302      	orrs	r2, r0
 8005962:	4313      	orrs	r3, r2
 8005964:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005966:	6822      	ldr	r2, [r4, #0]
 8005968:	68d3      	ldr	r3, [r2, #12]
 800596a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800596e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f013 0f20 	tst.w	r3, #32
 8005978:	d023      	beq.n	80059c2 <HAL_RTC_SetTime+0xda>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	22ff      	movs	r2, #255	; 0xff
 800597e:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8005980:	2301      	movs	r3, #1
 8005982:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 8005984:	2300      	movs	r3, #0
 8005986:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8005988:	e019      	b.n	80059be <HAL_RTC_SetTime+0xd6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800598a:	6803      	ldr	r3, [r0, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005992:	d101      	bne.n	8005998 <HAL_RTC_SetTime+0xb0>
      sTime->TimeFormat = 0x00;
 8005994:	2300      	movs	r3, #0
 8005996:	730b      	strb	r3, [r1, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005998:	7828      	ldrb	r0, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800599a:	786e      	ldrb	r6, [r5, #1]
 800599c:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800599e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
              ((uint32_t)sTime->Seconds) | \
 80059a2:	78a8      	ldrb	r0, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80059a4:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16));
 80059a6:	7b28      	ldrb	r0, [r5, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80059a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80059ac:	e7bf      	b.n	800592e <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	22ff      	movs	r2, #255	; 0xff
 80059b2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80059b4:	2304      	movs	r3, #4
 80059b6:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80059b8:	2300      	movs	r3, #0
 80059ba:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80059bc:	2701      	movs	r7, #1
}
 80059be:	4638      	mov	r0, r7
 80059c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80059c2:	4620      	mov	r0, r4
 80059c4:	f7ff feea 	bl	800579c <HAL_RTC_WaitForSynchro>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	d0d6      	beq.n	800597a <HAL_RTC_SetTime+0x92>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	22ff      	movs	r2, #255	; 0xff
 80059d0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80059d2:	2304      	movs	r3, #4
 80059d4:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80059d6:	2300      	movs	r3, #0
 80059d8:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80059da:	2701      	movs	r7, #1
 80059dc:	e7ef      	b.n	80059be <HAL_RTC_SetTime+0xd6>
  __HAL_LOCK(hrtc);
 80059de:	2702      	movs	r7, #2
 80059e0:	e7ed      	b.n	80059be <HAL_RTC_SetTime+0xd6>
 80059e2:	bf00      	nop
 80059e4:	007f7f7f 	.word	0x007f7f7f

080059e8 <HAL_RTC_SetDate>:
{
 80059e8:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 80059ea:	7f03      	ldrb	r3, [r0, #28]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d064      	beq.n	8005aba <HAL_RTC_SetDate+0xd2>
 80059f0:	2301      	movs	r3, #1
 80059f2:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80059f4:	2302      	movs	r3, #2
 80059f6:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80059f8:	b93a      	cbnz	r2, 8005a0a <HAL_RTC_SetDate+0x22>
 80059fa:	784b      	ldrb	r3, [r1, #1]
 80059fc:	f013 0f10 	tst.w	r3, #16
 8005a00:	d003      	beq.n	8005a0a <HAL_RTC_SetDate+0x22>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005a02:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8005a06:	330a      	adds	r3, #10
 8005a08:	704b      	strb	r3, [r1, #1]
 8005a0a:	460e      	mov	r6, r1
 8005a0c:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 8005a0e:	2a00      	cmp	r2, #0
 8005a10:	d130      	bne.n	8005a74 <HAL_RTC_SetDate+0x8c>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005a12:	78c8      	ldrb	r0, [r1, #3]
 8005a14:	f7ff ff5c 	bl	80058d0 <RTC_ByteToBcd2>
 8005a18:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005a1a:	7870      	ldrb	r0, [r6, #1]
 8005a1c:	f7ff ff58 	bl	80058d0 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005a20:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005a24:	78b0      	ldrb	r0, [r6, #2]
 8005a26:	f7ff ff53 	bl	80058d0 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005a2a:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13));
 8005a2c:	7830      	ldrb	r0, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005a2e:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	22ca      	movs	r2, #202	; 0xca
 8005a36:	625a      	str	r2, [r3, #36]	; 0x24
 8005a38:	6823      	ldr	r3, [r4, #0]
 8005a3a:	2253      	movs	r2, #83	; 0x53
 8005a3c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f7ff fec5 	bl	80057ce <RTC_EnterInitMode>
 8005a44:	4606      	mov	r6, r0
 8005a46:	bb00      	cbnz	r0, 8005a8a <HAL_RTC_SetDate+0xa2>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005a48:	6822      	ldr	r2, [r4, #0]
 8005a4a:	4b1d      	ldr	r3, [pc, #116]	; (8005ac0 <HAL_RTC_SetDate+0xd8>)
 8005a4c:	402b      	ands	r3, r5
 8005a4e:	6053      	str	r3, [r2, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005a50:	6822      	ldr	r2, [r4, #0]
 8005a52:	68d3      	ldr	r3, [r2, #12]
 8005a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a58:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f013 0f20 	tst.w	r3, #32
 8005a62:	d01c      	beq.n	8005a9e <HAL_RTC_SetDate+0xb6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	22ff      	movs	r2, #255	; 0xff
 8005a68:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8005a6e:	2300      	movs	r3, #0
 8005a70:	7723      	strb	r3, [r4, #28]
    return HAL_OK;
 8005a72:	e012      	b.n	8005a9a <HAL_RTC_SetDate+0xb2>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005a74:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 8005a76:	784d      	ldrb	r5, [r1, #1]
 8005a78:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005a7a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
                  ((uint32_t)sDate->Date) | \
 8005a7e:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8005a80:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));
 8005a82:	7808      	ldrb	r0, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005a84:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
 8005a88:	e7d3      	b.n	8005a32 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	22ff      	movs	r2, #255	; 0xff
 8005a8e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005a90:	2304      	movs	r3, #4
 8005a92:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8005a94:	2300      	movs	r3, #0
 8005a96:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8005a98:	2601      	movs	r6, #1
}
 8005a9a:	4630      	mov	r0, r6
 8005a9c:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f7ff fe7c 	bl	800579c <HAL_RTC_WaitForSynchro>
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	d0dd      	beq.n	8005a64 <HAL_RTC_SetDate+0x7c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	22ff      	movs	r2, #255	; 0xff
 8005aac:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005aae:	2304      	movs	r3, #4
 8005ab0:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8005ab6:	2601      	movs	r6, #1
 8005ab8:	e7ef      	b.n	8005a9a <HAL_RTC_SetDate+0xb2>
 __HAL_LOCK(hrtc);
 8005aba:	2602      	movs	r6, #2
 8005abc:	e7ed      	b.n	8005a9a <HAL_RTC_SetDate+0xb2>
 8005abe:	bf00      	nop
 8005ac0:	00ffff3f 	.word	0x00ffff3f

08005ac4 <HAL_RTC_SetAlarm>:
{
 8005ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8005ac6:	7f03      	ldrb	r3, [r0, #28]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	f000 80a9 	beq.w	8005c20 <HAL_RTC_SetAlarm+0x15c>
 8005ace:	460d      	mov	r5, r1
 8005ad0:	4604      	mov	r4, r0
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8005ada:	2a00      	cmp	r2, #0
 8005adc:	d14d      	bne.n	8005b7a <HAL_RTC_SetAlarm+0xb6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005ade:	6803      	ldr	r3, [r0, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ae6:	d101      	bne.n	8005aec <HAL_RTC_SetAlarm+0x28>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8005aec:	6a2e      	ldr	r6, [r5, #32]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005aee:	7828      	ldrb	r0, [r5, #0]
 8005af0:	f7ff feee 	bl	80058d0 <RTC_ByteToBcd2>
 8005af4:	0407      	lsls	r7, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005af6:	7868      	ldrb	r0, [r5, #1]
 8005af8:	f7ff feea 	bl	80058d0 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005afc:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005b00:	78a8      	ldrb	r0, [r5, #2]
 8005b02:	f7ff fee5 	bl	80058d0 <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005b06:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005b08:	7b28      	ldrb	r0, [r5, #12]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005b0a:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8005b0e:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 8005b12:	f7ff fedd 	bl	80058d0 <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005b16:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8005b1a:	4306      	orrs	r6, r0
              ((uint32_t)sAlarm->AlarmMask));
 8005b1c:	69ab      	ldr	r3, [r5, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005b1e:	431e      	orrs	r6, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005b20:	686f      	ldr	r7, [r5, #4]
 8005b22:	69eb      	ldr	r3, [r5, #28]
 8005b24:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b26:	6823      	ldr	r3, [r4, #0]
 8005b28:	22ca      	movs	r2, #202	; 0xca
 8005b2a:	625a      	str	r2, [r3, #36]	; 0x24
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	2253      	movs	r2, #83	; 0x53
 8005b30:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005b32:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b38:	d039      	beq.n	8005bae <HAL_RTC_SetAlarm+0xea>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005b3a:	6822      	ldr	r2, [r4, #0]
 8005b3c:	6893      	ldr	r3, [r2, #8]
 8005b3e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b42:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005b44:	6822      	ldr	r2, [r4, #0]
 8005b46:	6893      	ldr	r3, [r2, #8]
 8005b48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b4c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005b4e:	f7fe fa1f 	bl	8003f90 <HAL_GetTick>
 8005b52:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	68da      	ldr	r2, [r3, #12]
 8005b58:	f012 0f02 	tst.w	r2, #2
 8005b5c:	d150      	bne.n	8005c00 <HAL_RTC_SetAlarm+0x13c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005b5e:	f7fe fa17 	bl	8003f90 <HAL_GetTick>
 8005b62:	1b40      	subs	r0, r0, r5
 8005b64:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005b68:	d9f4      	bls.n	8005b54 <HAL_RTC_SetAlarm+0x90>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b6a:	6823      	ldr	r3, [r4, #0]
 8005b6c:	22ff      	movs	r2, #255	; 0xff
 8005b6e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b70:	2003      	movs	r0, #3
 8005b72:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8005b74:	2300      	movs	r3, #0
 8005b76:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8005b78:	e051      	b.n	8005c1e <HAL_RTC_SetAlarm+0x15a>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005b7a:	6803      	ldr	r3, [r0, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b82:	d101      	bne.n	8005b88 <HAL_RTC_SetAlarm+0xc4>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005b84:	2300      	movs	r3, #0
 8005b86:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8005b88:	6a2a      	ldr	r2, [r5, #32]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005b8a:	7829      	ldrb	r1, [r5, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005b8c:	786b      	ldrb	r3, [r5, #1]
 8005b8e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005b90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005b94:	78a9      	ldrb	r1, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005b96:	430b      	orrs	r3, r1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005b98:	7b29      	ldrb	r1, [r5, #12]
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005b9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005b9e:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005ba2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005ba6:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmMask));
 8005ba8:	69ae      	ldr	r6, [r5, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005baa:	431e      	orrs	r6, r3
 8005bac:	e7b8      	b.n	8005b20 <HAL_RTC_SetAlarm+0x5c>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005bae:	6822      	ldr	r2, [r4, #0]
 8005bb0:	6893      	ldr	r3, [r2, #8]
 8005bb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bb6:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005bb8:	6822      	ldr	r2, [r4, #0]
 8005bba:	6893      	ldr	r3, [r2, #8]
 8005bbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bc0:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005bc2:	f7fe f9e5 	bl	8003f90 <HAL_GetTick>
 8005bc6:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005bc8:	6823      	ldr	r3, [r4, #0]
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	f012 0f01 	tst.w	r2, #1
 8005bd0:	d10d      	bne.n	8005bee <HAL_RTC_SetAlarm+0x12a>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005bd2:	f7fe f9dd 	bl	8003f90 <HAL_GetTick>
 8005bd6:	1b40      	subs	r0, r0, r5
 8005bd8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005bdc:	d9f4      	bls.n	8005bc8 <HAL_RTC_SetAlarm+0x104>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	22ff      	movs	r2, #255	; 0xff
 8005be2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005be4:	2003      	movs	r0, #3
 8005be6:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8005be8:	2300      	movs	r3, #0
 8005bea:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8005bec:	e017      	b.n	8005c1e <HAL_RTC_SetAlarm+0x15a>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005bee:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005bf4:	6822      	ldr	r2, [r4, #0]
 8005bf6:	6893      	ldr	r3, [r2, #8]
 8005bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bfc:	6093      	str	r3, [r2, #8]
 8005bfe:	e007      	b.n	8005c10 <HAL_RTC_SetAlarm+0x14c>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005c00:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005c06:	6822      	ldr	r2, [r4, #0]
 8005c08:	6893      	ldr	r3, [r2, #8]
 8005c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c0e:	6093      	str	r3, [r2, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	22ff      	movs	r2, #255	; 0xff
 8005c14:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005c16:	2301      	movs	r3, #1
 8005c18:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	7720      	strb	r0, [r4, #28]
}
 8005c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8005c20:	2002      	movs	r0, #2
 8005c22:	e7fc      	b.n	8005c1e <HAL_RTC_SetAlarm+0x15a>

08005c24 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8005c24:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c26:	7f04      	ldrb	r4, [r0, #28]
 8005c28:	2c01      	cmp	r4, #1
 8005c2a:	d027      	beq.n	8005c7c <HAL_RTCEx_SetTimeStamp+0x58>
 8005c2c:	2401      	movs	r4, #1
 8005c2e:	7704      	strb	r4, [r0, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c30:	2302      	movs	r3, #2
 8005c32:	7743      	strb	r3, [r0, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8005c34:	6805      	ldr	r5, [r0, #0]
 8005c36:	68ae      	ldr	r6, [r5, #8]
 8005c38:	f6a3 030b 	subw	r3, r3, #2059	; 0x80b
 8005c3c:	4033      	ands	r3, r6

  tmpreg|= TimeStampEdge;
 8005c3e:	4319      	orrs	r1, r3

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c40:	23ca      	movs	r3, #202	; 0xca
 8005c42:	626b      	str	r3, [r5, #36]	; 0x24
 8005c44:	6803      	ldr	r3, [r0, #0]
 8005c46:	2553      	movs	r5, #83	; 0x53
 8005c48:	625d      	str	r5, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8005c4a:	6805      	ldr	r5, [r0, #0]
 8005c4c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005c4e:	f023 0306 	bic.w	r3, r3, #6
 8005c52:	64eb      	str	r3, [r5, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8005c54:	6805      	ldr	r5, [r0, #0]
 8005c56:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	64ea      	str	r2, [r5, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8005c5c:	6803      	ldr	r3, [r0, #0]
 8005c5e:	6099      	str	r1, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8005c60:	6802      	ldr	r2, [r0, #0]
 8005c62:	6893      	ldr	r3, [r2, #8]
 8005c64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c68:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c6a:	6803      	ldr	r3, [r0, #0]
 8005c6c:	22ff      	movs	r2, #255	; 0xff
 8005c6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005c70:	7744      	strb	r4, [r0, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c72:	2300      	movs	r3, #0
 8005c74:	7703      	strb	r3, [r0, #28]

  return HAL_OK;
 8005c76:	4618      	mov	r0, r3
}
 8005c78:	bc70      	pop	{r4, r5, r6}
 8005c7a:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8005c7c:	2002      	movs	r0, #2
 8005c7e:	e7fb      	b.n	8005c78 <HAL_RTCEx_SetTimeStamp+0x54>

08005c80 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005c80:	b1d8      	cbz	r0, 8005cba <HAL_SDRAM_Init+0x3a>
{   
 8005c82:	b538      	push	{r3, r4, r5, lr}
 8005c84:	4604      	mov	r4, r0
 8005c86:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005c88:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005c8c:	b183      	cbz	r3, 8005cb0 <HAL_SDRAM_Init+0x30>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005c8e:	2302      	movs	r3, #2
 8005c90:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005c94:	1d21      	adds	r1, r4, #4
 8005c96:	6820      	ldr	r0, [r4, #0]
 8005c98:	f000 f9e4 	bl	8006064 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005c9c:	6862      	ldr	r2, [r4, #4]
 8005c9e:	4629      	mov	r1, r5
 8005ca0:	6820      	ldr	r0, [r4, #0]
 8005ca2:	f000 fa19 	bl	80060d8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8005cac:	2000      	movs	r0, #0
}
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8005cb0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8005cb4:	f7fe f8b6 	bl	8003e24 <HAL_SDRAM_MspInit>
 8005cb8:	e7e9      	b.n	8005c8e <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8005cba:	2001      	movs	r0, #1
}
 8005cbc:	4770      	bx	lr

08005cbe <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cc0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d001      	beq.n	8005cce <HAL_TIM_Base_Start_IT+0xe>
  {
    return HAL_ERROR;
 8005cca:	2001      	movs	r0, #1
 8005ccc:	4770      	bx	lr
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cce:	2302      	movs	r3, #2
 8005cd0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cd4:	6802      	ldr	r2, [r0, #0]
 8005cd6:	68d3      	ldr	r3, [r2, #12]
 8005cd8:	f043 0301 	orr.w	r3, r3, #1
 8005cdc:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cde:	6803      	ldr	r3, [r0, #0]
 8005ce0:	4a19      	ldr	r2, [pc, #100]	; (8005d48 <HAL_TIM_Base_Start_IT+0x88>)
 8005ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce6:	bf18      	it	ne
 8005ce8:	4293      	cmpne	r3, r2
 8005cea:	d01d      	beq.n	8005d28 <HAL_TIM_Base_Start_IT+0x68>
 8005cec:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d019      	beq.n	8005d28 <HAL_TIM_Base_Start_IT+0x68>
 8005cf4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d015      	beq.n	8005d28 <HAL_TIM_Base_Start_IT+0x68>
 8005cfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d011      	beq.n	8005d28 <HAL_TIM_Base_Start_IT+0x68>
 8005d04:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00d      	beq.n	8005d28 <HAL_TIM_Base_Start_IT+0x68>
 8005d0c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d009      	beq.n	8005d28 <HAL_TIM_Base_Start_IT+0x68>
 8005d14:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d005      	beq.n	8005d28 <HAL_TIM_Base_Start_IT+0x68>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	f042 0201 	orr.w	r2, r2, #1
 8005d22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d24:	2000      	movs	r0, #0
 8005d26:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d28:	6899      	ldr	r1, [r3, #8]
 8005d2a:	4a08      	ldr	r2, [pc, #32]	; (8005d4c <HAL_TIM_Base_Start_IT+0x8c>)
 8005d2c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d2e:	2a06      	cmp	r2, #6
 8005d30:	bf18      	it	ne
 8005d32:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 8005d36:	d005      	beq.n	8005d44 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	f042 0201 	orr.w	r2, r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005d40:	2000      	movs	r0, #0
 8005d42:	4770      	bx	lr
 8005d44:	2000      	movs	r0, #0
}
 8005d46:	4770      	bx	lr
 8005d48:	40010000 	.word	0x40010000
 8005d4c:	00010007 	.word	0x00010007

08005d50 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d50:	4770      	bx	lr

08005d52 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d52:	4770      	bx	lr

08005d54 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d54:	4770      	bx	lr

08005d56 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d56:	4770      	bx	lr

08005d58 <HAL_TIM_IRQHandler>:
{
 8005d58:	b510      	push	{r4, lr}
 8005d5a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d5c:	6803      	ldr	r3, [r0, #0]
 8005d5e:	691a      	ldr	r2, [r3, #16]
 8005d60:	f012 0f02 	tst.w	r2, #2
 8005d64:	d011      	beq.n	8005d8a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	f012 0f02 	tst.w	r2, #2
 8005d6c:	d00d      	beq.n	8005d8a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d6e:	f06f 0202 	mvn.w	r2, #2
 8005d72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d74:	2301      	movs	r3, #1
 8005d76:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d78:	6803      	ldr	r3, [r0, #0]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	f013 0f03 	tst.w	r3, #3
 8005d80:	d079      	beq.n	8005e76 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005d82:	f7ff ffe6 	bl	8005d52 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d86:	2300      	movs	r3, #0
 8005d88:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	691a      	ldr	r2, [r3, #16]
 8005d8e:	f012 0f04 	tst.w	r2, #4
 8005d92:	d012      	beq.n	8005dba <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	f012 0f04 	tst.w	r2, #4
 8005d9a:	d00e      	beq.n	8005dba <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d9c:	f06f 0204 	mvn.w	r2, #4
 8005da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005da2:	2302      	movs	r3, #2
 8005da4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005dae:	d068      	beq.n	8005e82 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005db0:	4620      	mov	r0, r4
 8005db2:	f7ff ffce 	bl	8005d52 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db6:	2300      	movs	r3, #0
 8005db8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	691a      	ldr	r2, [r3, #16]
 8005dbe:	f012 0f08 	tst.w	r2, #8
 8005dc2:	d012      	beq.n	8005dea <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dc4:	68da      	ldr	r2, [r3, #12]
 8005dc6:	f012 0f08 	tst.w	r2, #8
 8005dca:	d00e      	beq.n	8005dea <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dcc:	f06f 0208 	mvn.w	r2, #8
 8005dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dd2:	2304      	movs	r3, #4
 8005dd4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	f013 0f03 	tst.w	r3, #3
 8005dde:	d057      	beq.n	8005e90 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8005de0:	4620      	mov	r0, r4
 8005de2:	f7ff ffb6 	bl	8005d52 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005de6:	2300      	movs	r3, #0
 8005de8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	691a      	ldr	r2, [r3, #16]
 8005dee:	f012 0f10 	tst.w	r2, #16
 8005df2:	d012      	beq.n	8005e1a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005df4:	68da      	ldr	r2, [r3, #12]
 8005df6:	f012 0f10 	tst.w	r2, #16
 8005dfa:	d00e      	beq.n	8005e1a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dfc:	f06f 0210 	mvn.w	r2, #16
 8005e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e02:	2308      	movs	r3, #8
 8005e04:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005e0e:	d046      	beq.n	8005e9e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005e10:	4620      	mov	r0, r4
 8005e12:	f7ff ff9e 	bl	8005d52 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e16:	2300      	movs	r3, #0
 8005e18:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	691a      	ldr	r2, [r3, #16]
 8005e1e:	f012 0f01 	tst.w	r2, #1
 8005e22:	d003      	beq.n	8005e2c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	f012 0f01 	tst.w	r2, #1
 8005e2a:	d13f      	bne.n	8005eac <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	691a      	ldr	r2, [r3, #16]
 8005e30:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005e34:	d003      	beq.n	8005e3e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005e3c:	d13d      	bne.n	8005eba <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	691a      	ldr	r2, [r3, #16]
 8005e42:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005e46:	d003      	beq.n	8005e50 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005e4e:	d13b      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e50:	6823      	ldr	r3, [r4, #0]
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005e58:	d003      	beq.n	8005e62 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005e60:	d139      	bne.n	8005ed6 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	691a      	ldr	r2, [r3, #16]
 8005e66:	f012 0f20 	tst.w	r2, #32
 8005e6a:	d003      	beq.n	8005e74 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	f012 0f20 	tst.w	r2, #32
 8005e72:	d137      	bne.n	8005ee4 <HAL_TIM_IRQHandler+0x18c>
}
 8005e74:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e76:	f7ff ff6b 	bl	8005d50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f7ff ff6a 	bl	8005d54 <HAL_TIM_PWM_PulseFinishedCallback>
 8005e80:	e781      	b.n	8005d86 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e82:	4620      	mov	r0, r4
 8005e84:	f7ff ff64 	bl	8005d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f7ff ff63 	bl	8005d54 <HAL_TIM_PWM_PulseFinishedCallback>
 8005e8e:	e792      	b.n	8005db6 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e90:	4620      	mov	r0, r4
 8005e92:	f7ff ff5d 	bl	8005d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e96:	4620      	mov	r0, r4
 8005e98:	f7ff ff5c 	bl	8005d54 <HAL_TIM_PWM_PulseFinishedCallback>
 8005e9c:	e7a3      	b.n	8005de6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f7ff ff56 	bl	8005d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f7ff ff55 	bl	8005d54 <HAL_TIM_PWM_PulseFinishedCallback>
 8005eaa:	e7b4      	b.n	8005e16 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005eac:	f06f 0201 	mvn.w	r2, #1
 8005eb0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f7fd fc48 	bl	8003748 <HAL_TIM_PeriodElapsedCallback>
 8005eb8:	e7b8      	b.n	8005e2c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005eba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ebe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f000 f8cd 	bl	8006060 <HAL_TIMEx_BreakCallback>
 8005ec6:	e7ba      	b.n	8005e3e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ec8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ecc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f000 f8c7 	bl	8006062 <HAL_TIMEx_Break2Callback>
 8005ed4:	e7bc      	b.n	8005e50 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ed6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005eda:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005edc:	4620      	mov	r0, r4
 8005ede:	f7ff ff3a 	bl	8005d56 <HAL_TIM_TriggerCallback>
 8005ee2:	e7be      	b.n	8005e62 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ee4:	f06f 0220 	mvn.w	r2, #32
 8005ee8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005eea:	4620      	mov	r0, r4
 8005eec:	f000 f8b7 	bl	800605e <HAL_TIMEx_CommutCallback>
}
 8005ef0:	e7c0      	b.n	8005e74 <HAL_TIM_IRQHandler+0x11c>
	...

08005ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ef4:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ef6:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ef8:	4c3a      	ldr	r4, [pc, #232]	; (8005fe4 <TIM_Base_SetConfig+0xf0>)
 8005efa:	42a0      	cmp	r0, r4
 8005efc:	bf14      	ite	ne
 8005efe:	2400      	movne	r4, #0
 8005f00:	2401      	moveq	r4, #1
 8005f02:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005f06:	bf14      	ite	ne
 8005f08:	4622      	movne	r2, r4
 8005f0a:	f044 0201 	orreq.w	r2, r4, #1
 8005f0e:	b9aa      	cbnz	r2, 8005f3c <TIM_Base_SetConfig+0x48>
 8005f10:	4d35      	ldr	r5, [pc, #212]	; (8005fe8 <TIM_Base_SetConfig+0xf4>)
 8005f12:	42a8      	cmp	r0, r5
 8005f14:	bf14      	ite	ne
 8005f16:	2500      	movne	r5, #0
 8005f18:	2501      	moveq	r5, #1
 8005f1a:	4e34      	ldr	r6, [pc, #208]	; (8005fec <TIM_Base_SetConfig+0xf8>)
 8005f1c:	42b0      	cmp	r0, r6
 8005f1e:	d00d      	beq.n	8005f3c <TIM_Base_SetConfig+0x48>
 8005f20:	b965      	cbnz	r5, 8005f3c <TIM_Base_SetConfig+0x48>
 8005f22:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8005f26:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8005f2a:	42a8      	cmp	r0, r5
 8005f2c:	bf14      	ite	ne
 8005f2e:	2500      	movne	r5, #0
 8005f30:	2501      	moveq	r5, #1
 8005f32:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005f36:	42b0      	cmp	r0, r6
 8005f38:	d000      	beq.n	8005f3c <TIM_Base_SetConfig+0x48>
 8005f3a:	b11d      	cbz	r5, 8005f44 <TIM_Base_SetConfig+0x50>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005f40:	684d      	ldr	r5, [r1, #4]
 8005f42:	432b      	orrs	r3, r5
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f44:	2a00      	cmp	r2, #0
 8005f46:	d133      	bne.n	8005fb0 <TIM_Base_SetConfig+0xbc>
 8005f48:	4a27      	ldr	r2, [pc, #156]	; (8005fe8 <TIM_Base_SetConfig+0xf4>)
 8005f4a:	4290      	cmp	r0, r2
 8005f4c:	bf14      	ite	ne
 8005f4e:	2200      	movne	r2, #0
 8005f50:	2201      	moveq	r2, #1
 8005f52:	4d26      	ldr	r5, [pc, #152]	; (8005fec <TIM_Base_SetConfig+0xf8>)
 8005f54:	42a8      	cmp	r0, r5
 8005f56:	d02b      	beq.n	8005fb0 <TIM_Base_SetConfig+0xbc>
 8005f58:	bb52      	cbnz	r2, 8005fb0 <TIM_Base_SetConfig+0xbc>
 8005f5a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005f5e:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8005f62:	4290      	cmp	r0, r2
 8005f64:	bf14      	ite	ne
 8005f66:	2200      	movne	r2, #0
 8005f68:	2201      	moveq	r2, #1
 8005f6a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005f6e:	42a8      	cmp	r0, r5
 8005f70:	d01e      	beq.n	8005fb0 <TIM_Base_SetConfig+0xbc>
 8005f72:	b9ea      	cbnz	r2, 8005fb0 <TIM_Base_SetConfig+0xbc>
 8005f74:	4a1e      	ldr	r2, [pc, #120]	; (8005ff0 <TIM_Base_SetConfig+0xfc>)
 8005f76:	4290      	cmp	r0, r2
 8005f78:	bf14      	ite	ne
 8005f7a:	2200      	movne	r2, #0
 8005f7c:	2201      	moveq	r2, #1
 8005f7e:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8005f82:	42a8      	cmp	r0, r5
 8005f84:	d014      	beq.n	8005fb0 <TIM_Base_SetConfig+0xbc>
 8005f86:	b99a      	cbnz	r2, 8005fb0 <TIM_Base_SetConfig+0xbc>
 8005f88:	4a1a      	ldr	r2, [pc, #104]	; (8005ff4 <TIM_Base_SetConfig+0x100>)
 8005f8a:	4290      	cmp	r0, r2
 8005f8c:	bf14      	ite	ne
 8005f8e:	2200      	movne	r2, #0
 8005f90:	2201      	moveq	r2, #1
 8005f92:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005f96:	42a8      	cmp	r0, r5
 8005f98:	d00a      	beq.n	8005fb0 <TIM_Base_SetConfig+0xbc>
 8005f9a:	b94a      	cbnz	r2, 8005fb0 <TIM_Base_SetConfig+0xbc>
 8005f9c:	4a16      	ldr	r2, [pc, #88]	; (8005ff8 <TIM_Base_SetConfig+0x104>)
 8005f9e:	4290      	cmp	r0, r2
 8005fa0:	bf14      	ite	ne
 8005fa2:	2200      	movne	r2, #0
 8005fa4:	2201      	moveq	r2, #1
 8005fa6:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 8005faa:	42a8      	cmp	r0, r5
 8005fac:	d000      	beq.n	8005fb0 <TIM_Base_SetConfig+0xbc>
 8005fae:	b11a      	cbz	r2, 8005fb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fb4:	68ca      	ldr	r2, [r1, #12]
 8005fb6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fbc:	694a      	ldr	r2, [r1, #20]
 8005fbe:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8005fc0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fc2:	688a      	ldr	r2, [r1, #8]
 8005fc4:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fc6:	680a      	ldr	r2, [r1, #0]
 8005fc8:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fca:	4b0c      	ldr	r3, [pc, #48]	; (8005ffc <TIM_Base_SetConfig+0x108>)
 8005fcc:	4298      	cmp	r0, r3
 8005fce:	bf14      	ite	ne
 8005fd0:	4623      	movne	r3, r4
 8005fd2:	f044 0301 	orreq.w	r3, r4, #1
 8005fd6:	b10b      	cbz	r3, 8005fdc <TIM_Base_SetConfig+0xe8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fd8:	690b      	ldr	r3, [r1, #16]
 8005fda:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	6143      	str	r3, [r0, #20]
}
 8005fe0:	bc70      	pop	{r4, r5, r6}
 8005fe2:	4770      	bx	lr
 8005fe4:	40010000 	.word	0x40010000
 8005fe8:	40000800 	.word	0x40000800
 8005fec:	40000400 	.word	0x40000400
 8005ff0:	40014400 	.word	0x40014400
 8005ff4:	40001800 	.word	0x40001800
 8005ff8:	40002000 	.word	0x40002000
 8005ffc:	40010400 	.word	0x40010400

08006000 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006000:	b358      	cbz	r0, 800605a <HAL_TIM_Base_Init+0x5a>
{
 8006002:	b510      	push	{r4, lr}
 8006004:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006006:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800600a:	b30b      	cbz	r3, 8006050 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 800600c:	2302      	movs	r3, #2
 800600e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006012:	1d21      	adds	r1, r4, #4
 8006014:	6820      	ldr	r0, [r4, #0]
 8006016:	f7ff ff6d 	bl	8005ef4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800601a:	2301      	movs	r3, #1
 800601c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006020:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006024:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006028:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800602c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006038:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800603c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006040:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006044:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006048:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800604c:	2000      	movs	r0, #0
}
 800604e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006050:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006054:	f7ff fe33 	bl	8005cbe <HAL_TIM_Base_MspInit>
 8006058:	e7d8      	b.n	800600c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800605a:	2001      	movs	r0, #1
}
 800605c:	4770      	bx	lr

0800605e <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800605e:	4770      	bx	lr

08006060 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006060:	4770      	bx	lr

08006062 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006062:	4770      	bx	lr

08006064 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006064:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006066:	680b      	ldr	r3, [r1, #0]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d018      	beq.n	800609e <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800606c:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800606e:	4a19      	ldr	r2, [pc, #100]	; (80060d4 <FMC_SDRAM_Init+0x70>)
 8006070:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006072:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 8006074:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006076:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 8006078:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 800607a:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 800607c:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 800607e:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 8006080:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 8006082:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 8006084:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 8006086:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 8006088:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 800608a:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 800608c:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 800608e:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 8006090:	6a49      	ldr	r1, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8006092:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006094:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006096:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8006098:	2000      	movs	r0, #0
 800609a:	bc30      	pop	{r4, r5}
 800609c:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800609e:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80060a0:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80060a4:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 80060a6:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80060a8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80060aa:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 80060ac:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80060ae:	4322      	orrs	r2, r4
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80060b0:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80060b2:	4c08      	ldr	r4, [pc, #32]	; (80060d4 <FMC_SDRAM_Init+0x70>)
 80060b4:	401c      	ands	r4, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80060b6:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber       |\
 80060b8:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80060ba:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 80060bc:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber       |\
 80060be:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 80060c0:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth     |\
 80060c2:	432b      	orrs	r3, r5
                       Init->CASLatency          |\
 80060c4:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber  |\
 80060c6:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 80060c8:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 80060ca:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80060cc:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80060ce:	6002      	str	r2, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80060d0:	6043      	str	r3, [r0, #4]
 80060d2:	e7e1      	b.n	8006098 <FMC_SDRAM_Init+0x34>
 80060d4:	ffff8000 	.word	0xffff8000

080060d8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80060d8:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80060da:	2a01      	cmp	r2, #1
 80060dc:	d021      	beq.n	8006122 <FMC_SDRAM_Timing_Init+0x4a>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80060de:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80060e0:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80060e4:	680b      	ldr	r3, [r1, #0]
 80060e6:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80060e8:	684c      	ldr	r4, [r1, #4]
 80060ea:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80060ec:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80060f0:	688c      	ldr	r4, [r1, #8]
 80060f2:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80060f4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80060f8:	68cc      	ldr	r4, [r1, #12]
 80060fa:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80060fc:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006100:	690c      	ldr	r4, [r1, #16]
 8006102:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8006104:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 8006108:	694c      	ldr	r4, [r1, #20]
 800610a:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800610c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 8006110:	6989      	ldr	r1, [r1, #24]
 8006112:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006114:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006118:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800611a:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800611c:	2000      	movs	r0, #0
 800611e:	bc30      	pop	{r4, r5}
 8006120:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006122:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006124:	4c11      	ldr	r4, [pc, #68]	; (800616c <FMC_SDRAM_Timing_Init+0x94>)
 8006126:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006128:	68ca      	ldr	r2, [r1, #12]
 800612a:	1e55      	subs	r5, r2, #1
                        (((Timing->RPDelay)-1) << 20)); 
 800612c:	694b      	ldr	r3, [r1, #20]
 800612e:	1e5a      	subs	r2, r3, #1
 8006130:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006132:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 8006136:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006138:	68c4      	ldr	r4, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800613a:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800613e:	680b      	ldr	r3, [r1, #0]
 8006140:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8006142:	684d      	ldr	r5, [r1, #4]
 8006144:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006146:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800614a:	688d      	ldr	r5, [r1, #8]
 800614c:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800614e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8006152:	690d      	ldr	r5, [r1, #16]
 8006154:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006156:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 800615a:	6989      	ldr	r1, [r1, #24]
 800615c:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800615e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006162:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006164:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006166:	60c3      	str	r3, [r0, #12]
 8006168:	e7d8      	b.n	800611c <FMC_SDRAM_Timing_Init+0x44>
 800616a:	bf00      	nop
 800616c:	ff0f0fff 	.word	0xff0f0fff

08006170 <__libc_init_array>:
 8006170:	b570      	push	{r4, r5, r6, lr}
 8006172:	4e0d      	ldr	r6, [pc, #52]	; (80061a8 <__libc_init_array+0x38>)
 8006174:	4c0d      	ldr	r4, [pc, #52]	; (80061ac <__libc_init_array+0x3c>)
 8006176:	1ba4      	subs	r4, r4, r6
 8006178:	10a4      	asrs	r4, r4, #2
 800617a:	2500      	movs	r5, #0
 800617c:	42a5      	cmp	r5, r4
 800617e:	d109      	bne.n	8006194 <__libc_init_array+0x24>
 8006180:	4e0b      	ldr	r6, [pc, #44]	; (80061b0 <__libc_init_array+0x40>)
 8006182:	4c0c      	ldr	r4, [pc, #48]	; (80061b4 <__libc_init_array+0x44>)
 8006184:	f000 f820 	bl	80061c8 <_init>
 8006188:	1ba4      	subs	r4, r4, r6
 800618a:	10a4      	asrs	r4, r4, #2
 800618c:	2500      	movs	r5, #0
 800618e:	42a5      	cmp	r5, r4
 8006190:	d105      	bne.n	800619e <__libc_init_array+0x2e>
 8006192:	bd70      	pop	{r4, r5, r6, pc}
 8006194:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006198:	4798      	blx	r3
 800619a:	3501      	adds	r5, #1
 800619c:	e7ee      	b.n	800617c <__libc_init_array+0xc>
 800619e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061a2:	4798      	blx	r3
 80061a4:	3501      	adds	r5, #1
 80061a6:	e7f2      	b.n	800618e <__libc_init_array+0x1e>
 80061a8:	08007f18 	.word	0x08007f18
 80061ac:	08007f18 	.word	0x08007f18
 80061b0:	08007f18 	.word	0x08007f18
 80061b4:	08007f1c 	.word	0x08007f1c

080061b8 <memset>:
 80061b8:	4402      	add	r2, r0
 80061ba:	4603      	mov	r3, r0
 80061bc:	4293      	cmp	r3, r2
 80061be:	d100      	bne.n	80061c2 <memset+0xa>
 80061c0:	4770      	bx	lr
 80061c2:	f803 1b01 	strb.w	r1, [r3], #1
 80061c6:	e7f9      	b.n	80061bc <memset+0x4>

080061c8 <_init>:
 80061c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ca:	bf00      	nop
 80061cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ce:	bc08      	pop	{r3}
 80061d0:	469e      	mov	lr, r3
 80061d2:	4770      	bx	lr

080061d4 <_fini>:
 80061d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d6:	bf00      	nop
 80061d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061da:	bc08      	pop	{r3}
 80061dc:	469e      	mov	lr, r3
 80061de:	4770      	bx	lr
